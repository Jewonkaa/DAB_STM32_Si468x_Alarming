
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e0c  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c920  0800c920  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c928  0800c928  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000027e4  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200028a0  200028a0  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001771d  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000344c  00000000  00000000  00037809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b0  00000000  00000000  0003c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237ec  00000000  00000000  0003d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a04b  00000000  00000000  00060af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d18c9  00000000  00000000  0007ab3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c408  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000534c  00000000  00000000  0014c458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009afc 	.word	0x08009afc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08009afc 	.word	0x08009afc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f007 f996 	bl	8007a2a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20002684 	.word	0x20002684

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f004 fe2c 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f004 f825 	bl	800476c <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f004 fe23 	bl	8005374 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f004 fe1d 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f004 f816 	bl	800476c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f004 fe11 	bl	8005374 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f004 fdb6 	bl	8005374 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f004 fdb0 	bl	8005374 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f004 fda6 	bl	8005374 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f004 fd18 	bl	8005374 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f004 fd0f 	bl	8005374 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000d8 	.word	0x200000d8

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f004 fb7e 	bl	8005374 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f004 fb78 	bl	8005374 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f004 fb6f 	bl	8005374 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f004 fad5 	bl	8005374 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f004 faab 	bl	8005374 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f004 faa2 	bl	8005374 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f004 fa56 	bl	8005374 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f004 fa4d 	bl	8005374 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f004 fa01 	bl	8005374 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f004 f9f8 	bl	8005374 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800a96c 	.word	0x0800a96c
 8001010:	0800ac44 	.word	0x0800ac44

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f004 f9a8 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f004 f9a2 	bl	8005374 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f004 f996 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f004 f990 	bl	8005374 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_init>:
uint8_t actual_freq_id = 0;							//frequency table index of the frequency to which the Si468x is currently tuned in kHz

uint8_t actual_station = 0;

void Si468x_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	4837      	ldr	r0, [pc, #220]	; (8001140 <Si468x_init+0xe4>)
 8001064:	f002 f84c 	bl	8003100 <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f86c 	bl	8001144 <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f886 	bl	800117c <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f908 	bl	8001284 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f978 	bl	800136c <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa16 	bl	80014ac <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbce 	bl	8001820 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb46 	bl	8001714 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc37 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc31 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc2b 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc26 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc21 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc1b 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc15 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fc10 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fc0b 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fc06 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fc01 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbfb 	bl	8001900 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbf6 	bl	8001900 <Si468x_set_property>

	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
 8001114:	f000 fce0 	bl	8001ad8 <Si468x_dab_get_freq_list>

	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001118:	f000 fafc 	bl	8001714 <Si468x_get_sys_state>

	Display_clear_screen();
 800111c:	f002 f816 	bl	800314c <Display_clear_screen>
	Display_dab_digrad_status_background();
 8001120:	f002 f828 	bl	8003174 <Display_dab_digrad_status_background>

	Si468x_dab_full_scan();
 8001124:	f001 fa5c 	bl	80025e0 <Si468x_dab_full_scan>

	Si468x_dab_tune_freq(CH_11B);
 8001128:	201b      	movs	r0, #27
 800112a:	f000 fdb1 	bl	8001c90 <Si468x_dab_tune_freq>
	HAL_Delay(1000);
 800112e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001132:	f003 fb1b 	bl	800476c <HAL_Delay>
	Si468x_dab_get_time();
 8001136:	f001 febd 	bl	8002eb4 <Si468x_dab_get_time>
//			Si468x_dab_start_digital_service(services_list[i].service_id, services_list[i].components[0].subchannel_id);
//			break;
//		}
//	}

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	08009c68 	.word	0x08009c68

08001144 <Si468x_reset>:

void Si468x_reset()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001148:	2101      	movs	r1, #1
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <Si468x_reset+0x30>)
 800114c:	f001 ffd8 	bl	8003100 <send_debug_msg>
	RESET_PIN_LOW;
 8001150:	2200      	movs	r2, #0
 8001152:	2120      	movs	r1, #32
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <Si468x_reset+0x34>)
 8001156:	f004 f90d 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f003 fb06 	bl	800476c <HAL_Delay>
	RESET_PIN_HIGH;
 8001160:	2201      	movs	r2, #1
 8001162:	2120      	movs	r1, #32
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <Si468x_reset+0x34>)
 8001166:	f004 f905 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800116a:	20c8      	movs	r0, #200	; 0xc8
 800116c:	f003 fafe 	bl	800476c <HAL_Delay>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08009cb8 	.word	0x08009cb8
 8001178:	40020800 	.word	0x40020800

0800117c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001180:	2101      	movs	r1, #1
 8001182:	4826      	ldr	r0, [pc, #152]	; (800121c <Si468x_power_up+0xa0>)
 8001184:	f001 ffbc 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <Si468x_power_up+0xa4>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <Si468x_power_up+0xa4>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <Si468x_power_up+0xa4>)
 8001196:	2217      	movs	r2, #23
 8001198:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <Si468x_power_up+0xa4>)
 800119c:	2250      	movs	r2, #80	; 0x50
 800119e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <Si468x_power_up+0xa4>)
 80011a8:	22f8      	movs	r2, #248	; 0xf8
 80011aa:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <Si468x_power_up+0xa4>)
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <Si468x_power_up+0xa4>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <Si468x_power_up+0xa4>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <Si468x_power_up+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <Si468x_power_up+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <Si468x_power_up+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <Si468x_power_up+0xa4>)
 80011d8:	2228      	movs	r2, #40	; 0x28
 80011da:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <Si468x_power_up+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <Si468x_power_up+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011e8:	490d      	ldr	r1, [pc, #52]	; (8001220 <Si468x_power_up+0xa4>)
 80011ea:	2010      	movs	r0, #16
 80011ec:	f000 fa58 	bl	80016a0 <Si468x_write_command>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <Si468x_power_up+0xa8>)
 80011f6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f003 fab7 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <Si468x_power_up+0xac>)
 8001200:	2005      	movs	r0, #5
 8001202:	f000 fa6f 	bl	80016e4 <Si468x_read_reply>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <Si468x_power_up+0xa8>)
 800120c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800120e:	2101      	movs	r1, #1
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <Si468x_power_up+0xb0>)
 8001212:	f001 ff75 	bl	8003100 <send_debug_msg>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08009ccc 	.word	0x08009ccc
 8001220:	200000dc 	.word	0x200000dc
 8001224:	2000191c 	.word	0x2000191c
 8001228:	200010dc 	.word	0x200010dc
 800122c:	08009d08 	.word	0x08009d08

08001230 <Si468x_load_init>:

void Si468x_load_init()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001234:	2101      	movs	r1, #1
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <Si468x_load_init+0x44>)
 8001238:	f001 ff62 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <Si468x_load_init+0x48>)
 800123e:	2206      	movs	r2, #6
 8001240:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <Si468x_load_init+0x48>)
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <Si468x_load_init+0x48>)
 800124a:	2002      	movs	r0, #2
 800124c:	f000 fa28 	bl	80016a0 <Si468x_write_command>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <Si468x_load_init+0x4c>)
 8001256:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f003 fa87 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <Si468x_load_init+0x50>)
 8001260:	2005      	movs	r0, #5
 8001262:	f000 fa3f 	bl	80016e4 <Si468x_read_reply>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <Si468x_load_init+0x4c>)
 800126c:	701a      	strb	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08009d28 	.word	0x08009d28
 8001278:	200000dc 	.word	0x200000dc
 800127c:	2000191c 	.word	0x2000191c
 8001280:	200010dc 	.word	0x200010dc

08001284 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800128a:	2101      	movs	r1, #1
 800128c:	4830      	ldr	r0, [pc, #192]	; (8001350 <Si468x_bootloader_load_host+0xcc>)
 800128e:	f001 ff37 	bl	8003100 <send_debug_msg>
	Si468x_load_init();
 8001292:	f7ff ffcd 	bl	8001230 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001296:	f241 63a4 	movw	r3, #5796	; 0x16a4
 800129a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <Si468x_bootloader_load_host+0xd0>)
 800129e:	2204      	movs	r2, #4
 80012a0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	e03e      	b.n	8001338 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	e014      	b.n	80012ea <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	4924      	ldr	r1, [pc, #144]	; (8001358 <Si468x_bootloader_load_host+0xd4>)
 80012c6:	fba1 1303 	umull	r1, r3, r1, r3
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	491f      	ldr	r1, [pc, #124]	; (800135c <Si468x_bootloader_load_host+0xd8>)
 80012de:	5c89      	ldrb	r1, [r1, r2]
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012e2:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	3301      	adds	r3, #1
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <Si468x_bootloader_load_host+0xd4>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	88ba      	ldrh	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3e1      	bcc.n	80012c0 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <Si468x_bootloader_load_host+0xd4>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	3304      	adds	r3, #4
 800130a:	b29b      	uxth	r3, r3
 800130c:	4911      	ldr	r1, [pc, #68]	; (8001354 <Si468x_bootloader_load_host+0xd0>)
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9c6 	bl	80016a0 <Si468x_write_command>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <Si468x_bootloader_load_host+0xdc>)
 800131a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f003 fa25 	bl	800476c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001322:	4910      	ldr	r1, [pc, #64]	; (8001364 <Si468x_bootloader_load_host+0xe0>)
 8001324:	2005      	movs	r0, #5
 8001326:	f000 f9dd 	bl	80016e4 <Si468x_read_reply>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <Si468x_bootloader_load_host+0xdc>)
 8001330:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	3301      	adds	r3, #1
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d9bd      	bls.n	80012ba <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800133e:	2101      	movs	r1, #1
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <Si468x_bootloader_load_host+0xe4>)
 8001342:	f001 fedd 	bl	8003100 <send_debug_msg>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	08009d40 	.word	0x08009d40
 8001354:	200000dc 	.word	0x200000dc
 8001358:	aaaaaaab 	.word	0xaaaaaaab
 800135c:	0800b234 	.word	0x0800b234
 8001360:	2000191c 	.word	0x2000191c
 8001364:	200010dc 	.word	0x200010dc
 8001368:	08009d7c 	.word	0x08009d7c

0800136c <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001374:	2101      	movs	r1, #1
 8001376:	4845      	ldr	r0, [pc, #276]	; (800148c <Si468x_firmware_load_flash+0x120>)
 8001378:	f001 fec2 	bl	8003100 <send_debug_msg>
	Si468x_load_init();
 800137c:	f7ff ff58 	bl	8001230 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001382:	2205      	movs	r2, #5
 8001384:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001386:	4b42      	ldr	r3, [pc, #264]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001388:	2200      	movs	r2, #0
 800138a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800138c:	4b40      	ldr	r3, [pc, #256]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 800138e:	2200      	movs	r2, #0
 8001390:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001392:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001394:	2200      	movs	r2, #0
 8001396:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 800139e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 80013a8:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 80013b2:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0e1b      	lsrs	r3, r3, #24
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 80013bc:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013be:	2100      	movs	r1, #0
 80013c0:	4834      	ldr	r0, [pc, #208]	; (8001494 <Si468x_firmware_load_flash+0x128>)
 80013c2:	f001 fe9d 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 80013c8:	791b      	ldrb	r3, [r3, #4]
 80013ca:	2210      	movs	r2, #16
 80013cc:	4932      	ldr	r1, [pc, #200]	; (8001498 <Si468x_firmware_load_flash+0x12c>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 fb48 	bl	8009a64 <itoa>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fe91 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	2210      	movs	r2, #16
 80013e4:	492c      	ldr	r1, [pc, #176]	; (8001498 <Si468x_firmware_load_flash+0x12c>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f008 fb3c 	bl	8009a64 <itoa>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fe85 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 80013f8:	799b      	ldrb	r3, [r3, #6]
 80013fa:	2210      	movs	r2, #16
 80013fc:	4926      	ldr	r1, [pc, #152]	; (8001498 <Si468x_firmware_load_flash+0x12c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f008 fb30 	bl	8009a64 <itoa>
 8001404:	4603      	mov	r3, r0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fe79 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001410:	79db      	ldrb	r3, [r3, #7]
 8001412:	2210      	movs	r2, #16
 8001414:	4920      	ldr	r1, [pc, #128]	; (8001498 <Si468x_firmware_load_flash+0x12c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f008 fb24 	bl	8009a64 <itoa>
 800141c:	4603      	mov	r3, r0
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fe6d 	bl	8003100 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001428:	2200      	movs	r2, #0
 800142a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 800142e:	2200      	movs	r2, #0
 8001430:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001434:	2200      	movs	r2, #0
 8001436:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 800143a:	2200      	movs	r2, #0
 800143c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800143e:	4914      	ldr	r1, [pc, #80]	; (8001490 <Si468x_firmware_load_flash+0x124>)
 8001440:	200c      	movs	r0, #12
 8001442:	f000 f92d 	bl	80016a0 <Si468x_write_command>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <Si468x_firmware_load_flash+0x130>)
 800144c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f003 f98c 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001454:	4912      	ldr	r1, [pc, #72]	; (80014a0 <Si468x_firmware_load_flash+0x134>)
 8001456:	2005      	movs	r0, #5
 8001458:	f000 f944 	bl	80016e4 <Si468x_read_reply>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <Si468x_firmware_load_flash+0x130>)
 8001462:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <Si468x_firmware_load_flash+0x134>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001470:	2101      	movs	r1, #1
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <Si468x_firmware_load_flash+0x138>)
 8001474:	f001 fe44 	bl	8003100 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001478:	e003      	b.n	8001482 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800147a:	2101      	movs	r1, #1
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <Si468x_firmware_load_flash+0x13c>)
 800147e:	f001 fe3f 	bl	8003100 <send_debug_msg>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08009d9c 	.word	0x08009d9c
 8001490:	200000dc 	.word	0x200000dc
 8001494:	08009dd8 	.word	0x08009dd8
 8001498:	200018dc 	.word	0x200018dc
 800149c:	2000191c 	.word	0x2000191c
 80014a0:	200010dc 	.word	0x200010dc
 80014a4:	08009dec 	.word	0x08009dec
 80014a8:	08009dfc 	.word	0x08009dfc

080014ac <Si468x_boot>:

void Si468x_boot()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014b0:	2101      	movs	r1, #1
 80014b2:	4816      	ldr	r0, [pc, #88]	; (800150c <Si468x_boot+0x60>)
 80014b4:	f001 fe24 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <Si468x_boot+0x64>)
 80014ba:	2207      	movs	r2, #7
 80014bc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <Si468x_boot+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014c4:	4912      	ldr	r1, [pc, #72]	; (8001510 <Si468x_boot+0x64>)
 80014c6:	2002      	movs	r0, #2
 80014c8:	f000 f8ea 	bl	80016a0 <Si468x_write_command>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <Si468x_boot+0x68>)
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f003 f949 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014da:	490f      	ldr	r1, [pc, #60]	; (8001518 <Si468x_boot+0x6c>)
 80014dc:	2005      	movs	r0, #5
 80014de:	f000 f901 	bl	80016e4 <Si468x_read_reply>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <Si468x_boot+0x68>)
 80014e8:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <Si468x_boot+0x6c>)
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014f2:	2bc0      	cmp	r3, #192	; 0xc0
 80014f4:	d104      	bne.n	8001500 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014f6:	2101      	movs	r1, #1
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <Si468x_boot+0x70>)
 80014fa:	f001 fe01 	bl	8003100 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014fe:	e003      	b.n	8001508 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001500:	2101      	movs	r1, #1
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <Si468x_boot+0x74>)
 8001504:	f001 fdfc 	bl	8003100 <send_debug_msg>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	08009e18 	.word	0x08009e18
 8001510:	200000dc 	.word	0x200000dc
 8001514:	2000191c 	.word	0x2000191c
 8001518:	200010dc 	.word	0x200010dc
 800151c:	08009e54 	.word	0x08009e54
 8001520:	08009e70 	.word	0x08009e70

08001524 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <Si468x_write_single_byte+0x20>)
 8001536:	f006 fa78 	bl	8007a2a <HAL_SPI_Transmit>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000262c 	.word	0x2000262c

08001548 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001552:	1df9      	adds	r1, r7, #7
 8001554:	2364      	movs	r3, #100	; 0x64
 8001556:	2201      	movs	r2, #1
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <Si468x_read_single_byte+0x20>)
 800155a:	f006 fba2 	bl	8007ca2 <HAL_SPI_Receive>
	return data_buffer;
 800155e:	79fb      	ldrb	r3, [r7, #7]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000262c 	.word	0x2000262c

0800156c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	81fb      	strh	r3, [r7, #14]
 800157a:	e01f      	b.n	80015bc <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <Si468x_wait_for_CTS+0x6c>)
 800157e:	2001      	movs	r0, #1
 8001580:	f000 f8b0 	bl	80016e4 <Si468x_read_reply>
		if(rd_reply.cts)
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <Si468x_wait_for_CTS+0x70>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <Si468x_wait_for_CTS+0x70>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015a0:	2101      	movs	r1, #1
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <Si468x_wait_for_CTS+0x74>)
 80015a4:	f001 fdac 	bl	8003100 <send_debug_msg>
				return COMMAND_ERROR;
 80015a8:	2320      	movs	r3, #32
 80015aa:	e010      	b.n	80015ce <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e00e      	b.n	80015ce <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f003 f8db 	bl	800476c <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	3301      	adds	r3, #1
 80015ba:	81fb      	strh	r3, [r7, #14]
 80015bc:	89fa      	ldrh	r2, [r7, #14]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3db      	bcc.n	800157c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015c4:	2101      	movs	r1, #1
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <Si468x_wait_for_CTS+0x78>)
 80015c8:	f001 fd9a 	bl	8003100 <send_debug_msg>
	return TIMEOUT;
 80015cc:	2308      	movs	r3, #8
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200010dc 	.word	0x200010dc
 80015dc:	20001a0c 	.word	0x20001a0c
 80015e0:	08009e84 	.word	0x08009e84
 80015e4:	08009eac 	.word	0x08009eac

080015e8 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <Si468x_write_multiple+0x4c>)
 80015fe:	f003 feb9 	bl	8005374 <HAL_GPIO_WritePin>
	while(len--)
 8001602:	e009      	b.n	8001618 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001604:	89fb      	ldrh	r3, [r7, #14]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	81fa      	strh	r2, [r7, #14]
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff86 	bl	8001524 <Si468x_write_single_byte>
	while(len--)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	80fa      	strh	r2, [r7, #6]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <Si468x_write_multiple+0x4c>)
 8001628:	f003 fea4 	bl	8005374 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020800 	.word	0x40020800

08001638 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <Si468x_read_multiple+0x64>)
 800164e:	f003 fe91 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001652:	2003      	movs	r0, #3
 8001654:	f003 f88a 	bl	800476c <HAL_Delay>
	CS_PIN_LOW;
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <Si468x_read_multiple+0x64>)
 800165e:	f003 fe89 	bl	8005374 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff ff5e 	bl	8001524 <Si468x_write_single_byte>
	while(len--)
 8001668:	e009      	b.n	800167e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	81fa      	strh	r2, [r7, #14]
 8001670:	461a      	mov	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	189c      	adds	r4, r3, r2
 8001676:	f7ff ff67 	bl	8001548 <Si468x_read_single_byte>
 800167a:	4603      	mov	r3, r0
 800167c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	80fa      	strh	r2, [r7, #6]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001688:	2201      	movs	r2, #1
 800168a:	2110      	movs	r1, #16
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <Si468x_read_multiple+0x64>)
 800168e:	f003 fe71 	bl	8005374 <HAL_GPIO_WritePin>
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	40020800 	.word	0x40020800

080016a0 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b0:	f7ff ff5c 	bl	800156c <Si468x_wait_for_CTS>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <Si468x_write_command+0x24>
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d10a      	bne.n	80016da <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff8d 	bl	80015e8 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d2:	f7ff ff4b 	bl	800156c <Si468x_wait_for_CTS>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	6839      	ldr	r1, [r7, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff9f 	bl	8001638 <Si468x_read_multiple>
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <Si468x_read_reply+0x28>)
 80016fc:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <Si468x_read_reply+0x2c>)
 8001700:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200010dc 	.word	0x200010dc
 8001710:	20001a0c 	.word	0x20001a0c

08001714 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001718:	2101      	movs	r1, #1
 800171a:	4833      	ldr	r0, [pc, #204]	; (80017e8 <Si468x_get_sys_state+0xd4>)
 800171c:	f001 fcf0 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <Si468x_get_sys_state+0xd8>)
 8001722:	2209      	movs	r2, #9
 8001724:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <Si468x_get_sys_state+0xd8>)
 8001728:	2200      	movs	r2, #0
 800172a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800172c:	492f      	ldr	r1, [pc, #188]	; (80017ec <Si468x_get_sys_state+0xd8>)
 800172e:	2002      	movs	r0, #2
 8001730:	f7ff ffb6 	bl	80016a0 <Si468x_write_command>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <Si468x_get_sys_state+0xdc>)
 800173a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f003 f815 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001742:	492c      	ldr	r1, [pc, #176]	; (80017f4 <Si468x_get_sys_state+0xe0>)
 8001744:	2005      	movs	r0, #5
 8001746:	f7ff ffcd 	bl	80016e4 <Si468x_read_reply>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <Si468x_get_sys_state+0xdc>)
 8001750:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001752:	2100      	movs	r1, #0
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <Si468x_get_sys_state+0xe4>)
 8001756:	f001 fcd3 	bl	8003100 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <Si468x_get_sys_state+0xe0>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d83a      	bhi.n	80017d8 <Si468x_get_sys_state+0xc4>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <Si468x_get_sys_state+0x54>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001789 	.word	0x08001789
 800176c:	08001793 	.word	0x08001793
 8001770:	0800179d 	.word	0x0800179d
 8001774:	080017a7 	.word	0x080017a7
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017bb 	.word	0x080017bb
 8001780:	080017c5 	.word	0x080017c5
 8001784:	080017cf 	.word	0x080017cf
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001788:	2101      	movs	r1, #1
 800178a:	481c      	ldr	r0, [pc, #112]	; (80017fc <Si468x_get_sys_state+0xe8>)
 800178c:	f001 fcb8 	bl	8003100 <send_debug_msg>
			break;
 8001790:	e027      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001792:	2101      	movs	r1, #1
 8001794:	481a      	ldr	r0, [pc, #104]	; (8001800 <Si468x_get_sys_state+0xec>)
 8001796:	f001 fcb3 	bl	8003100 <send_debug_msg>
			break;
 800179a:	e022      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800179c:	2101      	movs	r1, #1
 800179e:	4819      	ldr	r0, [pc, #100]	; (8001804 <Si468x_get_sys_state+0xf0>)
 80017a0:	f001 fcae 	bl	8003100 <send_debug_msg>
			break;
 80017a4:	e01d      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017a6:	2101      	movs	r1, #1
 80017a8:	4817      	ldr	r0, [pc, #92]	; (8001808 <Si468x_get_sys_state+0xf4>)
 80017aa:	f001 fca9 	bl	8003100 <send_debug_msg>
			break;
 80017ae:	e018      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017b0:	2101      	movs	r1, #1
 80017b2:	4816      	ldr	r0, [pc, #88]	; (800180c <Si468x_get_sys_state+0xf8>)
 80017b4:	f001 fca4 	bl	8003100 <send_debug_msg>
			break;
 80017b8:	e013      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017ba:	2101      	movs	r1, #1
 80017bc:	4814      	ldr	r0, [pc, #80]	; (8001810 <Si468x_get_sys_state+0xfc>)
 80017be:	f001 fc9f 	bl	8003100 <send_debug_msg>
			break;
 80017c2:	e00e      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017c4:	2101      	movs	r1, #1
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <Si468x_get_sys_state+0x100>)
 80017c8:	f001 fc9a 	bl	8003100 <send_debug_msg>
			break;
 80017cc:	e009      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017ce:	2101      	movs	r1, #1
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <Si468x_get_sys_state+0x104>)
 80017d2:	f001 fc95 	bl	8003100 <send_debug_msg>
			break;
 80017d6:	e004      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017d8:	2101      	movs	r1, #1
 80017da:	4810      	ldr	r0, [pc, #64]	; (800181c <Si468x_get_sys_state+0x108>)
 80017dc:	f001 fc90 	bl	8003100 <send_debug_msg>
			break;
 80017e0:	bf00      	nop
	}
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	08009ebc 	.word	0x08009ebc
 80017ec:	200000dc 	.word	0x200000dc
 80017f0:	2000191c 	.word	0x2000191c
 80017f4:	200010dc 	.word	0x200010dc
 80017f8:	08009ef8 	.word	0x08009ef8
 80017fc:	08009f04 	.word	0x08009f04
 8001800:	08009f1c 	.word	0x08009f1c
 8001804:	08009f34 	.word	0x08009f34
 8001808:	08009f4c 	.word	0x08009f4c
 800180c:	08009f74 	.word	0x08009f74
 8001810:	08009f90 	.word	0x08009f90
 8001814:	08009fa8 	.word	0x08009fa8
 8001818:	08009fc4 	.word	0x08009fc4
 800181c:	08009fdc 	.word	0x08009fdc

08001820 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001826:	2101      	movs	r1, #1
 8001828:	482d      	ldr	r0, [pc, #180]	; (80018e0 <Si468x_get_part_info+0xc0>)
 800182a:	f001 fc69 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <Si468x_get_part_info+0xc4>)
 8001830:	2208      	movs	r2, #8
 8001832:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <Si468x_get_part_info+0xc4>)
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800183a:	492a      	ldr	r1, [pc, #168]	; (80018e4 <Si468x_get_part_info+0xc4>)
 800183c:	2002      	movs	r0, #2
 800183e:	f7ff ff2f 	bl	80016a0 <Si468x_write_command>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <Si468x_get_part_info+0xc8>)
 8001848:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f002 ff8e 	bl	800476c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fe67 	bl	8001524 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001856:	4925      	ldr	r1, [pc, #148]	; (80018ec <Si468x_get_part_info+0xcc>)
 8001858:	200a      	movs	r0, #10
 800185a:	f7ff ff43 	bl	80016e4 <Si468x_read_reply>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <Si468x_get_part_info+0xc8>)
 8001864:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001866:	2100      	movs	r1, #0
 8001868:	4821      	ldr	r0, [pc, #132]	; (80018f0 <Si468x_get_part_info+0xd0>)
 800186a:	f001 fc49 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <Si468x_get_part_info+0xcc>)
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	220a      	movs	r2, #10
 8001874:	491f      	ldr	r1, [pc, #124]	; (80018f4 <Si468x_get_part_info+0xd4>)
 8001876:	4618      	mov	r0, r3
 8001878:	f008 f8f4 	bl	8009a64 <itoa>
 800187c:	4603      	mov	r3, r0
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fc3d 	bl	8003100 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001886:	2100      	movs	r1, #0
 8001888:	481b      	ldr	r0, [pc, #108]	; (80018f8 <Si468x_get_part_info+0xd8>)
 800188a:	f001 fc39 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <Si468x_get_part_info+0xcc>)
 8001890:	795b      	ldrb	r3, [r3, #5]
 8001892:	220a      	movs	r2, #10
 8001894:	4917      	ldr	r1, [pc, #92]	; (80018f4 <Si468x_get_part_info+0xd4>)
 8001896:	4618      	mov	r0, r3
 8001898:	f008 f8e4 	bl	8009a64 <itoa>
 800189c:	4603      	mov	r3, r0
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fc2d 	bl	8003100 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4814      	ldr	r0, [pc, #80]	; (80018fc <Si468x_get_part_info+0xdc>)
 80018aa:	f001 fc29 	bl	8003100 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <Si468x_get_part_info+0xcc>)
 80018b0:	7a5b      	ldrb	r3, [r3, #9]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <Si468x_get_part_info+0xcc>)
 80018ba:	7a1b      	ldrb	r3, [r3, #8]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	220a      	movs	r2, #10
 80018c6:	490b      	ldr	r1, [pc, #44]	; (80018f4 <Si468x_get_part_info+0xd4>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f008 f8cb 	bl	8009a64 <itoa>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2101      	movs	r1, #1
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fc14 	bl	8003100 <send_debug_msg>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08009ff0 	.word	0x08009ff0
 80018e4:	200000dc 	.word	0x200000dc
 80018e8:	2000191c 	.word	0x2000191c
 80018ec:	200010dc 	.word	0x200010dc
 80018f0:	0800a02c 	.word	0x0800a02c
 80018f4:	200018dc 	.word	0x200018dc
 80018f8:	0800a03c 	.word	0x0800a03c
 80018fc:	0800a048 	.word	0x0800a048

08001900 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	460a      	mov	r2, r1
 800190a:	80fb      	strh	r3, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001910:	2101      	movs	r1, #1
 8001912:	4832      	ldr	r0, [pc, #200]	; (80019dc <Si468x_set_property+0xdc>)
 8001914:	f001 fbf4 	bl	8003100 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001918:	2100      	movs	r1, #0
 800191a:	4831      	ldr	r0, [pc, #196]	; (80019e0 <Si468x_set_property+0xe0>)
 800191c:	f001 fbf0 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	2210      	movs	r2, #16
 8001924:	492f      	ldr	r1, [pc, #188]	; (80019e4 <Si468x_set_property+0xe4>)
 8001926:	4618      	mov	r0, r3
 8001928:	f008 f89c 	bl	8009a64 <itoa>
 800192c:	4603      	mov	r3, r0
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fbe5 	bl	8003100 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001936:	2100      	movs	r1, #0
 8001938:	482b      	ldr	r0, [pc, #172]	; (80019e8 <Si468x_set_property+0xe8>)
 800193a:	f001 fbe1 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	2210      	movs	r2, #16
 8001942:	4928      	ldr	r1, [pc, #160]	; (80019e4 <Si468x_set_property+0xe4>)
 8001944:	4618      	mov	r0, r3
 8001946:	f008 f88d 	bl	8009a64 <itoa>
 800194a:	4603      	mov	r3, r0
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fbd6 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <Si468x_set_property+0xec>)
 8001956:	2213      	movs	r2, #19
 8001958:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <Si468x_set_property+0xec>)
 800195c:	2200      	movs	r2, #0
 800195e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <Si468x_set_property+0xec>)
 8001966:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b29b      	uxth	r3, r3
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <Si468x_set_property+0xec>)
 8001972:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <Si468x_set_property+0xec>)
 800197a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <Si468x_set_property+0xec>)
 8001986:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <Si468x_set_property+0xec>)
 800198a:	2006      	movs	r0, #6
 800198c:	f7ff fe88 	bl	80016a0 <Si468x_write_command>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <Si468x_set_property+0xf0>)
 8001996:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f002 fee7 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800199e:	4915      	ldr	r1, [pc, #84]	; (80019f4 <Si468x_set_property+0xf4>)
 80019a0:	2005      	movs	r0, #5
 80019a2:	f7ff fe9f 	bl	80016e4 <Si468x_read_reply>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <Si468x_set_property+0xf0>)
 80019ac:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f825 	bl	8001a00 <Si468x_get_property>
 80019b6:	4603      	mov	r3, r0
 80019b8:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019ba:	89fa      	ldrh	r2, [r7, #14]
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d104      	bne.n	80019cc <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019c2:	2101      	movs	r1, #1
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <Si468x_set_property+0xf8>)
 80019c6:	f001 fb9b 	bl	8003100 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019ca:	e003      	b.n	80019d4 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019cc:	2101      	movs	r1, #1
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <Si468x_set_property+0xfc>)
 80019d0:	f001 fb96 	bl	8003100 <send_debug_msg>
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800a058 	.word	0x0800a058
 80019e0:	0800a098 	.word	0x0800a098
 80019e4:	200018dc 	.word	0x200018dc
 80019e8:	0800a0a8 	.word	0x0800a0a8
 80019ec:	200000dc 	.word	0x200000dc
 80019f0:	2000191c 	.word	0x2000191c
 80019f4:	200010dc 	.word	0x200010dc
 80019f8:	0800a0c4 	.word	0x0800a0c4
 80019fc:	0800a0e0 	.word	0x0800a0e0

08001a00 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	482b      	ldr	r0, [pc, #172]	; (8001abc <Si468x_get_property+0xbc>)
 8001a0e:	f001 fb77 	bl	8003100 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a12:	2100      	movs	r1, #0
 8001a14:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <Si468x_get_property+0xc0>)
 8001a16:	f001 fb73 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	4929      	ldr	r1, [pc, #164]	; (8001ac4 <Si468x_get_property+0xc4>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 f81f 	bl	8009a64 <itoa>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fb68 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <Si468x_get_property+0xc8>)
 8001a32:	2214      	movs	r2, #20
 8001a34:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <Si468x_get_property+0xc8>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <Si468x_get_property+0xc8>)
 8001a42:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <Si468x_get_property+0xc8>)
 8001a4e:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a50:	491d      	ldr	r1, [pc, #116]	; (8001ac8 <Si468x_get_property+0xc8>)
 8001a52:	2004      	movs	r0, #4
 8001a54:	f7ff fe24 	bl	80016a0 <Si468x_write_command>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <Si468x_get_property+0xcc>)
 8001a5e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f002 fe83 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a66:	491a      	ldr	r1, [pc, #104]	; (8001ad0 <Si468x_get_property+0xd0>)
 8001a68:	2006      	movs	r0, #6
 8001a6a:	f7ff fe3b 	bl	80016e4 <Si468x_read_reply>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <Si468x_get_property+0xcc>)
 8001a74:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a76:	2100      	movs	r1, #0
 8001a78:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <Si468x_get_property+0xd4>)
 8001a7a:	f001 fb41 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <Si468x_get_property+0xd0>)
 8001a80:	795b      	ldrb	r3, [r3, #5]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <Si468x_get_property+0xd0>)
 8001a86:	7912      	ldrb	r2, [r2, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <Si468x_get_property+0xc4>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f007 ffe8 	bl	8009a64 <itoa>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fb31 	bl	8003100 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <Si468x_get_property+0xd0>)
 8001aa0:	795b      	ldrb	r3, [r3, #5]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <Si468x_get_property+0xd0>)
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	0800a0f8 	.word	0x0800a0f8
 8001ac0:	0800a098 	.word	0x0800a098
 8001ac4:	200018dc 	.word	0x200018dc
 8001ac8:	200000dc 	.word	0x200000dc
 8001acc:	2000191c 	.word	0x2000191c
 8001ad0:	200010dc 	.word	0x200010dc
 8001ad4:	0800a134 	.word	0x0800a134

08001ad8 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001ade:	2101      	movs	r1, #1
 8001ae0:	485d      	ldr	r0, [pc, #372]	; (8001c58 <Si468x_dab_get_freq_list+0x180>)
 8001ae2:	f001 fb0d 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <Si468x_dab_get_freq_list+0x184>)
 8001ae8:	22b9      	movs	r2, #185	; 0xb9
 8001aea:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001aec:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <Si468x_dab_get_freq_list+0x184>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001af2:	495a      	ldr	r1, [pc, #360]	; (8001c5c <Si468x_dab_get_freq_list+0x184>)
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7ff fdd3 	bl	80016a0 <Si468x_write_command>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <Si468x_dab_get_freq_list+0x188>)
 8001b00:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f002 fe32 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b08:	4956      	ldr	r1, [pc, #344]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001b0a:	2005      	movs	r0, #5
 8001b0c:	f7ff fdea 	bl	80016e4 <Si468x_read_reply>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <Si468x_dab_get_freq_list+0x188>)
 8001b16:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <Si468x_dab_get_freq_list+0x190>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <Si468x_dab_get_freq_list+0x58>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b26:	2101      	movs	r1, #1
 8001b28:	4850      	ldr	r0, [pc, #320]	; (8001c6c <Si468x_dab_get_freq_list+0x194>)
 8001b2a:	f001 fae9 	bl	8003100 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b2e:	e08e      	b.n	8001c4e <Si468x_dab_get_freq_list+0x176>
		if(dab_spi_rx_buffer[4])
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8086 	beq.w	8001c46 <Si468x_dab_get_freq_list+0x16e>
			uint8_t read_offset = 2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	70fb      	strb	r3, [r7, #3]
			freq_cnt = dab_spi_rx_buffer[4];
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001b40:	791a      	ldrb	r2, [r3, #4]
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <Si468x_dab_get_freq_list+0x198>)
 8001b44:	701a      	strb	r2, [r3, #0]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b46:	2100      	movs	r1, #0
 8001b48:	484a      	ldr	r0, [pc, #296]	; (8001c74 <Si468x_dab_get_freq_list+0x19c>)
 8001b4a:	f001 fad9 	bl	8003100 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b4e:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <Si468x_dab_get_freq_list+0x198>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	220a      	movs	r2, #10
 8001b54:	4948      	ldr	r1, [pc, #288]	; (8001c78 <Si468x_dab_get_freq_list+0x1a0>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 ff84 	bl	8009a64 <itoa>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 facd 	bl	8003100 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b66:	2101      	movs	r1, #1
 8001b68:	4844      	ldr	r0, [pc, #272]	; (8001c7c <Si468x_dab_get_freq_list+0x1a4>)
 8001b6a:	f001 fac9 	bl	8003100 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b6e:	493d      	ldr	r1, [pc, #244]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001b70:	2003      	movs	r0, #3
 8001b72:	f7ff fdb7 	bl	80016e4 <Si468x_read_reply>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <Si468x_dab_get_freq_list+0x188>)
 8001b7c:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001b7e:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <Si468x_dab_get_freq_list+0x198>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	4413      	add	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4935      	ldr	r1, [pc, #212]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fda7 	bl	80016e4 <Si468x_read_reply>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <Si468x_dab_get_freq_list+0x188>)
 8001b9c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	e049      	b.n	8001c38 <Si468x_dab_get_freq_list+0x160>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	18ca      	adds	r2, r1, r3
 8001bc4:	78f9      	ldrb	r1, [r7, #3]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	440b      	add	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	4925      	ldr	r1, [pc, #148]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	041b      	lsls	r3, r3, #16
 8001bd4:	441a      	add	r2, r3
 8001bd6:	78f9      	ldrb	r1, [r7, #3]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	440b      	add	r3, r1
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3303      	adds	r3, #3
 8001be0:	4920      	ldr	r1, [pc, #128]	; (8001c64 <Si468x_dab_get_freq_list+0x18c>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	4413      	add	r3, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <Si468x_dab_get_freq_list+0x1a8>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001bf2:	220a      	movs	r2, #10
 8001bf4:	4920      	ldr	r1, [pc, #128]	; (8001c78 <Si468x_dab_get_freq_list+0x1a0>)
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f007 ff34 	bl	8009a64 <itoa>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fa7d 	bl	8003100 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c06:	2100      	movs	r1, #0
 8001c08:	481e      	ldr	r0, [pc, #120]	; (8001c84 <Si468x_dab_get_freq_list+0x1ac>)
 8001c0a:	f001 fa79 	bl	8003100 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <Si468x_dab_get_freq_list+0x1a8>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	220a      	movs	r2, #10
 8001c18:	4917      	ldr	r1, [pc, #92]	; (8001c78 <Si468x_dab_get_freq_list+0x1a0>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 ff22 	bl	8009a64 <itoa>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fa6b 	bl	8003100 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <Si468x_dab_get_freq_list+0x1b0>)
 8001c2e:	f001 fa67 	bl	8003100 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3301      	adds	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <Si468x_dab_get_freq_list+0x198>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	dbaf      	blt.n	8001ba4 <Si468x_dab_get_freq_list+0xcc>
}
 8001c44:	e003      	b.n	8001c4e <Si468x_dab_get_freq_list+0x176>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c46:	2101      	movs	r1, #1
 8001c48:	4810      	ldr	r0, [pc, #64]	; (8001c8c <Si468x_dab_get_freq_list+0x1b4>)
 8001c4a:	f001 fa59 	bl	8003100 <send_debug_msg>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	0800a148 	.word	0x0800a148
 8001c5c:	200000dc 	.word	0x200000dc
 8001c60:	2000191c 	.word	0x2000191c
 8001c64:	200010dc 	.word	0x200010dc
 8001c68:	20001a0c 	.word	0x20001a0c
 8001c6c:	08009dec 	.word	0x08009dec
 8001c70:	200019e0 	.word	0x200019e0
 8001c74:	0800a184 	.word	0x0800a184
 8001c78:	200018dc 	.word	0x200018dc
 8001c7c:	0800a18c 	.word	0x0800a18c
 8001c80:	20001920 	.word	0x20001920
 8001c84:	0800a1a4 	.word	0x0800a1a4
 8001c88:	0800a1a8 	.word	0x0800a1a8
 8001c8c:	0800a1b0 	.word	0x0800a1b0

08001c90 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4846      	ldr	r0, [pc, #280]	; (8001db8 <Si468x_dab_tune_freq+0x128>)
 8001c9e:	f001 fa2f 	bl	8003100 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4845      	ldr	r0, [pc, #276]	; (8001dbc <Si468x_dab_tune_freq+0x12c>)
 8001ca6:	f001 fa2b 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a44      	ldr	r2, [pc, #272]	; (8001dc0 <Si468x_dab_tune_freq+0x130>)
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	220a      	movs	r2, #10
 8001cb4:	4943      	ldr	r1, [pc, #268]	; (8001dc4 <Si468x_dab_tune_freq+0x134>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 fed4 	bl	8009a64 <itoa>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fa1d 	bl	8003100 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	483f      	ldr	r0, [pc, #252]	; (8001dc8 <Si468x_dab_tune_freq+0x138>)
 8001cca:	f001 fa19 	bl	8003100 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001cd0:	22b0      	movs	r2, #176	; 0xb0
 8001cd2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cda:	4a3c      	ldr	r2, [pc, #240]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001cec:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001cf2:	4936      	ldr	r1, [pc, #216]	; (8001dcc <Si468x_dab_tune_freq+0x13c>)
 8001cf4:	2006      	movs	r0, #6
 8001cf6:	f7ff fcd3 	bl	80016a0 <Si468x_write_command>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <Si468x_dab_tune_freq+0x140>)
 8001d00:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d02:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <Si468x_dab_tune_freq+0x144>)
 8001d04:	2001      	movs	r0, #1
 8001d06:	f7ff fced 	bl	80016e4 <Si468x_read_reply>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <Si468x_dab_tune_freq+0x140>)
 8001d10:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <Si468x_dab_tune_freq+0x148>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <Si468x_dab_tune_freq+0x98>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d20:	2101      	movs	r1, #1
 8001d22:	482e      	ldr	r0, [pc, #184]	; (8001ddc <Si468x_dab_tune_freq+0x14c>)
 8001d24:	f001 f9ec 	bl	8003100 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	81fb      	strh	r3, [r7, #14]
 8001d2c:	e03a      	b.n	8001da4 <Si468x_dab_tune_freq+0x114>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d2e:	4929      	ldr	r1, [pc, #164]	; (8001dd4 <Si468x_dab_tune_freq+0x144>)
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff fcd7 	bl	80016e4 <Si468x_read_reply>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <Si468x_dab_tune_freq+0x140>)
 8001d3c:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <Si468x_dab_tune_freq+0x148>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <Si468x_dab_tune_freq+0xf6>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4824      	ldr	r0, [pc, #144]	; (8001de0 <Si468x_dab_tune_freq+0x150>)
 8001d50:	f001 f9d6 	bl	8003100 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	220a      	movs	r2, #10
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <Si468x_dab_tune_freq+0x134>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f007 fe82 	bl	8009a64 <itoa>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 f9cb 	bl	8003100 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	481d      	ldr	r0, [pc, #116]	; (8001de4 <Si468x_dab_tune_freq+0x154>)
 8001d6e:	f001 f9c7 	bl	8003100 <send_debug_msg>
			actual_freq_id = channel;
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <Si468x_dab_tune_freq+0x158>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <Si468x_dab_tune_freq+0x130>)
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <Si468x_dab_tune_freq+0x15c>)
 8001d82:	6013      	str	r3, [r2, #0]
			break;
 8001d84:	e014      	b.n	8001db0 <Si468x_dab_tune_freq+0x120>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d103      	bne.n	8001d98 <Si468x_dab_tune_freq+0x108>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001d90:	2101      	movs	r1, #1
 8001d92:	4817      	ldr	r0, [pc, #92]	; (8001df0 <Si468x_dab_tune_freq+0x160>)
 8001d94:	f001 f9b4 	bl	8003100 <send_debug_msg>
		}
		HAL_Delay(1);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f002 fce7 	bl	800476c <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	3301      	adds	r3, #1
 8001da2:	81fb      	strh	r3, [r7, #14]
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d9bf      	bls.n	8001d2e <Si468x_dab_tune_freq+0x9e>
	}
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800a1cc 	.word	0x0800a1cc
 8001dbc:	0800a208 	.word	0x0800a208
 8001dc0:	20001920 	.word	0x20001920
 8001dc4:	200018dc 	.word	0x200018dc
 8001dc8:	0800a1a8 	.word	0x0800a1a8
 8001dcc:	200000dc 	.word	0x200000dc
 8001dd0:	2000191c 	.word	0x2000191c
 8001dd4:	200010dc 	.word	0x200010dc
 8001dd8:	20001a0c 	.word	0x20001a0c
 8001ddc:	08009dec 	.word	0x08009dec
 8001de0:	0800a214 	.word	0x0800a214
 8001de4:	0800a230 	.word	0x0800a230
 8001de8:	20002560 	.word	0x20002560
 8001dec:	2000255c 	.word	0x2000255c
 8001df0:	0800a238 	.word	0x0800a238

08001df4 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af06      	add	r7, sp, #24
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <Si468x_dab_digrad_status+0x74>)
 8001dfc:	22b2      	movs	r2, #178	; 0xb2
 8001dfe:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <Si468x_dab_digrad_status+0x74>)
 8001e02:	221a      	movs	r2, #26
 8001e04:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e06:	4918      	ldr	r1, [pc, #96]	; (8001e68 <Si468x_dab_digrad_status+0x74>)
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7ff fc49 	bl	80016a0 <Si468x_write_command>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <Si468x_dab_digrad_status+0x78>)
 8001e14:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f002 fca8 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e1c:	4914      	ldr	r1, [pc, #80]	; (8001e70 <Si468x_dab_digrad_status+0x7c>)
 8001e1e:	2028      	movs	r0, #40	; 0x28
 8001e20:	f7ff fc60 	bl	80016e4 <Si468x_read_reply>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <Si468x_dab_digrad_status+0x78>)
 8001e2a:	701a      	strb	r2, [r3, #0]
	memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <Si468x_dab_digrad_status+0x80>)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <Si468x_dab_digrad_status+0x7c>)
 8001e30:	4615      	mov	r5, r2
 8001e32:	1d1c      	adds	r4, r3, #4
 8001e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e40:	e885 0003 	stmia.w	r5, {r0, r1}
	Display_dab_digrad_status_data(dab_digrad_status);
 8001e44:	4e0b      	ldr	r6, [pc, #44]	; (8001e74 <Si468x_dab_digrad_status+0x80>)
 8001e46:	466d      	mov	r5, sp
 8001e48:	f106 0410 	add.w	r4, r6, #16
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e5c:	f001 fa56 	bl	800330c <Display_dab_digrad_status_data>
}
 8001e60:	bf00      	nop
 8001e62:	3704      	adds	r7, #4
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e68:	200000dc 	.word	0x200000dc
 8001e6c:	2000191c 	.word	0x2000191c
 8001e70:	200010dc 	.word	0x200010dc
 8001e74:	200019e4 	.word	0x200019e4

08001e78 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001e7e:	2300      	movs	r3, #0
 8001e80:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001e82:	2300      	movs	r3, #0
 8001e84:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001e86:	2300      	movs	r3, #0
 8001e88:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	717b      	strb	r3, [r7, #5]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001e8e:	4ba2      	ldr	r3, [pc, #648]	; (8002118 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001e94:	4ba0      	ldr	r3, [pc, #640]	; (8002118 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e9a:	499f      	ldr	r1, [pc, #636]	; (8002118 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff fbff 	bl	80016a0 <Si468x_write_command>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b9d      	ldr	r3, [pc, #628]	; (800211c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ea8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f002 fc5e 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001eb0:	499b      	ldr	r1, [pc, #620]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb6:	f7ff fc15 	bl	80016e4 <Si468x_read_reply>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b97      	ldr	r3, [pc, #604]	; (800211c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ec0:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4897      	ldr	r0, [pc, #604]	; (8002124 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001ec6:	f001 f91b 	bl	8003100 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001eca:	4b97      	ldr	r3, [pc, #604]	; (8002128 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4894      	ldr	r0, [pc, #592]	; (800212c <Si468x_dab_get_digital_service_list+0x2b4>)
 8001edc:	f001 f910 	bl	8003100 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ee8:	795b      	ldrb	r3, [r3, #5]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	803b      	strh	r3, [r7, #0]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001ef4:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ef6:	7a1b      	ldrb	r3, [r3, #8]
 8001ef8:	71fb      	strb	r3, [r7, #7]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	713b      	strb	r3, [r7, #4]
 8001efe:	e21e      	b.n	800233e <Si468x_dab_get_digital_service_list+0x4c6>
	{
		services_list[service_index + actual_services].freq = actual_freq;
 8001f00:	793b      	ldrb	r3, [r7, #4]
 8001f02:	4a8b      	ldr	r2, [pc, #556]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a8a      	ldr	r2, [pc, #552]	; (8002134 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	498a      	ldr	r1, [pc, #552]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f0e:	2034      	movs	r0, #52	; 0x34
 8001f10:	fb00 f303 	mul.w	r3, r0, r3
 8001f14:	440b      	add	r3, r1
 8001f16:	3328      	adds	r3, #40	; 0x28
 8001f18:	601a      	str	r2, [r3, #0]
		services_list[service_index + actual_services].freq_id = actual_freq_id;
 8001f1a:	793b      	ldrb	r3, [r7, #4]
 8001f1c:	4a84      	ldr	r2, [pc, #528]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f1e:	7812      	ldrb	r2, [r2, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a86      	ldr	r2, [pc, #536]	; (800213c <Si468x_dab_get_digital_service_list+0x2c4>)
 8001f24:	7810      	ldrb	r0, [r2, #0]
 8001f26:	4a84      	ldr	r2, [pc, #528]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f28:	2134      	movs	r1, #52	; 0x34
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	332c      	adds	r3, #44	; 0x2c
 8001f32:	4602      	mov	r2, r0
 8001f34:	701a      	strb	r2, [r3, #0]

		services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001f36:	79ba      	ldrb	r2, [r7, #6]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	f103 0210 	add.w	r2, r3, #16
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f4c:	5cd2      	ldrb	r2, [r2, r3]
 8001f4e:	793b      	ldrb	r3, [r7, #4]
 8001f50:	4977      	ldr	r1, [pc, #476]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f52:	7809      	ldrb	r1, [r1, #0]
 8001f54:	440b      	add	r3, r1
 8001f56:	f002 0201 	and.w	r2, r2, #1
 8001f5a:	b2d0      	uxtb	r0, r2
 8001f5c:	4a76      	ldr	r2, [pc, #472]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f5e:	2134      	movs	r1, #52	; 0x34
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3318      	adds	r3, #24
 8001f68:	4602      	mov	r2, r0
 8001f6a:	701a      	strb	r2, [r3, #0]
		services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001f6c:	79ba      	ldrb	r2, [r7, #6]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	f103 0211 	add.w	r2, r3, #17
 8001f7a:	797b      	ldrb	r3, [r7, #5]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a67      	ldr	r2, [pc, #412]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f82:	5cd2      	ldrb	r2, [r2, r3]
 8001f84:	793b      	ldrb	r3, [r7, #4]
 8001f86:	496a      	ldr	r1, [pc, #424]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f88:	7809      	ldrb	r1, [r1, #0]
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f002 020f 	and.w	r2, r2, #15
 8001f90:	b2d0      	uxtb	r0, r2
 8001f92:	4a69      	ldr	r2, [pc, #420]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f94:	2134      	movs	r1, #52	; 0x34
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	332d      	adds	r3, #45	; 0x2d
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + actual_services].pd_flag)
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	4a62      	ldr	r2, [pc, #392]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a63      	ldr	r2, [pc, #396]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fac:	2134      	movs	r1, #52	; 0x34
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d017      	beq.n	8001fec <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	71bb      	strb	r3, [r7, #6]
			components_count += services_list[service_index + actual_services].number_of_components;
 8001fc2:	793b      	ldrb	r3, [r7, #4]
 8001fc4:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fcc:	2134      	movs	r1, #52	; 0x34
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	332d      	adds	r3, #45	; 0x2d
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	4413      	add	r3, r2
 8001fdc:	717b      	strb	r3, [r7, #5]
			service_index--;
 8001fde:	793b      	ldrb	r3, [r7, #4]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	713b      	strb	r3, [r7, #4]
			number_of_services--;
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	71fb      	strb	r3, [r7, #7]
			continue;
 8001fea:	e1a5      	b.n	8002338 <Si468x_dab_get_digital_service_list+0x4c0>
		}

		services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001fec:	79ba      	ldrb	r2, [r7, #6]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	f103 0210 	add.w	r2, r3, #16
 8001ffa:	797b      	ldrb	r3, [r7, #5]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	4a47      	ldr	r2, [pc, #284]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	105b      	asrs	r3, r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	793b      	ldrb	r3, [r7, #4]
 800200a:	4949      	ldr	r1, [pc, #292]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 800200c:	7809      	ldrb	r1, [r1, #0]
 800200e:	440b      	add	r3, r1
 8002010:	f002 021f 	and.w	r2, r2, #31
 8002014:	b2d0      	uxtb	r0, r2
 8002016:	4a48      	ldr	r2, [pc, #288]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002018:	2134      	movs	r1, #52	; 0x34
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3319      	adds	r3, #25
 8002022:	4602      	mov	r2, r0
 8002024:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + actual_services].pd_flag)
 8002026:	793b      	ldrb	r3, [r7, #4]
 8002028:	4a41      	ldr	r2, [pc, #260]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 800202a:	7812      	ldrb	r2, [r2, #0]
 800202c:	4413      	add	r3, r2
 800202e:	4a42      	ldr	r2, [pc, #264]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002030:	2134      	movs	r1, #52	; 0x34
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	3318      	adds	r3, #24
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <Si468x_dab_get_digital_service_list+0x1ce>
 8002040:	2b01      	cmp	r3, #1
 8002042:	d07d      	beq.n	8002140 <Si468x_dab_get_digital_service_list+0x2c8>
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
				break;

			default:
				break;
 8002044:	e0f2      	b.n	800222c <Si468x_dab_get_digital_service_list+0x3b4>
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8002046:	79ba      	ldrb	r2, [r7, #6]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	f103 020c 	add.w	r2, r3, #12
 8002054:	797b      	ldrb	r3, [r7, #5]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	4619      	mov	r1, r3
 8002060:	79ba      	ldrb	r2, [r7, #6]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	f103 020d 	add.w	r2, r3, #13
 800206e:	797b      	ldrb	r3, [r7, #5]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800207e:	4419      	add	r1, r3
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4608      	mov	r0, r1
 800208a:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 800208c:	2134      	movs	r1, #52	; 0x34
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	331c      	adds	r3, #28
 8002096:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002098:	79ba      	ldrb	r2, [r7, #6]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	f103 020d 	add.w	r2, r3, #13
 80020a6:	797b      	ldrb	r3, [r7, #5]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <Si468x_dab_get_digital_service_list+0x2a8>)
 80020ae:	5cd2      	ldrb	r2, [r2, r3]
 80020b0:	793b      	ldrb	r3, [r7, #4]
 80020b2:	491f      	ldr	r1, [pc, #124]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020b4:	7809      	ldrb	r1, [r1, #0]
 80020b6:	440b      	add	r3, r1
 80020b8:	0912      	lsrs	r2, r2, #4
 80020ba:	b2d0      	uxtb	r0, r2
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020be:	2134      	movs	r1, #52	; 0x34
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3320      	adds	r3, #32
 80020c8:	4602      	mov	r2, r0
 80020ca:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 80020cc:	793b      	ldrb	r3, [r7, #4]
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a18      	ldr	r2, [pc, #96]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020d6:	2134      	movs	r1, #52	; 0x34
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	3320      	adds	r3, #32
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	031b      	lsls	r3, r3, #12
 80020e4:	4618      	mov	r0, r3
 80020e6:	793b      	ldrb	r3, [r7, #4]
 80020e8:	4a11      	ldr	r2, [pc, #68]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020f0:	2134      	movs	r1, #52	; 0x34
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	331c      	adds	r3, #28
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	793b      	ldrb	r3, [r7, #4]
 80020fe:	490c      	ldr	r1, [pc, #48]	; (8002130 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002100:	7809      	ldrb	r1, [r1, #0]
 8002102:	440b      	add	r3, r1
 8002104:	4402      	add	r2, r0
 8002106:	490c      	ldr	r1, [pc, #48]	; (8002138 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002108:	2034      	movs	r0, #52	; 0x34
 800210a:	fb00 f303 	mul.w	r3, r0, r3
 800210e:	440b      	add	r3, r1
 8002110:	3324      	adds	r3, #36	; 0x24
 8002112:	601a      	str	r2, [r3, #0]
				break;
 8002114:	e08a      	b.n	800222c <Si468x_dab_get_digital_service_list+0x3b4>
 8002116:	bf00      	nop
 8002118:	200000dc 	.word	0x200000dc
 800211c:	2000191c 	.word	0x2000191c
 8002120:	200010dc 	.word	0x200010dc
 8002124:	0800a298 	.word	0x0800a298
 8002128:	20001a0c 	.word	0x20001a0c
 800212c:	08009dec 	.word	0x08009dec
 8002130:	2000255a 	.word	0x2000255a
 8002134:	2000255c 	.word	0x2000255c
 8002138:	20001b30 	.word	0x20001b30
 800213c:	20002560 	.word	0x20002560
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8002140:	79ba      	ldrb	r2, [r7, #6]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f103 020c 	add.w	r2, r3, #12
 800214e:	797b      	ldrb	r3, [r7, #5]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	4a85      	ldr	r2, [pc, #532]	; (800236c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	4619      	mov	r1, r3
 800215a:	79ba      	ldrb	r2, [r7, #6]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f103 020d 	add.w	r2, r3, #13
 8002168:	797b      	ldrb	r3, [r7, #5]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	4a7f      	ldr	r2, [pc, #508]	; (800236c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	4419      	add	r1, r3
 8002176:	79ba      	ldrb	r2, [r7, #6]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	f103 020e 	add.w	r2, r3, #14
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	4a78      	ldr	r2, [pc, #480]	; (800236c <Si468x_dab_get_digital_service_list+0x4f4>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002194:	4419      	add	r1, r3
 8002196:	793b      	ldrb	r3, [r7, #4]
 8002198:	4a75      	ldr	r2, [pc, #468]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	4413      	add	r3, r2
 800219e:	4608      	mov	r0, r1
 80021a0:	4a74      	ldr	r2, [pc, #464]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021a2:	2134      	movs	r1, #52	; 0x34
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	331c      	adds	r3, #28
 80021ac:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80021ae:	79ba      	ldrb	r2, [r7, #6]
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	f103 020e 	add.w	r2, r3, #14
 80021bc:	797b      	ldrb	r3, [r7, #5]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	4a6a      	ldr	r2, [pc, #424]	; (800236c <Si468x_dab_get_digital_service_list+0x4f4>)
 80021c4:	5cd2      	ldrb	r2, [r2, r3]
 80021c6:	793b      	ldrb	r3, [r7, #4]
 80021c8:	4969      	ldr	r1, [pc, #420]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021ca:	7809      	ldrb	r1, [r1, #0]
 80021cc:	440b      	add	r3, r1
 80021ce:	0912      	lsrs	r2, r2, #4
 80021d0:	b2d0      	uxtb	r0, r2
 80021d2:	4a68      	ldr	r2, [pc, #416]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021d4:	2134      	movs	r1, #52	; 0x34
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3320      	adds	r3, #32
 80021de:	4602      	mov	r2, r0
 80021e0:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 80021e2:	793b      	ldrb	r3, [r7, #4]
 80021e4:	4a62      	ldr	r2, [pc, #392]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021e6:	7812      	ldrb	r2, [r2, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a62      	ldr	r2, [pc, #392]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021ec:	2134      	movs	r1, #52	; 0x34
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3320      	adds	r3, #32
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	4618      	mov	r0, r3
 80021fc:	793b      	ldrb	r3, [r7, #4]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002206:	2134      	movs	r1, #52	; 0x34
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	331c      	adds	r3, #28
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	793b      	ldrb	r3, [r7, #4]
 8002214:	4956      	ldr	r1, [pc, #344]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002216:	7809      	ldrb	r1, [r1, #0]
 8002218:	440b      	add	r3, r1
 800221a:	4402      	add	r2, r0
 800221c:	4955      	ldr	r1, [pc, #340]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 800221e:	2034      	movs	r0, #52	; 0x34
 8002220:	fb00 f303 	mul.w	r3, r0, r3
 8002224:	440b      	add	r3, r1
 8002226:	3324      	adds	r3, #36	; 0x24
 8002228:	601a      	str	r2, [r3, #0]
				break;
 800222a:	bf00      	nop
		}

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800222c:	2300      	movs	r3, #0
 800222e:	70fb      	strb	r3, [r7, #3]
 8002230:	e038      	b.n	80022a4 <Si468x_dab_get_digital_service_list+0x42c>
		{
			services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f103 0114 	add.w	r1, r3, #20
 8002238:	79ba      	ldrb	r2, [r7, #6]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	18ca      	adds	r2, r1, r3
 8002244:	797b      	ldrb	r3, [r7, #5]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	18d1      	adds	r1, r2, r3
 800224a:	793b      	ldrb	r3, [r7, #4]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	441a      	add	r2, r3
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	4845      	ldr	r0, [pc, #276]	; (800236c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002256:	5c44      	ldrb	r4, [r0, r1]
 8002258:	4946      	ldr	r1, [pc, #280]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 800225a:	2034      	movs	r0, #52	; 0x34
 800225c:	fb00 f202 	mul.w	r2, r0, r2
 8002260:	440a      	add	r2, r1
 8002262:	4413      	add	r3, r2
 8002264:	4622      	mov	r2, r4
 8002266:	701a      	strb	r2, [r3, #0]
			if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 8002268:	793b      	ldrb	r3, [r7, #4]
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	441a      	add	r2, r3
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	4940      	ldr	r1, [pc, #256]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002274:	2034      	movs	r0, #52	; 0x34
 8002276:	fb00 f202 	mul.w	r2, r0, r2
 800227a:	440a      	add	r2, r1
 800227c:	4413      	add	r3, r2
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b86      	cmp	r3, #134	; 0x86
 8002282:	d10c      	bne.n	800229e <Si468x_dab_get_digital_service_list+0x426>
			{
				services_list[service_index + actual_services].name[name_index] = 0x6F;
 8002284:	793b      	ldrb	r3, [r7, #4]
 8002286:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	441a      	add	r2, r3
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	4939      	ldr	r1, [pc, #228]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002290:	2034      	movs	r0, #52	; 0x34
 8002292:	fb00 f202 	mul.w	r2, r0, r2
 8002296:	440a      	add	r2, r1
 8002298:	4413      	add	r3, r2
 800229a:	226f      	movs	r2, #111	; 0x6f
 800229c:	701a      	strb	r2, [r3, #0]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	3301      	adds	r3, #1
 80022a2:	70fb      	strb	r3, [r7, #3]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	d9c3      	bls.n	8002232 <Si468x_dab_get_digital_service_list+0x3ba>
			}
		}

		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	70bb      	strb	r3, [r7, #2]
 80022ae:	e032      	b.n	8002316 <Si468x_dab_get_digital_service_list+0x49e>
		{
			services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80022b0:	793b      	ldrb	r3, [r7, #4]
 80022b2:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	441a      	add	r2, r3
 80022b8:	78bb      	ldrb	r3, [r7, #2]
 80022ba:	492e      	ldr	r1, [pc, #184]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 80022bc:	201a      	movs	r0, #26
 80022be:	fb00 f202 	mul.w	r2, r0, r2
 80022c2:	4413      	add	r3, r2
 80022c4:	3314      	adds	r3, #20
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	2200      	movs	r2, #0
 80022cc:	71da      	strb	r2, [r3, #7]
			services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80022ce:	79ba      	ldrb	r2, [r7, #6]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80022dc:	797b      	ldrb	r3, [r7, #5]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	4a22      	ldr	r2, [pc, #136]	; (800236c <Si468x_dab_get_digital_service_list+0x4f4>)
 80022e4:	5cd1      	ldrb	r1, [r2, r3]
 80022e6:	793b      	ldrb	r3, [r7, #4]
 80022e8:	4a21      	ldr	r2, [pc, #132]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	441a      	add	r2, r3
 80022ee:	78bb      	ldrb	r3, [r7, #2]
 80022f0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80022f4:	b2cc      	uxtb	r4, r1
 80022f6:	491f      	ldr	r1, [pc, #124]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 80022f8:	201a      	movs	r0, #26
 80022fa:	fb00 f202 	mul.w	r2, r0, r2
 80022fe:	4413      	add	r3, r2
 8002300:	3314      	adds	r3, #20
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	440b      	add	r3, r1
 8002306:	4622      	mov	r2, r4
 8002308:	719a      	strb	r2, [r3, #6]
			components_count++;
 800230a:	797b      	ldrb	r3, [r7, #5]
 800230c:	3301      	adds	r3, #1
 800230e:	717b      	strb	r3, [r7, #5]
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002310:	78bb      	ldrb	r3, [r7, #2]
 8002312:	3301      	adds	r3, #1
 8002314:	70bb      	strb	r3, [r7, #2]
 8002316:	793b      	ldrb	r3, [r7, #4]
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	4413      	add	r3, r2
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002320:	2134      	movs	r1, #52	; 0x34
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	332d      	adds	r3, #45	; 0x2d
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	78ba      	ldrb	r2, [r7, #2]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3be      	bcc.n	80022b0 <Si468x_dab_get_digital_service_list+0x438>
		}
		services_count++;
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	3301      	adds	r3, #1
 8002336:	71bb      	strb	r3, [r7, #6]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8002338:	793b      	ldrb	r3, [r7, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	713b      	strb	r3, [r7, #4]
 800233e:	793a      	ldrb	r2, [r7, #4]
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	429a      	cmp	r2, r3
 8002344:	f4ff addc 	bcc.w	8001f00 <Si468x_dab_get_digital_service_list+0x88>
	}

	total_services += number_of_services;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <Si468x_dab_get_digital_service_list+0x500>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4413      	add	r3, r2
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <Si468x_dab_get_digital_service_list+0x500>)
 8002354:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4413      	add	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002362:	701a      	strb	r2, [r3, #0]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	200010dc 	.word	0x200010dc
 8002370:	2000255a 	.word	0x2000255a
 8002374:	20001b30 	.word	0x20001b30
 8002378:	20002558 	.word	0x20002558

0800237c <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8002386:	2101      	movs	r1, #1
 8002388:	482d      	ldr	r0, [pc, #180]	; (8002440 <Si468x_dab_start_digital_service+0xc4>)
 800238a:	f000 feb9 	bl	8003100 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 8002390:	2281      	movs	r2, #129	; 0x81
 8002392:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 800239c:	2200      	movs	r2, #0
 800239e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023ac:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023b6:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023c0:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0e1b      	lsrs	r3, r3, #24
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023ca:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023d2:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023dc:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023e6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	0e1b      	lsrs	r3, r3, #24
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023f0:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80023f2:	4914      	ldr	r1, [pc, #80]	; (8002444 <Si468x_dab_start_digital_service+0xc8>)
 80023f4:	200c      	movs	r0, #12
 80023f6:	f7ff f953 	bl	80016a0 <Si468x_write_command>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <Si468x_dab_start_digital_service+0xcc>)
 8002400:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002402:	2001      	movs	r0, #1
 8002404:	f002 f9b2 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002408:	4910      	ldr	r1, [pc, #64]	; (800244c <Si468x_dab_start_digital_service+0xd0>)
 800240a:	2005      	movs	r0, #5
 800240c:	f7ff f96a 	bl	80016e4 <Si468x_read_reply>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <Si468x_dab_start_digital_service+0xcc>)
 8002416:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <Si468x_dab_start_digital_service+0xd4>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002426:	2101      	movs	r1, #1
 8002428:	480a      	ldr	r0, [pc, #40]	; (8002454 <Si468x_dab_start_digital_service+0xd8>)
 800242a:	f000 fe69 	bl	8003100 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 800242e:	e003      	b.n	8002438 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002430:	2101      	movs	r1, #1
 8002432:	4809      	ldr	r0, [pc, #36]	; (8002458 <Si468x_dab_start_digital_service+0xdc>)
 8002434:	f000 fe64 	bl	8003100 <send_debug_msg>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	0800a2d4 	.word	0x0800a2d4
 8002444:	200000dc 	.word	0x200000dc
 8002448:	2000191c 	.word	0x2000191c
 800244c:	200010dc 	.word	0x200010dc
 8002450:	20001a0c 	.word	0x20001a0c
 8002454:	08009dec 	.word	0x08009dec
 8002458:	0800a310 	.word	0x0800a310

0800245c <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 8002466:	2101      	movs	r1, #1
 8002468:	4851      	ldr	r0, [pc, #324]	; (80025b0 <Si468x_dab_get_ensemble_info+0x154>)
 800246a:	f000 fe49 	bl	8003100 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <Si468x_dab_get_ensemble_info+0x158>)
 8002470:	22b4      	movs	r2, #180	; 0xb4
 8002472:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002474:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <Si468x_dab_get_ensemble_info+0x158>)
 8002476:	2200      	movs	r2, #0
 8002478:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800247a:	494e      	ldr	r1, [pc, #312]	; (80025b4 <Si468x_dab_get_ensemble_info+0x158>)
 800247c:	2002      	movs	r0, #2
 800247e:	f7ff f90f 	bl	80016a0 <Si468x_write_command>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <Si468x_dab_get_ensemble_info+0x15c>)
 8002488:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800248a:	2002      	movs	r0, #2
 800248c:	f002 f96e 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002490:	494a      	ldr	r1, [pc, #296]	; (80025bc <Si468x_dab_get_ensemble_info+0x160>)
 8002492:	2015      	movs	r0, #21
 8002494:	f7ff f926 	bl	80016e4 <Si468x_read_reply>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <Si468x_dab_get_ensemble_info+0x15c>)
 800249e:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 80024a0:	e012      	b.n	80024c8 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80024a2:	4944      	ldr	r1, [pc, #272]	; (80025b4 <Si468x_dab_get_ensemble_info+0x158>)
 80024a4:	2002      	movs	r0, #2
 80024a6:	f7ff f8fb 	bl	80016a0 <Si468x_write_command>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <Si468x_dab_get_ensemble_info+0x15c>)
 80024b0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80024b2:	2002      	movs	r0, #2
 80024b4:	f002 f95a 	bl	800476c <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80024b8:	4940      	ldr	r1, [pc, #256]	; (80025bc <Si468x_dab_get_ensemble_info+0x160>)
 80024ba:	2015      	movs	r0, #21
 80024bc:	f7ff f912 	bl	80016e4 <Si468x_read_reply>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <Si468x_dab_get_ensemble_info+0x15c>)
 80024c6:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80024c8:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <Si468x_dab_get_ensemble_info+0x160>)
 80024ca:	799b      	ldrb	r3, [r3, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0e8      	beq.n	80024a2 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80024d0:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <Si468x_dab_get_ensemble_info+0x164>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80024de:	2101      	movs	r1, #1
 80024e0:	4838      	ldr	r0, [pc, #224]	; (80025c4 <Si468x_dab_get_ensemble_info+0x168>)
 80024e2:	f000 fe0d 	bl	8003100 <send_debug_msg>
		return 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e05d      	b.n	80025a6 <Si468x_dab_get_ensemble_info+0x14a>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <Si468x_dab_get_ensemble_info+0x160>)
 80024ec:	795b      	ldrb	r3, [r3, #5]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	4a32      	ldr	r2, [pc, #200]	; (80025bc <Si468x_dab_get_ensemble_info+0x160>)
 80024f2:	7912      	ldrb	r2, [r2, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d04e      	beq.n	800259c <Si468x_dab_get_ensemble_info+0x140>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80024fe:	2101      	movs	r1, #1
 8002500:	4831      	ldr	r0, [pc, #196]	; (80025c8 <Si468x_dab_get_ensemble_info+0x16c>)
 8002502:	f000 fdfd 	bl	8003100 <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <Si468x_dab_get_ensemble_info+0x170>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4619      	mov	r1, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b298      	uxth	r0, r3
 8002510:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <Si468x_dab_get_ensemble_info+0x174>)
 8002512:	460b      	mov	r3, r1
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a5b      	subs	r3, r3, r1
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	4602      	mov	r2, r0
 800251e:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <Si468x_dab_get_ensemble_info+0x170>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <Si468x_dab_get_ensemble_info+0x178>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4929      	ldr	r1, [pc, #164]	; (80025d0 <Si468x_dab_get_ensemble_info+0x174>)
 800252c:	4603      	mov	r3, r0
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a1b      	subs	r3, r3, r0
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3314      	adds	r3, #20
 8002538:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <Si468x_dab_get_ensemble_info+0x170>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <Si468x_dab_get_ensemble_info+0x17c>)
 8002542:	7818      	ldrb	r0, [r3, #0]
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <Si468x_dab_get_ensemble_info+0x174>)
 8002546:	460b      	mov	r3, r1
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a5b      	subs	r3, r3, r1
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3318      	adds	r3, #24
 8002552:	4602      	mov	r2, r0
 8002554:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	e014      	b.n	8002586 <Si468x_dab_get_ensemble_info+0x12a>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	3306      	adds	r3, #6
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <Si468x_dab_get_ensemble_info+0x170>)
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	4610      	mov	r0, r2
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	4914      	ldr	r1, [pc, #80]	; (80025bc <Si468x_dab_get_ensemble_info+0x160>)
 800256a:	5ccc      	ldrb	r4, [r1, r3]
 800256c:	4918      	ldr	r1, [pc, #96]	; (80025d0 <Si468x_dab_get_ensemble_info+0x174>)
 800256e:	4603      	mov	r3, r0
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a1b      	subs	r3, r3, r0
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	4413      	add	r3, r2
 800257a:	3302      	adds	r3, #2
 800257c:	4622      	mov	r2, r4
 800257e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	3301      	adds	r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d9e7      	bls.n	800255c <Si468x_dab_get_ensemble_info+0x100>
			}

			total_ensembles++;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <Si468x_dab_get_ensemble_info+0x170>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <Si468x_dab_get_ensemble_info+0x170>)
 8002596:	701a      	strb	r2, [r3, #0]
			return 1;
 8002598:	2301      	movs	r3, #1
 800259a:	e004      	b.n	80025a6 <Si468x_dab_get_ensemble_info+0x14a>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800259c:	2101      	movs	r1, #1
 800259e:	480f      	ldr	r0, [pc, #60]	; (80025dc <Si468x_dab_get_ensemble_info+0x180>)
 80025a0:	f000 fdae 	bl	8003100 <send_debug_msg>
			return 0;
 80025a4:	2300      	movs	r3, #0
		}
	}
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800a330 	.word	0x0800a330
 80025b4:	200000dc 	.word	0x200000dc
 80025b8:	2000191c 	.word	0x2000191c
 80025bc:	200010dc 	.word	0x200010dc
 80025c0:	20001a0c 	.word	0x20001a0c
 80025c4:	08009dec 	.word	0x08009dec
 80025c8:	0800a36c 	.word	0x0800a36c
 80025cc:	20002559 	.word	0x20002559
 80025d0:	20001a18 	.word	0x20001a18
 80025d4:	2000255c 	.word	0x2000255c
 80025d8:	20002560 	.word	0x20002560
 80025dc:	0800a37c 	.word	0x0800a37c

080025e0 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 80025e6:	2101      	movs	r1, #1
 80025e8:	48ae      	ldr	r0, [pc, #696]	; (80028a4 <Si468x_dab_full_scan+0x2c4>)
 80025ea:	f000 fd89 	bl	8003100 <send_debug_msg>
	total_services = 0;
 80025ee:	4bae      	ldr	r3, [pc, #696]	; (80028a8 <Si468x_dab_full_scan+0x2c8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 80025f4:	4bad      	ldr	r3, [pc, #692]	; (80028ac <Si468x_dab_full_scan+0x2cc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 80025fa:	4bad      	ldr	r3, [pc, #692]	; (80028b0 <Si468x_dab_full_scan+0x2d0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]

	uint8_t valid_timeout = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	71fb      	strb	r3, [r7, #7]
	uint8_t fic_q_timeout = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	71bb      	strb	r3, [r7, #6]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002608:	2300      	movs	r3, #0
 800260a:	717b      	strb	r3, [r7, #5]
 800260c:	e05f      	b.n	80026ce <Si468x_dab_full_scan+0xee>
	{
//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 800260e:	2304      	movs	r3, #4
 8002610:	71fb      	strb	r3, [r7, #7]
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002612:	2364      	movs	r3, #100	; 0x64
 8002614:	71bb      	strb	r3, [r7, #6]

		Si468x_dab_tune_freq(freq_index);
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fb39 	bl	8001c90 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 800261e:	f7ff fbe9 	bl	8001df4 <Si468x_dab_digrad_status>
			valid_timeout--;
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	3b01      	subs	r3, #1
 8002626:	71fb      	strb	r3, [r7, #7]
			if(!valid_timeout)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d104      	bne.n	8002638 <Si468x_dab_full_scan+0x58>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 800262e:	2101      	movs	r1, #1
 8002630:	48a0      	ldr	r0, [pc, #640]	; (80028b4 <Si468x_dab_full_scan+0x2d4>)
 8002632:	f000 fd65 	bl	8003100 <send_debug_msg>
				break;
 8002636:	e010      	b.n	800265a <Si468x_dab_full_scan+0x7a>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002638:	2032      	movs	r0, #50	; 0x32
 800263a:	f002 f897 	bl	800476c <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 800263e:	4b9e      	ldr	r3, [pc, #632]	; (80028b8 <Si468x_dab_full_scan+0x2d8>)
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0e8      	beq.n	800261e <Si468x_dab_full_scan+0x3e>
 800264c:	4b9a      	ldr	r3, [pc, #616]	; (80028b8 <Si468x_dab_full_scan+0x2d8>)
 800264e:	785b      	ldrb	r3, [r3, #1]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0e1      	beq.n	800261e <Si468x_dab_full_scan+0x3e>

		if(valid_timeout)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <Si468x_dab_full_scan+0xa8>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002660:	f7ff fbc8 	bl	8001df4 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	3b01      	subs	r3, #1
 8002668:	71bb      	strb	r3, [r7, #6]
				if(!fic_q_timeout)
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d104      	bne.n	800267a <Si468x_dab_full_scan+0x9a>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002670:	2101      	movs	r1, #1
 8002672:	4890      	ldr	r0, [pc, #576]	; (80028b4 <Si468x_dab_full_scan+0x2d4>)
 8002674:	f000 fd44 	bl	8003100 <send_debug_msg>
					break;
 8002678:	e006      	b.n	8002688 <Si468x_dab_full_scan+0xa8>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800267a:	2032      	movs	r0, #50	; 0x32
 800267c:	f002 f876 	bl	800476c <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 8002680:	4b8d      	ldr	r3, [pc, #564]	; (80028b8 <Si468x_dab_full_scan+0x2d8>)
 8002682:	791b      	ldrb	r3, [r3, #4]
 8002684:	2b31      	cmp	r3, #49	; 0x31
 8002686:	d9eb      	bls.n	8002660 <Si468x_dab_full_scan+0x80>
		}

		if(valid_timeout && fic_q_timeout)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01c      	beq.n	80026c8 <Si468x_dab_full_scan+0xe8>
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d019      	beq.n	80026c8 <Si468x_dab_full_scan+0xe8>
		{
			do
			{
				Si468x_dab_get_event_status();
 8002694:	f000 fb20 	bl	8002cd8 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 8002698:	200a      	movs	r0, #10
 800269a:	f002 f867 	bl	800476c <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 800269e:	4b87      	ldr	r3, [pc, #540]	; (80028bc <Si468x_dab_full_scan+0x2dc>)
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f3      	beq.n	8002694 <Si468x_dab_full_scan+0xb4>
 80026ac:	4b83      	ldr	r3, [pc, #524]	; (80028bc <Si468x_dab_full_scan+0x2dc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ec      	bne.n	8002694 <Si468x_dab_full_scan+0xb4>

			if(Si468x_dab_get_ensemble_info())
 80026ba:	f7ff fecf 	bl	800245c <Si468x_dab_get_ensemble_info>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <Si468x_dab_full_scan+0xe8>
			{
				Si468x_dab_get_digital_service_list();
 80026c4:	f7ff fbd8 	bl	8001e78 <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 80026c8:	797b      	ldrb	r3, [r7, #5]
 80026ca:	3301      	adds	r3, #1
 80026cc:	717b      	strb	r3, [r7, #5]
 80026ce:	4b7c      	ldr	r3, [pc, #496]	; (80028c0 <Si468x_dab_full_scan+0x2e0>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	797a      	ldrb	r2, [r7, #5]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d39a      	bcc.n	800260e <Si468x_dab_full_scan+0x2e>
			}
		}
	}

	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80026d8:	2100      	movs	r1, #0
 80026da:	487a      	ldr	r0, [pc, #488]	; (80028c4 <Si468x_dab_full_scan+0x2e4>)
 80026dc:	f000 fd10 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80026e0:	4b72      	ldr	r3, [pc, #456]	; (80028ac <Si468x_dab_full_scan+0x2cc>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	220a      	movs	r2, #10
 80026e6:	4978      	ldr	r1, [pc, #480]	; (80028c8 <Si468x_dab_full_scan+0x2e8>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f007 f9bb 	bl	8009a64 <itoa>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fd04 	bl	8003100 <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80026f8:	2101      	movs	r1, #1
 80026fa:	4874      	ldr	r0, [pc, #464]	; (80028cc <Si468x_dab_full_scan+0x2ec>)
 80026fc:	f000 fd00 	bl	8003100 <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 8002700:	2100      	movs	r1, #0
 8002702:	4873      	ldr	r0, [pc, #460]	; (80028d0 <Si468x_dab_full_scan+0x2f0>)
 8002704:	f000 fcfc 	bl	8003100 <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002708:	2100      	movs	r1, #0
 800270a:	4872      	ldr	r0, [pc, #456]	; (80028d4 <Si468x_dab_full_scan+0x2f4>)
 800270c:	f000 fcf8 	bl	8003100 <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002710:	2100      	movs	r1, #0
 8002712:	4871      	ldr	r0, [pc, #452]	; (80028d8 <Si468x_dab_full_scan+0x2f8>)
 8002714:	f000 fcf4 	bl	8003100 <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 8002718:	2101      	movs	r1, #1
 800271a:	4870      	ldr	r0, [pc, #448]	; (80028dc <Si468x_dab_full_scan+0x2fc>)
 800271c:	f000 fcf0 	bl	8003100 <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002720:	2300      	movs	r3, #0
 8002722:	713b      	strb	r3, [r7, #4]
 8002724:	e060      	b.n	80027e8 <Si468x_dab_full_scan+0x208>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 8002726:	2100      	movs	r1, #0
 8002728:	486d      	ldr	r0, [pc, #436]	; (80028e0 <Si468x_dab_full_scan+0x300>)
 800272a:	f000 fce9 	bl	8003100 <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 800272e:	793b      	ldrb	r3, [r7, #4]
 8002730:	220a      	movs	r2, #10
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <Si468x_dab_full_scan+0x2e8>)
 8002734:	4618      	mov	r0, r3
 8002736:	f007 f995 	bl	8009a64 <itoa>
 800273a:	4603      	mov	r3, r0
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fcde 	bl	8003100 <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 8002744:	2100      	movs	r1, #0
 8002746:	4867      	ldr	r0, [pc, #412]	; (80028e4 <Si468x_dab_full_scan+0x304>)
 8002748:	f000 fcda 	bl	8003100 <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800274c:	793a      	ldrb	r2, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4a64      	ldr	r2, [pc, #400]	; (80028e8 <Si468x_dab_full_scan+0x308>)
 8002758:	4413      	add	r3, r2
 800275a:	3302      	adds	r3, #2
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fcce 	bl	8003100 <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 8002764:	2100      	movs	r1, #0
 8002766:	485e      	ldr	r0, [pc, #376]	; (80028e0 <Si468x_dab_full_scan+0x300>)
 8002768:	f000 fcca 	bl	8003100 <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800276c:	793a      	ldrb	r2, [r7, #4]
 800276e:	495e      	ldr	r1, [pc, #376]	; (80028e8 <Si468x_dab_full_scan+0x308>)
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3314      	adds	r3, #20
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	220a      	movs	r2, #10
 8002780:	4951      	ldr	r1, [pc, #324]	; (80028c8 <Si468x_dab_full_scan+0x2e8>)
 8002782:	4618      	mov	r0, r3
 8002784:	f007 f96e 	bl	8009a64 <itoa>
 8002788:	4603      	mov	r3, r0
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fcb7 	bl	8003100 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002792:	2100      	movs	r1, #0
 8002794:	4855      	ldr	r0, [pc, #340]	; (80028ec <Si468x_dab_full_scan+0x30c>)
 8002796:	f000 fcb3 	bl	8003100 <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 800279a:	793a      	ldrb	r2, [r7, #4]
 800279c:	4952      	ldr	r1, [pc, #328]	; (80028e8 <Si468x_dab_full_scan+0x308>)
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3318      	adds	r3, #24
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <Si468x_dab_full_scan+0x310>)
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fca2 	bl	8003100 <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 80027bc:	793a      	ldrb	r2, [r7, #4]
 80027be:	494a      	ldr	r1, [pc, #296]	; (80028e8 <Si468x_dab_full_scan+0x308>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3318      	adds	r3, #24
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b13      	cmp	r3, #19
 80027d0:	d803      	bhi.n	80027da <Si468x_dab_full_scan+0x1fa>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80027d2:	2100      	movs	r1, #0
 80027d4:	4847      	ldr	r0, [pc, #284]	; (80028f4 <Si468x_dab_full_scan+0x314>)
 80027d6:	f000 fc93 	bl	8003100 <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 80027da:	2101      	movs	r1, #1
 80027dc:	4846      	ldr	r0, [pc, #280]	; (80028f8 <Si468x_dab_full_scan+0x318>)
 80027de:	f000 fc8f 	bl	8003100 <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 80027e2:	793b      	ldrb	r3, [r7, #4]
 80027e4:	3301      	adds	r3, #1
 80027e6:	713b      	strb	r3, [r7, #4]
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <Si468x_dab_full_scan+0x2cc>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	793a      	ldrb	r2, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d399      	bcc.n	8002726 <Si468x_dab_full_scan+0x146>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027f2:	2101      	movs	r1, #1
 80027f4:	4835      	ldr	r0, [pc, #212]	; (80028cc <Si468x_dab_full_scan+0x2ec>)
 80027f6:	f000 fc83 	bl	8003100 <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 80027fa:	2100      	movs	r1, #0
 80027fc:	483f      	ldr	r0, [pc, #252]	; (80028fc <Si468x_dab_full_scan+0x31c>)
 80027fe:	f000 fc7f 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 8002802:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <Si468x_dab_full_scan+0x2c8>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	220a      	movs	r2, #10
 8002808:	492f      	ldr	r1, [pc, #188]	; (80028c8 <Si468x_dab_full_scan+0x2e8>)
 800280a:	4618      	mov	r0, r3
 800280c:	f007 f92a 	bl	8009a64 <itoa>
 8002810:	4603      	mov	r3, r0
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fc73 	bl	8003100 <send_debug_msg>

	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800281a:	2101      	movs	r1, #1
 800281c:	4838      	ldr	r0, [pc, #224]	; (8002900 <Si468x_dab_full_scan+0x320>)
 800281e:	f000 fc6f 	bl	8003100 <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8002822:	2101      	movs	r1, #1
 8002824:	4837      	ldr	r0, [pc, #220]	; (8002904 <Si468x_dab_full_scan+0x324>)
 8002826:	f000 fc6b 	bl	8003100 <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 800282a:	2300      	movs	r3, #0
 800282c:	70fb      	strb	r3, [r7, #3]
 800282e:	e132      	b.n	8002a96 <Si468x_dab_full_scan+0x4b6>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 8002830:	2100      	movs	r1, #0
 8002832:	482b      	ldr	r0, [pc, #172]	; (80028e0 <Si468x_dab_full_scan+0x300>)
 8002834:	f000 fc64 	bl	8003100 <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	220a      	movs	r2, #10
 800283c:	4922      	ldr	r1, [pc, #136]	; (80028c8 <Si468x_dab_full_scan+0x2e8>)
 800283e:	4618      	mov	r0, r3
 8002840:	f007 f910 	bl	8009a64 <itoa>
 8002844:	4603      	mov	r3, r0
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fc59 	bl	8003100 <send_debug_msg>
		if(services_index < 10)
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	2b09      	cmp	r3, #9
 8002852:	d803      	bhi.n	800285c <Si468x_dab_full_scan+0x27c>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002854:	2100      	movs	r1, #0
 8002856:	4827      	ldr	r0, [pc, #156]	; (80028f4 <Si468x_dab_full_scan+0x314>)
 8002858:	f000 fc52 	bl	8003100 <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 800285c:	2100      	movs	r1, #0
 800285e:	482a      	ldr	r0, [pc, #168]	; (8002908 <Si468x_dab_full_scan+0x328>)
 8002860:	f000 fc4e 	bl	8003100 <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	4a29      	ldr	r2, [pc, #164]	; (800290c <Si468x_dab_full_scan+0x32c>)
 8002868:	2134      	movs	r1, #52	; 0x34
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <Si468x_dab_full_scan+0x2ac>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	2234      	movs	r2, #52	; 0x34
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a23      	ldr	r2, [pc, #140]	; (800290c <Si468x_dab_full_scan+0x32c>)
 8002880:	4413      	add	r3, r2
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fc3b 	bl	8003100 <send_debug_msg>
 800288a:	e003      	b.n	8002894 <Si468x_dab_full_scan+0x2b4>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 800288c:	2100      	movs	r1, #0
 800288e:	4820      	ldr	r0, [pc, #128]	; (8002910 <Si468x_dab_full_scan+0x330>)
 8002890:	f000 fc36 	bl	8003100 <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002894:	2100      	movs	r1, #0
 8002896:	481f      	ldr	r0, [pc, #124]	; (8002914 <Si468x_dab_full_scan+0x334>)
 8002898:	f000 fc32 	bl	8003100 <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	70bb      	strb	r3, [r7, #2]
 80028a0:	e05d      	b.n	800295e <Si468x_dab_full_scan+0x37e>
 80028a2:	bf00      	nop
 80028a4:	0800a390 	.word	0x0800a390
 80028a8:	20002558 	.word	0x20002558
 80028ac:	20002559 	.word	0x20002559
 80028b0:	2000255a 	.word	0x2000255a
 80028b4:	0800a37c 	.word	0x0800a37c
 80028b8:	200019e4 	.word	0x200019e4
 80028bc:	20001a10 	.word	0x20001a10
 80028c0:	200019e0 	.word	0x200019e0
 80028c4:	0800a3cc 	.word	0x0800a3cc
 80028c8:	200018dc 	.word	0x200018dc
 80028cc:	0800a3e0 	.word	0x0800a3e0
 80028d0:	0800a414 	.word	0x0800a414
 80028d4:	0800a420 	.word	0x0800a420
 80028d8:	0800a434 	.word	0x0800a434
 80028dc:	0800a444 	.word	0x0800a444
 80028e0:	0800a454 	.word	0x0800a454
 80028e4:	0800a458 	.word	0x0800a458
 80028e8:	20001a18 	.word	0x20001a18
 80028ec:	0800a464 	.word	0x0800a464
 80028f0:	20000008 	.word	0x20000008
 80028f4:	0800a46c 	.word	0x0800a46c
 80028f8:	0800a470 	.word	0x0800a470
 80028fc:	0800a474 	.word	0x0800a474
 8002900:	0800a488 	.word	0x0800a488
 8002904:	0800a4f4 	.word	0x0800a4f4
 8002908:	0800a560 	.word	0x0800a560
 800290c:	20001b30 	.word	0x20001b30
 8002910:	0800a568 	.word	0x0800a568
 8002914:	0800a57c 	.word	0x0800a57c
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002918:	78ba      	ldrb	r2, [r7, #2]
 800291a:	4966      	ldr	r1, [pc, #408]	; (8002ab4 <Si468x_dab_full_scan+0x4d4>)
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3318      	adds	r3, #24
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	4962      	ldr	r1, [pc, #392]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 800292e:	2034      	movs	r0, #52	; 0x34
 8002930:	fb00 f303 	mul.w	r3, r0, r3
 8002934:	440b      	add	r3, r1
 8002936:	332c      	adds	r3, #44	; 0x2c
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d10c      	bne.n	8002958 <Si468x_dab_full_scan+0x378>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800293e:	78ba      	ldrb	r2, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <Si468x_dab_full_scan+0x4d4>)
 800294a:	4413      	add	r3, r2
 800294c:	3302      	adds	r3, #2
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fbd5 	bl	8003100 <send_debug_msg>
				break;
 8002956:	e007      	b.n	8002968 <Si468x_dab_full_scan+0x388>
		for(uint8_t i = 0; i < total_ensembles; i++)
 8002958:	78bb      	ldrb	r3, [r7, #2]
 800295a:	3301      	adds	r3, #1
 800295c:	70bb      	strb	r3, [r7, #2]
 800295e:	4b57      	ldr	r3, [pc, #348]	; (8002abc <Si468x_dab_full_scan+0x4dc>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3d7      	bcc.n	8002918 <Si468x_dab_full_scan+0x338>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002968:	2100      	movs	r1, #0
 800296a:	4855      	ldr	r0, [pc, #340]	; (8002ac0 <Si468x_dab_full_scan+0x4e0>)
 800296c:	f000 fbc8 	bl	8003100 <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	4a51      	ldr	r2, [pc, #324]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 8002974:	2134      	movs	r1, #52	; 0x34
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3328      	adds	r3, #40	; 0x28
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	220a      	movs	r2, #10
 8002982:	4950      	ldr	r1, [pc, #320]	; (8002ac4 <Si468x_dab_full_scan+0x4e4>)
 8002984:	4618      	mov	r0, r3
 8002986:	f007 f86d 	bl	8009a64 <itoa>
 800298a:	4603      	mov	r3, r0
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fbb6 	bl	8003100 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002994:	2100      	movs	r1, #0
 8002996:	484c      	ldr	r0, [pc, #304]	; (8002ac8 <Si468x_dab_full_scan+0x4e8>)
 8002998:	f000 fbb2 	bl	8003100 <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 80029a0:	2134      	movs	r1, #52	; 0x34
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	332c      	adds	r3, #44	; 0x2c
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <Si468x_dab_full_scan+0x4ec>)
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fba2 	bl	8003100 <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	4a3e      	ldr	r2, [pc, #248]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 80029c0:	2134      	movs	r1, #52	; 0x34
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	332c      	adds	r3, #44	; 0x2c
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b13      	cmp	r3, #19
 80029ce:	d803      	bhi.n	80029d8 <Si468x_dab_full_scan+0x3f8>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80029d0:	2100      	movs	r1, #0
 80029d2:	483f      	ldr	r0, [pc, #252]	; (8002ad0 <Si468x_dab_full_scan+0x4f0>)
 80029d4:	f000 fb94 	bl	8003100 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 80029d8:	2100      	movs	r1, #0
 80029da:	483e      	ldr	r0, [pc, #248]	; (8002ad4 <Si468x_dab_full_scan+0x4f4>)
 80029dc:	f000 fb90 	bl	8003100 <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	4a35      	ldr	r2, [pc, #212]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 80029e4:	2134      	movs	r1, #52	; 0x34
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3319      	adds	r3, #25
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	220a      	movs	r2, #10
 80029f2:	4934      	ldr	r1, [pc, #208]	; (8002ac4 <Si468x_dab_full_scan+0x4e4>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f007 f835 	bl	8009a64 <itoa>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fb7e 	bl	8003100 <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 8002a08:	2134      	movs	r1, #52	; 0x34
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3319      	adds	r3, #25
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d803      	bhi.n	8002a20 <Si468x_dab_full_scan+0x440>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	482d      	ldr	r0, [pc, #180]	; (8002ad0 <Si468x_dab_full_scan+0x4f0>)
 8002a1c:	f000 fb70 	bl	8003100 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a20:	2100      	movs	r1, #0
 8002a22:	482c      	ldr	r0, [pc, #176]	; (8002ad4 <Si468x_dab_full_scan+0x4f4>)
 8002a24:	f000 fb6c 	bl	8003100 <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	482b      	ldr	r0, [pc, #172]	; (8002ad8 <Si468x_dab_full_scan+0x4f8>)
 8002a2c:	f000 fb68 	bl	8003100 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 8002a34:	2134      	movs	r1, #52	; 0x34
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3324      	adds	r3, #36	; 0x24
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2210      	movs	r2, #16
 8002a42:	4920      	ldr	r1, [pc, #128]	; (8002ac4 <Si468x_dab_full_scan+0x4e4>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f007 f80d 	bl	8009a64 <itoa>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb56 	bl	8003100 <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002a54:	2100      	movs	r1, #0
 8002a56:	4821      	ldr	r0, [pc, #132]	; (8002adc <Si468x_dab_full_scan+0x4fc>)
 8002a58:	f000 fb52 	bl	8003100 <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	481e      	ldr	r0, [pc, #120]	; (8002ad8 <Si468x_dab_full_scan+0x4f8>)
 8002a60:	f000 fb4e 	bl	8003100 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <Si468x_dab_full_scan+0x4d8>)
 8002a68:	2134      	movs	r1, #52	; 0x34
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	332e      	adds	r3, #46	; 0x2e
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2210      	movs	r2, #16
 8002a76:	4913      	ldr	r1, [pc, #76]	; (8002ac4 <Si468x_dab_full_scan+0x4e4>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f006 fff3 	bl	8009a64 <itoa>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fb3c 	bl	8003100 <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4815      	ldr	r0, [pc, #84]	; (8002ae0 <Si468x_dab_full_scan+0x500>)
 8002a8c:	f000 fb38 	bl	8003100 <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	3301      	adds	r3, #1
 8002a94:	70fb      	strb	r3, [r7, #3]
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <Si468x_dab_full_scan+0x504>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f4ff aec7 	bcc.w	8002830 <Si468x_dab_full_scan+0x250>
	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <Si468x_dab_full_scan+0x508>)
 8002aa6:	f000 fb2b 	bl	8003100 <send_debug_msg>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20001a18 	.word	0x20001a18
 8002ab8:	20001b30 	.word	0x20001b30
 8002abc:	20002559 	.word	0x20002559
 8002ac0:	0800a57c 	.word	0x0800a57c
 8002ac4:	200018dc 	.word	0x200018dc
 8002ac8:	0800a464 	.word	0x0800a464
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	0800a46c 	.word	0x0800a46c
 8002ad4:	0800a580 	.word	0x0800a580
 8002ad8:	0800a588 	.word	0x0800a588
 8002adc:	0800a560 	.word	0x0800a560
 8002ae0:	0800a58c 	.word	0x0800a58c
 8002ae4:	20002558 	.word	0x20002558
 8002ae8:	0800a488 	.word	0x0800a488

08002aec <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af06      	add	r7, sp, #24
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002af2:	2101      	movs	r1, #1
 8002af4:	486c      	ldr	r0, [pc, #432]	; (8002ca8 <Si468x_dab_get_audio_info+0x1bc>)
 8002af6:	f000 fb03 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <Si468x_dab_get_audio_info+0x1c0>)
 8002afc:	22bd      	movs	r2, #189	; 0xbd
 8002afe:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <Si468x_dab_get_audio_info+0x1c0>)
 8002b02:	2203      	movs	r2, #3
 8002b04:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b06:	4969      	ldr	r1, [pc, #420]	; (8002cac <Si468x_dab_get_audio_info+0x1c0>)
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f7fe fdc9 	bl	80016a0 <Si468x_write_command>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <Si468x_dab_get_audio_info+0x1c4>)
 8002b14:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f001 fe28 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b1c:	4965      	ldr	r1, [pc, #404]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b1e:	2014      	movs	r0, #20
 8002b20:	f7fe fde0 	bl	80016e4 <Si468x_read_reply>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <Si468x_dab_get_audio_info+0x1c4>)
 8002b2a:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b2e:	795b      	ldrb	r3, [r3, #5]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002b40:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b42:	79db      	ldrb	r3, [r3, #7]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002b54:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b56:	7a1b      	ldrb	r3, [r3, #8]
 8002b58:	111b      	asrs	r3, r3, #4
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b64:	7a1b      	ldrb	r3, [r3, #8]
 8002b66:	10db      	asrs	r3, r3, #3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8002b70:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b72:	7a1b      	ldrb	r3, [r3, #8]
 8002b74:	109b      	asrs	r3, r3, #2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b80:	7a1b      	ldrb	r3, [r3, #8]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	703b      	strb	r3, [r7, #0]

	dab_digrad_status.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b8a:	7b1b      	ldrb	r3, [r3, #12]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b90:	7b5b      	ldrb	r3, [r3, #13]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	441a      	add	r2, r3
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b98:	7b9b      	ldrb	r3, [r3, #14]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	441a      	add	r2, r3
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002ba0:	7bdb      	ldrb	r3, [r3, #15]
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	4413      	add	r3, r2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <Si468x_dab_get_audio_info+0x1cc>)
 8002baa:	621a      	str	r2, [r3, #32]
	dab_digrad_status.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8002bac:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bae:	7c1b      	ldrb	r3, [r3, #16]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bb4:	7c5b      	ldrb	r3, [r3, #17]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	441a      	add	r2, r3
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bbc:	7c9b      	ldrb	r3, [r3, #18]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	441a      	add	r2, r3
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bc4:	7cdb      	ldrb	r3, [r3, #19]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	4413      	add	r3, r2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <Si468x_dab_get_audio_info+0x1cc>)
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

	Display_dab_digrad_status_data(dab_digrad_status);
 8002bd0:	4e39      	ldr	r6, [pc, #228]	; (8002cb8 <Si468x_dab_get_audio_info+0x1cc>)
 8002bd2:	466d      	mov	r5, sp
 8002bd4:	f106 0410 	add.w	r4, r6, #16
 8002bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002be8:	f000 fb90 	bl	800330c <Display_dab_digrad_status_data>

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002bec:	2100      	movs	r1, #0
 8002bee:	4833      	ldr	r0, [pc, #204]	; (8002cbc <Si468x_dab_get_audio_info+0x1d0>)
 8002bf0:	f000 fa86 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	220a      	movs	r2, #10
 8002bf8:	4931      	ldr	r1, [pc, #196]	; (8002cc0 <Si468x_dab_get_audio_info+0x1d4>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f006 ff32 	bl	8009a64 <itoa>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fa7b 	bl	8003100 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <Si468x_dab_get_audio_info+0x1d8>)
 8002c0e:	f000 fa77 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002c12:	88bb      	ldrh	r3, [r7, #4]
 8002c14:	220a      	movs	r2, #10
 8002c16:	492a      	ldr	r1, [pc, #168]	; (8002cc0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f006 ff23 	bl	8009a64 <itoa>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fa6c 	bl	8003100 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4827      	ldr	r0, [pc, #156]	; (8002cc8 <Si468x_dab_get_audio_info+0x1dc>)
 8002c2c:	f000 fa68 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	220a      	movs	r2, #10
 8002c34:	4922      	ldr	r1, [pc, #136]	; (8002cc0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c36:	4618      	mov	r0, r3
 8002c38:	f006 ff14 	bl	8009a64 <itoa>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fa5d 	bl	8003100 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002c46:	2100      	movs	r1, #0
 8002c48:	4820      	ldr	r0, [pc, #128]	; (8002ccc <Si468x_dab_get_audio_info+0x1e0>)
 8002c4a:	f000 fa59 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002c4e:	78bb      	ldrb	r3, [r7, #2]
 8002c50:	220a      	movs	r2, #10
 8002c52:	491b      	ldr	r1, [pc, #108]	; (8002cc0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f006 ff05 	bl	8009a64 <itoa>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fa4e 	bl	8003100 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002c64:	2100      	movs	r1, #0
 8002c66:	481a      	ldr	r0, [pc, #104]	; (8002cd0 <Si468x_dab_get_audio_info+0x1e4>)
 8002c68:	f000 fa4a 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	220a      	movs	r2, #10
 8002c70:	4913      	ldr	r1, [pc, #76]	; (8002cc0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f006 fef6 	bl	8009a64 <itoa>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fa3f 	bl	8003100 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002c82:	2100      	movs	r1, #0
 8002c84:	4813      	ldr	r0, [pc, #76]	; (8002cd4 <Si468x_dab_get_audio_info+0x1e8>)
 8002c86:	f000 fa3b 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002c8a:	783b      	ldrb	r3, [r7, #0]
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f006 fee7 	bl	8009a64 <itoa>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa30 	bl	8003100 <send_debug_msg>

}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca8:	0800a598 	.word	0x0800a598
 8002cac:	200000dc 	.word	0x200000dc
 8002cb0:	2000191c 	.word	0x2000191c
 8002cb4:	200010dc 	.word	0x200010dc
 8002cb8:	200019e4 	.word	0x200019e4
 8002cbc:	0800a5d4 	.word	0x0800a5d4
 8002cc0:	200018dc 	.word	0x200018dc
 8002cc4:	0800a5e0 	.word	0x0800a5e0
 8002cc8:	0800a5f0 	.word	0x0800a5f0
 8002ccc:	0800a604 	.word	0x0800a604
 8002cd0:	0800a610 	.word	0x0800a610
 8002cd4:	0800a61c 	.word	0x0800a61c

08002cd8 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4811      	ldr	r0, [pc, #68]	; (8002d24 <Si468x_dab_get_event_status+0x4c>)
 8002ce0:	f000 fa0e 	bl	8003100 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <Si468x_dab_get_event_status+0x50>)
 8002ce6:	22b3      	movs	r2, #179	; 0xb3
 8002ce8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <Si468x_dab_get_event_status+0x50>)
 8002cec:	2203      	movs	r2, #3
 8002cee:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002cf0:	490d      	ldr	r1, [pc, #52]	; (8002d28 <Si468x_dab_get_event_status+0x50>)
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f7fe fcd4 	bl	80016a0 <Si468x_write_command>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <Si468x_dab_get_event_status+0x54>)
 8002cfe:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f001 fd33 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <Si468x_dab_get_event_status+0x58>)
 8002d08:	2009      	movs	r0, #9
 8002d0a:	f7fe fceb 	bl	80016e4 <Si468x_read_reply>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <Si468x_dab_get_event_status+0x54>)
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <Si468x_dab_get_event_status+0x58>)
 8002d18:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002d1a:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <Si468x_dab_get_event_status+0x5c>)
 8002d1c:	6013      	str	r3, [r2, #0]
//
//	dab_events.mute_eng = (dab_spi_rx_buffer[8] & 0x08 >> 3);
//	dab_events.sm_eng = (dab_spi_rx_buffer[8] & 0x04 >> 2);
//	dab_events.blk_error = (dab_spi_rx_buffer[8] & 0x02 >> 1);
//	dab_events.blk_loss = (dab_spi_rx_buffer[8] & 0x01);
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	0800a62c 	.word	0x0800a62c
 8002d28:	200000dc 	.word	0x200000dc
 8002d2c:	2000191c 	.word	0x2000191c
 8002d30:	200010dc 	.word	0x200010dc
 8002d34:	20001a10 	.word	0x20001a10

08002d38 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002d44:	2101      	movs	r1, #1
 8002d46:	4852      	ldr	r0, [pc, #328]	; (8002e90 <Si468x_dab_get_component_info+0x158>)
 8002d48:	f000 f9da 	bl	8003100 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002d4c:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d4e:	22bb      	movs	r2, #187	; 0xbb
 8002d50:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002d52:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002d58:	4b4e      	ldr	r3, [pc, #312]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d6a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d74:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d7e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0e1b      	lsrs	r3, r3, #24
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d88:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002d8a:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	121b      	asrs	r3, r3, #8
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002d98:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	141b      	asrs	r3, r3, #16
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002da2:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	161b      	asrs	r3, r3, #24
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002dac:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002dae:	4939      	ldr	r1, [pc, #228]	; (8002e94 <Si468x_dab_get_component_info+0x15c>)
 8002db0:	200c      	movs	r0, #12
 8002db2:	f7fe fc75 	bl	80016a0 <Si468x_write_command>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <Si468x_dab_get_component_info+0x160>)
 8002dbc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002dbe:	2005      	movs	r0, #5
 8002dc0:	f001 fcd4 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <Si468x_dab_get_component_info+0x164>)
 8002dc6:	201a      	movs	r0, #26
 8002dc8:	f7fe fc8c 	bl	80016e4 <Si468x_read_reply>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <Si468x_dab_get_component_info+0x160>)
 8002dd2:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <Si468x_dab_get_component_info+0x164>)
 8002dd6:	799b      	ldrb	r3, [r3, #6]
 8002dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ddc:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e00c      	b.n	8002dfe <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002de4:	7ffb      	ldrb	r3, [r7, #31]
 8002de6:	f103 0208 	add.w	r2, r3, #8
 8002dea:	7ffb      	ldrb	r3, [r7, #31]
 8002dec:	492b      	ldr	r1, [pc, #172]	; (8002e9c <Si468x_dab_get_component_info+0x164>)
 8002dee:	5c8a      	ldrb	r2, [r1, r2]
 8002df0:	3320      	adds	r3, #32
 8002df2:	443b      	add	r3, r7
 8002df4:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	7ffb      	ldrb	r3, [r7, #31]
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d9ef      	bls.n	8002de4 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <Si468x_dab_get_component_info+0x164>)
 8002e06:	7e1b      	ldrb	r3, [r3, #24]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <Si468x_dab_get_component_info+0x164>)
 8002e0c:	7e5b      	ldrb	r3, [r3, #25]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Global ID: ", CRLF_NO_SEND);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4821      	ldr	r0, [pc, #132]	; (8002ea0 <Si468x_dab_get_component_info+0x168>)
 8002e1c:	f000 f970 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(global_id, itoa_buffer, 10), CRLF_SEND);
 8002e20:	7efb      	ldrb	r3, [r7, #27]
 8002e22:	220a      	movs	r2, #10
 8002e24:	491f      	ldr	r1, [pc, #124]	; (8002ea4 <Si468x_dab_get_component_info+0x16c>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 fe1c 	bl	8009a64 <itoa>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f965 	bl	8003100 <send_debug_msg>

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002e36:	2100      	movs	r1, #0
 8002e38:	481b      	ldr	r0, [pc, #108]	; (8002ea8 <Si468x_dab_get_component_info+0x170>)
 8002e3a:	f000 f961 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002e3e:	7fbb      	ldrb	r3, [r7, #30]
 8002e40:	220a      	movs	r2, #10
 8002e42:	4918      	ldr	r1, [pc, #96]	; (8002ea4 <Si468x_dab_get_component_info+0x16c>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f006 fe0d 	bl	8009a64 <itoa>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f956 	bl	8003100 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002e54:	2100      	movs	r1, #0
 8002e56:	4815      	ldr	r0, [pc, #84]	; (8002eac <Si468x_dab_get_component_info+0x174>)
 8002e58:	f000 f952 	bl	8003100 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f94c 	bl	8003100 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4811      	ldr	r0, [pc, #68]	; (8002eb0 <Si468x_dab_get_component_info+0x178>)
 8002e6c:	f000 f948 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(global_id, itoa_buffer, 2), CRLF_SEND);
 8002e70:	7efb      	ldrb	r3, [r7, #27]
 8002e72:	2202      	movs	r2, #2
 8002e74:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <Si468x_dab_get_component_info+0x16c>)
 8002e76:	4618      	mov	r0, r3
 8002e78:	f006 fdf4 	bl	8009a64 <itoa>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f93d 	bl	8003100 <send_debug_msg>

}
 8002e86:	bf00      	nop
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	0800a66c 	.word	0x0800a66c
 8002e94:	200000dc 	.word	0x200000dc
 8002e98:	2000191c 	.word	0x2000191c
 8002e9c:	200010dc 	.word	0x200010dc
 8002ea0:	0800a6a0 	.word	0x0800a6a0
 8002ea4:	200018dc 	.word	0x200018dc
 8002ea8:	0800a6ac 	.word	0x0800a6ac
 8002eac:	0800a6b8 	.word	0x0800a6b8
 8002eb0:	0800a6cc 	.word	0x0800a6cc

08002eb4 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
	uint16_t year;
	uint8_t months, days, hours, minutes, seconds;

	send_debug_msg("--------------Getting time from Si468x-------------------", CRLF_SEND);
 8002eba:	2101      	movs	r1, #1
 8002ebc:	484e      	ldr	r0, [pc, #312]	; (8002ff8 <Si468x_dab_get_time+0x144>)
 8002ebe:	f000 f91f 	bl	8003100 <send_debug_msg>

	do
	{
		Si468x_dab_get_event_status();
 8002ec2:	f7ff ff09 	bl	8002cd8 <Si468x_dab_get_event_status>
		HAL_Delay(10);
 8002ec6:	200a      	movs	r0, #10
 8002ec8:	f001 fc50 	bl	800476c <HAL_Delay>
	}while(!dab_events.srv_list || dab_events.srv_list_int);
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <Si468x_dab_get_time+0x148>)
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f3      	beq.n	8002ec2 <Si468x_dab_get_time+0xe>
 8002eda:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <Si468x_dab_get_time+0x148>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ec      	bne.n	8002ec2 <Si468x_dab_get_time+0xe>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002ee8:	4b45      	ldr	r3, [pc, #276]	; (8003000 <Si468x_dab_get_time+0x14c>)
 8002eea:	22bc      	movs	r2, #188	; 0xbc
 8002eec:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002eee:	4b44      	ldr	r3, [pc, #272]	; (8003000 <Si468x_dab_get_time+0x14c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002ef4:	4942      	ldr	r1, [pc, #264]	; (8003000 <Si468x_dab_get_time+0x14c>)
 8002ef6:	2002      	movs	r0, #2
 8002ef8:	f7fe fbd2 	bl	80016a0 <Si468x_write_command>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b40      	ldr	r3, [pc, #256]	; (8003004 <Si468x_dab_get_time+0x150>)
 8002f02:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002f04:	2001      	movs	r0, #1
 8002f06:	f001 fc31 	bl	800476c <HAL_Delay>
	status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002f0a:	493f      	ldr	r1, [pc, #252]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f0c:	200b      	movs	r0, #11
 8002f0e:	f7fe fbe9 	bl	80016e4 <Si468x_read_reply>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <Si468x_dab_get_time+0x150>)
 8002f18:	701a      	strb	r2, [r3, #0]

	year = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f1c:	795b      	ldrb	r3, [r3, #5]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f26:	791b      	ldrb	r3, [r3, #4]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
	months = dab_spi_rx_buffer[6];
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f30:	799b      	ldrb	r3, [r3, #6]
 8002f32:	717b      	strb	r3, [r7, #5]
	days = dab_spi_rx_buffer[7];
 8002f34:	4b34      	ldr	r3, [pc, #208]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f36:	79db      	ldrb	r3, [r3, #7]
 8002f38:	713b      	strb	r3, [r7, #4]
	hours = dab_spi_rx_buffer[8];
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f3c:	7a1b      	ldrb	r3, [r3, #8]
 8002f3e:	70fb      	strb	r3, [r7, #3]
	minutes = dab_spi_rx_buffer[9];
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f42:	7a5b      	ldrb	r3, [r3, #9]
 8002f44:	70bb      	strb	r3, [r7, #2]
	seconds = dab_spi_rx_buffer[10];
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <Si468x_dab_get_time+0x154>)
 8002f48:	7a9b      	ldrb	r3, [r3, #10]
 8002f4a:	707b      	strb	r3, [r7, #1]

	send_debug_msg(itoa(hours, itoa_buffer, 10), CRLF_NO_SEND);
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	220a      	movs	r2, #10
 8002f50:	492e      	ldr	r1, [pc, #184]	; (800300c <Si468x_dab_get_time+0x158>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	f006 fd86 	bl	8009a64 <itoa>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f8cf 	bl	8003100 <send_debug_msg>
	send_debug_msg(":", CRLF_NO_SEND);
 8002f62:	2100      	movs	r1, #0
 8002f64:	482a      	ldr	r0, [pc, #168]	; (8003010 <Si468x_dab_get_time+0x15c>)
 8002f66:	f000 f8cb 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(minutes, itoa_buffer, 10), CRLF_NO_SEND);
 8002f6a:	78bb      	ldrb	r3, [r7, #2]
 8002f6c:	220a      	movs	r2, #10
 8002f6e:	4927      	ldr	r1, [pc, #156]	; (800300c <Si468x_dab_get_time+0x158>)
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 fd77 	bl	8009a64 <itoa>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f8c0 	bl	8003100 <send_debug_msg>
	send_debug_msg(":", CRLF_NO_SEND);
 8002f80:	2100      	movs	r1, #0
 8002f82:	4823      	ldr	r0, [pc, #140]	; (8003010 <Si468x_dab_get_time+0x15c>)
 8002f84:	f000 f8bc 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(seconds, itoa_buffer, 10), CRLF_SEND);
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	220a      	movs	r2, #10
 8002f8c:	491f      	ldr	r1, [pc, #124]	; (800300c <Si468x_dab_get_time+0x158>)
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f006 fd68 	bl	8009a64 <itoa>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f8b1 	bl	8003100 <send_debug_msg>

	send_debug_msg(itoa(days, itoa_buffer, 10), CRLF_NO_SEND);
 8002f9e:	793b      	ldrb	r3, [r7, #4]
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	491a      	ldr	r1, [pc, #104]	; (800300c <Si468x_dab_get_time+0x158>)
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f006 fd5d 	bl	8009a64 <itoa>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f8a6 	bl	8003100 <send_debug_msg>
	send_debug_msg(".", CRLF_NO_SEND);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4817      	ldr	r0, [pc, #92]	; (8003014 <Si468x_dab_get_time+0x160>)
 8002fb8:	f000 f8a2 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(months, itoa_buffer, 10), CRLF_NO_SEND);
 8002fbc:	797b      	ldrb	r3, [r7, #5]
 8002fbe:	220a      	movs	r2, #10
 8002fc0:	4912      	ldr	r1, [pc, #72]	; (800300c <Si468x_dab_get_time+0x158>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f006 fd4e 	bl	8009a64 <itoa>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 f897 	bl	8003100 <send_debug_msg>
	send_debug_msg(".", CRLF_NO_SEND);
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	480f      	ldr	r0, [pc, #60]	; (8003014 <Si468x_dab_get_time+0x160>)
 8002fd6:	f000 f893 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(year, itoa_buffer, 10), CRLF_SEND);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	220a      	movs	r2, #10
 8002fde:	490b      	ldr	r1, [pc, #44]	; (800300c <Si468x_dab_get_time+0x158>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f006 fd3f 	bl	8009a64 <itoa>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f888 	bl	8003100 <send_debug_msg>

}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800a71c 	.word	0x0800a71c
 8002ffc:	20001a10 	.word	0x20001a10
 8003000:	200000dc 	.word	0x200000dc
 8003004:	2000191c 	.word	0x2000191c
 8003008:	200010dc 	.word	0x200010dc
 800300c:	200018dc 	.word	0x200018dc
 8003010:	0800a758 	.word	0x0800a758
 8003014:	0800a75c 	.word	0x0800a75c

08003018 <Si468x_play_next_station>:


void Si468x_play_next_station()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------", CRLF_SEND);
 800301c:	2101      	movs	r1, #1
 800301e:	4832      	ldr	r0, [pc, #200]	; (80030e8 <Si468x_play_next_station+0xd0>)
 8003020:	f000 f86e 	bl	8003100 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8003024:	2100      	movs	r1, #0
 8003026:	4831      	ldr	r0, [pc, #196]	; (80030ec <Si468x_play_next_station+0xd4>)
 8003028:	f000 f86a 	bl	8003100 <send_debug_msg>
	send_debug_msg(itoa(actual_station, itoa_buffer, 10), CRLF_SEND);
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <Si468x_play_next_station+0xd8>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	220a      	movs	r2, #10
 8003032:	4930      	ldr	r1, [pc, #192]	; (80030f4 <Si468x_play_next_station+0xdc>)
 8003034:	4618      	mov	r0, r3
 8003036:	f006 fd15 	bl	8009a64 <itoa>
 800303a:	4603      	mov	r3, r0
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f85e 	bl	8003100 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[actual_station].freq_id); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8003044:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <Si468x_play_next_station+0xd8>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <Si468x_play_next_station+0xe0>)
 800304c:	2334      	movs	r3, #52	; 0x34
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	332c      	adds	r3, #44	; 0x2c
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fe19 	bl	8001c90 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <Si468x_play_next_station+0xd8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <Si468x_play_next_station+0xe0>)
 8003066:	2334      	movs	r3, #52	; 0x34
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3324      	adds	r3, #36	; 0x24
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <Si468x_play_next_station+0xd8>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	491f      	ldr	r1, [pc, #124]	; (80030f8 <Si468x_play_next_station+0xe0>)
 800307a:	2334      	movs	r3, #52	; 0x34
 800307c:	fb00 f303 	mul.w	r3, r0, r3
 8003080:	440b      	add	r3, r1
 8003082:	332e      	adds	r3, #46	; 0x2e
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7ff fe55 	bl	8002d38 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <Si468x_play_next_station+0xd8>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <Si468x_play_next_station+0xe0>)
 8003096:	2334      	movs	r3, #52	; 0x34
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3324      	adds	r3, #36	; 0x24
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <Si468x_play_next_station+0xd8>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	4913      	ldr	r1, [pc, #76]	; (80030f8 <Si468x_play_next_station+0xe0>)
 80030aa:	2334      	movs	r3, #52	; 0x34
 80030ac:	fb00 f303 	mul.w	r3, r0, r3
 80030b0:	440b      	add	r3, r1
 80030b2:	332e      	adds	r3, #46	; 0x2e
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7ff f95f 	bl	800237c <Si468x_dab_start_digital_service>

	Si468x_dab_digrad_status();
 80030be:	f7fe fe99 	bl	8001df4 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 80030c2:	f7ff fd13 	bl	8002aec <Si468x_dab_get_audio_info>



	actual_station++;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <Si468x_play_next_station+0xd8>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	3301      	adds	r3, #1
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <Si468x_play_next_station+0xd8>)
 80030d0:	701a      	strb	r2, [r3, #0]
	if(actual_station == total_services)
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <Si468x_play_next_station+0xd8>)
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <Si468x_play_next_station+0xe4>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d102      	bne.n	80030e4 <Si468x_play_next_station+0xcc>
	{
	  actual_station = 0;
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <Si468x_play_next_station+0xd8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
	}
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	0800a760 	.word	0x0800a760
 80030ec:	0800a784 	.word	0x0800a784
 80030f0:	20002561 	.word	0x20002561
 80030f4:	200018dc 	.word	0x200018dc
 80030f8:	20001b30 	.word	0x20001b30
 80030fc:	20002558 	.word	0x20002558

08003100 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd f85b 	bl	80001c8 <strlen>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	b29a      	uxth	r2, r3
 800311a:	2364      	movs	r3, #100	; 0x64
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	480a      	ldr	r0, [pc, #40]	; (8003148 <send_debug_msg+0x48>)
 8003120:	f006 f8ef 	bl	8009302 <HAL_UART_Transmit>

	if(is_crlf)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 800312a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800312e:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003130:	f107 010c 	add.w	r1, r7, #12
 8003134:	2364      	movs	r3, #100	; 0x64
 8003136:	2202      	movs	r2, #2
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <send_debug_msg+0x48>)
 800313a:	f006 f8e2 	bl	8009302 <HAL_UART_Transmit>
	}
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20002858 	.word	0x20002858

0800314c <Display_clear_screen>:
#define STRING_SPACING 14

char char_buffer[32];

void Display_clear_screen()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003152:	2000      	movs	r0, #0
 8003154:	f7fd fbac 	bl	80008b0 <ILI9341_Fill_Screen>
//	ILI9341_Draw_Empty_Rectangle(YELLOW, 2, 15, 318, 238); // żółta obwoluta
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8003158:	2311      	movs	r3, #17
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003160:	2211      	movs	r2, #17
 8003162:	2100      	movs	r1, #0
 8003164:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003168:	f7fd fc2d 	bl	80009c6 <ILI9341_Draw_Line>
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <Display_dab_digrad_status_background>:
	CS_OFF;
}


void Display_dab_digrad_status_background()
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(83, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek radia
 800317a:	2302      	movs	r3, #2
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	4b56      	ldr	r3, [pc, #344]	; (80032d8 <Display_dab_digrad_status_background+0x164>)
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	2300      	movs	r3, #0
 8003184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003188:	2101      	movs	r1, #1
 800318a:	2053      	movs	r0, #83	; 0x53
 800318c:	f7fd fc9c 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 20, 20, 100, 40);
 8003190:	2328      	movs	r3, #40	; 0x28
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2364      	movs	r3, #100	; 0x64
 8003196:	2214      	movs	r2, #20
 8003198:	2114      	movs	r1, #20
 800319a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800319e:	f7fd fbf1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 120, 20, 200, 40);
 80031a2:	2328      	movs	r3, #40	; 0x28
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	23c8      	movs	r3, #200	; 0xc8
 80031a8:	2214      	movs	r2, #20
 80031aa:	2178      	movs	r1, #120	; 0x78
 80031ac:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031b0:	f7fd fbe8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 220, 20, 300, 40);
 80031b4:	2328      	movs	r3, #40	; 0x28
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80031bc:	2214      	movs	r2, #20
 80031be:	21dc      	movs	r1, #220	; 0xdc
 80031c0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031c4:	f7fd fbde 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	ILI9341_Draw_String(5, 20 + 3*STRING_SPACING, WHITE, BLACK, "RSSI:" , 2);
 80031c8:	2302      	movs	r3, #2
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	4b43      	ldr	r3, [pc, #268]	; (80032dc <Display_dab_digrad_status_background+0x168>)
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d6:	213e      	movs	r1, #62	; 0x3e
 80031d8:	2005      	movs	r0, #5
 80031da:	f7fd fc75 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 4*STRING_SPACING, WHITE, BLACK, "SNR:" , 2);
 80031de:	2302      	movs	r3, #2
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <Display_dab_digrad_status_background+0x16c>)
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2300      	movs	r3, #0
 80031e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ec:	214c      	movs	r1, #76	; 0x4c
 80031ee:	2005      	movs	r0, #5
 80031f0:	f7fd fc6a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 5*STRING_SPACING, WHITE, BLACK, "FIC Quality:" , 2);
 80031f4:	2302      	movs	r3, #2
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <Display_dab_digrad_status_background+0x170>)
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003202:	215a      	movs	r1, #90	; 0x5a
 8003204:	2005      	movs	r0, #5
 8003206:	f7fd fc5f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 6*STRING_SPACING, WHITE, BLACK, "CNR:" , 2);
 800320a:	2302      	movs	r3, #2
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <Display_dab_digrad_status_background+0x174>)
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003218:	2168      	movs	r1, #104	; 0x68
 800321a:	2005      	movs	r0, #5
 800321c:	f7fd fc54 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 7*STRING_SPACING, WHITE, BLACK, "FIB Error Bits:", 2);
 8003220:	2302      	movs	r3, #2
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <Display_dab_digrad_status_background+0x178>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322e:	2176      	movs	r1, #118	; 0x76
 8003230:	2005      	movs	r0, #5
 8003232:	f7fd fc49 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 8*STRING_SPACING, WHITE, BLACK, "Frequency:", 2);
 8003236:	2302      	movs	r3, #2
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <Display_dab_digrad_status_background+0x17c>)
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003244:	2184      	movs	r1, #132	; 0x84
 8003246:	2005      	movs	r0, #5
 8003248:	f7fd fc3e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 9*STRING_SPACING, WHITE, BLACK, "Freq Index:", 2);
 800324c:	2302      	movs	r3, #2
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <Display_dab_digrad_status_background+0x180>)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2300      	movs	r3, #0
 8003256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800325a:	2192      	movs	r1, #146	; 0x92
 800325c:	2005      	movs	r0, #5
 800325e:	f7fd fc33 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 10*STRING_SPACING, WHITE, BLACK, "FFT Offset:", 2);
 8003262:	2302      	movs	r3, #2
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <Display_dab_digrad_status_background+0x184>)
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003270:	21a0      	movs	r1, #160	; 0xa0
 8003272:	2005      	movs	r0, #5
 8003274:	f7fd fc28 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 11*STRING_SPACING, WHITE, BLACK, "ANT Cap Trim:", 2);
 8003278:	2302      	movs	r3, #2
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <Display_dab_digrad_status_background+0x188>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003286:	21ae      	movs	r1, #174	; 0xae
 8003288:	2005      	movs	r0, #5
 800328a:	f7fd fc1d 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 12*STRING_SPACING, WHITE, BLACK, "CU Level:", 2);
 800328e:	2302      	movs	r3, #2
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <Display_dab_digrad_status_background+0x18c>)
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329c:	21bc      	movs	r1, #188	; 0xbc
 800329e:	2005      	movs	r0, #5
 80032a0:	f7fd fc12 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 13*STRING_SPACING, WHITE, BLACK, "FIC Error Bits:", 2);
 80032a4:	2302      	movs	r3, #2
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <Display_dab_digrad_status_background+0x190>)
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b2:	21ca      	movs	r1, #202	; 0xca
 80032b4:	2005      	movs	r0, #5
 80032b6:	f7fd fc07 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(5, 20 + 14*STRING_SPACING, WHITE, BLACK, "FIC Total Bits:", 2);
 80032ba:	2302      	movs	r3, #2
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <Display_dab_digrad_status_background+0x194>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c8:	21d8      	movs	r1, #216	; 0xd8
 80032ca:	2005      	movs	r0, #5
 80032cc:	f7fd fbfc 	bl	8000ac8 <ILI9341_Draw_String>
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	0800a7e8 	.word	0x0800a7e8
 80032dc:	0800a7fc 	.word	0x0800a7fc
 80032e0:	0800a804 	.word	0x0800a804
 80032e4:	0800a80c 	.word	0x0800a80c
 80032e8:	0800a81c 	.word	0x0800a81c
 80032ec:	0800a824 	.word	0x0800a824
 80032f0:	0800a834 	.word	0x0800a834
 80032f4:	0800a840 	.word	0x0800a840
 80032f8:	0800a84c 	.word	0x0800a84c
 80032fc:	0800a858 	.word	0x0800a858
 8003300:	0800a868 	.word	0x0800a868
 8003304:	0800a874 	.word	0x0800a874
 8003308:	0800a884 	.word	0x0800a884

0800330c <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 800330c:	b084      	sub	sp, #16
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af02      	add	r7, sp, #8
 8003314:	f107 0c08 	add.w	ip, r7, #8
 8003318:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Valid
	if(digrad_status.valid)
 800331c:	7a7b      	ldrb	r3, [r7, #9]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <Display_dab_digrad_status_data+0x36>
	{
		ILI9341_Draw_String(40, 23, GREEN, DARKGREY, "VALID", 2);
 8003328:	2302      	movs	r3, #2
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <Display_dab_digrad_status_data+0xb4>)
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003334:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003338:	2117      	movs	r1, #23
 800333a:	2028      	movs	r0, #40	; 0x28
 800333c:	f7fd fbc4 	bl	8000ac8 <ILI9341_Draw_String>
 8003340:	e00b      	b.n	800335a <Display_dab_digrad_status_data+0x4e>
	}
	else
	{
		ILI9341_Draw_String(40, 23, RED, DARKGREY, "VALID", 2);
 8003342:	2302      	movs	r3, #2
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <Display_dab_digrad_status_data+0xb4>)
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800334e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003352:	2117      	movs	r1, #23
 8003354:	2028      	movs	r0, #40	; 0x28
 8003356:	f7fd fbb7 	bl	8000ac8 <ILI9341_Draw_String>
	}
	//ACQ
	if(digrad_status.acq)
 800335a:	7a7b      	ldrb	r3, [r7, #9]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <Display_dab_digrad_status_data+0x74>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8003366:	2302      	movs	r3, #2
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <Display_dab_digrad_status_data+0xb8>)
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003372:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003376:	2117      	movs	r1, #23
 8003378:	2085      	movs	r0, #133	; 0x85
 800337a:	f7fd fba5 	bl	8000ac8 <ILI9341_Draw_String>
 800337e:	e00b      	b.n	8003398 <Display_dab_digrad_status_data+0x8c>
	}
	else
	{
		ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8003380:	2302      	movs	r3, #2
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <Display_dab_digrad_status_data+0xb8>)
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800338c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003390:	2117      	movs	r1, #23
 8003392:	2085      	movs	r0, #133	; 0x85
 8003394:	f7fd fb98 	bl	8000ac8 <ILI9341_Draw_String>
	}
	//FIC_ERROR
	if(digrad_status.fic_err)
 8003398:	7a7b      	ldrb	r3, [r7, #9]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <Display_dab_digrad_status_data+0xc0>
	{
		ILI9341_Draw_String(225, 23, RED, DARKGREY, "FIC ERROR", 2);
 80033a4:	2302      	movs	r3, #2
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <Display_dab_digrad_status_data+0xbc>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80033b0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033b4:	2117      	movs	r1, #23
 80033b6:	20e1      	movs	r0, #225	; 0xe1
 80033b8:	f7fd fb86 	bl	8000ac8 <ILI9341_Draw_String>
 80033bc:	e012      	b.n	80033e4 <Display_dab_digrad_status_data+0xd8>
 80033be:	bf00      	nop
 80033c0:	0800a894 	.word	0x0800a894
 80033c4:	0800a89c 	.word	0x0800a89c
 80033c8:	0800a8a4 	.word	0x0800a8a4
	}
	else
	{
		ILI9341_Draw_String(225, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 80033cc:	2302      	movs	r3, #2
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	4baa      	ldr	r3, [pc, #680]	; (800367c <Display_dab_digrad_status_data+0x370>)
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80033d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80033dc:	2117      	movs	r1, #23
 80033de:	20e1      	movs	r0, #225	; 0xe1
 80033e0:	f7fd fb72 	bl	8000ac8 <ILI9341_Draw_String>
	}

	//RSSI
	ILI9341_Draw_String(150, 20 + 3*STRING_SPACING, WHITE, BLACK, "   ", 2);
 80033e4:	2302      	movs	r3, #2
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	4ba5      	ldr	r3, [pc, #660]	; (8003680 <Display_dab_digrad_status_data+0x374>)
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2300      	movs	r3, #0
 80033ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f2:	213e      	movs	r1, #62	; 0x3e
 80033f4:	2096      	movs	r0, #150	; 0x96
 80033f6:	f7fd fb67 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 3*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.rssi, char_buffer, 10), 2);
 80033fa:	7abb      	ldrb	r3, [r7, #10]
 80033fc:	220a      	movs	r2, #10
 80033fe:	49a1      	ldr	r1, [pc, #644]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 8003400:	4618      	mov	r0, r3
 8003402:	f006 fb2f 	bl	8009a64 <itoa>
 8003406:	4603      	mov	r3, r0
 8003408:	2202      	movs	r2, #2
 800340a:	9201      	str	r2, [sp, #4]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003414:	213e      	movs	r1, #62	; 0x3e
 8003416:	2096      	movs	r0, #150	; 0x96
 8003418:	f7fd fb56 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR
	ILI9341_Draw_String(150, 20 + 4*STRING_SPACING, WHITE, BLACK, "   ", 2);
 800341c:	2302      	movs	r3, #2
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	4b97      	ldr	r3, [pc, #604]	; (8003680 <Display_dab_digrad_status_data+0x374>)
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800342a:	214c      	movs	r1, #76	; 0x4c
 800342c:	2096      	movs	r0, #150	; 0x96
 800342e:	f7fd fb4b 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 4*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.snr, char_buffer, 10), 2);
 8003432:	7afb      	ldrb	r3, [r7, #11]
 8003434:	220a      	movs	r2, #10
 8003436:	4993      	ldr	r1, [pc, #588]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 8003438:	4618      	mov	r0, r3
 800343a:	f006 fb13 	bl	8009a64 <itoa>
 800343e:	4603      	mov	r3, r0
 8003440:	2202      	movs	r2, #2
 8003442:	9201      	str	r2, [sp, #4]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344c:	214c      	movs	r1, #76	; 0x4c
 800344e:	2096      	movs	r0, #150	; 0x96
 8003450:	f7fd fb3a 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC QUALITY
	ILI9341_Draw_String(150, 20 + 5*STRING_SPACING, WHITE, BLACK, "   ", 2);
 8003454:	2302      	movs	r3, #2
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	4b89      	ldr	r3, [pc, #548]	; (8003680 <Display_dab_digrad_status_data+0x374>)
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003462:	215a      	movs	r1, #90	; 0x5a
 8003464:	2096      	movs	r0, #150	; 0x96
 8003466:	f7fd fb2f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 5*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.fic_quality, char_buffer, 10), 2);
 800346a:	7b3b      	ldrb	r3, [r7, #12]
 800346c:	220a      	movs	r2, #10
 800346e:	4985      	ldr	r1, [pc, #532]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 8003470:	4618      	mov	r0, r3
 8003472:	f006 faf7 	bl	8009a64 <itoa>
 8003476:	4603      	mov	r3, r0
 8003478:	2202      	movs	r2, #2
 800347a:	9201      	str	r2, [sp, #4]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003484:	215a      	movs	r1, #90	; 0x5a
 8003486:	2096      	movs	r0, #150	; 0x96
 8003488:	f7fd fb1e 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR
	ILI9341_Draw_String(150, 20 + 6*STRING_SPACING, WHITE, BLACK, "   ", 2);
 800348c:	2302      	movs	r3, #2
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	4b7b      	ldr	r3, [pc, #492]	; (8003680 <Display_dab_digrad_status_data+0x374>)
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800349a:	2168      	movs	r1, #104	; 0x68
 800349c:	2096      	movs	r0, #150	; 0x96
 800349e:	f7fd fb13 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 6*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.cnr, char_buffer, 10), 2);
 80034a2:	7b7b      	ldrb	r3, [r7, #13]
 80034a4:	220a      	movs	r2, #10
 80034a6:	4977      	ldr	r1, [pc, #476]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f006 fadb 	bl	8009a64 <itoa>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2202      	movs	r2, #2
 80034b2:	9201      	str	r2, [sp, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034bc:	2168      	movs	r1, #104	; 0x68
 80034be:	2096      	movs	r0, #150	; 0x96
 80034c0:	f7fd fb02 	bl	8000ac8 <ILI9341_Draw_String>
	//FIB ERROR COUNT
	ILI9341_Draw_String(150, 20 + 7*STRING_SPACING, WHITE, BLACK, "     ", 2);
 80034c4:	2302      	movs	r3, #2
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <Display_dab_digrad_status_data+0x37c>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	2176      	movs	r1, #118	; 0x76
 80034d4:	2096      	movs	r0, #150	; 0x96
 80034d6:	f7fd faf7 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 7*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.fib_err_count, char_buffer, 10), 2);
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	220a      	movs	r2, #10
 80034de:	4969      	ldr	r1, [pc, #420]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f006 fabf 	bl	8009a64 <itoa>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2202      	movs	r2, #2
 80034ea:	9201      	str	r2, [sp, #4]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f4:	2176      	movs	r1, #118	; 0x76
 80034f6:	2096      	movs	r0, #150	; 0x96
 80034f8:	f7fd fae6 	bl	8000ac8 <ILI9341_Draw_String>
	//TUNE FREQ
	ILI9341_Draw_String(150, 20 + 8*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.tune_freq, char_buffer, 10), 2);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	220a      	movs	r2, #10
 8003500:	4960      	ldr	r1, [pc, #384]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 8003502:	4618      	mov	r0, r3
 8003504:	f006 faae 	bl	8009a64 <itoa>
 8003508:	4603      	mov	r3, r0
 800350a:	2202      	movs	r2, #2
 800350c:	9201      	str	r2, [sp, #4]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003516:	2184      	movs	r1, #132	; 0x84
 8003518:	2096      	movs	r0, #150	; 0x96
 800351a:	f7fd fad5 	bl	8000ac8 <ILI9341_Draw_String>
	//TUNE INDEX
	ILI9341_Draw_String(150, 20 + 9*STRING_SPACING, WHITE, BLACK, "  ", 2);
 800351e:	2302      	movs	r3, #2
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	4b5a      	ldr	r3, [pc, #360]	; (800368c <Display_dab_digrad_status_data+0x380>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800352c:	2192      	movs	r1, #146	; 0x92
 800352e:	2096      	movs	r0, #150	; 0x96
 8003530:	f7fd faca 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 9*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.tune_index, char_buffer, 10), 2);
 8003534:	7d3b      	ldrb	r3, [r7, #20]
 8003536:	220a      	movs	r2, #10
 8003538:	4952      	ldr	r1, [pc, #328]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 800353a:	4618      	mov	r0, r3
 800353c:	f006 fa92 	bl	8009a64 <itoa>
 8003540:	4603      	mov	r3, r0
 8003542:	2202      	movs	r2, #2
 8003544:	9201      	str	r2, [sp, #4]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2300      	movs	r3, #0
 800354a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800354e:	2192      	movs	r1, #146	; 0x92
 8003550:	2096      	movs	r0, #150	; 0x96
 8003552:	f7fd fab9 	bl	8000ac8 <ILI9341_Draw_String>
	//FFT OFFSET
	ILI9341_Draw_String(150, 20 + 10*STRING_SPACING, WHITE, BLACK, "   ", 2);
 8003556:	2302      	movs	r3, #2
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	4b49      	ldr	r3, [pc, #292]	; (8003680 <Display_dab_digrad_status_data+0x374>)
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003564:	21a0      	movs	r1, #160	; 0xa0
 8003566:	2096      	movs	r0, #150	; 0x96
 8003568:	f7fd faae 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 10*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.fft_offset, char_buffer, 10), 2);
 800356c:	7d7b      	ldrb	r3, [r7, #21]
 800356e:	220a      	movs	r2, #10
 8003570:	4944      	ldr	r1, [pc, #272]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 8003572:	4618      	mov	r0, r3
 8003574:	f006 fa76 	bl	8009a64 <itoa>
 8003578:	4603      	mov	r3, r0
 800357a:	2202      	movs	r2, #2
 800357c:	9201      	str	r2, [sp, #4]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003586:	21a0      	movs	r1, #160	; 0xa0
 8003588:	2096      	movs	r0, #150	; 0x96
 800358a:	f7fd fa9d 	bl	8000ac8 <ILI9341_Draw_String>
	//ANT CAP TRIM
	ILI9341_Draw_String(150, 20 + 11*STRING_SPACING, WHITE, BLACK, "     ", 2);
 800358e:	2302      	movs	r3, #2
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <Display_dab_digrad_status_data+0x37c>)
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2300      	movs	r3, #0
 8003598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800359c:	21ae      	movs	r1, #174	; 0xae
 800359e:	2096      	movs	r0, #150	; 0x96
 80035a0:	f7fd fa92 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 11*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.read_ant_cap, char_buffer, 10), 2);
 80035a4:	8afb      	ldrh	r3, [r7, #22]
 80035a6:	220a      	movs	r2, #10
 80035a8:	4936      	ldr	r1, [pc, #216]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f006 fa5a 	bl	8009a64 <itoa>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2202      	movs	r2, #2
 80035b4:	9201      	str	r2, [sp, #4]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035be:	21ae      	movs	r1, #174	; 0xae
 80035c0:	2096      	movs	r0, #150	; 0x96
 80035c2:	f7fd fa81 	bl	8000ac8 <ILI9341_Draw_String>
	//CU LEVEL
	ILI9341_Draw_String(150, 20 + 12*STRING_SPACING, WHITE, BLACK, "     ", 2);
 80035c6:	2302      	movs	r3, #2
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <Display_dab_digrad_status_data+0x37c>)
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2300      	movs	r3, #0
 80035d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d4:	21bc      	movs	r1, #188	; 0xbc
 80035d6:	2096      	movs	r0, #150	; 0x96
 80035d8:	f7fd fa76 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 12*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.cu_level, char_buffer, 10), 2);
 80035dc:	8b3b      	ldrh	r3, [r7, #24]
 80035de:	220a      	movs	r2, #10
 80035e0:	4928      	ldr	r1, [pc, #160]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f006 fa3e 	bl	8009a64 <itoa>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2202      	movs	r2, #2
 80035ec:	9201      	str	r2, [sp, #4]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f6:	21bc      	movs	r1, #188	; 0xbc
 80035f8:	2096      	movs	r0, #150	; 0x96
 80035fa:	f7fd fa65 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC ERR CNT
	ILI9341_Draw_String(150, 20 + 13*STRING_SPACING, WHITE, BLACK, "          ", 2);
 80035fe:	2302      	movs	r3, #2
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	4b23      	ldr	r3, [pc, #140]	; (8003690 <Display_dab_digrad_status_data+0x384>)
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360c:	21ca      	movs	r1, #202	; 0xca
 800360e:	2096      	movs	r0, #150	; 0x96
 8003610:	f7fd fa5a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 13*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.fic_err_cnt, char_buffer, 10), 2);
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	220a      	movs	r2, #10
 8003618:	491a      	ldr	r1, [pc, #104]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 800361a:	4618      	mov	r0, r3
 800361c:	f006 fa22 	bl	8009a64 <itoa>
 8003620:	4603      	mov	r3, r0
 8003622:	2202      	movs	r2, #2
 8003624:	9201      	str	r2, [sp, #4]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362e:	21ca      	movs	r1, #202	; 0xca
 8003630:	2096      	movs	r0, #150	; 0x96
 8003632:	f7fd fa49 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC BIT CNT
	ILI9341_Draw_String(150, 20 + 14*STRING_SPACING, WHITE, BLACK, "          ", 2);
 8003636:	2302      	movs	r3, #2
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <Display_dab_digrad_status_data+0x384>)
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2300      	movs	r3, #0
 8003640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003644:	21d8      	movs	r1, #216	; 0xd8
 8003646:	2096      	movs	r0, #150	; 0x96
 8003648:	f7fd fa3e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 20 + 14*STRING_SPACING, WHITE, BLACK, itoa(digrad_status.fic_bit_cnt, char_buffer, 10), 2);
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	220a      	movs	r2, #10
 8003650:	490c      	ldr	r1, [pc, #48]	; (8003684 <Display_dab_digrad_status_data+0x378>)
 8003652:	4618      	mov	r0, r3
 8003654:	f006 fa06 	bl	8009a64 <itoa>
 8003658:	4603      	mov	r3, r0
 800365a:	2202      	movs	r2, #2
 800365c:	9201      	str	r2, [sp, #4]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003666:	21d8      	movs	r1, #216	; 0xd8
 8003668:	2096      	movs	r0, #150	; 0x96
 800366a:	f7fd fa2d 	bl	8000ac8 <ILI9341_Draw_String>
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003676:	b004      	add	sp, #16
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	0800a8a4 	.word	0x0800a8a4
 8003680:	0800a8b0 	.word	0x0800a8b0
 8003684:	20002564 	.word	0x20002564
 8003688:	0800a8b4 	.word	0x0800a8b4
 800368c:	0800a8bc 	.word	0x0800a8bc
 8003690:	0800a8c0 	.word	0x0800a8c0

08003694 <Display_init_screen>:

void Display_init_screen()
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800369a:	2000      	movs	r0, #0
 800369c:	f7fd f908 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 80036a0:	2302      	movs	r3, #2
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <Display_init_screen+0xc4>)
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ae:	2128      	movs	r1, #40	; 0x28
 80036b0:	205f      	movs	r0, #95	; 0x5f
 80036b2:	f7fd fa09 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 80036b6:	2302      	movs	r3, #2
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <Display_init_screen+0xc8>)
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c4:	213c      	movs	r1, #60	; 0x3c
 80036c6:	2046      	movs	r0, #70	; 0x46
 80036c8:	f7fd f9fe 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 80036cc:	2302      	movs	r3, #2
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <Display_init_screen+0xcc>)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036da:	2150      	movs	r1, #80	; 0x50
 80036dc:	2082      	movs	r0, #130	; 0x82
 80036de:	f7fd f9f3 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 80036e2:	2302      	movs	r3, #2
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <Display_init_screen+0xd0>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2300      	movs	r3, #0
 80036ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036f0:	2164      	movs	r1, #100	; 0x64
 80036f2:	2064      	movs	r0, #100	; 0x64
 80036f4:	f7fd f9e8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 80036f8:	2302      	movs	r3, #2
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <Display_init_screen+0xd4>)
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003706:	2178      	movs	r1, #120	; 0x78
 8003708:	205a      	movs	r0, #90	; 0x5a
 800370a:	f7fd f9dd 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 800370e:	2302      	movs	r3, #2
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <Display_init_screen+0xd8>)
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2300      	movs	r3, #0
 8003718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800371c:	218c      	movs	r1, #140	; 0x8c
 800371e:	2032      	movs	r0, #50	; 0x32
 8003720:	f7fd f9d2 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003724:	2302      	movs	r3, #2
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <Display_init_screen+0xdc>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2300      	movs	r3, #0
 800372e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003732:	21a0      	movs	r1, #160	; 0xa0
 8003734:	205a      	movs	r0, #90	; 0x5a
 8003736:	f7fd f9c7 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 800373a:	2302      	movs	r3, #2
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <Display_init_screen+0xe0>)
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003748:	21b4      	movs	r1, #180	; 0xb4
 800374a:	2078      	movs	r0, #120	; 0x78
 800374c:	f7fd f9bc 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	0800a8cc 	.word	0x0800a8cc
 800375c:	0800a8dc 	.word	0x0800a8dc
 8003760:	0800a8f4 	.word	0x0800a8f4
 8003764:	0800a8fc 	.word	0x0800a8fc
 8003768:	0800a90c 	.word	0x0800a90c
 800376c:	0800a920 	.word	0x0800a920
 8003770:	0800a93c 	.word	0x0800a93c
 8003774:	0800a950 	.word	0x0800a950

08003778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <MX_DMA_Init+0x3c>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <MX_DMA_Init+0x3c>)
 8003788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <MX_DMA_Init+0x3c>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	2100      	movs	r1, #0
 800379e:	200f      	movs	r0, #15
 80037a0:	f001 f8e3 	bl	800496a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80037a4:	200f      	movs	r0, #15
 80037a6:	f001 f8fc 	bl	80049a2 <HAL_NVIC_EnableIRQ>

}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800

080037b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <MX_GPIO_Init+0x1b0>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a64      	ldr	r2, [pc, #400]	; (8003968 <MX_GPIO_Init+0x1b0>)
 80037d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b62      	ldr	r3, [pc, #392]	; (8003968 <MX_GPIO_Init+0x1b0>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	4b5e      	ldr	r3, [pc, #376]	; (8003968 <MX_GPIO_Init+0x1b0>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a5d      	ldr	r2, [pc, #372]	; (8003968 <MX_GPIO_Init+0x1b0>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b5b      	ldr	r3, [pc, #364]	; (8003968 <MX_GPIO_Init+0x1b0>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	4b57      	ldr	r3, [pc, #348]	; (8003968 <MX_GPIO_Init+0x1b0>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a56      	ldr	r2, [pc, #344]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b54      	ldr	r3, [pc, #336]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b50      	ldr	r3, [pc, #320]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a4f      	ldr	r2, [pc, #316]	; (8003968 <MX_GPIO_Init+0x1b0>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	4b49      	ldr	r3, [pc, #292]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a48      	ldr	r2, [pc, #288]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003848:	f043 0310 	orr.w	r3, r3, #16
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b46      	ldr	r3, [pc, #280]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	4b42      	ldr	r3, [pc, #264]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a41      	ldr	r2, [pc, #260]	; (8003968 <MX_GPIO_Init+0x1b0>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <MX_GPIO_Init+0x1b0>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8003876:	2200      	movs	r2, #0
 8003878:	2130      	movs	r1, #48	; 0x30
 800387a:	483c      	ldr	r0, [pc, #240]	; (800396c <MX_GPIO_Init+0x1b4>)
 800387c:	f001 fd7a 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003886:	483a      	ldr	r0, [pc, #232]	; (8003970 <MX_GPIO_Init+0x1b8>)
 8003888:	f001 fd74 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 800388c:	2200      	movs	r2, #0
 800388e:	f24f 7180 	movw	r1, #63360	; 0xf780
 8003892:	4838      	ldr	r0, [pc, #224]	; (8003974 <MX_GPIO_Init+0x1bc>)
 8003894:	f001 fd6e 	bl	8005374 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8003898:	2200      	movs	r2, #0
 800389a:	2128      	movs	r1, #40	; 0x28
 800389c:	4836      	ldr	r0, [pc, #216]	; (8003978 <MX_GPIO_Init+0x1c0>)
 800389e:	f001 fd69 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80038a2:	2310      	movs	r3, #16
 80038a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80038ae:	f107 031c 	add.w	r3, r7, #28
 80038b2:	4619      	mov	r1, r3
 80038b4:	4831      	ldr	r0, [pc, #196]	; (800397c <MX_GPIO_Init+0x1c4>)
 80038b6:	f001 fba9 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 80038ba:	2330      	movs	r3, #48	; 0x30
 80038bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038be:	2301      	movs	r3, #1
 80038c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	4619      	mov	r1, r3
 80038d0:	4826      	ldr	r0, [pc, #152]	; (800396c <MX_GPIO_Init+0x1b4>)
 80038d2:	f001 fb9b 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 80038d6:	2311      	movs	r3, #17
 80038d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	4823      	ldr	r0, [pc, #140]	; (8003978 <MX_GPIO_Init+0x1c0>)
 80038ea:	f001 fb8f 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80038ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f4:	2301      	movs	r3, #1
 80038f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	4619      	mov	r1, r3
 8003906:	481a      	ldr	r0, [pc, #104]	; (8003970 <MX_GPIO_Init+0x1b8>)
 8003908:	f001 fb80 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 800390c:	f24f 7380 	movw	r3, #63360	; 0xf780
 8003910:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003912:	2301      	movs	r3, #1
 8003914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391a:	2300      	movs	r3, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800391e:	f107 031c 	add.w	r3, r7, #28
 8003922:	4619      	mov	r1, r3
 8003924:	4813      	ldr	r0, [pc, #76]	; (8003974 <MX_GPIO_Init+0x1bc>)
 8003926:	f001 fb71 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800392a:	2340      	movs	r3, #64	; 0x40
 800392c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003936:	f107 031c 	add.w	r3, r7, #28
 800393a:	4619      	mov	r1, r3
 800393c:	480d      	ldr	r0, [pc, #52]	; (8003974 <MX_GPIO_Init+0x1bc>)
 800393e:	f001 fb65 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8003942:	2328      	movs	r3, #40	; 0x28
 8003944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003946:	2301      	movs	r3, #1
 8003948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	f107 031c 	add.w	r3, r7, #28
 8003956:	4619      	mov	r1, r3
 8003958:	4807      	ldr	r0, [pc, #28]	; (8003978 <MX_GPIO_Init+0x1c0>)
 800395a:	f001 fb57 	bl	800500c <HAL_GPIO_Init>

}
 800395e:	bf00      	nop
 8003960:	3730      	adds	r7, #48	; 0x30
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40020800 	.word	0x40020800
 8003970:	40021000 	.word	0x40021000
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40020400 	.word	0x40020400
 800397c:	40020000 	.word	0x40020000

08003980 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MX_I2C1_Init+0x50>)
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <MX_I2C1_Init+0x54>)
 8003988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <MX_I2C1_Init+0x50>)
 800398c:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <MX_I2C1_Init+0x58>)
 800398e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_I2C1_Init+0x50>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <MX_I2C1_Init+0x50>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <MX_I2C1_Init+0x50>)
 800399e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039bc:	4804      	ldr	r0, [pc, #16]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039be:	f001 fcf3 	bl	80053a8 <HAL_I2C_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039c8:	f000 fa20 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20002584 	.word	0x20002584
 80039d4:	40005400 	.word	0x40005400
 80039d8:	000186a0 	.word	0x000186a0

080039dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <MX_I2C3_Init+0x50>)
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <MX_I2C3_Init+0x54>)
 80039e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_I2C3_Init+0x50>)
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <MX_I2C3_Init+0x58>)
 80039ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <MX_I2C3_Init+0x50>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <MX_I2C3_Init+0x50>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <MX_I2C3_Init+0x50>)
 80039fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <MX_I2C3_Init+0x50>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <MX_I2C3_Init+0x50>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <MX_I2C3_Init+0x50>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <MX_I2C3_Init+0x50>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a18:	4804      	ldr	r0, [pc, #16]	; (8003a2c <MX_I2C3_Init+0x50>)
 8003a1a:	f001 fcc5 	bl	80053a8 <HAL_I2C_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a24:	f000 f9f2 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200025d8 	.word	0x200025d8
 8003a30:	40005c00 	.word	0x40005c00
 8003a34:	000186a0 	.word	0x000186a0

08003a38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a40:	f107 031c 	add.w	r3, r7, #28
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a4a      	ldr	r2, [pc, #296]	; (8003b80 <HAL_I2C_MspInit+0x148>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d12c      	bne.n	8003ab4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a48      	ldr	r2, [pc, #288]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8003a76:	23c0      	movs	r3, #192	; 0xc0
 8003a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a7a:	2312      	movs	r3, #18
 8003a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a86:	2304      	movs	r3, #4
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	483d      	ldr	r0, [pc, #244]	; (8003b88 <HAL_I2C_MspInit+0x150>)
 8003a92:	f001 fabb 	bl	800500c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a39      	ldr	r2, [pc, #228]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003ab2:	e060      	b.n	8003b76 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <HAL_I2C_MspInit+0x154>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d15b      	bne.n	8003b76 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8003af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003afc:	2312      	movs	r3, #18
 8003afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b08:	2304      	movs	r3, #4
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	4619      	mov	r1, r3
 8003b12:	481f      	ldr	r0, [pc, #124]	; (8003b90 <HAL_I2C_MspInit+0x158>)
 8003b14:	f001 fa7a 	bl	800500c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8003b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1e:	2312      	movs	r3, #18
 8003b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4619      	mov	r1, r3
 8003b34:	4817      	ldr	r0, [pc, #92]	; (8003b94 <HAL_I2C_MspInit+0x15c>)
 8003b36:	f001 fa69 	bl	800500c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_I2C_MspInit+0x14c>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2048      	movs	r0, #72	; 0x48
 8003b5c:	f000 ff05 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003b60:	2048      	movs	r0, #72	; 0x48
 8003b62:	f000 ff1e 	bl	80049a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2049      	movs	r0, #73	; 0x49
 8003b6c:	f000 fefd 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003b70:	2049      	movs	r0, #73	; 0x49
 8003b72:	f000 ff16 	bl	80049a2 <HAL_NVIC_EnableIRQ>
}
 8003b76:	bf00      	nop
 8003b78:	3730      	adds	r7, #48	; 0x30
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40005400 	.word	0x40005400
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40005c00 	.word	0x40005c00
 8003b90:	40020800 	.word	0x40020800
 8003b94:	40020000 	.word	0x40020000

08003b98 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	led_number++;
 8003b9c:	4b42      	ldr	r3, [pc, #264]	; (8003ca8 <Leds_Control_Blink+0x110>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <Leds_Control_Blink+0x110>)
 8003ba6:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <Leds_Control_Blink+0x110>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d102      	bne.n	8003bb6 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8003bb0:	4b3d      	ldr	r3, [pc, #244]	; (8003ca8 <Leds_Control_Blink+0x110>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <Leds_Control_Blink+0x110>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d86f      	bhi.n	8003ca0 <Leds_Control_Blink+0x108>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <Leds_Control_Blink+0x30>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003c3d 	.word	0x08003c3d
 8003bd4:	08003c6f 	.word	0x08003c6f
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bde:	4833      	ldr	r0, [pc, #204]	; (8003cac <Leds_Control_Blink+0x114>)
 8003be0:	f001 fbc8 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bea:	4830      	ldr	r0, [pc, #192]	; (8003cac <Leds_Control_Blink+0x114>)
 8003bec:	f001 fbc2 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf6:	482d      	ldr	r0, [pc, #180]	; (8003cac <Leds_Control_Blink+0x114>)
 8003bf8:	f001 fbbc 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c02:	482a      	ldr	r0, [pc, #168]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c04:	f001 fbb6 	bl	8005374 <HAL_GPIO_WritePin>
		break;
 8003c08:	e04b      	b.n	8003ca2 <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c10:	4826      	ldr	r0, [pc, #152]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c12:	f001 fbaf 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8003c16:	2201      	movs	r2, #1
 8003c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c1c:	4823      	ldr	r0, [pc, #140]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c1e:	f001 fba9 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8003c22:	2200      	movs	r2, #0
 8003c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c28:	4820      	ldr	r0, [pc, #128]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c2a:	f001 fba3 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c34:	481d      	ldr	r0, [pc, #116]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c36:	f001 fb9d 	bl	8005374 <HAL_GPIO_WritePin>
		break;
 8003c3a:	e032      	b.n	8003ca2 <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c42:	481a      	ldr	r0, [pc, #104]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c44:	f001 fb96 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c4e:	4817      	ldr	r0, [pc, #92]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c50:	f001 fb90 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8003c54:	2201      	movs	r2, #1
 8003c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c5a:	4814      	ldr	r0, [pc, #80]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c5c:	f001 fb8a 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c66:	4811      	ldr	r0, [pc, #68]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c68:	f001 fb84 	bl	8005374 <HAL_GPIO_WritePin>
		break;
 8003c6c:	e019      	b.n	8003ca2 <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c76:	f001 fb7d 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c80:	480a      	ldr	r0, [pc, #40]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c82:	f001 fb77 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8003c86:	2200      	movs	r2, #0
 8003c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c8c:	4807      	ldr	r0, [pc, #28]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c8e:	f001 fb71 	bl	8005374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 8003c92:	2201      	movs	r2, #1
 8003c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c98:	4804      	ldr	r0, [pc, #16]	; (8003cac <Leds_Control_Blink+0x114>)
 8003c9a:	f001 fb6b 	bl	8005374 <HAL_GPIO_WritePin>
		break;
 8003c9e:	e000      	b.n	8003ca2 <Leds_Control_Blink+0x10a>
	default:

		break;
 8003ca0:	bf00      	nop
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200000ac 	.word	0x200000ac
 8003cac:	40020c00 	.word	0x40020c00

08003cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cb4:	f000 fce8 	bl	8004688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cb8:	f000 f83e 	bl	8003d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cbc:	f7ff fd7c 	bl	80037b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003cc0:	f7ff fd5a 	bl	8003778 <MX_DMA_Init>
  MX_I2C1_Init();
 8003cc4:	f7ff fe5c 	bl	8003980 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003cc8:	f7ff fe88 	bl	80039dc <MX_I2C3_Init>
  MX_SPI1_Init();
 8003ccc:	f000 f8a4 	bl	8003e18 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003cd0:	f000 f8d8 	bl	8003e84 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003cd4:	f000 fa76 	bl	80041c4 <MX_TIM3_Init>
  MX_UART5_Init();
 8003cd8:	f000 fbb8 	bl	800444c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003cdc:	f000 fbe0 	bl	80044a0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003ce0:	f000 faca 	bl	8004278 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003ce4:	f000 faec 	bl	80042c0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	480f      	ldr	r0, [pc, #60]	; (8003d28 <main+0x78>)
 8003cec:	f7ff fa08 	bl	8003100 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim10);
 8003cf0:	480e      	ldr	r0, [pc, #56]	; (8003d2c <main+0x7c>)
 8003cf2:	f004 fd27 	bl	8008744 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003cf6:	480e      	ldr	r0, [pc, #56]	; (8003d30 <main+0x80>)
 8003cf8:	f004 fd24 	bl	8008744 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8003cfc:	f7fc fbee 	bl	80004dc <ILI9341_Init>
  Display_init_screen();
 8003d00:	f7ff fcc8 	bl	8003694 <Display_init_screen>
//  HAL_Delay(3000);

  Si468x_init();
 8003d04:	f7fd f9aa 	bl	800105c <Si468x_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8003d08:	2101      	movs	r1, #1
 8003d0a:	480a      	ldr	r0, [pc, #40]	; (8003d34 <main+0x84>)
 8003d0c:	f001 fb1a 	bl	8005344 <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <main+0x6a>
	  {
		  Si468x_play_next_station();
 8003d16:	f7ff f97f 	bl	8003018 <Si468x_play_next_station>
	  }
	  HAL_Delay(200);
 8003d1a:	20c8      	movs	r0, #200	; 0xc8
 8003d1c:	f000 fd26 	bl	800476c <HAL_Delay>
	  Si468x_dab_digrad_status();
 8003d20:	f7fe f868 	bl	8001df4 <Si468x_dab_digrad_status>
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8003d24:	e7f0      	b.n	8003d08 <main+0x58>
 8003d26:	bf00      	nop
 8003d28:	0800a95c 	.word	0x0800a95c
 8003d2c:	20002784 	.word	0x20002784
 8003d30:	200027cc 	.word	0x200027cc
 8003d34:	40020400 	.word	0x40020400

08003d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b094      	sub	sp, #80	; 0x50
 8003d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d3e:	f107 0320 	add.w	r3, r7, #32
 8003d42:	2230      	movs	r2, #48	; 0x30
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 fe8e 	bl	8009a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <SystemClock_Config+0xcc>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <SystemClock_Config+0xcc>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6c:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <SystemClock_Config+0xcc>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <SystemClock_Config+0xd0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <SystemClock_Config+0xd0>)
 8003d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <SystemClock_Config+0xd0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003da8:	2304      	movs	r3, #4
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003dac:	23a0      	movs	r3, #160	; 0xa0
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003db0:	2302      	movs	r3, #2
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003db4:	2304      	movs	r3, #4
 8003db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db8:	f107 0320 	add.w	r3, r7, #32
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 f913 	bl	8006fe8 <HAL_RCC_OscConfig>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003dc8:	f000 f820 	bl	8003e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dcc:	230f      	movs	r3, #15
 8003dce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	2105      	movs	r1, #5
 8003dea:	4618      	mov	r0, r3
 8003dec:	f003 fb74 	bl	80074d8 <HAL_RCC_ClockConfig>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003df6:	f000 f809 	bl	8003e0c <Error_Handler>
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3750      	adds	r7, #80	; 0x50
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000

08003e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e10:	b672      	cpsid	i
}
 8003e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <Error_Handler+0x8>
	...

08003e18 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e1e:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <MX_SPI1_Init+0x68>)
 8003e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e64:	220a      	movs	r2, #10
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e68:	4804      	ldr	r0, [pc, #16]	; (8003e7c <MX_SPI1_Init+0x64>)
 8003e6a:	f003 fd55 	bl	8007918 <HAL_SPI_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e74:	f7ff ffca 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	2000262c 	.word	0x2000262c
 8003e80:	40013000 	.word	0x40013000

08003e84 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003e8a:	4a18      	ldr	r2, [pc, #96]	; (8003eec <MX_SPI2_Init+0x68>)
 8003e8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec8:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003ed0:	220a      	movs	r2, #10
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ed4:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <MX_SPI2_Init+0x64>)
 8003ed6:	f003 fd1f 	bl	8007918 <HAL_SPI_Init>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ee0:	f7ff ff94 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ee4:	bf00      	nop
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20002684 	.word	0x20002684
 8003eec:	40003800 	.word	0x40003800

08003ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 031c 	add.w	r3, r7, #28
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4d      	ldr	r2, [pc, #308]	; (8004044 <HAL_SPI_MspInit+0x154>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d12c      	bne.n	8003f6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	4a4b      	ldr	r2, [pc, #300]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f20:	6453      	str	r3, [r2, #68]	; 0x44
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	4b45      	ldr	r3, [pc, #276]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a44      	ldr	r2, [pc, #272]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b42      	ldr	r3, [pc, #264]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8003f4a:	23e0      	movs	r3, #224	; 0xe0
 8003f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f56:	2303      	movs	r3, #3
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f5a:	2305      	movs	r3, #5
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5e:	f107 031c 	add.w	r3, r7, #28
 8003f62:	4619      	mov	r1, r3
 8003f64:	4839      	ldr	r0, [pc, #228]	; (800404c <HAL_SPI_MspInit+0x15c>)
 8003f66:	f001 f851 	bl	800500c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003f6a:	e066      	b.n	800403a <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a37      	ldr	r2, [pc, #220]	; (8004050 <HAL_SPI_MspInit+0x160>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d161      	bne.n	800403a <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	4b33      	ldr	r3, [pc, #204]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4a32      	ldr	r2, [pc, #200]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
 8003f86:	4b30      	ldr	r3, [pc, #192]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a2b      	ldr	r2, [pc, #172]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_SPI_MspInit+0x158>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8003fae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fc0:	2305      	movs	r3, #5
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4822      	ldr	r0, [pc, #136]	; (8004054 <HAL_SPI_MspInit+0x164>)
 8003fcc:	f001 f81e 	bl	800500c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <HAL_SPI_MspInit+0x16c>)
 8003fd4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003fde:	2240      	movs	r2, #64	; 0x40
 8003fe0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_SPI_MspInit+0x168>)
 800400a:	2200      	movs	r2, #0
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800400e:	4812      	ldr	r0, [pc, #72]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8004010:	f000 fce2 	bl	80049d8 <HAL_DMA_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 800401a:	f7ff fef7 	bl	8003e0c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8004022:	649a      	str	r2, [r3, #72]	; 0x48
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <HAL_SPI_MspInit+0x168>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800402a:	2200      	movs	r2, #0
 800402c:	2100      	movs	r1, #0
 800402e:	2024      	movs	r0, #36	; 0x24
 8004030:	f000 fc9b 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004034:	2024      	movs	r0, #36	; 0x24
 8004036:	f000 fcb4 	bl	80049a2 <HAL_NVIC_EnableIRQ>
}
 800403a:	bf00      	nop
 800403c:	3730      	adds	r7, #48	; 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40013000 	.word	0x40013000
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000
 8004050:	40003800 	.word	0x40003800
 8004054:	40020400 	.word	0x40020400
 8004058:	200026dc 	.word	0x200026dc
 800405c:	40026070 	.word	0x40026070

08004060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_MspInit+0x4c>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <HAL_MspInit+0x4c>)
 8004070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004074:	6453      	str	r3, [r2, #68]	; 0x44
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_MspInit+0x4c>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_MspInit+0x4c>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_MspInit+0x4c>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_MspInit+0x4c>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800

080040b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <NMI_Handler+0x4>

080040b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ba:	e7fe      	b.n	80040ba <HardFault_Handler+0x4>

080040bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c0:	e7fe      	b.n	80040c0 <MemManage_Handler+0x4>

080040c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <BusFault_Handler+0x4>

080040c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <UsageFault_Handler+0x4>

080040ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040fc:	f000 fb16 	bl	800472c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}

08004104 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <DMA1_Stream4_IRQHandler+0x10>)
 800410a:	f000 fd35 	bl	8004b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200026dc 	.word	0x200026dc

08004118 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800411e:	f004 fbd0 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20002784 	.word	0x20002784

0800412c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004132:	f004 fbc6 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200027cc 	.word	0x200027cc

08004140 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <SPI2_IRQHandler+0x10>)
 8004146:	f004 f85f 	bl	8008208 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20002684 	.word	0x20002684

08004154 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004158:	4802      	ldr	r0, [pc, #8]	; (8004164 <I2C3_EV_IRQHandler+0x10>)
 800415a:	f001 fa69 	bl	8005630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200025d8 	.word	0x200025d8

08004168 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800416c:	4802      	ldr	r0, [pc, #8]	; (8004178 <I2C3_ER_IRQHandler+0x10>)
 800416e:	f001 fbd0 	bl	8005912 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200025d8 	.word	0x200025d8

0800417c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 800418e:	f7ff fd03 	bl	8003b98 <Leds_Control_Blink>
//		Si468x_dab_reset_interrupts();
//		Si468x_dab_digrad_status();

	}
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40014800 	.word	0x40014800

080041a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <SystemInit+0x20>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <SystemInit+0x20>)
 80041ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ca:	f107 0320 	add.w	r3, r7, #32
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	611a      	str	r2, [r3, #16]
 80041e2:	615a      	str	r2, [r3, #20]
 80041e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <MX_TIM3_Init+0xac>)
 80041e8:	4a22      	ldr	r2, [pc, #136]	; (8004274 <MX_TIM3_Init+0xb0>)
 80041ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <MX_TIM3_Init+0xac>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f2:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <MX_TIM3_Init+0xac>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <MX_TIM3_Init+0xac>)
 80041fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <MX_TIM3_Init+0xac>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <MX_TIM3_Init+0xac>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800420c:	4818      	ldr	r0, [pc, #96]	; (8004270 <MX_TIM3_Init+0xac>)
 800420e:	f004 fb09 	bl	8008824 <HAL_TIM_PWM_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004218:	f7ff fdf8 	bl	8003e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004224:	f107 0320 	add.w	r3, r7, #32
 8004228:	4619      	mov	r1, r3
 800422a:	4811      	ldr	r0, [pc, #68]	; (8004270 <MX_TIM3_Init+0xac>)
 800422c:	f004 ff8c 	bl	8009148 <HAL_TIMEx_MasterConfigSynchronization>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004236:	f7ff fde9 	bl	8003e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800423a:	2360      	movs	r3, #96	; 0x60
 800423c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	2208      	movs	r2, #8
 800424e:	4619      	mov	r1, r3
 8004250:	4807      	ldr	r0, [pc, #28]	; (8004270 <MX_TIM3_Init+0xac>)
 8004252:	f004 fc3f 	bl	8008ad4 <HAL_TIM_PWM_ConfigChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800425c:	f7ff fdd6 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004260:	4803      	ldr	r0, [pc, #12]	; (8004270 <MX_TIM3_Init+0xac>)
 8004262:	f000 f8b9 	bl	80043d8 <HAL_TIM_MspPostInit>

}
 8004266:	bf00      	nop
 8004268:	3728      	adds	r7, #40	; 0x28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2000273c 	.word	0x2000273c
 8004274:	40000400 	.word	0x40000400

08004278 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <MX_TIM10_Init+0x40>)
 800427e:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <MX_TIM10_Init+0x44>)
 8004280:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <MX_TIM10_Init+0x40>)
 8004284:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004288:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <MX_TIM10_Init+0x40>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <MX_TIM10_Init+0x40>)
 8004292:	f240 2257 	movw	r2, #599	; 0x257
 8004296:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <MX_TIM10_Init+0x40>)
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <MX_TIM10_Init+0x40>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80042a4:	4804      	ldr	r0, [pc, #16]	; (80042b8 <MX_TIM10_Init+0x40>)
 80042a6:	f004 f9fd 	bl	80086a4 <HAL_TIM_Base_Init>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80042b0:	f7ff fdac 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20002784 	.word	0x20002784
 80042bc:	40014400 	.word	0x40014400

080042c0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80042c4:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <MX_TIM11_Init+0x40>)
 80042c6:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <MX_TIM11_Init+0x44>)
 80042c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <MX_TIM11_Init+0x40>)
 80042cc:	f643 2297 	movw	r2, #14999	; 0x3a97
 80042d0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <MX_TIM11_Init+0x40>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <MX_TIM11_Init+0x40>)
 80042da:	f240 5213 	movw	r2, #1299	; 0x513
 80042de:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <MX_TIM11_Init+0x40>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <MX_TIM11_Init+0x40>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80042ec:	4804      	ldr	r0, [pc, #16]	; (8004300 <MX_TIM11_Init+0x40>)
 80042ee:	f004 f9d9 	bl	80086a4 <HAL_TIM_Base_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80042f8:	f7ff fd88 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200027cc 	.word	0x200027cc
 8004304:	40014800 	.word	0x40014800

08004308 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <HAL_TIM_PWM_MspInit+0x3c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10d      	bne.n	8004336 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_TIM_PWM_MspInit+0x40>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_TIM_PWM_MspInit+0x40>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <HAL_TIM_PWM_MspInit+0x40>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40000400 	.word	0x40000400
 8004348:	40023800 	.word	0x40023800

0800434c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_TIM_Base_MspInit+0x80>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d116      	bne.n	800438c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_TIM_Base_MspInit+0x84>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	4a1a      	ldr	r2, [pc, #104]	; (80043d0 <HAL_TIM_Base_MspInit+0x84>)
 8004368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436c:	6453      	str	r3, [r2, #68]	; 0x44
 800436e:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <HAL_TIM_Base_MspInit+0x84>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2100      	movs	r1, #0
 800437e:	2019      	movs	r0, #25
 8004380:	f000 faf3 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004384:	2019      	movs	r0, #25
 8004386:	f000 fb0c 	bl	80049a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800438a:	e01a      	b.n	80043c2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_TIM_Base_MspInit+0x88>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d115      	bne.n	80043c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_TIM_Base_MspInit+0x84>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <HAL_TIM_Base_MspInit+0x84>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a4:	6453      	str	r3, [r2, #68]	; 0x44
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_TIM_Base_MspInit+0x84>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	201a      	movs	r0, #26
 80043b8:	f000 fad7 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80043bc:	201a      	movs	r0, #26
 80043be:	f000 faf0 	bl	80049a2 <HAL_NVIC_EnableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40014800 	.word	0x40014800

080043d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a12      	ldr	r2, [pc, #72]	; (8004440 <HAL_TIM_MspPostInit+0x68>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d11e      	bne.n	8004438 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_TIM_MspPostInit+0x6c>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_TIM_MspPostInit+0x6c>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <HAL_TIM_MspPostInit+0x6c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8004416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441c:	2302      	movs	r3, #2
 800441e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004428:	2302      	movs	r3, #2
 800442a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	4619      	mov	r1, r3
 8004432:	4805      	ldr	r0, [pc, #20]	; (8004448 <HAL_TIM_MspPostInit+0x70>)
 8004434:	f000 fdea 	bl	800500c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004438:	bf00      	nop
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40000400 	.word	0x40000400
 8004444:	40023800 	.word	0x40023800
 8004448:	40020800 	.word	0x40020800

0800444c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <MX_UART5_Init+0x4c>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <MX_UART5_Init+0x50>)
 8004454:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <MX_UART5_Init+0x4c>)
 8004458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800445c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <MX_UART5_Init+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <MX_UART5_Init+0x4c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <MX_UART5_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <MX_UART5_Init+0x4c>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <MX_UART5_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <MX_UART5_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004482:	4805      	ldr	r0, [pc, #20]	; (8004498 <MX_UART5_Init+0x4c>)
 8004484:	f004 fef0 	bl	8009268 <HAL_UART_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800448e:	f7ff fcbd 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20002814 	.word	0x20002814
 800449c:	40005000 	.word	0x40005000

080044a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <MX_USART3_UART_Init+0x50>)
 80044a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80044b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044c6:	220c      	movs	r2, #12
 80044c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044d6:	4805      	ldr	r0, [pc, #20]	; (80044ec <MX_USART3_UART_Init+0x4c>)
 80044d8:	f004 fec6 	bl	8009268 <HAL_UART_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80044e2:	f7ff fc93 	bl	8003e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20002858 	.word	0x20002858
 80044f0:	40004800 	.word	0x40004800

080044f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08c      	sub	sp, #48	; 0x30
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 031c 	add.w	r3, r7, #28
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a42      	ldr	r2, [pc, #264]	; (800461c <HAL_UART_MspInit+0x128>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d14b      	bne.n	80045ae <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_UART_MspInit+0x12c>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a40      	ldr	r2, [pc, #256]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a39      	ldr	r2, [pc, #228]	; (8004620 <HAL_UART_MspInit+0x12c>)
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a32      	ldr	r2, [pc, #200]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004558:	f043 0308 	orr.w	r3, r3, #8
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_UART_MspInit+0x12c>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800456a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800456e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800457c:	2308      	movs	r3, #8
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	4827      	ldr	r0, [pc, #156]	; (8004624 <HAL_UART_MspInit+0x130>)
 8004588:	f000 fd40 	bl	800500c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800458c:	2304      	movs	r3, #4
 800458e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2302      	movs	r3, #2
 8004592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004598:	2303      	movs	r3, #3
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800459c:	2308      	movs	r3, #8
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a0:	f107 031c 	add.w	r3, r7, #28
 80045a4:	4619      	mov	r1, r3
 80045a6:	4820      	ldr	r0, [pc, #128]	; (8004628 <HAL_UART_MspInit+0x134>)
 80045a8:	f000 fd30 	bl	800500c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80045ac:	e031      	b.n	8004612 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1e      	ldr	r2, [pc, #120]	; (800462c <HAL_UART_MspInit+0x138>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d12c      	bne.n	8004612 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_UART_MspInit+0x12c>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_UART_MspInit+0x12c>)
 80045c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <HAL_UART_MspInit+0x12c>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_UART_MspInit+0x12c>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_UART_MspInit+0x12c>)
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_UART_MspInit+0x12c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80045f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fe:	2303      	movs	r3, #3
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004602:	2307      	movs	r3, #7
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004606:	f107 031c 	add.w	r3, r7, #28
 800460a:	4619      	mov	r1, r3
 800460c:	4808      	ldr	r0, [pc, #32]	; (8004630 <HAL_UART_MspInit+0x13c>)
 800460e:	f000 fcfd 	bl	800500c <HAL_GPIO_Init>
}
 8004612:	bf00      	nop
 8004614:	3730      	adds	r7, #48	; 0x30
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40005000 	.word	0x40005000
 8004620:	40023800 	.word	0x40023800
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40004800 	.word	0x40004800
 8004630:	40020400 	.word	0x40020400

08004634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800466c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004638:	480d      	ldr	r0, [pc, #52]	; (8004670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800463a:	490e      	ldr	r1, [pc, #56]	; (8004674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800463c:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800463e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004640:	e002      	b.n	8004648 <LoopCopyDataInit>

08004642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004646:	3304      	adds	r3, #4

08004648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800464a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800464c:	d3f9      	bcc.n	8004642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464e:	4a0b      	ldr	r2, [pc, #44]	; (800467c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004650:	4c0b      	ldr	r4, [pc, #44]	; (8004680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004654:	e001      	b.n	800465a <LoopFillZerobss>

08004656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004658:	3204      	adds	r2, #4

0800465a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800465a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800465c:	d3fb      	bcc.n	8004656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800465e:	f7ff fd9f 	bl	80041a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004662:	f005 f9c3 	bl	80099ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004666:	f7ff fb23 	bl	8003cb0 <main>
  bx  lr    
 800466a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800466c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004674:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004678:	0800c930 	.word	0x0800c930
  ldr r2, =_sbss
 800467c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8004680:	200028a0 	.word	0x200028a0

08004684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004684:	e7fe      	b.n	8004684 <ADC_IRQHandler>
	...

08004688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_Init+0x40>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <HAL_Init+0x40>)
 8004692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_Init+0x40>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <HAL_Init+0x40>)
 800469e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_Init+0x40>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a07      	ldr	r2, [pc, #28]	; (80046c8 <HAL_Init+0x40>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046b0:	2003      	movs	r0, #3
 80046b2:	f000 f94f 	bl	8004954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b6:	200f      	movs	r0, #15
 80046b8:	f000 f808 	bl	80046cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046bc:	f7ff fcd0 	bl	8004060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023c00 	.word	0x40023c00

080046cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_InitTick+0x54>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_InitTick+0x58>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f967 	bl	80049be <HAL_SYSTICK_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00e      	b.n	8004718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d80a      	bhi.n	8004716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004700:	2200      	movs	r2, #0
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	f000 f92f 	bl	800496a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800470c:	4a06      	ldr	r2, [pc, #24]	; (8004728 <HAL_InitTick+0x5c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200000b0 	.word	0x200000b0
 8004724:	200000b8 	.word	0x200000b8
 8004728:	200000b4 	.word	0x200000b4

0800472c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_IncTick+0x20>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_IncTick+0x24>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4413      	add	r3, r2
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_IncTick+0x24>)
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	200000b8 	.word	0x200000b8
 8004750:	2000289c 	.word	0x2000289c

08004754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return uwTick;
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_GetTick+0x14>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	2000289c 	.word	0x2000289c

0800476c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7ff ffee 	bl	8004754 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d005      	beq.n	8004792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_Delay+0x44>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004792:	bf00      	nop
 8004794:	f7ff ffde 	bl	8004754 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d8f7      	bhi.n	8004794 <HAL_Delay+0x28>
  {
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200000b8 	.word	0x200000b8

080047b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e6:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	60d3      	str	r3, [r2, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <__NVIC_GetPriorityGrouping+0x18>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f003 0307 	and.w	r3, r3, #7
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db0b      	blt.n	8004842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	4907      	ldr	r1, [pc, #28]	; (8004850 <__NVIC_EnableIRQ+0x38>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2001      	movs	r0, #1
 800483a:	fa00 f202 	lsl.w	r2, r0, r2
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e100 	.word	0xe000e100

08004854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db0a      	blt.n	800487e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	490c      	ldr	r1, [pc, #48]	; (80048a0 <__NVIC_SetPriority+0x4c>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	440b      	add	r3, r1
 8004878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800487c:	e00a      	b.n	8004894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4908      	ldr	r1, [pc, #32]	; (80048a4 <__NVIC_SetPriority+0x50>)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3b04      	subs	r3, #4
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	440b      	add	r3, r1
 8004892:	761a      	strb	r2, [r3, #24]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f1c3 0307 	rsb	r3, r3, #7
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	bf28      	it	cs
 80048c6:	2304      	movcs	r3, #4
 80048c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d902      	bls.n	80048d8 <NVIC_EncodePriority+0x30>
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3b03      	subs	r3, #3
 80048d6:	e000      	b.n	80048da <NVIC_EncodePriority+0x32>
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	401a      	ands	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f0:	f04f 31ff 	mov.w	r1, #4294967295
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	43d9      	mvns	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	4313      	orrs	r3, r2
         );
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004920:	d301      	bcc.n	8004926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004922:	2301      	movs	r3, #1
 8004924:	e00f      	b.n	8004946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <SysTick_Config+0x40>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492e:	210f      	movs	r1, #15
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	f7ff ff8e 	bl	8004854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <SysTick_Config+0x40>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <SysTick_Config+0x40>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010

08004954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff29 	bl	80047b4 <__NVIC_SetPriorityGrouping>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800497c:	f7ff ff3e 	bl	80047fc <__NVIC_GetPriorityGrouping>
 8004980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f7ff ff8e 	bl	80048a8 <NVIC_EncodePriority>
 800498c:	4602      	mov	r2, r0
 800498e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff5d 	bl	8004854 <__NVIC_SetPriority>
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	4603      	mov	r3, r0
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ff31 	bl	8004818 <__NVIC_EnableIRQ>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ffa2 	bl	8004910 <SysTick_Config>
 80049cc:	4603      	mov	r3, r0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049e4:	f7ff feb6 	bl	8004754 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e099      	b.n	8004b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a14:	e00f      	b.n	8004a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a16:	f7ff fe9d 	bl	8004754 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d908      	bls.n	8004a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e078      	b.n	8004b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e8      	bne.n	8004a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_DMA_Init+0x158>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d107      	bne.n	8004aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d117      	bne.n	8004afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fa19 	bl	8004f14 <DMA_CheckFifoParam>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004af6:	2301      	movs	r3, #1
 8004af8:	e016      	b.n	8004b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9d0 	bl	8004ea8 <DMA_CalcBaseAndBitshift>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	223f      	movs	r2, #63	; 0x3f
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	f010803f 	.word	0xf010803f

08004b34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	; 0x80
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e00c      	b.n	8004b6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2205      	movs	r2, #5
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b84:	4b8e      	ldr	r3, [pc, #568]	; (8004dc0 <HAL_DMA_IRQHandler+0x248>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a8e      	ldr	r2, [pc, #568]	; (8004dc4 <HAL_DMA_IRQHandler+0x24c>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0a9b      	lsrs	r3, r3, #10
 8004b90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01a      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	f043 0201 	orr.w	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	2201      	movs	r2, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d012      	beq.n	8004c1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	2201      	movs	r2, #1
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f043 0202 	orr.w	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	2204      	movs	r2, #4
 8004c20:	409a      	lsls	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d012      	beq.n	8004c50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f043 0204 	orr.w	r2, r3, #4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	2210      	movs	r2, #16
 8004c56:	409a      	lsls	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d043      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03c      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	2210      	movs	r2, #16
 8004c74:	409a      	lsls	r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d018      	beq.n	8004cba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d024      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	e01f      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
 8004cb8:	e016      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0208 	bic.w	r2, r2, #8
 8004cd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	2220      	movs	r2, #32
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 808f 	beq.w	8004e18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8087 	beq.w	8004e18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0e:	2220      	movs	r2, #32
 8004d10:	409a      	lsls	r2, r3
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d136      	bne.n	8004d90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0216 	bic.w	r2, r2, #22
 8004d30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <HAL_DMA_IRQHandler+0x1da>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0208 	bic.w	r2, r2, #8
 8004d60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d66:	223f      	movs	r2, #63	; 0x3f
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d07e      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
        }
        return;
 8004d8e:	e079      	b.n	8004e84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01d      	beq.n	8004dda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d031      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
 8004dbc:	e02c      	b.n	8004e18 <HAL_DMA_IRQHandler+0x2a0>
 8004dbe:	bf00      	nop
 8004dc0:	200000b0 	.word	0x200000b0
 8004dc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d023      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
 8004dd8:	e01e      	b.n	8004e18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10f      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0210 	bic.w	r2, r2, #16
 8004df6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d032      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d022      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2205      	movs	r2, #5
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d307      	bcc.n	8004e60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f2      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x2cc>
 8004e5e:	e000      	b.n	8004e62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
 8004e82:	e000      	b.n	8004e86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e84:	bf00      	nop
    }
  }
}
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9a:	b2db      	uxtb	r3, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	3b10      	subs	r3, #16
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <DMA_CalcBaseAndBitshift+0x64>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <DMA_CalcBaseAndBitshift+0x68>)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d909      	bls.n	8004eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ee8:	e007      	b.n	8004efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	aaaaaaab 	.word	0xaaaaaaab
 8004f10:	0800c8f0 	.word	0x0800c8f0

08004f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11f      	bne.n	8004f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d856      	bhi.n	8004fe2 <DMA_CheckFifoParam+0xce>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <DMA_CheckFifoParam+0x28>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5f 	.word	0x08004f5f
 8004f44:	08004f4d 	.word	0x08004f4d
 8004f48:	08004fe3 	.word	0x08004fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d046      	beq.n	8004fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5c:	e043      	b.n	8004fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f66:	d140      	bne.n	8004fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6c:	e03d      	b.n	8004fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	d121      	bne.n	8004fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d837      	bhi.n	8004fee <DMA_CheckFifoParam+0xda>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <DMA_CheckFifoParam+0x70>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004f9b 	.word	0x08004f9b
 8004f8c:	08004f95 	.word	0x08004f95
 8004f90:	08004fad 	.word	0x08004fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      break;
 8004f98:	e030      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d025      	beq.n	8004ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004faa:	e022      	b.n	8004ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb4:	d11f      	bne.n	8004ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fba:	e01c      	b.n	8004ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d903      	bls.n	8004fca <DMA_CheckFifoParam+0xb6>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d003      	beq.n	8004fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fc8:	e018      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fce:	e015      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e00b      	b.n	8004ffa <DMA_CheckFifoParam+0xe6>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e00a      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e008      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004fea:	bf00      	nop
 8004fec:	e006      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e004      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e002      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e16b      	b.n	8005300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005028:	2201      	movs	r2, #1
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	429a      	cmp	r2, r3
 8005042:	f040 815a 	bne.w	80052fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d005      	beq.n	800505e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800505a:	2b02      	cmp	r3, #2
 800505c:	d130      	bne.n	80050c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	2203      	movs	r2, #3
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005094:	2201      	movs	r2, #1
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 0201 	and.w	r2, r3, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d017      	beq.n	80050fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	2203      	movs	r2, #3
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d123      	bne.n	8005150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	08da      	lsrs	r2, r3, #3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3208      	adds	r2, #8
 8005110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	220f      	movs	r2, #15
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	08da      	lsrs	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3208      	adds	r2, #8
 800514a:	69b9      	ldr	r1, [r7, #24]
 800514c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2203      	movs	r2, #3
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0203 	and.w	r2, r3, #3
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80b4 	beq.w	80052fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b60      	ldr	r3, [pc, #384]	; (8005318 <HAL_GPIO_Init+0x30c>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	4a5f      	ldr	r2, [pc, #380]	; (8005318 <HAL_GPIO_Init+0x30c>)
 800519c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a0:	6453      	str	r3, [r2, #68]	; 0x44
 80051a2:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_GPIO_Init+0x30c>)
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ae:	4a5b      	ldr	r2, [pc, #364]	; (800531c <HAL_GPIO_Init+0x310>)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	3302      	adds	r3, #2
 80051b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	220f      	movs	r2, #15
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a52      	ldr	r2, [pc, #328]	; (8005320 <HAL_GPIO_Init+0x314>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d02b      	beq.n	8005232 <HAL_GPIO_Init+0x226>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a51      	ldr	r2, [pc, #324]	; (8005324 <HAL_GPIO_Init+0x318>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d025      	beq.n	800522e <HAL_GPIO_Init+0x222>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a50      	ldr	r2, [pc, #320]	; (8005328 <HAL_GPIO_Init+0x31c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01f      	beq.n	800522a <HAL_GPIO_Init+0x21e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a4f      	ldr	r2, [pc, #316]	; (800532c <HAL_GPIO_Init+0x320>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d019      	beq.n	8005226 <HAL_GPIO_Init+0x21a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a4e      	ldr	r2, [pc, #312]	; (8005330 <HAL_GPIO_Init+0x324>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_GPIO_Init+0x216>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4d      	ldr	r2, [pc, #308]	; (8005334 <HAL_GPIO_Init+0x328>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00d      	beq.n	800521e <HAL_GPIO_Init+0x212>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a4c      	ldr	r2, [pc, #304]	; (8005338 <HAL_GPIO_Init+0x32c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <HAL_GPIO_Init+0x20e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4b      	ldr	r2, [pc, #300]	; (800533c <HAL_GPIO_Init+0x330>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d101      	bne.n	8005216 <HAL_GPIO_Init+0x20a>
 8005212:	2307      	movs	r3, #7
 8005214:	e00e      	b.n	8005234 <HAL_GPIO_Init+0x228>
 8005216:	2308      	movs	r3, #8
 8005218:	e00c      	b.n	8005234 <HAL_GPIO_Init+0x228>
 800521a:	2306      	movs	r3, #6
 800521c:	e00a      	b.n	8005234 <HAL_GPIO_Init+0x228>
 800521e:	2305      	movs	r3, #5
 8005220:	e008      	b.n	8005234 <HAL_GPIO_Init+0x228>
 8005222:	2304      	movs	r3, #4
 8005224:	e006      	b.n	8005234 <HAL_GPIO_Init+0x228>
 8005226:	2303      	movs	r3, #3
 8005228:	e004      	b.n	8005234 <HAL_GPIO_Init+0x228>
 800522a:	2302      	movs	r3, #2
 800522c:	e002      	b.n	8005234 <HAL_GPIO_Init+0x228>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_GPIO_Init+0x228>
 8005232:	2300      	movs	r3, #0
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	f002 0203 	and.w	r2, r2, #3
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	4093      	lsls	r3, r2
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005244:	4935      	ldr	r1, [pc, #212]	; (800531c <HAL_GPIO_Init+0x310>)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	3302      	adds	r3, #2
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005252:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <HAL_GPIO_Init+0x334>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005276:	4a32      	ldr	r2, [pc, #200]	; (8005340 <HAL_GPIO_Init+0x334>)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800527c:	4b30      	ldr	r3, [pc, #192]	; (8005340 <HAL_GPIO_Init+0x334>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a0:	4a27      	ldr	r2, [pc, #156]	; (8005340 <HAL_GPIO_Init+0x334>)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_GPIO_Init+0x334>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052ca:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <HAL_GPIO_Init+0x334>)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052d0:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <HAL_GPIO_Init+0x334>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052f4:	4a12      	ldr	r2, [pc, #72]	; (8005340 <HAL_GPIO_Init+0x334>)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	f67f ae90 	bls.w	8005028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3724      	adds	r7, #36	; 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40023800 	.word	0x40023800
 800531c:	40013800 	.word	0x40013800
 8005320:	40020000 	.word	0x40020000
 8005324:	40020400 	.word	0x40020400
 8005328:	40020800 	.word	0x40020800
 800532c:	40020c00 	.word	0x40020c00
 8005330:	40021000 	.word	0x40021000
 8005334:	40021400 	.word	0x40021400
 8005338:	40021800 	.word	0x40021800
 800533c:	40021c00 	.word	0x40021c00
 8005340:	40013c00 	.word	0x40013c00

08005344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
 8005360:	e001      	b.n	8005366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005384:	787b      	ldrb	r3, [r7, #1]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005390:	e003      	b.n	800539a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	041a      	lsls	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	619a      	str	r2, [r3, #24]
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e12b      	b.n	8005612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fe fb32 	bl	8003a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2224      	movs	r2, #36	; 0x24
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800540c:	f002 fa5c 	bl	80078c8 <HAL_RCC_GetPCLK1Freq>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4a81      	ldr	r2, [pc, #516]	; (800561c <HAL_I2C_Init+0x274>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d807      	bhi.n	800542c <HAL_I2C_Init+0x84>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a80      	ldr	r2, [pc, #512]	; (8005620 <HAL_I2C_Init+0x278>)
 8005420:	4293      	cmp	r3, r2
 8005422:	bf94      	ite	ls
 8005424:	2301      	movls	r3, #1
 8005426:	2300      	movhi	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e006      	b.n	800543a <HAL_I2C_Init+0x92>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a7d      	ldr	r2, [pc, #500]	; (8005624 <HAL_I2C_Init+0x27c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	bf94      	ite	ls
 8005434:	2301      	movls	r3, #1
 8005436:	2300      	movhi	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0e7      	b.n	8005612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a78      	ldr	r2, [pc, #480]	; (8005628 <HAL_I2C_Init+0x280>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a6a      	ldr	r2, [pc, #424]	; (800561c <HAL_I2C_Init+0x274>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d802      	bhi.n	800547c <HAL_I2C_Init+0xd4>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3301      	adds	r3, #1
 800547a:	e009      	b.n	8005490 <HAL_I2C_Init+0xe8>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	4a69      	ldr	r2, [pc, #420]	; (800562c <HAL_I2C_Init+0x284>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	099b      	lsrs	r3, r3, #6
 800548e:	3301      	adds	r3, #1
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	495c      	ldr	r1, [pc, #368]	; (800561c <HAL_I2C_Init+0x274>)
 80054ac:	428b      	cmp	r3, r1
 80054ae:	d819      	bhi.n	80054e4 <HAL_I2C_Init+0x13c>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1e59      	subs	r1, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054c4:	400b      	ands	r3, r1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_I2C_Init+0x138>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1e59      	subs	r1, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054d8:	3301      	adds	r3, #1
 80054da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054de:	e051      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 80054e0:	2304      	movs	r3, #4
 80054e2:	e04f      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d111      	bne.n	8005510 <HAL_I2C_Init+0x168>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1e58      	subs	r0, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	440b      	add	r3, r1
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fe:	3301      	adds	r3, #1
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e012      	b.n	8005536 <HAL_I2C_Init+0x18e>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1e58      	subs	r0, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6859      	ldr	r1, [r3, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	0099      	lsls	r1, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	fbb0 f3f3 	udiv	r3, r0, r3
 8005526:	3301      	adds	r3, #1
 8005528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Init+0x196>
 800553a:	2301      	movs	r3, #1
 800553c:	e022      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10e      	bne.n	8005564 <HAL_I2C_Init+0x1bc>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1e58      	subs	r0, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	440b      	add	r3, r1
 8005554:	fbb0 f3f3 	udiv	r3, r0, r3
 8005558:	3301      	adds	r3, #1
 800555a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005562:	e00f      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e58      	subs	r0, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	0099      	lsls	r1, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	6809      	ldr	r1, [r1, #0]
 8005588:	4313      	orrs	r3, r2
 800558a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6911      	ldr	r1, [r2, #16]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68d2      	ldr	r2, [r2, #12]
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	000186a0 	.word	0x000186a0
 8005620:	001e847f 	.word	0x001e847f
 8005624:	003d08ff 	.word	0x003d08ff
 8005628:	431bde83 	.word	0x431bde83
 800562c:	10624dd3 	.word	0x10624dd3

08005630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005650:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b10      	cmp	r3, #16
 800565e:	d003      	beq.n	8005668 <HAL_I2C_EV_IRQHandler+0x38>
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	f040 80c1 	bne.w	80057ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10d      	bne.n	800569e <HAL_I2C_EV_IRQHandler+0x6e>
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005688:	d003      	beq.n	8005692 <HAL_I2C_EV_IRQHandler+0x62>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005690:	d101      	bne.n	8005696 <HAL_I2C_EV_IRQHandler+0x66>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_I2C_EV_IRQHandler+0x68>
 8005696:	2300      	movs	r3, #0
 8005698:	2b01      	cmp	r3, #1
 800569a:	f000 8132 	beq.w	8005902 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0x92>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	0a5b      	lsrs	r3, r3, #9
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d006      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fc7b 	bl	8006fb0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fd83 	bl	80061c6 <I2C_Master_SB>
 80056c0:	e092      	b.n	80057e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	08db      	lsrs	r3, r3, #3
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	0a5b      	lsrs	r3, r3, #9
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fdf9 	bl	80062d2 <I2C_Master_ADD10>
 80056e0:	e082      	b.n	80057e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_I2C_EV_IRQHandler+0xd2>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	0a5b      	lsrs	r3, r3, #9
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fe13 	bl	8006326 <I2C_Master_ADDR>
 8005700:	e072      	b.n	80057e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d03b      	beq.n	8005786 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571c:	f000 80f3 	beq.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	09db      	lsrs	r3, r3, #7
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00f      	beq.n	800574c <HAL_I2C_EV_IRQHandler+0x11c>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	0a9b      	lsrs	r3, r3, #10
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_I2C_EV_IRQHandler+0x11c>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f9f3 	bl	8005b30 <I2C_MasterTransmit_TXE>
 800574a:	e04d      	b.n	80057e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80d6 	beq.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	0a5b      	lsrs	r3, r3, #9
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80cf 	beq.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	2b21      	cmp	r3, #33	; 0x21
 800576c:	d103      	bne.n	8005776 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa7a 	bl	8005c68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005774:	e0c7      	b.n	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	f040 80c4 	bne.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fae8 	bl	8005d54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005784:	e0bf      	b.n	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005794:	f000 80b7 	beq.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	099b      	lsrs	r3, r3, #6
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00f      	beq.n	80057c4 <HAL_I2C_EV_IRQHandler+0x194>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	0a9b      	lsrs	r3, r3, #10
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <HAL_I2C_EV_IRQHandler+0x194>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fb5d 	bl	8005e7c <I2C_MasterReceive_RXNE>
 80057c2:	e011      	b.n	80057e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 809a 	beq.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0a5b      	lsrs	r3, r3, #9
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8093 	beq.w	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fc06 	bl	8005ff2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057e6:	e08e      	b.n	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057e8:	e08d      	b.n	8005906 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e007      	b.n	800580c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d012      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x20e>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	0a5b      	lsrs	r3, r3, #9
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 ffc4 	bl	80067c4 <I2C_Slave_ADDR>
 800583c:	e066      	b.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_I2C_EV_IRQHandler+0x22e>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	0a5b      	lsrs	r3, r3, #9
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fffe 	bl	8006858 <I2C_Slave_STOPF>
 800585c:	e056      	b.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	2b21      	cmp	r3, #33	; 0x21
 8005862:	d002      	beq.n	800586a <HAL_I2C_EV_IRQHandler+0x23a>
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2b29      	cmp	r3, #41	; 0x29
 8005868:	d125      	bne.n	80058b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	09db      	lsrs	r3, r3, #7
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <HAL_I2C_EV_IRQHandler+0x266>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	0a9b      	lsrs	r3, r3, #10
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_I2C_EV_IRQHandler+0x266>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 feda 	bl	8006648 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005894:	e039      	b.n	800590a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d033      	beq.n	800590a <HAL_I2C_EV_IRQHandler+0x2da>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	0a5b      	lsrs	r3, r3, #9
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02d      	beq.n	800590a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 ff07 	bl	80066c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058b4:	e029      	b.n	800590a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	099b      	lsrs	r3, r3, #6
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	0a9b      	lsrs	r3, r3, #10
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	089b      	lsrs	r3, r3, #2
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 ff12 	bl	8006704 <I2C_SlaveReceive_RXNE>
 80058e0:	e014      	b.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	089b      	lsrs	r3, r3, #2
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	0a5b      	lsrs	r3, r3, #9
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 ff40 	bl	8006780 <I2C_SlaveReceive_BTF>
 8005900:	e004      	b.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005902:	bf00      	nop
 8005904:	e002      	b.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800590a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08a      	sub	sp, #40	; 0x28
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800592a:	2300      	movs	r3, #0
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005934:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <HAL_I2C_ER_IRQHandler+0x4e>
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800595e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	0a5b      	lsrs	r3, r3, #9
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00e      	beq.n	800598a <HAL_I2C_ER_IRQHandler+0x78>
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	f043 0302 	orr.w	r3, r3, #2
 800597e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005988:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	0a9b      	lsrs	r3, r3, #10
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d03f      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0x104>
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d039      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80059a2:	7efb      	ldrb	r3, [r7, #27]
 80059a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059bc:	7ebb      	ldrb	r3, [r7, #26]
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d112      	bne.n	80059e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10f      	bne.n	80059e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	2b21      	cmp	r3, #33	; 0x21
 80059cc:	d008      	beq.n	80059e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	2b29      	cmp	r3, #41	; 0x29
 80059d2:	d005      	beq.n	80059e0 <HAL_I2C_ER_IRQHandler+0xce>
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	2b28      	cmp	r3, #40	; 0x28
 80059d8:	d106      	bne.n	80059e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b21      	cmp	r3, #33	; 0x21
 80059de:	d103      	bne.n	80059e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 f869 	bl	8006ab8 <I2C_Slave_AF>
 80059e6:	e016      	b.n	8005a16 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	f043 0304 	orr.w	r3, r3, #4
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059fa:	7efb      	ldrb	r3, [r7, #27]
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d002      	beq.n	8005a06 <HAL_I2C_ER_IRQHandler+0xf4>
 8005a00:	7efb      	ldrb	r3, [r7, #27]
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d107      	bne.n	8005a16 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a14:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	0adb      	lsrs	r3, r3, #11
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00e      	beq.n	8005a40 <HAL_I2C_ER_IRQHandler+0x12e>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	f043 0308 	orr.w	r3, r3, #8
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a3e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 f8a0 	bl	8006b98 <I2C_ITError>
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3728      	adds	r7, #40	; 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
 8005abc:	4613      	mov	r3, r2
 8005abe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d150      	bne.n	8005bf8 <I2C_MasterTransmit_TXE+0xc8>
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b21      	cmp	r3, #33	; 0x21
 8005b5a:	d14d      	bne.n	8005bf8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d01d      	beq.n	8005b9e <I2C_MasterTransmit_TXE+0x6e>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d01a      	beq.n	8005b9e <I2C_MasterTransmit_TXE+0x6e>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b6e:	d016      	beq.n	8005b9e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b7e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2211      	movs	r2, #17
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff ff62 	bl	8005a60 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b9c:	e060      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d107      	bne.n	8005be8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ff7d 	bl	8005ae0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005be6:	e03b      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff35 	bl	8005a60 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bf6:	e033      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b21      	cmp	r3, #33	; 0x21
 8005bfc:	d005      	beq.n	8005c0a <I2C_MasterTransmit_TXE+0xda>
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d12d      	bne.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b22      	cmp	r3, #34	; 0x22
 8005c08:	d12a      	bne.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c24:	e01c      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d103      	bne.n	8005c3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f88e 	bl	8005d54 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c38:	e012      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c5e:	e7ff      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b21      	cmp	r3, #33	; 0x21
 8005c80:	d164      	bne.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d012      	beq.n	8005cb2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005cb0:	e04c      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d01d      	beq.n	8005cf4 <I2C_MasterTransmit_BTF+0x8c>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d01a      	beq.n	8005cf4 <I2C_MasterTransmit_BTF+0x8c>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cc4:	d016      	beq.n	8005cf4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cd4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2211      	movs	r2, #17
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff feb7 	bl	8005a60 <HAL_I2C_MasterTxCpltCallback>
}
 8005cf2:	e02b      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d107      	bne.n	8005d3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fed2 	bl	8005ae0 <HAL_I2C_MemTxCpltCallback>
}
 8005d3c:	e006      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe8a 	bl	8005a60 <HAL_I2C_MasterTxCpltCallback>
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10b      	bne.n	8005d8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005d8a:	e073      	b.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	121b      	asrs	r3, r3, #8
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005da6:	e065      	b.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10b      	bne.n	8005dc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005dc6:	e055      	b.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d151      	bne.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b22      	cmp	r3, #34	; 0x22
 8005dd4:	d10d      	bne.n	8005df2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005df0:	e040      	b.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b21      	cmp	r3, #33	; 0x21
 8005e00:	d112      	bne.n	8005e28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e26:	e025      	b.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d120      	bne.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b21      	cmp	r3, #33	; 0x21
 8005e36:	d11d      	bne.n	8005e74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fe36 	bl	8005ae0 <HAL_I2C_MemTxCpltCallback>
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b22      	cmp	r3, #34	; 0x22
 8005e8e:	f040 80ac 	bne.w	8005fea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d921      	bls.n	8005ee4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	f040 808c 	bne.w	8005fea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005ee2:	e082      	b.n	8005fea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d075      	beq.n	8005fd8 <I2C_MasterReceive_RXNE+0x15c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d002      	beq.n	8005ef8 <I2C_MasterReceive_RXNE+0x7c>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d16f      	bne.n	8005fd8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 f827 	bl	8006f4c <I2C_WaitOnSTOPRequestThroughIT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d142      	bne.n	8005f8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d10a      	bne.n	8005f74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fdc1 	bl	8005af4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f72:	e03a      	b.n	8005fea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2212      	movs	r2, #18
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fd76 	bl	8005a74 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f88:	e02f      	b.n	8005fea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fd99 	bl	8005b08 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fd6:	e008      	b.n	8005fea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	605a      	str	r2, [r3, #4]
}
 8005fe8:	e7ff      	b.n	8005fea <I2C_MasterReceive_RXNE+0x16e>
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b04      	cmp	r3, #4
 8006008:	d11b      	bne.n	8006042 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006018:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006040:	e0bd      	b.n	80061be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b03      	cmp	r3, #3
 800604a:	d129      	bne.n	80060a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d00a      	beq.n	8006078 <I2C_MasterReceive_BTF+0x86>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d007      	beq.n	8006078 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006076:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800609e:	e08e      	b.n	80061be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d176      	bne.n	8006198 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <I2C_MasterReceive_BTF+0xc4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d108      	bne.n	80060c8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e019      	b.n	80060fc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d002      	beq.n	80060d4 <I2C_MasterReceive_BTF+0xe2>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d108      	bne.n	80060e6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e00a      	b.n	80060fc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d007      	beq.n	80060fc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006156:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d10a      	bne.n	8006182 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fcba 	bl	8005af4 <HAL_I2C_MemRxCpltCallback>
}
 8006180:	e01d      	b.n	80061be <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2212      	movs	r2, #18
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff fc6f 	bl	8005a74 <HAL_I2C_MasterRxCpltCallback>
}
 8006196:	e012      	b.n	80061be <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d117      	bne.n	800620a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80061f4:	e067      	b.n	80062c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	b2da      	uxtb	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	611a      	str	r2, [r3, #16]
}
 8006208:	e05d      	b.n	80062c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006212:	d133      	bne.n	800627c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b21      	cmp	r3, #33	; 0x21
 800621e:	d109      	bne.n	8006234 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006230:	611a      	str	r2, [r3, #16]
 8006232:	e008      	b.n	8006246 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	b2da      	uxtb	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <I2C_Master_SB+0x92>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d108      	bne.n	800626a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d032      	beq.n	80062c6 <I2C_Master_SB+0x100>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02d      	beq.n	80062c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006278:	605a      	str	r2, [r3, #4]
}
 800627a:	e024      	b.n	80062c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10e      	bne.n	80062a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006288:	b29b      	uxth	r3, r3
 800628a:	11db      	asrs	r3, r3, #7
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 0306 	and.w	r3, r3, #6
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f063 030f 	orn	r3, r3, #15
 8006298:	b2da      	uxtb	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	611a      	str	r2, [r3, #16]
}
 80062a0:	e011      	b.n	80062c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10d      	bne.n	80062c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	11db      	asrs	r3, r3, #7
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 0306 	and.w	r3, r3, #6
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f063 030e 	orn	r3, r3, #14
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <I2C_Master_ADD10+0x26>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d108      	bne.n	800630a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <I2C_Master_ADD10+0x48>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006318:	605a      	str	r2, [r3, #4]
  }
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006326:	b480      	push	{r7}
 8006328:	b091      	sub	sp, #68	; 0x44
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b22      	cmp	r3, #34	; 0x22
 800634e:	f040 8169 	bne.w	8006624 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <I2C_Master_ADDR+0x54>
 800635a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d10b      	bne.n	800637a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006362:	2300      	movs	r3, #0
 8006364:	633b      	str	r3, [r7, #48]	; 0x30
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	e160      	b.n	800663c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11d      	bne.n	80063be <I2C_Master_ADDR+0x98>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800638a:	d118      	bne.n	80063be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638c:	2300      	movs	r3, #0
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	651a      	str	r2, [r3, #80]	; 0x50
 80063bc:	e13e      	b.n	800663c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d113      	bne.n	80063f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c8:	2300      	movs	r3, #0
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e115      	b.n	800661c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	f040 808a 	bne.w	8006510 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006402:	d137      	bne.n	8006474 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006422:	d113      	bne.n	800644c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006432:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006434:	2300      	movs	r3, #0
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	e0e7      	b.n	800661c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800644c:	2300      	movs	r3, #0
 800644e:	623b      	str	r3, [r7, #32]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e0d3      	b.n	800661c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	2b08      	cmp	r3, #8
 8006478:	d02e      	beq.n	80064d8 <I2C_Master_ADDR+0x1b2>
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	2b20      	cmp	r3, #32
 800647e:	d02b      	beq.n	80064d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	2b12      	cmp	r3, #18
 8006484:	d102      	bne.n	800648c <I2C_Master_ADDR+0x166>
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	2b01      	cmp	r3, #1
 800648a:	d125      	bne.n	80064d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	2b04      	cmp	r3, #4
 8006490:	d00e      	beq.n	80064b0 <I2C_Master_ADDR+0x18a>
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	2b02      	cmp	r3, #2
 8006496:	d00b      	beq.n	80064b0 <I2C_Master_ADDR+0x18a>
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b10      	cmp	r3, #16
 800649c:	d008      	beq.n	80064b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e007      	b.n	80064c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	e0a1      	b.n	800661c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e085      	b.n	800661c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d14d      	bne.n	80065b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	2b04      	cmp	r3, #4
 800651e:	d016      	beq.n	800654e <I2C_Master_ADDR+0x228>
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	2b02      	cmp	r3, #2
 8006524:	d013      	beq.n	800654e <I2C_Master_ADDR+0x228>
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	2b10      	cmp	r3, #16
 800652a:	d010      	beq.n	800654e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e007      	b.n	800655e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800655c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656c:	d117      	bne.n	800659e <I2C_Master_ADDR+0x278>
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006574:	d00b      	beq.n	800658e <I2C_Master_ADDR+0x268>
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	2b01      	cmp	r3, #1
 800657a:	d008      	beq.n	800658e <I2C_Master_ADDR+0x268>
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	2b08      	cmp	r3, #8
 8006580:	d005      	beq.n	800658e <I2C_Master_ADDR+0x268>
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	2b10      	cmp	r3, #16
 8006586:	d002      	beq.n	800658e <I2C_Master_ADDR+0x268>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	2b20      	cmp	r3, #32
 800658c:	d107      	bne.n	800659e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800659c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	e032      	b.n	800661c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d4:	d117      	bne.n	8006606 <I2C_Master_ADDR+0x2e0>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065dc:	d00b      	beq.n	80065f6 <I2C_Master_ADDR+0x2d0>
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d008      	beq.n	80065f6 <I2C_Master_ADDR+0x2d0>
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d005      	beq.n	80065f6 <I2C_Master_ADDR+0x2d0>
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d002      	beq.n	80065f6 <I2C_Master_ADDR+0x2d0>
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d107      	bne.n	8006606 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006604:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006606:	2300      	movs	r3, #0
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006622:	e00b      	b.n	800663c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	e7ff      	b.n	800663c <I2C_Master_ADDR+0x316>
 800663c:	bf00      	nop
 800663e:	3744      	adds	r7, #68	; 0x44
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006656:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d02b      	beq.n	80066ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d114      	bne.n	80066ba <I2C_SlaveTransmit_TXE+0x72>
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b29      	cmp	r3, #41	; 0x29
 8006694:	d111      	bne.n	80066ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2221      	movs	r2, #33	; 0x21
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2228      	movs	r2, #40	; 0x28
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff f9e7 	bl	8005a88 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d011      	beq.n	80066f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006712:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d02c      	beq.n	8006778 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d114      	bne.n	8006778 <I2C_SlaveReceive_RXNE+0x74>
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b2a      	cmp	r3, #42	; 0x2a
 8006752:	d111      	bne.n	8006778 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006762:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2222      	movs	r2, #34	; 0x22
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2228      	movs	r2, #40	; 0x28
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff f992 	bl	8005a9c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d012      	beq.n	80067b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067de:	2b28      	cmp	r3, #40	; 0x28
 80067e0:	d127      	bne.n	8006832 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	089b      	lsrs	r3, r3, #2
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80067fe:	2301      	movs	r3, #1
 8006800:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	09db      	lsrs	r3, r3, #7
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	81bb      	strh	r3, [r7, #12]
 8006814:	e002      	b.n	800681c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006824:	89ba      	ldrh	r2, [r7, #12]
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff f940 	bl	8005ab0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006830:	e00e      	b.n	8006850 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006876:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006878:	2300      	movs	r3, #0
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b4:	d172      	bne.n	800699c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b22      	cmp	r3, #34	; 0x22
 80068ba:	d002      	beq.n	80068c2 <I2C_Slave_STOPF+0x6a>
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b2a      	cmp	r3, #42	; 0x2a
 80068c0:	d135      	bne.n	800692e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f043 0204 	orr.w	r2, r3, #4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fac6 	bl	8004e8c <HAL_DMA_GetState>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d049      	beq.n	800699a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	4a69      	ldr	r2, [pc, #420]	; (8006ab0 <I2C_Slave_STOPF+0x258>)
 800690c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe f90e 	bl	8004b34 <HAL_DMA_Abort_IT>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d03d      	beq.n	800699a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006928:	4610      	mov	r0, r2
 800692a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800692c:	e035      	b.n	800699a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006960:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fa90 	bl	8004e8c <HAL_DMA_GetState>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d014      	beq.n	800699c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006976:	4a4e      	ldr	r2, [pc, #312]	; (8006ab0 <I2C_Slave_STOPF+0x258>)
 8006978:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe f8d8 	bl	8004b34 <HAL_DMA_Abort_IT>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	e000      	b.n	800699c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800699a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03e      	beq.n	8006a24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d112      	bne.n	80069da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691a      	ldr	r2, [r3, #16]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d112      	bne.n	8006a0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	f043 0204 	orr.w	r2, r3, #4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8b3 	bl	8006b98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a32:	e039      	b.n	8006aa8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	2b2a      	cmp	r3, #42	; 0x2a
 8006a38:	d109      	bne.n	8006a4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2228      	movs	r2, #40	; 0x28
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff f827 	bl	8005a9c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b28      	cmp	r3, #40	; 0x28
 8006a58:	d111      	bne.n	8006a7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <I2C_Slave_STOPF+0x25c>)
 8006a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f828 	bl	8005acc <HAL_I2C_ListenCpltCallback>
}
 8006a7c:	e014      	b.n	8006aa8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	2b22      	cmp	r3, #34	; 0x22
 8006a84:	d002      	beq.n	8006a8c <I2C_Slave_STOPF+0x234>
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b22      	cmp	r3, #34	; 0x22
 8006a8a:	d10d      	bne.n	8006aa8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fe fffa 	bl	8005a9c <HAL_I2C_SlaveRxCpltCallback>
}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	08006dfd 	.word	0x08006dfd
 8006ab4:	ffff0000 	.word	0xffff0000

08006ab8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d002      	beq.n	8006ada <I2C_Slave_AF+0x22>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d129      	bne.n	8006b2e <I2C_Slave_AF+0x76>
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b28      	cmp	r3, #40	; 0x28
 8006ade:	d126      	bne.n	8006b2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <I2C_Slave_AF+0xdc>)
 8006ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006af4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006afe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fe ffd0 	bl	8005acc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b2c:	e02e      	b.n	8006b8c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2b21      	cmp	r3, #33	; 0x21
 8006b32:	d126      	bne.n	8006b82 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <I2C_Slave_AF+0xdc>)
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2221      	movs	r2, #33	; 0x21
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b78:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fe ff84 	bl	8005a88 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b80:	e004      	b.n	8006b8c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b8a:	615a      	str	r2, [r3, #20]
}
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	ffff0000 	.word	0xffff0000

08006b98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d002      	beq.n	8006bbc <I2C_ITError+0x24>
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	2b40      	cmp	r3, #64	; 0x40
 8006bba:	d10a      	bne.n	8006bd2 <I2C_ITError+0x3a>
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b22      	cmp	r3, #34	; 0x22
 8006bc0:	d107      	bne.n	8006bd2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bd8:	2b28      	cmp	r3, #40	; 0x28
 8006bda:	d107      	bne.n	8006bec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2228      	movs	r2, #40	; 0x28
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bea:	e015      	b.n	8006c18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfa:	d00a      	beq.n	8006c12 <I2C_ITError+0x7a>
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b60      	cmp	r3, #96	; 0x60
 8006c00:	d007      	beq.n	8006c12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c26:	d162      	bne.n	8006cee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d020      	beq.n	8006c88 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4a:	4a6a      	ldr	r2, [pc, #424]	; (8006df4 <I2C_ITError+0x25c>)
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd ff6e 	bl	8004b34 <HAL_DMA_Abort_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 8089 	beq.w	8006d72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0201 	bic.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c82:	4610      	mov	r0, r2
 8006c84:	4798      	blx	r3
 8006c86:	e074      	b.n	8006d72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	4a59      	ldr	r2, [pc, #356]	; (8006df4 <I2C_ITError+0x25c>)
 8006c8e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fd ff4d 	bl	8004b34 <HAL_DMA_Abort_IT>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d068      	beq.n	8006d72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d10b      	bne.n	8006cc6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	e041      	b.n	8006d72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b60      	cmp	r3, #96	; 0x60
 8006cf8:	d125      	bne.n	8006d46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d10b      	bne.n	8006d2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fe feec 	bl	8005b1c <HAL_I2C_AbortCpltCallback>
 8006d44:	e015      	b.n	8006d72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d10b      	bne.n	8006d6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fe fecb 	bl	8005b08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10e      	bne.n	8006da0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d113      	bne.n	8006dec <I2C_ITError+0x254>
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b28      	cmp	r3, #40	; 0x28
 8006dc8:	d110      	bne.n	8006dec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <I2C_ITError+0x260>)
 8006dce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fe fe70 	bl	8005acc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	08006dfd 	.word	0x08006dfd
 8006df8:	ffff0000 	.word	0xffff0000

08006dfc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e16:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <I2C_DMAAbort+0x148>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	4a4a      	ldr	r2, [pc, #296]	; (8006f48 <I2C_DMAAbort+0x14c>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	0a1a      	lsrs	r2, r3, #8
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	00da      	lsls	r2, r3, #3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f043 0220 	orr.w	r2, r3, #32
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e42:	e00a      	b.n	8006e5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e58:	d0ea      	beq.n	8006e30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	2200      	movs	r2, #0
 8006e68:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	2200      	movs	r2, #0
 8006e78:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	2200      	movs	r2, #0
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d10e      	bne.n	8006eea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ee2:	6978      	ldr	r0, [r7, #20]
 8006ee4:	f7fe fe1a 	bl	8005b1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ee8:	e027      	b.n	8006f3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eea:	7cfb      	ldrb	r3, [r7, #19]
 8006eec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ef0:	2b28      	cmp	r3, #40	; 0x28
 8006ef2:	d117      	bne.n	8006f24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2228      	movs	r2, #40	; 0x28
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f22:	e007      	b.n	8006f34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f34:	6978      	ldr	r0, [r7, #20]
 8006f36:	f7fe fde7 	bl	8005b08 <HAL_I2C_ErrorCallback>
}
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	200000b0 	.word	0x200000b0
 8006f48:	14f8b589 	.word	0x14f8b589

08006f4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	0a1a      	lsrs	r2, r3, #8
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d107      	bne.n	8006f8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e008      	b.n	8006f9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d0e9      	beq.n	8006f6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	200000b0 	.word	0x200000b0
 8006fac:	14f8b589 	.word	0x14f8b589

08006fb0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fc0:	d103      	bne.n	8006fca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fc8:	e007      	b.n	8006fda <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fd2:	d102      	bne.n	8006fda <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2208      	movs	r2, #8
 8006fd8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e267      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d075      	beq.n	80070f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007006:	4b88      	ldr	r3, [pc, #544]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	2b04      	cmp	r3, #4
 8007010:	d00c      	beq.n	800702c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007012:	4b85      	ldr	r3, [pc, #532]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800701a:	2b08      	cmp	r3, #8
 800701c:	d112      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800701e:	4b82      	ldr	r3, [pc, #520]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702a:	d10b      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	4b7e      	ldr	r3, [pc, #504]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05b      	beq.n	80070f0 <HAL_RCC_OscConfig+0x108>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d157      	bne.n	80070f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e242      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d106      	bne.n	800705c <HAL_RCC_OscConfig+0x74>
 800704e:	4b76      	ldr	r3, [pc, #472]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a75      	ldr	r2, [pc, #468]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e01d      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x98>
 8007066:	4b70      	ldr	r3, [pc, #448]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a6f      	ldr	r2, [pc, #444]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800706c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b6d      	ldr	r3, [pc, #436]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6c      	ldr	r2, [pc, #432]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e00b      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 8007080:	4b69      	ldr	r3, [pc, #420]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a68      	ldr	r2, [pc, #416]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b66      	ldr	r3, [pc, #408]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a65      	ldr	r2, [pc, #404]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fd fb58 	bl	8004754 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fd fb54 	bl	8004754 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e207      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ba:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0xc0>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7fd fb44 	bl	8004754 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fd fb40 	bl	8004754 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e1f3      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070e2:	4b51      	ldr	r3, [pc, #324]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0xe8>
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d063      	beq.n	80071c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070fe:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007112:	2b08      	cmp	r3, #8
 8007114:	d11c      	bne.n	8007150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007116:	4b44      	ldr	r3, [pc, #272]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d116      	bne.n	8007150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007122:	4b41      	ldr	r3, [pc, #260]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_RCC_OscConfig+0x152>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e1c7      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713a:	4b3b      	ldr	r3, [pc, #236]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4937      	ldr	r1, [pc, #220]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800714a:	4313      	orrs	r3, r2
 800714c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714e:	e03a      	b.n	80071c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d020      	beq.n	800719a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007158:	4b34      	ldr	r3, [pc, #208]	; (800722c <HAL_RCC_OscConfig+0x244>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715e:	f7fd faf9 	bl	8004754 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007166:	f7fd faf5 	bl	8004754 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e1a8      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007178:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f0      	beq.n	8007166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007184:	4b28      	ldr	r3, [pc, #160]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4925      	ldr	r1, [pc, #148]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]
 8007198:	e015      	b.n	80071c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <HAL_RCC_OscConfig+0x244>)
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fd fad8 	bl	8004754 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071a8:	f7fd fad4 	bl	8004754 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e187      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ba:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d036      	beq.n	8007240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071da:	4b15      	ldr	r3, [pc, #84]	; (8007230 <HAL_RCC_OscConfig+0x248>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fd fab8 	bl	8004754 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071e8:	f7fd fab4 	bl	8004754 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e167      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80071fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x200>
 8007206:	e01b      	b.n	8007240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_RCC_OscConfig+0x248>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800720e:	f7fd faa1 	bl	8004754 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	e00e      	b.n	8007234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007216:	f7fd fa9d 	bl	8004754 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d907      	bls.n	8007234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e150      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
 8007228:	40023800 	.word	0x40023800
 800722c:	42470000 	.word	0x42470000
 8007230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007234:	4b88      	ldr	r3, [pc, #544]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ea      	bne.n	8007216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8097 	beq.w	800737c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800724e:	2300      	movs	r3, #0
 8007250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007252:	4b81      	ldr	r3, [pc, #516]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10f      	bne.n	800727e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	4b7d      	ldr	r3, [pc, #500]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	4a7c      	ldr	r2, [pc, #496]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800726c:	6413      	str	r3, [r2, #64]	; 0x40
 800726e:	4b7a      	ldr	r3, [pc, #488]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727e:	4b77      	ldr	r3, [pc, #476]	; (800745c <HAL_RCC_OscConfig+0x474>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007286:	2b00      	cmp	r3, #0
 8007288:	d118      	bne.n	80072bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800728a:	4b74      	ldr	r3, [pc, #464]	; (800745c <HAL_RCC_OscConfig+0x474>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a73      	ldr	r2, [pc, #460]	; (800745c <HAL_RCC_OscConfig+0x474>)
 8007290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007296:	f7fd fa5d 	bl	8004754 <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800729e:	f7fd fa59 	bl	8004754 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e10c      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b0:	4b6a      	ldr	r3, [pc, #424]	; (800745c <HAL_RCC_OscConfig+0x474>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f0      	beq.n	800729e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d106      	bne.n	80072d2 <HAL_RCC_OscConfig+0x2ea>
 80072c4:	4b64      	ldr	r3, [pc, #400]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	4a63      	ldr	r2, [pc, #396]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6713      	str	r3, [r2, #112]	; 0x70
 80072d0:	e01c      	b.n	800730c <HAL_RCC_OscConfig+0x324>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d10c      	bne.n	80072f4 <HAL_RCC_OscConfig+0x30c>
 80072da:	4b5f      	ldr	r3, [pc, #380]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a5e      	ldr	r2, [pc, #376]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072e0:	f043 0304 	orr.w	r3, r3, #4
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
 80072e6:	4b5c      	ldr	r3, [pc, #368]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a5b      	ldr	r2, [pc, #364]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
 80072f2:	e00b      	b.n	800730c <HAL_RCC_OscConfig+0x324>
 80072f4:	4b58      	ldr	r3, [pc, #352]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f8:	4a57      	ldr	r2, [pc, #348]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072fa:	f023 0301 	bic.w	r3, r3, #1
 80072fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007300:	4b55      	ldr	r3, [pc, #340]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	4a54      	ldr	r2, [pc, #336]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007306:	f023 0304 	bic.w	r3, r3, #4
 800730a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d015      	beq.n	8007340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007314:	f7fd fa1e 	bl	8004754 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731a:	e00a      	b.n	8007332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800731c:	f7fd fa1a 	bl	8004754 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f241 3288 	movw	r2, #5000	; 0x1388
 800732a:	4293      	cmp	r3, r2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e0cb      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007332:	4b49      	ldr	r3, [pc, #292]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0ee      	beq.n	800731c <HAL_RCC_OscConfig+0x334>
 800733e:	e014      	b.n	800736a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007340:	f7fd fa08 	bl	8004754 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007346:	e00a      	b.n	800735e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f7fd fa04 	bl	8004754 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e0b5      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800735e:	4b3e      	ldr	r3, [pc, #248]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1ee      	bne.n	8007348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007370:	4b39      	ldr	r3, [pc, #228]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	4a38      	ldr	r2, [pc, #224]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80a1 	beq.w	80074c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007386:	4b34      	ldr	r3, [pc, #208]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
 800738e:	2b08      	cmp	r3, #8
 8007390:	d05c      	beq.n	800744c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d141      	bne.n	800741e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739a:	4b31      	ldr	r3, [pc, #196]	; (8007460 <HAL_RCC_OscConfig+0x478>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a0:	f7fd f9d8 	bl	8004754 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a8:	f7fd f9d4 	bl	8004754 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e087      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ba:	4b27      	ldr	r3, [pc, #156]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	019b      	lsls	r3, r3, #6
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	3b01      	subs	r3, #1
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	491b      	ldr	r1, [pc, #108]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f0:	4b1b      	ldr	r3, [pc, #108]	; (8007460 <HAL_RCC_OscConfig+0x478>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f6:	f7fd f9ad 	bl	8004754 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073fe:	f7fd f9a9 	bl	8004754 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e05c      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0f0      	beq.n	80073fe <HAL_RCC_OscConfig+0x416>
 800741c:	e054      	b.n	80074c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800741e:	4b10      	ldr	r3, [pc, #64]	; (8007460 <HAL_RCC_OscConfig+0x478>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007424:	f7fd f996 	bl	8004754 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800742c:	f7fd f992 	bl	8004754 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e045      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743e:	4b06      	ldr	r3, [pc, #24]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x444>
 800744a:	e03d      	b.n	80074c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d107      	bne.n	8007464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e038      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
 8007458:	40023800 	.word	0x40023800
 800745c:	40007000 	.word	0x40007000
 8007460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007464:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <HAL_RCC_OscConfig+0x4ec>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d028      	beq.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800747c:	429a      	cmp	r2, r3
 800747e:	d121      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d11a      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800749a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800749c:	4293      	cmp	r3, r2
 800749e:	d111      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	3b01      	subs	r3, #1
 80074ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d107      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d001      	beq.n	80074c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800

080074d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0cc      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074ec:	4b68      	ldr	r3, [pc, #416]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d90c      	bls.n	8007514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b65      	ldr	r3, [pc, #404]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b63      	ldr	r3, [pc, #396]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0b8      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800752c:	4b59      	ldr	r3, [pc, #356]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4a58      	ldr	r2, [pc, #352]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007544:	4b53      	ldr	r3, [pc, #332]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a52      	ldr	r2, [pc, #328]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800754e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007550:	4b50      	ldr	r3, [pc, #320]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	494d      	ldr	r1, [pc, #308]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d044      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d107      	bne.n	8007586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007576:	4b47      	ldr	r3, [pc, #284]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d119      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e07f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d003      	beq.n	8007596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007592:	2b03      	cmp	r3, #3
 8007594:	d107      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007596:	4b3f      	ldr	r3, [pc, #252]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e06f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a6:	4b3b      	ldr	r3, [pc, #236]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e067      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b6:	4b37      	ldr	r3, [pc, #220]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f023 0203 	bic.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	4934      	ldr	r1, [pc, #208]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c8:	f7fd f8c4 	bl	8004754 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075d0:	f7fd f8c0 	bl	8004754 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	; 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e04f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e6:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 020c 	and.w	r2, r3, #12
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d1eb      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f8:	4b25      	ldr	r3, [pc, #148]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d20c      	bcs.n	8007620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007606:	4b22      	ldr	r3, [pc, #136]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b20      	ldr	r3, [pc, #128]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e032      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d008      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800762c:	4b19      	ldr	r3, [pc, #100]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4916      	ldr	r1, [pc, #88]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800764a:	4b12      	ldr	r3, [pc, #72]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	490e      	ldr	r1, [pc, #56]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	4313      	orrs	r3, r2
 800765c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800765e:	f000 f821 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 8007662:	4602      	mov	r2, r0
 8007664:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	490a      	ldr	r1, [pc, #40]	; (8007698 <HAL_RCC_ClockConfig+0x1c0>)
 8007670:	5ccb      	ldrb	r3, [r1, r3]
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <HAL_RCC_ClockConfig+0x1c8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fd f824 	bl	80046cc <HAL_InitTick>

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40023c00 	.word	0x40023c00
 8007694:	40023800 	.word	0x40023800
 8007698:	0800c8d8 	.word	0x0800c8d8
 800769c:	200000b0 	.word	0x200000b0
 80076a0:	200000b4 	.word	0x200000b4

080076a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a8:	b094      	sub	sp, #80	; 0x50
 80076aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	647b      	str	r3, [r7, #68]	; 0x44
 80076b0:	2300      	movs	r3, #0
 80076b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b4:	2300      	movs	r3, #0
 80076b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076bc:	4b79      	ldr	r3, [pc, #484]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 030c 	and.w	r3, r3, #12
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d00d      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x40>
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	f200 80e1 	bhi.w	8007890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x34>
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d003      	beq.n	80076de <HAL_RCC_GetSysClockFreq+0x3a>
 80076d6:	e0db      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076d8:	4b73      	ldr	r3, [pc, #460]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80076da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80076dc:	e0db      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076de:	4b73      	ldr	r3, [pc, #460]	; (80078ac <HAL_RCC_GetSysClockFreq+0x208>)
 80076e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076e2:	e0d8      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076e4:	4b6f      	ldr	r3, [pc, #444]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076ee:	4b6d      	ldr	r3, [pc, #436]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d063      	beq.n	80077c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076fa:	4b6a      	ldr	r3, [pc, #424]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	099b      	lsrs	r3, r3, #6
 8007700:	2200      	movs	r2, #0
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
 8007704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
 800770e:	2300      	movs	r3, #0
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
 8007712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007716:	4622      	mov	r2, r4
 8007718:	462b      	mov	r3, r5
 800771a:	f04f 0000 	mov.w	r0, #0
 800771e:	f04f 0100 	mov.w	r1, #0
 8007722:	0159      	lsls	r1, r3, #5
 8007724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007728:	0150      	lsls	r0, r2, #5
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4621      	mov	r1, r4
 8007730:	1a51      	subs	r1, r2, r1
 8007732:	6139      	str	r1, [r7, #16]
 8007734:	4629      	mov	r1, r5
 8007736:	eb63 0301 	sbc.w	r3, r3, r1
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007748:	4659      	mov	r1, fp
 800774a:	018b      	lsls	r3, r1, #6
 800774c:	4651      	mov	r1, sl
 800774e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007752:	4651      	mov	r1, sl
 8007754:	018a      	lsls	r2, r1, #6
 8007756:	4651      	mov	r1, sl
 8007758:	ebb2 0801 	subs.w	r8, r2, r1
 800775c:	4659      	mov	r1, fp
 800775e:	eb63 0901 	sbc.w	r9, r3, r1
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800776e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007776:	4690      	mov	r8, r2
 8007778:	4699      	mov	r9, r3
 800777a:	4623      	mov	r3, r4
 800777c:	eb18 0303 	adds.w	r3, r8, r3
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	462b      	mov	r3, r5
 8007784:	eb49 0303 	adc.w	r3, r9, r3
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	f04f 0300 	mov.w	r3, #0
 8007792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007796:	4629      	mov	r1, r5
 8007798:	024b      	lsls	r3, r1, #9
 800779a:	4621      	mov	r1, r4
 800779c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077a0:	4621      	mov	r1, r4
 80077a2:	024a      	lsls	r2, r1, #9
 80077a4:	4610      	mov	r0, r2
 80077a6:	4619      	mov	r1, r3
 80077a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077aa:	2200      	movs	r2, #0
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077b4:	f7f8 fd10 	bl	80001d8 <__aeabi_uldivmod>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4613      	mov	r3, r2
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c0:	e058      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077c2:	4b38      	ldr	r3, [pc, #224]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	2200      	movs	r2, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	4611      	mov	r1, r2
 80077ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077d2:	623b      	str	r3, [r7, #32]
 80077d4:	2300      	movs	r3, #0
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
 80077d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	f04f 0000 	mov.w	r0, #0
 80077e4:	f04f 0100 	mov.w	r1, #0
 80077e8:	0159      	lsls	r1, r3, #5
 80077ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077ee:	0150      	lsls	r0, r2, #5
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4641      	mov	r1, r8
 80077f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80077fa:	4649      	mov	r1, r9
 80077fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800780c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007814:	ebb2 040a 	subs.w	r4, r2, sl
 8007818:	eb63 050b 	sbc.w	r5, r3, fp
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	00eb      	lsls	r3, r5, #3
 8007826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800782a:	00e2      	lsls	r2, r4, #3
 800782c:	4614      	mov	r4, r2
 800782e:	461d      	mov	r5, r3
 8007830:	4643      	mov	r3, r8
 8007832:	18e3      	adds	r3, r4, r3
 8007834:	603b      	str	r3, [r7, #0]
 8007836:	464b      	mov	r3, r9
 8007838:	eb45 0303 	adc.w	r3, r5, r3
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800784a:	4629      	mov	r1, r5
 800784c:	028b      	lsls	r3, r1, #10
 800784e:	4621      	mov	r1, r4
 8007850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007854:	4621      	mov	r1, r4
 8007856:	028a      	lsls	r2, r1, #10
 8007858:	4610      	mov	r0, r2
 800785a:	4619      	mov	r1, r3
 800785c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785e:	2200      	movs	r2, #0
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	61fa      	str	r2, [r7, #28]
 8007864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007868:	f7f8 fcb6 	bl	80001d8 <__aeabi_uldivmod>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4613      	mov	r3, r2
 8007872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007874:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	0c1b      	lsrs	r3, r3, #16
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	3301      	adds	r3, #1
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007888:	fbb2 f3f3 	udiv	r3, r2, r3
 800788c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800788e:	e002      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007898:	4618      	mov	r0, r3
 800789a:	3750      	adds	r7, #80	; 0x50
 800789c:	46bd      	mov	sp, r7
 800789e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a2:	bf00      	nop
 80078a4:	40023800 	.word	0x40023800
 80078a8:	00f42400 	.word	0x00f42400
 80078ac:	007a1200 	.word	0x007a1200

080078b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078b4:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078b6:	681b      	ldr	r3, [r3, #0]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	200000b0 	.word	0x200000b0

080078c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078cc:	f7ff fff0 	bl	80078b0 <HAL_RCC_GetHCLKFreq>
 80078d0:	4602      	mov	r2, r0
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	0a9b      	lsrs	r3, r3, #10
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	4903      	ldr	r1, [pc, #12]	; (80078ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80078de:	5ccb      	ldrb	r3, [r1, r3]
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40023800 	.word	0x40023800
 80078ec:	0800c8e8 	.word	0x0800c8e8

080078f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078f4:	f7ff ffdc 	bl	80078b0 <HAL_RCC_GetHCLKFreq>
 80078f8:	4602      	mov	r2, r0
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	0b5b      	lsrs	r3, r3, #13
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	4903      	ldr	r1, [pc, #12]	; (8007914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007906:	5ccb      	ldrb	r3, [r1, r3]
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800790c:	4618      	mov	r0, r3
 800790e:	bd80      	pop	{r7, pc}
 8007910:	40023800 	.word	0x40023800
 8007914:	0800c8e8 	.word	0x0800c8e8

08007918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e07b      	b.n	8007a22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d108      	bne.n	8007944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800793a:	d009      	beq.n	8007950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	61da      	str	r2, [r3, #28]
 8007942:	e005      	b.n	8007950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fc fac0 	bl	8003ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d4:	ea42 0103 	orr.w	r1, r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	0c1b      	lsrs	r3, r3, #16
 80079ee:	f003 0104 	and.w	r1, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f003 0210 	and.w	r2, r3, #16
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b088      	sub	sp, #32
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_SPI_Transmit+0x22>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e126      	b.n	8007c9a <HAL_SPI_Transmit+0x270>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a54:	f7fc fe7e 	bl	8004754 <HAL_GetTick>
 8007a58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d002      	beq.n	8007a70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a6e:	e10b      	b.n	8007c88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <HAL_SPI_Transmit+0x52>
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a80:	e102      	b.n	8007c88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2203      	movs	r2, #3
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	88fa      	ldrh	r2, [r7, #6]
 8007aa0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac8:	d10f      	bne.n	8007aea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d007      	beq.n	8007b08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b10:	d14b      	bne.n	8007baa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <HAL_SPI_Transmit+0xf6>
 8007b1a:	8afb      	ldrh	r3, [r7, #22]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d13e      	bne.n	8007b9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	1c9a      	adds	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b44:	e02b      	b.n	8007b9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d112      	bne.n	8007b7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b78:	e011      	b.n	8007b9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b7a:	f7fc fdeb 	bl	8004754 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d803      	bhi.n	8007b92 <HAL_SPI_Transmit+0x168>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b90:	d102      	bne.n	8007b98 <HAL_SPI_Transmit+0x16e>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b9c:	e074      	b.n	8007c88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1ce      	bne.n	8007b46 <HAL_SPI_Transmit+0x11c>
 8007ba8:	e04c      	b.n	8007c44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_SPI_Transmit+0x18e>
 8007bb2:	8afb      	ldrh	r3, [r7, #22]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d140      	bne.n	8007c3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007bde:	e02c      	b.n	8007c3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d113      	bne.n	8007c16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c14:	e011      	b.n	8007c3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c16:	f7fc fd9d 	bl	8004754 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d803      	bhi.n	8007c2e <HAL_SPI_Transmit+0x204>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d102      	bne.n	8007c34 <HAL_SPI_Transmit+0x20a>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c38:	e026      	b.n	8007c88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1cd      	bne.n	8007be0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fce9 	bl	8008620 <SPI_EndRxTxTransaction>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2220      	movs	r2, #32
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c62:	2300      	movs	r3, #0
 8007c64:	613b      	str	r3, [r7, #16]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e000      	b.n	8007c88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b088      	sub	sp, #32
 8007ca6:	af02      	add	r7, sp, #8
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cbe:	d112      	bne.n	8007ce6 <HAL_SPI_Receive+0x44>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10e      	bne.n	8007ce6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007cd0:	88fa      	ldrh	r2, [r7, #6]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f8f1 	bl	8007ec4 <HAL_SPI_TransmitReceive>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	e0ea      	b.n	8007ebc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_SPI_Receive+0x52>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e0e3      	b.n	8007ebc <HAL_SPI_Receive+0x21a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cfc:	f7fc fd2a 	bl	8004754 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d002      	beq.n	8007d14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d12:	e0ca      	b.n	8007eaa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_SPI_Receive+0x7e>
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d24:	e0c1      	b.n	8007eaa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6c:	d10f      	bne.n	8007d8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d98:	2b40      	cmp	r3, #64	; 0x40
 8007d9a:	d007      	beq.n	8007dac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007daa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d162      	bne.n	8007e7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007db4:	e02e      	b.n	8007e14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d115      	bne.n	8007df0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f103 020c 	add.w	r2, r3, #12
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dee:	e011      	b.n	8007e14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df0:	f7fc fcb0 	bl	8004754 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d803      	bhi.n	8007e08 <HAL_SPI_Receive+0x166>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e06:	d102      	bne.n	8007e0e <HAL_SPI_Receive+0x16c>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e12:	e04a      	b.n	8007eaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1cb      	bne.n	8007db6 <HAL_SPI_Receive+0x114>
 8007e1e:	e031      	b.n	8007e84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d113      	bne.n	8007e56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	1c9a      	adds	r2, r3, #2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e54:	e011      	b.n	8007e7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e56:	f7fc fc7d 	bl	8004754 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d803      	bhi.n	8007e6e <HAL_SPI_Receive+0x1cc>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d102      	bne.n	8007e74 <HAL_SPI_Receive+0x1d2>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e78:	e017      	b.n	8007eaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1cd      	bne.n	8007e20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fb63 	bl	8008554 <SPI_EndRxTransaction>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]
 8007ea6:	e000      	b.n	8007eaa <HAL_SPI_Receive+0x208>
  }

error :
 8007ea8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	; 0x30
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_SPI_TransmitReceive+0x26>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e18a      	b.n	8008200 <HAL_SPI_TransmitReceive+0x33c>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ef2:	f7fc fc2f 	bl	8004754 <HAL_GetTick>
 8007ef6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007f08:	887b      	ldrh	r3, [r7, #2]
 8007f0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d00f      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x70>
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f1a:	d107      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d103      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x68>
 8007f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d003      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f32:	e15b      	b.n	80081ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_SPI_TransmitReceive+0x82>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_TransmitReceive+0x82>
 8007f40:	887b      	ldrh	r3, [r7, #2]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f4c:	e14e      	b.n	80081ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d003      	beq.n	8007f62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2205      	movs	r2, #5
 8007f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	887a      	ldrh	r2, [r7, #2]
 8007f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	887a      	ldrh	r2, [r7, #2]
 8007f84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	887a      	ldrh	r2, [r7, #2]
 8007f8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	d007      	beq.n	8007fb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbe:	d178      	bne.n	80080b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x10a>
 8007fc8:	8b7b      	ldrh	r3, [r7, #26]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d166      	bne.n	800809c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd2:	881a      	ldrh	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	1c9a      	adds	r2, r3, #2
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ff2:	e053      	b.n	800809c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d11b      	bne.n	800803a <HAL_SPI_TransmitReceive+0x176>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d016      	beq.n	800803a <HAL_SPI_TransmitReceive+0x176>
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d113      	bne.n	800803a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	881a      	ldrh	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	1c9a      	adds	r2, r3, #2
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b01      	cmp	r3, #1
 8008046:	d119      	bne.n	800807c <HAL_SPI_TransmitReceive+0x1b8>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d014      	beq.n	800807c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	b292      	uxth	r2, r2
 800805e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	1c9a      	adds	r2, r3, #2
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008078:	2301      	movs	r3, #1
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800807c:	f7fc fb6a 	bl	8004754 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008088:	429a      	cmp	r2, r3
 800808a:	d807      	bhi.n	800809c <HAL_SPI_TransmitReceive+0x1d8>
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d003      	beq.n	800809c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800809a:	e0a7      	b.n	80081ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1a6      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x130>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1a1      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x130>
 80080b0:	e07c      	b.n	80081ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_SPI_TransmitReceive+0x1fc>
 80080ba:	8b7b      	ldrh	r3, [r7, #26]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d16b      	bne.n	8008198 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080e6:	e057      	b.n	8008198 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d11c      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x26c>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <HAL_SPI_TransmitReceive+0x26c>
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d114      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	7812      	ldrb	r2, [r2, #0]
 8008112:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008122:	b29b      	uxth	r3, r3
 8008124:	3b01      	subs	r3, #1
 8008126:	b29a      	uxth	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b01      	cmp	r3, #1
 800813c:	d119      	bne.n	8008172 <HAL_SPI_TransmitReceive+0x2ae>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d014      	beq.n	8008172 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800816e:	2301      	movs	r3, #1
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008172:	f7fc faef 	bl	8004754 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800817e:	429a      	cmp	r2, r3
 8008180:	d803      	bhi.n	800818a <HAL_SPI_TransmitReceive+0x2c6>
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d102      	bne.n	8008190 <HAL_SPI_TransmitReceive+0x2cc>
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008196:	e029      	b.n	80081ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1a2      	bne.n	80080e8 <HAL_SPI_TransmitReceive+0x224>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d19d      	bne.n	80080e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fa35 	bl	8008620 <SPI_EndRxTxTransaction>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80081c8:	e010      	b.n	80081ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	e000      	b.n	80081ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80081ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008200:	4618      	mov	r0, r3
 8008202:	3730      	adds	r7, #48	; 0x30
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	099b      	lsrs	r3, r3, #6
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10f      	bne.n	800824c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	099b      	lsrs	r3, r3, #6
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
    return;
 800824a:	e0d7      	b.n	80083fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <HAL_SPI_IRQHandler+0x66>
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	09db      	lsrs	r3, r3, #7
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	4798      	blx	r3
    return;
 800826c:	e0c6      	b.n	80083fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10c      	bne.n	8008294 <HAL_SPI_IRQHandler+0x8c>
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	099b      	lsrs	r3, r3, #6
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	0a1b      	lsrs	r3, r3, #8
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 80b4 	beq.w	80083fc <HAL_SPI_IRQHandler+0x1f4>
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	095b      	lsrs	r3, r3, #5
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 80ad 	beq.w	80083fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	099b      	lsrs	r3, r3, #6
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d023      	beq.n	80082f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d011      	beq.n	80082de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	f043 0204 	orr.w	r2, r3, #4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	e00b      	b.n	80082f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082de:	2300      	movs	r3, #0
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	613b      	str	r3, [r7, #16]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	693b      	ldr	r3, [r7, #16]
        return;
 80082f4:	e082      	b.n	80083fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d014      	beq.n	800832c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	f043 0201 	orr.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	0a1b      	lsrs	r3, r3, #8
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00c      	beq.n	8008352 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	f043 0208 	orr.w	r2, r3, #8
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	2b00      	cmp	r3, #0
 8008358:	d04f      	beq.n	80083fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008368:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_SPI_IRQHandler+0x17e>
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d034      	beq.n	80083f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0203 	bic.w	r2, r2, #3
 8008394:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d011      	beq.n	80083c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a2:	4a18      	ldr	r2, [pc, #96]	; (8008404 <HAL_SPI_IRQHandler+0x1fc>)
 80083a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fc fbc2 	bl	8004b34 <HAL_DMA_Abort_IT>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ce:	4a0d      	ldr	r2, [pc, #52]	; (8008404 <HAL_SPI_IRQHandler+0x1fc>)
 80083d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fc fbac 	bl	8004b34 <HAL_DMA_Abort_IT>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80083ee:	e003      	b.n	80083f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f809 	bl	8008408 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083f6:	e000      	b.n	80083fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80083f8:	bf00      	nop
    return;
 80083fa:	bf00      	nop
  }
}
 80083fc:	3720      	adds	r7, #32
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	0800841d 	.word	0x0800841d

08008408 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff ffe6 	bl	8008408 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800843c:	bf00      	nop
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008454:	f7fc f97e 	bl	8004754 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4413      	add	r3, r2
 8008462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008464:	f7fc f976 	bl	8004754 <HAL_GetTick>
 8008468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800846a:	4b39      	ldr	r3, [pc, #228]	; (8008550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	015b      	lsls	r3, r3, #5
 8008470:	0d1b      	lsrs	r3, r3, #20
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	fb02 f303 	mul.w	r3, r2, r3
 8008478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800847a:	e054      	b.n	8008526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d050      	beq.n	8008526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008484:	f7fc f966 	bl	8004754 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	429a      	cmp	r2, r3
 8008492:	d902      	bls.n	800849a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d13d      	bne.n	8008516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084b2:	d111      	bne.n	80084d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084bc:	d004      	beq.n	80084c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c6:	d107      	bne.n	80084d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e0:	d10f      	bne.n	8008502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e017      	b.n	8008546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	3b01      	subs	r3, #1
 8008524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4013      	ands	r3, r2
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	bf0c      	ite	eq
 8008536:	2301      	moveq	r3, #1
 8008538:	2300      	movne	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d19b      	bne.n	800847c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200000b0 	.word	0x200000b0

08008554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008568:	d111      	bne.n	800858e <SPI_EndRxTransaction+0x3a>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008572:	d004      	beq.n	800857e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857c:	d107      	bne.n	800858e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008596:	d12a      	bne.n	80085ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a0:	d012      	beq.n	80085c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2200      	movs	r2, #0
 80085aa:	2180      	movs	r1, #128	; 0x80
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f7ff ff49 	bl	8008444 <SPI_WaitFlagStateUntilTimeout>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d02d      	beq.n	8008614 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085bc:	f043 0220 	orr.w	r2, r3, #32
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e026      	b.n	8008616 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2200      	movs	r2, #0
 80085d0:	2101      	movs	r1, #1
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff ff36 	bl	8008444 <SPI_WaitFlagStateUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01a      	beq.n	8008614 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e013      	b.n	8008616 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2101      	movs	r1, #1
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff ff23 	bl	8008444 <SPI_WaitFlagStateUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008608:	f043 0220 	orr.w	r2, r3, #32
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e000      	b.n	8008616 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <SPI_EndRxTxTransaction+0x7c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1b      	ldr	r2, [pc, #108]	; (80086a0 <SPI_EndRxTxTransaction+0x80>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	0d5b      	lsrs	r3, r3, #21
 8008638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800863c:	fb02 f303 	mul.w	r3, r2, r3
 8008640:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800864a:	d112      	bne.n	8008672 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	2180      	movs	r1, #128	; 0x80
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7ff fef4 	bl	8008444 <SPI_WaitFlagStateUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d016      	beq.n	8008690 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e00f      	b.n	8008692 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	3b01      	subs	r3, #1
 800867c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008688:	2b80      	cmp	r3, #128	; 0x80
 800868a:	d0f2      	beq.n	8008672 <SPI_EndRxTxTransaction+0x52>
 800868c:	e000      	b.n	8008690 <SPI_EndRxTxTransaction+0x70>
        break;
 800868e:	bf00      	nop
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	200000b0 	.word	0x200000b0
 80086a0:	165e9f81 	.word	0x165e9f81

080086a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e041      	b.n	800873a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fb fe3e 	bl	800434c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f000 fae0 	bl	8008ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e04e      	b.n	80087fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a23      	ldr	r2, [pc, #140]	; (8008808 <HAL_TIM_Base_Start_IT+0xc4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d022      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d01d      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1f      	ldr	r2, [pc, #124]	; (800880c <HAL_TIM_Base_Start_IT+0xc8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d018      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1e      	ldr	r2, [pc, #120]	; (8008810 <HAL_TIM_Base_Start_IT+0xcc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <HAL_TIM_Base_Start_IT+0xd0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00e      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <HAL_TIM_Base_Start_IT+0xd4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d009      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a19      	ldr	r2, [pc, #100]	; (800881c <HAL_TIM_Base_Start_IT+0xd8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a18      	ldr	r2, [pc, #96]	; (8008820 <HAL_TIM_Base_Start_IT+0xdc>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d111      	bne.n	80087e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b06      	cmp	r3, #6
 80087d4:	d010      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0201 	orr.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e6:	e007      	b.n	80087f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0201 	orr.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40010000 	.word	0x40010000
 800880c:	40000400 	.word	0x40000400
 8008810:	40000800 	.word	0x40000800
 8008814:	40000c00 	.word	0x40000c00
 8008818:	40010400 	.word	0x40010400
 800881c:	40014000 	.word	0x40014000
 8008820:	40001800 	.word	0x40001800

08008824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e041      	b.n	80088ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fb fd5c 	bl	8004308 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f000 fa20 	bl	8008ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d122      	bne.n	800891e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d11b      	bne.n	800891e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f06f 0202 	mvn.w	r2, #2
 80088ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f9b1 	bl	8008c6c <HAL_TIM_IC_CaptureCallback>
 800890a:	e005      	b.n	8008918 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f9a3 	bl	8008c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f9b4 	bl	8008c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d122      	bne.n	8008972 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d11b      	bne.n	8008972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f06f 0204 	mvn.w	r2, #4
 8008942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f987 	bl	8008c6c <HAL_TIM_IC_CaptureCallback>
 800895e:	e005      	b.n	800896c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f979 	bl	8008c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f98a 	bl	8008c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b08      	cmp	r3, #8
 800897e:	d122      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b08      	cmp	r3, #8
 800898c:	d11b      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f06f 0208 	mvn.w	r2, #8
 8008996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2204      	movs	r2, #4
 800899c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	f003 0303 	and.w	r3, r3, #3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f95d 	bl	8008c6c <HAL_TIM_IC_CaptureCallback>
 80089b2:	e005      	b.n	80089c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f94f 	bl	8008c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f960 	bl	8008c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b10      	cmp	r3, #16
 80089d2:	d122      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d11b      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f06f 0210 	mvn.w	r2, #16
 80089ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2208      	movs	r2, #8
 80089f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f933 	bl	8008c6c <HAL_TIM_IC_CaptureCallback>
 8008a06:	e005      	b.n	8008a14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f925 	bl	8008c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f936 	bl	8008c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d10e      	bne.n	8008a46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d107      	bne.n	8008a46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f06f 0201 	mvn.w	r2, #1
 8008a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7fb fb9b 	bl	800417c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a50:	2b80      	cmp	r3, #128	; 0x80
 8008a52:	d10e      	bne.n	8008a72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5e:	2b80      	cmp	r3, #128	; 0x80
 8008a60:	d107      	bne.n	8008a72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fbf1 	bl	8009254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	d10e      	bne.n	8008a9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d107      	bne.n	8008a9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f8fb 	bl	8008c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d10e      	bne.n	8008aca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d107      	bne.n	8008aca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f06f 0220 	mvn.w	r2, #32
 8008ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fbbb 	bl	8009240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d101      	bne.n	8008af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008aee:	2302      	movs	r3, #2
 8008af0:	e0ae      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b0c      	cmp	r3, #12
 8008afe:	f200 809f 	bhi.w	8008c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b3d 	.word	0x08008b3d
 8008b0c:	08008c41 	.word	0x08008c41
 8008b10:	08008c41 	.word	0x08008c41
 8008b14:	08008c41 	.word	0x08008c41
 8008b18:	08008b7d 	.word	0x08008b7d
 8008b1c:	08008c41 	.word	0x08008c41
 8008b20:	08008c41 	.word	0x08008c41
 8008b24:	08008c41 	.word	0x08008c41
 8008b28:	08008bbf 	.word	0x08008bbf
 8008b2c:	08008c41 	.word	0x08008c41
 8008b30:	08008c41 	.word	0x08008c41
 8008b34:	08008c41 	.word	0x08008c41
 8008b38:	08008bff 	.word	0x08008bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68b9      	ldr	r1, [r7, #8]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f950 	bl	8008de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0208 	orr.w	r2, r2, #8
 8008b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699a      	ldr	r2, [r3, #24]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0204 	bic.w	r2, r2, #4
 8008b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6999      	ldr	r1, [r3, #24]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	619a      	str	r2, [r3, #24]
      break;
 8008b7a:	e064      	b.n	8008c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f9a0 	bl	8008ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6999      	ldr	r1, [r3, #24]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	021a      	lsls	r2, r3, #8
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	619a      	str	r2, [r3, #24]
      break;
 8008bbc:	e043      	b.n	8008c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f9f5 	bl	8008fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69da      	ldr	r2, [r3, #28]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f042 0208 	orr.w	r2, r2, #8
 8008bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69da      	ldr	r2, [r3, #28]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0204 	bic.w	r2, r2, #4
 8008be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69d9      	ldr	r1, [r3, #28]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	61da      	str	r2, [r3, #28]
      break;
 8008bfc:	e023      	b.n	8008c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fa49 	bl	800909c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69da      	ldr	r2, [r3, #28]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69da      	ldr	r2, [r3, #28]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69d9      	ldr	r1, [r3, #28]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	021a      	lsls	r2, r3, #8
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	61da      	str	r2, [r3, #28]
      break;
 8008c3e:	e002      	b.n	8008c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	75fb      	strb	r3, [r7, #23]
      break;
 8008c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a40      	ldr	r2, [pc, #256]	; (8008dbc <TIM_Base_SetConfig+0x114>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc6:	d00f      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a3d      	ldr	r2, [pc, #244]	; (8008dc0 <TIM_Base_SetConfig+0x118>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00b      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a3c      	ldr	r2, [pc, #240]	; (8008dc4 <TIM_Base_SetConfig+0x11c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d007      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a3b      	ldr	r2, [pc, #236]	; (8008dc8 <TIM_Base_SetConfig+0x120>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3a      	ldr	r2, [pc, #232]	; (8008dcc <TIM_Base_SetConfig+0x124>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d108      	bne.n	8008cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2f      	ldr	r2, [pc, #188]	; (8008dbc <TIM_Base_SetConfig+0x114>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d02b      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d08:	d027      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a2c      	ldr	r2, [pc, #176]	; (8008dc0 <TIM_Base_SetConfig+0x118>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d023      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2b      	ldr	r2, [pc, #172]	; (8008dc4 <TIM_Base_SetConfig+0x11c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d01f      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a2a      	ldr	r2, [pc, #168]	; (8008dc8 <TIM_Base_SetConfig+0x120>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d01b      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a29      	ldr	r2, [pc, #164]	; (8008dcc <TIM_Base_SetConfig+0x124>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d017      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a28      	ldr	r2, [pc, #160]	; (8008dd0 <TIM_Base_SetConfig+0x128>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d013      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a27      	ldr	r2, [pc, #156]	; (8008dd4 <TIM_Base_SetConfig+0x12c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00f      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a26      	ldr	r2, [pc, #152]	; (8008dd8 <TIM_Base_SetConfig+0x130>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a25      	ldr	r2, [pc, #148]	; (8008ddc <TIM_Base_SetConfig+0x134>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d007      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a24      	ldr	r2, [pc, #144]	; (8008de0 <TIM_Base_SetConfig+0x138>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a23      	ldr	r2, [pc, #140]	; (8008de4 <TIM_Base_SetConfig+0x13c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d108      	bne.n	8008d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <TIM_Base_SetConfig+0x114>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_Base_SetConfig+0xf8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a0c      	ldr	r2, [pc, #48]	; (8008dcc <TIM_Base_SetConfig+0x124>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d103      	bne.n	8008da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	615a      	str	r2, [r3, #20]
}
 8008dae:	bf00      	nop
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	40010000 	.word	0x40010000
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40000800 	.word	0x40000800
 8008dc8:	40000c00 	.word	0x40000c00
 8008dcc:	40010400 	.word	0x40010400
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40014400 	.word	0x40014400
 8008dd8:	40014800 	.word	0x40014800
 8008ddc:	40001800 	.word	0x40001800
 8008de0:	40001c00 	.word	0x40001c00
 8008de4:	40002000 	.word	0x40002000

08008de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	f023 0201 	bic.w	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0303 	bic.w	r3, r3, #3
 8008e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f023 0302 	bic.w	r3, r3, #2
 8008e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a20      	ldr	r2, [pc, #128]	; (8008ec0 <TIM_OC1_SetConfig+0xd8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <TIM_OC1_SetConfig+0x64>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <TIM_OC1_SetConfig+0xdc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d10c      	bne.n	8008e66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f023 0308 	bic.w	r3, r3, #8
 8008e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f023 0304 	bic.w	r3, r3, #4
 8008e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a15      	ldr	r2, [pc, #84]	; (8008ec0 <TIM_OC1_SetConfig+0xd8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d003      	beq.n	8008e76 <TIM_OC1_SetConfig+0x8e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a14      	ldr	r2, [pc, #80]	; (8008ec4 <TIM_OC1_SetConfig+0xdc>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d111      	bne.n	8008e9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	621a      	str	r2, [r3, #32]
}
 8008eb4:	bf00      	nop
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	40010000 	.word	0x40010000
 8008ec4:	40010400 	.word	0x40010400

08008ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f023 0210 	bic.w	r2, r3, #16
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	021b      	lsls	r3, r3, #8
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f023 0320 	bic.w	r3, r3, #32
 8008f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a22      	ldr	r2, [pc, #136]	; (8008fac <TIM_OC2_SetConfig+0xe4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_OC2_SetConfig+0x68>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a21      	ldr	r2, [pc, #132]	; (8008fb0 <TIM_OC2_SetConfig+0xe8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10d      	bne.n	8008f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a17      	ldr	r2, [pc, #92]	; (8008fac <TIM_OC2_SetConfig+0xe4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d003      	beq.n	8008f5c <TIM_OC2_SetConfig+0x94>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a16      	ldr	r2, [pc, #88]	; (8008fb0 <TIM_OC2_SetConfig+0xe8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d113      	bne.n	8008f84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	621a      	str	r2, [r3, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	40010000 	.word	0x40010000
 8008fb0:	40010400 	.word	0x40010400

08008fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0303 	bic.w	r3, r3, #3
 8008fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a21      	ldr	r2, [pc, #132]	; (8009094 <TIM_OC3_SetConfig+0xe0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d003      	beq.n	800901a <TIM_OC3_SetConfig+0x66>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a20      	ldr	r2, [pc, #128]	; (8009098 <TIM_OC3_SetConfig+0xe4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d10d      	bne.n	8009036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a16      	ldr	r2, [pc, #88]	; (8009094 <TIM_OC3_SetConfig+0xe0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d003      	beq.n	8009046 <TIM_OC3_SetConfig+0x92>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a15      	ldr	r2, [pc, #84]	; (8009098 <TIM_OC3_SetConfig+0xe4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d113      	bne.n	800906e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800904c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	621a      	str	r2, [r3, #32]
}
 8009088:	bf00      	nop
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	40010000 	.word	0x40010000
 8009098:	40010400 	.word	0x40010400

0800909c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	031b      	lsls	r3, r3, #12
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a12      	ldr	r2, [pc, #72]	; (8009140 <TIM_OC4_SetConfig+0xa4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d003      	beq.n	8009104 <TIM_OC4_SetConfig+0x68>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a11      	ldr	r2, [pc, #68]	; (8009144 <TIM_OC4_SetConfig+0xa8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d109      	bne.n	8009118 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800910a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	019b      	lsls	r3, r3, #6
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	621a      	str	r2, [r3, #32]
}
 8009132:	bf00      	nop
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	40010000 	.word	0x40010000
 8009144:	40010400 	.word	0x40010400

08009148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800915c:	2302      	movs	r3, #2
 800915e:	e05a      	b.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a21      	ldr	r2, [pc, #132]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d022      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ac:	d01d      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d018      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1b      	ldr	r2, [pc, #108]	; (800922c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a1a      	ldr	r2, [pc, #104]	; (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00e      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a18      	ldr	r2, [pc, #96]	; (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d009      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a17      	ldr	r2, [pc, #92]	; (8009238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d004      	beq.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a15      	ldr	r2, [pc, #84]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d10c      	bne.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	40010000 	.word	0x40010000
 8009228:	40000400 	.word	0x40000400
 800922c:	40000800 	.word	0x40000800
 8009230:	40000c00 	.word	0x40000c00
 8009234:	40010400 	.word	0x40010400
 8009238:	40014000 	.word	0x40014000
 800923c:	40001800 	.word	0x40001800

08009240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e03f      	b.n	80092fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fb f930 	bl	80044f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2224      	movs	r2, #36	; 0x24
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f929 	bl	8009504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691a      	ldr	r2, [r3, #16]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695a      	ldr	r2, [r3, #20]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b08a      	sub	sp, #40	; 0x28
 8009306:	af02      	add	r7, sp, #8
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b20      	cmp	r3, #32
 8009320:	d17c      	bne.n	800941c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <HAL_UART_Transmit+0x2c>
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e075      	b.n	800941e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <HAL_UART_Transmit+0x3e>
 800933c:	2302      	movs	r3, #2
 800933e:	e06e      	b.n	800941e <HAL_UART_Transmit+0x11c>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2221      	movs	r2, #33	; 0x21
 8009352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009356:	f7fb f9fd 	bl	8004754 <HAL_GetTick>
 800935a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	88fa      	ldrh	r2, [r7, #6]
 8009366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009370:	d108      	bne.n	8009384 <HAL_UART_Transmit+0x82>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d104      	bne.n	8009384 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	61bb      	str	r3, [r7, #24]
 8009382:	e003      	b.n	800938c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009388:	2300      	movs	r3, #0
 800938a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009394:	e02a      	b.n	80093ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2200      	movs	r2, #0
 800939e:	2180      	movs	r1, #128	; 0x80
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f840 	bl	8009426 <UART_WaitOnFlagUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e036      	b.n	800941e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10b      	bne.n	80093ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	3302      	adds	r3, #2
 80093ca:	61bb      	str	r3, [r7, #24]
 80093cc:	e007      	b.n	80093de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	3301      	adds	r3, #1
 80093dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1cf      	bne.n	8009396 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2200      	movs	r2, #0
 80093fe:	2140      	movs	r1, #64	; 0x40
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f810 	bl	8009426 <UART_WaitOnFlagUntilTimeout>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e006      	b.n	800941e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2220      	movs	r2, #32
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	e000      	b.n	800941e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800941c:	2302      	movs	r3, #2
  }
}
 800941e:	4618      	mov	r0, r3
 8009420:	3720      	adds	r7, #32
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b090      	sub	sp, #64	; 0x40
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	603b      	str	r3, [r7, #0]
 8009432:	4613      	mov	r3, r2
 8009434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009436:	e050      	b.n	80094da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d04c      	beq.n	80094da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <UART_WaitOnFlagUntilTimeout+0x30>
 8009446:	f7fb f985 	bl	8004754 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009452:	429a      	cmp	r2, r3
 8009454:	d241      	bcs.n	80094da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	330c      	adds	r3, #12
 8009474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009476:	637a      	str	r2, [r7, #52]	; 0x34
 8009478:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800947c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e5      	bne.n	8009456 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3314      	adds	r3, #20
 8009490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	613b      	str	r3, [r7, #16]
   return(result);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3314      	adds	r3, #20
 80094a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094aa:	623a      	str	r2, [r7, #32]
 80094ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	69f9      	ldr	r1, [r7, #28]
 80094b0:	6a3a      	ldr	r2, [r7, #32]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e5      	bne.n	800948a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e00f      	b.n	80094fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d09f      	beq.n	8009438 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3740      	adds	r7, #64	; 0x40
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009508:	b0c0      	sub	sp, #256	; 0x100
 800950a:	af00      	add	r7, sp, #0
 800950c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	68d9      	ldr	r1, [r3, #12]
 8009522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	ea40 0301 	orr.w	r3, r0, r1
 800952c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	431a      	orrs	r2, r3
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	431a      	orrs	r2, r3
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	4313      	orrs	r3, r2
 800954c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800955c:	f021 010c 	bic.w	r1, r1, #12
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800956a:	430b      	orrs	r3, r1
 800956c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800957a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957e:	6999      	ldr	r1, [r3, #24]
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	ea40 0301 	orr.w	r3, r0, r1
 800958a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b8f      	ldr	r3, [pc, #572]	; (80097d0 <UART_SetConfig+0x2cc>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d005      	beq.n	80095a4 <UART_SetConfig+0xa0>
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b8d      	ldr	r3, [pc, #564]	; (80097d4 <UART_SetConfig+0x2d0>)
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d104      	bne.n	80095ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095a4:	f7fe f9a4 	bl	80078f0 <HAL_RCC_GetPCLK2Freq>
 80095a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095ac:	e003      	b.n	80095b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ae:	f7fe f98b 	bl	80078c8 <HAL_RCC_GetPCLK1Freq>
 80095b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c0:	f040 810c 	bne.w	80097dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095d6:	4622      	mov	r2, r4
 80095d8:	462b      	mov	r3, r5
 80095da:	1891      	adds	r1, r2, r2
 80095dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80095de:	415b      	adcs	r3, r3
 80095e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095e6:	4621      	mov	r1, r4
 80095e8:	eb12 0801 	adds.w	r8, r2, r1
 80095ec:	4629      	mov	r1, r5
 80095ee:	eb43 0901 	adc.w	r9, r3, r1
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009606:	4690      	mov	r8, r2
 8009608:	4699      	mov	r9, r3
 800960a:	4623      	mov	r3, r4
 800960c:	eb18 0303 	adds.w	r3, r8, r3
 8009610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009614:	462b      	mov	r3, r5
 8009616:	eb49 0303 	adc.w	r3, r9, r3
 800961a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800962a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800962e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009632:	460b      	mov	r3, r1
 8009634:	18db      	adds	r3, r3, r3
 8009636:	653b      	str	r3, [r7, #80]	; 0x50
 8009638:	4613      	mov	r3, r2
 800963a:	eb42 0303 	adc.w	r3, r2, r3
 800963e:	657b      	str	r3, [r7, #84]	; 0x54
 8009640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009648:	f7f6 fdc6 	bl	80001d8 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4b61      	ldr	r3, [pc, #388]	; (80097d8 <UART_SetConfig+0x2d4>)
 8009652:	fba3 2302 	umull	r2, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	011c      	lsls	r4, r3, #4
 800965a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965e:	2200      	movs	r2, #0
 8009660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009664:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	1891      	adds	r1, r2, r2
 8009672:	64b9      	str	r1, [r7, #72]	; 0x48
 8009674:	415b      	adcs	r3, r3
 8009676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800967c:	4641      	mov	r1, r8
 800967e:	eb12 0a01 	adds.w	sl, r2, r1
 8009682:	4649      	mov	r1, r9
 8009684:	eb43 0b01 	adc.w	fp, r3, r1
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800969c:	4692      	mov	sl, r2
 800969e:	469b      	mov	fp, r3
 80096a0:	4643      	mov	r3, r8
 80096a2:	eb1a 0303 	adds.w	r3, sl, r3
 80096a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096aa:	464b      	mov	r3, r9
 80096ac:	eb4b 0303 	adc.w	r3, fp, r3
 80096b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096c8:	460b      	mov	r3, r1
 80096ca:	18db      	adds	r3, r3, r3
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
 80096ce:	4613      	mov	r3, r2
 80096d0:	eb42 0303 	adc.w	r3, r2, r3
 80096d4:	647b      	str	r3, [r7, #68]	; 0x44
 80096d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096de:	f7f6 fd7b 	bl	80001d8 <__aeabi_uldivmod>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	4b3b      	ldr	r3, [pc, #236]	; (80097d8 <UART_SetConfig+0x2d4>)
 80096ea:	fba3 2301 	umull	r2, r3, r3, r1
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	2264      	movs	r2, #100	; 0x64
 80096f2:	fb02 f303 	mul.w	r3, r2, r3
 80096f6:	1acb      	subs	r3, r1, r3
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096fe:	4b36      	ldr	r3, [pc, #216]	; (80097d8 <UART_SetConfig+0x2d4>)
 8009700:	fba3 2302 	umull	r2, r3, r3, r2
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800970c:	441c      	add	r4, r3
 800970e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009712:	2200      	movs	r2, #0
 8009714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009718:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800971c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	1891      	adds	r1, r2, r2
 8009726:	63b9      	str	r1, [r7, #56]	; 0x38
 8009728:	415b      	adcs	r3, r3
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009730:	4641      	mov	r1, r8
 8009732:	1851      	adds	r1, r2, r1
 8009734:	6339      	str	r1, [r7, #48]	; 0x30
 8009736:	4649      	mov	r1, r9
 8009738:	414b      	adcs	r3, r1
 800973a:	637b      	str	r3, [r7, #52]	; 0x34
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	f04f 0300 	mov.w	r3, #0
 8009744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009748:	4659      	mov	r1, fp
 800974a:	00cb      	lsls	r3, r1, #3
 800974c:	4651      	mov	r1, sl
 800974e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009752:	4651      	mov	r1, sl
 8009754:	00ca      	lsls	r2, r1, #3
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	4603      	mov	r3, r0
 800975c:	4642      	mov	r2, r8
 800975e:	189b      	adds	r3, r3, r2
 8009760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009764:	464b      	mov	r3, r9
 8009766:	460a      	mov	r2, r1
 8009768:	eb42 0303 	adc.w	r3, r2, r3
 800976c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800977c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009784:	460b      	mov	r3, r1
 8009786:	18db      	adds	r3, r3, r3
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
 800978a:	4613      	mov	r3, r2
 800978c:	eb42 0303 	adc.w	r3, r2, r3
 8009790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800979a:	f7f6 fd1d 	bl	80001d8 <__aeabi_uldivmod>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <UART_SetConfig+0x2d4>)
 80097a4:	fba3 1302 	umull	r1, r3, r3, r2
 80097a8:	095b      	lsrs	r3, r3, #5
 80097aa:	2164      	movs	r1, #100	; 0x64
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	3332      	adds	r3, #50	; 0x32
 80097b6:	4a08      	ldr	r2, [pc, #32]	; (80097d8 <UART_SetConfig+0x2d4>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	f003 0207 	and.w	r2, r3, #7
 80097c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4422      	add	r2, r4
 80097ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097cc:	e105      	b.n	80099da <UART_SetConfig+0x4d6>
 80097ce:	bf00      	nop
 80097d0:	40011000 	.word	0x40011000
 80097d4:	40011400 	.word	0x40011400
 80097d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097ee:	4642      	mov	r2, r8
 80097f0:	464b      	mov	r3, r9
 80097f2:	1891      	adds	r1, r2, r2
 80097f4:	6239      	str	r1, [r7, #32]
 80097f6:	415b      	adcs	r3, r3
 80097f8:	627b      	str	r3, [r7, #36]	; 0x24
 80097fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097fe:	4641      	mov	r1, r8
 8009800:	1854      	adds	r4, r2, r1
 8009802:	4649      	mov	r1, r9
 8009804:	eb43 0501 	adc.w	r5, r3, r1
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	00eb      	lsls	r3, r5, #3
 8009812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009816:	00e2      	lsls	r2, r4, #3
 8009818:	4614      	mov	r4, r2
 800981a:	461d      	mov	r5, r3
 800981c:	4643      	mov	r3, r8
 800981e:	18e3      	adds	r3, r4, r3
 8009820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009824:	464b      	mov	r3, r9
 8009826:	eb45 0303 	adc.w	r3, r5, r3
 800982a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800983a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800984a:	4629      	mov	r1, r5
 800984c:	008b      	lsls	r3, r1, #2
 800984e:	4621      	mov	r1, r4
 8009850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009854:	4621      	mov	r1, r4
 8009856:	008a      	lsls	r2, r1, #2
 8009858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800985c:	f7f6 fcbc 	bl	80001d8 <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4b60      	ldr	r3, [pc, #384]	; (80099e8 <UART_SetConfig+0x4e4>)
 8009866:	fba3 2302 	umull	r2, r3, r3, r2
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	011c      	lsls	r4, r3, #4
 800986e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009872:	2200      	movs	r2, #0
 8009874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009878:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800987c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009880:	4642      	mov	r2, r8
 8009882:	464b      	mov	r3, r9
 8009884:	1891      	adds	r1, r2, r2
 8009886:	61b9      	str	r1, [r7, #24]
 8009888:	415b      	adcs	r3, r3
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009890:	4641      	mov	r1, r8
 8009892:	1851      	adds	r1, r2, r1
 8009894:	6139      	str	r1, [r7, #16]
 8009896:	4649      	mov	r1, r9
 8009898:	414b      	adcs	r3, r1
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a8:	4659      	mov	r1, fp
 80098aa:	00cb      	lsls	r3, r1, #3
 80098ac:	4651      	mov	r1, sl
 80098ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098b2:	4651      	mov	r1, sl
 80098b4:	00ca      	lsls	r2, r1, #3
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	4642      	mov	r2, r8
 80098be:	189b      	adds	r3, r3, r2
 80098c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098c4:	464b      	mov	r3, r9
 80098c6:	460a      	mov	r2, r1
 80098c8:	eb42 0303 	adc.w	r3, r2, r3
 80098cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	f04f 0300 	mov.w	r3, #0
 80098e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098e8:	4649      	mov	r1, r9
 80098ea:	008b      	lsls	r3, r1, #2
 80098ec:	4641      	mov	r1, r8
 80098ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098f2:	4641      	mov	r1, r8
 80098f4:	008a      	lsls	r2, r1, #2
 80098f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098fa:	f7f6 fc6d 	bl	80001d8 <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4b39      	ldr	r3, [pc, #228]	; (80099e8 <UART_SetConfig+0x4e4>)
 8009904:	fba3 1302 	umull	r1, r3, r3, r2
 8009908:	095b      	lsrs	r3, r3, #5
 800990a:	2164      	movs	r1, #100	; 0x64
 800990c:	fb01 f303 	mul.w	r3, r1, r3
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	3332      	adds	r3, #50	; 0x32
 8009916:	4a34      	ldr	r2, [pc, #208]	; (80099e8 <UART_SetConfig+0x4e4>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	095b      	lsrs	r3, r3, #5
 800991e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009922:	441c      	add	r4, r3
 8009924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009928:	2200      	movs	r2, #0
 800992a:	673b      	str	r3, [r7, #112]	; 0x70
 800992c:	677a      	str	r2, [r7, #116]	; 0x74
 800992e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009932:	4642      	mov	r2, r8
 8009934:	464b      	mov	r3, r9
 8009936:	1891      	adds	r1, r2, r2
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	415b      	adcs	r3, r3
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009942:	4641      	mov	r1, r8
 8009944:	1851      	adds	r1, r2, r1
 8009946:	6039      	str	r1, [r7, #0]
 8009948:	4649      	mov	r1, r9
 800994a:	414b      	adcs	r3, r1
 800994c:	607b      	str	r3, [r7, #4]
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800995a:	4659      	mov	r1, fp
 800995c:	00cb      	lsls	r3, r1, #3
 800995e:	4651      	mov	r1, sl
 8009960:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009964:	4651      	mov	r1, sl
 8009966:	00ca      	lsls	r2, r1, #3
 8009968:	4610      	mov	r0, r2
 800996a:	4619      	mov	r1, r3
 800996c:	4603      	mov	r3, r0
 800996e:	4642      	mov	r2, r8
 8009970:	189b      	adds	r3, r3, r2
 8009972:	66bb      	str	r3, [r7, #104]	; 0x68
 8009974:	464b      	mov	r3, r9
 8009976:	460a      	mov	r2, r1
 8009978:	eb42 0303 	adc.w	r3, r2, r3
 800997c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800997e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	663b      	str	r3, [r7, #96]	; 0x60
 8009988:	667a      	str	r2, [r7, #100]	; 0x64
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	f04f 0300 	mov.w	r3, #0
 8009992:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009996:	4649      	mov	r1, r9
 8009998:	008b      	lsls	r3, r1, #2
 800999a:	4641      	mov	r1, r8
 800999c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a0:	4641      	mov	r1, r8
 80099a2:	008a      	lsls	r2, r1, #2
 80099a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099a8:	f7f6 fc16 	bl	80001d8 <__aeabi_uldivmod>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <UART_SetConfig+0x4e4>)
 80099b2:	fba3 1302 	umull	r1, r3, r3, r2
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	2164      	movs	r1, #100	; 0x64
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	3332      	adds	r3, #50	; 0x32
 80099c4:	4a08      	ldr	r2, [pc, #32]	; (80099e8 <UART_SetConfig+0x4e4>)
 80099c6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4422      	add	r2, r4
 80099d8:	609a      	str	r2, [r3, #8]
}
 80099da:	bf00      	nop
 80099dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099e0:	46bd      	mov	sp, r7
 80099e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099e6:	bf00      	nop
 80099e8:	51eb851f 	.word	0x51eb851f

080099ec <__libc_init_array>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	4d0d      	ldr	r5, [pc, #52]	; (8009a24 <__libc_init_array+0x38>)
 80099f0:	4c0d      	ldr	r4, [pc, #52]	; (8009a28 <__libc_init_array+0x3c>)
 80099f2:	1b64      	subs	r4, r4, r5
 80099f4:	10a4      	asrs	r4, r4, #2
 80099f6:	2600      	movs	r6, #0
 80099f8:	42a6      	cmp	r6, r4
 80099fa:	d109      	bne.n	8009a10 <__libc_init_array+0x24>
 80099fc:	4d0b      	ldr	r5, [pc, #44]	; (8009a2c <__libc_init_array+0x40>)
 80099fe:	4c0c      	ldr	r4, [pc, #48]	; (8009a30 <__libc_init_array+0x44>)
 8009a00:	f000 f87c 	bl	8009afc <_init>
 8009a04:	1b64      	subs	r4, r4, r5
 8009a06:	10a4      	asrs	r4, r4, #2
 8009a08:	2600      	movs	r6, #0
 8009a0a:	42a6      	cmp	r6, r4
 8009a0c:	d105      	bne.n	8009a1a <__libc_init_array+0x2e>
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a14:	4798      	blx	r3
 8009a16:	3601      	adds	r6, #1
 8009a18:	e7ee      	b.n	80099f8 <__libc_init_array+0xc>
 8009a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1e:	4798      	blx	r3
 8009a20:	3601      	adds	r6, #1
 8009a22:	e7f2      	b.n	8009a0a <__libc_init_array+0x1e>
 8009a24:	0800c928 	.word	0x0800c928
 8009a28:	0800c928 	.word	0x0800c928
 8009a2c:	0800c928 	.word	0x0800c928
 8009a30:	0800c92c 	.word	0x0800c92c

08009a34 <__itoa>:
 8009a34:	1e93      	subs	r3, r2, #2
 8009a36:	2b22      	cmp	r3, #34	; 0x22
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	d904      	bls.n	8009a48 <__itoa+0x14>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	700b      	strb	r3, [r1, #0]
 8009a42:	461c      	mov	r4, r3
 8009a44:	4620      	mov	r0, r4
 8009a46:	bd10      	pop	{r4, pc}
 8009a48:	2a0a      	cmp	r2, #10
 8009a4a:	d109      	bne.n	8009a60 <__itoa+0x2c>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	da07      	bge.n	8009a60 <__itoa+0x2c>
 8009a50:	232d      	movs	r3, #45	; 0x2d
 8009a52:	700b      	strb	r3, [r1, #0]
 8009a54:	4240      	negs	r0, r0
 8009a56:	2101      	movs	r1, #1
 8009a58:	4421      	add	r1, r4
 8009a5a:	f000 f80d 	bl	8009a78 <__utoa>
 8009a5e:	e7f1      	b.n	8009a44 <__itoa+0x10>
 8009a60:	2100      	movs	r1, #0
 8009a62:	e7f9      	b.n	8009a58 <__itoa+0x24>

08009a64 <itoa>:
 8009a64:	f7ff bfe6 	b.w	8009a34 <__itoa>

08009a68 <memset>:
 8009a68:	4402      	add	r2, r0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d100      	bne.n	8009a72 <memset+0xa>
 8009a70:	4770      	bx	lr
 8009a72:	f803 1b01 	strb.w	r1, [r3], #1
 8009a76:	e7f9      	b.n	8009a6c <memset+0x4>

08009a78 <__utoa>:
 8009a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a7a:	4c1f      	ldr	r4, [pc, #124]	; (8009af8 <__utoa+0x80>)
 8009a7c:	b08b      	sub	sp, #44	; 0x2c
 8009a7e:	4605      	mov	r5, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	466e      	mov	r6, sp
 8009a84:	f104 0c20 	add.w	ip, r4, #32
 8009a88:	6820      	ldr	r0, [r4, #0]
 8009a8a:	6861      	ldr	r1, [r4, #4]
 8009a8c:	4637      	mov	r7, r6
 8009a8e:	c703      	stmia	r7!, {r0, r1}
 8009a90:	3408      	adds	r4, #8
 8009a92:	4564      	cmp	r4, ip
 8009a94:	463e      	mov	r6, r7
 8009a96:	d1f7      	bne.n	8009a88 <__utoa+0x10>
 8009a98:	7921      	ldrb	r1, [r4, #4]
 8009a9a:	7139      	strb	r1, [r7, #4]
 8009a9c:	1e91      	subs	r1, r2, #2
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	6038      	str	r0, [r7, #0]
 8009aa2:	2922      	cmp	r1, #34	; 0x22
 8009aa4:	f04f 0100 	mov.w	r1, #0
 8009aa8:	d904      	bls.n	8009ab4 <__utoa+0x3c>
 8009aaa:	7019      	strb	r1, [r3, #0]
 8009aac:	460b      	mov	r3, r1
 8009aae:	4618      	mov	r0, r3
 8009ab0:	b00b      	add	sp, #44	; 0x2c
 8009ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab4:	1e58      	subs	r0, r3, #1
 8009ab6:	4684      	mov	ip, r0
 8009ab8:	fbb5 f7f2 	udiv	r7, r5, r2
 8009abc:	fb02 5617 	mls	r6, r2, r7, r5
 8009ac0:	3628      	adds	r6, #40	; 0x28
 8009ac2:	446e      	add	r6, sp
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009aca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009ace:	462e      	mov	r6, r5
 8009ad0:	42b2      	cmp	r2, r6
 8009ad2:	f101 0101 	add.w	r1, r1, #1
 8009ad6:	463d      	mov	r5, r7
 8009ad8:	d9ee      	bls.n	8009ab8 <__utoa+0x40>
 8009ada:	2200      	movs	r2, #0
 8009adc:	545a      	strb	r2, [r3, r1]
 8009ade:	1919      	adds	r1, r3, r4
 8009ae0:	1aa5      	subs	r5, r4, r2
 8009ae2:	42aa      	cmp	r2, r5
 8009ae4:	dae3      	bge.n	8009aae <__utoa+0x36>
 8009ae6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009aea:	780e      	ldrb	r6, [r1, #0]
 8009aec:	7006      	strb	r6, [r0, #0]
 8009aee:	3201      	adds	r2, #1
 8009af0:	f801 5901 	strb.w	r5, [r1], #-1
 8009af4:	e7f4      	b.n	8009ae0 <__utoa+0x68>
 8009af6:	bf00      	nop
 8009af8:	0800c8f8 	.word	0x0800c8f8

08009afc <_init>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr

08009b08 <_fini>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr
