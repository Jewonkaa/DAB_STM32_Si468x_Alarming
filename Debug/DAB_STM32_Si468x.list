
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002618  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a968  0800a968  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a970  0800a970  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800a978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000151c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001534  20001534  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001689b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000333b  00000000  00000000  000368e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00039c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237c1  00000000  00000000  0003c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019408  00000000  00000000  0005fa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1250  00000000  00000000  00078e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a069  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005214  00000000  00000000  0014a0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008338 	.word	0x08008338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08008338 	.word	0x08008338

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f005 fdb4 	bl	8006266 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20001318 	.word	0x20001318

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f003 fa4a 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f002 fc5b 	bl	8002fd8 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f003 fa41 	bl	8003bb0 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f003 fa3b 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f002 fc4c 	bl	8002fd8 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f003 fa2f 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f003 f9d4 	bl	8003bb0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f003 f9ce 	bl	8003bb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f003 f9c4 	bl	8003bb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f003 f936 	bl	8003bb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f003 f92d 	bl	8003bb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000034 	.word	0x20000034

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f002 ff70 	bl	8003bb0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f002 ff6a 	bl	8003bb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f002 ff61 	bl	8003bb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f002 fec7 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f002 fe9d 	bl	8003bb0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f002 fe94 	bl	8003bb0 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f002 fe48 	bl	8003bb0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f002 fe3f 	bl	8003bb0 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f002 fdf3 	bl	8003bb0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f002 fdea 	bl	8003bb0 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	080089b4 	.word	0x080089b4
 8001068:	08008c8c 	.word	0x08008c8c

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f002 fd9a 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f002 fd94 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f002 fd88 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f002 fd82 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:
RETURN_CODE status = 0;
char itoa_buffer[32];


void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4828      	ldr	r0, [pc, #160]	; (800115c <Si468x_init+0xa8>)
 80010bc:	f000 fe48 	bl	8001d50 <send_debug_msg>
	Si468x_reset();
 80010c0:	f000 f84e 	bl	8001160 <Si468x_reset>
	Si468x_power_up();
 80010c4:	f000 f868 	bl	8001198 <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010c8:	f000 f8ea 	bl	80012a0 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010cc:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d0:	f000 f95a 	bl	8001388 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d4:	f000 f9f8 	bl	80014c8 <Si468x_boot>
	Si468x_get_part_info();
 80010d8:	f000 fba6 	bl	8001828 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010dc:	f000 fb20 	bl	8001720 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); //włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e0:	2101      	movs	r1, #1
 80010e2:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e6:	f000 fc0f 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); //dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ea:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010ee:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f2:	f000 fc09 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); //dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010fa:	f241 7011 	movw	r0, #5905	; 0x1711
 80010fe:	f000 fc03 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x05); //prog RSSI od kiedy łapie kanał, default 12
 8001102:	2105      	movs	r1, #5
 8001104:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001108:	f000 fbfe 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); //określa które featury PAD będą przesyłane do hosta
 800110c:	f244 0105 	movw	r1, #16389	; 0x4005
 8001110:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8001114:	f000 fbf8 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x06); //określa co ile będzie aktualizowana lista usług, x100 ms
 8001118:	2106      	movs	r1, #6
 800111a:	f24b 3001 	movw	r0, #45825	; 0xb301
 800111e:	f000 fbf3 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x06); //określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001122:	2106      	movs	r1, #6
 8001124:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001128:	f000 fbee 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);	//tylko soft mute włączone przy slabym sygnale
 800112c:	2101      	movs	r1, #1
 800112e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001132:	f000 fbe9 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);	//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001136:	2105      	movs	r1, #5
 8001138:	f24b 5001 	movw	r0, #46337	; 0xb501
 800113c:	f000 fbe4 	bl	8001908 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); //limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001140:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001144:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001148:	f000 fbde 	bl	8001908 <Si468x_set_property>
	Si468x_dab_get_freq_list();
 800114c:	f000 fcc8 	bl	8001ae0 <Si468x_dab_get_freq_list>
	Si468x_dab_tune_freq(CH_11B);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 fd95 	bl	8001c80 <Si468x_dab_tune_freq>

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08008350 	.word	0x08008350

08001160 <Si468x_reset>:

void Si468x_reset()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001164:	2101      	movs	r1, #1
 8001166:	480a      	ldr	r0, [pc, #40]	; (8001190 <Si468x_reset+0x30>)
 8001168:	f000 fdf2 	bl	8001d50 <send_debug_msg>
	RESET_PIN_LOW;
 800116c:	2200      	movs	r2, #0
 800116e:	2120      	movs	r1, #32
 8001170:	4808      	ldr	r0, [pc, #32]	; (8001194 <Si468x_reset+0x34>)
 8001172:	f002 fd1d 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001176:	2064      	movs	r0, #100	; 0x64
 8001178:	f001 ff2e 	bl	8002fd8 <HAL_Delay>
	RESET_PIN_HIGH;
 800117c:	2201      	movs	r2, #1
 800117e:	2120      	movs	r1, #32
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <Si468x_reset+0x34>)
 8001182:	f002 fd15 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001186:	20c8      	movs	r0, #200	; 0xc8
 8001188:	f001 ff26 	bl	8002fd8 <HAL_Delay>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	080083a0 	.word	0x080083a0
 8001194:	40020800 	.word	0x40020800

08001198 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 800119c:	2101      	movs	r1, #1
 800119e:	4826      	ldr	r0, [pc, #152]	; (8001238 <Si468x_power_up+0xa0>)
 80011a0:	f000 fdd6 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <Si468x_power_up+0xa4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <Si468x_power_up+0xa4>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <Si468x_power_up+0xa4>)
 80011b2:	2217      	movs	r2, #23
 80011b4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <Si468x_power_up+0xa4>)
 80011b8:	2250      	movs	r2, #80	; 0x50
 80011ba:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <Si468x_power_up+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <Si468x_power_up+0xa4>)
 80011c4:	22f8      	movs	r2, #248	; 0xf8
 80011c6:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <Si468x_power_up+0xa4>)
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <Si468x_power_up+0xa4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <Si468x_power_up+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <Si468x_power_up+0xa4>)
 80011dc:	2210      	movs	r2, #16
 80011de:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <Si468x_power_up+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <Si468x_power_up+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <Si468x_power_up+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <Si468x_power_up+0xa4>)
 80011f4:	2228      	movs	r2, #40	; 0x28
 80011f6:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <Si468x_power_up+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <Si468x_power_up+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001204:	490d      	ldr	r1, [pc, #52]	; (800123c <Si468x_power_up+0xa4>)
 8001206:	2010      	movs	r0, #16
 8001208:	f000 fa52 	bl	80016b0 <Si468x_write_command>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <Si468x_power_up+0xa8>)
 8001212:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f001 fedf 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800121a:	490a      	ldr	r1, [pc, #40]	; (8001244 <Si468x_power_up+0xac>)
 800121c:	2005      	movs	r0, #5
 800121e:	f000 fa6f 	bl	8001700 <Si468x_read_reply>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <Si468x_power_up+0xa8>)
 8001228:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800122a:	2101      	movs	r1, #1
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <Si468x_power_up+0xb0>)
 800122e:	f000 fd8f 	bl	8001d50 <send_debug_msg>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	080083b4 	.word	0x080083b4
 800123c:	20000038 	.word	0x20000038
 8001240:	200011f4 	.word	0x200011f4
 8001244:	20001038 	.word	0x20001038
 8001248:	080083f0 	.word	0x080083f0

0800124c <Si468x_load_init>:

void Si468x_load_init()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001250:	2101      	movs	r1, #1
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <Si468x_load_init+0x44>)
 8001254:	f000 fd7c 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <Si468x_load_init+0x48>)
 800125a:	2206      	movs	r2, #6
 800125c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <Si468x_load_init+0x48>)
 8001260:	2200      	movs	r2, #0
 8001262:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001264:	490b      	ldr	r1, [pc, #44]	; (8001294 <Si468x_load_init+0x48>)
 8001266:	2002      	movs	r0, #2
 8001268:	f000 fa22 	bl	80016b0 <Si468x_write_command>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <Si468x_load_init+0x4c>)
 8001272:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f001 feaf 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <Si468x_load_init+0x50>)
 800127c:	2005      	movs	r0, #5
 800127e:	f000 fa3f 	bl	8001700 <Si468x_read_reply>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <Si468x_load_init+0x4c>)
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	08008410 	.word	0x08008410
 8001294:	20000038 	.word	0x20000038
 8001298:	200011f4 	.word	0x200011f4
 800129c:	20001038 	.word	0x20001038

080012a0 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 80012a6:	2101      	movs	r1, #1
 80012a8:	4830      	ldr	r0, [pc, #192]	; (800136c <Si468x_bootloader_load_host+0xcc>)
 80012aa:	f000 fd51 	bl	8001d50 <send_debug_msg>
	Si468x_load_init();
 80012ae:	f7ff ffcd 	bl	800124c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 80012b2:	f241 63a4 	movw	r3, #5796	; 0x16a4
 80012b6:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <Si468x_bootloader_load_host+0xd0>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <Si468x_bootloader_load_host+0xd0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <Si468x_bootloader_load_host+0xd0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <Si468x_bootloader_load_host+0xd0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	80fb      	strh	r3, [r7, #6]
 80012d4:	e03e      	b.n	8001354 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	e014      	b.n	8001306 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	4924      	ldr	r1, [pc, #144]	; (8001374 <Si468x_bootloader_load_host+0xd4>)
 80012e2:	fba1 1303 	umull	r1, r3, r1, r3
 80012e6:	085b      	lsrs	r3, r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	441a      	add	r2, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	3304      	adds	r3, #4
 80012f8:	491f      	ldr	r1, [pc, #124]	; (8001378 <Si468x_bootloader_load_host+0xd8>)
 80012fa:	5c89      	ldrb	r1, [r1, r2]
 80012fc:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <Si468x_bootloader_load_host+0xd0>)
 80012fe:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <Si468x_bootloader_load_host+0xd4>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	88ba      	ldrh	r2, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3e1      	bcc.n	80012dc <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <Si468x_bootloader_load_host+0xd4>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	3304      	adds	r3, #4
 8001326:	b29b      	uxth	r3, r3
 8001328:	4911      	ldr	r1, [pc, #68]	; (8001370 <Si468x_bootloader_load_host+0xd0>)
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f9c0 	bl	80016b0 <Si468x_write_command>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <Si468x_bootloader_load_host+0xdc>)
 8001336:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f001 fe4d 	bl	8002fd8 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800133e:	4910      	ldr	r1, [pc, #64]	; (8001380 <Si468x_bootloader_load_host+0xe0>)
 8001340:	2005      	movs	r0, #5
 8001342:	f000 f9dd 	bl	8001700 <Si468x_read_reply>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <Si468x_bootloader_load_host+0xdc>)
 800134c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	3301      	adds	r3, #1
 8001352:	80fb      	strh	r3, [r7, #6]
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d9bd      	bls.n	80012d6 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800135a:	2101      	movs	r1, #1
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <Si468x_bootloader_load_host+0xe4>)
 800135e:	f000 fcf7 	bl	8001d50 <send_debug_msg>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08008428 	.word	0x08008428
 8001370:	20000038 	.word	0x20000038
 8001374:	aaaaaaab 	.word	0xaaaaaaab
 8001378:	0800927c 	.word	0x0800927c
 800137c:	200011f4 	.word	0x200011f4
 8001380:	20001038 	.word	0x20001038
 8001384:	08008464 	.word	0x08008464

08001388 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001390:	2101      	movs	r1, #1
 8001392:	4845      	ldr	r0, [pc, #276]	; (80014a8 <Si468x_firmware_load_flash+0x120>)
 8001394:	f000 fcdc 	bl	8001d50 <send_debug_msg>
	Si468x_load_init();
 8001398:	f7ff ff58 	bl	800124c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 800139e:	2205      	movs	r2, #5
 80013a0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013ba:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013c4:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0c1b      	lsrs	r3, r3, #16
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013ce:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0e1b      	lsrs	r3, r3, #24
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013d8:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address", CRLF_SEND);
 80013da:	2101      	movs	r1, #1
 80013dc:	4834      	ldr	r0, [pc, #208]	; (80014b0 <Si468x_firmware_load_flash+0x128>)
 80013de:	f000 fcb7 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	2210      	movs	r2, #16
 80013e8:	4932      	ldr	r1, [pc, #200]	; (80014b4 <Si468x_firmware_load_flash+0x12c>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f006 ff58 	bl	80082a0 <itoa>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2101      	movs	r1, #1
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fcab 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_SEND);
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 80013fc:	795b      	ldrb	r3, [r3, #5]
 80013fe:	2210      	movs	r2, #16
 8001400:	492c      	ldr	r1, [pc, #176]	; (80014b4 <Si468x_firmware_load_flash+0x12c>)
 8001402:	4618      	mov	r0, r3
 8001404:	f006 ff4c 	bl	80082a0 <itoa>
 8001408:	4603      	mov	r3, r0
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fc9f 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_SEND);
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 8001414:	799b      	ldrb	r3, [r3, #6]
 8001416:	2210      	movs	r2, #16
 8001418:	4926      	ldr	r1, [pc, #152]	; (80014b4 <Si468x_firmware_load_flash+0x12c>)
 800141a:	4618      	mov	r0, r3
 800141c:	f006 ff40 	bl	80082a0 <itoa>
 8001420:	4603      	mov	r3, r0
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fc93 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 800142c:	79db      	ldrb	r3, [r3, #7]
 800142e:	2210      	movs	r2, #16
 8001430:	4920      	ldr	r1, [pc, #128]	; (80014b4 <Si468x_firmware_load_flash+0x12c>)
 8001432:	4618      	mov	r0, r3
 8001434:	f006 ff34 	bl	80082a0 <itoa>
 8001438:	4603      	mov	r3, r0
 800143a:	2101      	movs	r1, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fc87 	bl	8001d50 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 8001444:	2200      	movs	r2, #0
 8001446:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 800144a:	2200      	movs	r2, #0
 800144c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 8001450:	2200      	movs	r2, #0
 8001452:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 8001456:	2200      	movs	r2, #0
 8001458:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800145a:	4914      	ldr	r1, [pc, #80]	; (80014ac <Si468x_firmware_load_flash+0x124>)
 800145c:	200c      	movs	r0, #12
 800145e:	f000 f927 	bl	80016b0 <Si468x_write_command>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <Si468x_firmware_load_flash+0x130>)
 8001468:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f001 fdb4 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001470:	4912      	ldr	r1, [pc, #72]	; (80014bc <Si468x_firmware_load_flash+0x134>)
 8001472:	2005      	movs	r0, #5
 8001474:	f000 f944 	bl	8001700 <Si468x_read_reply>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <Si468x_firmware_load_flash+0x130>)
 800147e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <Si468x_firmware_load_flash+0x134>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800148c:	2101      	movs	r1, #1
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <Si468x_firmware_load_flash+0x138>)
 8001490:	f000 fc5e 	bl	8001d50 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001494:	e003      	b.n	800149e <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001496:	2101      	movs	r1, #1
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <Si468x_firmware_load_flash+0x13c>)
 800149a:	f000 fc59 	bl	8001d50 <send_debug_msg>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08008484 	.word	0x08008484
 80014ac:	20000038 	.word	0x20000038
 80014b0:	080084c0 	.word	0x080084c0
 80014b4:	200011f8 	.word	0x200011f8
 80014b8:	200011f4 	.word	0x200011f4
 80014bc:	20001038 	.word	0x20001038
 80014c0:	080084d0 	.word	0x080084d0
 80014c4:	080084e0 	.word	0x080084e0

080014c8 <Si468x_boot>:

void Si468x_boot()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014cc:	2101      	movs	r1, #1
 80014ce:	4816      	ldr	r0, [pc, #88]	; (8001528 <Si468x_boot+0x60>)
 80014d0:	f000 fc3e 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <Si468x_boot+0x64>)
 80014d6:	2207      	movs	r2, #7
 80014d8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <Si468x_boot+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014e0:	4912      	ldr	r1, [pc, #72]	; (800152c <Si468x_boot+0x64>)
 80014e2:	2002      	movs	r0, #2
 80014e4:	f000 f8e4 	bl	80016b0 <Si468x_write_command>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <Si468x_boot+0x68>)
 80014ee:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f001 fd71 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014f6:	490f      	ldr	r1, [pc, #60]	; (8001534 <Si468x_boot+0x6c>)
 80014f8:	2005      	movs	r0, #5
 80014fa:	f000 f901 	bl	8001700 <Si468x_read_reply>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Si468x_boot+0x68>)
 8001504:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <Si468x_boot+0x6c>)
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800150e:	2bc0      	cmp	r3, #192	; 0xc0
 8001510:	d104      	bne.n	800151c <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001512:	2101      	movs	r1, #1
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <Si468x_boot+0x70>)
 8001516:	f000 fc1b 	bl	8001d50 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800151a:	e003      	b.n	8001524 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 800151c:	2101      	movs	r1, #1
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <Si468x_boot+0x74>)
 8001520:	f000 fc16 	bl	8001d50 <send_debug_msg>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	080084fc 	.word	0x080084fc
 800152c:	20000038 	.word	0x20000038
 8001530:	200011f4 	.word	0x200011f4
 8001534:	20001038 	.word	0x20001038
 8001538:	08008538 	.word	0x08008538
 800153c:	08008554 	.word	0x08008554

08001540 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800154a:	1df9      	adds	r1, r7, #7
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	2201      	movs	r2, #1
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <Si468x_write_single_byte+0x20>)
 8001552:	f004 fe88 	bl	8006266 <HAL_SPI_Transmit>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200012c0 	.word	0x200012c0

08001564 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800156e:	1df9      	adds	r1, r7, #7
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	2201      	movs	r2, #1
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <Si468x_read_single_byte+0x20>)
 8001576:	f004 ffb2 	bl	80064de <HAL_SPI_Receive>
	return data_buffer;
 800157a:	79fb      	ldrb	r3, [r7, #7]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200012c0 	.word	0x200012c0

08001588 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	81fb      	strh	r3, [r7, #14]
 800159a:	e01c      	b.n	80015d6 <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 800159c:	f107 030d 	add.w	r3, r7, #13
 80015a0:	4619      	mov	r1, r3
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 f850 	bl	8001648 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da0c      	bge.n	80015ca <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015ba:	2101      	movs	r1, #1
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <Si468x_wait_for_CTS+0x68>)
 80015be:	f000 fbc7 	bl	8001d50 <send_debug_msg>
				return COMMAND_ERROR;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e010      	b.n	80015e8 <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e00e      	b.n	80015e8 <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f001 fd04 	bl	8002fd8 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	3301      	adds	r3, #1
 80015d4:	81fb      	strh	r3, [r7, #14]
 80015d6:	89fa      	ldrh	r2, [r7, #14]
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3de      	bcc.n	800159c <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015de:	2101      	movs	r1, #1
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <Si468x_wait_for_CTS+0x6c>)
 80015e2:	f000 fbb5 	bl	8001d50 <send_debug_msg>
	return TIMEOUT;
 80015e6:	2308      	movs	r3, #8
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08008568 	.word	0x08008568
 80015f4:	08008590 	.word	0x08008590

080015f8 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001608:	2200      	movs	r2, #0
 800160a:	2110      	movs	r1, #16
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <Si468x_write_multiple+0x4c>)
 800160e:	f002 facf 	bl	8003bb0 <HAL_GPIO_WritePin>
	while(len--)
 8001612:	e009      	b.n	8001628 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	81fa      	strh	r2, [r7, #14]
 800161a:	461a      	mov	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff8c 	bl	8001540 <Si468x_write_single_byte>
	while(len--)
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	80fa      	strh	r2, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001632:	2201      	movs	r2, #1
 8001634:	2110      	movs	r1, #16
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <Si468x_write_multiple+0x4c>)
 8001638:	f002 faba 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020800 	.word	0x40020800

08001648 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001658:	2201      	movs	r2, #1
 800165a:	2110      	movs	r1, #16
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <Si468x_read_multiple+0x64>)
 800165e:	f002 faa7 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001662:	2003      	movs	r0, #3
 8001664:	f001 fcb8 	bl	8002fd8 <HAL_Delay>
	CS_PIN_LOW;
 8001668:	2200      	movs	r2, #0
 800166a:	2110      	movs	r1, #16
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <Si468x_read_multiple+0x64>)
 800166e:	f002 fa9f 	bl	8003bb0 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff ff64 	bl	8001540 <Si468x_write_single_byte>
	while(len--)
 8001678:	e009      	b.n	800168e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	81fa      	strh	r2, [r7, #14]
 8001680:	461a      	mov	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	189c      	adds	r4, r3, r2
 8001686:	f7ff ff6d 	bl	8001564 <Si468x_read_single_byte>
 800168a:	4603      	mov	r3, r0
 800168c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	80fa      	strh	r2, [r7, #6]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001698:	2201      	movs	r2, #1
 800169a:	2110      	movs	r1, #16
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <Si468x_read_multiple+0x64>)
 800169e:	f002 fa87 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020800 	.word	0x40020800

080016b0 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c0:	f7ff ff62 	bl	8001588 <Si468x_wait_for_CTS>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <Si468x_write_command+0x24>
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d10a      	bne.n	80016ea <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff8d 	bl	80015f8 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e2:	f7ff ff51 	bl	8001588 <Si468x_wait_for_CTS>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
	}
	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
 80016ea:	2101      	movs	r1, #1
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <Si468x_write_command+0x4c>)
 80016ee:	f000 fb2f 	bl	8001d50 <send_debug_msg>
	return ret;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	080085a0 	.word	0x080085a0

08001700 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff99 	bl	8001648 <Si468x_read_multiple>
	return SUCCESS;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001724:	2101      	movs	r1, #1
 8001726:	4833      	ldr	r0, [pc, #204]	; (80017f4 <Si468x_get_sys_state+0xd4>)
 8001728:	f000 fb12 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <Si468x_get_sys_state+0xd8>)
 800172e:	2209      	movs	r2, #9
 8001730:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <Si468x_get_sys_state+0xd8>)
 8001734:	2200      	movs	r2, #0
 8001736:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001738:	492f      	ldr	r1, [pc, #188]	; (80017f8 <Si468x_get_sys_state+0xd8>)
 800173a:	2002      	movs	r0, #2
 800173c:	f7ff ffb8 	bl	80016b0 <Si468x_write_command>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <Si468x_get_sys_state+0xdc>)
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f001 fc45 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800174e:	492c      	ldr	r1, [pc, #176]	; (8001800 <Si468x_get_sys_state+0xe0>)
 8001750:	2005      	movs	r0, #5
 8001752:	f7ff ffd5 	bl	8001700 <Si468x_read_reply>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <Si468x_get_sys_state+0xdc>)
 800175c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800175e:	2100      	movs	r1, #0
 8001760:	4828      	ldr	r0, [pc, #160]	; (8001804 <Si468x_get_sys_state+0xe4>)
 8001762:	f000 faf5 	bl	8001d50 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <Si468x_get_sys_state+0xe0>)
 8001768:	791b      	ldrb	r3, [r3, #4]
 800176a:	2b07      	cmp	r3, #7
 800176c:	d83a      	bhi.n	80017e4 <Si468x_get_sys_state+0xc4>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <Si468x_get_sys_state+0x54>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	08001795 	.word	0x08001795
 8001778:	0800179f 	.word	0x0800179f
 800177c:	080017a9 	.word	0x080017a9
 8001780:	080017b3 	.word	0x080017b3
 8001784:	080017bd 	.word	0x080017bd
 8001788:	080017c7 	.word	0x080017c7
 800178c:	080017d1 	.word	0x080017d1
 8001790:	080017db 	.word	0x080017db
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001794:	2101      	movs	r1, #1
 8001796:	481c      	ldr	r0, [pc, #112]	; (8001808 <Si468x_get_sys_state+0xe8>)
 8001798:	f000 fada 	bl	8001d50 <send_debug_msg>
			break;
 800179c:	e027      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800179e:	2101      	movs	r1, #1
 80017a0:	481a      	ldr	r0, [pc, #104]	; (800180c <Si468x_get_sys_state+0xec>)
 80017a2:	f000 fad5 	bl	8001d50 <send_debug_msg>
			break;
 80017a6:	e022      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4819      	ldr	r0, [pc, #100]	; (8001810 <Si468x_get_sys_state+0xf0>)
 80017ac:	f000 fad0 	bl	8001d50 <send_debug_msg>
			break;
 80017b0:	e01d      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017b2:	2101      	movs	r1, #1
 80017b4:	4817      	ldr	r0, [pc, #92]	; (8001814 <Si468x_get_sys_state+0xf4>)
 80017b6:	f000 facb 	bl	8001d50 <send_debug_msg>
			break;
 80017ba:	e018      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017bc:	2101      	movs	r1, #1
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <Si468x_get_sys_state+0xf8>)
 80017c0:	f000 fac6 	bl	8001d50 <send_debug_msg>
			break;
 80017c4:	e013      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017c6:	2101      	movs	r1, #1
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <Si468x_get_sys_state+0xfc>)
 80017ca:	f000 fac1 	bl	8001d50 <send_debug_msg>
			break;
 80017ce:	e00e      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017d0:	2101      	movs	r1, #1
 80017d2:	4813      	ldr	r0, [pc, #76]	; (8001820 <Si468x_get_sys_state+0x100>)
 80017d4:	f000 fabc 	bl	8001d50 <send_debug_msg>
			break;
 80017d8:	e009      	b.n	80017ee <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017da:	2101      	movs	r1, #1
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <Si468x_get_sys_state+0x104>)
 80017de:	f000 fab7 	bl	8001d50 <send_debug_msg>
			break;
 80017e2:	e004      	b.n	80017ee <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 80017e4:	2101      	movs	r1, #1
 80017e6:	4808      	ldr	r0, [pc, #32]	; (8001808 <Si468x_get_sys_state+0xe8>)
 80017e8:	f000 fab2 	bl	8001d50 <send_debug_msg>
			break;
 80017ec:	bf00      	nop
	}
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	080085bc 	.word	0x080085bc
 80017f8:	20000038 	.word	0x20000038
 80017fc:	200011f4 	.word	0x200011f4
 8001800:	20001038 	.word	0x20001038
 8001804:	080085f8 	.word	0x080085f8
 8001808:	08008604 	.word	0x08008604
 800180c:	0800861c 	.word	0x0800861c
 8001810:	08008634 	.word	0x08008634
 8001814:	0800864c 	.word	0x0800864c
 8001818:	08008674 	.word	0x08008674
 800181c:	08008690 	.word	0x08008690
 8001820:	080086a8 	.word	0x080086a8
 8001824:	080086c4 	.word	0x080086c4

08001828 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800182e:	2101      	movs	r1, #1
 8001830:	482d      	ldr	r0, [pc, #180]	; (80018e8 <Si468x_get_part_info+0xc0>)
 8001832:	f000 fa8d 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <Si468x_get_part_info+0xc4>)
 8001838:	2208      	movs	r2, #8
 800183a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <Si468x_get_part_info+0xc4>)
 800183e:	2200      	movs	r2, #0
 8001840:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001842:	492a      	ldr	r1, [pc, #168]	; (80018ec <Si468x_get_part_info+0xc4>)
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff ff33 	bl	80016b0 <Si468x_write_command>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <Si468x_get_part_info+0xc8>)
 8001850:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f001 fbc0 	bl	8002fd8 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fe71 	bl	8001540 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800185e:	4925      	ldr	r1, [pc, #148]	; (80018f4 <Si468x_get_part_info+0xcc>)
 8001860:	200a      	movs	r0, #10
 8001862:	f7ff ff4d 	bl	8001700 <Si468x_read_reply>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <Si468x_get_part_info+0xc8>)
 800186c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800186e:	2100      	movs	r1, #0
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <Si468x_get_part_info+0xd0>)
 8001872:	f000 fa6d 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <Si468x_get_part_info+0xcc>)
 8001878:	791b      	ldrb	r3, [r3, #4]
 800187a:	220a      	movs	r2, #10
 800187c:	491f      	ldr	r1, [pc, #124]	; (80018fc <Si468x_get_part_info+0xd4>)
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fd0e 	bl	80082a0 <itoa>
 8001884:	4603      	mov	r3, r0
 8001886:	2101      	movs	r1, #1
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fa61 	bl	8001d50 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 800188e:	2100      	movs	r1, #0
 8001890:	481b      	ldr	r0, [pc, #108]	; (8001900 <Si468x_get_part_info+0xd8>)
 8001892:	f000 fa5d 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <Si468x_get_part_info+0xcc>)
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	220a      	movs	r2, #10
 800189c:	4917      	ldr	r1, [pc, #92]	; (80018fc <Si468x_get_part_info+0xd4>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 fcfe 	bl	80082a0 <itoa>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fa51 	bl	8001d50 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018ae:	2100      	movs	r1, #0
 80018b0:	4814      	ldr	r0, [pc, #80]	; (8001904 <Si468x_get_part_info+0xdc>)
 80018b2:	f000 fa4d 	bl	8001d50 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <Si468x_get_part_info+0xcc>)
 80018b8:	7a5b      	ldrb	r3, [r3, #9]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <Si468x_get_part_info+0xcc>)
 80018c2:	7a1b      	ldrb	r3, [r3, #8]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	220a      	movs	r2, #10
 80018ce:	490b      	ldr	r1, [pc, #44]	; (80018fc <Si468x_get_part_info+0xd4>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f006 fce5 	bl	80082a0 <itoa>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fa38 	bl	8001d50 <send_debug_msg>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	080086dc 	.word	0x080086dc
 80018ec:	20000038 	.word	0x20000038
 80018f0:	200011f4 	.word	0x200011f4
 80018f4:	20001038 	.word	0x20001038
 80018f8:	08008718 	.word	0x08008718
 80018fc:	200011f8 	.word	0x200011f8
 8001900:	08008728 	.word	0x08008728
 8001904:	08008734 	.word	0x08008734

08001908 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	80fb      	strh	r3, [r7, #6]
 8001914:	4613      	mov	r3, r2
 8001916:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001918:	2101      	movs	r1, #1
 800191a:	4832      	ldr	r0, [pc, #200]	; (80019e4 <Si468x_set_property+0xdc>)
 800191c:	f000 fa18 	bl	8001d50 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001920:	2100      	movs	r1, #0
 8001922:	4831      	ldr	r0, [pc, #196]	; (80019e8 <Si468x_set_property+0xe0>)
 8001924:	f000 fa14 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	2210      	movs	r2, #16
 800192c:	492f      	ldr	r1, [pc, #188]	; (80019ec <Si468x_set_property+0xe4>)
 800192e:	4618      	mov	r0, r3
 8001930:	f006 fcb6 	bl	80082a0 <itoa>
 8001934:	4603      	mov	r3, r0
 8001936:	2101      	movs	r1, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fa09 	bl	8001d50 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800193e:	2100      	movs	r1, #0
 8001940:	482b      	ldr	r0, [pc, #172]	; (80019f0 <Si468x_set_property+0xe8>)
 8001942:	f000 fa05 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001946:	88bb      	ldrh	r3, [r7, #4]
 8001948:	2210      	movs	r2, #16
 800194a:	4928      	ldr	r1, [pc, #160]	; (80019ec <Si468x_set_property+0xe4>)
 800194c:	4618      	mov	r0, r3
 800194e:	f006 fca7 	bl	80082a0 <itoa>
 8001952:	4603      	mov	r3, r0
 8001954:	2101      	movs	r1, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f9fa 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <Si468x_set_property+0xec>)
 800195e:	2213      	movs	r2, #19
 8001960:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <Si468x_set_property+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <Si468x_set_property+0xec>)
 800196e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <Si468x_set_property+0xec>)
 800197a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <Si468x_set_property+0xec>)
 8001982:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <Si468x_set_property+0xec>)
 800198e:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001990:	4918      	ldr	r1, [pc, #96]	; (80019f4 <Si468x_set_property+0xec>)
 8001992:	2006      	movs	r0, #6
 8001994:	f7ff fe8c 	bl	80016b0 <Si468x_write_command>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <Si468x_set_property+0xf0>)
 800199e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f001 fb19 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80019a6:	4915      	ldr	r1, [pc, #84]	; (80019fc <Si468x_set_property+0xf4>)
 80019a8:	2005      	movs	r0, #5
 80019aa:	f7ff fea9 	bl	8001700 <Si468x_read_reply>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <Si468x_set_property+0xf0>)
 80019b4:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f825 	bl	8001a08 <Si468x_get_property>
 80019be:	4603      	mov	r3, r0
 80019c0:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019c2:	89fa      	ldrh	r2, [r7, #14]
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d104      	bne.n	80019d4 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019ca:	2101      	movs	r1, #1
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <Si468x_set_property+0xf8>)
 80019ce:	f000 f9bf 	bl	8001d50 <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 80019d2:	e003      	b.n	80019dc <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019d4:	2101      	movs	r1, #1
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <Si468x_set_property+0xfc>)
 80019d8:	f000 f9ba 	bl	8001d50 <send_debug_msg>
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	08008744 	.word	0x08008744
 80019e8:	08008784 	.word	0x08008784
 80019ec:	200011f8 	.word	0x200011f8
 80019f0:	08008794 	.word	0x08008794
 80019f4:	20000038 	.word	0x20000038
 80019f8:	200011f4 	.word	0x200011f4
 80019fc:	20001038 	.word	0x20001038
 8001a00:	080087b0 	.word	0x080087b0
 8001a04:	080087cc 	.word	0x080087cc

08001a08 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a12:	2101      	movs	r1, #1
 8001a14:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <Si468x_get_property+0xbc>)
 8001a16:	f000 f99b 	bl	8001d50 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	482a      	ldr	r0, [pc, #168]	; (8001ac8 <Si468x_get_property+0xc0>)
 8001a1e:	f000 f997 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	2210      	movs	r2, #16
 8001a26:	4929      	ldr	r1, [pc, #164]	; (8001acc <Si468x_get_property+0xc4>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fc39 	bl	80082a0 <itoa>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f98c 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <Si468x_get_property+0xc8>)
 8001a3a:	2214      	movs	r2, #20
 8001a3c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <Si468x_get_property+0xc8>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <Si468x_get_property+0xc8>)
 8001a4a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <Si468x_get_property+0xc8>)
 8001a56:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a58:	491d      	ldr	r1, [pc, #116]	; (8001ad0 <Si468x_get_property+0xc8>)
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f7ff fe28 	bl	80016b0 <Si468x_write_command>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <Si468x_get_property+0xcc>)
 8001a66:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f001 fab5 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a6e:	491a      	ldr	r1, [pc, #104]	; (8001ad8 <Si468x_get_property+0xd0>)
 8001a70:	2006      	movs	r0, #6
 8001a72:	f7ff fe45 	bl	8001700 <Si468x_read_reply>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <Si468x_get_property+0xcc>)
 8001a7c:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <Si468x_get_property+0xd4>)
 8001a82:	f000 f965 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <Si468x_get_property+0xd0>)
 8001a88:	795b      	ldrb	r3, [r3, #5]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <Si468x_get_property+0xd0>)
 8001a8e:	7912      	ldrb	r2, [r2, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	2210      	movs	r2, #16
 8001a94:	490d      	ldr	r1, [pc, #52]	; (8001acc <Si468x_get_property+0xc4>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 fc02 	bl	80082a0 <itoa>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f955 	bl	8001d50 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <Si468x_get_property+0xd0>)
 8001aa8:	795b      	ldrb	r3, [r3, #5]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <Si468x_get_property+0xd0>)
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	080087e4 	.word	0x080087e4
 8001ac8:	08008784 	.word	0x08008784
 8001acc:	200011f8 	.word	0x200011f8
 8001ad0:	20000038 	.word	0x20000038
 8001ad4:	200011f4 	.word	0x200011f4
 8001ad8:	20001038 	.word	0x20001038
 8001adc:	08008820 	.word	0x08008820

08001ae0 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4859      	ldr	r0, [pc, #356]	; (8001c50 <Si468x_dab_get_freq_list+0x170>)
 8001aea:	f000 f931 	bl	8001d50 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <Si468x_dab_get_freq_list+0x174>)
 8001af0:	22b9      	movs	r2, #185	; 0xb9
 8001af2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <Si468x_dab_get_freq_list+0x174>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001afa:	4956      	ldr	r1, [pc, #344]	; (8001c54 <Si468x_dab_get_freq_list+0x174>)
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff fdd7 	bl	80016b0 <Si468x_write_command>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <Si468x_dab_get_freq_list+0x178>)
 8001b08:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f001 fa64 	bl	8002fd8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b10:	4952      	ldr	r1, [pc, #328]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001b12:	2005      	movs	r0, #5
 8001b14:	f7ff fdf4 	bl	8001700 <Si468x_read_reply>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <Si468x_dab_get_freq_list+0x178>)
 8001b1e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	484c      	ldr	r0, [pc, #304]	; (8001c60 <Si468x_dab_get_freq_list+0x180>)
 8001b30:	f000 f90e 	bl	8001d50 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b34:	e087      	b.n	8001c46 <Si468x_dab_get_freq_list+0x166>
		if(dab_spi_rx_buffer[4])
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d07f      	beq.n	8001c3e <Si468x_dab_get_freq_list+0x15e>
			uint8_t read_offset = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	70fb      	strb	r3, [r7, #3]
			uint8_t freq_cnt = dab_spi_rx_buffer[4];
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	70bb      	strb	r3, [r7, #2]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4846      	ldr	r0, [pc, #280]	; (8001c64 <Si468x_dab_get_freq_list+0x184>)
 8001b4c:	f000 f900 	bl	8001d50 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b50:	78bb      	ldrb	r3, [r7, #2]
 8001b52:	220a      	movs	r2, #10
 8001b54:	4944      	ldr	r1, [pc, #272]	; (8001c68 <Si468x_dab_get_freq_list+0x188>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fba2 	bl	80082a0 <itoa>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f8f5 	bl	8001d50 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b66:	2101      	movs	r1, #1
 8001b68:	4840      	ldr	r0, [pc, #256]	; (8001c6c <Si468x_dab_get_freq_list+0x18c>)
 8001b6a:	f000 f8f1 	bl	8001d50 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b6e:	493b      	ldr	r1, [pc, #236]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001b70:	2003      	movs	r0, #3
 8001b72:	f7ff fdc5 	bl	8001700 <Si468x_read_reply>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <Si468x_dab_get_freq_list+0x178>)
 8001b7c:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001b7e:	78ba      	ldrb	r2, [r7, #2]
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	4413      	add	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fdb7 	bl	8001700 <Si468x_read_reply>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <Si468x_dab_get_freq_list+0x178>)
 8001b98:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e049      	b.n	8001c34 <Si468x_dab_get_freq_list+0x154>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	4619      	mov	r1, r3
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	18ca      	adds	r2, r1, r3
 8001bc0:	78f9      	ldrb	r1, [r7, #3]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	440b      	add	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	4924      	ldr	r1, [pc, #144]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	441a      	add	r2, r3
 8001bd2:	78f9      	ldrb	r1, [r7, #3]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3303      	adds	r3, #3
 8001bdc:	491f      	ldr	r1, [pc, #124]	; (8001c5c <Si468x_dab_get_freq_list+0x17c>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	4413      	add	r3, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <Si468x_dab_get_freq_list+0x190>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001bee:	220a      	movs	r2, #10
 8001bf0:	491d      	ldr	r1, [pc, #116]	; (8001c68 <Si468x_dab_get_freq_list+0x188>)
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f006 fb54 	bl	80082a0 <itoa>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f8a7 	bl	8001d50 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c02:	2100      	movs	r1, #0
 8001c04:	481b      	ldr	r0, [pc, #108]	; (8001c74 <Si468x_dab_get_freq_list+0x194>)
 8001c06:	f000 f8a3 	bl	8001d50 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c0a:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <Si468x_dab_get_freq_list+0x190>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	220a      	movs	r2, #10
 8001c14:	4914      	ldr	r1, [pc, #80]	; (8001c68 <Si468x_dab_get_freq_list+0x188>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f006 fb42 	bl	80082a0 <itoa>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f895 	bl	8001d50 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c26:	2101      	movs	r1, #1
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <Si468x_dab_get_freq_list+0x198>)
 8001c2a:	f000 f891 	bl	8001d50 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3301      	adds	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	78bb      	ldrb	r3, [r7, #2]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbb1      	blt.n	8001ba0 <Si468x_dab_get_freq_list+0xc0>
}
 8001c3c:	e003      	b.n	8001c46 <Si468x_dab_get_freq_list+0x166>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	480e      	ldr	r0, [pc, #56]	; (8001c7c <Si468x_dab_get_freq_list+0x19c>)
 8001c42:	f000 f885 	bl	8001d50 <send_debug_msg>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08008834 	.word	0x08008834
 8001c54:	20000038 	.word	0x20000038
 8001c58:	200011f4 	.word	0x200011f4
 8001c5c:	20001038 	.word	0x20001038
 8001c60:	080084d0 	.word	0x080084d0
 8001c64:	08008870 	.word	0x08008870
 8001c68:	200011f8 	.word	0x200011f8
 8001c6c:	08008878 	.word	0x08008878
 8001c70:	20001138 	.word	0x20001138
 8001c74:	08008890 	.word	0x08008890
 8001c78:	08008894 	.word	0x08008894
 8001c7c:	0800889c 	.word	0x0800889c

08001c80 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4826      	ldr	r0, [pc, #152]	; (8001d28 <Si468x_dab_tune_freq+0xa8>)
 8001c8e:	f000 f85f 	bl	8001d50 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001c92:	2100      	movs	r1, #0
 8001c94:	4825      	ldr	r0, [pc, #148]	; (8001d2c <Si468x_dab_tune_freq+0xac>)
 8001c96:	f000 f85b 	bl	8001d50 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <Si468x_dab_tune_freq+0xb0>)
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	220a      	movs	r2, #10
 8001ca4:	4923      	ldr	r1, [pc, #140]	; (8001d34 <Si468x_dab_tune_freq+0xb4>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 fafa 	bl	80082a0 <itoa>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f84d 	bl	8001d50 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	481f      	ldr	r0, [pc, #124]	; (8001d38 <Si468x_dab_tune_freq+0xb8>)
 8001cba:	f000 f849 	bl	8001d50 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001cc0:	22b0      	movs	r2, #176	; 0xb0
 8001cc2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001ce2:	4916      	ldr	r1, [pc, #88]	; (8001d3c <Si468x_dab_tune_freq+0xbc>)
 8001ce4:	2006      	movs	r0, #6
 8001ce6:	f7ff fce3 	bl	80016b0 <Si468x_write_command>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <Si468x_dab_tune_freq+0xc0>)
 8001cf0:	701a      	strb	r2, [r3, #0]
//	HAL_Delay(200);
	status = Si468x_read_reply(4, dab_spi_rx_buffer);
 8001cf2:	4914      	ldr	r1, [pc, #80]	; (8001d44 <Si468x_dab_tune_freq+0xc4>)
 8001cf4:	2004      	movs	r0, #4
 8001cf6:	f7ff fd03 	bl	8001700 <Si468x_read_reply>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <Si468x_dab_tune_freq+0xc0>)
 8001d00:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <Si468x_dab_tune_freq+0xc4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <Si468x_dab_tune_freq+0x98>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <Si468x_dab_tune_freq+0xc8>)
 8001d12:	f000 f81d 	bl	8001d50 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Successfully tuned to selected frequency.", CRLF_SEND);
	}
}
 8001d16:	e003      	b.n	8001d20 <Si468x_dab_tune_freq+0xa0>
		send_debug_msg("Successfully tuned to selected frequency.", CRLF_SEND);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <Si468x_dab_tune_freq+0xcc>)
 8001d1c:	f000 f818 	bl	8001d50 <send_debug_msg>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	080088b8 	.word	0x080088b8
 8001d2c:	080088f4 	.word	0x080088f4
 8001d30:	20001138 	.word	0x20001138
 8001d34:	200011f8 	.word	0x200011f8
 8001d38:	08008894 	.word	0x08008894
 8001d3c:	20000038 	.word	0x20000038
 8001d40:	200011f4 	.word	0x200011f4
 8001d44:	20001038 	.word	0x20001038
 8001d48:	080084d0 	.word	0x080084d0
 8001d4c:	08008900 	.word	0x08008900

08001d50 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7fe fa33 	bl	80001c8 <strlen>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	480a      	ldr	r0, [pc, #40]	; (8001d98 <send_debug_msg+0x48>)
 8001d70:	f005 fee5 	bl	8007b3e <HAL_UART_Transmit>

	if(is_crlf)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8001d7a:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001d7e:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8001d80:	f107 010c 	add.w	r1, r7, #12
 8001d84:	2364      	movs	r3, #100	; 0x64
 8001d86:	2202      	movs	r2, #2
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <send_debug_msg+0x48>)
 8001d8a:	f005 fed8 	bl	8007b3e <HAL_UART_Transmit>
	}
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200014ec 	.word	0x200014ec

08001d9c <DisplayMainScreen>:
#include "Si468x.h"

char char_buffer[32];

void DisplayMainScreen()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7fe fd84 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 8001da8:	23eb      	movs	r3, #235	; 0xeb
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f240 133b 	movw	r3, #315	; 0x13b
 8001db0:	2219      	movs	r2, #25
 8001db2:	2105      	movs	r1, #5
 8001db4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001db8:	f7fe fe05 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	4b85      	ldr	r3, [pc, #532]	; (8001fd8 <DisplayMainScreen+0x23c>)
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	2105      	movs	r1, #5
 8001dcc:	2041      	movs	r0, #65	; 0x41
 8001dce:	f7fe fea7 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 8001dd2:	233c      	movs	r3, #60	; 0x3c
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	f240 1331 	movw	r3, #305	; 0x131
 8001dda:	2223      	movs	r2, #35	; 0x23
 8001ddc:	210f      	movs	r1, #15
 8001dde:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001de2:	f7fe fdf0 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 8001de6:	235f      	movs	r3, #95	; 0x5f
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	f240 1331 	movw	r3, #305	; 0x131
 8001dee:	2246      	movs	r2, #70	; 0x46
 8001df0:	210f      	movs	r1, #15
 8001df2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001df6:	f7fe fde6 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 8001dfa:	23a0      	movs	r3, #160	; 0xa0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2369      	movs	r3, #105	; 0x69
 8001e00:	226e      	movs	r2, #110	; 0x6e
 8001e02:	210f      	movs	r1, #15
 8001e04:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001e08:	f7fe fddd 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8001e0c:	239f      	movs	r3, #159	; 0x9f
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2368      	movs	r3, #104	; 0x68
 8001e12:	226f      	movs	r2, #111	; 0x6f
 8001e14:	2110      	movs	r1, #16
 8001e16:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e1a:	f7fe fdb3 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8001e1e:	2302      	movs	r3, #2
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	4b6e      	ldr	r3, [pc, #440]	; (8001fdc <DisplayMainScreen+0x240>)
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e2e:	217f      	movs	r1, #127	; 0x7f
 8001e30:	2023      	movs	r0, #35	; 0x23
 8001e32:	f7fe fe75 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 8001e36:	23a0      	movs	r3, #160	; 0xa0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	23cd      	movs	r3, #205	; 0xcd
 8001e3c:	226e      	movs	r2, #110	; 0x6e
 8001e3e:	2173      	movs	r1, #115	; 0x73
 8001e40:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001e44:	f7fe fdbf 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8001e48:	239f      	movs	r3, #159	; 0x9f
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	23cc      	movs	r3, #204	; 0xcc
 8001e4e:	226f      	movs	r2, #111	; 0x6f
 8001e50:	2174      	movs	r1, #116	; 0x74
 8001e52:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e56:	f7fe fd95 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <DisplayMainScreen+0x244>)
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6a:	217f      	movs	r1, #127	; 0x7f
 8001e6c:	2090      	movs	r0, #144	; 0x90
 8001e6e:	f7fe fe57 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 8001e72:	23a0      	movs	r3, #160	; 0xa0
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	f240 1331 	movw	r3, #305	; 0x131
 8001e7a:	226e      	movs	r2, #110	; 0x6e
 8001e7c:	21d7      	movs	r1, #215	; 0xd7
 8001e7e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001e82:	f7fe fda0 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 8001e86:	239f      	movs	r3, #159	; 0x9f
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001e8e:	226f      	movs	r2, #111	; 0x6f
 8001e90:	21d8      	movs	r1, #216	; 0xd8
 8001e92:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e96:	f7fe fd75 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <DisplayMainScreen+0x248>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eaa:	217f      	movs	r1, #127	; 0x7f
 8001eac:	20ea      	movs	r0, #234	; 0xea
 8001eae:	f7fe fe37 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 8001eb2:	23dc      	movs	r3, #220	; 0xdc
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2369      	movs	r3, #105	; 0x69
 8001eb8:	22aa      	movs	r2, #170	; 0xaa
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001ec0:	f7fe fd81 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 8001ec4:	23db      	movs	r3, #219	; 0xdb
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2368      	movs	r3, #104	; 0x68
 8001eca:	22ab      	movs	r2, #171	; 0xab
 8001ecc:	2110      	movs	r1, #16
 8001ece:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ed2:	f7fe fd57 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <DisplayMainScreen+0x24c>)
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee6:	21bb      	movs	r1, #187	; 0xbb
 8001ee8:	202d      	movs	r0, #45	; 0x2d
 8001eea:	f7fe fe19 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 8001eee:	23dc      	movs	r3, #220	; 0xdc
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	23cd      	movs	r3, #205	; 0xcd
 8001ef4:	22aa      	movs	r2, #170	; 0xaa
 8001ef6:	2173      	movs	r1, #115	; 0x73
 8001ef8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001efc:	f7fe fd63 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8001f00:	23db      	movs	r3, #219	; 0xdb
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	23cc      	movs	r3, #204	; 0xcc
 8001f06:	22ab      	movs	r2, #171	; 0xab
 8001f08:	2174      	movs	r1, #116	; 0x74
 8001f0a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f0e:	f7fe fd39 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 8001f12:	2302      	movs	r3, #2
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <DisplayMainScreen+0x250>)
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f22:	21b4      	movs	r1, #180	; 0xb4
 8001f24:	2081      	movs	r0, #129	; 0x81
 8001f26:	f7fe fdfb 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <DisplayMainScreen+0x254>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3a:	21c3      	movs	r1, #195	; 0xc3
 8001f3c:	2084      	movs	r0, #132	; 0x84
 8001f3e:	f7fe fdef 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 8001f42:	23dc      	movs	r3, #220	; 0xdc
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f240 1331 	movw	r3, #305	; 0x131
 8001f4a:	22aa      	movs	r2, #170	; 0xaa
 8001f4c:	21d7      	movs	r1, #215	; 0xd7
 8001f4e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001f52:	f7fe fd38 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 8001f56:	23db      	movs	r3, #219	; 0xdb
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001f5e:	22ab      	movs	r2, #171	; 0xab
 8001f60:	21d8      	movs	r1, #216	; 0xd8
 8001f62:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f66:	f7fe fd0d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <DisplayMainScreen+0x258>)
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7a:	21b4      	movs	r1, #180	; 0xb4
 8001f7c:	20f5      	movs	r0, #245	; 0xf5
 8001f7e:	f7fe fdcf 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 8001f82:	2302      	movs	r3, #2
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <DisplayMainScreen+0x254>)
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f92:	21c3      	movs	r1, #195	; 0xc3
 8001f94:	20e8      	movs	r0, #232	; 0xe8
 8001f96:	f7fe fdc3 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 75, WHITE, BLACK, "Status:" , 2);
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <DisplayMainScreen+0x25c>)
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa8:	214b      	movs	r1, #75	; 0x4b
 8001faa:	2014      	movs	r0, #20
 8001fac:	f7fe fdb8 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 75, WHITE, BLACK, "/", 2);
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <DisplayMainScreen+0x260>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fbe:	214b      	movs	r1, #75	; 0x4b
 8001fc0:	20f0      	movs	r0, #240	; 0xf0
 8001fc2:	f7fe fdad 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <DisplayMainScreen+0x264>)
 8001fce:	f001 fdef 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	0800892c 	.word	0x0800892c
 8001fdc:	08008940 	.word	0x08008940
 8001fe0:	08008948 	.word	0x08008948
 8001fe4:	08008950 	.word	0x08008950
 8001fe8:	08008958 	.word	0x08008958
 8001fec:	08008960 	.word	0x08008960
 8001ff0:	0800896c 	.word	0x0800896c
 8001ff4:	08008974 	.word	0x08008974
 8001ff8:	0800897c 	.word	0x0800897c
 8001ffc:	08008984 	.word	0x08008984
 8002000:	40020c00 	.word	0x40020c00

08002004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_DMA_Init+0x3c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <MX_DMA_Init+0x3c>)
 8002014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_DMA_Init+0x3c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	200f      	movs	r0, #15
 800202c:	f001 f8d3 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002030:	200f      	movs	r0, #15
 8002032:	f001 f8ec 	bl	800320e <HAL_NVIC_EnableIRQ>

}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a64      	ldr	r2, [pc, #400]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	4b5e      	ldr	r3, [pc, #376]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a41      	ldr	r2, [pc, #260]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <MX_GPIO_Init+0x1b0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2130      	movs	r1, #48	; 0x30
 8002106:	483c      	ldr	r0, [pc, #240]	; (80021f8 <MX_GPIO_Init+0x1b4>)
 8002108:	f001 fd52 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002112:	483a      	ldr	r0, [pc, #232]	; (80021fc <MX_GPIO_Init+0x1b8>)
 8002114:	f001 fd4c 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8002118:	2200      	movs	r2, #0
 800211a:	f24f 7180 	movw	r1, #63360	; 0xf780
 800211e:	4838      	ldr	r0, [pc, #224]	; (8002200 <MX_GPIO_Init+0x1bc>)
 8002120:	f001 fd46 	bl	8003bb0 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	2128      	movs	r1, #40	; 0x28
 8002128:	4836      	ldr	r0, [pc, #216]	; (8002204 <MX_GPIO_Init+0x1c0>)
 800212a:	f001 fd41 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 800212e:	2310      	movs	r3, #16
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4831      	ldr	r0, [pc, #196]	; (8002208 <MX_GPIO_Init+0x1c4>)
 8002142:	f001 fb99 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8002146:	2330      	movs	r3, #48	; 0x30
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	4826      	ldr	r0, [pc, #152]	; (80021f8 <MX_GPIO_Init+0x1b4>)
 800215e:	f001 fb8b 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8002162:	2311      	movs	r3, #17
 8002164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	4823      	ldr	r0, [pc, #140]	; (8002204 <MX_GPIO_Init+0x1c0>)
 8002176:	f001 fb7f 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	481a      	ldr	r0, [pc, #104]	; (80021fc <MX_GPIO_Init+0x1b8>)
 8002194:	f001 fb70 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8002198:	f24f 7380 	movw	r3, #63360	; 0xf780
 800219c:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4619      	mov	r1, r3
 80021b0:	4813      	ldr	r0, [pc, #76]	; (8002200 <MX_GPIO_Init+0x1bc>)
 80021b2:	f001 fb61 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80021b6:	2340      	movs	r3, #64	; 0x40
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_GPIO_Init+0x1bc>)
 80021ca:	f001 fb55 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80021ce:	2328      	movs	r3, #40	; 0x28
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_GPIO_Init+0x1c0>)
 80021e6:	f001 fb47 	bl	8003878 <HAL_GPIO_Init>

}
 80021ea:	bf00      	nop
 80021ec:	3730      	adds	r7, #48	; 0x30
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40021000 	.word	0x40021000
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40020400 	.word	0x40020400
 8002208:	40020000 	.word	0x40020000

0800220c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MX_I2C1_Init+0x50>)
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <MX_I2C1_Init+0x54>)
 8002214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_I2C1_Init+0x50>)
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <MX_I2C1_Init+0x58>)
 800221a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_I2C1_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_I2C1_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_I2C1_Init+0x50>)
 800222a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <MX_I2C1_Init+0x50>)
 8002232:	2200      	movs	r2, #0
 8002234:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_I2C1_Init+0x50>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <MX_I2C1_Init+0x50>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_I2C1_Init+0x50>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_I2C1_Init+0x50>)
 800224a:	f001 fccb 	bl	8003be4 <HAL_I2C_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002254:	f000 fa10 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20001218 	.word	0x20001218
 8002260:	40005400 	.word	0x40005400
 8002264:	000186a0 	.word	0x000186a0

08002268 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <MX_I2C3_Init+0x50>)
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <MX_I2C3_Init+0x54>)
 8002270:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_I2C3_Init+0x50>)
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_I2C3_Init+0x58>)
 8002276:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <MX_I2C3_Init+0x50>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_I2C3_Init+0x50>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_I2C3_Init+0x50>)
 8002286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <MX_I2C3_Init+0x50>)
 800228e:	2200      	movs	r2, #0
 8002290:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_I2C3_Init+0x50>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <MX_I2C3_Init+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_I2C3_Init+0x50>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <MX_I2C3_Init+0x50>)
 80022a6:	f001 fc9d 	bl	8003be4 <HAL_I2C_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022b0:	f000 f9e2 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000126c 	.word	0x2000126c
 80022bc:	40005c00 	.word	0x40005c00
 80022c0:	000186a0 	.word	0x000186a0

080022c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	; 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_I2C_MspInit+0x148>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12c      	bne.n	8002340 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a48      	ldr	r2, [pc, #288]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8002302:	23c0      	movs	r3, #192	; 0xc0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002306:	2312      	movs	r3, #18
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002312:	2304      	movs	r3, #4
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	483d      	ldr	r0, [pc, #244]	; (8002414 <HAL_I2C_MspInit+0x150>)
 800231e:	f001 faab 	bl	8003878 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a39      	ldr	r2, [pc, #228]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 800232c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800233e:	e060      	b.n	8002402 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a34      	ldr	r2, [pc, #208]	; (8002418 <HAL_I2C_MspInit+0x154>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d15b      	bne.n	8002402 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8002382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002388:	2312      	movs	r3, #18
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002394:	2304      	movs	r3, #4
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	481f      	ldr	r0, [pc, #124]	; (800241c <HAL_I2C_MspInit+0x158>)
 80023a0:	f001 fa6a 	bl	8003878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 80023a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023b6:	2304      	movs	r3, #4
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4817      	ldr	r0, [pc, #92]	; (8002420 <HAL_I2C_MspInit+0x15c>)
 80023c2:	f001 fa59 	bl	8003878 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 80023d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_I2C_MspInit+0x14c>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2048      	movs	r0, #72	; 0x48
 80023e8:	f000 fef5 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80023ec:	2048      	movs	r0, #72	; 0x48
 80023ee:	f000 ff0e 	bl	800320e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2049      	movs	r0, #73	; 0x49
 80023f8:	f000 feed 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80023fc:	2049      	movs	r0, #73	; 0x49
 80023fe:	f000 ff06 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40005400 	.word	0x40005400
 8002410:	40023800 	.word	0x40023800
 8002414:	40020400 	.word	0x40020400
 8002418:	40005c00 	.word	0x40005c00
 800241c:	40020800 	.word	0x40020800
 8002420:	40020000 	.word	0x40020000

08002424 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	led_number++;
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <Leds_Control_Blink+0x110>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <Leds_Control_Blink+0x110>)
 8002432:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <Leds_Control_Blink+0x110>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d102      	bne.n	8002442 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 800243c:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <Leds_Control_Blink+0x110>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8002442:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <Leds_Control_Blink+0x110>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	2b03      	cmp	r3, #3
 800244a:	d86f      	bhi.n	800252c <Leds_Control_Blink+0x108>
 800244c:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <Leds_Control_Blink+0x30>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	08002465 	.word	0x08002465
 8002458:	08002497 	.word	0x08002497
 800245c:	080024c9 	.word	0x080024c9
 8002460:	080024fb 	.word	0x080024fb
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246a:	4833      	ldr	r0, [pc, #204]	; (8002538 <Leds_Control_Blink+0x114>)
 800246c:	f001 fba0 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002476:	4830      	ldr	r0, [pc, #192]	; (8002538 <Leds_Control_Blink+0x114>)
 8002478:	f001 fb9a 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002482:	482d      	ldr	r0, [pc, #180]	; (8002538 <Leds_Control_Blink+0x114>)
 8002484:	f001 fb94 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248e:	482a      	ldr	r0, [pc, #168]	; (8002538 <Leds_Control_Blink+0x114>)
 8002490:	f001 fb8e 	bl	8003bb0 <HAL_GPIO_WritePin>
		break;
 8002494:	e04b      	b.n	800252e <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002496:	2200      	movs	r2, #0
 8002498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249c:	4826      	ldr	r0, [pc, #152]	; (8002538 <Leds_Control_Blink+0x114>)
 800249e:	f001 fb87 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a8:	4823      	ldr	r0, [pc, #140]	; (8002538 <Leds_Control_Blink+0x114>)
 80024aa:	f001 fb81 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 80024ae:	2200      	movs	r2, #0
 80024b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b4:	4820      	ldr	r0, [pc, #128]	; (8002538 <Leds_Control_Blink+0x114>)
 80024b6:	f001 fb7b 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80024ba:	2200      	movs	r2, #0
 80024bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c0:	481d      	ldr	r0, [pc, #116]	; (8002538 <Leds_Control_Blink+0x114>)
 80024c2:	f001 fb75 	bl	8003bb0 <HAL_GPIO_WritePin>
		break;
 80024c6:	e032      	b.n	800252e <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ce:	481a      	ldr	r0, [pc, #104]	; (8002538 <Leds_Control_Blink+0x114>)
 80024d0:	f001 fb6e 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 80024d4:	2200      	movs	r2, #0
 80024d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024da:	4817      	ldr	r0, [pc, #92]	; (8002538 <Leds_Control_Blink+0x114>)
 80024dc:	f001 fb68 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 80024e0:	2201      	movs	r2, #1
 80024e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e6:	4814      	ldr	r0, [pc, #80]	; (8002538 <Leds_Control_Blink+0x114>)
 80024e8:	f001 fb62 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f2:	4811      	ldr	r0, [pc, #68]	; (8002538 <Leds_Control_Blink+0x114>)
 80024f4:	f001 fb5c 	bl	8003bb0 <HAL_GPIO_WritePin>
		break;
 80024f8:	e019      	b.n	800252e <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80024fa:	2200      	movs	r2, #0
 80024fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002500:	480d      	ldr	r0, [pc, #52]	; (8002538 <Leds_Control_Blink+0x114>)
 8002502:	f001 fb55 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800250c:	480a      	ldr	r0, [pc, #40]	; (8002538 <Leds_Control_Blink+0x114>)
 800250e:	f001 fb4f 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002512:	2200      	movs	r2, #0
 8002514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <Leds_Control_Blink+0x114>)
 800251a:	f001 fb49 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <Leds_Control_Blink+0x114>)
 8002526:	f001 fb43 	bl	8003bb0 <HAL_GPIO_WritePin>
		break;
 800252a:	e000      	b.n	800252e <Leds_Control_Blink+0x10a>
	default:

		break;
 800252c:	bf00      	nop
	}
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000008 	.word	0x20000008
 8002538:	40020c00 	.word	0x40020c00

0800253c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002540:	f000 fcd8 	bl	8002ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002544:	f000 f82e 	bl	80025a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002548:	f7ff fd7c 	bl	8002044 <MX_GPIO_Init>
  MX_DMA_Init();
 800254c:	f7ff fd5a 	bl	8002004 <MX_DMA_Init>
  MX_I2C1_Init();
 8002550:	f7ff fe5c 	bl	800220c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002554:	f7ff fe88 	bl	8002268 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002558:	f000 f894 	bl	8002684 <MX_SPI1_Init>
  MX_SPI2_Init();
 800255c:	f000 f8c8 	bl	80026f0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002560:	f000 fa66 	bl	8002a30 <MX_TIM3_Init>
  MX_UART5_Init();
 8002564:	f000 fba8 	bl	8002cb8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002568:	f000 fbd0 	bl	8002d0c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 800256c:	f000 faba 	bl	8002ae4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002570:	f000 fadc 	bl	8002b2c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8002574:	2101      	movs	r1, #1
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <main+0x5c>)
 8002578:	f7ff fbea 	bl	8001d50 <send_debug_msg>
  HAL_TIM_Base_Start_IT(&htim10);
 800257c:	4807      	ldr	r0, [pc, #28]	; (800259c <main+0x60>)
 800257e:	f004 fcff 	bl	8006f80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <main+0x64>)
 8002584:	f004 fcfc 	bl	8006f80 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8002588:	f7fd ffa8 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 800258c:	f7ff fc06 	bl	8001d9c <DisplayMainScreen>



  Si468x_init();
 8002590:	f7fe fd90 	bl	80010b4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002594:	e7fe      	b.n	8002594 <main+0x58>
 8002596:	bf00      	nop
 8002598:	080089a4 	.word	0x080089a4
 800259c:	20001418 	.word	0x20001418
 80025a0:	20001460 	.word	0x20001460

080025a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b094      	sub	sp, #80	; 0x50
 80025a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	2230      	movs	r2, #48	; 0x30
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f005 fe76 	bl	80082a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <SystemClock_Config+0xcc>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <SystemClock_Config+0xcc>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <SystemClock_Config+0xcc>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <SystemClock_Config+0xd0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <SystemClock_Config+0xd0>)
 80025ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <SystemClock_Config+0xd0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002600:	2301      	movs	r3, #1
 8002602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800260a:	2302      	movs	r3, #2
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800260e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002614:	2304      	movs	r3, #4
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002618:	23a0      	movs	r3, #160	; 0xa0
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800261c:	2302      	movs	r3, #2
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002620:	2304      	movs	r3, #4
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002624:	f107 0320 	add.w	r3, r7, #32
 8002628:	4618      	mov	r0, r3
 800262a:	f003 f8fb 	bl	8005824 <HAL_RCC_OscConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002634:	f000 f820 	bl	8002678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002638:	230f      	movs	r3, #15
 800263a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263c:	2302      	movs	r3, #2
 800263e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2105      	movs	r1, #5
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fb5c 	bl	8005d14 <HAL_RCC_ClockConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002662:	f000 f809 	bl	8002678 <Error_Handler>
  }
}
 8002666:	bf00      	nop
 8002668:	3750      	adds	r7, #80	; 0x50
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000

08002678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002680:	e7fe      	b.n	8002680 <Error_Handler+0x8>
	...

08002684 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <MX_SPI1_Init+0x64>)
 800268a:	4a18      	ldr	r2, [pc, #96]	; (80026ec <MX_SPI1_Init+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MX_SPI1_Init+0x64>)
 8002690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_SPI1_Init+0x64>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <MX_SPI1_Init+0x64>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026b8:	2218      	movs	r2, #24
 80026ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026d0:	220a      	movs	r2, #10
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <MX_SPI1_Init+0x64>)
 80026d6:	f003 fd3d 	bl	8006154 <HAL_SPI_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026e0:	f7ff ffca 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200012c0 	.word	0x200012c0
 80026ec:	40013000 	.word	0x40013000

080026f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <MX_SPI2_Init+0x64>)
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <MX_SPI2_Init+0x68>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <MX_SPI2_Init+0x64>)
 80026fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_SPI2_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <MX_SPI2_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_SPI2_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_SPI2_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_SPI2_Init+0x64>)
 800271c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002720:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_SPI2_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <MX_SPI2_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_SPI2_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <MX_SPI2_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_SPI2_Init+0x64>)
 800273c:	220a      	movs	r2, #10
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002740:	4804      	ldr	r0, [pc, #16]	; (8002754 <MX_SPI2_Init+0x64>)
 8002742:	f003 fd07 	bl	8006154 <HAL_SPI_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800274c:	f7ff ff94 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20001318 	.word	0x20001318
 8002758:	40003800 	.word	0x40003800

0800275c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_SPI_MspInit+0x154>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12c      	bne.n	80027d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 8002788:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	4b45      	ldr	r3, [pc, #276]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a44      	ldr	r2, [pc, #272]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 80027b6:	23e0      	movs	r3, #224	; 0xe0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027c6:	2305      	movs	r3, #5
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	4839      	ldr	r0, [pc, #228]	; (80028b8 <HAL_SPI_MspInit+0x15c>)
 80027d2:	f001 f851 	bl	8003878 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80027d6:	e066      	b.n	80028a6 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_SPI_MspInit+0x160>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d161      	bne.n	80028a6 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a32      	ldr	r2, [pc, #200]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a2b      	ldr	r2, [pc, #172]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_SPI_MspInit+0x158>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800281a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800282c:	2305      	movs	r3, #5
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	4822      	ldr	r0, [pc, #136]	; (80028c0 <HAL_SPI_MspInit+0x164>)
 8002838:	f001 f81e 	bl	8003878 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <HAL_SPI_MspInit+0x16c>)
 8002840:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800287a:	4812      	ldr	r0, [pc, #72]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 800287c:	f000 fce2 	bl	8003244 <HAL_DMA_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002886:	f7ff fef7 	bl	8002678 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 800288e:	649a      	str	r2, [r3, #72]	; 0x48
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_SPI_MspInit+0x168>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2024      	movs	r0, #36	; 0x24
 800289c:	f000 fc9b 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80028a0:	2024      	movs	r0, #36	; 0x24
 80028a2:	f000 fcb4 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3730      	adds	r7, #48	; 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40013000 	.word	0x40013000
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40003800 	.word	0x40003800
 80028c0:	40020400 	.word	0x40020400
 80028c4:	20001370 	.word	0x20001370
 80028c8:	40026070 	.word	0x40026070

080028cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_MspInit+0x4c>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_MspInit+0x4c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_MspInit+0x4c>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_MspInit+0x4c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>

08002922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler+0x4>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler+0x4>

0800293a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002968:	f000 fb16 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <DMA1_Stream4_IRQHandler+0x10>)
 8002976:	f000 fd35 	bl	80033e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20001370 	.word	0x20001370

08002984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800298a:	f004 fbb8 	bl	80070fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001418 	.word	0x20001418

08002998 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800299e:	f004 fbae 	bl	80070fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20001460 	.word	0x20001460

080029ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <SPI2_IRQHandler+0x10>)
 80029b2:	f004 f847 	bl	8006a44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20001318 	.word	0x20001318

080029c0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <I2C3_EV_IRQHandler+0x10>)
 80029c6:	f001 fa51 	bl	8003e6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000126c 	.word	0x2000126c

080029d4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <I2C3_ER_IRQHandler+0x10>)
 80029da:	f001 fbb8 	bl	800414e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000126c 	.word	0x2000126c

080029e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 80029fa:	f7ff fd13 	bl	8002424 <Leds_Control_Blink>

	}
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40014800 	.word	0x40014800

08002a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	615a      	str	r2, [r3, #20]
 8002a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <MX_TIM3_Init+0xb0>)
 8002a56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a78:	4818      	ldr	r0, [pc, #96]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a7a:	f004 faf1 	bl	8007060 <HAL_TIM_PWM_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a84:	f7ff fdf8 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	4619      	mov	r1, r3
 8002a96:	4811      	ldr	r0, [pc, #68]	; (8002adc <MX_TIM3_Init+0xac>)
 8002a98:	f004 ff74 	bl	8007984 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002aa2:	f7ff fde9 	bl	8002678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa6:	2360      	movs	r3, #96	; 0x60
 8002aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2208      	movs	r2, #8
 8002aba:	4619      	mov	r1, r3
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <MX_TIM3_Init+0xac>)
 8002abe:	f004 fc27 	bl	8007310 <HAL_TIM_PWM_ConfigChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002ac8:	f7ff fdd6 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <MX_TIM3_Init+0xac>)
 8002ace:	f000 f8b9 	bl	8002c44 <HAL_TIM_MspPostInit>

}
 8002ad2:	bf00      	nop
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200013d0 	.word	0x200013d0
 8002ae0:	40000400 	.word	0x40000400

08002ae4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002aea:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <MX_TIM10_Init+0x44>)
 8002aec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002af0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002af4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002afe:	f240 2257 	movw	r2, #599	; 0x257
 8002b02:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <MX_TIM10_Init+0x40>)
 8002b12:	f004 f9e5 	bl	8006ee0 <HAL_TIM_Base_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002b1c:	f7ff fdac 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20001418 	.word	0x20001418
 8002b28:	40014400 	.word	0x40014400

08002b2c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b32:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <MX_TIM11_Init+0x44>)
 8002b34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b38:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002b3c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b46:	f240 5213 	movw	r2, #1299	; 0x513
 8002b4a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b58:	4804      	ldr	r0, [pc, #16]	; (8002b6c <MX_TIM11_Init+0x40>)
 8002b5a:	f004 f9c1 	bl	8006ee0 <HAL_TIM_Base_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002b64:	f7ff fd88 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20001460 	.word	0x20001460
 8002b70:	40014800 	.word	0x40014800

08002b74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10d      	bne.n	8002ba2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_Base_MspInit+0x80>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d116      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_TIM_Base_MspInit+0x84>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <HAL_TIM_Base_MspInit+0x84>)
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_TIM_Base_MspInit+0x84>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2019      	movs	r0, #25
 8002bec:	f000 faf3 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bf0:	2019      	movs	r0, #25
 8002bf2:	f000 fb0c 	bl	800320e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002bf6:	e01a      	b.n	8002c2e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_TIM_Base_MspInit+0x88>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d115      	bne.n	8002c2e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_TIM_Base_MspInit+0x84>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_TIM_Base_MspInit+0x84>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_TIM_Base_MspInit+0x84>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	201a      	movs	r0, #26
 8002c24:	f000 fad7 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c28:	201a      	movs	r0, #26
 8002c2a:	f000 faf0 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40014400 	.word	0x40014400
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40014800 	.word	0x40014800

08002c44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_TIM_MspPostInit+0x68>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d11e      	bne.n	8002ca4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_TIM_MspPostInit+0x6c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_TIM_MspPostInit+0x6c>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_TIM_MspPostInit+0x6c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8002c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <HAL_TIM_MspPostInit+0x70>)
 8002ca0:	f000 fdea 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020800 	.word	0x40020800

08002cb8 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <MX_UART5_Init+0x50>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_UART5_Init+0x4c>)
 8002cf0:	f004 fed8 	bl	8007aa4 <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002cfa:	f7ff fcbd 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200014a8 	.word	0x200014a8
 8002d08:	40005000 	.word	0x40005000

08002d0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_USART3_UART_Init+0x50>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART3_UART_Init+0x4c>)
 8002d44:	f004 feae 	bl	8007aa4 <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d4e:	f7ff fc93 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200014ec 	.word	0x200014ec
 8002d5c:	40004800 	.word	0x40004800

08002d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <HAL_UART_MspInit+0x128>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d14b      	bne.n	8002e1a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002de8:	2308      	movs	r3, #8
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	4619      	mov	r1, r3
 8002df2:	4827      	ldr	r0, [pc, #156]	; (8002e90 <HAL_UART_MspInit+0x130>)
 8002df4:	f000 fd40 	bl	8003878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002e08:	2308      	movs	r3, #8
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	4820      	ldr	r0, [pc, #128]	; (8002e94 <HAL_UART_MspInit+0x134>)
 8002e14:	f000 fd30 	bl	8003878 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e18:	e031      	b.n	8002e7e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_UART_MspInit+0x138>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d12c      	bne.n	8002e7e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e32:	6413      	str	r3, [r2, #64]	; 0x40
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_UART_MspInit+0x12c>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8002e5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e6e:	2307      	movs	r3, #7
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	4808      	ldr	r0, [pc, #32]	; (8002e9c <HAL_UART_MspInit+0x13c>)
 8002e7a:	f000 fcfd 	bl	8003878 <HAL_GPIO_Init>
}
 8002e7e:	bf00      	nop
 8002e80:	3730      	adds	r7, #48	; 0x30
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40005000 	.word	0x40005000
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40004800 	.word	0x40004800
 8002e9c:	40020400 	.word	0x40020400

08002ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ea6:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ebc:	4c0b      	ldr	r4, [pc, #44]	; (8002eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eca:	f7ff fd9f 	bl	8002a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ece:	f005 f9ab 	bl	8008228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed2:	f7ff fb33 	bl	800253c <main>
  bx  lr    
 8002ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002ee4:	0800a978 	.word	0x0800a978
  ldr r2, =_sbss
 8002ee8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002eec:	20001534 	.word	0x20001534

08002ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC_IRQHandler>
	...

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_Init+0x40>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <HAL_Init+0x40>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_Init+0x40>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 f94f 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	200f      	movs	r0, #15
 8002f24:	f000 f808 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7ff fcd0 	bl	80028cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f967 	bl	800322a <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 f92f 	bl	80031d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	20000014 	.word	0x20000014
 8002f94:	20000010 	.word	0x20000010

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000014 	.word	0x20000014
 8002fbc:	20001530 	.word	0x20001530

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20001530 	.word	0x20001530

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000014 	.word	0x20000014

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	; (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff29 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff3e 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff8e 	bl	8003114 <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff31 	bl	8003084 <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffa2 	bl	800317c <SysTick_Config>
 8003238:	4603      	mov	r3, r0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff feb6 	bl	8002fc0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e099      	b.n	8003394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003280:	e00f      	b.n	80032a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003282:	f7ff fe9d 	bl	8002fc0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b05      	cmp	r3, #5
 800328e:	d908      	bls.n	80032a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2203      	movs	r2, #3
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e078      	b.n	8003394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e8      	bne.n	8003282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_DMA_Init+0x158>)
 80032bc:	4013      	ands	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d107      	bne.n	800330c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4313      	orrs	r3, r2
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0307 	bic.w	r3, r3, #7
 8003322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b04      	cmp	r3, #4
 8003334:	d117      	bne.n	8003366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fa19 	bl	8003780 <DMA_CheckFifoParam>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003362:	2301      	movs	r3, #1
 8003364:	e016      	b.n	8003394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9d0 	bl	8003714 <DMA_CalcBaseAndBitshift>
 8003374:	4603      	mov	r3, r0
 8003376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	223f      	movs	r2, #63	; 0x3f
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	f010803f 	.word	0xf010803f

080033a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d004      	beq.n	80033be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00c      	b.n	80033d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2205      	movs	r2, #5
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033f0:	4b8e      	ldr	r3, [pc, #568]	; (800362c <HAL_DMA_IRQHandler+0x248>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a8e      	ldr	r2, [pc, #568]	; (8003630 <HAL_DMA_IRQHandler+0x24c>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2208      	movs	r2, #8
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01a      	beq.n	8003450 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2208      	movs	r2, #8
 800343e:	409a      	lsls	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	2204      	movs	r2, #4
 800348c:	409a      	lsls	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d012      	beq.n	80034bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00b      	beq.n	80034bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2204      	movs	r2, #4
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2210      	movs	r2, #16
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d043      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d03c      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2210      	movs	r2, #16
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d018      	beq.n	8003526 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d024      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e01f      	b.n	8003554 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
 8003524:	e016      	b.n	8003554 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0208 	bic.w	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	2220      	movs	r2, #32
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 808f 	beq.w	8003684 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8087 	beq.w	8003684 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	2220      	movs	r2, #32
 800357c:	409a      	lsls	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b05      	cmp	r3, #5
 800358c:	d136      	bne.n	80035fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0216 	bic.w	r2, r2, #22
 800359c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_DMA_IRQHandler+0x1da>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0208 	bic.w	r2, r2, #8
 80035cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	223f      	movs	r2, #63	; 0x3f
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d07e      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
        }
        return;
 80035fa:	e079      	b.n	80036f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	2b00      	cmp	r3, #0
 800361e:	d031      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
 8003628:	e02c      	b.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
 800362a:	bf00      	nop
 800362c:	2000000c 	.word	0x2000000c
 8003630:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
 8003644:	e01e      	b.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10f      	bne.n	8003674 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0210 	bic.w	r2, r2, #16
 8003662:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	2b00      	cmp	r3, #0
 800368a:	d032      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d022      	beq.n	80036de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2205      	movs	r2, #5
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d307      	bcc.n	80036cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f2      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x2cc>
 80036ca:	e000      	b.n	80036ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036f0:	bf00      	nop
    }
  }
}
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003706:	b2db      	uxtb	r3, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3b10      	subs	r3, #16
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <DMA_CalcBaseAndBitshift+0x64>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <DMA_CalcBaseAndBitshift+0x68>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d909      	bls.n	8003756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	1d1a      	adds	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
 8003754:	e007      	b.n	8003766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	0800a938 	.word	0x0800a938

08003780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d856      	bhi.n	800384e <DMA_CheckFifoParam+0xce>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <DMA_CheckFifoParam+0x28>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037cb 	.word	0x080037cb
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	0800384f 	.word	0x0800384f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d046      	beq.n	8003852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e043      	b.n	8003852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d2:	d140      	bne.n	8003856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e03d      	b.n	8003856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d121      	bne.n	8003828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d837      	bhi.n	800385a <DMA_CheckFifoParam+0xda>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <DMA_CheckFifoParam+0x70>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003801 	.word	0x08003801
 80037f4:	08003807 	.word	0x08003807
 80037f8:	08003801 	.word	0x08003801
 80037fc:	08003819 	.word	0x08003819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e030      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d025      	beq.n	800385e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003816:	e022      	b.n	800385e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003820:	d11f      	bne.n	8003862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003826:	e01c      	b.n	8003862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d903      	bls.n	8003836 <DMA_CheckFifoParam+0xb6>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d003      	beq.n	800383c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003834:	e018      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      break;
 800383a:	e015      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	e00b      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 800384e:	bf00      	nop
 8003850:	e00a      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 8003852:	bf00      	nop
 8003854:	e008      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
 8003858:	e006      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 800385a:	bf00      	nop
 800385c:	e004      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;   
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
    }
  } 
  
  return status; 
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop

08003878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e16b      	b.n	8003b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f040 815a 	bne.w	8003b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d130      	bne.n	800392c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003900:	2201      	movs	r2, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 0201 	and.w	r2, r3, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d017      	beq.n	8003968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d123      	bne.n	80039bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80b4 	beq.w	8003b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <HAL_GPIO_Init+0x30c>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4a5f      	ldr	r2, [pc, #380]	; (8003b84 <HAL_GPIO_Init+0x30c>)
 8003a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	; (8003b84 <HAL_GPIO_Init+0x30c>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	; (8003b88 <HAL_GPIO_Init+0x310>)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3302      	adds	r3, #2
 8003a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a52      	ldr	r2, [pc, #328]	; (8003b8c <HAL_GPIO_Init+0x314>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02b      	beq.n	8003a9e <HAL_GPIO_Init+0x226>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a51      	ldr	r2, [pc, #324]	; (8003b90 <HAL_GPIO_Init+0x318>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d025      	beq.n	8003a9a <HAL_GPIO_Init+0x222>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_GPIO_Init+0x31c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01f      	beq.n	8003a96 <HAL_GPIO_Init+0x21e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4f      	ldr	r2, [pc, #316]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d019      	beq.n	8003a92 <HAL_GPIO_Init+0x21a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4e      	ldr	r2, [pc, #312]	; (8003b9c <HAL_GPIO_Init+0x324>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x216>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4d      	ldr	r2, [pc, #308]	; (8003ba0 <HAL_GPIO_Init+0x328>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4c      	ldr	r2, [pc, #304]	; (8003ba4 <HAL_GPIO_Init+0x32c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x20e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4b      	ldr	r2, [pc, #300]	; (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x20a>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00e      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a82:	2308      	movs	r3, #8
 8003a84:	e00c      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a86:	2306      	movs	r3, #6
 8003a88:	e00a      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e008      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e006      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a92:	2303      	movs	r3, #3
 8003a94:	e004      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_Init+0x228>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	f002 0203 	and.w	r2, r2, #3
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab0:	4935      	ldr	r1, [pc, #212]	; (8003b88 <HAL_GPIO_Init+0x310>)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ae2:	4a32      	ldr	r2, [pc, #200]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae8:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b0c:	4a27      	ldr	r2, [pc, #156]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b60:	4a12      	ldr	r2, [pc, #72]	; (8003bac <HAL_GPIO_Init+0x334>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b0f      	cmp	r3, #15
 8003b70:	f67f ae90 	bls.w	8003894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3724      	adds	r7, #36	; 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	40020400 	.word	0x40020400
 8003b94:	40020800 	.word	0x40020800
 8003b98:	40020c00 	.word	0x40020c00
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40021400 	.word	0x40021400
 8003ba4:	40021800 	.word	0x40021800
 8003ba8:	40021c00 	.word	0x40021c00
 8003bac:	40013c00 	.word	0x40013c00

08003bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc0:	787b      	ldrb	r3, [r7, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bcc:	e003      	b.n	8003bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	041a      	lsls	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	619a      	str	r2, [r3, #24]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e12b      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe fb5a 	bl	80022c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c48:	f002 fa5c 	bl	8006104 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a81      	ldr	r2, [pc, #516]	; (8003e58 <HAL_I2C_Init+0x274>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d807      	bhi.n	8003c68 <HAL_I2C_Init+0x84>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <HAL_I2C_Init+0x278>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e006      	b.n	8003c76 <HAL_I2C_Init+0x92>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a7d      	ldr	r2, [pc, #500]	; (8003e60 <HAL_I2C_Init+0x27c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0e7      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a78      	ldr	r2, [pc, #480]	; (8003e64 <HAL_I2C_Init+0x280>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <HAL_I2C_Init+0x274>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_I2C_Init+0xd4>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	e009      	b.n	8003ccc <HAL_I2C_Init+0xe8>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	4a69      	ldr	r2, [pc, #420]	; (8003e68 <HAL_I2C_Init+0x284>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	3301      	adds	r3, #1
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	495c      	ldr	r1, [pc, #368]	; (8003e58 <HAL_I2C_Init+0x274>)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d819      	bhi.n	8003d20 <HAL_I2C_Init+0x13c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e59      	subs	r1, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d00:	400b      	ands	r3, r1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_I2C_Init+0x138>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e59      	subs	r1, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	e051      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e04f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <HAL_I2C_Init+0x168>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e012      	b.n	8003d72 <HAL_I2C_Init+0x18e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	0099      	lsls	r1, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x196>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e022      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10e      	bne.n	8003da0 <HAL_I2C_Init+0x1bc>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e58      	subs	r0, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	440b      	add	r3, r1
 8003d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9e:	e00f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	0099      	lsls	r1, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	6809      	ldr	r1, [r1, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6911      	ldr	r1, [r2, #16]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	000186a0 	.word	0x000186a0
 8003e5c:	001e847f 	.word	0x001e847f
 8003e60:	003d08ff 	.word	0x003d08ff
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	10624dd3 	.word	0x10624dd3

08003e6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d003      	beq.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x38>
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	f040 80c1 	bne.w	8004026 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <HAL_I2C_EV_IRQHandler+0x6e>
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ec4:	d003      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x62>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x66>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_I2C_EV_IRQHandler+0x68>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f000 8132 	beq.w	800413e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x92>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	0a5b      	lsrs	r3, r3, #9
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f001 fc7b 	bl	80057ec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fd83 	bl	8004a02 <I2C_Master_SB>
 8003efc:	e092      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_I2C_EV_IRQHandler+0xb2>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	0a5b      	lsrs	r3, r3, #9
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fdf9 	bl	8004b0e <I2C_Master_ADD10>
 8003f1c:	e082      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0xd2>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	0a5b      	lsrs	r3, r3, #9
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fe13 	bl	8004b62 <I2C_Master_ADDR>
 8003f3c:	e072      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03b      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f58:	f000 80f3 	beq.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	09db      	lsrs	r3, r3, #7
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00f      	beq.n	8003f88 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9f3 	bl	800436c <I2C_MasterTransmit_TXE>
 8003f86:	e04d      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80d6 	beq.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	0a5b      	lsrs	r3, r3, #9
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80cf 	beq.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	2b21      	cmp	r3, #33	; 0x21
 8003fa8:	d103      	bne.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa7a 	bl	80044a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fb0:	e0c7      	b.n	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	f040 80c4 	bne.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fae8 	bl	8004590 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc0:	e0bf      	b.n	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd0:	f000 80b7 	beq.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00f      	beq.n	8004000 <HAL_I2C_EV_IRQHandler+0x194>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	0a9b      	lsrs	r3, r3, #10
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_I2C_EV_IRQHandler+0x194>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fb5d 	bl	80046b8 <I2C_MasterReceive_RXNE>
 8003ffe:	e011      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 809a 	beq.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	0a5b      	lsrs	r3, r3, #9
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8093 	beq.w	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fc06 	bl	800482e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004022:	e08e      	b.n	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004024:	e08d      	b.n	8004142 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e007      	b.n	8004048 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d012      	beq.n	800407a <HAL_I2C_EV_IRQHandler+0x20e>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	0a5b      	lsrs	r3, r3, #9
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004070:	69b9      	ldr	r1, [r7, #24]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 ffc4 	bl	8005000 <I2C_Slave_ADDR>
 8004078:	e066      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_I2C_EV_IRQHandler+0x22e>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	0a5b      	lsrs	r3, r3, #9
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fffe 	bl	8005094 <I2C_Slave_STOPF>
 8004098:	e056      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800409a:	7bbb      	ldrb	r3, [r7, #14]
 800409c:	2b21      	cmp	r3, #33	; 0x21
 800409e:	d002      	beq.n	80040a6 <HAL_I2C_EV_IRQHandler+0x23a>
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	2b29      	cmp	r3, #41	; 0x29
 80040a4:	d125      	bne.n	80040f2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	09db      	lsrs	r3, r3, #7
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00f      	beq.n	80040d2 <HAL_I2C_EV_IRQHandler+0x266>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	0a9b      	lsrs	r3, r3, #10
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_I2C_EV_IRQHandler+0x266>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 feda 	bl	8004e84 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040d0:	e039      	b.n	8004146 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d033      	beq.n	8004146 <HAL_I2C_EV_IRQHandler+0x2da>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	0a5b      	lsrs	r3, r3, #9
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02d      	beq.n	8004146 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 ff07 	bl	8004efe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040f0:	e029      	b.n	8004146 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	099b      	lsrs	r3, r3, #6
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00f      	beq.n	800411e <HAL_I2C_EV_IRQHandler+0x2b2>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	0a9b      	lsrs	r3, r3, #10
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_I2C_EV_IRQHandler+0x2b2>
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 ff12 	bl	8004f40 <I2C_SlaveReceive_RXNE>
 800411c:	e014      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00e      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	0a5b      	lsrs	r3, r3, #9
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 ff40 	bl	8004fbc <I2C_SlaveReceive_BTF>
 800413c:	e004      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004146:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b08a      	sub	sp, #40	; 0x28
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004170:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <HAL_I2C_ER_IRQHandler+0x4e>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800419a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	0a5b      	lsrs	r3, r3, #9
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00e      	beq.n	80041c6 <HAL_I2C_ER_IRQHandler+0x78>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	f043 0302 	orr.w	r3, r3, #2
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80041c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	0a9b      	lsrs	r3, r3, #10
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d03f      	beq.n	8004252 <HAL_I2C_ER_IRQHandler+0x104>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d039      	beq.n	8004252 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80041de:	7efb      	ldrb	r3, [r7, #27]
 80041e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80041f8:	7ebb      	ldrb	r3, [r7, #26]
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d112      	bne.n	8004224 <HAL_I2C_ER_IRQHandler+0xd6>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10f      	bne.n	8004224 <HAL_I2C_ER_IRQHandler+0xd6>
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2b21      	cmp	r3, #33	; 0x21
 8004208:	d008      	beq.n	800421c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b29      	cmp	r3, #41	; 0x29
 800420e:	d005      	beq.n	800421c <HAL_I2C_ER_IRQHandler+0xce>
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b28      	cmp	r3, #40	; 0x28
 8004214:	d106      	bne.n	8004224 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b21      	cmp	r3, #33	; 0x21
 800421a:	d103      	bne.n	8004224 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f001 f869 	bl	80052f4 <I2C_Slave_AF>
 8004222:	e016      	b.n	8004252 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800422c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004236:	7efb      	ldrb	r3, [r7, #27]
 8004238:	2b10      	cmp	r3, #16
 800423a:	d002      	beq.n	8004242 <HAL_I2C_ER_IRQHandler+0xf4>
 800423c:	7efb      	ldrb	r3, [r7, #27]
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d107      	bne.n	8004252 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004250:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	0adb      	lsrs	r3, r3, #11
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <HAL_I2C_ER_IRQHandler+0x12e>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800427a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 f8a0 	bl	80053d4 <I2C_ITError>
  }
}
 8004294:	bf00      	nop
 8004296:	3728      	adds	r7, #40	; 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
 80042f8:	4613      	mov	r3, r2
 80042fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004382:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d150      	bne.n	8004434 <I2C_MasterTransmit_TXE+0xc8>
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b21      	cmp	r3, #33	; 0x21
 8004396:	d14d      	bne.n	8004434 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b08      	cmp	r3, #8
 800439c:	d01d      	beq.n	80043da <I2C_MasterTransmit_TXE+0x6e>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d01a      	beq.n	80043da <I2C_MasterTransmit_TXE+0x6e>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043aa:	d016      	beq.n	80043da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2211      	movs	r2, #17
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff62 	bl	800429c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043d8:	e060      	b.n	800449c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d107      	bne.n	8004424 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff7d 	bl	800431c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004422:	e03b      	b.n	800449c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff35 	bl	800429c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004432:	e033      	b.n	800449c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b21      	cmp	r3, #33	; 0x21
 8004438:	d005      	beq.n	8004446 <I2C_MasterTransmit_TXE+0xda>
 800443a:	7bbb      	ldrb	r3, [r7, #14]
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d12d      	bne.n	800449c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b22      	cmp	r3, #34	; 0x22
 8004444:	d12a      	bne.n	800449c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004460:	e01c      	b.n	800449c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d103      	bne.n	8004476 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f88e 	bl	8004590 <I2C_MemoryTransmit_TXE_BTF>
}
 8004474:	e012      	b.n	800449c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800449a:	e7ff      	b.n	800449c <I2C_MasterTransmit_TXE+0x130>
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b21      	cmp	r3, #33	; 0x21
 80044bc:	d164      	bne.n	8004588 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80044ec:	e04c      	b.n	8004588 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d01d      	beq.n	8004530 <I2C_MasterTransmit_BTF+0x8c>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d01a      	beq.n	8004530 <I2C_MasterTransmit_BTF+0x8c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004500:	d016      	beq.n	8004530 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004510:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2211      	movs	r2, #17
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff feb7 	bl	800429c <HAL_I2C_MasterTxCpltCallback>
}
 800452e:	e02b      	b.n	8004588 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d107      	bne.n	800457a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff fed2 	bl	800431c <HAL_I2C_MemTxCpltCallback>
}
 8004578:	e006      	b.n	8004588 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff fe8a 	bl	800429c <HAL_I2C_MasterTxCpltCallback>
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11d      	bne.n	80045e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10b      	bne.n	80045c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045c6:	e073      	b.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	121b      	asrs	r3, r3, #8
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045e2:	e065      	b.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10b      	bne.n	8004604 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004602:	e055      	b.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	2b02      	cmp	r3, #2
 800460a:	d151      	bne.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b22      	cmp	r3, #34	; 0x22
 8004610:	d10d      	bne.n	800462e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004620:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800462c:	e040      	b.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b21      	cmp	r3, #33	; 0x21
 800463c:	d112      	bne.n	8004664 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004662:	e025      	b.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d120      	bne.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b21      	cmp	r3, #33	; 0x21
 8004672:	d11d      	bne.n	80046b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004682:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004692:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fe36 	bl	800431c <HAL_I2C_MemTxCpltCallback>
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b22      	cmp	r3, #34	; 0x22
 80046ca:	f040 80ac 	bne.w	8004826 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d921      	bls.n	8004720 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b03      	cmp	r3, #3
 800470a:	f040 808c 	bne.w	8004826 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800471e:	e082      	b.n	8004826 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	2b02      	cmp	r3, #2
 8004726:	d075      	beq.n	8004814 <I2C_MasterReceive_RXNE+0x15c>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d002      	beq.n	8004734 <I2C_MasterReceive_RXNE+0x7c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d16f      	bne.n	8004814 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 f827 	bl	8005788 <I2C_WaitOnSTOPRequestThroughIT>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d142      	bne.n	80047c6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d10a      	bne.n	80047b0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fdc1 	bl	8004330 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047ae:	e03a      	b.n	8004826 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2212      	movs	r2, #18
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fd76 	bl	80042b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047c4:	e02f      	b.n	8004826 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fd99 	bl	8004344 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004812:	e008      	b.n	8004826 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004822:	605a      	str	r2, [r3, #4]
}
 8004824:	e7ff      	b.n	8004826 <I2C_MasterReceive_RXNE+0x16e>
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b04      	cmp	r3, #4
 8004844:	d11b      	bne.n	800487e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004854:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800487c:	e0bd      	b.n	80049fa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b03      	cmp	r3, #3
 8004886:	d129      	bne.n	80048dc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004896:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d00a      	beq.n	80048b4 <I2C_MasterReceive_BTF+0x86>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d007      	beq.n	80048b4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048da:	e08e      	b.n	80049fa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d176      	bne.n	80049d4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d002      	beq.n	80048f2 <I2C_MasterReceive_BTF+0xc4>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d108      	bne.n	8004904 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e019      	b.n	8004938 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d002      	beq.n	8004910 <I2C_MasterReceive_BTF+0xe2>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d108      	bne.n	8004922 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e00a      	b.n	8004938 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d007      	beq.n	8004938 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004992:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d10a      	bne.n	80049be <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fcba 	bl	8004330 <HAL_I2C_MemRxCpltCallback>
}
 80049bc:	e01d      	b.n	80049fa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2212      	movs	r2, #18
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fc6f 	bl	80042b0 <HAL_I2C_MasterRxCpltCallback>
}
 80049d2:	e012      	b.n	80049fa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d117      	bne.n	8004a46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a30:	e067      	b.n	8004b02 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	611a      	str	r2, [r3, #16]
}
 8004a44:	e05d      	b.n	8004b02 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4e:	d133      	bne.n	8004ab8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b21      	cmp	r3, #33	; 0x21
 8004a5a:	d109      	bne.n	8004a70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a6c:	611a      	str	r2, [r3, #16]
 8004a6e:	e008      	b.n	8004a82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <I2C_Master_SB+0x92>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d032      	beq.n	8004b02 <I2C_Master_SB+0x100>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02d      	beq.n	8004b02 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab4:	605a      	str	r2, [r3, #4]
}
 8004ab6:	e024      	b.n	8004b02 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10e      	bne.n	8004ade <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	11db      	asrs	r3, r3, #7
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f063 030f 	orn	r3, r3, #15
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
}
 8004adc:	e011      	b.n	8004b02 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10d      	bne.n	8004b02 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	11db      	asrs	r3, r3, #7
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 0306 	and.w	r3, r3, #6
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f063 030e 	orn	r3, r3, #14
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <I2C_Master_ADD10+0x26>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <I2C_Master_ADD10+0x48>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b54:	605a      	str	r2, [r3, #4]
  }
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b091      	sub	sp, #68	; 0x44
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b22      	cmp	r3, #34	; 0x22
 8004b8a:	f040 8169 	bne.w	8004e60 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <I2C_Master_ADDR+0x54>
 8004b96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d10b      	bne.n	8004bb6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	e160      	b.n	8004e78 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11d      	bne.n	8004bfa <I2C_Master_ADDR+0x98>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bc6:	d118      	bne.n	8004bfa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	651a      	str	r2, [r3, #80]	; 0x50
 8004bf8:	e13e      	b.n	8004e78 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d113      	bne.n	8004c2c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e115      	b.n	8004e58 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 808a 	bne.w	8004d4c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c3e:	d137      	bne.n	8004cb0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5e:	d113      	bne.n	8004c88 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	e0e7      	b.n	8004e58 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e0d3      	b.n	8004e58 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d02e      	beq.n	8004d14 <I2C_Master_ADDR+0x1b2>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d02b      	beq.n	8004d14 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	2b12      	cmp	r3, #18
 8004cc0:	d102      	bne.n	8004cc8 <I2C_Master_ADDR+0x166>
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d125      	bne.n	8004d14 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00e      	beq.n	8004cec <I2C_Master_ADDR+0x18a>
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d00b      	beq.n	8004cec <I2C_Master_ADDR+0x18a>
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d008      	beq.n	8004cec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e007      	b.n	8004cfc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cfa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	e0a1      	b.n	8004e58 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e085      	b.n	8004e58 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d14d      	bne.n	8004df2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d016      	beq.n	8004d8a <I2C_Master_ADDR+0x228>
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d013      	beq.n	8004d8a <I2C_Master_ADDR+0x228>
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d010      	beq.n	8004d8a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d76:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e007      	b.n	8004d9a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d98:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da8:	d117      	bne.n	8004dda <I2C_Master_ADDR+0x278>
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db0:	d00b      	beq.n	8004dca <I2C_Master_ADDR+0x268>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d008      	beq.n	8004dca <I2C_Master_ADDR+0x268>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d005      	beq.n	8004dca <I2C_Master_ADDR+0x268>
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d002      	beq.n	8004dca <I2C_Master_ADDR+0x268>
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d107      	bne.n	8004dda <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	e032      	b.n	8004e58 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e00:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d117      	bne.n	8004e42 <I2C_Master_ADDR+0x2e0>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e18:	d00b      	beq.n	8004e32 <I2C_Master_ADDR+0x2d0>
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d008      	beq.n	8004e32 <I2C_Master_ADDR+0x2d0>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d005      	beq.n	8004e32 <I2C_Master_ADDR+0x2d0>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d002      	beq.n	8004e32 <I2C_Master_ADDR+0x2d0>
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d107      	bne.n	8004e42 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e40:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e5e:	e00b      	b.n	8004e78 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
}
 8004e76:	e7ff      	b.n	8004e78 <I2C_Master_ADDR+0x316>
 8004e78:	bf00      	nop
 8004e7a:	3744      	adds	r7, #68	; 0x44
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d02b      	beq.n	8004ef6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d114      	bne.n	8004ef6 <I2C_SlaveTransmit_TXE+0x72>
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b29      	cmp	r3, #41	; 0x29
 8004ed0:	d111      	bne.n	8004ef6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2221      	movs	r2, #33	; 0x21
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2228      	movs	r2, #40	; 0x28
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff f9e7 	bl	80042c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d011      	beq.n	8004f34 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02c      	beq.n	8004fb4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d114      	bne.n	8004fb4 <I2C_SlaveReceive_RXNE+0x74>
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8e:	d111      	bne.n	8004fb4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2222      	movs	r2, #34	; 0x22
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2228      	movs	r2, #40	; 0x28
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff f992 	bl	80042d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800501a:	2b28      	cmp	r3, #40	; 0x28
 800501c:	d127      	bne.n	800506e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	09db      	lsrs	r3, r3, #7
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	81bb      	strh	r3, [r7, #12]
 8005050:	e002      	b.n	8005058 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005060:	89ba      	ldrh	r2, [r7, #12]
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff f940 	bl	80042ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800506c:	e00e      	b.n	800508c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050b4:	2300      	movs	r3, #0
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f0:	d172      	bne.n	80051d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b22      	cmp	r3, #34	; 0x22
 80050f6:	d002      	beq.n	80050fe <I2C_Slave_STOPF+0x6a>
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b2a      	cmp	r3, #42	; 0x2a
 80050fc:	d135      	bne.n	800516a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005130:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fade 	bl	80036f8 <HAL_DMA_GetState>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d049      	beq.n	80051d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4a69      	ldr	r2, [pc, #420]	; (80052ec <I2C_Slave_STOPF+0x258>)
 8005148:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe f926 	bl	80033a0 <HAL_DMA_Abort_IT>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03d      	beq.n	80051d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005168:	e035      	b.n	80051d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe faa8 	bl	80036f8 <HAL_DMA_GetState>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d014      	beq.n	80051d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	4a4e      	ldr	r2, [pc, #312]	; (80052ec <I2C_Slave_STOPF+0x258>)
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe f8f0 	bl	80033a0 <HAL_DMA_Abort_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
 80051d4:	e000      	b.n	80051d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03e      	beq.n	8005260 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d112      	bne.n	8005216 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d112      	bne.n	800524a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8b3 	bl	80053d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800526e:	e039      	b.n	80052e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b2a      	cmp	r3, #42	; 0x2a
 8005274:	d109      	bne.n	800528a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2228      	movs	r2, #40	; 0x28
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff f827 	bl	80042d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b28      	cmp	r3, #40	; 0x28
 8005294:	d111      	bne.n	80052ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <I2C_Slave_STOPF+0x25c>)
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff f828 	bl	8004308 <HAL_I2C_ListenCpltCallback>
}
 80052b8:	e014      	b.n	80052e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	2b22      	cmp	r3, #34	; 0x22
 80052c0:	d002      	beq.n	80052c8 <I2C_Slave_STOPF+0x234>
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	d10d      	bne.n	80052e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fe fffa 	bl	80042d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	08005639 	.word	0x08005639
 80052f0:	ffff0000 	.word	0xffff0000

080052f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d002      	beq.n	8005316 <I2C_Slave_AF+0x22>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b20      	cmp	r3, #32
 8005314:	d129      	bne.n	800536a <I2C_Slave_AF+0x76>
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b28      	cmp	r3, #40	; 0x28
 800531a:	d126      	bne.n	800536a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <I2C_Slave_AF+0xdc>)
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005330:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800533a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fe ffd0 	bl	8004308 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005368:	e02e      	b.n	80053c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b21      	cmp	r3, #33	; 0x21
 800536e:	d126      	bne.n	80053be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <I2C_Slave_AF+0xdc>)
 8005374:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2221      	movs	r2, #33	; 0x21
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800539a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fe ff84 	bl	80042c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80053bc:	e004      	b.n	80053c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053c6:	615a      	str	r2, [r3, #20]
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	ffff0000 	.word	0xffff0000

080053d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d002      	beq.n	80053f8 <I2C_ITError+0x24>
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d10a      	bne.n	800540e <I2C_ITError+0x3a>
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b22      	cmp	r3, #34	; 0x22
 80053fc:	d107      	bne.n	800540e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800540c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005414:	2b28      	cmp	r3, #40	; 0x28
 8005416:	d107      	bne.n	8005428 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2228      	movs	r2, #40	; 0x28
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005426:	e015      	b.n	8005454 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	d00a      	beq.n	800544e <I2C_ITError+0x7a>
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b60      	cmp	r3, #96	; 0x60
 800543c:	d007      	beq.n	800544e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d162      	bne.n	800552a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005472:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d020      	beq.n	80054c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	4a6a      	ldr	r2, [pc, #424]	; (8005630 <I2C_ITError+0x25c>)
 8005488:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd ff86 	bl	80033a0 <HAL_DMA_Abort_IT>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8089 	beq.w	80055ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054be:	4610      	mov	r0, r2
 80054c0:	4798      	blx	r3
 80054c2:	e074      	b.n	80055ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	4a59      	ldr	r2, [pc, #356]	; (8005630 <I2C_ITError+0x25c>)
 80054ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fd ff65 	bl	80033a0 <HAL_DMA_Abort_IT>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d068      	beq.n	80055ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d10b      	bne.n	8005502 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
 8005528:	e041      	b.n	80055ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b60      	cmp	r3, #96	; 0x60
 8005534:	d125      	bne.n	8005582 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d10b      	bne.n	800556a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fe feec 	bl	8004358 <HAL_I2C_AbortCpltCallback>
 8005580:	e015      	b.n	80055ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d10b      	bne.n	80055a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fe fecb 	bl	8004344 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10e      	bne.n	80055dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d109      	bne.n	80055dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d113      	bne.n	8005628 <I2C_ITError+0x254>
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b28      	cmp	r3, #40	; 0x28
 8005604:	d110      	bne.n	8005628 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <I2C_ITError+0x260>)
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fe fe70 	bl	8004308 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08005639 	.word	0x08005639
 8005634:	ffff0000 	.word	0xffff0000

08005638 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005652:	4b4b      	ldr	r3, [pc, #300]	; (8005780 <I2C_DMAAbort+0x148>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	08db      	lsrs	r3, r3, #3
 8005658:	4a4a      	ldr	r2, [pc, #296]	; (8005784 <I2C_DMAAbort+0x14c>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0a1a      	lsrs	r2, r3, #8
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	00da      	lsls	r2, r3, #3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800567e:	e00a      	b.n	8005696 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d0ea      	beq.n	800566c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	2200      	movs	r2, #0
 80056a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	2200      	movs	r2, #0
 80056b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	2200      	movs	r2, #0
 80056da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	2200      	movs	r2, #0
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b60      	cmp	r3, #96	; 0x60
 8005706:	d10e      	bne.n	8005726 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7fe fe1a 	bl	8004358 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005724:	e027      	b.n	8005776 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800572c:	2b28      	cmp	r3, #40	; 0x28
 800572e:	d117      	bne.n	8005760 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800574e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2228      	movs	r2, #40	; 0x28
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800575e:	e007      	b.n	8005770 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005770:	6978      	ldr	r0, [r7, #20]
 8005772:	f7fe fde7 	bl	8004344 <HAL_I2C_ErrorCallback>
}
 8005776:	bf00      	nop
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	2000000c 	.word	0x2000000c
 8005784:	14f8b589 	.word	0x14f8b589

08005788 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	08db      	lsrs	r3, r3, #3
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	0a1a      	lsrs	r2, r3, #8
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e008      	b.n	80057d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d4:	d0e9      	beq.n	80057aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	2000000c 	.word	0x2000000c
 80057e8:	14f8b589 	.word	0x14f8b589

080057ec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057fc:	d103      	bne.n	8005806 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005804:	e007      	b.n	8005816 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800580e:	d102      	bne.n	8005816 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2208      	movs	r2, #8
 8005814:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e267      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d075      	beq.n	800592e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005842:	4b88      	ldr	r3, [pc, #544]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	2b04      	cmp	r3, #4
 800584c:	d00c      	beq.n	8005868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800584e:	4b85      	ldr	r3, [pc, #532]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005856:	2b08      	cmp	r3, #8
 8005858:	d112      	bne.n	8005880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800585a:	4b82      	ldr	r3, [pc, #520]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005866:	d10b      	bne.n	8005880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005868:	4b7e      	ldr	r3, [pc, #504]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d05b      	beq.n	800592c <HAL_RCC_OscConfig+0x108>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d157      	bne.n	800592c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e242      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d106      	bne.n	8005898 <HAL_RCC_OscConfig+0x74>
 800588a:	4b76      	ldr	r3, [pc, #472]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a75      	ldr	r2, [pc, #468]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e01d      	b.n	80058d4 <HAL_RCC_OscConfig+0xb0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCC_OscConfig+0x98>
 80058a2:	4b70      	ldr	r3, [pc, #448]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a6f      	ldr	r2, [pc, #444]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4b6d      	ldr	r3, [pc, #436]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6c      	ldr	r2, [pc, #432]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e00b      	b.n	80058d4 <HAL_RCC_OscConfig+0xb0>
 80058bc:	4b69      	ldr	r3, [pc, #420]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a68      	ldr	r2, [pc, #416]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	4b66      	ldr	r3, [pc, #408]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a65      	ldr	r2, [pc, #404]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d013      	beq.n	8005904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fd fb70 	bl	8002fc0 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fd fb6c 	bl	8002fc0 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e207      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	4b5b      	ldr	r3, [pc, #364]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0xc0>
 8005902:	e014      	b.n	800592e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fd fb5c 	bl	8002fc0 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590c:	f7fd fb58 	bl	8002fc0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e1f3      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	4b51      	ldr	r3, [pc, #324]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0xe8>
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d063      	beq.n	8005a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800593a:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005946:	4b47      	ldr	r3, [pc, #284]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800594e:	2b08      	cmp	r3, #8
 8005950:	d11c      	bne.n	800598c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005952:	4b44      	ldr	r3, [pc, #272]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d116      	bne.n	800598c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800595e:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_RCC_OscConfig+0x152>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d001      	beq.n	8005976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e1c7      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4937      	ldr	r1, [pc, #220]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005986:	4313      	orrs	r3, r2
 8005988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598a:	e03a      	b.n	8005a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005994:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <HAL_RCC_OscConfig+0x244>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599a:	f7fd fb11 	bl	8002fc0 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a2:	f7fd fb0d 	bl	8002fc0 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e1a8      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b4:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4925      	ldr	r1, [pc, #148]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]
 80059d4:	e015      	b.n	8005a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_RCC_OscConfig+0x244>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fd faf0 	bl	8002fc0 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e4:	f7fd faec 	bl	8002fc0 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e187      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d036      	beq.n	8005a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <HAL_RCC_OscConfig+0x248>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fd fad0 	bl	8002fc0 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a24:	f7fd facc 	bl	8002fc0 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e167      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_OscConfig+0x240>)
 8005a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x200>
 8005a42:	e01b      	b.n	8005a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCC_OscConfig+0x248>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4a:	f7fd fab9 	bl	8002fc0 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a50:	e00e      	b.n	8005a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a52:	f7fd fab5 	bl	8002fc0 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d907      	bls.n	8005a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e150      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
 8005a64:	40023800 	.word	0x40023800
 8005a68:	42470000 	.word	0x42470000
 8005a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a70:	4b88      	ldr	r3, [pc, #544]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ea      	bne.n	8005a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8097 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a8e:	4b81      	ldr	r3, [pc, #516]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	4b7d      	ldr	r3, [pc, #500]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4a7c      	ldr	r2, [pc, #496]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aaa:	4b7a      	ldr	r3, [pc, #488]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	60bb      	str	r3, [r7, #8]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aba:	4b77      	ldr	r3, [pc, #476]	; (8005c98 <HAL_RCC_OscConfig+0x474>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d118      	bne.n	8005af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ac6:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <HAL_RCC_OscConfig+0x474>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a73      	ldr	r2, [pc, #460]	; (8005c98 <HAL_RCC_OscConfig+0x474>)
 8005acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad2:	f7fd fa75 	bl	8002fc0 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ada:	f7fd fa71 	bl	8002fc0 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e10c      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aec:	4b6a      	ldr	r3, [pc, #424]	; (8005c98 <HAL_RCC_OscConfig+0x474>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d106      	bne.n	8005b0e <HAL_RCC_OscConfig+0x2ea>
 8005b00:	4b64      	ldr	r3, [pc, #400]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	4a63      	ldr	r2, [pc, #396]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0c:	e01c      	b.n	8005b48 <HAL_RCC_OscConfig+0x324>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x30c>
 8005b16:	4b5f      	ldr	r3, [pc, #380]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	4a5e      	ldr	r2, [pc, #376]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	f043 0304 	orr.w	r3, r3, #4
 8005b20:	6713      	str	r3, [r2, #112]	; 0x70
 8005b22:	4b5c      	ldr	r3, [pc, #368]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	4a5b      	ldr	r2, [pc, #364]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2e:	e00b      	b.n	8005b48 <HAL_RCC_OscConfig+0x324>
 8005b30:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	4a57      	ldr	r2, [pc, #348]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3c:	4b55      	ldr	r3, [pc, #340]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	4a54      	ldr	r2, [pc, #336]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b42:	f023 0304 	bic.w	r3, r3, #4
 8005b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b50:	f7fd fa36 	bl	8002fc0 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b56:	e00a      	b.n	8005b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b58:	f7fd fa32 	bl	8002fc0 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e0cb      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6e:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ee      	beq.n	8005b58 <HAL_RCC_OscConfig+0x334>
 8005b7a:	e014      	b.n	8005ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7c:	f7fd fa20 	bl	8002fc0 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b84:	f7fd fa1c 	bl	8002fc0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e0b5      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b9a:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1ee      	bne.n	8005b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d105      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bac:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	4a38      	ldr	r2, [pc, #224]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80a1 	beq.w	8005d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bc2:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d05c      	beq.n	8005c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d141      	bne.n	8005c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd6:	4b31      	ldr	r3, [pc, #196]	; (8005c9c <HAL_RCC_OscConfig+0x478>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fd f9f0 	bl	8002fc0 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fd f9ec 	bl	8002fc0 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e087      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69da      	ldr	r2, [r3, #28]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	019b      	lsls	r3, r3, #6
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	061b      	lsls	r3, r3, #24
 8005c26:	491b      	ldr	r1, [pc, #108]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_RCC_OscConfig+0x478>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c32:	f7fd f9c5 	bl	8002fc0 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3a:	f7fd f9c1 	bl	8002fc0 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e05c      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x416>
 8005c58:	e054      	b.n	8005d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <HAL_RCC_OscConfig+0x478>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c60:	f7fd f9ae 	bl	8002fc0 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fd f9aa 	bl	8002fc0 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e045      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x444>
 8005c86:	e03d      	b.n	8005d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e038      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ca0:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <HAL_RCC_OscConfig+0x4ec>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d028      	beq.n	8005d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d121      	bne.n	8005d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d11a      	bne.n	8005d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d111      	bne.n	8005d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d107      	bne.n	8005d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40023800 	.word	0x40023800

08005d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0cc      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d28:	4b68      	ldr	r3, [pc, #416]	; (8005ecc <HAL_RCC_ClockConfig+0x1b8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d90c      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d36:	4b65      	ldr	r3, [pc, #404]	; (8005ecc <HAL_RCC_ClockConfig+0x1b8>)
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3e:	4b63      	ldr	r3, [pc, #396]	; (8005ecc <HAL_RCC_ClockConfig+0x1b8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0b8      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d020      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d68:	4b59      	ldr	r3, [pc, #356]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4a58      	ldr	r2, [pc, #352]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d80:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4a52      	ldr	r2, [pc, #328]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8c:	4b50      	ldr	r3, [pc, #320]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	494d      	ldr	r1, [pc, #308]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d044      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d107      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d119      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e07f      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d107      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd2:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e06f      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e067      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005df2:	4b37      	ldr	r3, [pc, #220]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f023 0203 	bic.w	r2, r3, #3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	4934      	ldr	r1, [pc, #208]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e04:	f7fd f8dc 	bl	8002fc0 <HAL_GetTick>
 8005e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e0c:	f7fd f8d8 	bl	8002fc0 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e04f      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e22:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 020c 	and.w	r2, r3, #12
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d1eb      	bne.n	8005e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <HAL_RCC_ClockConfig+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d20c      	bcs.n	8005e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <HAL_RCC_ClockConfig+0x1b8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e032      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4916      	ldr	r1, [pc, #88]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e9a:	f000 f821 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	490a      	ldr	r1, [pc, #40]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8005eac:	5ccb      	ldrb	r3, [r1, r3]
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_RCC_ClockConfig+0x1c8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd f83c 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40023c00 	.word	0x40023c00
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	0800a920 	.word	0x0800a920
 8005ed8:	2000000c 	.word	0x2000000c
 8005edc:	20000010 	.word	0x20000010

08005ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee4:	b094      	sub	sp, #80	; 0x50
 8005ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	647b      	str	r3, [r7, #68]	; 0x44
 8005eec:	2300      	movs	r3, #0
 8005eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ef8:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 030c 	and.w	r3, r3, #12
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d00d      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x40>
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	f200 80e1 	bhi.w	80060cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x34>
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d003      	beq.n	8005f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f12:	e0db      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4b73      	ldr	r3, [pc, #460]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f18:	e0db      	b.n	80060d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f1a:	4b73      	ldr	r3, [pc, #460]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f1e:	e0d8      	b.n	80060d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f20:	4b6f      	ldr	r3, [pc, #444]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f2a:	4b6d      	ldr	r3, [pc, #436]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d063      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f36:	4b6a      	ldr	r3, [pc, #424]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	099b      	lsrs	r3, r3, #6
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f52:	4622      	mov	r2, r4
 8005f54:	462b      	mov	r3, r5
 8005f56:	f04f 0000 	mov.w	r0, #0
 8005f5a:	f04f 0100 	mov.w	r1, #0
 8005f5e:	0159      	lsls	r1, r3, #5
 8005f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f64:	0150      	lsls	r0, r2, #5
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	1a51      	subs	r1, r2, r1
 8005f6e:	6139      	str	r1, [r7, #16]
 8005f70:	4629      	mov	r1, r5
 8005f72:	eb63 0301 	sbc.w	r3, r3, r1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f84:	4659      	mov	r1, fp
 8005f86:	018b      	lsls	r3, r1, #6
 8005f88:	4651      	mov	r1, sl
 8005f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f8e:	4651      	mov	r1, sl
 8005f90:	018a      	lsls	r2, r1, #6
 8005f92:	4651      	mov	r1, sl
 8005f94:	ebb2 0801 	subs.w	r8, r2, r1
 8005f98:	4659      	mov	r1, fp
 8005f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb2:	4690      	mov	r8, r2
 8005fb4:	4699      	mov	r9, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	eb18 0303 	adds.w	r3, r8, r3
 8005fbc:	60bb      	str	r3, [r7, #8]
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	eb49 0303 	adc.w	r3, r9, r3
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	024b      	lsls	r3, r1, #9
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fdc:	4621      	mov	r1, r4
 8005fde:	024a      	lsls	r2, r1, #9
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ff0:	f7fa f8f2 	bl	80001d8 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ffc:	e058      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ffe:	4b38      	ldr	r3, [pc, #224]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	2200      	movs	r2, #0
 8006006:	4618      	mov	r0, r3
 8006008:	4611      	mov	r1, r2
 800600a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800600e:	623b      	str	r3, [r7, #32]
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	f04f 0000 	mov.w	r0, #0
 8006020:	f04f 0100 	mov.w	r1, #0
 8006024:	0159      	lsls	r1, r3, #5
 8006026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800602a:	0150      	lsls	r0, r2, #5
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4641      	mov	r1, r8
 8006032:	ebb2 0a01 	subs.w	sl, r2, r1
 8006036:	4649      	mov	r1, r9
 8006038:	eb63 0b01 	sbc.w	fp, r3, r1
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800604c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006050:	ebb2 040a 	subs.w	r4, r2, sl
 8006054:	eb63 050b 	sbc.w	r5, r3, fp
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	00eb      	lsls	r3, r5, #3
 8006062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006066:	00e2      	lsls	r2, r4, #3
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	4643      	mov	r3, r8
 800606e:	18e3      	adds	r3, r4, r3
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	464b      	mov	r3, r9
 8006074:	eb45 0303 	adc.w	r3, r5, r3
 8006078:	607b      	str	r3, [r7, #4]
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006086:	4629      	mov	r1, r5
 8006088:	028b      	lsls	r3, r1, #10
 800608a:	4621      	mov	r1, r4
 800608c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006090:	4621      	mov	r1, r4
 8006092:	028a      	lsls	r2, r1, #10
 8006094:	4610      	mov	r0, r2
 8006096:	4619      	mov	r1, r3
 8006098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609a:	2200      	movs	r2, #0
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	61fa      	str	r2, [r7, #28]
 80060a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a4:	f7fa f898 	bl	80001d8 <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4613      	mov	r3, r2
 80060ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	0c1b      	lsrs	r3, r3, #16
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	3301      	adds	r3, #1
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060ca:	e002      	b.n	80060d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80060ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3750      	adds	r7, #80	; 0x50
 80060d8:	46bd      	mov	sp, r7
 80060da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060de:	bf00      	nop
 80060e0:	40023800 	.word	0x40023800
 80060e4:	00f42400 	.word	0x00f42400
 80060e8:	007a1200 	.word	0x007a1200

080060ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060f0:	4b03      	ldr	r3, [pc, #12]	; (8006100 <HAL_RCC_GetHCLKFreq+0x14>)
 80060f2:	681b      	ldr	r3, [r3, #0]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	2000000c 	.word	0x2000000c

08006104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006108:	f7ff fff0 	bl	80060ec <HAL_RCC_GetHCLKFreq>
 800610c:	4602      	mov	r2, r0
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	0a9b      	lsrs	r3, r3, #10
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	4903      	ldr	r1, [pc, #12]	; (8006128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800611a:	5ccb      	ldrb	r3, [r1, r3]
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006120:	4618      	mov	r0, r3
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40023800 	.word	0x40023800
 8006128:	0800a930 	.word	0x0800a930

0800612c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006130:	f7ff ffdc 	bl	80060ec <HAL_RCC_GetHCLKFreq>
 8006134:	4602      	mov	r2, r0
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	0b5b      	lsrs	r3, r3, #13
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	4903      	ldr	r1, [pc, #12]	; (8006150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006142:	5ccb      	ldrb	r3, [r1, r3]
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40023800 	.word	0x40023800
 8006150:	0800a930 	.word	0x0800a930

08006154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07b      	b.n	800625e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006176:	d009      	beq.n	800618c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	61da      	str	r2, [r3, #28]
 800617e:	e005      	b.n	800618c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc fad8 	bl	800275c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	ea42 0103 	orr.w	r1, r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	f003 0104 	and.w	r1, r3, #4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0210 	and.w	r2, r3, #16
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b088      	sub	sp, #32
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_SPI_Transmit+0x22>
 8006284:	2302      	movs	r3, #2
 8006286:	e126      	b.n	80064d6 <HAL_SPI_Transmit+0x270>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006290:	f7fc fe96 	bl	8002fc0 <HAL_GetTick>
 8006294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d002      	beq.n	80062ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062aa:	e10b      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_Transmit+0x52>
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062bc:	e102      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2203      	movs	r2, #3
 80062c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006304:	d10f      	bne.n	8006326 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006324:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d007      	beq.n	8006344 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634c:	d14b      	bne.n	80063e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_SPI_Transmit+0xf6>
 8006356:	8afb      	ldrh	r3, [r7, #22]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d13e      	bne.n	80063da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	881a      	ldrh	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	1c9a      	adds	r2, r3, #2
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006380:	e02b      	b.n	80063da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d112      	bne.n	80063b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80063b4:	e011      	b.n	80063da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b6:	f7fc fe03 	bl	8002fc0 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d803      	bhi.n	80063ce <HAL_SPI_Transmit+0x168>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d102      	bne.n	80063d4 <HAL_SPI_Transmit+0x16e>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063d8:	e074      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1ce      	bne.n	8006382 <HAL_SPI_Transmit+0x11c>
 80063e4:	e04c      	b.n	8006480 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_Transmit+0x18e>
 80063ee:	8afb      	ldrh	r3, [r7, #22]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d140      	bne.n	8006476 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800641a:	e02c      	b.n	8006476 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d113      	bne.n	8006452 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006450:	e011      	b.n	8006476 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006452:	f7fc fdb5 	bl	8002fc0 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d803      	bhi.n	800646a <HAL_SPI_Transmit+0x204>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d102      	bne.n	8006470 <HAL_SPI_Transmit+0x20a>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006474:	e026      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1cd      	bne.n	800641c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fce9 	bl	8006e5c <SPI_EndRxTxTransaction>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e000      	b.n	80064c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80064c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b088      	sub	sp, #32
 80064e2:	af02      	add	r7, sp, #8
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fa:	d112      	bne.n	8006522 <HAL_SPI_Receive+0x44>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10e      	bne.n	8006522 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2204      	movs	r2, #4
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f8f1 	bl	8006700 <HAL_SPI_TransmitReceive>
 800651e:	4603      	mov	r3, r0
 8006520:	e0ea      	b.n	80066f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_SPI_Receive+0x52>
 800652c:	2302      	movs	r3, #2
 800652e:	e0e3      	b.n	80066f8 <HAL_SPI_Receive+0x21a>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006538:	f7fc fd42 	bl	8002fc0 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	d002      	beq.n	8006550 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800654a:	2302      	movs	r3, #2
 800654c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800654e:	e0ca      	b.n	80066e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_SPI_Receive+0x7e>
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006560:	e0c1      	b.n	80066e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2204      	movs	r2, #4
 8006566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a8:	d10f      	bne.n	80065ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d007      	beq.n	80065e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d162      	bne.n	80066b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065f0:	e02e      	b.n	8006650 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d115      	bne.n	800662c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f103 020c 	add.w	r2, r3, #12
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	7812      	ldrb	r2, [r2, #0]
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	87da      	strh	r2, [r3, #62]	; 0x3e
 800662a:	e011      	b.n	8006650 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800662c:	f7fc fcc8 	bl	8002fc0 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d803      	bhi.n	8006644 <HAL_SPI_Receive+0x166>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d102      	bne.n	800664a <HAL_SPI_Receive+0x16c>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800664e:	e04a      	b.n	80066e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1cb      	bne.n	80065f2 <HAL_SPI_Receive+0x114>
 800665a:	e031      	b.n	80066c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d113      	bne.n	8006692 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	b292      	uxth	r2, r2
 8006676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006690:	e011      	b.n	80066b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006692:	f7fc fc95 	bl	8002fc0 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d803      	bhi.n	80066aa <HAL_SPI_Receive+0x1cc>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d102      	bne.n	80066b0 <HAL_SPI_Receive+0x1d2>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066b4:	e017      	b.n	80066e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1cd      	bne.n	800665c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fb63 	bl	8006d90 <SPI_EndRxTransaction>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
 80066e2:	e000      	b.n	80066e6 <HAL_SPI_Receive+0x208>
  }

error :
 80066e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08c      	sub	sp, #48	; 0x30
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800670e:	2301      	movs	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x26>
 8006722:	2302      	movs	r3, #2
 8006724:	e18a      	b.n	8006a3c <HAL_SPI_TransmitReceive+0x33c>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800672e:	f7fc fc47 	bl	8002fc0 <HAL_GetTick>
 8006732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800674c:	2b01      	cmp	r3, #1
 800674e:	d00f      	beq.n	8006770 <HAL_SPI_TransmitReceive+0x70>
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006756:	d107      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x68>
 8006760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006764:	2b04      	cmp	r3, #4
 8006766:	d003      	beq.n	8006770 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006768:	2302      	movs	r3, #2
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800676e:	e15b      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_SPI_TransmitReceive+0x82>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <HAL_SPI_TransmitReceive+0x82>
 800677c:	887b      	ldrh	r3, [r7, #2]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006788:	e14e      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b04      	cmp	r3, #4
 8006794:	d003      	beq.n	800679e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2205      	movs	r2, #5
 800679a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	887a      	ldrh	r2, [r7, #2]
 80067ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	887a      	ldrh	r2, [r7, #2]
 80067c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d007      	beq.n	80067f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fa:	d178      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_SPI_TransmitReceive+0x10a>
 8006804:	8b7b      	ldrh	r3, [r7, #26]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d166      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	881a      	ldrh	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	1c9a      	adds	r2, r3, #2
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682e:	e053      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d11b      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x176>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d016      	beq.n	8006876 <HAL_SPI_TransmitReceive+0x176>
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	2b01      	cmp	r3, #1
 800684c:	d113      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	881a      	ldrh	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	1c9a      	adds	r2, r3, #2
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d119      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x1b8>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d014      	beq.n	80068b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	b292      	uxth	r2, r2
 800689a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068b4:	2301      	movs	r3, #1
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068b8:	f7fc fb82 	bl	8002fc0 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d807      	bhi.n	80068d8 <HAL_SPI_TransmitReceive+0x1d8>
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d003      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068d6:	e0a7      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1a6      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x130>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1a1      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x130>
 80068ec:	e07c      	b.n	80069e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x1fc>
 80068f6:	8b7b      	ldrh	r3, [r7, #26]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d16b      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	330c      	adds	r3, #12
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006922:	e057      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b02      	cmp	r3, #2
 8006930:	d11c      	bne.n	800696c <HAL_SPI_TransmitReceive+0x26c>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d017      	beq.n	800696c <HAL_SPI_TransmitReceive+0x26c>
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d114      	bne.n	800696c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	330c      	adds	r3, #12
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d119      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x2ae>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d014      	beq.n	80069ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069aa:	2301      	movs	r3, #1
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069ae:	f7fc fb07 	bl	8002fc0 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d803      	bhi.n	80069c6 <HAL_SPI_TransmitReceive+0x2c6>
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d102      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x2cc>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069d2:	e029      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1a2      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x224>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d19d      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fa35 	bl	8006e5c <SPI_EndRxTxTransaction>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a04:	e010      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	e000      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3730      	adds	r7, #48	; 0x30
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	099b      	lsrs	r3, r3, #6
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	099b      	lsrs	r3, r3, #6
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
    return;
 8006a86:	e0d7      	b.n	8006c38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <HAL_SPI_IRQHandler+0x66>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4798      	blx	r3
    return;
 8006aa8:	e0c6      	b.n	8006c38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_SPI_IRQHandler+0x8c>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	099b      	lsrs	r3, r3, #6
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80b4 	beq.w	8006c38 <HAL_SPI_IRQHandler+0x1f4>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80ad 	beq.w	8006c38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	099b      	lsrs	r3, r3, #6
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d023      	beq.n	8006b32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d011      	beq.n	8006b1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	e00b      	b.n	8006b32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	693b      	ldr	r3, [r7, #16]
        return;
 8006b30:	e082      	b.n	8006c38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d014      	beq.n	8006b68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f043 0208 	orr.w	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b80:	2300      	movs	r3, #0
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d04f      	beq.n	8006c36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_SPI_IRQHandler+0x17e>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d034      	beq.n	8006c2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0203 	bic.w	r2, r2, #3
 8006bd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <HAL_SPI_IRQHandler+0x1fc>)
 8006be0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fc fbda 	bl	80033a0 <HAL_DMA_Abort_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d016      	beq.n	8006c34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <HAL_SPI_IRQHandler+0x1fc>)
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fc fbc4 	bl	80033a0 <HAL_DMA_Abort_IT>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c2a:	e003      	b.n	8006c34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f809 	bl	8006c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c32:	e000      	b.n	8006c36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006c34:	bf00      	nop
    return;
 8006c36:	bf00      	nop
  }
}
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	08006c59 	.word	0x08006c59

08006c44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff ffe6 	bl	8006c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c90:	f7fc f996 	bl	8002fc0 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ca0:	f7fc f98e 	bl	8002fc0 <HAL_GetTick>
 8006ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ca6:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	015b      	lsls	r3, r3, #5
 8006cac:	0d1b      	lsrs	r3, r3, #20
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cb6:	e054      	b.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d050      	beq.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cc0:	f7fc f97e 	bl	8002fc0 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d902      	bls.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d13d      	bne.n	8006d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cee:	d111      	bne.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf8:	d004      	beq.n	8006d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d02:	d107      	bne.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1c:	d10f      	bne.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e017      	b.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	bf0c      	ite	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	2300      	movne	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d19b      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006da4:	d111      	bne.n	8006dca <SPI_EndRxTransaction+0x3a>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dae:	d004      	beq.n	8006dba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db8:	d107      	bne.n	8006dca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd2:	d12a      	bne.n	8006e2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	d012      	beq.n	8006e04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff ff49 	bl	8006c80 <SPI_WaitFlagStateUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02d      	beq.n	8006e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df8:	f043 0220 	orr.w	r2, r3, #32
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e026      	b.n	8006e52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff ff36 	bl	8006c80 <SPI_WaitFlagStateUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01a      	beq.n	8006e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e013      	b.n	8006e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2200      	movs	r2, #0
 8006e32:	2101      	movs	r1, #1
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff ff23 	bl	8006c80 <SPI_WaitFlagStateUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f043 0220 	orr.w	r2, r3, #32
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e000      	b.n	8006e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e68:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <SPI_EndRxTxTransaction+0x7c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <SPI_EndRxTxTransaction+0x80>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	0d5b      	lsrs	r3, r3, #21
 8006e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e86:	d112      	bne.n	8006eae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff fef4 	bl	8006c80 <SPI_WaitFlagStateUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d016      	beq.n	8006ecc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	f043 0220 	orr.w	r2, r3, #32
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e00f      	b.n	8006ece <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b80      	cmp	r3, #128	; 0x80
 8006ec6:	d0f2      	beq.n	8006eae <SPI_EndRxTxTransaction+0x52>
 8006ec8:	e000      	b.n	8006ecc <SPI_EndRxTxTransaction+0x70>
        break;
 8006eca:	bf00      	nop
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	2000000c 	.word	0x2000000c
 8006edc:	165e9f81 	.word	0x165e9f81

08006ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e041      	b.n	8006f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fb fe56 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f000 fae0 	bl	80074e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d001      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e04e      	b.n	8007036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a23      	ldr	r2, [pc, #140]	; (8007044 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d01d      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1e      	ldr	r2, [pc, #120]	; (800704c <HAL_TIM_Base_Start_IT+0xcc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1c      	ldr	r2, [pc, #112]	; (8007050 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a19      	ldr	r2, [pc, #100]	; (8007058 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d111      	bne.n	8007024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b06      	cmp	r3, #6
 8007010:	d010      	beq.n	8007034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0201 	orr.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007022:	e007      	b.n	8007034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40001800 	.word	0x40001800

08007060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e041      	b.n	80070f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fb fd74 	bl	8002b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f000 fa20 	bl	80074e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b02      	cmp	r3, #2
 8007112:	d122      	bne.n	800715a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d11b      	bne.n	800715a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f06f 0202 	mvn.w	r2, #2
 800712a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f9b1 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 8007146:	e005      	b.n	8007154 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9a3 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9b4 	bl	80074bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b04      	cmp	r3, #4
 8007166:	d122      	bne.n	80071ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d11b      	bne.n	80071ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f06f 0204 	mvn.w	r2, #4
 800717e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f987 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 800719a:	e005      	b.n	80071a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f979 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f98a 	bl	80074bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d122      	bne.n	8007202 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d11b      	bne.n	8007202 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f06f 0208 	mvn.w	r2, #8
 80071d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2204      	movs	r2, #4
 80071d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f95d 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 80071ee:	e005      	b.n	80071fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f94f 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f960 	bl	80074bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b10      	cmp	r3, #16
 800720e:	d122      	bne.n	8007256 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d11b      	bne.n	8007256 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f06f 0210 	mvn.w	r2, #16
 8007226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2208      	movs	r2, #8
 800722c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f933 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 8007242:	e005      	b.n	8007250 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f925 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f936 	bl	80074bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d10e      	bne.n	8007282 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d107      	bne.n	8007282 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f06f 0201 	mvn.w	r2, #1
 800727a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fb fbb3 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728c:	2b80      	cmp	r3, #128	; 0x80
 800728e:	d10e      	bne.n	80072ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d107      	bne.n	80072ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fbf1 	bl	8007a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	d10e      	bne.n	80072da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b40      	cmp	r3, #64	; 0x40
 80072c8:	d107      	bne.n	80072da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f8fb 	bl	80074d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d10e      	bne.n	8007306 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f06f 0220 	mvn.w	r2, #32
 80072fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbbb 	bl	8007a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800732a:	2302      	movs	r3, #2
 800732c:	e0ae      	b.n	800748c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b0c      	cmp	r3, #12
 800733a:	f200 809f 	bhi.w	800747c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800733e:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	08007379 	.word	0x08007379
 8007348:	0800747d 	.word	0x0800747d
 800734c:	0800747d 	.word	0x0800747d
 8007350:	0800747d 	.word	0x0800747d
 8007354:	080073b9 	.word	0x080073b9
 8007358:	0800747d 	.word	0x0800747d
 800735c:	0800747d 	.word	0x0800747d
 8007360:	0800747d 	.word	0x0800747d
 8007364:	080073fb 	.word	0x080073fb
 8007368:	0800747d 	.word	0x0800747d
 800736c:	0800747d 	.word	0x0800747d
 8007370:	0800747d 	.word	0x0800747d
 8007374:	0800743b 	.word	0x0800743b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 f950 	bl	8007624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0208 	orr.w	r2, r2, #8
 8007392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0204 	bic.w	r2, r2, #4
 80073a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6999      	ldr	r1, [r3, #24]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691a      	ldr	r2, [r3, #16]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	619a      	str	r2, [r3, #24]
      break;
 80073b6:	e064      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f9a0 	bl	8007704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6999      	ldr	r1, [r3, #24]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	021a      	lsls	r2, r3, #8
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	619a      	str	r2, [r3, #24]
      break;
 80073f8:	e043      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 f9f5 	bl	80077f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0208 	orr.w	r2, r2, #8
 8007414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0204 	bic.w	r2, r2, #4
 8007424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69d9      	ldr	r1, [r3, #28]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	61da      	str	r2, [r3, #28]
      break;
 8007438:	e023      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa49 	bl	80078d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69d9      	ldr	r1, [r3, #28]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	021a      	lsls	r2, r3, #8
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	61da      	str	r2, [r3, #28]
      break;
 800747a:	e002      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
      break;
 8007480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a40      	ldr	r2, [pc, #256]	; (80075f8 <TIM_Base_SetConfig+0x114>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d013      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007502:	d00f      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a3d      	ldr	r2, [pc, #244]	; (80075fc <TIM_Base_SetConfig+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00b      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a3c      	ldr	r2, [pc, #240]	; (8007600 <TIM_Base_SetConfig+0x11c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d007      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a3b      	ldr	r2, [pc, #236]	; (8007604 <TIM_Base_SetConfig+0x120>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a3a      	ldr	r2, [pc, #232]	; (8007608 <TIM_Base_SetConfig+0x124>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d108      	bne.n	8007536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2f      	ldr	r2, [pc, #188]	; (80075f8 <TIM_Base_SetConfig+0x114>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d02b      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007544:	d027      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2c      	ldr	r2, [pc, #176]	; (80075fc <TIM_Base_SetConfig+0x118>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d023      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a2b      	ldr	r2, [pc, #172]	; (8007600 <TIM_Base_SetConfig+0x11c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01f      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <TIM_Base_SetConfig+0x120>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01b      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a29      	ldr	r2, [pc, #164]	; (8007608 <TIM_Base_SetConfig+0x124>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d017      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a28      	ldr	r2, [pc, #160]	; (800760c <TIM_Base_SetConfig+0x128>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a27      	ldr	r2, [pc, #156]	; (8007610 <TIM_Base_SetConfig+0x12c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a26      	ldr	r2, [pc, #152]	; (8007614 <TIM_Base_SetConfig+0x130>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a25      	ldr	r2, [pc, #148]	; (8007618 <TIM_Base_SetConfig+0x134>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a24      	ldr	r2, [pc, #144]	; (800761c <TIM_Base_SetConfig+0x138>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a23      	ldr	r2, [pc, #140]	; (8007620 <TIM_Base_SetConfig+0x13c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d108      	bne.n	80075a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <TIM_Base_SetConfig+0x114>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_Base_SetConfig+0xf8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <TIM_Base_SetConfig+0x124>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d103      	bne.n	80075e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	615a      	str	r2, [r3, #20]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40010000 	.word	0x40010000
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
 8007608:	40010400 	.word	0x40010400
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800
 8007618:	40001800 	.word	0x40001800
 800761c:	40001c00 	.word	0x40001c00
 8007620:	40002000 	.word	0x40002000

08007624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f023 0201 	bic.w	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f023 0302 	bic.w	r3, r3, #2
 800766c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <TIM_OC1_SetConfig+0xd8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC1_SetConfig+0x64>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <TIM_OC1_SetConfig+0xdc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10c      	bne.n	80076a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0308 	bic.w	r3, r3, #8
 800768e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0304 	bic.w	r3, r3, #4
 80076a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a15      	ldr	r2, [pc, #84]	; (80076fc <TIM_OC1_SetConfig+0xd8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d003      	beq.n	80076b2 <TIM_OC1_SetConfig+0x8e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <TIM_OC1_SetConfig+0xdc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d111      	bne.n	80076d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400

08007704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0210 	bic.w	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0320 	bic.w	r3, r3, #32
 800774e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a22      	ldr	r2, [pc, #136]	; (80077e8 <TIM_OC2_SetConfig+0xe4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_OC2_SetConfig+0x68>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a21      	ldr	r2, [pc, #132]	; (80077ec <TIM_OC2_SetConfig+0xe8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d10d      	bne.n	8007788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <TIM_OC2_SetConfig+0xe4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_OC2_SetConfig+0x94>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <TIM_OC2_SetConfig+0xe8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d113      	bne.n	80077c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40010400 	.word	0x40010400

080077f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a21      	ldr	r2, [pc, #132]	; (80078d0 <TIM_OC3_SetConfig+0xe0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_OC3_SetConfig+0x66>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <TIM_OC3_SetConfig+0xe4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10d      	bne.n	8007872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800785c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <TIM_OC3_SetConfig+0xe0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_OC3_SetConfig+0x92>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <TIM_OC3_SetConfig+0xe4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d113      	bne.n	80078aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	621a      	str	r2, [r3, #32]
}
 80078c4:	bf00      	nop
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40010400 	.word	0x40010400

080078d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a12      	ldr	r2, [pc, #72]	; (800797c <TIM_OC4_SetConfig+0xa4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d003      	beq.n	8007940 <TIM_OC4_SetConfig+0x68>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a11      	ldr	r2, [pc, #68]	; (8007980 <TIM_OC4_SetConfig+0xa8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d109      	bne.n	8007954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	019b      	lsls	r3, r3, #6
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	40010000 	.word	0x40010000
 8007980:	40010400 	.word	0x40010400

08007984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007998:	2302      	movs	r3, #2
 800799a:	e05a      	b.n	8007a52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e8:	d01d      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1b      	ldr	r2, [pc, #108]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a18      	ldr	r2, [pc, #96]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a17      	ldr	r2, [pc, #92]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d10c      	bne.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40010000 	.word	0x40010000
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40000c00 	.word	0x40000c00
 8007a70:	40010400 	.word	0x40010400
 8007a74:	40014000 	.word	0x40014000
 8007a78:	40001800 	.word	0x40001800

08007a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e03f      	b.n	8007b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d106      	bne.n	8007ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fb f948 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2224      	movs	r2, #36	; 0x24
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f929 	bl	8007d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08a      	sub	sp, #40	; 0x28
 8007b42:	af02      	add	r7, sp, #8
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	d17c      	bne.n	8007c58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_UART_Transmit+0x2c>
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e075      	b.n	8007c5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_UART_Transmit+0x3e>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e06e      	b.n	8007c5a <HAL_UART_Transmit+0x11c>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2221      	movs	r2, #33	; 0x21
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b92:	f7fb fa15 	bl	8002fc0 <HAL_GetTick>
 8007b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	88fa      	ldrh	r2, [r7, #6]
 8007ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bac:	d108      	bne.n	8007bc0 <HAL_UART_Transmit+0x82>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	e003      	b.n	8007bc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bd0:	e02a      	b.n	8007c28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f840 	bl	8007c62 <UART_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e036      	b.n	8007c5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	3302      	adds	r3, #2
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e007      	b.n	8007c1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1cf      	bne.n	8007bd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2140      	movs	r1, #64	; 0x40
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f810 	bl	8007c62 <UART_WaitOnFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e006      	b.n	8007c5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e000      	b.n	8007c5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c58:	2302      	movs	r3, #2
  }
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3720      	adds	r7, #32
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b090      	sub	sp, #64	; 0x40
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c72:	e050      	b.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d04c      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c82:	f7fb f99d 	bl	8002fc0 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d241      	bcs.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cb2:	637a      	str	r2, [r7, #52]	; 0x34
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e5      	bne.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3314      	adds	r3, #20
 8007ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce6:	623a      	str	r2, [r7, #32]
 8007ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	69f9      	ldr	r1, [r7, #28]
 8007cec:	6a3a      	ldr	r2, [r7, #32]
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e00f      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d09f      	beq.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3740      	adds	r7, #64	; 0x40
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d44:	b0c0      	sub	sp, #256	; 0x100
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5c:	68d9      	ldr	r1, [r3, #12]
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	ea40 0301 	orr.w	r3, r0, r1
 8007d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d98:	f021 010c 	bic.w	r1, r1, #12
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007da6:	430b      	orrs	r3, r1
 8007da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dba:	6999      	ldr	r1, [r3, #24]
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	ea40 0301 	orr.w	r3, r0, r1
 8007dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b8f      	ldr	r3, [pc, #572]	; (800800c <UART_SetConfig+0x2cc>)
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d005      	beq.n	8007de0 <UART_SetConfig+0xa0>
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b8d      	ldr	r3, [pc, #564]	; (8008010 <UART_SetConfig+0x2d0>)
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d104      	bne.n	8007dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007de0:	f7fe f9a4 	bl	800612c <HAL_RCC_GetPCLK2Freq>
 8007de4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007de8:	e003      	b.n	8007df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dea:	f7fe f98b 	bl	8006104 <HAL_RCC_GetPCLK1Freq>
 8007dee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfc:	f040 810c 	bne.w	8008018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	1891      	adds	r1, r2, r2
 8007e18:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e1a:	415b      	adcs	r3, r3
 8007e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e22:	4621      	mov	r1, r4
 8007e24:	eb12 0801 	adds.w	r8, r2, r1
 8007e28:	4629      	mov	r1, r5
 8007e2a:	eb43 0901 	adc.w	r9, r3, r1
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e42:	4690      	mov	r8, r2
 8007e44:	4699      	mov	r9, r3
 8007e46:	4623      	mov	r3, r4
 8007e48:	eb18 0303 	adds.w	r3, r8, r3
 8007e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e50:	462b      	mov	r3, r5
 8007e52:	eb49 0303 	adc.w	r3, r9, r3
 8007e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e6e:	460b      	mov	r3, r1
 8007e70:	18db      	adds	r3, r3, r3
 8007e72:	653b      	str	r3, [r7, #80]	; 0x50
 8007e74:	4613      	mov	r3, r2
 8007e76:	eb42 0303 	adc.w	r3, r2, r3
 8007e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e84:	f7f8 f9a8 	bl	80001d8 <__aeabi_uldivmod>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4b61      	ldr	r3, [pc, #388]	; (8008014 <UART_SetConfig+0x2d4>)
 8007e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	011c      	lsls	r4, r3, #4
 8007e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	1891      	adds	r1, r2, r2
 8007eae:	64b9      	str	r1, [r7, #72]	; 0x48
 8007eb0:	415b      	adcs	r3, r3
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eb8:	4641      	mov	r1, r8
 8007eba:	eb12 0a01 	adds.w	sl, r2, r1
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ed8:	4692      	mov	sl, r2
 8007eda:	469b      	mov	fp, r3
 8007edc:	4643      	mov	r3, r8
 8007ede:	eb1a 0303 	adds.w	r3, sl, r3
 8007ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8007eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007efc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f04:	460b      	mov	r3, r1
 8007f06:	18db      	adds	r3, r3, r3
 8007f08:	643b      	str	r3, [r7, #64]	; 0x40
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	eb42 0303 	adc.w	r3, r2, r3
 8007f10:	647b      	str	r3, [r7, #68]	; 0x44
 8007f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f1a:	f7f8 f95d 	bl	80001d8 <__aeabi_uldivmod>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4611      	mov	r1, r2
 8007f24:	4b3b      	ldr	r3, [pc, #236]	; (8008014 <UART_SetConfig+0x2d4>)
 8007f26:	fba3 2301 	umull	r2, r3, r3, r1
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	2264      	movs	r2, #100	; 0x64
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	1acb      	subs	r3, r1, r3
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f3a:	4b36      	ldr	r3, [pc, #216]	; (8008014 <UART_SetConfig+0x2d4>)
 8007f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f40:	095b      	lsrs	r3, r3, #5
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f48:	441c      	add	r4, r3
 8007f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	464b      	mov	r3, r9
 8007f60:	1891      	adds	r1, r2, r2
 8007f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f64:	415b      	adcs	r3, r3
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	1851      	adds	r1, r2, r1
 8007f70:	6339      	str	r1, [r7, #48]	; 0x30
 8007f72:	4649      	mov	r1, r9
 8007f74:	414b      	adcs	r3, r1
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f84:	4659      	mov	r1, fp
 8007f86:	00cb      	lsls	r3, r1, #3
 8007f88:	4651      	mov	r1, sl
 8007f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f8e:	4651      	mov	r1, sl
 8007f90:	00ca      	lsls	r2, r1, #3
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	4642      	mov	r2, r8
 8007f9a:	189b      	adds	r3, r3, r2
 8007f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	eb42 0303 	adc.w	r3, r2, r3
 8007fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	18db      	adds	r3, r3, r3
 8007fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	eb42 0303 	adc.w	r3, r2, r3
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fd6:	f7f8 f8ff 	bl	80001d8 <__aeabi_uldivmod>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <UART_SetConfig+0x2d4>)
 8007fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	2164      	movs	r1, #100	; 0x64
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	3332      	adds	r3, #50	; 0x32
 8007ff2:	4a08      	ldr	r2, [pc, #32]	; (8008014 <UART_SetConfig+0x2d4>)
 8007ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f003 0207 	and.w	r2, r3, #7
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4422      	add	r2, r4
 8008006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008008:	e105      	b.n	8008216 <UART_SetConfig+0x4d6>
 800800a:	bf00      	nop
 800800c:	40011000 	.word	0x40011000
 8008010:	40011400 	.word	0x40011400
 8008014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801c:	2200      	movs	r2, #0
 800801e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008022:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800802a:	4642      	mov	r2, r8
 800802c:	464b      	mov	r3, r9
 800802e:	1891      	adds	r1, r2, r2
 8008030:	6239      	str	r1, [r7, #32]
 8008032:	415b      	adcs	r3, r3
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800803a:	4641      	mov	r1, r8
 800803c:	1854      	adds	r4, r2, r1
 800803e:	4649      	mov	r1, r9
 8008040:	eb43 0501 	adc.w	r5, r3, r1
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	00eb      	lsls	r3, r5, #3
 800804e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008052:	00e2      	lsls	r2, r4, #3
 8008054:	4614      	mov	r4, r2
 8008056:	461d      	mov	r5, r3
 8008058:	4643      	mov	r3, r8
 800805a:	18e3      	adds	r3, r4, r3
 800805c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008060:	464b      	mov	r3, r9
 8008062:	eb45 0303 	adc.w	r3, r5, r3
 8008066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800806a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008086:	4629      	mov	r1, r5
 8008088:	008b      	lsls	r3, r1, #2
 800808a:	4621      	mov	r1, r4
 800808c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008090:	4621      	mov	r1, r4
 8008092:	008a      	lsls	r2, r1, #2
 8008094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008098:	f7f8 f89e 	bl	80001d8 <__aeabi_uldivmod>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4b60      	ldr	r3, [pc, #384]	; (8008224 <UART_SetConfig+0x4e4>)
 80080a2:	fba3 2302 	umull	r2, r3, r3, r2
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	011c      	lsls	r4, r3, #4
 80080aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	1891      	adds	r1, r2, r2
 80080c2:	61b9      	str	r1, [r7, #24]
 80080c4:	415b      	adcs	r3, r3
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080cc:	4641      	mov	r1, r8
 80080ce:	1851      	adds	r1, r2, r1
 80080d0:	6139      	str	r1, [r7, #16]
 80080d2:	4649      	mov	r1, r9
 80080d4:	414b      	adcs	r3, r1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080e4:	4659      	mov	r1, fp
 80080e6:	00cb      	lsls	r3, r1, #3
 80080e8:	4651      	mov	r1, sl
 80080ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ee:	4651      	mov	r1, sl
 80080f0:	00ca      	lsls	r2, r1, #3
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	4642      	mov	r2, r8
 80080fa:	189b      	adds	r3, r3, r2
 80080fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008100:	464b      	mov	r3, r9
 8008102:	460a      	mov	r2, r1
 8008104:	eb42 0303 	adc.w	r3, r2, r3
 8008108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	67bb      	str	r3, [r7, #120]	; 0x78
 8008116:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008124:	4649      	mov	r1, r9
 8008126:	008b      	lsls	r3, r1, #2
 8008128:	4641      	mov	r1, r8
 800812a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800812e:	4641      	mov	r1, r8
 8008130:	008a      	lsls	r2, r1, #2
 8008132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008136:	f7f8 f84f 	bl	80001d8 <__aeabi_uldivmod>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4b39      	ldr	r3, [pc, #228]	; (8008224 <UART_SetConfig+0x4e4>)
 8008140:	fba3 1302 	umull	r1, r3, r3, r2
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	2164      	movs	r1, #100	; 0x64
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	3332      	adds	r3, #50	; 0x32
 8008152:	4a34      	ldr	r2, [pc, #208]	; (8008224 <UART_SetConfig+0x4e4>)
 8008154:	fba2 2303 	umull	r2, r3, r2, r3
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815e:	441c      	add	r4, r3
 8008160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008164:	2200      	movs	r2, #0
 8008166:	673b      	str	r3, [r7, #112]	; 0x70
 8008168:	677a      	str	r2, [r7, #116]	; 0x74
 800816a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800816e:	4642      	mov	r2, r8
 8008170:	464b      	mov	r3, r9
 8008172:	1891      	adds	r1, r2, r2
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	415b      	adcs	r3, r3
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800817e:	4641      	mov	r1, r8
 8008180:	1851      	adds	r1, r2, r1
 8008182:	6039      	str	r1, [r7, #0]
 8008184:	4649      	mov	r1, r9
 8008186:	414b      	adcs	r3, r1
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	f04f 0200 	mov.w	r2, #0
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008196:	4659      	mov	r1, fp
 8008198:	00cb      	lsls	r3, r1, #3
 800819a:	4651      	mov	r1, sl
 800819c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081a0:	4651      	mov	r1, sl
 80081a2:	00ca      	lsls	r2, r1, #3
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	4603      	mov	r3, r0
 80081aa:	4642      	mov	r2, r8
 80081ac:	189b      	adds	r3, r3, r2
 80081ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80081b0:	464b      	mov	r3, r9
 80081b2:	460a      	mov	r2, r1
 80081b4:	eb42 0303 	adc.w	r3, r2, r3
 80081b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	663b      	str	r3, [r7, #96]	; 0x60
 80081c4:	667a      	str	r2, [r7, #100]	; 0x64
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081d2:	4649      	mov	r1, r9
 80081d4:	008b      	lsls	r3, r1, #2
 80081d6:	4641      	mov	r1, r8
 80081d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081dc:	4641      	mov	r1, r8
 80081de:	008a      	lsls	r2, r1, #2
 80081e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081e4:	f7f7 fff8 	bl	80001d8 <__aeabi_uldivmod>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <UART_SetConfig+0x4e4>)
 80081ee:	fba3 1302 	umull	r1, r3, r3, r2
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	2164      	movs	r1, #100	; 0x64
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	3332      	adds	r3, #50	; 0x32
 8008200:	4a08      	ldr	r2, [pc, #32]	; (8008224 <UART_SetConfig+0x4e4>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	095b      	lsrs	r3, r3, #5
 8008208:	f003 020f 	and.w	r2, r3, #15
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4422      	add	r2, r4
 8008214:	609a      	str	r2, [r3, #8]
}
 8008216:	bf00      	nop
 8008218:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800821c:	46bd      	mov	sp, r7
 800821e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008222:	bf00      	nop
 8008224:	51eb851f 	.word	0x51eb851f

08008228 <__libc_init_array>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4d0d      	ldr	r5, [pc, #52]	; (8008260 <__libc_init_array+0x38>)
 800822c:	4c0d      	ldr	r4, [pc, #52]	; (8008264 <__libc_init_array+0x3c>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	2600      	movs	r6, #0
 8008234:	42a6      	cmp	r6, r4
 8008236:	d109      	bne.n	800824c <__libc_init_array+0x24>
 8008238:	4d0b      	ldr	r5, [pc, #44]	; (8008268 <__libc_init_array+0x40>)
 800823a:	4c0c      	ldr	r4, [pc, #48]	; (800826c <__libc_init_array+0x44>)
 800823c:	f000 f87c 	bl	8008338 <_init>
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	2600      	movs	r6, #0
 8008246:	42a6      	cmp	r6, r4
 8008248:	d105      	bne.n	8008256 <__libc_init_array+0x2e>
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008250:	4798      	blx	r3
 8008252:	3601      	adds	r6, #1
 8008254:	e7ee      	b.n	8008234 <__libc_init_array+0xc>
 8008256:	f855 3b04 	ldr.w	r3, [r5], #4
 800825a:	4798      	blx	r3
 800825c:	3601      	adds	r6, #1
 800825e:	e7f2      	b.n	8008246 <__libc_init_array+0x1e>
 8008260:	0800a970 	.word	0x0800a970
 8008264:	0800a970 	.word	0x0800a970
 8008268:	0800a970 	.word	0x0800a970
 800826c:	0800a974 	.word	0x0800a974

08008270 <__itoa>:
 8008270:	1e93      	subs	r3, r2, #2
 8008272:	2b22      	cmp	r3, #34	; 0x22
 8008274:	b510      	push	{r4, lr}
 8008276:	460c      	mov	r4, r1
 8008278:	d904      	bls.n	8008284 <__itoa+0x14>
 800827a:	2300      	movs	r3, #0
 800827c:	700b      	strb	r3, [r1, #0]
 800827e:	461c      	mov	r4, r3
 8008280:	4620      	mov	r0, r4
 8008282:	bd10      	pop	{r4, pc}
 8008284:	2a0a      	cmp	r2, #10
 8008286:	d109      	bne.n	800829c <__itoa+0x2c>
 8008288:	2800      	cmp	r0, #0
 800828a:	da07      	bge.n	800829c <__itoa+0x2c>
 800828c:	232d      	movs	r3, #45	; 0x2d
 800828e:	700b      	strb	r3, [r1, #0]
 8008290:	4240      	negs	r0, r0
 8008292:	2101      	movs	r1, #1
 8008294:	4421      	add	r1, r4
 8008296:	f000 f80d 	bl	80082b4 <__utoa>
 800829a:	e7f1      	b.n	8008280 <__itoa+0x10>
 800829c:	2100      	movs	r1, #0
 800829e:	e7f9      	b.n	8008294 <__itoa+0x24>

080082a0 <itoa>:
 80082a0:	f7ff bfe6 	b.w	8008270 <__itoa>

080082a4 <memset>:
 80082a4:	4402      	add	r2, r0
 80082a6:	4603      	mov	r3, r0
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d100      	bne.n	80082ae <memset+0xa>
 80082ac:	4770      	bx	lr
 80082ae:	f803 1b01 	strb.w	r1, [r3], #1
 80082b2:	e7f9      	b.n	80082a8 <memset+0x4>

080082b4 <__utoa>:
 80082b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b6:	4c1f      	ldr	r4, [pc, #124]	; (8008334 <__utoa+0x80>)
 80082b8:	b08b      	sub	sp, #44	; 0x2c
 80082ba:	4605      	mov	r5, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	466e      	mov	r6, sp
 80082c0:	f104 0c20 	add.w	ip, r4, #32
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	6861      	ldr	r1, [r4, #4]
 80082c8:	4637      	mov	r7, r6
 80082ca:	c703      	stmia	r7!, {r0, r1}
 80082cc:	3408      	adds	r4, #8
 80082ce:	4564      	cmp	r4, ip
 80082d0:	463e      	mov	r6, r7
 80082d2:	d1f7      	bne.n	80082c4 <__utoa+0x10>
 80082d4:	7921      	ldrb	r1, [r4, #4]
 80082d6:	7139      	strb	r1, [r7, #4]
 80082d8:	1e91      	subs	r1, r2, #2
 80082da:	6820      	ldr	r0, [r4, #0]
 80082dc:	6038      	str	r0, [r7, #0]
 80082de:	2922      	cmp	r1, #34	; 0x22
 80082e0:	f04f 0100 	mov.w	r1, #0
 80082e4:	d904      	bls.n	80082f0 <__utoa+0x3c>
 80082e6:	7019      	strb	r1, [r3, #0]
 80082e8:	460b      	mov	r3, r1
 80082ea:	4618      	mov	r0, r3
 80082ec:	b00b      	add	sp, #44	; 0x2c
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	1e58      	subs	r0, r3, #1
 80082f2:	4684      	mov	ip, r0
 80082f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80082f8:	fb02 5617 	mls	r6, r2, r7, r5
 80082fc:	3628      	adds	r6, #40	; 0x28
 80082fe:	446e      	add	r6, sp
 8008300:	460c      	mov	r4, r1
 8008302:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008306:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800830a:	462e      	mov	r6, r5
 800830c:	42b2      	cmp	r2, r6
 800830e:	f101 0101 	add.w	r1, r1, #1
 8008312:	463d      	mov	r5, r7
 8008314:	d9ee      	bls.n	80082f4 <__utoa+0x40>
 8008316:	2200      	movs	r2, #0
 8008318:	545a      	strb	r2, [r3, r1]
 800831a:	1919      	adds	r1, r3, r4
 800831c:	1aa5      	subs	r5, r4, r2
 800831e:	42aa      	cmp	r2, r5
 8008320:	dae3      	bge.n	80082ea <__utoa+0x36>
 8008322:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008326:	780e      	ldrb	r6, [r1, #0]
 8008328:	7006      	strb	r6, [r0, #0]
 800832a:	3201      	adds	r2, #1
 800832c:	f801 5901 	strb.w	r5, [r1], #-1
 8008330:	e7f4      	b.n	800831c <__utoa+0x68>
 8008332:	bf00      	nop
 8008334:	0800a940 	.word	0x0800a940

08008338 <_init>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr

08008344 <_fini>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr
