
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c0  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee68  0800ee68  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee68  0800ee68  0001ee68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee70  0800ee70  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee74  0800ee74  0001ee74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800ee78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          0000326c  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000334c  2000334c  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a05  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003867  00000000  00000000  00038b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001370  00000000  00000000  0003d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241c8  00000000  00000000  0003ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba49  00000000  00000000  00062d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2778  00000000  00000000  0007e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150f49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056b4  00000000  00000000  00150f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bc90 	.word	0x0800bc90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e4 	.word	0x200000e4
 80001c4:	0800bc90 	.word	0x0800bc90

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f009 fa60 	bl	8009bbe <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20003128 	.word	0x20003128

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f006 f87c 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f005 fa75 	bl	8005c0c <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f006 f873 	bl	8006814 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f006 f86d 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f005 fa66 	bl	8005c0c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f006 f861 	bl	8006814 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f006 f806 	bl	8006814 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f006 f800 	bl	8006814 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f005 fff6 	bl	8006814 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f005 ff68 	bl	8006814 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f005 ff5f 	bl	8006814 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000fc 	.word	0x200000fc

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f005 fdce 	bl	8006814 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f005 fdc8 	bl	8006814 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f005 fdbf 	bl	8006814 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f005 fd25 	bl	8006814 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f005 fcfb 	bl	8006814 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f005 fcf2 	bl	8006814 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f005 fca6 	bl	8006814 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f005 fc9d 	bl	8006814 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f005 fc51 	bl	8006814 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f005 fc48 	bl	8006814 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800ceb4 	.word	0x0800ceb4
 8001010:	0800d18c 	.word	0x0800d18c

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f005 fbf8 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f005 fbf2 	bl	8006814 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f005 fbe6 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f005 fbe0 	bl	8006814 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_dab_init>:
uint8_t actual_station = 0;

uint8_t last_station_index = 0;

void Si468x_dab_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <Si468x_dab_init+0xc0>)
 8001064:	f002 fa94 	bl	8003590 <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f85a 	bl	8001120 <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f874 	bl	8001158 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f8f6 	bl	8001260 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f966 	bl	8001348 <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa04 	bl	8001488 <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbbc 	bl	80017fc <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb34 	bl	80016f0 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc25 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc1f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc19 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc14 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc0f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc09 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc03 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fbfe 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fbf9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fbf4 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fbef 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbe9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbe4 	bl	80018dc <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001114:	f000 faec 	bl	80016f0 <Si468x_get_sys_state>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800bd58 	.word	0x0800bd58

08001120 <Si468x_reset>:

void Si468x_reset()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001124:	2101      	movs	r1, #1
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <Si468x_reset+0x30>)
 8001128:	f002 fa32 	bl	8003590 <send_debug_msg>
	RESET_PIN_LOW;
 800112c:	2200      	movs	r2, #0
 800112e:	2120      	movs	r1, #32
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <Si468x_reset+0x34>)
 8001132:	f005 fb6f 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f004 fd68 	bl	8005c0c <HAL_Delay>
	RESET_PIN_HIGH;
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <Si468x_reset+0x34>)
 8001142:	f005 fb67 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001146:	20c8      	movs	r0, #200	; 0xc8
 8001148:	f004 fd60 	bl	8005c0c <HAL_Delay>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800bda8 	.word	0x0800bda8
 8001154:	40020800 	.word	0x40020800

08001158 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 800115c:	2101      	movs	r1, #1
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <Si468x_power_up+0xa0>)
 8001160:	f002 fa16 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <Si468x_power_up+0xa4>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <Si468x_power_up+0xa4>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Si468x_power_up+0xa4>)
 8001172:	2217      	movs	r2, #23
 8001174:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <Si468x_power_up+0xa4>)
 8001178:	2250      	movs	r2, #80	; 0x50
 800117a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <Si468x_power_up+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <Si468x_power_up+0xa4>)
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <Si468x_power_up+0xa4>)
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <Si468x_power_up+0xa4>)
 8001190:	2201      	movs	r2, #1
 8001192:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <Si468x_power_up+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Si468x_power_up+0xa4>)
 800119c:	2210      	movs	r2, #16
 800119e:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <Si468x_power_up+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Si468x_power_up+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Si468x_power_up+0xa4>)
 80011b4:	2228      	movs	r2, #40	; 0x28
 80011b6:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Si468x_power_up+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <Si468x_power_up+0xa4>)
 80011c6:	2010      	movs	r0, #16
 80011c8:	f000 fa58 	bl	800167c <Si468x_write_command>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <Si468x_power_up+0xa8>)
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f004 fd19 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <Si468x_power_up+0xac>)
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fa6f 	bl	80016c0 <Si468x_read_reply>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <Si468x_power_up+0xa8>)
 80011e8:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011ea:	2101      	movs	r1, #1
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <Si468x_power_up+0xb0>)
 80011ee:	f002 f9cf 	bl	8003590 <send_debug_msg>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800bdbc 	.word	0x0800bdbc
 80011fc:	20000100 	.word	0x20000100
 8001200:	20001940 	.word	0x20001940
 8001204:	20001100 	.word	0x20001100
 8001208:	0800bdf8 	.word	0x0800bdf8

0800120c <Si468x_load_init>:

void Si468x_load_init()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <Si468x_load_init+0x44>)
 8001214:	f002 f9bc 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <Si468x_load_init+0x48>)
 800121a:	2206      	movs	r2, #6
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <Si468x_load_init+0x48>)
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001224:	490b      	ldr	r1, [pc, #44]	; (8001254 <Si468x_load_init+0x48>)
 8001226:	2002      	movs	r0, #2
 8001228:	f000 fa28 	bl	800167c <Si468x_write_command>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <Si468x_load_init+0x4c>)
 8001232:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f004 fce9 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <Si468x_load_init+0x50>)
 800123c:	2005      	movs	r0, #5
 800123e:	f000 fa3f 	bl	80016c0 <Si468x_read_reply>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <Si468x_load_init+0x4c>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800be18 	.word	0x0800be18
 8001254:	20000100 	.word	0x20000100
 8001258:	20001940 	.word	0x20001940
 800125c:	20001100 	.word	0x20001100

08001260 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 8001266:	2101      	movs	r1, #1
 8001268:	4830      	ldr	r0, [pc, #192]	; (800132c <Si468x_bootloader_load_host+0xcc>)
 800126a:	f002 f991 	bl	8003590 <send_debug_msg>
	Si468x_load_init();
 800126e:	f7ff ffcd 	bl	800120c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001272:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001276:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	e03e      	b.n	8001314 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001296:	2300      	movs	r3, #0
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	e014      	b.n	80012c6 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800129c:	88ba      	ldrh	r2, [r7, #4]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4924      	ldr	r1, [pc, #144]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012a2:	fba1 1303 	umull	r1, r3, r1, r3
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	441a      	add	r2, r3
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	491f      	ldr	r1, [pc, #124]	; (8001338 <Si468x_bootloader_load_host+0xd8>)
 80012ba:	5c89      	ldrb	r1, [r1, r2]
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012be:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	88ba      	ldrh	r2, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3e1      	bcc.n	800129c <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3304      	adds	r3, #4
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9c6 	bl	800167c <Si468x_write_command>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 80012f6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f004 fc87 	bl	8005c0c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <Si468x_bootloader_load_host+0xe0>)
 8001300:	2005      	movs	r0, #5
 8001302:	f000 f9dd 	bl	80016c0 <Si468x_read_reply>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 800130c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	3301      	adds	r3, #1
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d9bd      	bls.n	8001296 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <Si468x_bootloader_load_host+0xe4>)
 800131e:	f002 f937 	bl	8003590 <send_debug_msg>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	0800be30 	.word	0x0800be30
 8001330:	20000100 	.word	0x20000100
 8001334:	aaaaaaab 	.word	0xaaaaaaab
 8001338:	0800d77c 	.word	0x0800d77c
 800133c:	20001940 	.word	0x20001940
 8001340:	20001100 	.word	0x20001100
 8001344:	0800be6c 	.word	0x0800be6c

08001348 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001350:	2101      	movs	r1, #1
 8001352:	4845      	ldr	r0, [pc, #276]	; (8001468 <Si468x_firmware_load_flash+0x120>)
 8001354:	f002 f91c 	bl	8003590 <send_debug_msg>
	Si468x_load_init();
 8001358:	f7ff ff58 	bl	800120c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800135e:	2205      	movs	r2, #5
 8001360:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800137a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001384:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800138e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001398:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800139a:	2100      	movs	r1, #0
 800139c:	4834      	ldr	r0, [pc, #208]	; (8001470 <Si468x_firmware_load_flash+0x128>)
 800139e:	f002 f8f7 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013a2:	4b32      	ldr	r3, [pc, #200]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	2210      	movs	r2, #16
 80013a8:	4932      	ldr	r1, [pc, #200]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00a fc24 	bl	800bbf8 <itoa>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f8eb 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	2210      	movs	r2, #16
 80013c0:	492c      	ldr	r1, [pc, #176]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00a fc18 	bl	800bbf8 <itoa>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f8df 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013d4:	799b      	ldrb	r3, [r3, #6]
 80013d6:	2210      	movs	r2, #16
 80013d8:	4926      	ldr	r1, [pc, #152]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f00a fc0c 	bl	800bbf8 <itoa>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 f8d3 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	2210      	movs	r2, #16
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00a fc00 	bl	800bbf8 <itoa>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2101      	movs	r1, #1
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f8c7 	bl	8003590 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800140a:	2200      	movs	r2, #0
 800140c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001410:	2200      	movs	r2, #0
 8001412:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800141c:	200c      	movs	r0, #12
 800141e:	f000 f92d 	bl	800167c <Si468x_write_command>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 8001428:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f004 fbee 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001430:	4912      	ldr	r1, [pc, #72]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001432:	2005      	movs	r0, #5
 8001434:	f000 f944 	bl	80016c0 <Si468x_read_reply>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 800143e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800144c:	2101      	movs	r1, #1
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <Si468x_firmware_load_flash+0x138>)
 8001450:	f002 f89e 	bl	8003590 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001454:	e003      	b.n	800145e <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001456:	2101      	movs	r1, #1
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <Si468x_firmware_load_flash+0x13c>)
 800145a:	f002 f899 	bl	8003590 <send_debug_msg>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800be8c 	.word	0x0800be8c
 800146c:	20000100 	.word	0x20000100
 8001470:	0800bec8 	.word	0x0800bec8
 8001474:	20001900 	.word	0x20001900
 8001478:	20001940 	.word	0x20001940
 800147c:	20001100 	.word	0x20001100
 8001480:	0800bedc 	.word	0x0800bedc
 8001484:	0800beec 	.word	0x0800beec

08001488 <Si468x_boot>:

void Si468x_boot()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 800148c:	2101      	movs	r1, #1
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <Si468x_boot+0x60>)
 8001490:	f002 f87e 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <Si468x_boot+0x64>)
 8001496:	2207      	movs	r2, #7
 8001498:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <Si468x_boot+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <Si468x_boot+0x64>)
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f8ea 	bl	800167c <Si468x_write_command>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <Si468x_boot+0x68>)
 80014ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f004 fbab 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014b6:	490f      	ldr	r1, [pc, #60]	; (80014f4 <Si468x_boot+0x6c>)
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 f901 	bl	80016c0 <Si468x_read_reply>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Si468x_boot+0x68>)
 80014c4:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <Si468x_boot+0x6c>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ce:	2bc0      	cmp	r3, #192	; 0xc0
 80014d0:	d104      	bne.n	80014dc <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <Si468x_boot+0x70>)
 80014d6:	f002 f85b 	bl	8003590 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014da:	e003      	b.n	80014e4 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014dc:	2101      	movs	r1, #1
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <Si468x_boot+0x74>)
 80014e0:	f002 f856 	bl	8003590 <send_debug_msg>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800bf08 	.word	0x0800bf08
 80014ec:	20000100 	.word	0x20000100
 80014f0:	20001940 	.word	0x20001940
 80014f4:	20001100 	.word	0x20001100
 80014f8:	0800bf44 	.word	0x0800bf44
 80014fc:	0800bf60 	.word	0x0800bf60

08001500 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800150a:	1df9      	adds	r1, r7, #7
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <Si468x_write_single_byte+0x20>)
 8001512:	f008 fb54 	bl	8009bbe <HAL_SPI_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200030d0 	.word	0x200030d0

08001524 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <Si468x_read_single_byte+0x20>)
 8001536:	f008 fc7e 	bl	8009e36 <HAL_SPI_Receive>
	return data_buffer;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200030d0 	.word	0x200030d0

08001548 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	e01f      	b.n	8001598 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <Si468x_wait_for_CTS+0x6c>)
 800155a:	2001      	movs	r0, #1
 800155c:	f000 f8b0 	bl	80016c0 <Si468x_read_reply>
		if(rd_reply.cts)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00e      	beq.n	800158c <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 800157c:	2101      	movs	r1, #1
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <Si468x_wait_for_CTS+0x74>)
 8001580:	f002 f806 	bl	8003590 <send_debug_msg>
				return COMMAND_ERROR;
 8001584:	2320      	movs	r3, #32
 8001586:	e010      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 8001588:	2300      	movs	r3, #0
 800158a:	e00e      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f004 fb3d 	bl	8005c0c <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	81fb      	strh	r3, [r7, #14]
 8001598:	89fa      	ldrh	r2, [r7, #14]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3db      	bcc.n	8001558 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015a0:	2101      	movs	r1, #1
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <Si468x_wait_for_CTS+0x78>)
 80015a4:	f001 fff4 	bl	8003590 <send_debug_msg>
	return TIMEOUT;
 80015a8:	2308      	movs	r3, #8
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20001100 	.word	0x20001100
 80015b8:	20001a30 	.word	0x20001a30
 80015bc:	0800bf74 	.word	0x0800bf74
 80015c0:	0800bf9c 	.word	0x0800bf9c

080015c4 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <Si468x_write_multiple+0x4c>)
 80015da:	f005 f91b 	bl	8006814 <HAL_GPIO_WritePin>
	while(len--)
 80015de:	e009      	b.n	80015f4 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	81fa      	strh	r2, [r7, #14]
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff86 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	80fa      	strh	r2, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80015fe:	2201      	movs	r2, #1
 8001600:	2110      	movs	r1, #16
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <Si468x_write_multiple+0x4c>)
 8001604:	f005 f906 	bl	8006814 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020800 	.word	0x40020800

08001614 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <Si468x_read_multiple+0x64>)
 800162a:	f005 f8f3 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800162e:	2003      	movs	r0, #3
 8001630:	f004 faec 	bl	8005c0c <HAL_Delay>
	CS_PIN_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <Si468x_read_multiple+0x64>)
 800163a:	f005 f8eb 	bl	8006814 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff ff5e 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 8001644:	e009      	b.n	800165a <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	81fa      	strh	r2, [r7, #14]
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	189c      	adds	r4, r3, r2
 8001652:	f7ff ff67 	bl	8001524 <Si468x_read_single_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
	while(len--)
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	80fa      	strh	r2, [r7, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <Si468x_read_multiple+0x64>)
 800166a:	f005 f8d3 	bl	8006814 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	40020800 	.word	0x40020800

0800167c <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f7ff ff5c 	bl	8001548 <Si468x_wait_for_CTS>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <Si468x_write_command+0x24>
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b20      	cmp	r3, #32
 800169e:	d10a      	bne.n	80016b6 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff8d 	bl	80015c4 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ae:	f7ff ff4b 	bl	8001548 <Si468x_wait_for_CTS>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff9f 	bl	8001614 <Si468x_read_multiple>
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <Si468x_read_reply+0x28>)
 80016d8:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <Si468x_read_reply+0x2c>)
 80016dc:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20001100 	.word	0x20001100
 80016ec:	20001a30 	.word	0x20001a30

080016f0 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4833      	ldr	r0, [pc, #204]	; (80017c4 <Si468x_get_sys_state+0xd4>)
 80016f8:	f001 ff4a 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 80016fe:	2209      	movs	r2, #9
 8001700:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001708:	492f      	ldr	r1, [pc, #188]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 800170a:	2002      	movs	r0, #2
 800170c:	f7ff ffb6 	bl	800167c <Si468x_write_command>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <Si468x_get_sys_state+0xdc>)
 8001716:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f004 fa77 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001720:	2005      	movs	r0, #5
 8001722:	f7ff ffcd 	bl	80016c0 <Si468x_read_reply>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <Si468x_get_sys_state+0xdc>)
 800172c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800172e:	2100      	movs	r1, #0
 8001730:	4828      	ldr	r0, [pc, #160]	; (80017d4 <Si468x_get_sys_state+0xe4>)
 8001732:	f001 ff2d 	bl	8003590 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	2b07      	cmp	r3, #7
 800173c:	d83a      	bhi.n	80017b4 <Si468x_get_sys_state+0xc4>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <Si468x_get_sys_state+0x54>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001765 	.word	0x08001765
 8001748:	0800176f 	.word	0x0800176f
 800174c:	08001779 	.word	0x08001779
 8001750:	08001783 	.word	0x08001783
 8001754:	0800178d 	.word	0x0800178d
 8001758:	08001797 	.word	0x08001797
 800175c:	080017a1 	.word	0x080017a1
 8001760:	080017ab 	.word	0x080017ab
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001764:	2101      	movs	r1, #1
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <Si468x_get_sys_state+0xe8>)
 8001768:	f001 ff12 	bl	8003590 <send_debug_msg>
			break;
 800176c:	e027      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800176e:	2101      	movs	r1, #1
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <Si468x_get_sys_state+0xec>)
 8001772:	f001 ff0d 	bl	8003590 <send_debug_msg>
			break;
 8001776:	e022      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001778:	2101      	movs	r1, #1
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <Si468x_get_sys_state+0xf0>)
 800177c:	f001 ff08 	bl	8003590 <send_debug_msg>
			break;
 8001780:	e01d      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001782:	2101      	movs	r1, #1
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <Si468x_get_sys_state+0xf4>)
 8001786:	f001 ff03 	bl	8003590 <send_debug_msg>
			break;
 800178a:	e018      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <Si468x_get_sys_state+0xf8>)
 8001790:	f001 fefe 	bl	8003590 <send_debug_msg>
			break;
 8001794:	e013      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 8001796:	2101      	movs	r1, #1
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <Si468x_get_sys_state+0xfc>)
 800179a:	f001 fef9 	bl	8003590 <send_debug_msg>
			break;
 800179e:	e00e      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <Si468x_get_sys_state+0x100>)
 80017a4:	f001 fef4 	bl	8003590 <send_debug_msg>
			break;
 80017a8:	e009      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <Si468x_get_sys_state+0x104>)
 80017ae:	f001 feef 	bl	8003590 <send_debug_msg>
			break;
 80017b2:	e004      	b.n	80017be <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <Si468x_get_sys_state+0x108>)
 80017b8:	f001 feea 	bl	8003590 <send_debug_msg>
			break;
 80017bc:	bf00      	nop
	}
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800bfac 	.word	0x0800bfac
 80017c8:	20000100 	.word	0x20000100
 80017cc:	20001940 	.word	0x20001940
 80017d0:	20001100 	.word	0x20001100
 80017d4:	0800bfe8 	.word	0x0800bfe8
 80017d8:	0800bff4 	.word	0x0800bff4
 80017dc:	0800c00c 	.word	0x0800c00c
 80017e0:	0800c024 	.word	0x0800c024
 80017e4:	0800c03c 	.word	0x0800c03c
 80017e8:	0800c064 	.word	0x0800c064
 80017ec:	0800c080 	.word	0x0800c080
 80017f0:	0800c098 	.word	0x0800c098
 80017f4:	0800c0b4 	.word	0x0800c0b4
 80017f8:	0800c0cc 	.word	0x0800c0cc

080017fc <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001802:	2101      	movs	r1, #1
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <Si468x_get_part_info+0xc0>)
 8001806:	f001 fec3 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <Si468x_get_part_info+0xc4>)
 800180c:	2208      	movs	r2, #8
 800180e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001816:	492a      	ldr	r1, [pc, #168]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff ff2f 	bl	800167c <Si468x_write_command>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001824:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f004 f9f0 	bl	8005c0c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fe67 	bl	8001500 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ff43 	bl	80016c0 <Si468x_read_reply>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001840:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001842:	2100      	movs	r1, #0
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <Si468x_get_part_info+0xd0>)
 8001846:	f001 fea3 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	220a      	movs	r2, #10
 8001850:	491f      	ldr	r1, [pc, #124]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00a f9d0 	bl	800bbf8 <itoa>
 8001858:	4603      	mov	r3, r0
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fe97 	bl	8003590 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001862:	2100      	movs	r1, #0
 8001864:	481b      	ldr	r0, [pc, #108]	; (80018d4 <Si468x_get_part_info+0xd8>)
 8001866:	f001 fe93 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800186c:	795b      	ldrb	r3, [r3, #5]
 800186e:	220a      	movs	r2, #10
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001872:	4618      	mov	r0, r3
 8001874:	f00a f9c0 	bl	800bbf8 <itoa>
 8001878:	4603      	mov	r3, r0
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f001 fe87 	bl	8003590 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001882:	2100      	movs	r1, #0
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <Si468x_get_part_info+0xdc>)
 8001886:	f001 fe83 	bl	8003590 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	b29b      	uxth	r3, r3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001896:	7a1b      	ldrb	r3, [r3, #8]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4413      	add	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	220a      	movs	r2, #10
 80018a2:	490b      	ldr	r1, [pc, #44]	; (80018d0 <Si468x_get_part_info+0xd4>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00a f9a7 	bl	800bbf8 <itoa>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fe6e 	bl	8003590 <send_debug_msg>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800c0e0 	.word	0x0800c0e0
 80018c0:	20000100 	.word	0x20000100
 80018c4:	20001940 	.word	0x20001940
 80018c8:	20001100 	.word	0x20001100
 80018cc:	0800c11c 	.word	0x0800c11c
 80018d0:	20001900 	.word	0x20001900
 80018d4:	0800c12c 	.word	0x0800c12c
 80018d8:	0800c138 	.word	0x0800c138

080018dc <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 80018ec:	2101      	movs	r1, #1
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <Si468x_set_property+0xdc>)
 80018f0:	f001 fe4e 	bl	8003590 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80018f4:	2100      	movs	r1, #0
 80018f6:	4831      	ldr	r0, [pc, #196]	; (80019bc <Si468x_set_property+0xe0>)
 80018f8:	f001 fe4a 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	2210      	movs	r2, #16
 8001900:	492f      	ldr	r1, [pc, #188]	; (80019c0 <Si468x_set_property+0xe4>)
 8001902:	4618      	mov	r0, r3
 8001904:	f00a f978 	bl	800bbf8 <itoa>
 8001908:	4603      	mov	r3, r0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fe3f 	bl	8003590 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001912:	2100      	movs	r1, #0
 8001914:	482b      	ldr	r0, [pc, #172]	; (80019c4 <Si468x_set_property+0xe8>)
 8001916:	f001 fe3b 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	2210      	movs	r2, #16
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <Si468x_set_property+0xe4>)
 8001920:	4618      	mov	r0, r3
 8001922:	f00a f969 	bl	800bbf8 <itoa>
 8001926:	4603      	mov	r3, r0
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fe30 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <Si468x_set_property+0xec>)
 8001932:	2213      	movs	r2, #19
 8001934:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <Si468x_set_property+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <Si468x_set_property+0xec>)
 8001942:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <Si468x_set_property+0xec>)
 800194e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <Si468x_set_property+0xec>)
 8001956:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Si468x_set_property+0xec>)
 8001962:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <Si468x_set_property+0xec>)
 8001966:	2006      	movs	r0, #6
 8001968:	f7ff fe88 	bl	800167c <Si468x_write_command>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <Si468x_set_property+0xf0>)
 8001972:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f004 f949 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800197a:	4915      	ldr	r1, [pc, #84]	; (80019d0 <Si468x_set_property+0xf4>)
 800197c:	2005      	movs	r0, #5
 800197e:	f7ff fe9f 	bl	80016c0 <Si468x_read_reply>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <Si468x_set_property+0xf0>)
 8001988:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f825 	bl	80019dc <Si468x_get_property>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001996:	89fa      	ldrh	r2, [r7, #14]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d104      	bne.n	80019a8 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 800199e:	2101      	movs	r1, #1
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <Si468x_set_property+0xf8>)
 80019a2:	f001 fdf5 	bl	8003590 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019a6:	e003      	b.n	80019b0 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019a8:	2101      	movs	r1, #1
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <Si468x_set_property+0xfc>)
 80019ac:	f001 fdf0 	bl	8003590 <send_debug_msg>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800c148 	.word	0x0800c148
 80019bc:	0800c188 	.word	0x0800c188
 80019c0:	20001900 	.word	0x20001900
 80019c4:	0800c198 	.word	0x0800c198
 80019c8:	20000100 	.word	0x20000100
 80019cc:	20001940 	.word	0x20001940
 80019d0:	20001100 	.word	0x20001100
 80019d4:	0800c1b4 	.word	0x0800c1b4
 80019d8:	0800c1d0 	.word	0x0800c1d0

080019dc <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019e6:	2101      	movs	r1, #1
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <Si468x_get_property+0xbc>)
 80019ea:	f001 fdd1 	bl	8003590 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019ee:	2100      	movs	r1, #0
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <Si468x_get_property+0xc0>)
 80019f2:	f001 fdcd 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2210      	movs	r2, #16
 80019fa:	4929      	ldr	r1, [pc, #164]	; (8001aa0 <Si468x_get_property+0xc4>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00a f8fb 	bl	800bbf8 <itoa>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fdc2 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a0e:	2214      	movs	r2, #20
 8001a10:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a1e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2a:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7ff fe24 	bl	800167c <Si468x_write_command>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f004 f8e5 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a42:	491a      	ldr	r1, [pc, #104]	; (8001aac <Si468x_get_property+0xd0>)
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff fe3b 	bl	80016c0 <Si468x_read_reply>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a50:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <Si468x_get_property+0xd4>)
 8001a56:	f001 fd9b 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <Si468x_get_property+0xd0>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <Si468x_get_property+0xd0>)
 8001a62:	7912      	ldrb	r2, [r2, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	2210      	movs	r2, #16
 8001a68:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <Si468x_get_property+0xc4>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00a f8c4 	bl	800bbf8 <itoa>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fd8b 	bl	8003590 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <Si468x_get_property+0xd0>)
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <Si468x_get_property+0xd0>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800c1e8 	.word	0x0800c1e8
 8001a9c:	0800c188 	.word	0x0800c188
 8001aa0:	20001900 	.word	0x20001900
 8001aa4:	20000100 	.word	0x20000100
 8001aa8:	20001940 	.word	0x20001940
 8001aac:	20001100 	.word	0x20001100
 8001ab0:	0800c224 	.word	0x0800c224

08001ab4 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4849      	ldr	r0, [pc, #292]	; (8001bec <Si468x_dab_tune_freq+0x138>)
 8001ac8:	f001 fd62 	bl	8003590 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4848      	ldr	r0, [pc, #288]	; (8001bf0 <Si468x_dab_tune_freq+0x13c>)
 8001ad0:	f001 fd5e 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	220a      	movs	r2, #10
 8001ade:	4946      	ldr	r1, [pc, #280]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00a f889 	bl	800bbf8 <itoa>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fd50 	bl	8003590 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001af0:	2101      	movs	r1, #1
 8001af2:	4842      	ldr	r0, [pc, #264]	; (8001bfc <Si468x_dab_tune_freq+0x148>)
 8001af4:	f001 fd4c 	bl	8003590 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001afa:	22b0      	movs	r2, #176	; 0xb0
 8001afc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b04:	4a3e      	ldr	r2, [pc, #248]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b16:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b22:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b24:	4936      	ldr	r1, [pc, #216]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b26:	2006      	movs	r0, #6
 8001b28:	f7ff fda8 	bl	800167c <Si468x_write_command>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b32:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b34:	4934      	ldr	r1, [pc, #208]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fdc2 	bl	80016c0 <Si468x_read_reply>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b42:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b52:	2101      	movs	r1, #1
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <Si468x_dab_tune_freq+0x15c>)
 8001b56:	f001 fd1b 	bl	8003590 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e03a      	b.n	8001bd6 <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b60:	4929      	ldr	r1, [pc, #164]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff fdac 	bl	80016c0 <Si468x_read_reply>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b6e:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4824      	ldr	r0, [pc, #144]	; (8001c14 <Si468x_dab_tune_freq+0x160>)
 8001b82:	f001 fd05 	bl	8003590 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00a f833 	bl	800bbf8 <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fcfa 	bl	8003590 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	481e      	ldr	r0, [pc, #120]	; (8001c18 <Si468x_dab_tune_freq+0x164>)
 8001ba0:	f001 fcf6 	bl	8003590 <send_debug_msg>
			actual_freq_id = channel;
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <Si468x_dab_tune_freq+0x168>)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <Si468x_dab_tune_freq+0x16c>)
 8001bb4:	6013      	str	r3, [r2, #0]
			break;
 8001bb6:	e014      	b.n	8001be2 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4817      	ldr	r0, [pc, #92]	; (8001c24 <Si468x_dab_tune_freq+0x170>)
 8001bc6:	f001 fce3 	bl	8003590 <send_debug_msg>
		}
		HAL_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f004 f81e 	bl	8005c0c <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d9bf      	bls.n	8001b60 <Si468x_dab_tune_freq+0xac>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800c2dc 	.word	0x0800c2dc
 8001bf0:	0800c318 	.word	0x0800c318
 8001bf4:	20001944 	.word	0x20001944
 8001bf8:	20001900 	.word	0x20001900
 8001bfc:	0800c298 	.word	0x0800c298
 8001c00:	20000100 	.word	0x20000100
 8001c04:	20001940 	.word	0x20001940
 8001c08:	20001100 	.word	0x20001100
 8001c0c:	20001a30 	.word	0x20001a30
 8001c10:	0800bedc 	.word	0x0800bedc
 8001c14:	0800c324 	.word	0x0800c324
 8001c18:	0800c340 	.word	0x0800c340
 8001c1c:	20002fdc 	.word	0x20002fdc
 8001c20:	20002fd8 	.word	0x20002fd8
 8001c24:	0800c348 	.word	0x0800c348

08001c28 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af06      	add	r7, sp, #24
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <Si468x_dab_digrad_status+0xa0>)
 8001c30:	22b2      	movs	r2, #178	; 0xb2
 8001c32:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <Si468x_dab_digrad_status+0xa0>)
 8001c36:	221a      	movs	r2, #26
 8001c38:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c3a:	4923      	ldr	r1, [pc, #140]	; (8001cc8 <Si468x_dab_digrad_status+0xa0>)
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff fd1d 	bl	800167c <Si468x_write_command>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <Si468x_dab_digrad_status+0xa4>)
 8001c48:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f003 ffde 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c50:	491f      	ldr	r1, [pc, #124]	; (8001cd0 <Si468x_dab_digrad_status+0xa8>)
 8001c52:	2028      	movs	r0, #40	; 0x28
 8001c54:	f7ff fd34 	bl	80016c0 <Si468x_read_reply>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <Si468x_dab_digrad_status+0xa4>)
 8001c5e:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <Si468x_dab_digrad_status+0xac>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d027      	beq.n	8001cbe <Si468x_dab_digrad_status+0x96>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <Si468x_dab_digrad_status+0xb0>)
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <Si468x_dab_digrad_status+0xa8>)
 8001c72:	4615      	mov	r5, r2
 8001c74:	1d1c      	adds	r4, r3, #4
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c82:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <Si468x_dab_digrad_status+0xb0>)
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	2b14      	cmp	r3, #20
 8001c8c:	d902      	bls.n	8001c94 <Si468x_dab_digrad_status+0x6c>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <Si468x_dab_digrad_status+0xb0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <Si468x_dab_digrad_status+0xb0>)
 8001c96:	795b      	ldrb	r3, [r3, #5]
 8001c98:	2b36      	cmp	r3, #54	; 0x36
 8001c9a:	d902      	bls.n	8001ca2 <Si468x_dab_digrad_status+0x7a>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <Si468x_dab_digrad_status+0xb0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	715a      	strb	r2, [r3, #5]
		}
		Display_dab_digrad_status_data(dab_digrad_status);
 8001ca2:	4e0d      	ldr	r6, [pc, #52]	; (8001cd8 <Si468x_dab_digrad_status+0xb0>)
 8001ca4:	466d      	mov	r5, sp
 8001ca6:	f106 0410 	add.w	r4, r6, #16
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cba:	f001 feab 	bl	8003a14 <Display_dab_digrad_status_data>
	}
}
 8001cbe:	bf00      	nop
 8001cc0:	3704      	adds	r7, #4
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000100 	.word	0x20000100
 8001ccc:	20001940 	.word	0x20001940
 8001cd0:	20001100 	.word	0x20001100
 8001cd4:	20001a30 	.word	0x20001a30
 8001cd8:	20001a08 	.word	0x20001a08

08001cdc <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001cea:	2300      	movs	r3, #0
 8001cec:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001cee:	2300      	movs	r3, #0
 8001cf0:	717b      	strb	r3, [r7, #5]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001cf2:	4ba2      	ldr	r3, [pc, #648]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001cf8:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001cfe:	499f      	ldr	r1, [pc, #636]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7ff fcbb 	bl	800167c <Si468x_write_command>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b9d      	ldr	r3, [pc, #628]	; (8001f80 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d0c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f003 ff7c 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d14:	499b      	ldr	r1, [pc, #620]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d1a:	f7ff fcd1 	bl	80016c0 <Si468x_read_reply>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b97      	ldr	r3, [pc, #604]	; (8001f80 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d24:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d26:	2101      	movs	r1, #1
 8001d28:	4897      	ldr	r0, [pc, #604]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d2a:	f001 fc31 	bl	8003590 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d2e:	4b97      	ldr	r3, [pc, #604]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4894      	ldr	r0, [pc, #592]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d40:	f001 fc26 	bl	8003590 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d46:	791b      	ldrb	r3, [r3, #4]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d4c:	795b      	ldrb	r3, [r3, #5]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	803b      	strh	r3, [r7, #0]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d58:	4b8a      	ldr	r3, [pc, #552]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d5a:	7a1b      	ldrb	r3, [r3, #8]
 8001d5c:	71fb      	strb	r3, [r7, #7]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	713b      	strb	r3, [r7, #4]
 8001d62:	e21e      	b.n	80021a2 <Si468x_dab_get_digital_service_list+0x4c6>
	{
		services_list[service_index + actual_services].freq = actual_freq;
 8001d64:	793b      	ldrb	r3, [r7, #4]
 8001d66:	4a8b      	ldr	r2, [pc, #556]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a8a      	ldr	r2, [pc, #552]	; (8001f98 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	498a      	ldr	r1, [pc, #552]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001d72:	2034      	movs	r0, #52	; 0x34
 8001d74:	fb00 f303 	mul.w	r3, r0, r3
 8001d78:	440b      	add	r3, r1
 8001d7a:	3324      	adds	r3, #36	; 0x24
 8001d7c:	601a      	str	r2, [r3, #0]
		services_list[service_index + actual_services].freq_id = actual_freq_id;
 8001d7e:	793b      	ldrb	r3, [r7, #4]
 8001d80:	4a84      	ldr	r2, [pc, #528]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a86      	ldr	r2, [pc, #536]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2c4>)
 8001d88:	7810      	ldrb	r0, [r2, #0]
 8001d8a:	4a84      	ldr	r2, [pc, #528]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001d8c:	2134      	movs	r1, #52	; 0x34
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3328      	adds	r3, #40	; 0x28
 8001d96:	4602      	mov	r2, r0
 8001d98:	701a      	strb	r2, [r3, #0]

		services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001d9a:	79ba      	ldrb	r2, [r7, #6]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	f103 0210 	add.w	r2, r3, #16
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001db0:	5cd2      	ldrb	r2, [r2, r3]
 8001db2:	793b      	ldrb	r3, [r7, #4]
 8001db4:	4977      	ldr	r1, [pc, #476]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001db6:	7809      	ldrb	r1, [r1, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	f002 0201 	and.w	r2, r2, #1
 8001dbe:	b2d0      	uxtb	r0, r2
 8001dc0:	4a76      	ldr	r2, [pc, #472]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001dc2:	2134      	movs	r1, #52	; 0x34
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3314      	adds	r3, #20
 8001dcc:	4602      	mov	r2, r0
 8001dce:	701a      	strb	r2, [r3, #0]
		services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001dd0:	79ba      	ldrb	r2, [r7, #6]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	f103 0211 	add.w	r2, r3, #17
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001de6:	5cd2      	ldrb	r2, [r2, r3]
 8001de8:	793b      	ldrb	r3, [r7, #4]
 8001dea:	496a      	ldr	r1, [pc, #424]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dec:	7809      	ldrb	r1, [r1, #0]
 8001dee:	440b      	add	r3, r1
 8001df0:	f002 020f 	and.w	r2, r2, #15
 8001df4:	b2d0      	uxtb	r0, r2
 8001df6:	4a69      	ldr	r2, [pc, #420]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001df8:	2134      	movs	r1, #52	; 0x34
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3329      	adds	r3, #41	; 0x29
 8001e02:	4602      	mov	r2, r0
 8001e04:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + actual_services].pd_flag)
 8001e06:	793b      	ldrb	r3, [r7, #4]
 8001e08:	4a62      	ldr	r2, [pc, #392]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e0a:	7812      	ldrb	r2, [r2, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a63      	ldr	r2, [pc, #396]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001e10:	2134      	movs	r1, #52	; 0x34
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	3314      	adds	r3, #20
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d017      	beq.n	8001e50 <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	3301      	adds	r3, #1
 8001e24:	71bb      	strb	r3, [r7, #6]
			components_count += services_list[service_index + actual_services].number_of_components;
 8001e26:	793b      	ldrb	r3, [r7, #4]
 8001e28:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001e30:	2134      	movs	r1, #52	; 0x34
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3329      	adds	r3, #41	; 0x29
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	797b      	ldrb	r3, [r7, #5]
 8001e3e:	4413      	add	r3, r2
 8001e40:	717b      	strb	r3, [r7, #5]
			service_index--;
 8001e42:	793b      	ldrb	r3, [r7, #4]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	713b      	strb	r3, [r7, #4]
			number_of_services--;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
			continue;
 8001e4e:	e1a5      	b.n	800219c <Si468x_dab_get_digital_service_list+0x4c0>
		}

		services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e50:	79ba      	ldrb	r2, [r7, #6]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f103 0210 	add.w	r2, r3, #16
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	105b      	asrs	r3, r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	793b      	ldrb	r3, [r7, #4]
 8001e6e:	4949      	ldr	r1, [pc, #292]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e70:	7809      	ldrb	r1, [r1, #0]
 8001e72:	440b      	add	r3, r1
 8001e74:	f002 021f 	and.w	r2, r2, #31
 8001e78:	b2d0      	uxtb	r0, r2
 8001e7a:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001e7c:	2134      	movs	r1, #52	; 0x34
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3315      	adds	r3, #21
 8001e86:	4602      	mov	r2, r0
 8001e88:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + actual_services].pd_flag)
 8001e8a:	793b      	ldrb	r3, [r7, #4]
 8001e8c:	4a41      	ldr	r2, [pc, #260]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001e94:	2134      	movs	r1, #52	; 0x34
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3314      	adds	r3, #20
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <Si468x_dab_get_digital_service_list+0x1ce>
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d07d      	beq.n	8001fa4 <Si468x_dab_get_digital_service_list+0x2c8>
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
				break;

			default:
				break;
 8001ea8:	e0f2      	b.n	8002090 <Si468x_dab_get_digital_service_list+0x3b4>
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001eaa:	79ba      	ldrb	r2, [r7, #6]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	f103 020c 	add.w	r2, r3, #12
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	79ba      	ldrb	r2, [r7, #6]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f103 020d 	add.w	r2, r3, #13
 8001ed2:	797b      	ldrb	r3, [r7, #5]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ee2:	4419      	add	r1, r3
 8001ee4:	793b      	ldrb	r3, [r7, #4]
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4608      	mov	r0, r1
 8001eee:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001ef0:	2134      	movs	r1, #52	; 0x34
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3318      	adds	r3, #24
 8001efa:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001efc:	79ba      	ldrb	r2, [r7, #6]
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	f103 020d 	add.w	r2, r3, #13
 8001f0a:	797b      	ldrb	r3, [r7, #5]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f12:	5cd2      	ldrb	r2, [r2, r3]
 8001f14:	793b      	ldrb	r3, [r7, #4]
 8001f16:	491f      	ldr	r1, [pc, #124]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f18:	7809      	ldrb	r1, [r1, #0]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	0912      	lsrs	r2, r2, #4
 8001f1e:	b2d0      	uxtb	r0, r2
 8001f20:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f22:	2134      	movs	r1, #52	; 0x34
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	331c      	adds	r3, #28
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 8001f30:	793b      	ldrb	r3, [r7, #4]
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f3a:	2134      	movs	r1, #52	; 0x34
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	331c      	adds	r3, #28
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	031b      	lsls	r3, r3, #12
 8001f48:	4618      	mov	r0, r3
 8001f4a:	793b      	ldrb	r3, [r7, #4]
 8001f4c:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f54:	2134      	movs	r1, #52	; 0x34
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	793b      	ldrb	r3, [r7, #4]
 8001f62:	490c      	ldr	r1, [pc, #48]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f64:	7809      	ldrb	r1, [r1, #0]
 8001f66:	440b      	add	r3, r1
 8001f68:	4402      	add	r2, r0
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f6c:	2034      	movs	r0, #52	; 0x34
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	440b      	add	r3, r1
 8001f74:	3320      	adds	r3, #32
 8001f76:	601a      	str	r2, [r3, #0]
				break;
 8001f78:	e08a      	b.n	8002090 <Si468x_dab_get_digital_service_list+0x3b4>
 8001f7a:	bf00      	nop
 8001f7c:	20000100 	.word	0x20000100
 8001f80:	20001940 	.word	0x20001940
 8001f84:	20001100 	.word	0x20001100
 8001f88:	0800c3a8 	.word	0x0800c3a8
 8001f8c:	20001a30 	.word	0x20001a30
 8001f90:	0800bedc 	.word	0x0800bedc
 8001f94:	20002fd6 	.word	0x20002fd6
 8001f98:	20002fd8 	.word	0x20002fd8
 8001f9c:	20001b84 	.word	0x20001b84
 8001fa0:	20002fdc 	.word	0x20002fdc
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001fa4:	79ba      	ldrb	r2, [r7, #6]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	f103 020c 	add.w	r2, r3, #12
 8001fb2:	797b      	ldrb	r3, [r7, #5]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a85      	ldr	r2, [pc, #532]	; (80021d0 <Si468x_dab_get_digital_service_list+0x4f4>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	79ba      	ldrb	r2, [r7, #6]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	f103 020d 	add.w	r2, r3, #13
 8001fcc:	797b      	ldrb	r3, [r7, #5]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a7f      	ldr	r2, [pc, #508]	; (80021d0 <Si468x_dab_get_digital_service_list+0x4f4>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4419      	add	r1, r3
 8001fda:	79ba      	ldrb	r2, [r7, #6]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	f103 020e 	add.w	r2, r3, #14
 8001fe8:	797b      	ldrb	r3, [r7, #5]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	4a78      	ldr	r2, [pc, #480]	; (80021d0 <Si468x_dab_get_digital_service_list+0x4f4>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	041b      	lsls	r3, r3, #16
 8001ff4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ff8:	4419      	add	r1, r3
 8001ffa:	793b      	ldrb	r3, [r7, #4]
 8001ffc:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	4413      	add	r3, r2
 8002002:	4608      	mov	r0, r1
 8002004:	4a74      	ldr	r2, [pc, #464]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002006:	2134      	movs	r1, #52	; 0x34
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3318      	adds	r3, #24
 8002010:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002012:	79ba      	ldrb	r2, [r7, #6]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	f103 020e 	add.w	r2, r3, #14
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002028:	5cd2      	ldrb	r2, [r2, r3]
 800202a:	793b      	ldrb	r3, [r7, #4]
 800202c:	4969      	ldr	r1, [pc, #420]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 800202e:	7809      	ldrb	r1, [r1, #0]
 8002030:	440b      	add	r3, r1
 8002032:	0912      	lsrs	r2, r2, #4
 8002034:	b2d0      	uxtb	r0, r2
 8002036:	4a68      	ldr	r2, [pc, #416]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002038:	2134      	movs	r1, #52	; 0x34
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	331c      	adds	r3, #28
 8002042:	4602      	mov	r2, r0
 8002044:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 8002046:	793b      	ldrb	r3, [r7, #4]
 8002048:	4a62      	ldr	r2, [pc, #392]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002050:	2134      	movs	r1, #52	; 0x34
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	331c      	adds	r3, #28
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	051b      	lsls	r3, r3, #20
 800205e:	4618      	mov	r0, r3
 8002060:	793b      	ldrb	r3, [r7, #4]
 8002062:	4a5c      	ldr	r2, [pc, #368]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 800206a:	2134      	movs	r1, #52	; 0x34
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3318      	adds	r3, #24
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	793b      	ldrb	r3, [r7, #4]
 8002078:	4956      	ldr	r1, [pc, #344]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 800207a:	7809      	ldrb	r1, [r1, #0]
 800207c:	440b      	add	r3, r1
 800207e:	4402      	add	r2, r0
 8002080:	4955      	ldr	r1, [pc, #340]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002082:	2034      	movs	r0, #52	; 0x34
 8002084:	fb00 f303 	mul.w	r3, r0, r3
 8002088:	440b      	add	r3, r1
 800208a:	3320      	adds	r3, #32
 800208c:	601a      	str	r2, [r3, #0]
				break;
 800208e:	bf00      	nop
		}

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002090:	2300      	movs	r3, #0
 8002092:	70fb      	strb	r3, [r7, #3]
 8002094:	e038      	b.n	8002108 <Si468x_dab_get_digital_service_list+0x42c>
		{
			services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f103 0114 	add.w	r1, r3, #20
 800209c:	79ba      	ldrb	r2, [r7, #6]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	18ca      	adds	r2, r1, r3
 80020a8:	797b      	ldrb	r3, [r7, #5]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	18d1      	adds	r1, r2, r3
 80020ae:	793b      	ldrb	r3, [r7, #4]
 80020b0:	4a48      	ldr	r2, [pc, #288]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	441a      	add	r2, r3
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	4845      	ldr	r0, [pc, #276]	; (80021d0 <Si468x_dab_get_digital_service_list+0x4f4>)
 80020ba:	5c44      	ldrb	r4, [r0, r1]
 80020bc:	4946      	ldr	r1, [pc, #280]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 80020be:	2034      	movs	r0, #52	; 0x34
 80020c0:	fb00 f202 	mul.w	r2, r0, r2
 80020c4:	440a      	add	r2, r1
 80020c6:	4413      	add	r3, r2
 80020c8:	4622      	mov	r2, r4
 80020ca:	701a      	strb	r2, [r3, #0]
			if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80020cc:	793b      	ldrb	r3, [r7, #4]
 80020ce:	4a41      	ldr	r2, [pc, #260]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	441a      	add	r2, r3
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	4940      	ldr	r1, [pc, #256]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 80020d8:	2034      	movs	r0, #52	; 0x34
 80020da:	fb00 f202 	mul.w	r2, r0, r2
 80020de:	440a      	add	r2, r1
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b86      	cmp	r3, #134	; 0x86
 80020e6:	d10c      	bne.n	8002102 <Si468x_dab_get_digital_service_list+0x426>
			{
				services_list[service_index + actual_services].name[name_index] = 0x6F;
 80020e8:	793b      	ldrb	r3, [r7, #4]
 80020ea:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	441a      	add	r2, r3
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	4939      	ldr	r1, [pc, #228]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 80020f4:	2034      	movs	r0, #52	; 0x34
 80020f6:	fb00 f202 	mul.w	r2, r0, r2
 80020fa:	440a      	add	r2, r1
 80020fc:	4413      	add	r3, r2
 80020fe:	226f      	movs	r2, #111	; 0x6f
 8002100:	701a      	strb	r2, [r3, #0]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	3301      	adds	r3, #1
 8002106:	70fb      	strb	r3, [r7, #3]
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	d9c3      	bls.n	8002096 <Si468x_dab_get_digital_service_list+0x3ba>
			}
		}

		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 800210e:	2300      	movs	r3, #0
 8002110:	70bb      	strb	r3, [r7, #2]
 8002112:	e032      	b.n	800217a <Si468x_dab_get_digital_service_list+0x49e>
		{
			services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002114:	793b      	ldrb	r3, [r7, #4]
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	441a      	add	r2, r3
 800211c:	78bb      	ldrb	r3, [r7, #2]
 800211e:	492e      	ldr	r1, [pc, #184]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002120:	201a      	movs	r0, #26
 8002122:	fb00 f202 	mul.w	r2, r0, r2
 8002126:	4413      	add	r3, r2
 8002128:	3314      	adds	r3, #20
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	2200      	movs	r2, #0
 8002130:	70da      	strb	r2, [r3, #3]
			services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 8002132:	79ba      	ldrb	r2, [r7, #6]
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002140:	797b      	ldrb	r3, [r7, #5]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002148:	5cd1      	ldrb	r1, [r2, r3]
 800214a:	793b      	ldrb	r3, [r7, #4]
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	441a      	add	r2, r3
 8002152:	78bb      	ldrb	r3, [r7, #2]
 8002154:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002158:	b2cc      	uxtb	r4, r1
 800215a:	491f      	ldr	r1, [pc, #124]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 800215c:	201a      	movs	r0, #26
 800215e:	fb00 f202 	mul.w	r2, r0, r2
 8002162:	4413      	add	r3, r2
 8002164:	3314      	adds	r3, #20
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	440b      	add	r3, r1
 800216a:	4622      	mov	r2, r4
 800216c:	709a      	strb	r2, [r3, #2]
			components_count++;
 800216e:	797b      	ldrb	r3, [r7, #5]
 8002170:	3301      	adds	r3, #1
 8002172:	717b      	strb	r3, [r7, #5]
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002174:	78bb      	ldrb	r3, [r7, #2]
 8002176:	3301      	adds	r3, #1
 8002178:	70bb      	strb	r3, [r7, #2]
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	4413      	add	r3, r2
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002184:	2134      	movs	r1, #52	; 0x34
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3329      	adds	r3, #41	; 0x29
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	78ba      	ldrb	r2, [r7, #2]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3be      	bcc.n	8002114 <Si468x_dab_get_digital_service_list+0x438>
		}
		services_count++;
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	3301      	adds	r3, #1
 800219a:	71bb      	strb	r3, [r7, #6]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 800219c:	793b      	ldrb	r3, [r7, #4]
 800219e:	3301      	adds	r3, #1
 80021a0:	713b      	strb	r3, [r7, #4]
 80021a2:	793a      	ldrb	r2, [r7, #4]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	f4ff addc 	bcc.w	8001d64 <Si468x_dab_get_digital_service_list+0x88>
	}

	total_services += number_of_services;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <Si468x_dab_get_digital_service_list+0x500>)
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	4413      	add	r3, r2
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <Si468x_dab_get_digital_service_list+0x500>)
 80021b8:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	4413      	add	r3, r2
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021c6:	701a      	strb	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	20001100 	.word	0x20001100
 80021d4:	20002fd6 	.word	0x20002fd6
 80021d8:	20001b84 	.word	0x20001b84
 80021dc:	20002fd4 	.word	0x20002fd4

080021e0 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 80021ea:	2101      	movs	r1, #1
 80021ec:	482d      	ldr	r0, [pc, #180]	; (80022a4 <Si468x_dab_start_digital_service+0xc4>)
 80021ee:	f001 f9cf 	bl	8003590 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 80021f4:	2281      	movs	r2, #129	; 0x81
 80021f6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002200:	2200      	movs	r2, #0
 8002202:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002206:	2200      	movs	r2, #0
 8002208:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002210:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 800221a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002224:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	0e1b      	lsrs	r3, r3, #24
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 800222e:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002236:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002240:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 800224a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	0e1b      	lsrs	r3, r3, #24
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002254:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002256:	4914      	ldr	r1, [pc, #80]	; (80022a8 <Si468x_dab_start_digital_service+0xc8>)
 8002258:	200c      	movs	r0, #12
 800225a:	f7ff fa0f 	bl	800167c <Si468x_write_command>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <Si468x_dab_start_digital_service+0xcc>)
 8002264:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002266:	2001      	movs	r0, #1
 8002268:	f003 fcd0 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800226c:	4910      	ldr	r1, [pc, #64]	; (80022b0 <Si468x_dab_start_digital_service+0xd0>)
 800226e:	2005      	movs	r0, #5
 8002270:	f7ff fa26 	bl	80016c0 <Si468x_read_reply>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <Si468x_dab_start_digital_service+0xcc>)
 800227a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <Si468x_dab_start_digital_service+0xd4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800228a:	2101      	movs	r1, #1
 800228c:	480a      	ldr	r0, [pc, #40]	; (80022b8 <Si468x_dab_start_digital_service+0xd8>)
 800228e:	f001 f97f 	bl	8003590 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8002292:	e003      	b.n	800229c <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002294:	2101      	movs	r1, #1
 8002296:	4809      	ldr	r0, [pc, #36]	; (80022bc <Si468x_dab_start_digital_service+0xdc>)
 8002298:	f001 f97a 	bl	8003590 <send_debug_msg>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	0800c3e4 	.word	0x0800c3e4
 80022a8:	20000100 	.word	0x20000100
 80022ac:	20001940 	.word	0x20001940
 80022b0:	20001100 	.word	0x20001100
 80022b4:	20001a30 	.word	0x20001a30
 80022b8:	0800bedc 	.word	0x0800bedc
 80022bc:	0800c420 	.word	0x0800c420

080022c0 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 80022ca:	2101      	movs	r1, #1
 80022cc:	484a      	ldr	r0, [pc, #296]	; (80023f8 <Si468x_dab_get_ensemble_info+0x138>)
 80022ce:	f001 f95f 	bl	8003590 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <Si468x_dab_get_ensemble_info+0x13c>)
 80022d4:	22b4      	movs	r2, #180	; 0xb4
 80022d6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <Si468x_dab_get_ensemble_info+0x13c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80022de:	4947      	ldr	r1, [pc, #284]	; (80023fc <Si468x_dab_get_ensemble_info+0x13c>)
 80022e0:	2002      	movs	r0, #2
 80022e2:	f7ff f9cb 	bl	800167c <Si468x_write_command>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <Si468x_dab_get_ensemble_info+0x140>)
 80022ec:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f003 fc8c 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80022f4:	4943      	ldr	r1, [pc, #268]	; (8002404 <Si468x_dab_get_ensemble_info+0x144>)
 80022f6:	2015      	movs	r0, #21
 80022f8:	f7ff f9e2 	bl	80016c0 <Si468x_read_reply>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <Si468x_dab_get_ensemble_info+0x140>)
 8002302:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002304:	e012      	b.n	800232c <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002306:	493d      	ldr	r1, [pc, #244]	; (80023fc <Si468x_dab_get_ensemble_info+0x13c>)
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff f9b7 	bl	800167c <Si468x_write_command>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <Si468x_dab_get_ensemble_info+0x140>)
 8002314:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8002316:	2002      	movs	r0, #2
 8002318:	f003 fc78 	bl	8005c0c <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 800231c:	4939      	ldr	r1, [pc, #228]	; (8002404 <Si468x_dab_get_ensemble_info+0x144>)
 800231e:	2015      	movs	r0, #21
 8002320:	f7ff f9ce 	bl	80016c0 <Si468x_read_reply>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <Si468x_dab_get_ensemble_info+0x140>)
 800232a:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 800232c:	4b35      	ldr	r3, [pc, #212]	; (8002404 <Si468x_dab_get_ensemble_info+0x144>)
 800232e:	799b      	ldrb	r3, [r3, #6]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0e8      	beq.n	8002306 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <Si468x_dab_get_ensemble_info+0x148>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002342:	2101      	movs	r1, #1
 8002344:	4831      	ldr	r0, [pc, #196]	; (800240c <Si468x_dab_get_ensemble_info+0x14c>)
 8002346:	f001 f923 	bl	8003590 <send_debug_msg>
		return 0;
 800234a:	2300      	movs	r3, #0
 800234c:	e050      	b.n	80023f0 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <Si468x_dab_get_ensemble_info+0x144>)
 8002350:	795b      	ldrb	r3, [r3, #5]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <Si468x_dab_get_ensemble_info+0x144>)
 8002356:	7912      	ldrb	r2, [r2, #4]
 8002358:	4413      	add	r3, r2
 800235a:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d041      	beq.n	80023e6 <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 8002362:	2101      	movs	r1, #1
 8002364:	482a      	ldr	r0, [pc, #168]	; (8002410 <Si468x_dab_get_ensemble_info+0x150>)
 8002366:	f001 f913 	bl	8003590 <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <Si468x_dab_get_ensemble_info+0x154>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	b291      	uxth	r1, r2
 8002372:	4a29      	ldr	r2, [pc, #164]	; (8002418 <Si468x_dab_get_ensemble_info+0x158>)
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	4413      	add	r3, r2
 8002378:	460a      	mov	r2, r1
 800237a:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <Si468x_dab_get_ensemble_info+0x154>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <Si468x_dab_get_ensemble_info+0x15c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4924      	ldr	r1, [pc, #144]	; (8002418 <Si468x_dab_get_ensemble_info+0x158>)
 8002388:	0143      	lsls	r3, r0, #5
 800238a:	440b      	add	r3, r1
 800238c:	3318      	adds	r3, #24
 800238e:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <Si468x_dab_get_ensemble_info+0x154>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <Si468x_dab_get_ensemble_info+0x160>)
 8002398:	7819      	ldrb	r1, [r3, #0]
 800239a:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <Si468x_dab_get_ensemble_info+0x158>)
 800239c:	0143      	lsls	r3, r0, #5
 800239e:	4413      	add	r3, r2
 80023a0:	331c      	adds	r3, #28
 80023a2:	460a      	mov	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	e011      	b.n	80023d0 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	1d9a      	adds	r2, r3, #6
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <Si468x_dab_get_ensemble_info+0x154>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461c      	mov	r4, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4912      	ldr	r1, [pc, #72]	; (8002404 <Si468x_dab_get_ensemble_info+0x144>)
 80023ba:	5c88      	ldrb	r0, [r1, r2]
 80023bc:	4916      	ldr	r1, [pc, #88]	; (8002418 <Si468x_dab_get_ensemble_info+0x158>)
 80023be:	0162      	lsls	r2, r4, #5
 80023c0:	440a      	add	r2, r1
 80023c2:	4413      	add	r3, r2
 80023c4:	3302      	adds	r3, #2
 80023c6:	4602      	mov	r2, r0
 80023c8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	3301      	adds	r3, #1
 80023ce:	71fb      	strb	r3, [r7, #7]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	d9ea      	bls.n	80023ac <Si468x_dab_get_ensemble_info+0xec>
			}

			total_ensembles++;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <Si468x_dab_get_ensemble_info+0x154>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <Si468x_dab_get_ensemble_info+0x154>)
 80023e0:	701a      	strb	r2, [r3, #0]
			return 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e004      	b.n	80023f0 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 80023e6:	2101      	movs	r1, #1
 80023e8:	480e      	ldr	r0, [pc, #56]	; (8002424 <Si468x_dab_get_ensemble_info+0x164>)
 80023ea:	f001 f8d1 	bl	8003590 <send_debug_msg>
			return 0;
 80023ee:	2300      	movs	r3, #0
		}
	}
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	0800c440 	.word	0x0800c440
 80023fc:	20000100 	.word	0x20000100
 8002400:	20001940 	.word	0x20001940
 8002404:	20001100 	.word	0x20001100
 8002408:	20001a30 	.word	0x20001a30
 800240c:	0800bedc 	.word	0x0800bedc
 8002410:	0800c47c 	.word	0x0800c47c
 8002414:	20002fd5 	.word	0x20002fd5
 8002418:	20001a44 	.word	0x20001a44
 800241c:	20002fd8 	.word	0x20002fd8
 8002420:	20002fdc 	.word	0x20002fdc
 8002424:	0800c48c 	.word	0x0800c48c

08002428 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 800242e:	2101      	movs	r1, #1
 8002430:	48af      	ldr	r0, [pc, #700]	; (80026f0 <Si468x_dab_full_scan+0x2c8>)
 8002432:	f001 f8ad 	bl	8003590 <send_debug_msg>
	total_services = 0;
 8002436:	4baf      	ldr	r3, [pc, #700]	; (80026f4 <Si468x_dab_full_scan+0x2cc>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 800243c:	4bae      	ldr	r3, [pc, #696]	; (80026f8 <Si468x_dab_full_scan+0x2d0>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 8002442:	4bae      	ldr	r3, [pc, #696]	; (80026fc <Si468x_dab_full_scan+0x2d4>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]

	uint8_t valid_timeout = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	71fb      	strb	r3, [r7, #7]
	uint8_t fic_q_timeout = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	71bb      	strb	r3, [r7, #6]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002450:	2300      	movs	r3, #0
 8002452:	717b      	strb	r3, [r7, #5]
 8002454:	e060      	b.n	8002518 <Si468x_dab_full_scan+0xf0>
	{
//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 8002456:	2304      	movs	r3, #4
 8002458:	71fb      	strb	r3, [r7, #7]
		fic_q_timeout = FIC_Q_TIMEOUT;
 800245a:	2364      	movs	r3, #100	; 0x64
 800245c:	71bb      	strb	r3, [r7, #6]

		Si468x_dab_tune_freq(freq_index, 0);
 800245e:	797b      	ldrb	r3, [r7, #5]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fb26 	bl	8001ab4 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002468:	f7ff fbde 	bl	8001c28 <Si468x_dab_digrad_status>
			valid_timeout--;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3b01      	subs	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
			if(!valid_timeout)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <Si468x_dab_full_scan+0x5a>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002478:	2101      	movs	r1, #1
 800247a:	48a1      	ldr	r0, [pc, #644]	; (8002700 <Si468x_dab_full_scan+0x2d8>)
 800247c:	f001 f888 	bl	8003590 <send_debug_msg>
				break;
 8002480:	e010      	b.n	80024a4 <Si468x_dab_full_scan+0x7c>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002482:	2032      	movs	r0, #50	; 0x32
 8002484:	f003 fbc2 	bl	8005c0c <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002488:	4b9e      	ldr	r3, [pc, #632]	; (8002704 <Si468x_dab_full_scan+0x2dc>)
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0e8      	beq.n	8002468 <Si468x_dab_full_scan+0x40>
 8002496:	4b9b      	ldr	r3, [pc, #620]	; (8002704 <Si468x_dab_full_scan+0x2dc>)
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0e1      	beq.n	8002468 <Si468x_dab_full_scan+0x40>

		if(valid_timeout)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d013      	beq.n	80024d2 <Si468x_dab_full_scan+0xaa>
		{
			do
			{
				Si468x_dab_digrad_status();
 80024aa:	f7ff fbbd 	bl	8001c28 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	71bb      	strb	r3, [r7, #6]
				if(!fic_q_timeout)
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <Si468x_dab_full_scan+0x9c>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 80024ba:	2101      	movs	r1, #1
 80024bc:	4890      	ldr	r0, [pc, #576]	; (8002700 <Si468x_dab_full_scan+0x2d8>)
 80024be:	f001 f867 	bl	8003590 <send_debug_msg>
					break;
 80024c2:	e006      	b.n	80024d2 <Si468x_dab_full_scan+0xaa>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80024c4:	2032      	movs	r0, #50	; 0x32
 80024c6:	f003 fba1 	bl	8005c0c <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 80024ca:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <Si468x_dab_full_scan+0x2dc>)
 80024cc:	791b      	ldrb	r3, [r3, #4]
 80024ce:	2b31      	cmp	r3, #49	; 0x31
 80024d0:	d9eb      	bls.n	80024aa <Si468x_dab_full_scan+0x82>
		}

		if(valid_timeout && fic_q_timeout)
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01c      	beq.n	8002512 <Si468x_dab_full_scan+0xea>
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <Si468x_dab_full_scan+0xea>
		{
			do
			{
				Si468x_dab_get_event_status();
 80024de:	f000 fb1b 	bl	8002b18 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80024e2:	200a      	movs	r0, #10
 80024e4:	f003 fb92 	bl	8005c0c <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80024e8:	4b87      	ldr	r3, [pc, #540]	; (8002708 <Si468x_dab_full_scan+0x2e0>)
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f3      	beq.n	80024de <Si468x_dab_full_scan+0xb6>
 80024f6:	4b84      	ldr	r3, [pc, #528]	; (8002708 <Si468x_dab_full_scan+0x2e0>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ec      	bne.n	80024de <Si468x_dab_full_scan+0xb6>

			if(Si468x_dab_get_ensemble_info())
 8002504:	f7ff fedc 	bl	80022c0 <Si468x_dab_get_ensemble_info>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <Si468x_dab_full_scan+0xea>
			{
				Si468x_dab_get_digital_service_list();
 800250e:	f7ff fbe5 	bl	8001cdc <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002512:	797b      	ldrb	r3, [r7, #5]
 8002514:	3301      	adds	r3, #1
 8002516:	717b      	strb	r3, [r7, #5]
 8002518:	4b7c      	ldr	r3, [pc, #496]	; (800270c <Si468x_dab_full_scan+0x2e4>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	797a      	ldrb	r2, [r7, #5]
 800251e:	429a      	cmp	r2, r3
 8002520:	d399      	bcc.n	8002456 <Si468x_dab_full_scan+0x2e>
			}
		}
	}

	eeprom_clear_scanning_data();
 8002522:	f002 f92f 	bl	8004784 <eeprom_clear_scanning_data>

	if(total_services)
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <Si468x_dab_full_scan+0x2cc>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <Si468x_dab_full_scan+0x116>
	{
		eeprom_save_scanning_data(services_list, total_services, ensembles_list, total_ensembles);
 800252e:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <Si468x_dab_full_scan+0x2cc>)
 8002530:	7819      	ldrb	r1, [r3, #0]
 8002532:	4b71      	ldr	r3, [pc, #452]	; (80026f8 <Si468x_dab_full_scan+0x2d0>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4a76      	ldr	r2, [pc, #472]	; (8002710 <Si468x_dab_full_scan+0x2e8>)
 8002538:	4876      	ldr	r0, [pc, #472]	; (8002714 <Si468x_dab_full_scan+0x2ec>)
 800253a:	f002 f97f 	bl	800483c <eeprom_save_scanning_data>
	}

	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800253e:	2100      	movs	r1, #0
 8002540:	4875      	ldr	r0, [pc, #468]	; (8002718 <Si468x_dab_full_scan+0x2f0>)
 8002542:	f001 f825 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <Si468x_dab_full_scan+0x2d0>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	220a      	movs	r2, #10
 800254c:	4973      	ldr	r1, [pc, #460]	; (800271c <Si468x_dab_full_scan+0x2f4>)
 800254e:	4618      	mov	r0, r3
 8002550:	f009 fb52 	bl	800bbf8 <itoa>
 8002554:	4603      	mov	r3, r0
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f001 f819 	bl	8003590 <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800255e:	2101      	movs	r1, #1
 8002560:	486f      	ldr	r0, [pc, #444]	; (8002720 <Si468x_dab_full_scan+0x2f8>)
 8002562:	f001 f815 	bl	8003590 <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 8002566:	2100      	movs	r1, #0
 8002568:	486e      	ldr	r0, [pc, #440]	; (8002724 <Si468x_dab_full_scan+0x2fc>)
 800256a:	f001 f811 	bl	8003590 <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800256e:	2100      	movs	r1, #0
 8002570:	486d      	ldr	r0, [pc, #436]	; (8002728 <Si468x_dab_full_scan+0x300>)
 8002572:	f001 f80d 	bl	8003590 <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002576:	2100      	movs	r1, #0
 8002578:	486c      	ldr	r0, [pc, #432]	; (800272c <Si468x_dab_full_scan+0x304>)
 800257a:	f001 f809 	bl	8003590 <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 800257e:	2101      	movs	r1, #1
 8002580:	486b      	ldr	r0, [pc, #428]	; (8002730 <Si468x_dab_full_scan+0x308>)
 8002582:	f001 f805 	bl	8003590 <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002586:	2300      	movs	r3, #0
 8002588:	713b      	strb	r3, [r7, #4]
 800258a:	e054      	b.n	8002636 <Si468x_dab_full_scan+0x20e>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 800258c:	2100      	movs	r1, #0
 800258e:	4869      	ldr	r0, [pc, #420]	; (8002734 <Si468x_dab_full_scan+0x30c>)
 8002590:	f000 fffe 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002594:	793b      	ldrb	r3, [r7, #4]
 8002596:	220a      	movs	r2, #10
 8002598:	4960      	ldr	r1, [pc, #384]	; (800271c <Si468x_dab_full_scan+0x2f4>)
 800259a:	4618      	mov	r0, r3
 800259c:	f009 fb2c 	bl	800bbf8 <itoa>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fff3 	bl	8003590 <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 80025aa:	2100      	movs	r1, #0
 80025ac:	4862      	ldr	r0, [pc, #392]	; (8002738 <Si468x_dab_full_scan+0x310>)
 80025ae:	f000 ffef 	bl	8003590 <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80025b2:	793b      	ldrb	r3, [r7, #4]
 80025b4:	015b      	lsls	r3, r3, #5
 80025b6:	4a56      	ldr	r2, [pc, #344]	; (8002710 <Si468x_dab_full_scan+0x2e8>)
 80025b8:	4413      	add	r3, r2
 80025ba:	3302      	adds	r3, #2
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 ffe6 	bl	8003590 <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 80025c4:	2100      	movs	r1, #0
 80025c6:	485b      	ldr	r0, [pc, #364]	; (8002734 <Si468x_dab_full_scan+0x30c>)
 80025c8:	f000 ffe2 	bl	8003590 <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80025cc:	793b      	ldrb	r3, [r7, #4]
 80025ce:	4a50      	ldr	r2, [pc, #320]	; (8002710 <Si468x_dab_full_scan+0x2e8>)
 80025d0:	015b      	lsls	r3, r3, #5
 80025d2:	4413      	add	r3, r2
 80025d4:	3318      	adds	r3, #24
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	220a      	movs	r2, #10
 80025da:	4950      	ldr	r1, [pc, #320]	; (800271c <Si468x_dab_full_scan+0x2f4>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f009 fb0b 	bl	800bbf8 <itoa>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 ffd2 	bl	8003590 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80025ec:	2100      	movs	r1, #0
 80025ee:	4853      	ldr	r0, [pc, #332]	; (800273c <Si468x_dab_full_scan+0x314>)
 80025f0:	f000 ffce 	bl	8003590 <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80025f4:	793b      	ldrb	r3, [r7, #4]
 80025f6:	4a46      	ldr	r2, [pc, #280]	; (8002710 <Si468x_dab_full_scan+0x2e8>)
 80025f8:	015b      	lsls	r3, r3, #5
 80025fa:	4413      	add	r3, r2
 80025fc:	331c      	adds	r3, #28
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <Si468x_dab_full_scan+0x318>)
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f000 ffc0 	bl	8003590 <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 8002610:	793b      	ldrb	r3, [r7, #4]
 8002612:	4a3f      	ldr	r2, [pc, #252]	; (8002710 <Si468x_dab_full_scan+0x2e8>)
 8002614:	015b      	lsls	r3, r3, #5
 8002616:	4413      	add	r3, r2
 8002618:	331c      	adds	r3, #28
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b13      	cmp	r3, #19
 800261e:	d803      	bhi.n	8002628 <Si468x_dab_full_scan+0x200>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002620:	2100      	movs	r1, #0
 8002622:	4848      	ldr	r0, [pc, #288]	; (8002744 <Si468x_dab_full_scan+0x31c>)
 8002624:	f000 ffb4 	bl	8003590 <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 8002628:	2101      	movs	r1, #1
 800262a:	4847      	ldr	r0, [pc, #284]	; (8002748 <Si468x_dab_full_scan+0x320>)
 800262c:	f000 ffb0 	bl	8003590 <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002630:	793b      	ldrb	r3, [r7, #4]
 8002632:	3301      	adds	r3, #1
 8002634:	713b      	strb	r3, [r7, #4]
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <Si468x_dab_full_scan+0x2d0>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	793a      	ldrb	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d3a5      	bcc.n	800258c <Si468x_dab_full_scan+0x164>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002640:	2101      	movs	r1, #1
 8002642:	4837      	ldr	r0, [pc, #220]	; (8002720 <Si468x_dab_full_scan+0x2f8>)
 8002644:	f000 ffa4 	bl	8003590 <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 8002648:	2100      	movs	r1, #0
 800264a:	4840      	ldr	r0, [pc, #256]	; (800274c <Si468x_dab_full_scan+0x324>)
 800264c:	f000 ffa0 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <Si468x_dab_full_scan+0x2cc>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	220a      	movs	r2, #10
 8002656:	4931      	ldr	r1, [pc, #196]	; (800271c <Si468x_dab_full_scan+0x2f4>)
 8002658:	4618      	mov	r0, r3
 800265a:	f009 facd 	bl	800bbf8 <itoa>
 800265e:	4603      	mov	r3, r0
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f000 ff94 	bl	8003590 <send_debug_msg>

	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002668:	2101      	movs	r1, #1
 800266a:	4839      	ldr	r0, [pc, #228]	; (8002750 <Si468x_dab_full_scan+0x328>)
 800266c:	f000 ff90 	bl	8003590 <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8002670:	2101      	movs	r1, #1
 8002672:	4838      	ldr	r0, [pc, #224]	; (8002754 <Si468x_dab_full_scan+0x32c>)
 8002674:	f000 ff8c 	bl	8003590 <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002678:	2300      	movs	r3, #0
 800267a:	70fb      	strb	r3, [r7, #3]
 800267c:	e12b      	b.n	80028d6 <Si468x_dab_full_scan+0x4ae>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 800267e:	2100      	movs	r1, #0
 8002680:	482c      	ldr	r0, [pc, #176]	; (8002734 <Si468x_dab_full_scan+0x30c>)
 8002682:	f000 ff85 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	220a      	movs	r2, #10
 800268a:	4924      	ldr	r1, [pc, #144]	; (800271c <Si468x_dab_full_scan+0x2f4>)
 800268c:	4618      	mov	r0, r3
 800268e:	f009 fab3 	bl	800bbf8 <itoa>
 8002692:	4603      	mov	r3, r0
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f000 ff7a 	bl	8003590 <send_debug_msg>
		if(services_index < 10)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d803      	bhi.n	80026aa <Si468x_dab_full_scan+0x282>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80026a2:	2100      	movs	r1, #0
 80026a4:	4827      	ldr	r0, [pc, #156]	; (8002744 <Si468x_dab_full_scan+0x31c>)
 80026a6:	f000 ff73 	bl	8003590 <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 80026aa:	2100      	movs	r1, #0
 80026ac:	482a      	ldr	r0, [pc, #168]	; (8002758 <Si468x_dab_full_scan+0x330>)
 80026ae:	f000 ff6f 	bl	8003590 <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <Si468x_dab_full_scan+0x2ec>)
 80026b6:	2134      	movs	r1, #52	; 0x34
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <Si468x_dab_full_scan+0x2b2>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	2234      	movs	r2, #52	; 0x34
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <Si468x_dab_full_scan+0x2ec>)
 80026ce:	4413      	add	r3, r2
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff5c 	bl	8003590 <send_debug_msg>
 80026d8:	e003      	b.n	80026e2 <Si468x_dab_full_scan+0x2ba>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 80026da:	2100      	movs	r1, #0
 80026dc:	481f      	ldr	r0, [pc, #124]	; (800275c <Si468x_dab_full_scan+0x334>)
 80026de:	f000 ff57 	bl	8003590 <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 80026e2:	2100      	movs	r1, #0
 80026e4:	481e      	ldr	r0, [pc, #120]	; (8002760 <Si468x_dab_full_scan+0x338>)
 80026e6:	f000 ff53 	bl	8003590 <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	70bb      	strb	r3, [r7, #2]
 80026ee:	e056      	b.n	800279e <Si468x_dab_full_scan+0x376>
 80026f0:	0800c4a0 	.word	0x0800c4a0
 80026f4:	20002fd4 	.word	0x20002fd4
 80026f8:	20002fd5 	.word	0x20002fd5
 80026fc:	20002fd6 	.word	0x20002fd6
 8002700:	0800c48c 	.word	0x0800c48c
 8002704:	20001a08 	.word	0x20001a08
 8002708:	20001a34 	.word	0x20001a34
 800270c:	20001a04 	.word	0x20001a04
 8002710:	20001a44 	.word	0x20001a44
 8002714:	20001b84 	.word	0x20001b84
 8002718:	0800c4dc 	.word	0x0800c4dc
 800271c:	20001900 	.word	0x20001900
 8002720:	0800c4f0 	.word	0x0800c4f0
 8002724:	0800c524 	.word	0x0800c524
 8002728:	0800c530 	.word	0x0800c530
 800272c:	0800c544 	.word	0x0800c544
 8002730:	0800c554 	.word	0x0800c554
 8002734:	0800c564 	.word	0x0800c564
 8002738:	0800c568 	.word	0x0800c568
 800273c:	0800c574 	.word	0x0800c574
 8002740:	20000008 	.word	0x20000008
 8002744:	0800c57c 	.word	0x0800c57c
 8002748:	0800c580 	.word	0x0800c580
 800274c:	0800c584 	.word	0x0800c584
 8002750:	0800c598 	.word	0x0800c598
 8002754:	0800c604 	.word	0x0800c604
 8002758:	0800c670 	.word	0x0800c670
 800275c:	0800c678 	.word	0x0800c678
 8002760:	0800c68c 	.word	0x0800c68c
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002764:	78bb      	ldrb	r3, [r7, #2]
 8002766:	4a63      	ldr	r2, [pc, #396]	; (80028f4 <Si468x_dab_full_scan+0x4cc>)
 8002768:	015b      	lsls	r3, r3, #5
 800276a:	4413      	add	r3, r2
 800276c:	331c      	adds	r3, #28
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	4961      	ldr	r1, [pc, #388]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 8002774:	2034      	movs	r0, #52	; 0x34
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	440b      	add	r3, r1
 800277c:	3328      	adds	r3, #40	; 0x28
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d109      	bne.n	8002798 <Si468x_dab_full_scan+0x370>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002784:	78bb      	ldrb	r3, [r7, #2]
 8002786:	015b      	lsls	r3, r3, #5
 8002788:	4a5a      	ldr	r2, [pc, #360]	; (80028f4 <Si468x_dab_full_scan+0x4cc>)
 800278a:	4413      	add	r3, r2
 800278c:	3302      	adds	r3, #2
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fefd 	bl	8003590 <send_debug_msg>
				break;
 8002796:	e007      	b.n	80027a8 <Si468x_dab_full_scan+0x380>
		for(uint8_t i = 0; i < total_ensembles; i++)
 8002798:	78bb      	ldrb	r3, [r7, #2]
 800279a:	3301      	adds	r3, #1
 800279c:	70bb      	strb	r3, [r7, #2]
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <Si468x_dab_full_scan+0x4d4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	78ba      	ldrb	r2, [r7, #2]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3dd      	bcc.n	8002764 <Si468x_dab_full_scan+0x33c>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 80027a8:	2100      	movs	r1, #0
 80027aa:	4855      	ldr	r0, [pc, #340]	; (8002900 <Si468x_dab_full_scan+0x4d8>)
 80027ac:	f000 fef0 	bl	8003590 <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 80027b4:	2134      	movs	r1, #52	; 0x34
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3324      	adds	r3, #36	; 0x24
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	220a      	movs	r2, #10
 80027c2:	4950      	ldr	r1, [pc, #320]	; (8002904 <Si468x_dab_full_scan+0x4dc>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f009 fa17 	bl	800bbf8 <itoa>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fede 	bl	8003590 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80027d4:	2100      	movs	r1, #0
 80027d6:	484c      	ldr	r0, [pc, #304]	; (8002908 <Si468x_dab_full_scan+0x4e0>)
 80027d8:	f000 feda 	bl	8003590 <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 80027e0:	2134      	movs	r1, #52	; 0x34
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3328      	adds	r3, #40	; 0x28
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <Si468x_dab_full_scan+0x4e4>)
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 feca 	bl	8003590 <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	4a3e      	ldr	r2, [pc, #248]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 8002800:	2134      	movs	r1, #52	; 0x34
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3328      	adds	r3, #40	; 0x28
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b13      	cmp	r3, #19
 800280e:	d803      	bhi.n	8002818 <Si468x_dab_full_scan+0x3f0>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002810:	2100      	movs	r1, #0
 8002812:	483f      	ldr	r0, [pc, #252]	; (8002910 <Si468x_dab_full_scan+0x4e8>)
 8002814:	f000 febc 	bl	8003590 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002818:	2100      	movs	r1, #0
 800281a:	483e      	ldr	r0, [pc, #248]	; (8002914 <Si468x_dab_full_scan+0x4ec>)
 800281c:	f000 feb8 	bl	8003590 <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 8002824:	2134      	movs	r1, #52	; 0x34
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3315      	adds	r3, #21
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	220a      	movs	r2, #10
 8002832:	4934      	ldr	r1, [pc, #208]	; (8002904 <Si468x_dab_full_scan+0x4dc>)
 8002834:	4618      	mov	r0, r3
 8002836:	f009 f9df 	bl	800bbf8 <itoa>
 800283a:	4603      	mov	r3, r0
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fea6 	bl	8003590 <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 8002848:	2134      	movs	r1, #52	; 0x34
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3315      	adds	r3, #21
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b09      	cmp	r3, #9
 8002856:	d803      	bhi.n	8002860 <Si468x_dab_full_scan+0x438>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002858:	2100      	movs	r1, #0
 800285a:	482d      	ldr	r0, [pc, #180]	; (8002910 <Si468x_dab_full_scan+0x4e8>)
 800285c:	f000 fe98 	bl	8003590 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002860:	2100      	movs	r1, #0
 8002862:	482c      	ldr	r0, [pc, #176]	; (8002914 <Si468x_dab_full_scan+0x4ec>)
 8002864:	f000 fe94 	bl	8003590 <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002868:	2100      	movs	r1, #0
 800286a:	482b      	ldr	r0, [pc, #172]	; (8002918 <Si468x_dab_full_scan+0x4f0>)
 800286c:	f000 fe90 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 8002874:	2134      	movs	r1, #52	; 0x34
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3320      	adds	r3, #32
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2210      	movs	r2, #16
 8002882:	4920      	ldr	r1, [pc, #128]	; (8002904 <Si468x_dab_full_scan+0x4dc>)
 8002884:	4618      	mov	r0, r3
 8002886:	f009 f9b7 	bl	800bbf8 <itoa>
 800288a:	4603      	mov	r3, r0
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fe7e 	bl	8003590 <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002894:	2100      	movs	r1, #0
 8002896:	4821      	ldr	r0, [pc, #132]	; (800291c <Si468x_dab_full_scan+0x4f4>)
 8002898:	f000 fe7a 	bl	8003590 <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 800289c:	2100      	movs	r1, #0
 800289e:	481e      	ldr	r0, [pc, #120]	; (8002918 <Si468x_dab_full_scan+0x4f0>)
 80028a0:	f000 fe76 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <Si468x_dab_full_scan+0x4d0>)
 80028a8:	2134      	movs	r1, #52	; 0x34
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	332a      	adds	r3, #42	; 0x2a
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4913      	ldr	r1, [pc, #76]	; (8002904 <Si468x_dab_full_scan+0x4dc>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f009 f99d 	bl	800bbf8 <itoa>
 80028be:	4603      	mov	r3, r0
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fe64 	bl	8003590 <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 80028c8:	2101      	movs	r1, #1
 80028ca:	4815      	ldr	r0, [pc, #84]	; (8002920 <Si468x_dab_full_scan+0x4f8>)
 80028cc:	f000 fe60 	bl	8003590 <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	3301      	adds	r3, #1
 80028d4:	70fb      	strb	r3, [r7, #3]
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <Si468x_dab_full_scan+0x4fc>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f4ff aece 	bcc.w	800267e <Si468x_dab_full_scan+0x256>
	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80028e2:	2101      	movs	r1, #1
 80028e4:	4810      	ldr	r0, [pc, #64]	; (8002928 <Si468x_dab_full_scan+0x500>)
 80028e6:	f000 fe53 	bl	8003590 <send_debug_msg>

	//to check if everything is ok in eeprom
	//  eeprom_show();


}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20001a44 	.word	0x20001a44
 80028f8:	20001b84 	.word	0x20001b84
 80028fc:	20002fd5 	.word	0x20002fd5
 8002900:	0800c68c 	.word	0x0800c68c
 8002904:	20001900 	.word	0x20001900
 8002908:	0800c574 	.word	0x0800c574
 800290c:	20000008 	.word	0x20000008
 8002910:	0800c57c 	.word	0x0800c57c
 8002914:	0800c690 	.word	0x0800c690
 8002918:	0800c698 	.word	0x0800c698
 800291c:	0800c670 	.word	0x0800c670
 8002920:	0800c69c 	.word	0x0800c69c
 8002924:	20002fd4 	.word	0x20002fd4
 8002928:	0800c598 	.word	0x0800c598

0800292c <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af06      	add	r7, sp, #24
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002932:	2101      	movs	r1, #1
 8002934:	486c      	ldr	r0, [pc, #432]	; (8002ae8 <Si468x_dab_get_audio_info+0x1bc>)
 8002936:	f000 fe2b 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 800293a:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <Si468x_dab_get_audio_info+0x1c0>)
 800293c:	22bd      	movs	r2, #189	; 0xbd
 800293e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <Si468x_dab_get_audio_info+0x1c0>)
 8002942:	2203      	movs	r2, #3
 8002944:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002946:	4969      	ldr	r1, [pc, #420]	; (8002aec <Si468x_dab_get_audio_info+0x1c0>)
 8002948:	2002      	movs	r0, #2
 800294a:	f7fe fe97 	bl	800167c <Si468x_write_command>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <Si468x_dab_get_audio_info+0x1c4>)
 8002954:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002956:	2001      	movs	r0, #1
 8002958:	f003 f958 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 800295c:	4965      	ldr	r1, [pc, #404]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 800295e:	2014      	movs	r0, #20
 8002960:	f7fe feae 	bl	80016c0 <Si468x_read_reply>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <Si468x_dab_get_audio_info+0x1c4>)
 800296a:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 800296c:	4b61      	ldr	r3, [pc, #388]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 800296e:	795b      	ldrb	r3, [r3, #5]
 8002970:	b29b      	uxth	r3, r3
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b29a      	uxth	r2, r3
 8002976:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 8002978:	791b      	ldrb	r3, [r3, #4]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4413      	add	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002980:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 8002982:	79db      	ldrb	r3, [r3, #7]
 8002984:	b29b      	uxth	r3, r3
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b5a      	ldr	r3, [pc, #360]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002994:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 8002996:	7a1b      	ldrb	r3, [r3, #8]
 8002998:	111b      	asrs	r3, r3, #4
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029a4:	7a1b      	ldrb	r3, [r3, #8]
 80029a6:	10db      	asrs	r3, r3, #3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029b2:	7a1b      	ldrb	r3, [r3, #8]
 80029b4:	109b      	asrs	r3, r3, #2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 80029be:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029c0:	7a1b      	ldrb	r3, [r3, #8]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	703b      	strb	r3, [r7, #0]

	dab_digrad_status.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029ca:	7b1b      	ldrb	r3, [r3, #12]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029d0:	7b5b      	ldrb	r3, [r3, #13]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	441a      	add	r2, r3
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029d8:	7b9b      	ldrb	r3, [r3, #14]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	441a      	add	r2, r3
 80029de:	4b45      	ldr	r3, [pc, #276]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029e0:	7bdb      	ldrb	r3, [r3, #15]
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	4413      	add	r3, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <Si468x_dab_get_audio_info+0x1cc>)
 80029ea:	621a      	str	r2, [r3, #32]
	dab_digrad_status.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029ee:	7c1b      	ldrb	r3, [r3, #16]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029f4:	7c5b      	ldrb	r3, [r3, #17]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	441a      	add	r2, r3
 80029fa:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 80029fc:	7c9b      	ldrb	r3, [r3, #18]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	441a      	add	r2, r3
 8002a02:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <Si468x_dab_get_audio_info+0x1c8>)
 8002a04:	7cdb      	ldrb	r3, [r3, #19]
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	4413      	add	r3, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <Si468x_dab_get_audio_info+0x1cc>)
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24

	Display_dab_digrad_status_data(dab_digrad_status);
 8002a10:	4e39      	ldr	r6, [pc, #228]	; (8002af8 <Si468x_dab_get_audio_info+0x1cc>)
 8002a12:	466d      	mov	r5, sp
 8002a14:	f106 0410 	add.w	r4, r6, #16
 8002a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a20:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a28:	f000 fff4 	bl	8003a14 <Display_dab_digrad_status_data>

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4833      	ldr	r0, [pc, #204]	; (8002afc <Si468x_dab_get_audio_info+0x1d0>)
 8002a30:	f000 fdae 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	220a      	movs	r2, #10
 8002a38:	4931      	ldr	r1, [pc, #196]	; (8002b00 <Si468x_dab_get_audio_info+0x1d4>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f009 f8dc 	bl	800bbf8 <itoa>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fda3 	bl	8003590 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	482d      	ldr	r0, [pc, #180]	; (8002b04 <Si468x_dab_get_audio_info+0x1d8>)
 8002a4e:	f000 fd9f 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002a52:	88bb      	ldrh	r3, [r7, #4]
 8002a54:	220a      	movs	r2, #10
 8002a56:	492a      	ldr	r1, [pc, #168]	; (8002b00 <Si468x_dab_get_audio_info+0x1d4>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f009 f8cd 	bl	800bbf8 <itoa>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fd94 	bl	8003590 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4827      	ldr	r0, [pc, #156]	; (8002b08 <Si468x_dab_get_audio_info+0x1dc>)
 8002a6c:	f000 fd90 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	220a      	movs	r2, #10
 8002a74:	4922      	ldr	r1, [pc, #136]	; (8002b00 <Si468x_dab_get_audio_info+0x1d4>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f009 f8be 	bl	800bbf8 <itoa>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fd85 	bl	8003590 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002a86:	2100      	movs	r1, #0
 8002a88:	4820      	ldr	r0, [pc, #128]	; (8002b0c <Si468x_dab_get_audio_info+0x1e0>)
 8002a8a:	f000 fd81 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002a8e:	78bb      	ldrb	r3, [r7, #2]
 8002a90:	220a      	movs	r2, #10
 8002a92:	491b      	ldr	r1, [pc, #108]	; (8002b00 <Si468x_dab_get_audio_info+0x1d4>)
 8002a94:	4618      	mov	r0, r3
 8002a96:	f009 f8af 	bl	800bbf8 <itoa>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd76 	bl	8003590 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	481a      	ldr	r0, [pc, #104]	; (8002b10 <Si468x_dab_get_audio_info+0x1e4>)
 8002aa8:	f000 fd72 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	220a      	movs	r2, #10
 8002ab0:	4913      	ldr	r1, [pc, #76]	; (8002b00 <Si468x_dab_get_audio_info+0x1d4>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f009 f8a0 	bl	800bbf8 <itoa>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fd67 	bl	8003590 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <Si468x_dab_get_audio_info+0x1e8>)
 8002ac6:	f000 fd63 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002aca:	783b      	ldrb	r3, [r7, #0]
 8002acc:	220a      	movs	r2, #10
 8002ace:	490c      	ldr	r1, [pc, #48]	; (8002b00 <Si468x_dab_get_audio_info+0x1d4>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f009 f891 	bl	800bbf8 <itoa>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fd58 	bl	8003590 <send_debug_msg>

}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae8:	0800c6a8 	.word	0x0800c6a8
 8002aec:	20000100 	.word	0x20000100
 8002af0:	20001940 	.word	0x20001940
 8002af4:	20001100 	.word	0x20001100
 8002af8:	20001a08 	.word	0x20001a08
 8002afc:	0800c6e4 	.word	0x0800c6e4
 8002b00:	20001900 	.word	0x20001900
 8002b04:	0800c6f0 	.word	0x0800c6f0
 8002b08:	0800c700 	.word	0x0800c700
 8002b0c:	0800c714 	.word	0x0800c714
 8002b10:	0800c720 	.word	0x0800c720
 8002b14:	0800c72c 	.word	0x0800c72c

08002b18 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4811      	ldr	r0, [pc, #68]	; (8002b64 <Si468x_dab_get_event_status+0x4c>)
 8002b20:	f000 fd36 	bl	8003590 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <Si468x_dab_get_event_status+0x50>)
 8002b26:	22b3      	movs	r2, #179	; 0xb3
 8002b28:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <Si468x_dab_get_event_status+0x50>)
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b30:	490d      	ldr	r1, [pc, #52]	; (8002b68 <Si468x_dab_get_event_status+0x50>)
 8002b32:	2002      	movs	r0, #2
 8002b34:	f7fe fda2 	bl	800167c <Si468x_write_command>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <Si468x_dab_get_event_status+0x54>)
 8002b3e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f003 f863 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <Si468x_dab_get_event_status+0x58>)
 8002b48:	2009      	movs	r0, #9
 8002b4a:	f7fe fdb9 	bl	80016c0 <Si468x_read_reply>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <Si468x_dab_get_event_status+0x54>)
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <Si468x_dab_get_event_status+0x58>)
 8002b58:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002b5a:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <Si468x_dab_get_event_status+0x5c>)
 8002b5c:	6013      	str	r3, [r2, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	0800c73c 	.word	0x0800c73c
 8002b68:	20000100 	.word	0x20000100
 8002b6c:	20001940 	.word	0x20001940
 8002b70:	20001100 	.word	0x20001100
 8002b74:	20001a34 	.word	0x20001a34

08002b78 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002b84:	2101      	movs	r1, #1
 8002b86:	484a      	ldr	r0, [pc, #296]	; (8002cb0 <Si468x_dab_get_component_info+0x138>)
 8002b88:	f000 fd02 	bl	8003590 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002b8e:	22bb      	movs	r2, #187	; 0xbb
 8002b90:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002b92:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002baa:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bb4:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bbe:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0e1b      	lsrs	r3, r3, #24
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bc8:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	121b      	asrs	r3, r3, #8
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bd8:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	141b      	asrs	r3, r3, #16
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002be2:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	161b      	asrs	r3, r3, #24
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bec:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002bee:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <Si468x_dab_get_component_info+0x13c>)
 8002bf0:	200c      	movs	r0, #12
 8002bf2:	f7fe fd43 	bl	800167c <Si468x_write_command>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <Si468x_dab_get_component_info+0x140>)
 8002bfc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002bfe:	2005      	movs	r0, #5
 8002c00:	f003 f804 	bl	8005c0c <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002c04:	492d      	ldr	r1, [pc, #180]	; (8002cbc <Si468x_dab_get_component_info+0x144>)
 8002c06:	201a      	movs	r0, #26
 8002c08:	f7fe fd5a 	bl	80016c0 <Si468x_read_reply>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <Si468x_dab_get_component_info+0x140>)
 8002c12:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <Si468x_dab_get_component_info+0x144>)
 8002c16:	799b      	ldrb	r3, [r3, #6]
 8002c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c1c:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e00c      	b.n	8002c3e <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	f103 0208 	add.w	r2, r3, #8
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	4923      	ldr	r1, [pc, #140]	; (8002cbc <Si468x_dab_get_component_info+0x144>)
 8002c2e:	5c8a      	ldrb	r2, [r1, r2]
 8002c30:	3320      	adds	r3, #32
 8002c32:	443b      	add	r3, r7
 8002c34:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002c38:	7ffb      	ldrb	r3, [r7, #31]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	7ffb      	ldrb	r3, [r7, #31]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d9ef      	bls.n	8002c24 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <Si468x_dab_get_component_info+0x144>)
 8002c46:	7e1b      	ldrb	r3, [r3, #24]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <Si468x_dab_get_component_info+0x144>)
 8002c4c:	7e5b      	ldrb	r3, [r3, #25]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4819      	ldr	r0, [pc, #100]	; (8002cc0 <Si468x_dab_get_component_info+0x148>)
 8002c5c:	f000 fc98 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002c60:	7fbb      	ldrb	r3, [r7, #30]
 8002c62:	220a      	movs	r2, #10
 8002c64:	4917      	ldr	r1, [pc, #92]	; (8002cc4 <Si468x_dab_get_component_info+0x14c>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f008 ffc6 	bl	800bbf8 <itoa>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fc8d 	bl	8003590 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002c76:	2100      	movs	r1, #0
 8002c78:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <Si468x_dab_get_component_info+0x150>)
 8002c7a:	f000 fc89 	bl	8003590 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fc83 	bl	8003590 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	480f      	ldr	r0, [pc, #60]	; (8002ccc <Si468x_dab_get_component_info+0x154>)
 8002c8e:	f000 fc7f 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002c92:	8bbb      	ldrh	r3, [r7, #28]
 8002c94:	2202      	movs	r2, #2
 8002c96:	490b      	ldr	r1, [pc, #44]	; (8002cc4 <Si468x_dab_get_component_info+0x14c>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f008 ffad 	bl	800bbf8 <itoa>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fc74 	bl	8003590 <send_debug_msg>

}
 8002ca8:	bf00      	nop
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	0800c77c 	.word	0x0800c77c
 8002cb4:	20000100 	.word	0x20000100
 8002cb8:	20001940 	.word	0x20001940
 8002cbc:	20001100 	.word	0x20001100
 8002cc0:	0800c7b0 	.word	0x0800c7b0
 8002cc4:	20001900 	.word	0x20001900
 8002cc8:	0800c7bc 	.word	0x0800c7bc
 8002ccc:	0800c7d0 	.word	0x0800c7d0

08002cd0 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <Si468x_dab_get_time+0x78>)
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02f      	beq.n	8002d42 <Si468x_dab_get_time+0x72>
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <Si468x_dab_get_time+0x78>)
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d028      	beq.n	8002d42 <Si468x_dab_get_time+0x72>
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <Si468x_dab_get_time+0x78>)
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	2b5a      	cmp	r3, #90	; 0x5a
 8002cf6:	d924      	bls.n	8002d42 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <Si468x_dab_get_time+0x7c>)
 8002cfa:	22bc      	movs	r2, #188	; 0xbc
 8002cfc:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <Si468x_dab_get_time+0x7c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002d04:	4911      	ldr	r1, [pc, #68]	; (8002d4c <Si468x_dab_get_time+0x7c>)
 8002d06:	2002      	movs	r0, #2
 8002d08:	f7fe fcb8 	bl	800167c <Si468x_write_command>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <Si468x_dab_get_time+0x80>)
 8002d12:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f002 ff79 	bl	8005c0c <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002d1a:	490e      	ldr	r1, [pc, #56]	; (8002d54 <Si468x_dab_get_time+0x84>)
 8002d1c:	200b      	movs	r0, #11
 8002d1e:	f7fe fccf 	bl	80016c0 <Si468x_read_reply>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <Si468x_dab_get_time+0x80>)
 8002d28:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <Si468x_dab_get_time+0x88>)
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <Si468x_dab_get_time+0x84>)
 8002d2e:	3304      	adds	r3, #4
 8002d30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d34:	e882 0003 	stmia.w	r2, {r0, r1}
		Display_time(time);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <Si468x_dab_get_time+0x88>)
 8002d3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d3e:	f001 fa9b 	bl	8004278 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20001a08 	.word	0x20001a08
 8002d4c:	20000100 	.word	0x20000100
 8002d50:	20001940 	.word	0x20001940
 8002d54:	20001100 	.word	0x20001100
 8002d58:	20001a3c 	.word	0x20001a3c

08002d5c <play_station>:

void play_station(uint8_t direction)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
	if(total_ensembles && total_services)
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <play_station+0x18c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80af 	beq.w	8002ece <play_station+0x172>
 8002d70:	4b5e      	ldr	r3, [pc, #376]	; (8002eec <play_station+0x190>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80aa 	beq.w	8002ece <play_station+0x172>
	{
		switch(direction)
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d011      	beq.n	8002da4 <play_station+0x48>
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d122      	bne.n	8002dca <play_station+0x6e>
		{
			case 2:
				actual_station++;
 8002d84:	4b5a      	ldr	r3, [pc, #360]	; (8002ef0 <play_station+0x194>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <play_station+0x194>)
 8002d8e:	701a      	strb	r2, [r3, #0]
				if(actual_station == total_services)
 8002d90:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <play_station+0x194>)
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <play_station+0x190>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d118      	bne.n	8002dce <play_station+0x72>
				{
				  actual_station = 0;
 8002d9c:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <play_station+0x194>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002da2:	e014      	b.n	8002dce <play_station+0x72>
			case 1:
				actual_station--;
 8002da4:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <play_station+0x194>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <play_station+0x194>)
 8002dae:	701a      	strb	r2, [r3, #0]
				if(actual_station < 0 || actual_station > total_services)
 8002db0:	4b4f      	ldr	r3, [pc, #316]	; (8002ef0 <play_station+0x194>)
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <play_station+0x190>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d90a      	bls.n	8002dd2 <play_station+0x76>
				{
				  actual_station = total_services - 1;
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	; (8002eec <play_station+0x190>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <play_station+0x194>)
 8002dc6:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002dc8:	e003      	b.n	8002dd2 <play_station+0x76>
			default:
				break;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <play_station+0x78>
				break;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <play_station+0x78>
				break;
 8002dd2:	bf00      	nop
		}

		last_station_index = actual_station;
 8002dd4:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <play_station+0x194>)
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <play_station+0x198>)
 8002dda:	701a      	strb	r2, [r3, #0]

		eeprom_write(LAST_STATION_INDEX_ADDR, &last_station_index, sizeof(last_station_index));
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4945      	ldr	r1, [pc, #276]	; (8002ef4 <play_station+0x198>)
 8002de0:	f240 1007 	movw	r0, #263	; 0x107
 8002de4:	f001 fca6 	bl	8004734 <eeprom_write>


		Display_show_station(services_list, actual_station, total_services);
 8002de8:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <play_station+0x194>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4b3f      	ldr	r3, [pc, #252]	; (8002eec <play_station+0x190>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4840      	ldr	r0, [pc, #256]	; (8002ef8 <play_station+0x19c>)
 8002df6:	f001 fac3 	bl	8004380 <Display_show_station>
		send_debug_msg("---------------------------------", CRLF_SEND);
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	483f      	ldr	r0, [pc, #252]	; (8002efc <play_station+0x1a0>)
 8002dfe:	f000 fbc7 	bl	8003590 <send_debug_msg>
		send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002e02:	2100      	movs	r1, #0
 8002e04:	483e      	ldr	r0, [pc, #248]	; (8002f00 <play_station+0x1a4>)
 8002e06:	f000 fbc3 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <play_station+0x194>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	220a      	movs	r2, #10
 8002e12:	493c      	ldr	r1, [pc, #240]	; (8002f04 <play_station+0x1a8>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 feef 	bl	800bbf8 <itoa>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fbb6 	bl	8003590 <send_debug_msg>
		send_debug_msg("Name: ", CRLF_NO_SEND);
 8002e24:	2100      	movs	r1, #0
 8002e26:	4838      	ldr	r0, [pc, #224]	; (8002f08 <play_station+0x1ac>)
 8002e28:	f000 fbb2 	bl	8003590 <send_debug_msg>
		send_debug_msg(services_list[actual_station].name, CRLF_SEND);
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <play_station+0x194>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	2334      	movs	r3, #52	; 0x34
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <play_station+0x19c>)
 8002e3a:	4413      	add	r3, r2
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fba6 	bl	8003590 <send_debug_msg>
		Si468x_dab_tune_freq(services_list[actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <play_station+0x194>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <play_station+0x19c>)
 8002e4c:	2334      	movs	r3, #52	; 0x34
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3328      	adds	r3, #40	; 0x28
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fe2a 	bl	8001ab4 <Si468x_dab_tune_freq>
		Si468x_dab_get_component_info(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 8002e60:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <play_station+0x194>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4619      	mov	r1, r3
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <play_station+0x19c>)
 8002e68:	2334      	movs	r3, #52	; 0x34
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3320      	adds	r3, #32
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <play_station+0x194>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <play_station+0x19c>)
 8002e7c:	2334      	movs	r3, #52	; 0x34
 8002e7e:	fb00 f303 	mul.w	r3, r0, r3
 8002e82:	440b      	add	r3, r1
 8002e84:	332a      	adds	r3, #42	; 0x2a
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7ff fe74 	bl	8002b78 <Si468x_dab_get_component_info>
		Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <play_station+0x194>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <play_station+0x19c>)
 8002e98:	2334      	movs	r3, #52	; 0x34
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3320      	adds	r3, #32
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <play_station+0x194>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	4913      	ldr	r1, [pc, #76]	; (8002ef8 <play_station+0x19c>)
 8002eac:	2334      	movs	r3, #52	; 0x34
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	332a      	adds	r3, #42	; 0x2a
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7ff f990 	bl	80021e0 <Si468x_dab_start_digital_service>

		Si468x_dab_digrad_status();
 8002ec0:	f7fe feb2 	bl	8001c28 <Si468x_dab_digrad_status>
		Si468x_dab_get_audio_info();
 8002ec4:	f7ff fd32 	bl	800292c <Si468x_dab_get_audio_info>

		Display_hide_station();
 8002ec8:	f001 fad2 	bl	8004470 <Display_hide_station>
	{
 8002ecc:	e008      	b.n	8002ee0 <play_station+0x184>
	}
	else
	{
		Display_show_empty_station();
 8002ece:	f001 fbc1 	bl	8004654 <Display_show_empty_station>
		HAL_Delay(3000);
 8002ed2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ed6:	f002 fe99 	bl	8005c0c <HAL_Delay>
		Display_hide_station();
 8002eda:	f001 fac9 	bl	8004470 <Display_hide_station>
	}
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20002fd5 	.word	0x20002fd5
 8002eec:	20002fd4 	.word	0x20002fd4
 8002ef0:	20002fdd 	.word	0x20002fdd
 8002ef4:	20002fde 	.word	0x20002fde
 8002ef8:	20001b84 	.word	0x20001b84
 8002efc:	0800c820 	.word	0x0800c820
 8002f00:	0800c844 	.word	0x0800c844
 8002f04:	20001900 	.word	0x20001900
 8002f08:	0800c858 	.word	0x0800c858

08002f0c <restore_from_eeprom>:

void restore_from_eeprom()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 8002f12:	2101      	movs	r1, #1
 8002f14:	4895      	ldr	r0, [pc, #596]	; (800316c <restore_from_eeprom+0x260>)
 8002f16:	f000 fb3b 	bl	8003590 <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &freq_cnt, sizeof(freq_cnt));
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4994      	ldr	r1, [pc, #592]	; (8003170 <restore_from_eeprom+0x264>)
 8002f1e:	203f      	movs	r0, #63	; 0x3f
 8002f20:	f001 fbea 	bl	80046f8 <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
 8002f28:	e012      	b.n	8002f50 <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	4618      	mov	r0, r3
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a8e      	ldr	r2, [pc, #568]	; (8003174 <restore_from_eeprom+0x268>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f001 fbda 	bl	80046f8 <eeprom_read>
		HAL_Delay(5);
 8002f44:	2005      	movs	r0, #5
 8002f46:	f002 fe61 	bl	8005c0c <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d9e9      	bls.n	8002f2a <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 8002f56:	2100      	movs	r1, #0
 8002f58:	4887      	ldr	r0, [pc, #540]	; (8003178 <restore_from_eeprom+0x26c>)
 8002f5a:	f000 fb19 	bl	8003590 <send_debug_msg>
	send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8002f5e:	4b84      	ldr	r3, [pc, #528]	; (8003170 <restore_from_eeprom+0x264>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	220a      	movs	r2, #10
 8002f64:	4985      	ldr	r1, [pc, #532]	; (800317c <restore_from_eeprom+0x270>)
 8002f66:	4618      	mov	r0, r3
 8002f68:	f008 fe46 	bl	800bbf8 <itoa>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fb0d 	bl	8003590 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 8002f76:	2101      	movs	r1, #1
 8002f78:	4881      	ldr	r0, [pc, #516]	; (8003180 <restore_from_eeprom+0x274>)
 8002f7a:	f000 fb09 	bl	8003590 <send_debug_msg>
	for(int i = 0; i < freq_cnt; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e022      	b.n	8002fca <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8002f84:	220a      	movs	r2, #10
 8002f86:	497d      	ldr	r1, [pc, #500]	; (800317c <restore_from_eeprom+0x270>)
 8002f88:	6938      	ldr	r0, [r7, #16]
 8002f8a:	f008 fe35 	bl	800bbf8 <itoa>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fafc 	bl	8003590 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8002f98:	2100      	movs	r1, #0
 8002f9a:	487a      	ldr	r0, [pc, #488]	; (8003184 <restore_from_eeprom+0x278>)
 8002f9c:	f000 faf8 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8002fa0:	4a74      	ldr	r2, [pc, #464]	; (8003174 <restore_from_eeprom+0x268>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	220a      	movs	r2, #10
 8002faa:	4974      	ldr	r1, [pc, #464]	; (800317c <restore_from_eeprom+0x270>)
 8002fac:	4618      	mov	r0, r3
 8002fae:	f008 fe23 	bl	800bbf8 <itoa>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 faea 	bl	8003590 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4872      	ldr	r0, [pc, #456]	; (8003188 <restore_from_eeprom+0x27c>)
 8002fc0:	f000 fae6 	bl	8003590 <send_debug_msg>
	for(int i = 0; i < freq_cnt; i++)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	4b69      	ldr	r3, [pc, #420]	; (8003170 <restore_from_eeprom+0x264>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	dbd6      	blt.n	8002f84 <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &total_ensembles, sizeof(total_ensembles));
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	496c      	ldr	r1, [pc, #432]	; (800318c <restore_from_eeprom+0x280>)
 8002fda:	f240 1005 	movw	r0, #261	; 0x105
 8002fde:	f001 fb8b 	bl	80046f8 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &total_services, sizeof(total_services));
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	496a      	ldr	r1, [pc, #424]	; (8003190 <restore_from_eeprom+0x284>)
 8002fe6:	f44f 7083 	mov.w	r0, #262	; 0x106
 8002fea:	f001 fb85 	bl	80046f8 <eeprom_read>

	if(total_services != 0xFF && total_ensembles != 0xFF)
 8002fee:	4b68      	ldr	r3, [pc, #416]	; (8003190 <restore_from_eeprom+0x284>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	f000 8291 	beq.w	800351a <restore_from_eeprom+0x60e>
 8002ff8:	4b64      	ldr	r3, [pc, #400]	; (800318c <restore_from_eeprom+0x280>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2bff      	cmp	r3, #255	; 0xff
 8002ffe:	f000 828c 	beq.w	800351a <restore_from_eeprom+0x60e>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &actual_freq, sizeof(actual_freq));
 8003002:	2204      	movs	r2, #4
 8003004:	4963      	ldr	r1, [pc, #396]	; (8003194 <restore_from_eeprom+0x288>)
 8003006:	f44f 7080 	mov.w	r0, #256	; 0x100
 800300a:	f001 fb75 	bl	80046f8 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &actual_freq_id, sizeof(actual_freq_id));
 800300e:	2201      	movs	r2, #1
 8003010:	4961      	ldr	r1, [pc, #388]	; (8003198 <restore_from_eeprom+0x28c>)
 8003012:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003016:	f001 fb6f 	bl	80046f8 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &last_station_index, sizeof(last_station_index));
 800301a:	2201      	movs	r2, #1
 800301c:	495f      	ldr	r1, [pc, #380]	; (800319c <restore_from_eeprom+0x290>)
 800301e:	f240 1007 	movw	r0, #263	; 0x107
 8003022:	f001 fb69 	bl	80046f8 <eeprom_read>
		if(last_station_index == 0xFF)
 8003026:	4b5d      	ldr	r3, [pc, #372]	; (800319c <restore_from_eeprom+0x290>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2bff      	cmp	r3, #255	; 0xff
 800302c:	d102      	bne.n	8003034 <restore_from_eeprom+0x128>
		{
			last_station_index = 0;
 800302e:	4b5b      	ldr	r3, [pc, #364]	; (800319c <restore_from_eeprom+0x290>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
		}
		actual_station = last_station_index;
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <restore_from_eeprom+0x290>)
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <restore_from_eeprom+0x294>)
 800303a:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < total_ensembles; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e00e      	b.n	8003060 <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3305      	adds	r3, #5
 8003046:	019b      	lsls	r3, r3, #6
 8003048:	4618      	mov	r0, r3
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	015b      	lsls	r3, r3, #5
 800304e:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <restore_from_eeprom+0x298>)
 8003050:	4413      	add	r3, r2
 8003052:	2220      	movs	r2, #32
 8003054:	4619      	mov	r1, r3
 8003056:	f001 fb4f 	bl	80046f8 <eeprom_read>
		for(uint8_t i = 0; i < total_ensembles; i++)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	3301      	adds	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	4b4a      	ldr	r3, [pc, #296]	; (800318c <restore_from_eeprom+0x280>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	429a      	cmp	r2, r3
 8003068:	d3eb      	bcc.n	8003042 <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < total_services; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	73bb      	strb	r3, [r7, #14]
 800306e:	e010      	b.n	8003092 <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 8003070:	7bbb      	ldrb	r3, [r7, #14]
 8003072:	330f      	adds	r3, #15
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	4618      	mov	r0, r3
 8003078:	7bbb      	ldrb	r3, [r7, #14]
 800307a:	2234      	movs	r2, #52	; 0x34
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <restore_from_eeprom+0x29c>)
 8003082:	4413      	add	r3, r2
 8003084:	2234      	movs	r2, #52	; 0x34
 8003086:	4619      	mov	r1, r3
 8003088:	f001 fb36 	bl	80046f8 <eeprom_read>
		for(uint8_t i = 0; i < total_services; i++)
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	3301      	adds	r3, #1
 8003090:	73bb      	strb	r3, [r7, #14]
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <restore_from_eeprom+0x284>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	7bba      	ldrb	r2, [r7, #14]
 8003098:	429a      	cmp	r2, r3
 800309a:	d3e9      	bcc.n	8003070 <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 800309c:	2100      	movs	r1, #0
 800309e:	4836      	ldr	r0, [pc, #216]	; (8003178 <restore_from_eeprom+0x26c>)
 80030a0:	f000 fa76 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80030a4:	4b32      	ldr	r3, [pc, #200]	; (8003170 <restore_from_eeprom+0x264>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	220a      	movs	r2, #10
 80030aa:	4934      	ldr	r1, [pc, #208]	; (800317c <restore_from_eeprom+0x270>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f008 fda3 	bl	800bbf8 <itoa>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa6a 	bl	8003590 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 80030bc:	2101      	movs	r1, #1
 80030be:	4830      	ldr	r0, [pc, #192]	; (8003180 <restore_from_eeprom+0x274>)
 80030c0:	f000 fa66 	bl	8003590 <send_debug_msg>
		for(int i = 0; i < freq_cnt; i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	e022      	b.n	8003110 <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80030ca:	220a      	movs	r2, #10
 80030cc:	492b      	ldr	r1, [pc, #172]	; (800317c <restore_from_eeprom+0x270>)
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f008 fd92 	bl	800bbf8 <itoa>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fa59 	bl	8003590 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 80030de:	2100      	movs	r1, #0
 80030e0:	4828      	ldr	r0, [pc, #160]	; (8003184 <restore_from_eeprom+0x278>)
 80030e2:	f000 fa55 	bl	8003590 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <restore_from_eeprom+0x268>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	220a      	movs	r2, #10
 80030f0:	4922      	ldr	r1, [pc, #136]	; (800317c <restore_from_eeprom+0x270>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f008 fd80 	bl	800bbf8 <itoa>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fa47 	bl	8003590 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 8003102:	2101      	movs	r1, #1
 8003104:	4820      	ldr	r0, [pc, #128]	; (8003188 <restore_from_eeprom+0x27c>)
 8003106:	f000 fa43 	bl	8003590 <send_debug_msg>
		for(int i = 0; i < freq_cnt; i++)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <restore_from_eeprom+0x264>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4293      	cmp	r3, r2
 800311a:	dbd6      	blt.n	80030ca <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800311c:	2100      	movs	r1, #0
 800311e:	4823      	ldr	r0, [pc, #140]	; (80031ac <restore_from_eeprom+0x2a0>)
 8003120:	f000 fa36 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <restore_from_eeprom+0x280>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	220a      	movs	r2, #10
 800312a:	4914      	ldr	r1, [pc, #80]	; (800317c <restore_from_eeprom+0x270>)
 800312c:	4618      	mov	r0, r3
 800312e:	f008 fd63 	bl	800bbf8 <itoa>
 8003132:	4603      	mov	r3, r0
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fa2a 	bl	8003590 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800313c:	2101      	movs	r1, #1
 800313e:	481c      	ldr	r0, [pc, #112]	; (80031b0 <restore_from_eeprom+0x2a4>)
 8003140:	f000 fa26 	bl	8003590 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8003144:	2100      	movs	r1, #0
 8003146:	481b      	ldr	r0, [pc, #108]	; (80031b4 <restore_from_eeprom+0x2a8>)
 8003148:	f000 fa22 	bl	8003590 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800314c:	2100      	movs	r1, #0
 800314e:	481a      	ldr	r0, [pc, #104]	; (80031b8 <restore_from_eeprom+0x2ac>)
 8003150:	f000 fa1e 	bl	8003590 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8003154:	2100      	movs	r1, #0
 8003156:	4819      	ldr	r0, [pc, #100]	; (80031bc <restore_from_eeprom+0x2b0>)
 8003158:	f000 fa1a 	bl	8003590 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 800315c:	2101      	movs	r1, #1
 800315e:	4818      	ldr	r0, [pc, #96]	; (80031c0 <restore_from_eeprom+0x2b4>)
 8003160:	f000 fa16 	bl	8003590 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8003164:	2300      	movs	r3, #0
 8003166:	71fb      	strb	r3, [r7, #7]
 8003168:	e081      	b.n	800326e <restore_from_eeprom+0x362>
 800316a:	bf00      	nop
 800316c:	0800c860 	.word	0x0800c860
 8003170:	20001a04 	.word	0x20001a04
 8003174:	20001944 	.word	0x20001944
 8003178:	0800c274 	.word	0x0800c274
 800317c:	20001900 	.word	0x20001900
 8003180:	0800c27c 	.word	0x0800c27c
 8003184:	0800c294 	.word	0x0800c294
 8003188:	0800c298 	.word	0x0800c298
 800318c:	20002fd5 	.word	0x20002fd5
 8003190:	20002fd4 	.word	0x20002fd4
 8003194:	20002fd8 	.word	0x20002fd8
 8003198:	20002fdc 	.word	0x20002fdc
 800319c:	20002fde 	.word	0x20002fde
 80031a0:	20002fdd 	.word	0x20002fdd
 80031a4:	20001a44 	.word	0x20001a44
 80031a8:	20001b84 	.word	0x20001b84
 80031ac:	0800c4dc 	.word	0x0800c4dc
 80031b0:	0800c4f0 	.word	0x0800c4f0
 80031b4:	0800c524 	.word	0x0800c524
 80031b8:	0800c530 	.word	0x0800c530
 80031bc:	0800c544 	.word	0x0800c544
 80031c0:	0800c554 	.word	0x0800c554
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80031c4:	2100      	movs	r1, #0
 80031c6:	4865      	ldr	r0, [pc, #404]	; (800335c <restore_from_eeprom+0x450>)
 80031c8:	f000 f9e2 	bl	8003590 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	220a      	movs	r2, #10
 80031d0:	4963      	ldr	r1, [pc, #396]	; (8003360 <restore_from_eeprom+0x454>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f008 fd10 	bl	800bbf8 <itoa>
 80031d8:	4603      	mov	r3, r0
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f9d7 	bl	8003590 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80031e2:	2100      	movs	r1, #0
 80031e4:	485f      	ldr	r0, [pc, #380]	; (8003364 <restore_from_eeprom+0x458>)
 80031e6:	f000 f9d3 	bl	8003590 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	015b      	lsls	r3, r3, #5
 80031ee:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <restore_from_eeprom+0x45c>)
 80031f0:	4413      	add	r3, r2
 80031f2:	3302      	adds	r3, #2
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f9ca 	bl	8003590 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 80031fc:	2100      	movs	r1, #0
 80031fe:	4857      	ldr	r0, [pc, #348]	; (800335c <restore_from_eeprom+0x450>)
 8003200:	f000 f9c6 	bl	8003590 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	4a58      	ldr	r2, [pc, #352]	; (8003368 <restore_from_eeprom+0x45c>)
 8003208:	015b      	lsls	r3, r3, #5
 800320a:	4413      	add	r3, r2
 800320c:	3318      	adds	r3, #24
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	220a      	movs	r2, #10
 8003212:	4953      	ldr	r1, [pc, #332]	; (8003360 <restore_from_eeprom+0x454>)
 8003214:	4618      	mov	r0, r3
 8003216:	f008 fcef 	bl	800bbf8 <itoa>
 800321a:	4603      	mov	r3, r0
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f9b6 	bl	8003590 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003224:	2100      	movs	r1, #0
 8003226:	4851      	ldr	r0, [pc, #324]	; (800336c <restore_from_eeprom+0x460>)
 8003228:	f000 f9b2 	bl	8003590 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	4a4e      	ldr	r2, [pc, #312]	; (8003368 <restore_from_eeprom+0x45c>)
 8003230:	015b      	lsls	r3, r3, #5
 8003232:	4413      	add	r3, r2
 8003234:	331c      	adds	r3, #28
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <restore_from_eeprom+0x464>)
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f9a4 	bl	8003590 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4a47      	ldr	r2, [pc, #284]	; (8003368 <restore_from_eeprom+0x45c>)
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	4413      	add	r3, r2
 8003250:	331c      	adds	r3, #28
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b13      	cmp	r3, #19
 8003256:	d803      	bhi.n	8003260 <restore_from_eeprom+0x354>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003258:	2100      	movs	r1, #0
 800325a:	4846      	ldr	r0, [pc, #280]	; (8003374 <restore_from_eeprom+0x468>)
 800325c:	f000 f998 	bl	8003590 <send_debug_msg>
			}
			send_debug_msg("  |", CRLF_SEND);
 8003260:	2101      	movs	r1, #1
 8003262:	4845      	ldr	r0, [pc, #276]	; (8003378 <restore_from_eeprom+0x46c>)
 8003264:	f000 f994 	bl	8003590 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	3301      	adds	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <restore_from_eeprom+0x470>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	79fa      	ldrb	r2, [r7, #7]
 8003274:	429a      	cmp	r2, r3
 8003276:	d3a5      	bcc.n	80031c4 <restore_from_eeprom+0x2b8>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003278:	2101      	movs	r1, #1
 800327a:	4841      	ldr	r0, [pc, #260]	; (8003380 <restore_from_eeprom+0x474>)
 800327c:	f000 f988 	bl	8003590 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003280:	2100      	movs	r1, #0
 8003282:	4840      	ldr	r0, [pc, #256]	; (8003384 <restore_from_eeprom+0x478>)
 8003284:	f000 f984 	bl	8003590 <send_debug_msg>
		send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <restore_from_eeprom+0x47c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	220a      	movs	r2, #10
 800328e:	4934      	ldr	r1, [pc, #208]	; (8003360 <restore_from_eeprom+0x454>)
 8003290:	4618      	mov	r0, r3
 8003292:	f008 fcb1 	bl	800bbf8 <itoa>
 8003296:	4603      	mov	r3, r0
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f978 	bl	8003590 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80032a0:	2101      	movs	r1, #1
 80032a2:	483a      	ldr	r0, [pc, #232]	; (800338c <restore_from_eeprom+0x480>)
 80032a4:	f000 f974 	bl	8003590 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80032a8:	2101      	movs	r1, #1
 80032aa:	4839      	ldr	r0, [pc, #228]	; (8003390 <restore_from_eeprom+0x484>)
 80032ac:	f000 f970 	bl	8003590 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < total_services; services_index++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	71bb      	strb	r3, [r7, #6]
 80032b4:	e115      	b.n	80034e2 <restore_from_eeprom+0x5d6>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80032b6:	2100      	movs	r1, #0
 80032b8:	4828      	ldr	r0, [pc, #160]	; (800335c <restore_from_eeprom+0x450>)
 80032ba:	f000 f969 	bl	8003590 <send_debug_msg>
			send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 80032be:	79bb      	ldrb	r3, [r7, #6]
 80032c0:	220a      	movs	r2, #10
 80032c2:	4927      	ldr	r1, [pc, #156]	; (8003360 <restore_from_eeprom+0x454>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f008 fc97 	bl	800bbf8 <itoa>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f95e 	bl	8003590 <send_debug_msg>
			if(services_index < 10)
 80032d4:	79bb      	ldrb	r3, [r7, #6]
 80032d6:	2b09      	cmp	r3, #9
 80032d8:	d803      	bhi.n	80032e2 <restore_from_eeprom+0x3d6>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80032da:	2100      	movs	r1, #0
 80032dc:	4825      	ldr	r0, [pc, #148]	; (8003374 <restore_from_eeprom+0x468>)
 80032de:	f000 f957 	bl	8003590 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80032e2:	2100      	movs	r1, #0
 80032e4:	482b      	ldr	r0, [pc, #172]	; (8003394 <restore_from_eeprom+0x488>)
 80032e6:	f000 f953 	bl	8003590 <send_debug_msg>

			//Name
			if(services_list[services_index].name[0])
 80032ea:	79bb      	ldrb	r3, [r7, #6]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <restore_from_eeprom+0x48c>)
 80032ee:	2134      	movs	r1, #52	; 0x34
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <restore_from_eeprom+0x406>
			{
				send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80032fc:	79bb      	ldrb	r3, [r7, #6]
 80032fe:	2234      	movs	r2, #52	; 0x34
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	4a24      	ldr	r2, [pc, #144]	; (8003398 <restore_from_eeprom+0x48c>)
 8003306:	4413      	add	r3, r2
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f940 	bl	8003590 <send_debug_msg>
 8003310:	e003      	b.n	800331a <restore_from_eeprom+0x40e>
			}
			else
			{
				send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 8003312:	2100      	movs	r1, #0
 8003314:	4821      	ldr	r0, [pc, #132]	; (800339c <restore_from_eeprom+0x490>)
 8003316:	f000 f93b 	bl	8003590 <send_debug_msg>
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800331a:	2100      	movs	r1, #0
 800331c:	4820      	ldr	r0, [pc, #128]	; (80033a0 <restore_from_eeprom+0x494>)
 800331e:	f000 f937 	bl	8003590 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < total_ensembles; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	717b      	strb	r3, [r7, #5]
 8003326:	e040      	b.n	80033aa <restore_from_eeprom+0x49e>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8003328:	797b      	ldrb	r3, [r7, #5]
 800332a:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <restore_from_eeprom+0x45c>)
 800332c:	015b      	lsls	r3, r3, #5
 800332e:	4413      	add	r3, r2
 8003330:	331c      	adds	r3, #28
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	79bb      	ldrb	r3, [r7, #6]
 8003336:	4918      	ldr	r1, [pc, #96]	; (8003398 <restore_from_eeprom+0x48c>)
 8003338:	2034      	movs	r0, #52	; 0x34
 800333a:	fb00 f303 	mul.w	r3, r0, r3
 800333e:	440b      	add	r3, r1
 8003340:	3328      	adds	r3, #40	; 0x28
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d12d      	bne.n	80033a4 <restore_from_eeprom+0x498>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8003348:	797b      	ldrb	r3, [r7, #5]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <restore_from_eeprom+0x45c>)
 800334e:	4413      	add	r3, r2
 8003350:	3302      	adds	r3, #2
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f91b 	bl	8003590 <send_debug_msg>
					break;
 800335a:	e02b      	b.n	80033b4 <restore_from_eeprom+0x4a8>
 800335c:	0800c564 	.word	0x0800c564
 8003360:	20001900 	.word	0x20001900
 8003364:	0800c568 	.word	0x0800c568
 8003368:	20001a44 	.word	0x20001a44
 800336c:	0800c574 	.word	0x0800c574
 8003370:	20000008 	.word	0x20000008
 8003374:	0800c57c 	.word	0x0800c57c
 8003378:	0800c580 	.word	0x0800c580
 800337c:	20002fd5 	.word	0x20002fd5
 8003380:	0800c4f0 	.word	0x0800c4f0
 8003384:	0800c584 	.word	0x0800c584
 8003388:	20002fd4 	.word	0x20002fd4
 800338c:	0800c598 	.word	0x0800c598
 8003390:	0800c604 	.word	0x0800c604
 8003394:	0800c670 	.word	0x0800c670
 8003398:	20001b84 	.word	0x20001b84
 800339c:	0800c678 	.word	0x0800c678
 80033a0:	0800c68c 	.word	0x0800c68c
			for(uint8_t i = 0; i < total_ensembles; i++)
 80033a4:	797b      	ldrb	r3, [r7, #5]
 80033a6:	3301      	adds	r3, #1
 80033a8:	717b      	strb	r3, [r7, #5]
 80033aa:	4b68      	ldr	r3, [pc, #416]	; (800354c <restore_from_eeprom+0x640>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	797a      	ldrb	r2, [r7, #5]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3b9      	bcc.n	8003328 <restore_from_eeprom+0x41c>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80033b4:	2100      	movs	r1, #0
 80033b6:	4866      	ldr	r0, [pc, #408]	; (8003550 <restore_from_eeprom+0x644>)
 80033b8:	f000 f8ea 	bl	8003590 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80033bc:	79bb      	ldrb	r3, [r7, #6]
 80033be:	4a65      	ldr	r2, [pc, #404]	; (8003554 <restore_from_eeprom+0x648>)
 80033c0:	2134      	movs	r1, #52	; 0x34
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3324      	adds	r3, #36	; 0x24
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	220a      	movs	r2, #10
 80033ce:	4962      	ldr	r1, [pc, #392]	; (8003558 <restore_from_eeprom+0x64c>)
 80033d0:	4618      	mov	r0, r3
 80033d2:	f008 fc11 	bl	800bbf8 <itoa>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f8d8 	bl	8003590 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80033e0:	2100      	movs	r1, #0
 80033e2:	485e      	ldr	r0, [pc, #376]	; (800355c <restore_from_eeprom+0x650>)
 80033e4:	f000 f8d4 	bl	8003590 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80033e8:	79bb      	ldrb	r3, [r7, #6]
 80033ea:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <restore_from_eeprom+0x648>)
 80033ec:	2134      	movs	r1, #52	; 0x34
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3328      	adds	r3, #40	; 0x28
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b59      	ldr	r3, [pc, #356]	; (8003560 <restore_from_eeprom+0x654>)
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f8c4 	bl	8003590 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8003408:	79bb      	ldrb	r3, [r7, #6]
 800340a:	4a52      	ldr	r2, [pc, #328]	; (8003554 <restore_from_eeprom+0x648>)
 800340c:	2134      	movs	r1, #52	; 0x34
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3328      	adds	r3, #40	; 0x28
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b13      	cmp	r3, #19
 800341a:	d803      	bhi.n	8003424 <restore_from_eeprom+0x518>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800341c:	2100      	movs	r1, #0
 800341e:	4851      	ldr	r0, [pc, #324]	; (8003564 <restore_from_eeprom+0x658>)
 8003420:	f000 f8b6 	bl	8003590 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8003424:	2100      	movs	r1, #0
 8003426:	4850      	ldr	r0, [pc, #320]	; (8003568 <restore_from_eeprom+0x65c>)
 8003428:	f000 f8b2 	bl	8003590 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 800342c:	79bb      	ldrb	r3, [r7, #6]
 800342e:	4a49      	ldr	r2, [pc, #292]	; (8003554 <restore_from_eeprom+0x648>)
 8003430:	2134      	movs	r1, #52	; 0x34
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3315      	adds	r3, #21
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	220a      	movs	r2, #10
 800343e:	4946      	ldr	r1, [pc, #280]	; (8003558 <restore_from_eeprom+0x64c>)
 8003440:	4618      	mov	r0, r3
 8003442:	f008 fbd9 	bl	800bbf8 <itoa>
 8003446:	4603      	mov	r3, r0
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f8a0 	bl	8003590 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8003450:	79bb      	ldrb	r3, [r7, #6]
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <restore_from_eeprom+0x648>)
 8003454:	2134      	movs	r1, #52	; 0x34
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3315      	adds	r3, #21
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b09      	cmp	r3, #9
 8003462:	d803      	bhi.n	800346c <restore_from_eeprom+0x560>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003464:	2100      	movs	r1, #0
 8003466:	483f      	ldr	r0, [pc, #252]	; (8003564 <restore_from_eeprom+0x658>)
 8003468:	f000 f892 	bl	8003590 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 800346c:	2100      	movs	r1, #0
 800346e:	483e      	ldr	r0, [pc, #248]	; (8003568 <restore_from_eeprom+0x65c>)
 8003470:	f000 f88e 	bl	8003590 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003474:	2100      	movs	r1, #0
 8003476:	483d      	ldr	r0, [pc, #244]	; (800356c <restore_from_eeprom+0x660>)
 8003478:	f000 f88a 	bl	8003590 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	4a35      	ldr	r2, [pc, #212]	; (8003554 <restore_from_eeprom+0x648>)
 8003480:	2134      	movs	r1, #52	; 0x34
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3320      	adds	r3, #32
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	4932      	ldr	r1, [pc, #200]	; (8003558 <restore_from_eeprom+0x64c>)
 8003490:	4618      	mov	r0, r3
 8003492:	f008 fbb1 	bl	800bbf8 <itoa>
 8003496:	4603      	mov	r3, r0
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f878 	bl	8003590 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80034a0:	2100      	movs	r1, #0
 80034a2:	4833      	ldr	r0, [pc, #204]	; (8003570 <restore_from_eeprom+0x664>)
 80034a4:	f000 f874 	bl	8003590 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80034a8:	2100      	movs	r1, #0
 80034aa:	4830      	ldr	r0, [pc, #192]	; (800356c <restore_from_eeprom+0x660>)
 80034ac:	f000 f870 	bl	8003590 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <restore_from_eeprom+0x648>)
 80034b4:	2134      	movs	r1, #52	; 0x34
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	332a      	adds	r3, #42	; 0x2a
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2210      	movs	r2, #16
 80034c2:	4925      	ldr	r1, [pc, #148]	; (8003558 <restore_from_eeprom+0x64c>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f008 fb97 	bl	800bbf8 <itoa>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f85e 	bl	8003590 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80034d4:	2101      	movs	r1, #1
 80034d6:	4827      	ldr	r0, [pc, #156]	; (8003574 <restore_from_eeprom+0x668>)
 80034d8:	f000 f85a 	bl	8003590 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < total_services; services_index++)
 80034dc:	79bb      	ldrb	r3, [r7, #6]
 80034de:	3301      	adds	r3, #1
 80034e0:	71bb      	strb	r3, [r7, #6]
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <restore_from_eeprom+0x66c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	79ba      	ldrb	r2, [r7, #6]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f4ff aee4 	bcc.w	80032b6 <restore_from_eeprom+0x3aa>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80034ee:	2101      	movs	r1, #1
 80034f0:	4822      	ldr	r0, [pc, #136]	; (800357c <restore_from_eeprom+0x670>)
 80034f2:	f000 f84d 	bl	8003590 <send_debug_msg>


		Si468x_dab_tune_freq(services_list[actual_station].freq_id, 0);
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <restore_from_eeprom+0x674>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <restore_from_eeprom+0x648>)
 80034fe:	2334      	movs	r3, #52	; 0x34
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3328      	adds	r3, #40	; 0x28
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fad1 	bl	8001ab4 <Si468x_dab_tune_freq>
		play_station(0);
 8003512:	2000      	movs	r0, #0
 8003514:	f7ff fc22 	bl	8002d5c <play_station>
 8003518:	e013      	b.n	8003542 <restore_from_eeprom+0x636>

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 800351a:	2101      	movs	r1, #1
 800351c:	4819      	ldr	r0, [pc, #100]	; (8003584 <restore_from_eeprom+0x678>)
 800351e:	f000 f837 	bl	8003590 <send_debug_msg>
		actual_freq = 0;
 8003522:	4b19      	ldr	r3, [pc, #100]	; (8003588 <restore_from_eeprom+0x67c>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
		actual_freq_id = 0;
 8003528:	4b18      	ldr	r3, [pc, #96]	; (800358c <restore_from_eeprom+0x680>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
		total_ensembles = 0;
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <restore_from_eeprom+0x640>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
		total_services = 0;
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <restore_from_eeprom+0x66c>)
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
		actual_station = 0;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <restore_from_eeprom+0x674>)
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
	}
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20002fd5 	.word	0x20002fd5
 8003550:	0800c68c 	.word	0x0800c68c
 8003554:	20001b84 	.word	0x20001b84
 8003558:	20001900 	.word	0x20001900
 800355c:	0800c574 	.word	0x0800c574
 8003560:	20000008 	.word	0x20000008
 8003564:	0800c57c 	.word	0x0800c57c
 8003568:	0800c690 	.word	0x0800c690
 800356c:	0800c698 	.word	0x0800c698
 8003570:	0800c670 	.word	0x0800c670
 8003574:	0800c69c 	.word	0x0800c69c
 8003578:	20002fd4 	.word	0x20002fd4
 800357c:	0800c598 	.word	0x0800c598
 8003580:	20002fdd 	.word	0x20002fdd
 8003584:	0800c89c 	.word	0x0800c89c
 8003588:	20002fd8 	.word	0x20002fd8
 800358c:	20002fdc 	.word	0x20002fdc

08003590 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fc fe13 	bl	80001c8 <strlen>
 80035a2:	4603      	mov	r3, r0
 80035a4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	2364      	movs	r3, #100	; 0x64
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	480a      	ldr	r0, [pc, #40]	; (80035d8 <send_debug_msg+0x48>)
 80035b0:	f007 ff71 	bl	800b496 <HAL_UART_Transmit>

	if(is_crlf)
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80035ba:	f640 230d 	movw	r3, #2573	; 0xa0d
 80035be:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80035c0:	f107 010c 	add.w	r1, r7, #12
 80035c4:	2364      	movs	r3, #100	; 0x64
 80035c6:	2202      	movs	r2, #2
 80035c8:	4803      	ldr	r0, [pc, #12]	; (80035d8 <send_debug_msg+0x48>)
 80035ca:	f007 ff64 	bl	800b496 <HAL_UART_Transmit>
	}
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20003304 	.word	0x20003304

080035dc <Display_clear_screen>:

uint8_t display_freeze = 0;


void Display_clear_screen()
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd f964 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80035e8:	2311      	movs	r3, #17
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035f0:	2211      	movs	r2, #17
 80035f2:	2100      	movs	r1, #0
 80035f4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80035f8:	f7fd f9e5 	bl	80009c6 <ILI9341_Draw_Line>
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <Display_booting_screen>:

void Display_booting_screen()
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800360a:	2000      	movs	r0, #0
 800360c:	f7fd f950 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003610:	2302      	movs	r3, #2
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <Display_booting_screen+0xc4>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361e:	2128      	movs	r1, #40	; 0x28
 8003620:	205f      	movs	r0, #95	; 0x5f
 8003622:	f7fd fa51 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003626:	2302      	movs	r3, #2
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <Display_booting_screen+0xc8>)
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003634:	213c      	movs	r1, #60	; 0x3c
 8003636:	2046      	movs	r0, #70	; 0x46
 8003638:	f7fd fa46 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 800363c:	2302      	movs	r3, #2
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <Display_booting_screen+0xcc>)
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364a:	2150      	movs	r1, #80	; 0x50
 800364c:	2082      	movs	r0, #130	; 0x82
 800364e:	f7fd fa3b 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003652:	2302      	movs	r3, #2
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <Display_booting_screen+0xd0>)
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2300      	movs	r3, #0
 800365c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003660:	2164      	movs	r1, #100	; 0x64
 8003662:	2064      	movs	r0, #100	; 0x64
 8003664:	f7fd fa30 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003668:	2302      	movs	r3, #2
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <Display_booting_screen+0xd4>)
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003676:	2178      	movs	r1, #120	; 0x78
 8003678:	205a      	movs	r0, #90	; 0x5a
 800367a:	f7fd fa25 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 800367e:	2302      	movs	r3, #2
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	4b16      	ldr	r3, [pc, #88]	; (80036dc <Display_booting_screen+0xd8>)
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368c:	218c      	movs	r1, #140	; 0x8c
 800368e:	2032      	movs	r0, #50	; 0x32
 8003690:	f7fd fa1a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003694:	2302      	movs	r3, #2
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <Display_booting_screen+0xdc>)
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a2:	21a0      	movs	r1, #160	; 0xa0
 80036a4:	205a      	movs	r0, #90	; 0x5a
 80036a6:	f7fd fa0f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 80036aa:	2302      	movs	r3, #2
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <Display_booting_screen+0xe0>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b8:	21b4      	movs	r1, #180	; 0xb4
 80036ba:	2078      	movs	r0, #120	; 0x78
 80036bc:	f7fd fa04 	bl	8000ac8 <ILI9341_Draw_String>
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	0800c964 	.word	0x0800c964
 80036cc:	0800c974 	.word	0x0800c974
 80036d0:	0800c98c 	.word	0x0800c98c
 80036d4:	0800c994 	.word	0x0800c994
 80036d8:	0800c9a4 	.word	0x0800c9a4
 80036dc:	0800c9b8 	.word	0x0800c9b8
 80036e0:	0800c9d4 	.word	0x0800c9d4
 80036e4:	0800c9e8 	.word	0x0800c9e8

080036e8 <Display_dab_digrad_status_background>:
{

}

void Display_dab_digrad_status_background()
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af02      	add	r7, sp, #8
//	Display_clear_screen();

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 80036ee:	2302      	movs	r3, #2
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	4bb4      	ldr	r3, [pc, #720]	; (80039c4 <Display_dab_digrad_status_background+0x2dc>)
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fc:	2101      	movs	r1, #1
 80036fe:	2005      	movs	r0, #5
 8003700:	f7fd f9e2 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8003704:	2328      	movs	r3, #40	; 0x28
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2369      	movs	r3, #105	; 0x69
 800370a:	2214      	movs	r2, #20
 800370c:	2105      	movs	r1, #5
 800370e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003712:	f7fd f937 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 8003716:	2328      	movs	r3, #40	; 0x28
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	23d2      	movs	r3, #210	; 0xd2
 800371c:	2214      	movs	r2, #20
 800371e:	216e      	movs	r1, #110	; 0x6e
 8003720:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003724:	f7fd f92e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 8003728:	2328      	movs	r3, #40	; 0x28
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f240 133b 	movw	r3, #315	; 0x13b
 8003730:	2214      	movs	r2, #20
 8003732:	21d7      	movs	r1, #215	; 0xd7
 8003734:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003738:	f7fd f924 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 800373c:	2341      	movs	r3, #65	; 0x41
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f240 133b 	movw	r3, #315	; 0x13b
 8003744:	222d      	movs	r2, #45	; 0x2d
 8003746:	2105      	movs	r1, #5
 8003748:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800374c:	f7fd f91a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 8003750:	2302      	movs	r3, #2
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	4b9c      	ldr	r3, [pc, #624]	; (80039c8 <Display_dab_digrad_status_background+0x2e0>)
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800375c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003760:	2130      	movs	r1, #48	; 0x30
 8003762:	200a      	movs	r0, #10
 8003764:	f7fd f9b0 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8003768:	2302      	movs	r3, #2
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	4b97      	ldr	r3, [pc, #604]	; (80039cc <Display_dab_digrad_status_background+0x2e4>)
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003778:	2130      	movs	r1, #48	; 0x30
 800377a:	205a      	movs	r0, #90	; 0x5a
 800377c:	f7fd f9a4 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8003780:	235a      	movs	r3, #90	; 0x5a
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f240 133b 	movw	r3, #315	; 0x13b
 8003788:	2246      	movs	r2, #70	; 0x46
 800378a:	2105      	movs	r1, #5
 800378c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003790:	f7fd f8f8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8003794:	2302      	movs	r3, #2
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	4b8d      	ldr	r3, [pc, #564]	; (80039d0 <Display_dab_digrad_status_background+0x2e8>)
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80037a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a4:	2149      	movs	r1, #73	; 0x49
 80037a6:	200a      	movs	r0, #10
 80037a8:	f7fd f98e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80037ac:	2302      	movs	r3, #2
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <Display_dab_digrad_status_background+0x2ec>)
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80037b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037bc:	2149      	movs	r1, #73	; 0x49
 80037be:	2069      	movs	r0, #105	; 0x69
 80037c0:	f7fd f982 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80037c4:	2373      	movs	r3, #115	; 0x73
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f240 133b 	movw	r3, #315	; 0x13b
 80037cc:	225f      	movs	r2, #95	; 0x5f
 80037ce:	2105      	movs	r1, #5
 80037d0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80037d4:	f7fd f8d6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80037d8:	2302      	movs	r3, #2
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <Display_dab_digrad_status_background+0x2f0>)
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80037e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037e8:	2162      	movs	r1, #98	; 0x62
 80037ea:	200a      	movs	r0, #10
 80037ec:	f7fd f96c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80037f0:	2302      	movs	r3, #2
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <Display_dab_digrad_status_background+0x2ec>)
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80037fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003800:	2162      	movs	r1, #98	; 0x62
 8003802:	2069      	movs	r0, #105	; 0x69
 8003804:	f7fd f960 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8003808:	238c      	movs	r3, #140	; 0x8c
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f240 133b 	movw	r3, #315	; 0x13b
 8003810:	2278      	movs	r2, #120	; 0x78
 8003812:	2105      	movs	r1, #5
 8003814:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003818:	f7fd f8b4 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 800381c:	2302      	movs	r3, #2
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	4b6e      	ldr	r3, [pc, #440]	; (80039dc <Display_dab_digrad_status_background+0x2f4>)
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800382c:	217b      	movs	r1, #123	; 0x7b
 800382e:	200a      	movs	r0, #10
 8003830:	f7fd f94a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8003834:	2302      	movs	r3, #2
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	4b69      	ldr	r3, [pc, #420]	; (80039e0 <Display_dab_digrad_status_background+0x2f8>)
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003844:	217b      	movs	r1, #123	; 0x7b
 8003846:	206e      	movs	r0, #110	; 0x6e
 8003848:	f7fd f93e 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 800384c:	23a5      	movs	r3, #165	; 0xa5
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	f240 133b 	movw	r3, #315	; 0x13b
 8003854:	2291      	movs	r2, #145	; 0x91
 8003856:	2105      	movs	r1, #5
 8003858:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800385c:	f7fd f892 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8003860:	2302      	movs	r3, #2
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	4b5f      	ldr	r3, [pc, #380]	; (80039e4 <Display_dab_digrad_status_background+0x2fc>)
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800386c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003870:	2194      	movs	r1, #148	; 0x94
 8003872:	200a      	movs	r0, #10
 8003874:	f7fd f928 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8003878:	2302      	movs	r3, #2
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	4b5a      	ldr	r3, [pc, #360]	; (80039e8 <Display_dab_digrad_status_background+0x300>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003888:	2194      	movs	r1, #148	; 0x94
 800388a:	2071      	movs	r0, #113	; 0x71
 800388c:	f7fd f91c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8003890:	2302      	movs	r3, #2
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	4b55      	ldr	r3, [pc, #340]	; (80039ec <Display_dab_digrad_status_background+0x304>)
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800389c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a0:	2194      	movs	r1, #148	; 0x94
 80038a2:	2094      	movs	r0, #148	; 0x94
 80038a4:	f7fd f910 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 80038a8:	2302      	movs	r3, #2
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <Display_dab_digrad_status_background+0x308>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b8:	2194      	movs	r1, #148	; 0x94
 80038ba:	20b7      	movs	r0, #183	; 0xb7
 80038bc:	f7fd f904 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 80038c0:	2302      	movs	r3, #2
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <Display_dab_digrad_status_background+0x30c>)
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d0:	2194      	movs	r1, #148	; 0x94
 80038d2:	20db      	movs	r0, #219	; 0xdb
 80038d4:	f7fd f8f8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 80038d8:	2302      	movs	r3, #2
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <Display_dab_digrad_status_background+0x310>)
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e8:	2194      	movs	r1, #148	; 0x94
 80038ea:	f240 101b 	movw	r0, #283	; 0x11b
 80038ee:	f7fd f8eb 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 80038f2:	2302      	movs	r3, #2
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <Display_dab_digrad_status_background+0x314>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003902:	2194      	movs	r1, #148	; 0x94
 8003904:	f240 1025 	movw	r0, #293	; 0x125
 8003908:	f7fd f8de 	bl	8000ac8 <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 800390c:	23be      	movs	r3, #190	; 0xbe
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f240 133b 	movw	r3, #315	; 0x13b
 8003914:	22aa      	movs	r2, #170	; 0xaa
 8003916:	2105      	movs	r1, #5
 8003918:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800391c:	f7fd f832 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8003920:	2302      	movs	r3, #2
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <Display_dab_digrad_status_background+0x318>)
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800392c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003930:	21ad      	movs	r1, #173	; 0xad
 8003932:	200a      	movs	r0, #10
 8003934:	f7fd f8c8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8003938:	2302      	movs	r3, #2
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <Display_dab_digrad_status_background+0x31c>)
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003948:	21ad      	movs	r1, #173	; 0xad
 800394a:	207d      	movs	r0, #125	; 0x7d
 800394c:	f7fd f8bc 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8003950:	2302      	movs	r3, #2
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <Display_dab_digrad_status_background+0x320>)
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800395c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003960:	21ad      	movs	r1, #173	; 0xad
 8003962:	20b4      	movs	r0, #180	; 0xb4
 8003964:	f7fd f8b0 	bl	8000ac8 <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003968:	23eb      	movs	r3, #235	; 0xeb
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	239d      	movs	r3, #157	; 0x9d
 800396e:	22c3      	movs	r2, #195	; 0xc3
 8003970:	2105      	movs	r1, #5
 8003972:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003976:	f7fd f805 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800397a:	23eb      	movs	r3, #235	; 0xeb
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	f240 133b 	movw	r3, #315	; 0x13b
 8003982:	22c3      	movs	r2, #195	; 0xc3
 8003984:	21a3      	movs	r1, #163	; 0xa3
 8003986:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800398a:	f7fc fffb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(60, 207, WHITE, ORANGE, "MENU L", 2);
 800398e:	2302      	movs	r3, #2
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <Display_dab_digrad_status_background+0x324>)
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800399a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399e:	21cf      	movs	r1, #207	; 0xcf
 80039a0:	203c      	movs	r0, #60	; 0x3c
 80039a2:	f7fd f891 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(217, 207, WHITE, ORANGE, "MENU R", 2);
 80039a6:	2302      	movs	r3, #2
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <Display_dab_digrad_status_background+0x328>)
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b6:	21cf      	movs	r1, #207	; 0xcf
 80039b8:	20d9      	movs	r0, #217	; 0xd9
 80039ba:	f7fd f885 	bl	8000ac8 <ILI9341_Draw_String>
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	0800ca70 	.word	0x0800ca70
 80039c8:	0800ca84 	.word	0x0800ca84
 80039cc:	0800ca8c 	.word	0x0800ca8c
 80039d0:	0800ca94 	.word	0x0800ca94
 80039d4:	0800ca98 	.word	0x0800ca98
 80039d8:	0800ca9c 	.word	0x0800ca9c
 80039dc:	0800caa0 	.word	0x0800caa0
 80039e0:	0800caa8 	.word	0x0800caa8
 80039e4:	0800caac 	.word	0x0800caac
 80039e8:	0800ca38 	.word	0x0800ca38
 80039ec:	0800ca3c 	.word	0x0800ca3c
 80039f0:	0800cab8 	.word	0x0800cab8
 80039f4:	0800cac0 	.word	0x0800cac0
 80039f8:	0800ca2c 	.word	0x0800ca2c
 80039fc:	0800cac8 	.word	0x0800cac8
 8003a00:	0800cacc 	.word	0x0800cacc
 8003a04:	0800cad8 	.word	0x0800cad8
 8003a08:	0800cadc 	.word	0x0800cadc
 8003a0c:	0800ca04 	.word	0x0800ca04
 8003a10:	0800ca0c 	.word	0x0800ca0c

08003a14 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8003a14:	b084      	sub	sp, #16
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	f107 0c18 	add.w	ip, r7, #24
 8003a20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8003a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a26:	461a      	mov	r2, r3
 8003a28:	23fa      	movs	r3, #250	; 0xfa
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <Display_dab_digrad_status_data+0xec>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <Display_dab_digrad_status_data+0xec>)
 8003a40:	fba3 1302 	umull	r1, r3, r3, r2
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <Display_dab_digrad_status_data+0xf0>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8331 	bne.w	80040be <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 8003a5c:	7e7b      	ldrb	r3, [r7, #25]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <Display_dab_digrad_status_data+0xf4>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a74:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a78:	2117      	movs	r1, #23
 8003a7a:	2023      	movs	r0, #35	; 0x23
 8003a7c:	f7fd f824 	bl	8000ac8 <ILI9341_Draw_String>
 8003a80:	e00b      	b.n	8003a9a <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8003a82:	2302      	movs	r3, #2
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <Display_dab_digrad_status_data+0xf4>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a8e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a92:	2117      	movs	r1, #23
 8003a94:	2023      	movs	r0, #35	; 0x23
 8003a96:	f7fd f817 	bl	8000ac8 <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 8003a9a:	7e7b      	ldrb	r3, [r7, #25]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00c      	beq.n	8003ac0 <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <Display_dab_digrad_status_data+0xf8>)
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ab2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ab6:	2117      	movs	r1, #23
 8003ab8:	2085      	movs	r0, #133	; 0x85
 8003aba:	f7fd f805 	bl	8000ac8 <ILI9341_Draw_String>
 8003abe:	e00b      	b.n	8003ad8 <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <Display_dab_digrad_status_data+0xf8>)
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003acc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ad0:	2117      	movs	r1, #23
 8003ad2:	2085      	movs	r0, #133	; 0x85
 8003ad4:	f7fc fff8 	bl	8000ac8 <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 8003ad8:	7e7b      	ldrb	r3, [r7, #25]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <Display_dab_digrad_status_data+0xfc>)
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003af0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003af4:	2117      	movs	r1, #23
 8003af6:	20e4      	movs	r0, #228	; 0xe4
 8003af8:	f7fc ffe6 	bl	8000ac8 <ILI9341_Draw_String>
 8003afc:	e016      	b.n	8003b2c <Display_dab_digrad_status_data+0x118>
 8003afe:	bf00      	nop
 8003b00:	10624dd3 	.word	0x10624dd3
 8003b04:	20003020 	.word	0x20003020
 8003b08:	0800cae0 	.word	0x0800cae0
 8003b0c:	0800cae8 	.word	0x0800cae8
 8003b10:	0800caf0 	.word	0x0800caf0
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8003b14:	2302      	movs	r3, #2
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	4bb6      	ldr	r3, [pc, #728]	; (8003df4 <Display_dab_digrad_status_data+0x3e0>)
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b20:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003b24:	2117      	movs	r1, #23
 8003b26:	20e4      	movs	r0, #228	; 0xe4
 8003b28:	f7fc ffce 	bl	8000ac8 <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 8003b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b30:	2b0d      	cmp	r3, #13
 8003b32:	dc02      	bgt.n	8003b3a <Display_dab_digrad_status_data+0x126>
 8003b34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b38:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8003b3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b3e:	2b1a      	cmp	r3, #26
 8003b40:	dc06      	bgt.n	8003b50 <Display_dab_digrad_status_data+0x13c>
 8003b42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b46:	2b0d      	cmp	r3, #13
 8003b48:	dd02      	ble.n	8003b50 <Display_dab_digrad_status_data+0x13c>
 8003b4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b4e:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8003b50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b54:	2b27      	cmp	r3, #39	; 0x27
 8003b56:	dc06      	bgt.n	8003b66 <Display_dab_digrad_status_data+0x152>
 8003b58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b5c:	2b1a      	cmp	r3, #26
 8003b5e:	dd02      	ble.n	8003b66 <Display_dab_digrad_status_data+0x152>
 8003b60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b64:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8003b66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b6a:	2b34      	cmp	r3, #52	; 0x34
 8003b6c:	dc06      	bgt.n	8003b7c <Display_dab_digrad_status_data+0x168>
 8003b6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b72:	2b27      	cmp	r3, #39	; 0x27
 8003b74:	dd02      	ble.n	8003b7c <Display_dab_digrad_status_data+0x168>
 8003b76:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003b7a:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 8003b7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b80:	2b34      	cmp	r3, #52	; 0x34
 8003b82:	dd02      	ble.n	8003b8a <Display_dab_digrad_status_data+0x176>
 8003b84:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b88:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	4b9a      	ldr	r3, [pc, #616]	; (8003df8 <Display_dab_digrad_status_data+0x3e4>)
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b9a:	2130      	movs	r1, #48	; 0x30
 8003b9c:	2032      	movs	r0, #50	; 0x32
 8003b9e:	f7fc ff93 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8003ba2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003ba6:	220a      	movs	r2, #10
 8003ba8:	4994      	ldr	r1, [pc, #592]	; (8003dfc <Display_dab_digrad_status_data+0x3e8>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f008 f824 	bl	800bbf8 <itoa>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	9201      	str	r2, [sp, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc0:	2130      	movs	r1, #48	; 0x30
 8003bc2:	2032      	movs	r0, #50	; 0x32
 8003bc4:	f7fc ff80 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8003bc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	23b4      	movs	r3, #180	; 0xb4
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	da00      	bge.n	8003bda <Display_dab_digrad_status_data+0x1c6>
 8003bd8:	333f      	adds	r3, #63	; 0x3f
 8003bda:	119b      	asrs	r3, r3, #6
 8003bdc:	3382      	adds	r3, #130	; 0x82
 8003bde:	461a      	mov	r2, r3
 8003be0:	233c      	movs	r3, #60	; 0x3c
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	2232      	movs	r2, #50	; 0x32
 8003be8:	2182      	movs	r1, #130	; 0x82
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7fc feca 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8003bf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	23b4      	movs	r3, #180	; 0xb4
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da00      	bge.n	8003c02 <Display_dab_digrad_status_data+0x1ee>
 8003c00:	333f      	adds	r3, #63	; 0x3f
 8003c02:	119b      	asrs	r3, r3, #6
 8003c04:	3382      	adds	r3, #130	; 0x82
 8003c06:	4619      	mov	r1, r3
 8003c08:	233c      	movs	r3, #60	; 0x3c
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003c10:	2232      	movs	r2, #50	; 0x32
 8003c12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c16:	f7fc feb5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 8003c1a:	7efb      	ldrb	r3, [r7, #27]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d802      	bhi.n	8003c26 <Display_dab_digrad_status_data+0x212>
 8003c20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c24:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8003c26:	7efb      	ldrb	r3, [r7, #27]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d805      	bhi.n	8003c38 <Display_dab_digrad_status_data+0x224>
 8003c2c:	7efb      	ldrb	r3, [r7, #27]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d902      	bls.n	8003c38 <Display_dab_digrad_status_data+0x224>
 8003c32:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c36:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8003c38:	7efb      	ldrb	r3, [r7, #27]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d805      	bhi.n	8003c4a <Display_dab_digrad_status_data+0x236>
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d902      	bls.n	8003c4a <Display_dab_digrad_status_data+0x236>
 8003c44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c48:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8003c4a:	7efb      	ldrb	r3, [r7, #27]
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d805      	bhi.n	8003c5c <Display_dab_digrad_status_data+0x248>
 8003c50:	7efb      	ldrb	r3, [r7, #27]
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	d902      	bls.n	8003c5c <Display_dab_digrad_status_data+0x248>
 8003c56:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c5a:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8003c5c:	7efb      	ldrb	r3, [r7, #27]
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d902      	bls.n	8003c68 <Display_dab_digrad_status_data+0x254>
 8003c62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c66:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8003c68:	2302      	movs	r3, #2
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <Display_dab_digrad_status_data+0x3e4>)
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c78:	2149      	movs	r1, #73	; 0x49
 8003c7a:	2032      	movs	r0, #50	; 0x32
 8003c7c:	f7fc ff24 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8003c80:	7efb      	ldrb	r3, [r7, #27]
 8003c82:	220a      	movs	r2, #10
 8003c84:	495d      	ldr	r1, [pc, #372]	; (8003dfc <Display_dab_digrad_status_data+0x3e8>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f007 ffb6 	bl	800bbf8 <itoa>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2202      	movs	r2, #2
 8003c90:	9201      	str	r2, [sp, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9c:	2149      	movs	r1, #73	; 0x49
 8003c9e:	2032      	movs	r0, #50	; 0x32
 8003ca0:	f7fc ff12 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8003ca4:	7efb      	ldrb	r3, [r7, #27]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	3382      	adds	r3, #130	; 0x82
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2355      	movs	r3, #85	; 0x55
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	224b      	movs	r2, #75	; 0x4b
 8003cba:	2182      	movs	r1, #130	; 0x82
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7fc fe61 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8003cc2:	7efb      	ldrb	r3, [r7, #27]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3382      	adds	r3, #130	; 0x82
 8003cce:	4619      	mov	r1, r3
 8003cd0:	2355      	movs	r3, #85	; 0x55
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003cd8:	224b      	movs	r2, #75	; 0x4b
 8003cda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003cde:	f7fc fe51 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 8003ce2:	7f7b      	ldrb	r3, [r7, #29]
 8003ce4:	2b0b      	cmp	r3, #11
 8003ce6:	d802      	bhi.n	8003cee <Display_dab_digrad_status_data+0x2da>
 8003ce8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cec:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8003cee:	7f7b      	ldrb	r3, [r7, #29]
 8003cf0:	2b16      	cmp	r3, #22
 8003cf2:	d805      	bhi.n	8003d00 <Display_dab_digrad_status_data+0x2ec>
 8003cf4:	7f7b      	ldrb	r3, [r7, #29]
 8003cf6:	2b0b      	cmp	r3, #11
 8003cf8:	d902      	bls.n	8003d00 <Display_dab_digrad_status_data+0x2ec>
 8003cfa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cfe:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8003d00:	7f7b      	ldrb	r3, [r7, #29]
 8003d02:	2b21      	cmp	r3, #33	; 0x21
 8003d04:	d805      	bhi.n	8003d12 <Display_dab_digrad_status_data+0x2fe>
 8003d06:	7f7b      	ldrb	r3, [r7, #29]
 8003d08:	2b16      	cmp	r3, #22
 8003d0a:	d902      	bls.n	8003d12 <Display_dab_digrad_status_data+0x2fe>
 8003d0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d10:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8003d12:	7f7b      	ldrb	r3, [r7, #29]
 8003d14:	2b2c      	cmp	r3, #44	; 0x2c
 8003d16:	d805      	bhi.n	8003d24 <Display_dab_digrad_status_data+0x310>
 8003d18:	7f7b      	ldrb	r3, [r7, #29]
 8003d1a:	2b21      	cmp	r3, #33	; 0x21
 8003d1c:	d902      	bls.n	8003d24 <Display_dab_digrad_status_data+0x310>
 8003d1e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d22:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 8003d24:	7f7b      	ldrb	r3, [r7, #29]
 8003d26:	2b2c      	cmp	r3, #44	; 0x2c
 8003d28:	d902      	bls.n	8003d30 <Display_dab_digrad_status_data+0x31c>
 8003d2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d2e:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8003d30:	2302      	movs	r3, #2
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <Display_dab_digrad_status_data+0x3e4>)
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d40:	2162      	movs	r1, #98	; 0x62
 8003d42:	2032      	movs	r0, #50	; 0x32
 8003d44:	f7fc fec0 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8003d48:	7f7b      	ldrb	r3, [r7, #29]
 8003d4a:	220a      	movs	r2, #10
 8003d4c:	492b      	ldr	r1, [pc, #172]	; (8003dfc <Display_dab_digrad_status_data+0x3e8>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f007 ff52 	bl	800bbf8 <itoa>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2202      	movs	r2, #2
 8003d58:	9201      	str	r2, [sp, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d64:	2162      	movs	r1, #98	; 0x62
 8003d66:	2032      	movs	r0, #50	; 0x32
 8003d68:	f7fc feae 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8003d6c:	7f7b      	ldrb	r3, [r7, #29]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	23b4      	movs	r3, #180	; 0xb4
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <Display_dab_digrad_status_data+0x3ec>)
 8003d78:	fb82 1203 	smull	r1, r2, r2, r3
 8003d7c:	1112      	asrs	r2, r2, #4
 8003d7e:	17db      	asrs	r3, r3, #31
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	3382      	adds	r3, #130	; 0x82
 8003d84:	461a      	mov	r2, r3
 8003d86:	236e      	movs	r3, #110	; 0x6e
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	2264      	movs	r2, #100	; 0x64
 8003d8e:	2182      	movs	r1, #130	; 0x82
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7fc fdf7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8003d96:	7f7b      	ldrb	r3, [r7, #29]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	23b4      	movs	r3, #180	; 0xb4
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <Display_dab_digrad_status_data+0x3ec>)
 8003da2:	fb82 1203 	smull	r1, r2, r2, r3
 8003da6:	1112      	asrs	r2, r2, #4
 8003da8:	17db      	asrs	r3, r3, #31
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	3382      	adds	r3, #130	; 0x82
 8003dae:	4619      	mov	r1, r3
 8003db0:	236e      	movs	r3, #110	; 0x6e
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003db8:	2264      	movs	r2, #100	; 0x64
 8003dba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003dbe:	f7fc fde1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 8003dc2:	7f3b      	ldrb	r3, [r7, #28]
 8003dc4:	2b14      	cmp	r3, #20
 8003dc6:	d802      	bhi.n	8003dce <Display_dab_digrad_status_data+0x3ba>
 8003dc8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dcc:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8003dce:	7f3b      	ldrb	r3, [r7, #28]
 8003dd0:	2b28      	cmp	r3, #40	; 0x28
 8003dd2:	d805      	bhi.n	8003de0 <Display_dab_digrad_status_data+0x3cc>
 8003dd4:	7f3b      	ldrb	r3, [r7, #28]
 8003dd6:	2b14      	cmp	r3, #20
 8003dd8:	d902      	bls.n	8003de0 <Display_dab_digrad_status_data+0x3cc>
 8003dda:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dde:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8003de0:	7f3b      	ldrb	r3, [r7, #28]
 8003de2:	2b3c      	cmp	r3, #60	; 0x3c
 8003de4:	d80e      	bhi.n	8003e04 <Display_dab_digrad_status_data+0x3f0>
 8003de6:	7f3b      	ldrb	r3, [r7, #28]
 8003de8:	2b28      	cmp	r3, #40	; 0x28
 8003dea:	d90b      	bls.n	8003e04 <Display_dab_digrad_status_data+0x3f0>
 8003dec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e007      	b.n	8003e04 <Display_dab_digrad_status_data+0x3f0>
 8003df4:	0800caf0 	.word	0x0800caf0
 8003df8:	0800cafc 	.word	0x0800cafc
 8003dfc:	20002fe0 	.word	0x20002fe0
 8003e00:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8003e04:	7f3b      	ldrb	r3, [r7, #28]
 8003e06:	2b50      	cmp	r3, #80	; 0x50
 8003e08:	d805      	bhi.n	8003e16 <Display_dab_digrad_status_data+0x402>
 8003e0a:	7f3b      	ldrb	r3, [r7, #28]
 8003e0c:	2b3c      	cmp	r3, #60	; 0x3c
 8003e0e:	d902      	bls.n	8003e16 <Display_dab_digrad_status_data+0x402>
 8003e10:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e14:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 8003e16:	7f3b      	ldrb	r3, [r7, #28]
 8003e18:	2b50      	cmp	r3, #80	; 0x50
 8003e1a:	d902      	bls.n	8003e22 <Display_dab_digrad_status_data+0x40e>
 8003e1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e20:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8003e22:	2302      	movs	r3, #2
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	4ba9      	ldr	r3, [pc, #676]	; (80040cc <Display_dab_digrad_status_data+0x6b8>)
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e32:	217b      	movs	r1, #123	; 0x7b
 8003e34:	204b      	movs	r0, #75	; 0x4b
 8003e36:	f7fc fe47 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8003e3a:	7f3b      	ldrb	r3, [r7, #28]
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	49a4      	ldr	r1, [pc, #656]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003e40:	4618      	mov	r0, r3
 8003e42:	f007 fed9 	bl	800bbf8 <itoa>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2202      	movs	r2, #2
 8003e4a:	9201      	str	r2, [sp, #4]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e56:	217b      	movs	r1, #123	; 0x7b
 8003e58:	204b      	movs	r0, #75	; 0x4b
 8003e5a:	f7fc fe35 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8003e5e:	7f3b      	ldrb	r3, [r7, #28]
 8003e60:	461a      	mov	r2, r3
 8003e62:	23b4      	movs	r3, #180	; 0xb4
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	4a9a      	ldr	r2, [pc, #616]	; (80040d4 <Display_dab_digrad_status_data+0x6c0>)
 8003e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8003e6e:	1152      	asrs	r2, r2, #5
 8003e70:	17db      	asrs	r3, r3, #31
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	3382      	adds	r3, #130	; 0x82
 8003e76:	461a      	mov	r2, r3
 8003e78:	2387      	movs	r3, #135	; 0x87
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	227d      	movs	r2, #125	; 0x7d
 8003e80:	2182      	movs	r1, #130	; 0x82
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f7fc fd7e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8003e88:	7f3b      	ldrb	r3, [r7, #28]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	23b4      	movs	r3, #180	; 0xb4
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	4a90      	ldr	r2, [pc, #576]	; (80040d4 <Display_dab_digrad_status_data+0x6c0>)
 8003e94:	fb82 1203 	smull	r1, r2, r2, r3
 8003e98:	1152      	asrs	r2, r2, #5
 8003e9a:	17db      	asrs	r3, r3, #31
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	3382      	adds	r3, #130	; 0x82
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	2387      	movs	r3, #135	; 0x87
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003eaa:	227d      	movs	r2, #125	; 0x7d
 8003eac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003eb0:	f7fc fd68 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	4a88      	ldr	r2, [pc, #544]	; (80040d8 <Display_dab_digrad_status_data+0x6c4>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	220a      	movs	r2, #10
 8003ec0:	4983      	ldr	r1, [pc, #524]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f007 fe98 	bl	800bbf8 <itoa>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2202      	movs	r2, #2
 8003ecc:	9201      	str	r2, [sp, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ed8:	2194      	movs	r1, #148	; 0x94
 8003eda:	205b      	movs	r0, #91	; 0x5b
 8003edc:	f7fc fdf4 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <Display_dab_digrad_status_data+0x6c4>)
 8003ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	4976      	ldr	r1, [pc, #472]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f007 fe7d 	bl	800bbf8 <itoa>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2202      	movs	r2, #2
 8003f02:	9201      	str	r2, [sp, #4]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0e:	2194      	movs	r1, #148	; 0x94
 8003f10:	2078      	movs	r0, #120	; 0x78
 8003f12:	f7fc fdd9 	bl	8000ac8 <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 8003f16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f1a:	2b09      	cmp	r3, #9
 8003f1c:	d821      	bhi.n	8003f62 <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 8003f1e:	2302      	movs	r3, #2
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	4b6e      	ldr	r3, [pc, #440]	; (80040dc <Display_dab_digrad_status_data+0x6c8>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	2194      	movs	r1, #148	; 0x94
 8003f30:	f44f 7084 	mov.w	r0, #264	; 0x108
 8003f34:	f7fc fdc8 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8003f38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	4964      	ldr	r1, [pc, #400]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003f40:	4618      	mov	r0, r3
 8003f42:	f007 fe59 	bl	800bbf8 <itoa>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2202      	movs	r2, #2
 8003f4a:	9201      	str	r2, [sp, #4]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f56:	2194      	movs	r1, #148	; 0x94
 8003f58:	f240 1011 	movw	r0, #273	; 0x111
 8003f5c:	f7fc fdb4 	bl	8000ac8 <ILI9341_Draw_String>
 8003f60:	e013      	b.n	8003f8a <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8003f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f66:	220a      	movs	r2, #10
 8003f68:	4959      	ldr	r1, [pc, #356]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f007 fe44 	bl	800bbf8 <itoa>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2202      	movs	r2, #2
 8003f74:	9201      	str	r2, [sp, #4]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f80:	2194      	movs	r1, #148	; 0x94
 8003f82:	f44f 7084 	mov.w	r0, #264	; 0x108
 8003f86:	f7fc fd9f 	bl	8000ac8 <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d81d      	bhi.n	8003fcc <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8003f90:	2302      	movs	r3, #2
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <Display_dab_digrad_status_data+0x6cc>)
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa0:	21ad      	movs	r1, #173	; 0xad
 8003fa2:	204f      	movs	r0, #79	; 0x4f
 8003fa4:	f7fc fd90 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	220a      	movs	r2, #10
 8003fac:	4948      	ldr	r1, [pc, #288]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f007 fe22 	bl	800bbf8 <itoa>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	9201      	str	r2, [sp, #4]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc4:	21ad      	movs	r1, #173	; 0xad
 8003fc6:	2057      	movs	r0, #87	; 0x57
 8003fc8:	f7fc fd7e 	bl	8000ac8 <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d911      	bls.n	8003ff6 <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	220a      	movs	r2, #10
 8003fd6:	493e      	ldr	r1, [pc, #248]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f007 fe0d 	bl	800bbf8 <itoa>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	9201      	str	r2, [sp, #4]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	21ad      	movs	r1, #173	; 0xad
 8003ff0:	204f      	movs	r0, #79	; 0x4f
 8003ff2:	f7fc fd69 	bl	8000ac8 <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	4b3a      	ldr	r3, [pc, #232]	; (80040e4 <Display_dab_digrad_status_data+0x6d0>)
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004006:	21ad      	movs	r1, #173	; 0xad
 8004008:	205f      	movs	r0, #95	; 0x5f
 800400a:	f7fc fd5d 	bl	8000ac8 <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 800400e:	88bb      	ldrh	r3, [r7, #4]
 8004010:	f240 22ee 	movw	r2, #750	; 0x2ee
 8004014:	4293      	cmp	r3, r2
 8004016:	d023      	beq.n	8004060 <Display_dab_digrad_status_data+0x64c>
 8004018:	f240 22ee 	movw	r2, #750	; 0x2ee
 800401c:	4293      	cmp	r3, r2
 800401e:	dc2c      	bgt.n	800407a <Display_dab_digrad_status_data+0x666>
 8004020:	2bfa      	cmp	r3, #250	; 0xfa
 8004022:	d003      	beq.n	800402c <Display_dab_digrad_status_data+0x618>
 8004024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004028:	d00d      	beq.n	8004046 <Display_dab_digrad_status_data+0x632>
 800402a:	e026      	b.n	800407a <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 800402c:	2302      	movs	r3, #2
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <Display_dab_digrad_status_data+0x6d4>)
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800403c:	21ad      	movs	r1, #173	; 0xad
 800403e:	2067      	movs	r0, #103	; 0x67
 8004040:	f7fc fd42 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004044:	e026      	b.n	8004094 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8004046:	2302      	movs	r3, #2
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	4b28      	ldr	r3, [pc, #160]	; (80040ec <Display_dab_digrad_status_data+0x6d8>)
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004056:	21ad      	movs	r1, #173	; 0xad
 8004058:	2067      	movs	r0, #103	; 0x67
 800405a:	f7fc fd35 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 800405e:	e019      	b.n	8004094 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8004060:	2302      	movs	r3, #2
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <Display_dab_digrad_status_data+0x6dc>)
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800406c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004070:	21ad      	movs	r1, #173	; 0xad
 8004072:	2067      	movs	r0, #103	; 0x67
 8004074:	f7fc fd28 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004078:	e00c      	b.n	8004094 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 800407a:	2302      	movs	r3, #2
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <Display_dab_digrad_status_data+0x6e0>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800408a:	21ad      	movs	r1, #173	; 0xad
 800408c:	2067      	movs	r0, #103	; 0x67
 800408e:	f7fc fd1b 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004092:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8004094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	220a      	movs	r2, #10
 800409e:	490c      	ldr	r1, [pc, #48]	; (80040d0 <Display_dab_digrad_status_data+0x6bc>)
 80040a0:	4618      	mov	r0, r3
 80040a2:	f007 fda9 	bl	800bbf8 <itoa>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2202      	movs	r2, #2
 80040aa:	9201      	str	r2, [sp, #4]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040b6:	21ad      	movs	r1, #173	; 0xad
 80040b8:	20d7      	movs	r0, #215	; 0xd7
 80040ba:	f7fc fd05 	bl	8000ac8 <ILI9341_Draw_String>
	}
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c8:	b004      	add	sp, #16
 80040ca:	4770      	bx	lr
 80040cc:	0800cafc 	.word	0x0800cafc
 80040d0:	20002fe0 	.word	0x20002fe0
 80040d4:	51eb851f 	.word	0x51eb851f
 80040d8:	10624dd3 	.word	0x10624dd3
 80040dc:	0800cb00 	.word	0x0800cb00
 80040e0:	0800ca34 	.word	0x0800ca34
 80040e4:	0800ca38 	.word	0x0800ca38
 80040e8:	0800cb04 	.word	0x0800cb04
 80040ec:	0800cb08 	.word	0x0800cb08
 80040f0:	0800cb0c 	.word	0x0800cb0c
 80040f4:	0800cb10 	.word	0x0800cb10

080040f8 <Display_settings_screen>:

void Display_settings_screen()
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80040fe:	f7ff fa6d 	bl	80035dc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 8004102:	2302      	movs	r3, #2
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	4b55      	ldr	r3, [pc, #340]	; (800425c <Display_settings_screen+0x164>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004110:	2101      	movs	r1, #1
 8004112:	2005      	movs	r0, #5
 8004114:	f7fc fcd8 	bl	8000ac8 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 20, 157, 60);
 8004118:	233c      	movs	r3, #60	; 0x3c
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	239d      	movs	r3, #157	; 0x9d
 800411e:	2214      	movs	r2, #20
 8004120:	2105      	movs	r1, #5
 8004122:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004126:	f7fc fc2d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 20, 315, 60);
 800412a:	233c      	movs	r3, #60	; 0x3c
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	f240 133b 	movw	r3, #315	; 0x13b
 8004132:	2214      	movs	r2, #20
 8004134:	21a3      	movs	r1, #163	; 0xa3
 8004136:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800413a:	f7fc fc23 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 32, WHITE, ORANGE, "VOLUME +", 2);
 800413e:	2302      	movs	r3, #2
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <Display_settings_screen+0x168>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800414a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800414e:	2120      	movs	r1, #32
 8004150:	2036      	movs	r0, #54	; 0x36
 8004152:	f7fc fcb9 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 32, WHITE, ORANGE, "VOLUME -", 2);
 8004156:	2302      	movs	r3, #2
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	4b42      	ldr	r3, [pc, #264]	; (8004264 <Display_settings_screen+0x16c>)
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004166:	2120      	movs	r1, #32
 8004168:	20d3      	movs	r0, #211	; 0xd3
 800416a:	f7fc fcad 	bl	8000ac8 <ILI9341_Draw_String>

	//SCAN & BACKLIGHT buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 65, 157, 105);
 800416e:	2369      	movs	r3, #105	; 0x69
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	239d      	movs	r3, #157	; 0x9d
 8004174:	2241      	movs	r2, #65	; 0x41
 8004176:	2105      	movs	r1, #5
 8004178:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800417c:	f7fc fc02 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 65, 315, 105);
 8004180:	2369      	movs	r3, #105	; 0x69
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	f240 133b 	movw	r3, #315	; 0x13b
 8004188:	2241      	movs	r2, #65	; 0x41
 800418a:	21a3      	movs	r1, #163	; 0xa3
 800418c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004190:	f7fc fbf8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(34, 32, WHITE, ORANGE, "SCAN DAB BAND", 2);
 8004194:	2302      	movs	r3, #2
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	4b33      	ldr	r3, [pc, #204]	; (8004268 <Display_settings_screen+0x170>)
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80041a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041a4:	2120      	movs	r1, #32
 80041a6:	2022      	movs	r0, #34	; 0x22
 80041a8:	f7fc fc8e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 32, WHITE, ORANGE, "BACKLIGHT", 2);
 80041ac:	2302      	movs	r3, #2
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <Display_settings_screen+0x174>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80041b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041bc:	2120      	movs	r1, #32
 80041be:	20ce      	movs	r0, #206	; 0xce
 80041c0:	f7fc fc82 	bl	8000ac8 <ILI9341_Draw_String>


	//Station 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 285, 140);
 80041c4:	238c      	movs	r3, #140	; 0x8c
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f240 131d 	movw	r3, #285	; 0x11d
 80041cc:	2278      	movs	r2, #120	; 0x78
 80041ce:	2105      	movs	r1, #5
 80041d0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041d4:	f7fc fbd6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 285, 165);
 80041d8:	23a5      	movs	r3, #165	; 0xa5
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	f240 131d 	movw	r3, #285	; 0x11d
 80041e0:	2291      	movs	r2, #145	; 0x91
 80041e2:	2105      	movs	r1, #5
 80041e4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041e8:	f7fc fbcc 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 7 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 285, 190);
 80041ec:	23be      	movs	r3, #190	; 0xbe
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	f240 131d 	movw	r3, #285	; 0x11d
 80041f4:	22aa      	movs	r2, #170	; 0xaa
 80041f6:	2105      	movs	r1, #5
 80041f8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041fc:	f7fc fbc2 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
//	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
//	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
//	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004200:	23eb      	movs	r3, #235	; 0xeb
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	239d      	movs	r3, #157	; 0x9d
 8004206:	22c3      	movs	r2, #195	; 0xc3
 8004208:	2105      	movs	r1, #5
 800420a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800420e:	f7fc fbb9 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004212:	23eb      	movs	r3, #235	; 0xeb
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	f240 133b 	movw	r3, #315	; 0x13b
 800421a:	22c3      	movs	r2, #195	; 0xc3
 800421c:	21a3      	movs	r1, #163	; 0xa3
 800421e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004222:	f7fc fbaf 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(60, 207, WHITE, ORANGE, "MENU L", 2);
 8004226:	2302      	movs	r3, #2
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <Display_settings_screen+0x178>)
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004236:	21cf      	movs	r1, #207	; 0xcf
 8004238:	203c      	movs	r0, #60	; 0x3c
 800423a:	f7fc fc45 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(217, 207, WHITE, ORANGE, "MENU R", 2);
 800423e:	2302      	movs	r3, #2
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <Display_settings_screen+0x17c>)
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800424a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424e:	21cf      	movs	r1, #207	; 0xcf
 8004250:	20d9      	movs	r0, #217	; 0xd9
 8004252:	f7fc fc39 	bl	8000ac8 <ILI9341_Draw_String>


}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	0800cb14 	.word	0x0800cb14
 8004260:	0800cb24 	.word	0x0800cb24
 8004264:	0800cb30 	.word	0x0800cb30
 8004268:	0800cb3c 	.word	0x0800cb3c
 800426c:	0800cb4c 	.word	0x0800cb4c
 8004270:	0800ca04 	.word	0x0800ca04
 8004274:	0800ca0c 	.word	0x0800ca0c

08004278 <Display_time>:



void Display_time(time_t time_val)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af02      	add	r7, sp, #8
 800427e:	463b      	mov	r3, r7
 8004280:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.hour < 10)
 8004284:	793b      	ldrb	r3, [r7, #4]
 8004286:	2b09      	cmp	r3, #9
 8004288:	d81e      	bhi.n	80042c8 <Display_time+0x50>
	{
		ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 800428a:	2302      	movs	r3, #2
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	4b39      	ldr	r3, [pc, #228]	; (8004374 <Display_time+0xfc>)
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2300      	movs	r3, #0
 8004294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004298:	2101      	movs	r1, #1
 800429a:	f240 100f 	movw	r0, #271	; 0x10f
 800429e:	f7fc fc13 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80042a2:	793b      	ldrb	r3, [r7, #4]
 80042a4:	220a      	movs	r2, #10
 80042a6:	4934      	ldr	r1, [pc, #208]	; (8004378 <Display_time+0x100>)
 80042a8:	4618      	mov	r0, r3
 80042aa:	f007 fca5 	bl	800bbf8 <itoa>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2202      	movs	r2, #2
 80042b2:	9201      	str	r2, [sp, #4]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042bc:	2101      	movs	r1, #1
 80042be:	f44f 708c 	mov.w	r0, #280	; 0x118
 80042c2:	f7fc fc01 	bl	8000ac8 <ILI9341_Draw_String>
 80042c6:	e011      	b.n	80042ec <Display_time+0x74>
	}
	else
	{
		ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80042c8:	793b      	ldrb	r3, [r7, #4]
 80042ca:	220a      	movs	r2, #10
 80042cc:	492a      	ldr	r1, [pc, #168]	; (8004378 <Display_time+0x100>)
 80042ce:	4618      	mov	r0, r3
 80042d0:	f007 fc92 	bl	800bbf8 <itoa>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2202      	movs	r2, #2
 80042d8:	9201      	str	r2, [sp, #4]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e2:	2101      	movs	r1, #1
 80042e4:	f240 100f 	movw	r0, #271	; 0x10f
 80042e8:	f7fc fbee 	bl	8000ac8 <ILI9341_Draw_String>
	}

	ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80042ec:	2302      	movs	r3, #2
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <Display_time+0x104>)
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fa:	2101      	movs	r1, #1
 80042fc:	f240 101f 	movw	r0, #287	; 0x11f
 8004300:	f7fc fbe2 	bl	8000ac8 <ILI9341_Draw_String>

	if(time_val.minute < 10)
 8004304:	797b      	ldrb	r3, [r7, #5]
 8004306:	2b09      	cmp	r3, #9
 8004308:	d81e      	bhi.n	8004348 <Display_time+0xd0>
	{
		ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 800430a:	2302      	movs	r3, #2
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <Display_time+0xfc>)
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004318:	2101      	movs	r1, #1
 800431a:	f240 1027 	movw	r0, #295	; 0x127
 800431e:	f7fc fbd3 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8004322:	797b      	ldrb	r3, [r7, #5]
 8004324:	220a      	movs	r2, #10
 8004326:	4914      	ldr	r1, [pc, #80]	; (8004378 <Display_time+0x100>)
 8004328:	4618      	mov	r0, r3
 800432a:	f007 fc65 	bl	800bbf8 <itoa>
 800432e:	4603      	mov	r3, r0
 8004330:	2202      	movs	r2, #2
 8004332:	9201      	str	r2, [sp, #4]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433c:	2101      	movs	r1, #1
 800433e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8004342:	f7fc fbc1 	bl	8000ac8 <ILI9341_Draw_String>
	{
		ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
	}
	//date
	//todo
}
 8004346:	e011      	b.n	800436c <Display_time+0xf4>
		ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8004348:	797b      	ldrb	r3, [r7, #5]
 800434a:	220a      	movs	r2, #10
 800434c:	490a      	ldr	r1, [pc, #40]	; (8004378 <Display_time+0x100>)
 800434e:	4618      	mov	r0, r3
 8004350:	f007 fc52 	bl	800bbf8 <itoa>
 8004354:	4603      	mov	r3, r0
 8004356:	2202      	movs	r2, #2
 8004358:	9201      	str	r2, [sp, #4]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2300      	movs	r3, #0
 800435e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004362:	2101      	movs	r1, #1
 8004364:	f240 1027 	movw	r0, #295	; 0x127
 8004368:	f7fc fbae 	bl	8000ac8 <ILI9341_Draw_String>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	0800cb00 	.word	0x0800cb00
 8004378:	20002fe0 	.word	0x20002fe0
 800437c:	0800cb58 	.word	0x0800cb58

08004380 <Display_show_station>:

void Display_show_station(dab_service_t _services_list[], uint8_t _actual_station, uint8_t _total_services)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af02      	add	r7, sp, #8
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
 800438c:	4613      	mov	r3, r2
 800438e:	70bb      	strb	r3, [r7, #2]
	display_freeze = 1;
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <Display_show_station+0xdc>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]

	ILI9341_Draw_Filled_Rectangle(BLACK, 50, 90, 270, 150);
 8004396:	2396      	movs	r3, #150	; 0x96
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800439e:	225a      	movs	r2, #90	; 0x5a
 80043a0:	2132      	movs	r1, #50	; 0x32
 80043a2:	2000      	movs	r0, #0
 80043a4:	f7fc faee 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 95, WHITE, BLACK, "Number:", 2);
 80043a8:	2302      	movs	r3, #2
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <Display_show_station+0xe0>)
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2300      	movs	r3, #0
 80043b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043b6:	215f      	movs	r1, #95	; 0x5f
 80043b8:	2037      	movs	r0, #55	; 0x37
 80043ba:	f7fc fb85 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 95, WHITE, BLACK, itoa(_actual_station + 1, itoa_buffer, 10), 2);
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	3301      	adds	r3, #1
 80043c2:	220a      	movs	r2, #10
 80043c4:	4927      	ldr	r1, [pc, #156]	; (8004464 <Display_show_station+0xe4>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f007 fc16 	bl	800bbf8 <itoa>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2202      	movs	r2, #2
 80043d0:	9201      	str	r2, [sp, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043da:	215f      	movs	r1, #95	; 0x5f
 80043dc:	2078      	movs	r0, #120	; 0x78
 80043de:	f7fc fb73 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(140, 95, WHITE, BLACK, "/", 2);
 80043e2:	2302      	movs	r3, #2
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <Display_show_station+0xe8>)
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f0:	215f      	movs	r1, #95	; 0x5f
 80043f2:	208c      	movs	r0, #140	; 0x8c
 80043f4:	f7fc fb68 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 95, WHITE, BLACK, itoa(_total_services, itoa_buffer, 10), 2);
 80043f8:	78bb      	ldrb	r3, [r7, #2]
 80043fa:	220a      	movs	r2, #10
 80043fc:	4919      	ldr	r1, [pc, #100]	; (8004464 <Display_show_station+0xe4>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f007 fbfa 	bl	800bbf8 <itoa>
 8004404:	4603      	mov	r3, r0
 8004406:	2202      	movs	r2, #2
 8004408:	9201      	str	r2, [sp, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004412:	215f      	movs	r1, #95	; 0x5f
 8004414:	2094      	movs	r0, #148	; 0x94
 8004416:	f7fc fb57 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(55, 110, WHITE, BLACK, "Name:", 2);
 800441a:	2302      	movs	r3, #2
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <Display_show_station+0xec>)
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2300      	movs	r3, #0
 8004424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004428:	216e      	movs	r1, #110	; 0x6e
 800442a:	2037      	movs	r0, #55	; 0x37
 800442c:	f7fc fb4c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 110, WHITE, BLACK, _services_list[_actual_station].name, 2);
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	2234      	movs	r2, #52	; 0x34
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	461a      	mov	r2, r3
 800443e:	2302      	movs	r3, #2
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	9200      	str	r2, [sp, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444a:	216e      	movs	r1, #110	; 0x6e
 800444c:	2064      	movs	r0, #100	; 0x64
 800444e:	f7fc fb3b 	bl	8000ac8 <ILI9341_Draw_String>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20003020 	.word	0x20003020
 8004460:	0800cb5c 	.word	0x0800cb5c
 8004464:	20002fe0 	.word	0x20002fe0
 8004468:	0800ca2c 	.word	0x0800ca2c
 800446c:	0800cb64 	.word	0x0800cb64

08004470 <Display_hide_station>:

void Display_hide_station()
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af02      	add	r7, sp, #8
	display_freeze = 0;
 8004476:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <Display_hide_station+0x1b0>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]

	ILI9341_Draw_Filled_Rectangle(BLACK, 50, 90, 270, 150);
 800447c:	2396      	movs	r3, #150	; 0x96
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004484:	225a      	movs	r2, #90	; 0x5a
 8004486:	2132      	movs	r1, #50	; 0x32
 8004488:	2000      	movs	r0, #0
 800448a:	f7fc fa7b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//wyswietlanie ponownie tylko tego, co wyskakujace okno zaslonilo

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 800448e:	235a      	movs	r3, #90	; 0x5a
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	f240 133b 	movw	r3, #315	; 0x13b
 8004496:	2246      	movs	r2, #70	; 0x46
 8004498:	2105      	movs	r1, #5
 800449a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800449e:	f7fc fa71 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 80044a2:	2302      	movs	r3, #2
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <Display_hide_station+0x1b4>)
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b2:	2149      	movs	r1, #73	; 0x49
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7fc fb07 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80044ba:	2302      	movs	r3, #2
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	4b5a      	ldr	r3, [pc, #360]	; (8004628 <Display_hide_station+0x1b8>)
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ca:	2149      	movs	r1, #73	; 0x49
 80044cc:	2069      	movs	r0, #105	; 0x69
 80044ce:	f7fc fafb 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80044d2:	2373      	movs	r3, #115	; 0x73
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f240 133b 	movw	r3, #315	; 0x13b
 80044da:	225f      	movs	r2, #95	; 0x5f
 80044dc:	2105      	movs	r1, #5
 80044de:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044e2:	f7fc fa4f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80044e6:	2302      	movs	r3, #2
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	4b50      	ldr	r3, [pc, #320]	; (800462c <Display_hide_station+0x1bc>)
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f6:	2162      	movs	r1, #98	; 0x62
 80044f8:	200a      	movs	r0, #10
 80044fa:	f7fc fae5 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80044fe:	2302      	movs	r3, #2
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	4b49      	ldr	r3, [pc, #292]	; (8004628 <Display_hide_station+0x1b8>)
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800450a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800450e:	2162      	movs	r1, #98	; 0x62
 8004510:	2069      	movs	r0, #105	; 0x69
 8004512:	f7fc fad9 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004516:	238c      	movs	r3, #140	; 0x8c
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	f240 133b 	movw	r3, #315	; 0x13b
 800451e:	2278      	movs	r2, #120	; 0x78
 8004520:	2105      	movs	r1, #5
 8004522:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004526:	f7fc fa2d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 800452a:	2302      	movs	r3, #2
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	4b40      	ldr	r3, [pc, #256]	; (8004630 <Display_hide_station+0x1c0>)
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800453a:	217b      	movs	r1, #123	; 0x7b
 800453c:	200a      	movs	r0, #10
 800453e:	f7fc fac3 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004542:	2302      	movs	r3, #2
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <Display_hide_station+0x1c4>)
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800454e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004552:	217b      	movs	r1, #123	; 0x7b
 8004554:	206e      	movs	r0, #110	; 0x6e
 8004556:	f7fc fab7 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 800455a:	23a5      	movs	r3, #165	; 0xa5
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	f240 133b 	movw	r3, #315	; 0x13b
 8004562:	2291      	movs	r2, #145	; 0x91
 8004564:	2105      	movs	r1, #5
 8004566:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800456a:	f7fc fa0b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 800456e:	2302      	movs	r3, #2
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <Display_hide_station+0x1c8>)
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800457a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800457e:	2194      	movs	r1, #148	; 0x94
 8004580:	200a      	movs	r0, #10
 8004582:	f7fc faa1 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004586:	2302      	movs	r3, #2
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <Display_hide_station+0x1cc>)
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004596:	2194      	movs	r1, #148	; 0x94
 8004598:	2071      	movs	r0, #113	; 0x71
 800459a:	f7fc fa95 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 800459e:	2302      	movs	r3, #2
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	4b27      	ldr	r3, [pc, #156]	; (8004640 <Display_hide_station+0x1d0>)
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045ae:	2194      	movs	r1, #148	; 0x94
 80045b0:	2094      	movs	r0, #148	; 0x94
 80045b2:	f7fc fa89 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 80045b6:	2302      	movs	r3, #2
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <Display_hide_station+0x1d4>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c6:	2194      	movs	r1, #148	; 0x94
 80045c8:	20b7      	movs	r0, #183	; 0xb7
 80045ca:	f7fc fa7d 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 80045ce:	2302      	movs	r3, #2
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <Display_hide_station+0x1d8>)
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045de:	2194      	movs	r1, #148	; 0x94
 80045e0:	20db      	movs	r0, #219	; 0xdb
 80045e2:	f7fc fa71 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 80045e6:	2302      	movs	r3, #2
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <Display_hide_station+0x1dc>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f6:	2194      	movs	r1, #148	; 0x94
 80045f8:	f240 101b 	movw	r0, #283	; 0x11b
 80045fc:	f7fc fa64 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004600:	2302      	movs	r3, #2
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <Display_hide_station+0x1e0>)
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800460c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004610:	2194      	movs	r1, #148	; 0x94
 8004612:	f240 1025 	movw	r0, #293	; 0x125
 8004616:	f7fc fa57 	bl	8000ac8 <ILI9341_Draw_String>

}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20003020 	.word	0x20003020
 8004624:	0800ca94 	.word	0x0800ca94
 8004628:	0800ca98 	.word	0x0800ca98
 800462c:	0800ca9c 	.word	0x0800ca9c
 8004630:	0800caa0 	.word	0x0800caa0
 8004634:	0800caa8 	.word	0x0800caa8
 8004638:	0800caac 	.word	0x0800caac
 800463c:	0800ca38 	.word	0x0800ca38
 8004640:	0800ca3c 	.word	0x0800ca3c
 8004644:	0800cab8 	.word	0x0800cab8
 8004648:	0800cac0 	.word	0x0800cac0
 800464c:	0800ca2c 	.word	0x0800ca2c
 8004650:	0800cac8 	.word	0x0800cac8

08004654 <Display_show_empty_station>:

void Display_show_empty_station()
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af02      	add	r7, sp, #8
	display_freeze = 1;
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <Display_show_empty_station+0x3c>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]

	ILI9341_Draw_Filled_Rectangle(BLACK, 50, 90, 270, 150);
 8004660:	2396      	movs	r3, #150	; 0x96
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004668:	225a      	movs	r2, #90	; 0x5a
 800466a:	2132      	movs	r1, #50	; 0x32
 800466c:	2000      	movs	r0, #0
 800466e:	f7fc f989 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 95, WHITE, BLACK, "Service list is empty!", 2);
 8004672:	2302      	movs	r3, #2
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <Display_show_empty_station+0x40>)
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004680:	215f      	movs	r1, #95	; 0x5f
 8004682:	2037      	movs	r0, #55	; 0x37
 8004684:	f7fc fa20 	bl	8000ac8 <ILI9341_Draw_String>
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20003020 	.word	0x20003020
 8004694:	0800cb6c 	.word	0x0800cb6c

08004698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <MX_DMA_Init+0x3c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a0b      	ldr	r2, [pc, #44]	; (80046d4 <MX_DMA_Init+0x3c>)
 80046a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <MX_DMA_Init+0x3c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	200f      	movs	r0, #15
 80046c0:	f001 fba3 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80046c4:	200f      	movs	r0, #15
 80046c6:	f001 fbbc 	bl	8005e42 <HAL_NVIC_EnableIRQ>

}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 80046dc:	bf00      	nop
 80046de:	f001 fa89 	bl	8005bf4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <eeprom_wait+0x1c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b14      	cmp	r3, #20
 80046ec:	d9f7      	bls.n	80046de <eeprom_wait+0x6>
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20003024 	.word	0x20003024

080046f8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af04      	add	r7, sp, #16
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8004704:	f7ff ffe8 	bl	80046d8 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004714:	9102      	str	r1, [sp, #8]
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2302      	movs	r3, #2
 800471e:	21a0      	movs	r1, #160	; 0xa0
 8004720:	4803      	ldr	r0, [pc, #12]	; (8004730 <eeprom_read+0x38>)
 8004722:	f002 facf 	bl	8006cc4 <HAL_I2C_Mem_Read>
 8004726:	4603      	mov	r3, r0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20003028 	.word	0x20003028

08004734 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af04      	add	r7, sp, #16
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8004740:	f7ff ffca 	bl	80046d8 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004750:	9102      	str	r1, [sp, #8]
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2302      	movs	r3, #2
 800475a:	21a0      	movs	r1, #160	; 0xa0
 800475c:	4807      	ldr	r0, [pc, #28]	; (800477c <eeprom_write+0x48>)
 800475e:	f002 f9b7 	bl	8006ad0 <HAL_I2C_Mem_Write>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8004766:	f001 fa45 	bl	8005bf4 <HAL_GetTick>
 800476a:	4603      	mov	r3, r0
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <eeprom_write+0x4c>)
 800476e:	6013      	str	r3, [r2, #0]

    return rc;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20003028 	.word	0x20003028
 8004780:	20003024 	.word	0x20003024

08004784 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b092      	sub	sp, #72	; 0x48
 8004788:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 800478a:	2101      	movs	r1, #1
 800478c:	4829      	ldr	r0, [pc, #164]	; (8004834 <eeprom_clear_scanning_data+0xb0>)
 800478e:	f7fe feff 	bl	8003590 <send_debug_msg>

	 uint8_t clear_page_sequence[64];

	 for (uint8_t i = 0; i < 64; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004798:	e00b      	b.n	80047b2 <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 800479a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800479e:	3348      	adds	r3, #72	; 0x48
 80047a0:	443b      	add	r3, r7
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	f803 2c44 	strb.w	r2, [r3, #-68]
	 for (uint8_t i = 0; i < 64; i++)
 80047a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047ac:	3301      	adds	r3, #1
 80047ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047b6:	2b3f      	cmp	r3, #63	; 0x3f
 80047b8:	d9ef      	bls.n	800479a <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	4619      	mov	r1, r3
 80047c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047c4:	f7ff ffb6 	bl	8004734 <eeprom_write>


	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80047ce:	e00e      	b.n	80047ee <eeprom_clear_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80047d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047d4:	3305      	adds	r3, #5
 80047d6:	019b      	lsls	r3, r3, #6
 80047d8:	4618      	mov	r0, r3
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	2240      	movs	r2, #64	; 0x40
 80047de:	4619      	mov	r1, r3
 80047e0:	f7ff ffa8 	bl	8004734 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80047e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047e8:	3301      	adds	r3, #1
 80047ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80047ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	d9ec      	bls.n	80047d0 <eeprom_clear_scanning_data+0x4c>
	}

	//clear services list
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80047fc:	e00e      	b.n	800481c <eeprom_clear_scanning_data+0x98>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80047fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004802:	330f      	adds	r3, #15
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	4618      	mov	r0, r3
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	4619      	mov	r1, r3
 800480e:	f7ff ff91 	bl	8004734 <eeprom_write>
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 8004812:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004816:	3301      	adds	r3, #1
 8004818:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800481c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004820:	2b63      	cmp	r3, #99	; 0x63
 8004822:	d9ec      	bls.n	80047fe <eeprom_clear_scanning_data+0x7a>
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8004824:	2101      	movs	r1, #1
 8004826:	4804      	ldr	r0, [pc, #16]	; (8004838 <eeprom_clear_scanning_data+0xb4>)
 8004828:	f7fe feb2 	bl	8003590 <send_debug_msg>
}
 800482c:	bf00      	nop
 800482e:	3748      	adds	r7, #72	; 0x48
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0800cc34 	.word	0x0800cc34
 8004838:	0800cc54 	.word	0x0800cc54

0800483c <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	461a      	mov	r2, r3
 8004848:	460b      	mov	r3, r1
 800484a:	72fb      	strb	r3, [r7, #11]
 800484c:	4613      	mov	r3, r2
 800484e:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8004850:	2101      	movs	r1, #1
 8004852:	4824      	ldr	r0, [pc, #144]	; (80048e4 <eeprom_save_scanning_data+0xa8>)
 8004854:	f7fe fe9c 	bl	8003590 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8004858:	f107 030a 	add.w	r3, r7, #10
 800485c:	2201      	movs	r2, #1
 800485e:	4619      	mov	r1, r3
 8004860:	f240 1005 	movw	r0, #261	; 0x105
 8004864:	f7ff ff66 	bl	8004734 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8004868:	f107 030b 	add.w	r3, r7, #11
 800486c:	2201      	movs	r2, #1
 800486e:	4619      	mov	r1, r3
 8004870:	f44f 7083 	mov.w	r0, #262	; 0x106
 8004874:	f7ff ff5e 	bl	8004734 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8004878:	2300      	movs	r3, #0
 800487a:	75fb      	strb	r3, [r7, #23]
 800487c:	e00e      	b.n	800489c <eeprom_save_scanning_data+0x60>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	3305      	adds	r3, #5
 8004882:	019b      	lsls	r3, r3, #6
 8004884:	4618      	mov	r0, r3
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	015b      	lsls	r3, r3, #5
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	2220      	movs	r2, #32
 8004890:	4619      	mov	r1, r3
 8004892:	f7ff ff4f 	bl	8004734 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	3301      	adds	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
 800489c:	7abb      	ldrb	r3, [r7, #10]
 800489e:	7dfa      	ldrb	r2, [r7, #23]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3ec      	bcc.n	800487e <eeprom_save_scanning_data+0x42>
	}

	//save services
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	75bb      	strb	r3, [r7, #22]
 80048a8:	e010      	b.n	80048cc <eeprom_save_scanning_data+0x90>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE, &_services_list[services_index], sizeof(dab_service_t));
 80048aa:	7dbb      	ldrb	r3, [r7, #22]
 80048ac:	330f      	adds	r3, #15
 80048ae:	019b      	lsls	r3, r3, #6
 80048b0:	4618      	mov	r0, r3
 80048b2:	7dbb      	ldrb	r3, [r7, #22]
 80048b4:	2234      	movs	r2, #52	; 0x34
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	2234      	movs	r2, #52	; 0x34
 80048c0:	4619      	mov	r1, r3
 80048c2:	f7ff ff37 	bl	8004734 <eeprom_write>
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80048c6:	7dbb      	ldrb	r3, [r7, #22]
 80048c8:	3301      	adds	r3, #1
 80048ca:	75bb      	strb	r3, [r7, #22]
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	7dba      	ldrb	r2, [r7, #22]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d3ea      	bcc.n	80048aa <eeprom_save_scanning_data+0x6e>
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 80048d4:	2101      	movs	r1, #1
 80048d6:	4804      	ldr	r0, [pc, #16]	; (80048e8 <eeprom_save_scanning_data+0xac>)
 80048d8:	f7fe fe5a 	bl	8003590 <send_debug_msg>
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	0800cc60 	.word	0x0800cc60
 80048e8:	0800cc7c 	.word	0x0800cc7c

080048ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	; 0x30
 80048f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	f107 031c 	add.w	r3, r7, #28
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	609a      	str	r2, [r3, #8]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	4b6c      	ldr	r3, [pc, #432]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a6b      	ldr	r2, [pc, #428]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 800490c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	4b69      	ldr	r3, [pc, #420]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a64      	ldr	r2, [pc, #400]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	4b5e      	ldr	r3, [pc, #376]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a5d      	ldr	r2, [pc, #372]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b5b      	ldr	r3, [pc, #364]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	4b57      	ldr	r3, [pc, #348]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a56      	ldr	r2, [pc, #344]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6313      	str	r3, [r2, #48]	; 0x30
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a4f      	ldr	r2, [pc, #316]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 800497c:	f043 0310 	orr.w	r3, r3, #16
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a48      	ldr	r2, [pc, #288]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 8004998:	f043 0308 	orr.w	r3, r3, #8
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <MX_GPIO_Init+0x1cc>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2130      	movs	r1, #48	; 0x30
 80049ae:	4843      	ldr	r0, [pc, #268]	; (8004abc <MX_GPIO_Init+0x1d0>)
 80049b0:	f001 ff30 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049ba:	4841      	ldr	r0, [pc, #260]	; (8004ac0 <MX_GPIO_Init+0x1d4>)
 80049bc:	f001 ff2a 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80049c0:	2200      	movs	r2, #0
 80049c2:	f24f 7180 	movw	r1, #63360	; 0xf780
 80049c6:	483f      	ldr	r0, [pc, #252]	; (8004ac4 <MX_GPIO_Init+0x1d8>)
 80049c8:	f001 ff24 	bl	8006814 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80049cc:	2200      	movs	r2, #0
 80049ce:	2128      	movs	r1, #40	; 0x28
 80049d0:	483d      	ldr	r0, [pc, #244]	; (8004ac8 <MX_GPIO_Init+0x1dc>)
 80049d2:	f001 ff1f 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80049d6:	2310      	movs	r3, #16
 80049d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049da:	2300      	movs	r3, #0
 80049dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80049e2:	f107 031c 	add.w	r3, r7, #28
 80049e6:	4619      	mov	r1, r3
 80049e8:	4838      	ldr	r0, [pc, #224]	; (8004acc <MX_GPIO_Init+0x1e0>)
 80049ea:	f001 fd5f 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 80049ee:	2330      	movs	r3, #48	; 0x30
 80049f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049f2:	2301      	movs	r3, #1
 80049f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049fa:	2302      	movs	r3, #2
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049fe:	f107 031c 	add.w	r3, r7, #28
 8004a02:	4619      	mov	r1, r3
 8004a04:	482d      	ldr	r0, [pc, #180]	; (8004abc <MX_GPIO_Init+0x1d0>)
 8004a06:	f001 fd51 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8004a0a:	2311      	movs	r3, #17
 8004a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a16:	f107 031c 	add.w	r3, r7, #28
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	482a      	ldr	r0, [pc, #168]	; (8004ac8 <MX_GPIO_Init+0x1dc>)
 8004a1e:	f001 fd45 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8004a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8004a34:	f107 031c 	add.w	r3, r7, #28
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4821      	ldr	r0, [pc, #132]	; (8004ac0 <MX_GPIO_Init+0x1d4>)
 8004a3c:	f001 fd36 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8004a40:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a46:	2301      	movs	r3, #1
 8004a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a52:	f107 031c 	add.w	r3, r7, #28
 8004a56:	4619      	mov	r1, r3
 8004a58:	481a      	ldr	r0, [pc, #104]	; (8004ac4 <MX_GPIO_Init+0x1d8>)
 8004a5a:	f001 fd27 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8004a5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a64:	2301      	movs	r3, #1
 8004a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a70:	f107 031c 	add.w	r3, r7, #28
 8004a74:	4619      	mov	r1, r3
 8004a76:	4813      	ldr	r0, [pc, #76]	; (8004ac4 <MX_GPIO_Init+0x1d8>)
 8004a78:	f001 fd18 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004a7c:	2340      	movs	r3, #64	; 0x40
 8004a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a80:	2300      	movs	r3, #0
 8004a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004a88:	f107 031c 	add.w	r3, r7, #28
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	480d      	ldr	r0, [pc, #52]	; (8004ac4 <MX_GPIO_Init+0x1d8>)
 8004a90:	f001 fd0c 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8004a94:	2328      	movs	r3, #40	; 0x28
 8004a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa4:	f107 031c 	add.w	r3, r7, #28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <MX_GPIO_Init+0x1dc>)
 8004aac:	f001 fcfe 	bl	80064ac <HAL_GPIO_Init>

}
 8004ab0:	bf00      	nop
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40020800 	.word	0x40020800
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40020c00 	.word	0x40020c00
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	40020000 	.word	0x40020000

08004ad0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <MX_I2C1_Init+0x54>)
 8004ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004adc:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <MX_I2C1_Init+0x58>)
 8004ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004ae6:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b0c:	4804      	ldr	r0, [pc, #16]	; (8004b20 <MX_I2C1_Init+0x50>)
 8004b0e:	f001 fe9b 	bl	8006848 <HAL_I2C_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004b18:	f000 f996 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b1c:	bf00      	nop
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20003028 	.word	0x20003028
 8004b24:	40005400 	.word	0x40005400
 8004b28:	000186a0 	.word	0x000186a0

08004b2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <MX_I2C3_Init+0x54>)
 8004b34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b38:	4a12      	ldr	r2, [pc, #72]	; (8004b84 <MX_I2C3_Init+0x58>)
 8004b3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004b42:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004b68:	4804      	ldr	r0, [pc, #16]	; (8004b7c <MX_I2C3_Init+0x50>)
 8004b6a:	f001 fe6d 	bl	8006848 <HAL_I2C_Init>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004b74:	f000 f968 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004b78:	bf00      	nop
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	2000307c 	.word	0x2000307c
 8004b80:	40005c00 	.word	0x40005c00
 8004b84:	000186a0 	.word	0x000186a0

08004b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 031c 	add.w	r3, r7, #28
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <HAL_I2C_MspInit+0x148>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d12c      	bne.n	8004c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a48      	ldr	r2, [pc, #288]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004bb4:	f043 0302 	orr.w	r3, r3, #2
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8004bc6:	23c0      	movs	r3, #192	; 0xc0
 8004bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bca:	2312      	movs	r3, #18
 8004bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	4619      	mov	r1, r3
 8004be0:	483d      	ldr	r0, [pc, #244]	; (8004cd8 <HAL_I2C_MspInit+0x150>)
 8004be2:	f001 fc63 	bl	80064ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004c02:	e060      	b.n	8004cc6 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a34      	ldr	r2, [pc, #208]	; (8004cdc <HAL_I2C_MspInit+0x154>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d15b      	bne.n	8004cc6 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3a:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8004c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c4c:	2312      	movs	r3, #18
 8004c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c54:	2303      	movs	r3, #3
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c58:	2304      	movs	r3, #4
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8004c5c:	f107 031c 	add.w	r3, r7, #28
 8004c60:	4619      	mov	r1, r3
 8004c62:	481f      	ldr	r0, [pc, #124]	; (8004ce0 <HAL_I2C_MspInit+0x158>)
 8004c64:	f001 fc22 	bl	80064ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8004c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c6e:	2312      	movs	r3, #18
 8004c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c76:	2303      	movs	r3, #3
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	4619      	mov	r1, r3
 8004c84:	4817      	ldr	r0, [pc, #92]	; (8004ce4 <HAL_I2C_MspInit+0x15c>)
 8004c86:	f001 fc11 	bl	80064ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c98:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <HAL_I2C_MspInit+0x14c>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2048      	movs	r0, #72	; 0x48
 8004cac:	f001 f8ad 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004cb0:	2048      	movs	r0, #72	; 0x48
 8004cb2:	f001 f8c6 	bl	8005e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2049      	movs	r0, #73	; 0x49
 8004cbc:	f001 f8a5 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004cc0:	2049      	movs	r0, #73	; 0x49
 8004cc2:	f001 f8be 	bl	8005e42 <HAL_NVIC_EnableIRQ>
}
 8004cc6:	bf00      	nop
 8004cc8:	3730      	adds	r7, #48	; 0x30
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40005400 	.word	0x40005400
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40020400 	.word	0x40020400
 8004cdc:	40005c00 	.word	0x40005c00
 8004ce0:	40020800 	.word	0x40020800
 8004ce4:	40020000 	.word	0x40020000

08004ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cec:	f000 ff1c 	bl	8005b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cf0:	f000 f840 	bl	8004d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cf4:	f7ff fdfa 	bl	80048ec <MX_GPIO_Init>
  MX_DMA_Init();
 8004cf8:	f7ff fcce 	bl	8004698 <MX_DMA_Init>
  MX_I2C1_Init();
 8004cfc:	f7ff fee8 	bl	8004ad0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004d00:	f7ff ff14 	bl	8004b2c <MX_I2C3_Init>
  MX_SPI1_Init();
 8004d04:	f000 f8a6 	bl	8004e54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004d08:	f000 f8da 	bl	8004ec0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004d0c:	f000 fa70 	bl	80051f0 <MX_TIM3_Init>
  MX_UART5_Init();
 8004d10:	f000 fdec 	bl	80058ec <MX_UART5_Init>
  MX_USART3_UART_Init();
 8004d14:	f000 fe14 	bl	8005940 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8004d18:	f000 fac4 	bl	80052a4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004d1c:	f000 fae6 	bl	80052ec <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8004d20:	2101      	movs	r1, #1
 8004d22:	4811      	ldr	r0, [pc, #68]	; (8004d68 <main+0x80>)
 8004d24:	f7fe fc34 	bl	8003590 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8004d28:	4810      	ldr	r0, [pc, #64]	; (8004d6c <main+0x84>)
 8004d2a:	f005 fdd5 	bl	800a8d8 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8004d2e:	f7fb fbd5 	bl	80004dc <ILI9341_Init>
  Display_booting_screen();
 8004d32:	f7fe fc67 	bl	8003604 <Display_booting_screen>

  Si468x_dab_init();
 8004d36:	f7fc f991 	bl	800105c <Si468x_dab_init>

  Display_clear_screen();
 8004d3a:	f7fe fc4f 	bl	80035dc <Display_clear_screen>
  Display_dab_digrad_status_background();
 8004d3e:	f7fe fcd3 	bl	80036e8 <Display_dab_digrad_status_background>

  restore_from_eeprom();
 8004d42:	f7fe f8e3 	bl	8002f0c <restore_from_eeprom>

//  Display_station_list_background();
//  Display_stations_list_data(6);


  Display_settings_screen();
 8004d46:	f7ff f9d7 	bl	80040f8 <Display_settings_screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  Si468x_dab_digrad_status();
	  Si468x_dab_get_time();
 8004d4a:	f7fd ffc1 	bl	8002cd0 <Si468x_dab_get_time>
	  Touch_Read(0);
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f000 fb92 	bl	8005478 <Touch_Read>

	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8004d54:	2101      	movs	r1, #1
 8004d56:	4806      	ldr	r0, [pc, #24]	; (8004d70 <main+0x88>)
 8004d58:	f001 fd44 	bl	80067e4 <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f3      	bne.n	8004d4a <main+0x62>
	  {
		  Si468x_dab_full_scan();
 8004d62:	f7fd fb61 	bl	8002428 <Si468x_dab_full_scan>
	  Si468x_dab_get_time();
 8004d66:	e7f0      	b.n	8004d4a <main+0x62>
 8004d68:	0800cea4 	.word	0x0800cea4
 8004d6c:	20003270 	.word	0x20003270
 8004d70:	40020400 	.word	0x40020400

08004d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b094      	sub	sp, #80	; 0x50
 8004d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d7a:	f107 0320 	add.w	r3, r7, #32
 8004d7e:	2230      	movs	r2, #48	; 0x30
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f006 ff3a 	bl	800bbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d88:	f107 030c 	add.w	r3, r7, #12
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <SystemClock_Config+0xcc>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <SystemClock_Config+0xcc>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	; 0x40
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <SystemClock_Config+0xcc>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004db4:	2300      	movs	r3, #0
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <SystemClock_Config+0xd0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <SystemClock_Config+0xd0>)
 8004dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <SystemClock_Config+0xd0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004de4:	2304      	movs	r3, #4
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8004de8:	23f0      	movs	r3, #240	; 0xf0
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004dec:	2302      	movs	r3, #2
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004df0:	2304      	movs	r3, #4
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004df4:	f107 0320 	add.w	r3, r7, #32
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f004 f9bf 	bl	800917c <HAL_RCC_OscConfig>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004e04:	f000 f820 	bl	8004e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e08:	230f      	movs	r3, #15
 8004e0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	2105      	movs	r1, #5
 8004e26:	4618      	mov	r0, r3
 8004e28:	f004 fc20 	bl	800966c <HAL_RCC_ClockConfig>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004e32:	f000 f809 	bl	8004e48 <Error_Handler>
  }
}
 8004e36:	bf00      	nop
 8004e38:	3750      	adds	r7, #80	; 0x50
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40007000 	.word	0x40007000

08004e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e4c:	b672      	cpsid	i
}
 8004e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e50:	e7fe      	b.n	8004e50 <Error_Handler+0x8>
	...

08004e54 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e5a:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <MX_SPI1_Init+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e6c:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e88:	2220      	movs	r2, #32
 8004e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004ea0:	220a      	movs	r2, #10
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ea4:	4804      	ldr	r0, [pc, #16]	; (8004eb8 <MX_SPI1_Init+0x64>)
 8004ea6:	f004 fe01 	bl	8009aac <HAL_SPI_Init>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004eb0:	f7ff ffca 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200030d0 	.word	0x200030d0
 8004ebc:	40013000 	.word	0x40013000

08004ec0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004ec4:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <MX_SPI2_Init+0x68>)
 8004ec8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ed0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f10:	4804      	ldr	r0, [pc, #16]	; (8004f24 <MX_SPI2_Init+0x64>)
 8004f12:	f004 fdcb 	bl	8009aac <HAL_SPI_Init>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004f1c:	f7ff ff94 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20003128 	.word	0x20003128
 8004f28:	40003800 	.word	0x40003800

08004f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f34:	f107 031c 	add.w	r3, r7, #28
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a4d      	ldr	r2, [pc, #308]	; (8005080 <HAL_SPI_MspInit+0x154>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d12c      	bne.n	8004fa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	4b4c      	ldr	r3, [pc, #304]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4a4b      	ldr	r2, [pc, #300]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5e:	4b49      	ldr	r3, [pc, #292]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	4b45      	ldr	r3, [pc, #276]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	4a44      	ldr	r2, [pc, #272]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7a:	4b42      	ldr	r3, [pc, #264]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8004f86:	23e0      	movs	r3, #224	; 0xe0
 8004f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f92:	2303      	movs	r3, #3
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f96:	2305      	movs	r3, #5
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9a:	f107 031c 	add.w	r3, r7, #28
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4839      	ldr	r0, [pc, #228]	; (8005088 <HAL_SPI_MspInit+0x15c>)
 8004fa2:	f001 fa83 	bl	80064ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004fa6:	e066      	b.n	8005076 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a37      	ldr	r2, [pc, #220]	; (800508c <HAL_SPI_MspInit+0x160>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d161      	bne.n	8005076 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	4a32      	ldr	r2, [pc, #200]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc2:	4b30      	ldr	r3, [pc, #192]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fde:	4b29      	ldr	r3, [pc, #164]	; (8005084 <HAL_SPI_MspInit+0x158>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8004fea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ffc:	2305      	movs	r3, #5
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005000:	f107 031c 	add.w	r3, r7, #28
 8005004:	4619      	mov	r1, r3
 8005006:	4822      	ldr	r0, [pc, #136]	; (8005090 <HAL_SPI_MspInit+0x164>)
 8005008:	f001 fa50 	bl	80064ac <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <HAL_SPI_MspInit+0x168>)
 800500e:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_SPI_MspInit+0x16c>)
 8005010:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_SPI_MspInit+0x168>)
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005020:	2200      	movs	r2, #0
 8005022:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800502a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_SPI_MspInit+0x168>)
 800502e:	2200      	movs	r2, #0
 8005030:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005032:	4b18      	ldr	r3, [pc, #96]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005034:	2200      	movs	r2, #0
 8005036:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005038:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_SPI_MspInit+0x168>)
 800503a:	2200      	movs	r2, #0
 800503c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005040:	2200      	movs	r2, #0
 8005042:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005046:	2200      	movs	r2, #0
 8005048:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800504a:	4812      	ldr	r0, [pc, #72]	; (8005094 <HAL_SPI_MspInit+0x168>)
 800504c:	f000 ff14 	bl	8005e78 <HAL_DMA_Init>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8005056:	f7ff fef7 	bl	8004e48 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a0d      	ldr	r2, [pc, #52]	; (8005094 <HAL_SPI_MspInit+0x168>)
 800505e:	649a      	str	r2, [r3, #72]	; 0x48
 8005060:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <HAL_SPI_MspInit+0x168>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	2100      	movs	r1, #0
 800506a:	2024      	movs	r0, #36	; 0x24
 800506c:	f000 fecd 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005070:	2024      	movs	r0, #36	; 0x24
 8005072:	f000 fee6 	bl	8005e42 <HAL_NVIC_EnableIRQ>
}
 8005076:	bf00      	nop
 8005078:	3730      	adds	r7, #48	; 0x30
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40013000 	.word	0x40013000
 8005084:	40023800 	.word	0x40023800
 8005088:	40020000 	.word	0x40020000
 800508c:	40003800 	.word	0x40003800
 8005090:	40020400 	.word	0x40020400
 8005094:	20003180 	.word	0x20003180
 8005098:	40026070 	.word	0x40026070

0800509c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_MspInit+0x4c>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <HAL_MspInit+0x4c>)
 80050ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b0:	6453      	str	r3, [r2, #68]	; 0x44
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_MspInit+0x4c>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <HAL_MspInit+0x4c>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <HAL_MspInit+0x4c>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_MspInit+0x4c>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800

080050ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050f0:	e7fe      	b.n	80050f0 <NMI_Handler+0x4>

080050f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050f6:	e7fe      	b.n	80050f6 <HardFault_Handler+0x4>

080050f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050fc:	e7fe      	b.n	80050fc <MemManage_Handler+0x4>

080050fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005102:	e7fe      	b.n	8005102 <BusFault_Handler+0x4>

08005104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005108:	e7fe      	b.n	8005108 <UsageFault_Handler+0x4>

0800510a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800510a:	b480      	push	{r7}
 800510c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005138:	f000 fd48 	bl	8005bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005144:	4802      	ldr	r0, [pc, #8]	; (8005150 <DMA1_Stream4_IRQHandler+0x10>)
 8005146:	f000 ff67 	bl	8006018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20003180 	.word	0x20003180

08005154 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005158:	4802      	ldr	r0, [pc, #8]	; (8005164 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800515a:	f005 fc7c 	bl	800aa56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20003228 	.word	0x20003228

08005168 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800516c:	4802      	ldr	r0, [pc, #8]	; (8005178 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800516e:	f005 fc72 	bl	800aa56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20003270 	.word	0x20003270

0800517c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005180:	4802      	ldr	r0, [pc, #8]	; (800518c <SPI2_IRQHandler+0x10>)
 8005182:	f005 f90b 	bl	800a39c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20003128 	.word	0x20003128

08005190 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8005194:	4802      	ldr	r0, [pc, #8]	; (80051a0 <I2C3_EV_IRQHandler+0x10>)
 8005196:	f001 ffbb 	bl	8007110 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000307c 	.word	0x2000307c

080051a4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80051a8:	4802      	ldr	r0, [pc, #8]	; (80051b4 <I2C3_ER_IRQHandler+0x10>)
 80051aa:	f002 f922 	bl	80073f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	2000307c 	.word	0x2000307c

080051b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <SystemInit+0x20>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <SystemInit+0x20>)
 80051d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051f6:	f107 0320 	add.w	r3, r7, #32
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	60da      	str	r2, [r3, #12]
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	615a      	str	r2, [r3, #20]
 8005210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <MX_TIM3_Init+0xac>)
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <MX_TIM3_Init+0xb0>)
 8005216:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005218:	4b20      	ldr	r3, [pc, #128]	; (800529c <MX_TIM3_Init+0xac>)
 800521a:	2200      	movs	r2, #0
 800521c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800521e:	4b1f      	ldr	r3, [pc, #124]	; (800529c <MX_TIM3_Init+0xac>)
 8005220:	2200      	movs	r2, #0
 8005222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <MX_TIM3_Init+0xac>)
 8005226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <MX_TIM3_Init+0xac>)
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <MX_TIM3_Init+0xac>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005238:	4818      	ldr	r0, [pc, #96]	; (800529c <MX_TIM3_Init+0xac>)
 800523a:	f005 fbbd 	bl	800a9b8 <HAL_TIM_PWM_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005244:	f7ff fe00 	bl	8004e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005248:	2300      	movs	r3, #0
 800524a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005250:	f107 0320 	add.w	r3, r7, #32
 8005254:	4619      	mov	r1, r3
 8005256:	4811      	ldr	r0, [pc, #68]	; (800529c <MX_TIM3_Init+0xac>)
 8005258:	f006 f840 	bl	800b2dc <HAL_TIMEx_MasterConfigSynchronization>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005262:	f7ff fdf1 	bl	8004e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005266:	2360      	movs	r3, #96	; 0x60
 8005268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	2208      	movs	r2, #8
 800527a:	4619      	mov	r1, r3
 800527c:	4807      	ldr	r0, [pc, #28]	; (800529c <MX_TIM3_Init+0xac>)
 800527e:	f005 fcf3 	bl	800ac68 <HAL_TIM_PWM_ConfigChannel>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005288:	f7ff fdde 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800528c:	4803      	ldr	r0, [pc, #12]	; (800529c <MX_TIM3_Init+0xac>)
 800528e:	f000 f8b9 	bl	8005404 <HAL_TIM_MspPostInit>

}
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200031e0 	.word	0x200031e0
 80052a0:	40000400 	.word	0x40000400

080052a4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <MX_TIM10_Init+0x44>)
 80052ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052b0:	f643 2297 	movw	r2, #14999	; 0x3a97
 80052b4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052be:	f240 2257 	movw	r2, #599	; 0x257
 80052c2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80052d0:	4804      	ldr	r0, [pc, #16]	; (80052e4 <MX_TIM10_Init+0x40>)
 80052d2:	f005 fab1 	bl	800a838 <HAL_TIM_Base_Init>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80052dc:	f7ff fdb4 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80052e0:	bf00      	nop
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20003228 	.word	0x20003228
 80052e8:	40014400 	.word	0x40014400

080052ec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <MX_TIM11_Init+0x40>)
 80052f2:	4a0f      	ldr	r2, [pc, #60]	; (8005330 <MX_TIM11_Init+0x44>)
 80052f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80052f6:	4b0d      	ldr	r3, [pc, #52]	; (800532c <MX_TIM11_Init+0x40>)
 80052f8:	f643 2297 	movw	r2, #14999	; 0x3a97
 80052fc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <MX_TIM11_Init+0x40>)
 8005300:	2200      	movs	r2, #0
 8005302:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <MX_TIM11_Init+0x40>)
 8005306:	f240 5213 	movw	r2, #1299	; 0x513
 800530a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <MX_TIM11_Init+0x40>)
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <MX_TIM11_Init+0x40>)
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005318:	4804      	ldr	r0, [pc, #16]	; (800532c <MX_TIM11_Init+0x40>)
 800531a:	f005 fa8d 	bl	800a838 <HAL_TIM_Base_Init>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8005324:	f7ff fd90 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20003270 	.word	0x20003270
 8005330:	40014800 	.word	0x40014800

08005334 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <HAL_TIM_PWM_MspInit+0x3c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10d      	bne.n	8005362 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_TIM_PWM_MspInit+0x40>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <HAL_TIM_PWM_MspInit+0x40>)
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_TIM_PWM_MspInit+0x40>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40000400 	.word	0x40000400
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <HAL_TIM_Base_MspInit+0x80>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d116      	bne.n	80053b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <HAL_TIM_Base_MspInit+0x84>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <HAL_TIM_Base_MspInit+0x84>)
 8005394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005398:	6453      	str	r3, [r2, #68]	; 0x44
 800539a:	4b18      	ldr	r3, [pc, #96]	; (80053fc <HAL_TIM_Base_MspInit+0x84>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80053a6:	2200      	movs	r2, #0
 80053a8:	2100      	movs	r1, #0
 80053aa:	2019      	movs	r0, #25
 80053ac:	f000 fd2d 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80053b0:	2019      	movs	r0, #25
 80053b2:	f000 fd46 	bl	8005e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80053b6:	e01a      	b.n	80053ee <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a10      	ldr	r2, [pc, #64]	; (8005400 <HAL_TIM_Base_MspInit+0x88>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d115      	bne.n	80053ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <HAL_TIM_Base_MspInit+0x84>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <HAL_TIM_Base_MspInit+0x84>)
 80053cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d0:	6453      	str	r3, [r2, #68]	; 0x44
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <HAL_TIM_Base_MspInit+0x84>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80053de:	2200      	movs	r2, #0
 80053e0:	2100      	movs	r1, #0
 80053e2:	201a      	movs	r0, #26
 80053e4:	f000 fd11 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80053e8:	201a      	movs	r0, #26
 80053ea:	f000 fd2a 	bl	8005e42 <HAL_NVIC_EnableIRQ>
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40023800 	.word	0x40023800
 8005400:	40014800 	.word	0x40014800

08005404 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <HAL_TIM_MspPostInit+0x68>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d11e      	bne.n	8005464 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_TIM_MspPostInit+0x6c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	4a10      	ldr	r2, [pc, #64]	; (8005470 <HAL_TIM_MspPostInit+0x6c>)
 8005430:	f043 0304 	orr.w	r3, r3, #4
 8005434:	6313      	str	r3, [r2, #48]	; 0x30
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_TIM_MspPostInit+0x6c>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8005442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005446:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005448:	2302      	movs	r3, #2
 800544a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005454:	2302      	movs	r3, #2
 8005456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4619      	mov	r1, r3
 800545e:	4805      	ldr	r0, [pc, #20]	; (8005474 <HAL_TIM_MspPostInit+0x70>)
 8005460:	f001 f824 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005464:	bf00      	nop
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40000400 	.word	0x40000400
 8005470:	40023800 	.word	0x40023800
 8005474:	40020800 	.word	0x40020800

08005478 <Touch_Read>:
//uint8_t state=0;

char touch_itoa_buffer[64];

void Touch_Read(uint8_t state)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	71fb      	strb	r3, [r7, #7]
	tp_dev.scan(0);
 8005482:	4b34      	ldr	r3, [pc, #208]	; (8005554 <Touch_Read+0xdc>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2000      	movs	r0, #0
 8005488:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 800548a:	4b32      	ldr	r3, [pc, #200]	; (8005554 <Touch_Read+0xdc>)
 800548c:	7c1b      	ldrb	r3, [r3, #16]
 800548e:	b25b      	sxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	da5a      	bge.n	800554a <Touch_Read+0xd2>
	{
		xtemp = TP_Read_XOY(0xD0);
 8005494:	20d0      	movs	r0, #208	; 0xd0
 8005496:	f000 f909 	bl	80056ac <TP_Read_XOY>
 800549a:	4603      	mov	r3, r0
 800549c:	461a      	mov	r2, r3
 800549e:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <Touch_Read+0xe0>)
 80054a0:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 80054a2:	2090      	movs	r0, #144	; 0x90
 80054a4:	f000 f902 	bl	80056ac <TP_Read_XOY>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	4b2b      	ldr	r3, [pc, #172]	; (800555c <Touch_Read+0xe4>)
 80054ae:	801a      	strh	r2, [r3, #0]

		x_pixel_val = 320 - 320 * (ytemp - 350) / (3900-350);
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <Touch_Read+0xe4>)
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	019b      	lsls	r3, r3, #6
 80054c0:	4a27      	ldr	r2, [pc, #156]	; (8005560 <Touch_Read+0xe8>)
 80054c2:	fb82 1203 	smull	r1, r2, r2, r3
 80054c6:	441a      	add	r2, r3
 80054c8:	12d2      	asrs	r2, r2, #11
 80054ca:	17db      	asrs	r3, r3, #31
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	4b23      	ldr	r3, [pc, #140]	; (8005564 <Touch_Read+0xec>)
 80054d8:	801a      	strh	r2, [r3, #0]

		y_pixel_val = 240 - 230 * (xtemp - 240) / (3800-230);
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <Touch_Read+0xe0>)
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	3bf0      	subs	r3, #240	; 0xf0
 80054e0:	22e6      	movs	r2, #230	; 0xe6
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	4a20      	ldr	r2, [pc, #128]	; (8005568 <Touch_Read+0xf0>)
 80054e8:	fb82 1203 	smull	r1, r2, r2, r3
 80054ec:	1252      	asrs	r2, r2, #9
 80054ee:	17db      	asrs	r3, r3, #31
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	33f0      	adds	r3, #240	; 0xf0
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <Touch_Read+0xf4>)
 80054fa:	801a      	strh	r2, [r3, #0]
//		send_debug_msg("x: ", CRLF_NO_SEND);
//		send_debug_msg(itoa(x_pixel_val, touch_itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(", y: ", CRLF_NO_SEND);
//		send_debug_msg(itoa(y_pixel_val, touch_itoa_buffer, 10), CRLF_SEND);

		if(x_pixel_val > 5 && x_pixel_val < 157 && y_pixel_val > 195 && x_pixel_val < 235)
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <Touch_Read+0xec>)
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	2b05      	cmp	r3, #5
 8005502:	d90e      	bls.n	8005522 <Touch_Read+0xaa>
 8005504:	4b17      	ldr	r3, [pc, #92]	; (8005564 <Touch_Read+0xec>)
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	2b9c      	cmp	r3, #156	; 0x9c
 800550a:	d80a      	bhi.n	8005522 <Touch_Read+0xaa>
 800550c:	4b17      	ldr	r3, [pc, #92]	; (800556c <Touch_Read+0xf4>)
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	2bc3      	cmp	r3, #195	; 0xc3
 8005512:	d906      	bls.n	8005522 <Touch_Read+0xaa>
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <Touch_Read+0xec>)
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	2bea      	cmp	r3, #234	; 0xea
 800551a:	d802      	bhi.n	8005522 <Touch_Read+0xaa>
		{
			play_station(1);
 800551c:	2001      	movs	r0, #1
 800551e:	f7fd fc1d 	bl	8002d5c <play_station>
		}

		if(x_pixel_val > 162 && x_pixel_val < 315 && y_pixel_val > 195 && x_pixel_val < 235)
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <Touch_Read+0xec>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2ba2      	cmp	r3, #162	; 0xa2
 8005528:	d90f      	bls.n	800554a <Touch_Read+0xd2>
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <Touch_Read+0xec>)
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005532:	d80a      	bhi.n	800554a <Touch_Read+0xd2>
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <Touch_Read+0xf4>)
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2bc3      	cmp	r3, #195	; 0xc3
 800553a:	d906      	bls.n	800554a <Touch_Read+0xd2>
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <Touch_Read+0xec>)
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	2bea      	cmp	r3, #234	; 0xea
 8005542:	d802      	bhi.n	800554a <Touch_Read+0xd2>
		{
			play_station(2);
 8005544:	2002      	movs	r0, #2
 8005546:	f7fd fc09 	bl	8002d5c <play_station>
		}
	}
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	200000b0 	.word	0x200000b0
 8005558:	200032b8 	.word	0x200032b8
 800555c:	200032ba 	.word	0x200032ba
 8005560:	93afcf8b 	.word	0x93afcf8b
 8005564:	200032bc 	.word	0x200032bc
 8005568:	24b70025 	.word	0x24b70025
 800556c:	200032be 	.word	0x200032be

08005570 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e021      	b.n	80055c8 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8005584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005588:	2b00      	cmp	r3, #0
 800558a:	da05      	bge.n	8005598 <TP_Write_Byte+0x28>
			T_DIN_ON;
 800558c:	2201      	movs	r2, #1
 800558e:	2120      	movs	r1, #32
 8005590:	4811      	ldr	r0, [pc, #68]	; (80055d8 <TP_Write_Byte+0x68>)
 8005592:	f001 f93f 	bl	8006814 <HAL_GPIO_WritePin>
 8005596:	e004      	b.n	80055a2 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8005598:	2200      	movs	r2, #0
 800559a:	2120      	movs	r1, #32
 800559c:	480e      	ldr	r0, [pc, #56]	; (80055d8 <TP_Write_Byte+0x68>)
 800559e:	f001 f939 	bl	8006814 <HAL_GPIO_WritePin>

		num <<= 1;
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 80055a8:	2200      	movs	r2, #0
 80055aa:	2108      	movs	r1, #8
 80055ac:	480a      	ldr	r0, [pc, #40]	; (80055d8 <TP_Write_Byte+0x68>)
 80055ae:	f001 f931 	bl	8006814 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80055b2:	2001      	movs	r0, #1
 80055b4:	f000 fb2a 	bl	8005c0c <HAL_Delay>
		T_CLK_ON;
 80055b8:	2201      	movs	r2, #1
 80055ba:	2108      	movs	r1, #8
 80055bc:	4806      	ldr	r0, [pc, #24]	; (80055d8 <TP_Write_Byte+0x68>)
 80055be:	f001 f929 	bl	8006814 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	3301      	adds	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b07      	cmp	r3, #7
 80055cc:	d9da      	bls.n	8005584 <TP_Write_Byte+0x14>
	}
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40020400 	.word	0x40020400

080055dc <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 80055ee:	2200      	movs	r2, #0
 80055f0:	2108      	movs	r1, #8
 80055f2:	482c      	ldr	r0, [pc, #176]	; (80056a4 <TP_Read_AD+0xc8>)
 80055f4:	f001 f90e 	bl	8006814 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 80055f8:	2200      	movs	r2, #0
 80055fa:	2120      	movs	r1, #32
 80055fc:	4829      	ldr	r0, [pc, #164]	; (80056a4 <TP_Read_AD+0xc8>)
 80055fe:	f001 f909 	bl	8006814 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	4828      	ldr	r0, [pc, #160]	; (80056a8 <TP_Read_AD+0xcc>)
 8005608:	f001 f904 	bl	8006814 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ffae 	bl	8005570 <TP_Write_Byte>
	HAL_Delay(1);
 8005614:	2001      	movs	r0, #1
 8005616:	f000 faf9 	bl	8005c0c <HAL_Delay>
	T_CLK_OFF;
 800561a:	2200      	movs	r2, #0
 800561c:	2108      	movs	r1, #8
 800561e:	4821      	ldr	r0, [pc, #132]	; (80056a4 <TP_Read_AD+0xc8>)
 8005620:	f001 f8f8 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005624:	2001      	movs	r0, #1
 8005626:	f000 faf1 	bl	8005c0c <HAL_Delay>
	T_CLK_ON;
 800562a:	2201      	movs	r2, #1
 800562c:	2108      	movs	r1, #8
 800562e:	481d      	ldr	r0, [pc, #116]	; (80056a4 <TP_Read_AD+0xc8>)
 8005630:	f001 f8f0 	bl	8006814 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005634:	2001      	movs	r0, #1
 8005636:	f000 fae9 	bl	8005c0c <HAL_Delay>
	T_CLK_OFF;
 800563a:	2200      	movs	r2, #0
 800563c:	2108      	movs	r1, #8
 800563e:	4819      	ldr	r0, [pc, #100]	; (80056a4 <TP_Read_AD+0xc8>)
 8005640:	f001 f8e8 	bl	8006814 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]
 8005648:	e01c      	b.n	8005684 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 800564a:	89bb      	ldrh	r3, [r7, #12]
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8005650:	2200      	movs	r2, #0
 8005652:	2108      	movs	r1, #8
 8005654:	4813      	ldr	r0, [pc, #76]	; (80056a4 <TP_Read_AD+0xc8>)
 8005656:	f001 f8dd 	bl	8006814 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800565a:	2001      	movs	r0, #1
 800565c:	f000 fad6 	bl	8005c0c <HAL_Delay>
		T_CLK_ON;
 8005660:	2201      	movs	r2, #1
 8005662:	2108      	movs	r1, #8
 8005664:	480f      	ldr	r0, [pc, #60]	; (80056a4 <TP_Read_AD+0xc8>)
 8005666:	f001 f8d5 	bl	8006814 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 800566a:	2110      	movs	r1, #16
 800566c:	480d      	ldr	r0, [pc, #52]	; (80056a4 <TP_Read_AD+0xc8>)
 800566e:	f001 f8b9 	bl	80067e4 <HAL_GPIO_ReadPin>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <TP_Read_AD+0xa2>
 8005678:	89bb      	ldrh	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	3301      	adds	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d9df      	bls.n	800564a <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 800568a:	89bb      	ldrh	r3, [r7, #12]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8005690:	2201      	movs	r2, #1
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	4804      	ldr	r0, [pc, #16]	; (80056a8 <TP_Read_AD+0xcc>)
 8005696:	f001 f8bd 	bl	8006814 <HAL_GPIO_WritePin>
	return(Num);
 800569a:	89bb      	ldrh	r3, [r7, #12]

}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40020400 	.word	0x40020400
 80056a8:	40020c00 	.word	0x40020c00

080056ac <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ff8f 	bl	80055dc <TP_Read_AD>
}
 80056be:	bf00      	nop
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <TP_Read_XY+0x3c>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff ffe8 	bl	80056ac <TP_Read_XOY>
 80056dc:	4603      	mov	r3, r0
 80056de:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <TP_Read_XY+0x40>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff ffe1 	bl	80056ac <TP_Read_XOY>
 80056ea:	4603      	mov	r3, r0
 80056ec:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	89fa      	ldrh	r2, [r7, #14]
 80056f2:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	89ba      	ldrh	r2, [r7, #12]
 80056f8:	801a      	strh	r2, [r3, #0]
	return 1;
 80056fa:	2301      	movs	r3, #1
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	200000d4 	.word	0x200000d4
 8005708:	200000d5 	.word	0x200000d5

0800570c <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8005716:	f107 0212 	add.w	r2, r7, #18
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ffd1 	bl	80056c8 <TP_Read_XY>
 8005726:	4603      	mov	r3, r0
 8005728:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <TP_Read_XY2+0x28>
    	return(0);
 8005730:	2300      	movs	r3, #0
 8005732:	e049      	b.n	80057c8 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8005734:	f107 020e 	add.w	r2, r7, #14
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ffc2 	bl	80056c8 <TP_Read_XY>
 8005744:	4603      	mov	r3, r0
 8005746:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <TP_Read_XY2+0x46>
    	return(0);
 800574e:	2300      	movs	r3, #0
 8005750:	e03a      	b.n	80057c8 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8005752:	8a3a      	ldrh	r2, [r7, #16]
 8005754:	8abb      	ldrh	r3, [r7, #20]
 8005756:	429a      	cmp	r2, r3
 8005758:	d804      	bhi.n	8005764 <TP_Read_XY2+0x58>
 800575a:	8a3b      	ldrh	r3, [r7, #16]
 800575c:	3331      	adds	r3, #49	; 0x31
 800575e:	8aba      	ldrh	r2, [r7, #20]
 8005760:	4293      	cmp	r3, r2
 8005762:	da08      	bge.n	8005776 <TP_Read_XY2+0x6a>
 8005764:	8aba      	ldrh	r2, [r7, #20]
 8005766:	8a3b      	ldrh	r3, [r7, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d82c      	bhi.n	80057c6 <TP_Read_XY2+0xba>
 800576c:	8abb      	ldrh	r3, [r7, #20]
 800576e:	3331      	adds	r3, #49	; 0x31
 8005770:	8a3a      	ldrh	r2, [r7, #16]
 8005772:	4293      	cmp	r3, r2
 8005774:	db27      	blt.n	80057c6 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8005776:	89fa      	ldrh	r2, [r7, #14]
 8005778:	8a7b      	ldrh	r3, [r7, #18]
 800577a:	429a      	cmp	r2, r3
 800577c:	d804      	bhi.n	8005788 <TP_Read_XY2+0x7c>
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	3331      	adds	r3, #49	; 0x31
 8005782:	8a7a      	ldrh	r2, [r7, #18]
 8005784:	4293      	cmp	r3, r2
 8005786:	da08      	bge.n	800579a <TP_Read_XY2+0x8e>
 8005788:	8a7a      	ldrh	r2, [r7, #18]
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	429a      	cmp	r2, r3
 800578e:	d81a      	bhi.n	80057c6 <TP_Read_XY2+0xba>
 8005790:	8a7b      	ldrh	r3, [r7, #18]
 8005792:	3331      	adds	r3, #49	; 0x31
 8005794:	89fa      	ldrh	r2, [r7, #14]
 8005796:	4293      	cmp	r3, r2
 8005798:	db15      	blt.n	80057c6 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 800579a:	8abb      	ldrh	r3, [r7, #20]
 800579c:	461a      	mov	r2, r3
 800579e:	8a3b      	ldrh	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	0fda      	lsrs	r2, r3, #31
 80057a4:	4413      	add	r3, r2
 80057a6:	105b      	asrs	r3, r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 80057ae:	8a7b      	ldrh	r3, [r7, #18]
 80057b0:	461a      	mov	r2, r3
 80057b2:	89fb      	ldrh	r3, [r7, #14]
 80057b4:	4413      	add	r3, r2
 80057b6:	0fda      	lsrs	r2, r3, #31
 80057b8:	4413      	add	r3, r2
 80057ba:	105b      	asrs	r3, r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	801a      	strh	r2, [r3, #0]
        return 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 80057da:	2140      	movs	r1, #64	; 0x40
 80057dc:	483f      	ldr	r0, [pc, #252]	; (80058dc <TP_Scan+0x10c>)
 80057de:	f001 f801 	bl	80067e4 <HAL_GPIO_ReadPin>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d155      	bne.n	8005894 <TP_Scan+0xc4>
	{
		if(tp)
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 80057ee:	493c      	ldr	r1, [pc, #240]	; (80058e0 <TP_Scan+0x110>)
 80057f0:	483c      	ldr	r0, [pc, #240]	; (80058e4 <TP_Scan+0x114>)
 80057f2:	f7ff ff8b 	bl	800570c <TP_Read_XY2>
 80057f6:	e03c      	b.n	8005872 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 80057f8:	4939      	ldr	r1, [pc, #228]	; (80058e0 <TP_Scan+0x110>)
 80057fa:	483a      	ldr	r0, [pc, #232]	; (80058e4 <TP_Scan+0x114>)
 80057fc:	f7ff ff86 	bl	800570c <TP_Read_XY2>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d035      	beq.n	8005872 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8005806:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <TP_Scan+0x118>)
 8005808:	ed93 7a05 	vldr	s14, [r3, #20]
 800580c:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <TP_Scan+0x118>)
 800580e:	899b      	ldrh	r3, [r3, #12]
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800581c:	4b32      	ldr	r3, [pc, #200]	; (80058e8 <TP_Scan+0x118>)
 800581e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800582e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005832:	ee17 3a90 	vmov	r3, s15
 8005836:	b29a      	uxth	r2, r3
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <TP_Scan+0x118>)
 800583a:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 800583c:	4b2a      	ldr	r3, [pc, #168]	; (80058e8 <TP_Scan+0x118>)
 800583e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005842:	4b29      	ldr	r3, [pc, #164]	; (80058e8 <TP_Scan+0x118>)
 8005844:	89db      	ldrh	r3, [r3, #14]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005852:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <TP_Scan+0x118>)
 8005854:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005868:	ee17 3a90 	vmov	r3, s15
 800586c:	b29a      	uxth	r2, r3
 800586e:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <TP_Scan+0x118>)
 8005870:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <TP_Scan+0x118>)
 8005874:	7c1b      	ldrb	r3, [r3, #16]
 8005876:	b25b      	sxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	db26      	blt.n	80058ca <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 800587c:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <TP_Scan+0x118>)
 800587e:	22c0      	movs	r2, #192	; 0xc0
 8005880:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8005882:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <TP_Scan+0x118>)
 8005884:	899a      	ldrh	r2, [r3, #12]
 8005886:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <TP_Scan+0x118>)
 8005888:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <TP_Scan+0x118>)
 800588c:	89da      	ldrh	r2, [r3, #14]
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <TP_Scan+0x118>)
 8005890:	815a      	strh	r2, [r3, #10]
 8005892:	e01a      	b.n	80058ca <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8005894:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <TP_Scan+0x118>)
 8005896:	7c1b      	ldrb	r3, [r3, #16]
 8005898:	b25b      	sxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	da07      	bge.n	80058ae <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <TP_Scan+0x118>)
 80058a0:	7c1b      	ldrb	r3, [r3, #16]
 80058a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <TP_Scan+0x118>)
 80058aa:	741a      	strb	r2, [r3, #16]
 80058ac:	e00d      	b.n	80058ca <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 80058ae:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <TP_Scan+0x118>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <TP_Scan+0x118>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 80058ba:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <TP_Scan+0x118>)
 80058bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c0:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <TP_Scan+0x118>)
 80058c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c8:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <TP_Scan+0x118>)
 80058cc:	7c1b      	ldrb	r3, [r3, #16]
 80058ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058d2:	b2db      	uxtb	r3, r3
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40020c00 	.word	0x40020c00
 80058e0:	200000be 	.word	0x200000be
 80058e4:	200000bc 	.word	0x200000bc
 80058e8:	200000b0 	.word	0x200000b0

080058ec <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <MX_UART5_Init+0x4c>)
 80058f2:	4a12      	ldr	r2, [pc, #72]	; (800593c <MX_UART5_Init+0x50>)
 80058f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <MX_UART5_Init+0x4c>)
 80058f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80058fe:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <MX_UART5_Init+0x4c>)
 8005900:	2200      	movs	r2, #0
 8005902:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <MX_UART5_Init+0x4c>)
 8005906:	2200      	movs	r2, #0
 8005908:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800590a:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <MX_UART5_Init+0x4c>)
 800590c:	2200      	movs	r2, #0
 800590e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <MX_UART5_Init+0x4c>)
 8005912:	220c      	movs	r2, #12
 8005914:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <MX_UART5_Init+0x4c>)
 8005918:	2200      	movs	r2, #0
 800591a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <MX_UART5_Init+0x4c>)
 800591e:	2200      	movs	r2, #0
 8005920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005922:	4805      	ldr	r0, [pc, #20]	; (8005938 <MX_UART5_Init+0x4c>)
 8005924:	f005 fd6a 	bl	800b3fc <HAL_UART_Init>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800592e:	f7ff fa8b 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200032c0 	.word	0x200032c0
 800593c:	40005000 	.word	0x40005000

08005940 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <MX_USART3_UART_Init+0x4c>)
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <MX_USART3_UART_Init+0x50>)
 8005948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <MX_USART3_UART_Init+0x4c>)
 800594c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <MX_USART3_UART_Init+0x4c>)
 8005954:	2200      	movs	r2, #0
 8005956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <MX_USART3_UART_Init+0x4c>)
 800595a:	2200      	movs	r2, #0
 800595c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <MX_USART3_UART_Init+0x4c>)
 8005960:	2200      	movs	r2, #0
 8005962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <MX_USART3_UART_Init+0x4c>)
 8005966:	220c      	movs	r2, #12
 8005968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <MX_USART3_UART_Init+0x4c>)
 800596c:	2200      	movs	r2, #0
 800596e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <MX_USART3_UART_Init+0x4c>)
 8005972:	2200      	movs	r2, #0
 8005974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005976:	4805      	ldr	r0, [pc, #20]	; (800598c <MX_USART3_UART_Init+0x4c>)
 8005978:	f005 fd40 	bl	800b3fc <HAL_UART_Init>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005982:	f7ff fa61 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20003304 	.word	0x20003304
 8005990:	40004800 	.word	0x40004800

08005994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800599c:	f107 031c 	add.w	r3, r7, #28
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a42      	ldr	r2, [pc, #264]	; (8005abc <HAL_UART_MspInit+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d14b      	bne.n	8005a4e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	4a40      	ldr	r2, [pc, #256]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c4:	6413      	str	r3, [r2, #64]	; 0x40
 80059c6:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	4a39      	ldr	r2, [pc, #228]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059dc:	f043 0304 	orr.w	r3, r3, #4
 80059e0:	6313      	str	r3, [r2, #48]	; 0x30
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 80059f8:	f043 0308 	orr.w	r3, r3, #8
 80059fc:	6313      	str	r3, [r2, #48]	; 0x30
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a10:	2302      	movs	r3, #2
 8005a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	4619      	mov	r1, r3
 8005a26:	4827      	ldr	r0, [pc, #156]	; (8005ac4 <HAL_UART_MspInit+0x130>)
 8005a28:	f000 fd40 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a30:	2302      	movs	r3, #2
 8005a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a40:	f107 031c 	add.w	r3, r7, #28
 8005a44:	4619      	mov	r1, r3
 8005a46:	4820      	ldr	r0, [pc, #128]	; (8005ac8 <HAL_UART_MspInit+0x134>)
 8005a48:	f000 fd30 	bl	80064ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005a4c:	e031      	b.n	8005ab2 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_UART_MspInit+0x138>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d12c      	bne.n	8005ab2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a66:	6413      	str	r3, [r2, #64]	; 0x40
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a74:	2300      	movs	r3, #0
 8005a76:	60bb      	str	r3, [r7, #8]
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a7e:	f043 0302 	orr.w	r3, r3, #2
 8005a82:	6313      	str	r3, [r2, #48]	; 0x30
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <HAL_UART_MspInit+0x12c>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8005a90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a96:	2302      	movs	r3, #2
 8005a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005aa2:	2307      	movs	r3, #7
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aa6:	f107 031c 	add.w	r3, r7, #28
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4808      	ldr	r0, [pc, #32]	; (8005ad0 <HAL_UART_MspInit+0x13c>)
 8005aae:	f000 fcfd 	bl	80064ac <HAL_GPIO_Init>
}
 8005ab2:	bf00      	nop
 8005ab4:	3730      	adds	r7, #48	; 0x30
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40005000 	.word	0x40005000
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40020800 	.word	0x40020800
 8005ac8:	40020c00 	.word	0x40020c00
 8005acc:	40004800 	.word	0x40004800
 8005ad0:	40020400 	.word	0x40020400

08005ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ad8:	480d      	ldr	r0, [pc, #52]	; (8005b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005ada:	490e      	ldr	r1, [pc, #56]	; (8005b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005adc:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ae0:	e002      	b.n	8005ae8 <LoopCopyDataInit>

08005ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ae6:	3304      	adds	r3, #4

08005ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005aec:	d3f9      	bcc.n	8005ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005aee:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005af0:	4c0b      	ldr	r4, [pc, #44]	; (8005b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005af4:	e001      	b.n	8005afa <LoopFillZerobss>

08005af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005af8:	3204      	adds	r2, #4

08005afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005afc:	d3fb      	bcc.n	8005af6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005afe:	f7ff fb65 	bl	80051cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b02:	f006 f83d 	bl	800bb80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b06:	f7ff f8ef 	bl	8004ce8 <main>
  bx  lr    
 8005b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b14:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8005b18:	0800ee78 	.word	0x0800ee78
  ldr r2, =_sbss
 8005b1c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8005b20:	2000334c 	.word	0x2000334c

08005b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b24:	e7fe      	b.n	8005b24 <ADC_IRQHandler>
	...

08005b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <HAL_Init+0x40>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <HAL_Init+0x40>)
 8005b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_Init+0x40>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <HAL_Init+0x40>)
 8005b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <HAL_Init+0x40>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <HAL_Init+0x40>)
 8005b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b50:	2003      	movs	r0, #3
 8005b52:	f000 f94f 	bl	8005df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b56:	200f      	movs	r0, #15
 8005b58:	f000 f808 	bl	8005b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b5c:	f7ff fa9e 	bl	800509c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40023c00 	.word	0x40023c00

08005b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <HAL_InitTick+0x54>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_InitTick+0x58>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f967 	bl	8005e5e <HAL_SYSTICK_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e00e      	b.n	8005bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b0f      	cmp	r3, #15
 8005b9e:	d80a      	bhi.n	8005bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	f000 f92f 	bl	8005e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bac:	4a06      	ldr	r2, [pc, #24]	; (8005bc8 <HAL_InitTick+0x5c>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	200000ac 	.word	0x200000ac
 8005bc4:	200000dc 	.word	0x200000dc
 8005bc8:	200000d8 	.word	0x200000d8

08005bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_IncTick+0x20>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_IncTick+0x24>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4413      	add	r3, r2
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <HAL_IncTick+0x24>)
 8005bde:	6013      	str	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	200000dc 	.word	0x200000dc
 8005bf0:	20003348 	.word	0x20003348

08005bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_GetTick+0x14>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20003348 	.word	0x20003348

08005c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c14:	f7ff ffee 	bl	8005bf4 <HAL_GetTick>
 8005c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d005      	beq.n	8005c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_Delay+0x44>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c32:	bf00      	nop
 8005c34:	f7ff ffde 	bl	8005bf4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d8f7      	bhi.n	8005c34 <HAL_Delay+0x28>
  {
  }
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200000dc 	.word	0x200000dc

08005c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <__NVIC_SetPriorityGrouping+0x44>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c86:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <__NVIC_SetPriorityGrouping+0x44>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	60d3      	str	r3, [r2, #12]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000ed00 	.word	0xe000ed00

08005c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	f003 0307 	and.w	r3, r3, #7
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db0b      	blt.n	8005ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	f003 021f 	and.w	r2, r3, #31
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <__NVIC_EnableIRQ+0x38>)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2001      	movs	r0, #1
 8005cda:	fa00 f202 	lsl.w	r2, r0, r2
 8005cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e100 	.word	0xe000e100

08005cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	db0a      	blt.n	8005d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <__NVIC_SetPriority+0x4c>)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	0112      	lsls	r2, r2, #4
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d1c:	e00a      	b.n	8005d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	4908      	ldr	r1, [pc, #32]	; (8005d44 <__NVIC_SetPriority+0x50>)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	761a      	strb	r2, [r3, #24]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000e100 	.word	0xe000e100
 8005d44:	e000ed00 	.word	0xe000ed00

08005d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	bf28      	it	cs
 8005d66:	2304      	movcs	r3, #4
 8005d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d902      	bls.n	8005d78 <NVIC_EncodePriority+0x30>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3b03      	subs	r3, #3
 8005d76:	e000      	b.n	8005d7a <NVIC_EncodePriority+0x32>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d90:	f04f 31ff 	mov.w	r1, #4294967295
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	43d9      	mvns	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	4313      	orrs	r3, r2
         );
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc0:	d301      	bcc.n	8005dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e00f      	b.n	8005de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <SysTick_Config+0x40>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dce:	210f      	movs	r1, #15
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	f7ff ff8e 	bl	8005cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <SysTick_Config+0x40>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <SysTick_Config+0x40>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000e010 	.word	0xe000e010

08005df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff29 	bl	8005c54 <__NVIC_SetPriorityGrouping>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4603      	mov	r3, r0
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e1c:	f7ff ff3e 	bl	8005c9c <__NVIC_GetPriorityGrouping>
 8005e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f7ff ff8e 	bl	8005d48 <NVIC_EncodePriority>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ff5d 	bl	8005cf4 <__NVIC_SetPriority>
}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	4603      	mov	r3, r0
 8005e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff ff31 	bl	8005cb8 <__NVIC_EnableIRQ>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff ffa2 	bl	8005db0 <SysTick_Config>
 8005e6c:	4603      	mov	r3, r0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e84:	f7ff feb6 	bl	8005bf4 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e099      	b.n	8005fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eb4:	e00f      	b.n	8005ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb6:	f7ff fe9d 	bl	8005bf4 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	d908      	bls.n	8005ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e078      	b.n	8005fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e8      	bne.n	8005eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <HAL_DMA_Init+0x158>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d107      	bne.n	8005f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d117      	bne.n	8005f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00e      	beq.n	8005f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa19 	bl	80063b4 <DMA_CheckFifoParam>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f96:	2301      	movs	r3, #1
 8005f98:	e016      	b.n	8005fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9d0 	bl	8006348 <DMA_CalcBaseAndBitshift>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb0:	223f      	movs	r2, #63	; 0x3f
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	f010803f 	.word	0xf010803f

08005fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e00c      	b.n	800600c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2205      	movs	r2, #5
 8005ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006024:	4b8e      	ldr	r3, [pc, #568]	; (8006260 <HAL_DMA_IRQHandler+0x248>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a8e      	ldr	r2, [pc, #568]	; (8006264 <HAL_DMA_IRQHandler+0x24c>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	0a9b      	lsrs	r3, r3, #10
 8006030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	2208      	movs	r2, #8
 8006044:	409a      	lsls	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01a      	beq.n	8006084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d013      	beq.n	8006084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0204 	bic.w	r2, r2, #4
 800606a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	2208      	movs	r2, #8
 8006072:	409a      	lsls	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006088:	2201      	movs	r2, #1
 800608a:	409a      	lsls	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	2201      	movs	r2, #1
 80060a8:	409a      	lsls	r2, r3
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	2204      	movs	r2, #4
 80060c0:	409a      	lsls	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d012      	beq.n	80060f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	2204      	movs	r2, #4
 80060de:	409a      	lsls	r2, r3
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	f043 0204 	orr.w	r2, r3, #4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f4:	2210      	movs	r2, #16
 80060f6:	409a      	lsls	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d043      	beq.n	8006188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d03c      	beq.n	8006188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006112:	2210      	movs	r2, #16
 8006114:	409a      	lsls	r2, r3
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d018      	beq.n	800615a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d024      	beq.n	8006188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
 8006146:	e01f      	b.n	8006188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
 8006158:	e016      	b.n	8006188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0208 	bic.w	r2, r2, #8
 8006176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	2220      	movs	r2, #32
 800618e:	409a      	lsls	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 808f 	beq.w	80062b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8087 	beq.w	80062b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	2220      	movs	r2, #32
 80061b0:	409a      	lsls	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d136      	bne.n	8006230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0216 	bic.w	r2, r2, #22
 80061d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695a      	ldr	r2, [r3, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <HAL_DMA_IRQHandler+0x1da>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0208 	bic.w	r2, r2, #8
 8006200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006206:	223f      	movs	r2, #63	; 0x3f
 8006208:	409a      	lsls	r2, r3
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006222:	2b00      	cmp	r3, #0
 8006224:	d07e      	beq.n	8006324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
        }
        return;
 800622e:	e079      	b.n	8006324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01d      	beq.n	800627a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10d      	bne.n	8006268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	2b00      	cmp	r3, #0
 8006252:	d031      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	e02c      	b.n	80062b8 <HAL_DMA_IRQHandler+0x2a0>
 800625e:	bf00      	nop
 8006260:	200000ac 	.word	0x200000ac
 8006264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d023      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	4798      	blx	r3
 8006278:	e01e      	b.n	80062b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10f      	bne.n	80062a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0210 	bic.w	r2, r2, #16
 8006296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d032      	beq.n	8006326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d022      	beq.n	8006312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2205      	movs	r2, #5
 80062d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0201 	bic.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d307      	bcc.n	8006300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f2      	bne.n	80062e4 <HAL_DMA_IRQHandler+0x2cc>
 80062fe:	e000      	b.n	8006302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
 8006322:	e000      	b.n	8006326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006324:	bf00      	nop
    }
  }
}
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800633a:	b2db      	uxtb	r3, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	3b10      	subs	r3, #16
 8006358:	4a14      	ldr	r2, [pc, #80]	; (80063ac <DMA_CalcBaseAndBitshift+0x64>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006362:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <DMA_CalcBaseAndBitshift+0x68>)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b03      	cmp	r3, #3
 8006374:	d909      	bls.n	800638a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	659a      	str	r2, [r3, #88]	; 0x58
 8006388:	e007      	b.n	800639a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	aaaaaaab 	.word	0xaaaaaaab
 80063b0:	0800ee38 	.word	0x0800ee38

080063b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d11f      	bne.n	800640e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d856      	bhi.n	8006482 <DMA_CheckFifoParam+0xce>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <DMA_CheckFifoParam+0x28>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	080063ed 	.word	0x080063ed
 80063e8:	08006483 	.word	0x08006483
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d046      	beq.n	8006486 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fc:	e043      	b.n	8006486 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006406:	d140      	bne.n	800648a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640c:	e03d      	b.n	800648a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006416:	d121      	bne.n	800645c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d837      	bhi.n	800648e <DMA_CheckFifoParam+0xda>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <DMA_CheckFifoParam+0x70>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	08006435 	.word	0x08006435
 8006428:	0800643b 	.word	0x0800643b
 800642c:	08006435 	.word	0x08006435
 8006430:	0800644d 	.word	0x0800644d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	e030      	b.n	800649c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d025      	beq.n	8006492 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644a:	e022      	b.n	8006492 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006454:	d11f      	bne.n	8006496 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800645a:	e01c      	b.n	8006496 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d903      	bls.n	800646a <DMA_CheckFifoParam+0xb6>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b03      	cmp	r3, #3
 8006466:	d003      	beq.n	8006470 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006468:	e018      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
      break;
 800646e:	e015      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00e      	beq.n	800649a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      break;
 8006480:	e00b      	b.n	800649a <DMA_CheckFifoParam+0xe6>
      break;
 8006482:	bf00      	nop
 8006484:	e00a      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      break;
 8006486:	bf00      	nop
 8006488:	e008      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      break;
 800648a:	bf00      	nop
 800648c:	e006      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      break;
 800648e:	bf00      	nop
 8006490:	e004      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      break;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      break;   
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <DMA_CheckFifoParam+0xe8>
      break;
 800649a:	bf00      	nop
    }
  } 
  
  return status; 
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop

080064ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	; 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e16b      	b.n	80067a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064c8:	2201      	movs	r2, #1
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4013      	ands	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f040 815a 	bne.w	800679a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d005      	beq.n	80064fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d130      	bne.n	8006560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	2203      	movs	r2, #3
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006534:	2201      	movs	r2, #1
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	43db      	mvns	r3, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4013      	ands	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 0201 	and.w	r2, r3, #1
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b03      	cmp	r3, #3
 800656a:	d017      	beq.n	800659c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	2203      	movs	r2, #3
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d123      	bne.n	80065f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	08da      	lsrs	r2, r3, #3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3208      	adds	r2, #8
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	220f      	movs	r2, #15
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	08da      	lsrs	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3208      	adds	r2, #8
 80065ea:	69b9      	ldr	r1, [r7, #24]
 80065ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	2203      	movs	r2, #3
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f003 0203 	and.w	r2, r3, #3
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80b4 	beq.w	800679a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	4b60      	ldr	r3, [pc, #384]	; (80067b8 <HAL_GPIO_Init+0x30c>)
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	4a5f      	ldr	r2, [pc, #380]	; (80067b8 <HAL_GPIO_Init+0x30c>)
 800663c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006640:	6453      	str	r3, [r2, #68]	; 0x44
 8006642:	4b5d      	ldr	r3, [pc, #372]	; (80067b8 <HAL_GPIO_Init+0x30c>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800664e:	4a5b      	ldr	r2, [pc, #364]	; (80067bc <HAL_GPIO_Init+0x310>)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	3302      	adds	r3, #2
 8006656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	220f      	movs	r2, #15
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a52      	ldr	r2, [pc, #328]	; (80067c0 <HAL_GPIO_Init+0x314>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d02b      	beq.n	80066d2 <HAL_GPIO_Init+0x226>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a51      	ldr	r2, [pc, #324]	; (80067c4 <HAL_GPIO_Init+0x318>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d025      	beq.n	80066ce <HAL_GPIO_Init+0x222>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a50      	ldr	r2, [pc, #320]	; (80067c8 <HAL_GPIO_Init+0x31c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01f      	beq.n	80066ca <HAL_GPIO_Init+0x21e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a4f      	ldr	r2, [pc, #316]	; (80067cc <HAL_GPIO_Init+0x320>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d019      	beq.n	80066c6 <HAL_GPIO_Init+0x21a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a4e      	ldr	r2, [pc, #312]	; (80067d0 <HAL_GPIO_Init+0x324>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_GPIO_Init+0x216>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a4d      	ldr	r2, [pc, #308]	; (80067d4 <HAL_GPIO_Init+0x328>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00d      	beq.n	80066be <HAL_GPIO_Init+0x212>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a4c      	ldr	r2, [pc, #304]	; (80067d8 <HAL_GPIO_Init+0x32c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d007      	beq.n	80066ba <HAL_GPIO_Init+0x20e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a4b      	ldr	r2, [pc, #300]	; (80067dc <HAL_GPIO_Init+0x330>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_GPIO_Init+0x20a>
 80066b2:	2307      	movs	r3, #7
 80066b4:	e00e      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066b6:	2308      	movs	r3, #8
 80066b8:	e00c      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066ba:	2306      	movs	r3, #6
 80066bc:	e00a      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066be:	2305      	movs	r3, #5
 80066c0:	e008      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066c2:	2304      	movs	r3, #4
 80066c4:	e006      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066c6:	2303      	movs	r3, #3
 80066c8:	e004      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e002      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066d2:	2300      	movs	r3, #0
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	f002 0203 	and.w	r2, r2, #3
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	4093      	lsls	r3, r2
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066e4:	4935      	ldr	r1, [pc, #212]	; (80067bc <HAL_GPIO_Init+0x310>)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	3302      	adds	r3, #2
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066f2:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_GPIO_Init+0x334>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	43db      	mvns	r3, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4013      	ands	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006716:	4a32      	ldr	r2, [pc, #200]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800671c:	4b30      	ldr	r3, [pc, #192]	; (80067e0 <HAL_GPIO_Init+0x334>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	43db      	mvns	r3, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4013      	ands	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006740:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	43db      	mvns	r3, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4013      	ands	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_GPIO_Init+0x334>)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	43db      	mvns	r3, r3
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4013      	ands	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006794:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	3301      	adds	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	f67f ae90 	bls.w	80064c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	3724      	adds	r7, #36	; 0x24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40013800 	.word	0x40013800
 80067c0:	40020000 	.word	0x40020000
 80067c4:	40020400 	.word	0x40020400
 80067c8:	40020800 	.word	0x40020800
 80067cc:	40020c00 	.word	0x40020c00
 80067d0:	40021000 	.word	0x40021000
 80067d4:	40021400 	.word	0x40021400
 80067d8:	40021800 	.word	0x40021800
 80067dc:	40021c00 	.word	0x40021c00
 80067e0:	40013c00 	.word	0x40013c00

080067e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	887b      	ldrh	r3, [r7, #2]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e001      	b.n	8006806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
 8006820:	4613      	mov	r3, r2
 8006822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006824:	787b      	ldrb	r3, [r7, #1]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800682a:	887a      	ldrh	r2, [r7, #2]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006830:	e003      	b.n	800683a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006832:	887b      	ldrh	r3, [r7, #2]
 8006834:	041a      	lsls	r2, r3, #16
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	619a      	str	r2, [r3, #24]
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e12b      	b.n	8006ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fe f98a 	bl	8004b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	; 0x24
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068ac:	f003 f8d6 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 80068b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a81      	ldr	r2, [pc, #516]	; (8006abc <HAL_I2C_Init+0x274>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d807      	bhi.n	80068cc <HAL_I2C_Init+0x84>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a80      	ldr	r2, [pc, #512]	; (8006ac0 <HAL_I2C_Init+0x278>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf94      	ite	ls
 80068c4:	2301      	movls	r3, #1
 80068c6:	2300      	movhi	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e006      	b.n	80068da <HAL_I2C_Init+0x92>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a7d      	ldr	r2, [pc, #500]	; (8006ac4 <HAL_I2C_Init+0x27c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bf94      	ite	ls
 80068d4:	2301      	movls	r3, #1
 80068d6:	2300      	movhi	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e0e7      	b.n	8006ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a78      	ldr	r2, [pc, #480]	; (8006ac8 <HAL_I2C_Init+0x280>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	0c9b      	lsrs	r3, r3, #18
 80068ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4a6a      	ldr	r2, [pc, #424]	; (8006abc <HAL_I2C_Init+0x274>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d802      	bhi.n	800691c <HAL_I2C_Init+0xd4>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	3301      	adds	r3, #1
 800691a:	e009      	b.n	8006930 <HAL_I2C_Init+0xe8>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	4a69      	ldr	r2, [pc, #420]	; (8006acc <HAL_I2C_Init+0x284>)
 8006928:	fba2 2303 	umull	r2, r3, r2, r3
 800692c:	099b      	lsrs	r3, r3, #6
 800692e:	3301      	adds	r3, #1
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	430b      	orrs	r3, r1
 8006936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	495c      	ldr	r1, [pc, #368]	; (8006abc <HAL_I2C_Init+0x274>)
 800694c:	428b      	cmp	r3, r1
 800694e:	d819      	bhi.n	8006984 <HAL_I2C_Init+0x13c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1e59      	subs	r1, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	fbb1 f3f3 	udiv	r3, r1, r3
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006964:	400b      	ands	r3, r1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <HAL_I2C_Init+0x138>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1e59      	subs	r1, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fbb1 f3f3 	udiv	r3, r1, r3
 8006978:	3301      	adds	r3, #1
 800697a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697e:	e051      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 8006980:	2304      	movs	r3, #4
 8006982:	e04f      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d111      	bne.n	80069b0 <HAL_I2C_Init+0x168>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1e58      	subs	r0, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6859      	ldr	r1, [r3, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	440b      	add	r3, r1
 800699a:	fbb0 f3f3 	udiv	r3, r0, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	e012      	b.n	80069d6 <HAL_I2C_Init+0x18e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1e58      	subs	r0, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6859      	ldr	r1, [r3, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	0099      	lsls	r1, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069c6:	3301      	adds	r3, #1
 80069c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_Init+0x196>
 80069da:	2301      	movs	r3, #1
 80069dc:	e022      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10e      	bne.n	8006a04 <HAL_I2C_Init+0x1bc>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1e58      	subs	r0, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6859      	ldr	r1, [r3, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	440b      	add	r3, r1
 80069f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f8:	3301      	adds	r3, #1
 80069fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a02:	e00f      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1e58      	subs	r0, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6859      	ldr	r1, [r3, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	0099      	lsls	r1, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	6809      	ldr	r1, [r1, #0]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69da      	ldr	r2, [r3, #28]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6911      	ldr	r1, [r2, #16]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68d2      	ldr	r2, [r2, #12]
 8006a5e:	4311      	orrs	r1, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	000186a0 	.word	0x000186a0
 8006ac0:	001e847f 	.word	0x001e847f
 8006ac4:	003d08ff 	.word	0x003d08ff
 8006ac8:	431bde83 	.word	0x431bde83
 8006acc:	10624dd3 	.word	0x10624dd3

08006ad0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	817b      	strh	r3, [r7, #10]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	813b      	strh	r3, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aea:	f7ff f883 	bl	8005bf4 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	f040 80d9 	bne.w	8006cb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	2319      	movs	r3, #25
 8006b04:	2201      	movs	r2, #1
 8006b06:	496d      	ldr	r1, [pc, #436]	; (8006cbc <HAL_I2C_Mem_Write+0x1ec>)
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f002 f90d 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
 8006b16:	e0cc      	b.n	8006cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <HAL_I2C_Mem_Write+0x56>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e0c5      	b.n	8006cb2 <HAL_I2C_Mem_Write+0x1e2>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d007      	beq.n	8006b4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2221      	movs	r2, #33	; 0x21
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2240      	movs	r2, #64	; 0x40
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a3a      	ldr	r2, [r7, #32]
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a4d      	ldr	r2, [pc, #308]	; (8006cc0 <HAL_I2C_Mem_Write+0x1f0>)
 8006b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b8e:	88f8      	ldrh	r0, [r7, #6]
 8006b90:	893a      	ldrh	r2, [r7, #8]
 8006b92:	8979      	ldrh	r1, [r7, #10]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f001 fe9c 	bl	80088dc <I2C_RequestMemoryWrite>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d052      	beq.n	8006c50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e081      	b.n	8006cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f002 f98e 	bl	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d107      	bne.n	8006bd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e06b      	b.n	8006cb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	781a      	ldrb	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d11b      	bne.n	8006c50 <HAL_I2C_Mem_Write+0x180>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d017      	beq.n	8006c50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1aa      	bne.n	8006bae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f002 f97a 	bl	8008f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00d      	beq.n	8006c84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d107      	bne.n	8006c80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e016      	b.n	8006cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e000      	b.n	8006cb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
  }
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	00100002 	.word	0x00100002
 8006cc0:	ffff0000 	.word	0xffff0000

08006cc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08c      	sub	sp, #48	; 0x30
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	4608      	mov	r0, r1
 8006cce:	4611      	mov	r1, r2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	817b      	strh	r3, [r7, #10]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	813b      	strh	r3, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cde:	f7fe ff89 	bl	8005bf4 <HAL_GetTick>
 8006ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	f040 8208 	bne.w	8007102 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2319      	movs	r3, #25
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	497b      	ldr	r1, [pc, #492]	; (8006ee8 <HAL_I2C_Mem_Read+0x224>)
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f002 f813 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e1fb      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_I2C_Mem_Read+0x56>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e1f4      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d007      	beq.n	8006d40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2222      	movs	r2, #34	; 0x22
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2240      	movs	r2, #64	; 0x40
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a5b      	ldr	r2, [pc, #364]	; (8006eec <HAL_I2C_Mem_Read+0x228>)
 8006d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d82:	88f8      	ldrh	r0, [r7, #6]
 8006d84:	893a      	ldrh	r2, [r7, #8]
 8006d86:	8979      	ldrh	r1, [r7, #10]
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4603      	mov	r3, r0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f001 fe38 	bl	8008a08 <I2C_RequestMemoryRead>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e1b0      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d113      	bne.n	8006dd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006daa:	2300      	movs	r3, #0
 8006dac:	623b      	str	r3, [r7, #32]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e184      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d11b      	bne.n	8006e12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e164      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d11b      	bne.n	8006e52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	e144      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e68:	e138      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	f200 80f1 	bhi.w	8007056 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d123      	bne.n	8006ec4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f002 f8db 	bl	800903c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e139      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ec2:	e10b      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d14e      	bne.n	8006f6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	4906      	ldr	r1, [pc, #24]	; (8006ef0 <HAL_I2C_Mem_Read+0x22c>)
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f001 ff26 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d008      	beq.n	8006ef4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e10e      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
 8006ee6:	bf00      	nop
 8006ee8:	00100002 	.word	0x00100002
 8006eec:	ffff0000 	.word	0xffff0000
 8006ef0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f68:	e0b8      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	2200      	movs	r2, #0
 8006f72:	4966      	ldr	r1, [pc, #408]	; (800710c <HAL_I2C_Mem_Read+0x448>)
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f001 fed7 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0bf      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	2200      	movs	r2, #0
 8006fce:	494f      	ldr	r1, [pc, #316]	; (800710c <HAL_I2C_Mem_Read+0x448>)
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f001 fea9 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e091      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007054:	e042      	b.n	80070dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f001 ffee 	bl	800903c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e04c      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d118      	bne.n	80070dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f aec2 	bne.w	8006e6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	e000      	b.n	8007104 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007102:	2302      	movs	r3, #2
  }
}
 8007104:	4618      	mov	r0, r3
 8007106:	3728      	adds	r7, #40	; 0x28
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	00010004 	.word	0x00010004

08007110 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007130:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b10      	cmp	r3, #16
 800713e:	d003      	beq.n	8007148 <HAL_I2C_EV_IRQHandler+0x38>
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	f040 80c1 	bne.w	80072ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10d      	bne.n	800717e <HAL_I2C_EV_IRQHandler+0x6e>
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007168:	d003      	beq.n	8007172 <HAL_I2C_EV_IRQHandler+0x62>
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007170:	d101      	bne.n	8007176 <HAL_I2C_EV_IRQHandler+0x66>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_I2C_EV_IRQHandler+0x68>
 8007176:	2300      	movs	r3, #0
 8007178:	2b01      	cmp	r3, #1
 800717a:	f000 8132 	beq.w	80073e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00c      	beq.n	80071a2 <HAL_I2C_EV_IRQHandler+0x92>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	0a5b      	lsrs	r3, r3, #9
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d006      	beq.n	80071a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 ffd6 	bl	8009146 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fd83 	bl	8007ca6 <I2C_Master_SB>
 80071a0:	e092      	b.n	80072c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	08db      	lsrs	r3, r3, #3
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	0a5b      	lsrs	r3, r3, #9
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fdf9 	bl	8007db2 <I2C_Master_ADD10>
 80071c0:	e082      	b.n	80072c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	0a5b      	lsrs	r3, r3, #9
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fe13 	bl	8007e06 <I2C_Master_ADDR>
 80071e0:	e072      	b.n	80072c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	089b      	lsrs	r3, r3, #2
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d03b      	beq.n	8007266 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fc:	f000 80f3 	beq.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	09db      	lsrs	r3, r3, #7
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00f      	beq.n	800722c <HAL_I2C_EV_IRQHandler+0x11c>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	0a9b      	lsrs	r3, r3, #10
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <HAL_I2C_EV_IRQHandler+0x11c>
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	089b      	lsrs	r3, r3, #2
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9f3 	bl	8007610 <I2C_MasterTransmit_TXE>
 800722a:	e04d      	b.n	80072c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	089b      	lsrs	r3, r3, #2
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80d6 	beq.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	0a5b      	lsrs	r3, r3, #9
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80cf 	beq.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b21      	cmp	r3, #33	; 0x21
 800724c:	d103      	bne.n	8007256 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa7a 	bl	8007748 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007254:	e0c7      	b.n	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	f040 80c4 	bne.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fae8 	bl	8007834 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007264:	e0bf      	b.n	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007274:	f000 80b7 	beq.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	099b      	lsrs	r3, r3, #6
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00f      	beq.n	80072a4 <HAL_I2C_EV_IRQHandler+0x194>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	0a9b      	lsrs	r3, r3, #10
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d009      	beq.n	80072a4 <HAL_I2C_EV_IRQHandler+0x194>
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fb5d 	bl	800795c <I2C_MasterReceive_RXNE>
 80072a2:	e011      	b.n	80072c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	089b      	lsrs	r3, r3, #2
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 809a 	beq.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	0a5b      	lsrs	r3, r3, #9
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8093 	beq.w	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc06 	bl	8007ad2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072c6:	e08e      	b.n	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80072c8:	e08d      	b.n	80073e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d004      	beq.n	80072dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	e007      	b.n	80072ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d012      	beq.n	800731e <HAL_I2C_EV_IRQHandler+0x20e>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	0a5b      	lsrs	r3, r3, #9
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00c      	beq.n	800731e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007314:	69b9      	ldr	r1, [r7, #24]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 ffc4 	bl	80082a4 <I2C_Slave_ADDR>
 800731c:	e066      	b.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <HAL_I2C_EV_IRQHandler+0x22e>
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fffe 	bl	8008338 <I2C_Slave_STOPF>
 800733c:	e056      	b.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b21      	cmp	r3, #33	; 0x21
 8007342:	d002      	beq.n	800734a <HAL_I2C_EV_IRQHandler+0x23a>
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b29      	cmp	r3, #41	; 0x29
 8007348:	d125      	bne.n	8007396 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	09db      	lsrs	r3, r3, #7
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00f      	beq.n	8007376 <HAL_I2C_EV_IRQHandler+0x266>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	0a9b      	lsrs	r3, r3, #10
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <HAL_I2C_EV_IRQHandler+0x266>
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	089b      	lsrs	r3, r3, #2
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 feda 	bl	8008128 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007374:	e039      	b.n	80073ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	089b      	lsrs	r3, r3, #2
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d033      	beq.n	80073ea <HAL_I2C_EV_IRQHandler+0x2da>
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	0a5b      	lsrs	r3, r3, #9
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02d      	beq.n	80073ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 ff07 	bl	80081a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007394:	e029      	b.n	80073ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	099b      	lsrs	r3, r3, #6
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00f      	beq.n	80073c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	0a9b      	lsrs	r3, r3, #10
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	089b      	lsrs	r3, r3, #2
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 ff12 	bl	80081e4 <I2C_SlaveReceive_RXNE>
 80073c0:	e014      	b.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	089b      	lsrs	r3, r3, #2
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00e      	beq.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	0a5b      	lsrs	r3, r3, #9
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 ff40 	bl	8008260 <I2C_SlaveReceive_BTF>
 80073e0:	e004      	b.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80073e2:	bf00      	nop
 80073e4:	e002      	b.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073e6:	bf00      	nop
 80073e8:	e000      	b.n	80073ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b08a      	sub	sp, #40	; 0x28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800740a:	2300      	movs	r3, #0
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007414:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <HAL_I2C_ER_IRQHandler+0x4e>
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	0a1b      	lsrs	r3, r3, #8
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d008      	beq.n	8007440 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800743e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	0a5b      	lsrs	r3, r3, #9
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00e      	beq.n	800746a <HAL_I2C_ER_IRQHandler+0x78>
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	f043 0302 	orr.w	r3, r3, #2
 800745e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007468:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	0a9b      	lsrs	r3, r3, #10
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d03f      	beq.n	80074f6 <HAL_I2C_ER_IRQHandler+0x104>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d039      	beq.n	80074f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007482:	7efb      	ldrb	r3, [r7, #27]
 8007484:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007494:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800749c:	7ebb      	ldrb	r3, [r7, #26]
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d112      	bne.n	80074c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10f      	bne.n	80074c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	2b21      	cmp	r3, #33	; 0x21
 80074ac:	d008      	beq.n	80074c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80074ae:	7cfb      	ldrb	r3, [r7, #19]
 80074b0:	2b29      	cmp	r3, #41	; 0x29
 80074b2:	d005      	beq.n	80074c0 <HAL_I2C_ER_IRQHandler+0xce>
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	2b28      	cmp	r3, #40	; 0x28
 80074b8:	d106      	bne.n	80074c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b21      	cmp	r3, #33	; 0x21
 80074be:	d103      	bne.n	80074c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f869 	bl	8008598 <I2C_Slave_AF>
 80074c6:	e016      	b.n	80074f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	f043 0304 	orr.w	r3, r3, #4
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80074da:	7efb      	ldrb	r3, [r7, #27]
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d002      	beq.n	80074e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80074e0:	7efb      	ldrb	r3, [r7, #27]
 80074e2:	2b40      	cmp	r3, #64	; 0x40
 80074e4:	d107      	bne.n	80074f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	0adb      	lsrs	r3, r3, #11
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00e      	beq.n	8007520 <HAL_I2C_ER_IRQHandler+0x12e>
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	0a1b      	lsrs	r3, r3, #8
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800751e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 f8a0 	bl	8008678 <I2C_ITError>
  }
}
 8007538:	bf00      	nop
 800753a:	3728      	adds	r7, #40	; 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
 800759c:	4613      	mov	r3, r2
 800759e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007626:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d150      	bne.n	80076d8 <I2C_MasterTransmit_TXE+0xc8>
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b21      	cmp	r3, #33	; 0x21
 800763a:	d14d      	bne.n	80076d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b08      	cmp	r3, #8
 8007640:	d01d      	beq.n	800767e <I2C_MasterTransmit_TXE+0x6e>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b20      	cmp	r3, #32
 8007646:	d01a      	beq.n	800767e <I2C_MasterTransmit_TXE+0x6e>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800764e:	d016      	beq.n	800767e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800765e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2211      	movs	r2, #17
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ff62 	bl	8007540 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800767c:	e060      	b.n	8007740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800768c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d107      	bne.n	80076c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff ff7d 	bl	80075c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076c6:	e03b      	b.n	8007740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ff35 	bl	8007540 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076d6:	e033      	b.n	8007740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	2b21      	cmp	r3, #33	; 0x21
 80076dc:	d005      	beq.n	80076ea <I2C_MasterTransmit_TXE+0xda>
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	d12d      	bne.n	8007740 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b22      	cmp	r3, #34	; 0x22
 80076e8:	d12a      	bne.n	8007740 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d108      	bne.n	8007706 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007702:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007704:	e01c      	b.n	8007740 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d103      	bne.n	800771a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f88e 	bl	8007834 <I2C_MemoryTransmit_TXE_BTF>
}
 8007718:	e012      	b.n	8007740 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800773e:	e7ff      	b.n	8007740 <I2C_MasterTransmit_TXE+0x130>
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b21      	cmp	r3, #33	; 0x21
 8007760:	d164      	bne.n	800782c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d012      	beq.n	8007792 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007790:	e04c      	b.n	800782c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b08      	cmp	r3, #8
 8007796:	d01d      	beq.n	80077d4 <I2C_MasterTransmit_BTF+0x8c>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b20      	cmp	r3, #32
 800779c:	d01a      	beq.n	80077d4 <I2C_MasterTransmit_BTF+0x8c>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077a4:	d016      	beq.n	80077d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2211      	movs	r2, #17
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff feb7 	bl	8007540 <HAL_I2C_MasterTxCpltCallback>
}
 80077d2:	e02b      	b.n	800782c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b40      	cmp	r3, #64	; 0x40
 800780c:	d107      	bne.n	800781e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fed2 	bl	80075c0 <HAL_I2C_MemTxCpltCallback>
}
 800781c:	e006      	b.n	800782c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fe8a 	bl	8007540 <HAL_I2C_MasterTxCpltCallback>
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007842:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	2b00      	cmp	r3, #0
 800784a:	d11d      	bne.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10b      	bne.n	800786c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007858:	b2da      	uxtb	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	1c9a      	adds	r2, r3, #2
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800786a:	e073      	b.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007870:	b29b      	uxth	r3, r3
 8007872:	121b      	asrs	r3, r3, #8
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007886:	e065      	b.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	2b01      	cmp	r3, #1
 800788e:	d10b      	bne.n	80078a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007894:	b2da      	uxtb	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078a6:	e055      	b.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d151      	bne.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b22      	cmp	r3, #34	; 0x22
 80078b4:	d10d      	bne.n	80078d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078d0:	e040      	b.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d015      	beq.n	8007908 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b21      	cmp	r3, #33	; 0x21
 80078e0:	d112      	bne.n	8007908 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007906:	e025      	b.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d120      	bne.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b21      	cmp	r3, #33	; 0x21
 8007916:	d11d      	bne.n	8007954 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007926:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007936:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe36 	bl	80075c0 <HAL_I2C_MemTxCpltCallback>
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b22      	cmp	r3, #34	; 0x22
 800796e:	f040 80ac 	bne.w	8007aca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b03      	cmp	r3, #3
 800797e:	d921      	bls.n	80079c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	f040 808c 	bne.w	8007aca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80079c2:	e082      	b.n	8007aca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d075      	beq.n	8007ab8 <I2C_MasterReceive_RXNE+0x15c>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d002      	beq.n	80079d8 <I2C_MasterReceive_RXNE+0x7c>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d16f      	bne.n	8007ab8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fafd 	bl	8008fd8 <I2C_WaitOnSTOPRequestThroughIT>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d142      	bne.n	8007a6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d10a      	bne.n	8007a54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fdc1 	bl	80075d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a52:	e03a      	b.n	8007aca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2212      	movs	r2, #18
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fd76 	bl	8007554 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a68:	e02f      	b.n	8007aca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fd99 	bl	80075e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ab6:	e008      	b.n	8007aca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac6:	605a      	str	r2, [r3, #4]
}
 8007ac8:	e7ff      	b.n	8007aca <I2C_MasterReceive_RXNE+0x16e>
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d11b      	bne.n	8007b22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007b20:	e0bd      	b.n	8007c9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d129      	bne.n	8007b80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d00a      	beq.n	8007b58 <I2C_MasterReceive_BTF+0x86>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d007      	beq.n	8007b58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b7e:	e08e      	b.n	8007c9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d176      	bne.n	8007c78 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d002      	beq.n	8007b96 <I2C_MasterReceive_BTF+0xc4>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	d108      	bne.n	8007ba8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e019      	b.n	8007bdc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d002      	beq.n	8007bb4 <I2C_MasterReceive_BTF+0xe2>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d108      	bne.n	8007bc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e00a      	b.n	8007bdc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d007      	beq.n	8007bdc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d10a      	bne.n	8007c62 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff fcba 	bl	80075d4 <HAL_I2C_MemRxCpltCallback>
}
 8007c60:	e01d      	b.n	8007c9e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2212      	movs	r2, #18
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fc6f 	bl	8007554 <HAL_I2C_MasterRxCpltCallback>
}
 8007c76:	e012      	b.n	8007c9e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d117      	bne.n	8007cea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007cd4:	e067      	b.n	8007da6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	611a      	str	r2, [r3, #16]
}
 8007ce8:	e05d      	b.n	8007da6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf2:	d133      	bne.n	8007d5c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b21      	cmp	r3, #33	; 0x21
 8007cfe:	d109      	bne.n	8007d14 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d10:	611a      	str	r2, [r3, #16]
 8007d12:	e008      	b.n	8007d26 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	f043 0301 	orr.w	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <I2C_Master_SB+0x92>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d108      	bne.n	8007d4a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d032      	beq.n	8007da6 <I2C_Master_SB+0x100>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d02d      	beq.n	8007da6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d58:	605a      	str	r2, [r3, #4]
}
 8007d5a:	e024      	b.n	8007da6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10e      	bne.n	8007d82 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	11db      	asrs	r3, r3, #7
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0306 	and.w	r3, r3, #6
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f063 030f 	orn	r3, r3, #15
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	611a      	str	r2, [r3, #16]
}
 8007d80:	e011      	b.n	8007da6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d10d      	bne.n	8007da6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	11db      	asrs	r3, r3, #7
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0306 	and.w	r3, r3, #6
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f063 030e 	orn	r3, r3, #14
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	611a      	str	r2, [r3, #16]
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <I2C_Master_ADD10+0x26>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d108      	bne.n	8007dea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00c      	beq.n	8007dfa <I2C_Master_ADD10+0x48>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df8:	605a      	str	r2, [r3, #4]
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b091      	sub	sp, #68	; 0x44
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b22      	cmp	r3, #34	; 0x22
 8007e2e:	f040 8169 	bne.w	8008104 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10f      	bne.n	8007e5a <I2C_Master_ADDR+0x54>
 8007e3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d10b      	bne.n	8007e5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e42:	2300      	movs	r3, #0
 8007e44:	633b      	str	r3, [r7, #48]	; 0x30
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	633b      	str	r3, [r7, #48]	; 0x30
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	e160      	b.n	800811c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d11d      	bne.n	8007e9e <I2C_Master_ADDR+0x98>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e6a:	d118      	bne.n	8007e9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	651a      	str	r2, [r3, #80]	; 0x50
 8007e9c:	e13e      	b.n	800811c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d113      	bne.n	8007ed0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e115      	b.n	80080fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f040 808a 	bne.w	8007ff0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ee2:	d137      	bne.n	8007f54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f02:	d113      	bne.n	8007f2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f14:	2300      	movs	r3, #0
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	e0e7      	b.n	80080fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	623b      	str	r3, [r7, #32]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	623b      	str	r3, [r7, #32]
 8007f40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	e0d3      	b.n	80080fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d02e      	beq.n	8007fb8 <I2C_Master_ADDR+0x1b2>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d02b      	beq.n	8007fb8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f62:	2b12      	cmp	r3, #18
 8007f64:	d102      	bne.n	8007f6c <I2C_Master_ADDR+0x166>
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d125      	bne.n	8007fb8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d00e      	beq.n	8007f90 <I2C_Master_ADDR+0x18a>
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d00b      	beq.n	8007f90 <I2C_Master_ADDR+0x18a>
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d008      	beq.n	8007f90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e007      	b.n	8007fa0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	e0a1      	b.n	80080fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fc6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e085      	b.n	80080fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d14d      	bne.n	8008096 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d016      	beq.n	800802e <I2C_Master_ADDR+0x228>
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	2b02      	cmp	r3, #2
 8008004:	d013      	beq.n	800802e <I2C_Master_ADDR+0x228>
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	2b10      	cmp	r3, #16
 800800a:	d010      	beq.n	800802e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e007      	b.n	800803e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800803c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800804c:	d117      	bne.n	800807e <I2C_Master_ADDR+0x278>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008054:	d00b      	beq.n	800806e <I2C_Master_ADDR+0x268>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2b01      	cmp	r3, #1
 800805a:	d008      	beq.n	800806e <I2C_Master_ADDR+0x268>
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	2b08      	cmp	r3, #8
 8008060:	d005      	beq.n	800806e <I2C_Master_ADDR+0x268>
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	2b10      	cmp	r3, #16
 8008066:	d002      	beq.n	800806e <I2C_Master_ADDR+0x268>
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	2b20      	cmp	r3, #32
 800806c:	d107      	bne.n	800807e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800807c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	e032      	b.n	80080fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b4:	d117      	bne.n	80080e6 <I2C_Master_ADDR+0x2e0>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080bc:	d00b      	beq.n	80080d6 <I2C_Master_ADDR+0x2d0>
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d008      	beq.n	80080d6 <I2C_Master_ADDR+0x2d0>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	2b08      	cmp	r3, #8
 80080c8:	d005      	beq.n	80080d6 <I2C_Master_ADDR+0x2d0>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d002      	beq.n	80080d6 <I2C_Master_ADDR+0x2d0>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d107      	bne.n	80080e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008102:	e00b      	b.n	800811c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
}
 800811a:	e7ff      	b.n	800811c <I2C_Master_ADDR+0x316>
 800811c:	bf00      	nop
 800811e:	3744      	adds	r7, #68	; 0x44
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008136:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29b      	uxth	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d02b      	beq.n	800819a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	781a      	ldrb	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d114      	bne.n	800819a <I2C_SlaveTransmit_TXE+0x72>
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	2b29      	cmp	r3, #41	; 0x29
 8008174:	d111      	bne.n	800819a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008184:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2221      	movs	r2, #33	; 0x21
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2228      	movs	r2, #40	; 0x28
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff f9e7 	bl	8007568 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d011      	beq.n	80081d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d02c      	beq.n	8008258 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821a:	b29b      	uxth	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d114      	bne.n	8008258 <I2C_SlaveReceive_RXNE+0x74>
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b2a      	cmp	r3, #42	; 0x2a
 8008232:	d111      	bne.n	8008258 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008242:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2222      	movs	r2, #34	; 0x22
 8008248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2228      	movs	r2, #40	; 0x28
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff f992 	bl	800757c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d012      	beq.n	8008298 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828e:	b29b      	uxth	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082be:	2b28      	cmp	r3, #40	; 0x28
 80082c0:	d127      	bne.n	8008312 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80082de:	2301      	movs	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	09db      	lsrs	r3, r3, #7
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	81bb      	strh	r3, [r7, #12]
 80082f4:	e002      	b.n	80082fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008304:	89ba      	ldrh	r2, [r7, #12]
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff f940 	bl	8007590 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008310:	e00e      	b.n	8008330 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008312:	2300      	movs	r3, #0
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	60bb      	str	r3, [r7, #8]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	60bb      	str	r3, [r7, #8]
 8008326:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008346:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008356:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008358:	2300      	movs	r3, #0
 800835a:	60bb      	str	r3, [r7, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	60bb      	str	r3, [r7, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0201 	orr.w	r2, r2, #1
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008384:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008394:	d172      	bne.n	800847c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	2b22      	cmp	r3, #34	; 0x22
 800839a:	d002      	beq.n	80083a2 <I2C_Slave_STOPF+0x6a>
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	2b2a      	cmp	r3, #42	; 0x2a
 80083a0:	d135      	bne.n	800840e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f043 0204 	orr.w	r2, r3, #4
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd ffa6 	bl	800632c <HAL_DMA_GetState>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d049      	beq.n	800847a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	4a69      	ldr	r2, [pc, #420]	; (8008590 <I2C_Slave_STOPF+0x258>)
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd fdee 	bl	8005fd4 <HAL_DMA_Abort_IT>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d03d      	beq.n	800847a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800840c:	e035      	b.n	800847a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	f043 0204 	orr.w	r2, r3, #4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008440:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd ff70 	bl	800632c <HAL_DMA_GetState>
 800844c:	4603      	mov	r3, r0
 800844e:	2b01      	cmp	r3, #1
 8008450:	d014      	beq.n	800847c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	4a4e      	ldr	r2, [pc, #312]	; (8008590 <I2C_Slave_STOPF+0x258>)
 8008458:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	4618      	mov	r0, r3
 8008460:	f7fd fdb8 	bl	8005fd4 <HAL_DMA_Abort_IT>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	e000      	b.n	800847c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800847a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d03e      	beq.n	8008504 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d112      	bne.n	80084ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d112      	bne.n	80084ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	f043 0204 	orr.w	r2, r3, #4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f8b3 	bl	8008678 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008512:	e039      	b.n	8008588 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b2a      	cmp	r3, #42	; 0x2a
 8008518:	d109      	bne.n	800852e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2228      	movs	r2, #40	; 0x28
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff f827 	bl	800757c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b28      	cmp	r3, #40	; 0x28
 8008538:	d111      	bne.n	800855e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a15      	ldr	r2, [pc, #84]	; (8008594 <I2C_Slave_STOPF+0x25c>)
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff f828 	bl	80075ac <HAL_I2C_ListenCpltCallback>
}
 800855c:	e014      	b.n	8008588 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	2b22      	cmp	r3, #34	; 0x22
 8008564:	d002      	beq.n	800856c <I2C_Slave_STOPF+0x234>
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b22      	cmp	r3, #34	; 0x22
 800856a:	d10d      	bne.n	8008588 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe fffa 	bl	800757c <HAL_I2C_SlaveRxCpltCallback>
}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	08008bd9 	.word	0x08008bd9
 8008594:	ffff0000 	.word	0xffff0000

08008598 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d002      	beq.n	80085ba <I2C_Slave_AF+0x22>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d129      	bne.n	800860e <I2C_Slave_AF+0x76>
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	2b28      	cmp	r3, #40	; 0x28
 80085be:	d126      	bne.n	800860e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a2c      	ldr	r2, [pc, #176]	; (8008674 <I2C_Slave_AF+0xdc>)
 80085c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fe ffd0 	bl	80075ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800860c:	e02e      	b.n	800866c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b21      	cmp	r3, #33	; 0x21
 8008612:	d126      	bne.n	8008662 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a17      	ldr	r2, [pc, #92]	; (8008674 <I2C_Slave_AF+0xdc>)
 8008618:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2221      	movs	r2, #33	; 0x21
 800861e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800863e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008648:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008658:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fe ff84 	bl	8007568 <HAL_I2C_SlaveTxCpltCallback>
}
 8008660:	e004      	b.n	800866c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800866a:	615a      	str	r2, [r3, #20]
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	ffff0000 	.word	0xffff0000

08008678 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008686:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800868e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	2b10      	cmp	r3, #16
 8008694:	d002      	beq.n	800869c <I2C_ITError+0x24>
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d10a      	bne.n	80086b2 <I2C_ITError+0x3a>
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b22      	cmp	r3, #34	; 0x22
 80086a0:	d107      	bne.n	80086b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086b8:	2b28      	cmp	r3, #40	; 0x28
 80086ba:	d107      	bne.n	80086cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2228      	movs	r2, #40	; 0x28
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086ca:	e015      	b.n	80086f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086da:	d00a      	beq.n	80086f2 <I2C_ITError+0x7a>
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b60      	cmp	r3, #96	; 0x60
 80086e0:	d007      	beq.n	80086f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008706:	d162      	bne.n	80087ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008716:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b01      	cmp	r3, #1
 8008724:	d020      	beq.n	8008768 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	4a6a      	ldr	r2, [pc, #424]	; (80088d4 <I2C_ITError+0x25c>)
 800872c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fc4e 	bl	8005fd4 <HAL_DMA_Abort_IT>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8089 	beq.w	8008852 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008762:	4610      	mov	r0, r2
 8008764:	4798      	blx	r3
 8008766:	e074      	b.n	8008852 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	4a59      	ldr	r2, [pc, #356]	; (80088d4 <I2C_ITError+0x25c>)
 800876e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd fc2d 	bl	8005fd4 <HAL_DMA_Abort_IT>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d068      	beq.n	8008852 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d10b      	bne.n	80087a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	e041      	b.n	8008852 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b60      	cmp	r3, #96	; 0x60
 80087d8:	d125      	bne.n	8008826 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d10b      	bne.n	800880e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0201 	bic.w	r2, r2, #1
 800881c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fe feec 	bl	80075fc <HAL_I2C_AbortCpltCallback>
 8008824:	e015      	b.n	8008852 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d10b      	bne.n	800884c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691a      	ldr	r2, [r3, #16]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7fe fecb 	bl	80075e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10e      	bne.n	8008880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008868:	2b00      	cmp	r3, #0
 800886a:	d109      	bne.n	8008880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800888e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008896:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d113      	bne.n	80088cc <I2C_ITError+0x254>
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b28      	cmp	r3, #40	; 0x28
 80088a8:	d110      	bne.n	80088cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <I2C_ITError+0x260>)
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fe fe70 	bl	80075ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	08008bd9 	.word	0x08008bd9
 80088d8:	ffff0000 	.word	0xffff0000

080088dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	4608      	mov	r0, r1
 80088e6:	4611      	mov	r1, r2
 80088e8:	461a      	mov	r2, r3
 80088ea:	4603      	mov	r3, r0
 80088ec:	817b      	strh	r3, [r7, #10]
 80088ee:	460b      	mov	r3, r1
 80088f0:	813b      	strh	r3, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	2200      	movs	r2, #0
 800890e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fa08 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00d      	beq.n	800893a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800892c:	d103      	bne.n	8008936 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e05f      	b.n	80089fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800893a:	897b      	ldrh	r3, [r7, #10]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	492d      	ldr	r1, [pc, #180]	; (8008a04 <I2C_RequestMemoryWrite+0x128>)
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 fa40 	bl	8008dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e04c      	b.n	80089fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008978:	6a39      	ldr	r1, [r7, #32]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 faaa 	bl	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00d      	beq.n	80089a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	2b04      	cmp	r3, #4
 800898c:	d107      	bne.n	800899e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800899c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e02b      	b.n	80089fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d105      	bne.n	80089b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089a8:	893b      	ldrh	r3, [r7, #8]
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	611a      	str	r2, [r3, #16]
 80089b2:	e021      	b.n	80089f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80089b4:	893b      	ldrh	r3, [r7, #8]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c4:	6a39      	ldr	r1, [r7, #32]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fa84 	bl	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00d      	beq.n	80089ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d107      	bne.n	80089ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e005      	b.n	80089fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089ee:	893b      	ldrh	r3, [r7, #8]
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	00010002 	.word	0x00010002

08008a08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	817b      	strh	r3, [r7, #10]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	813b      	strh	r3, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f96a 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00d      	beq.n	8008a76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a68:	d103      	bne.n	8008a72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e0aa      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a76:	897b      	ldrh	r3, [r7, #10]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	6a3a      	ldr	r2, [r7, #32]
 8008a8a:	4952      	ldr	r1, [pc, #328]	; (8008bd4 <I2C_RequestMemoryRead+0x1cc>)
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f9a2 	bl	8008dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e097      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab4:	6a39      	ldr	r1, [r7, #32]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fa0c 	bl	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00d      	beq.n	8008ade <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d107      	bne.n	8008ada <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e076      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d105      	bne.n	8008af0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ae4:	893b      	ldrh	r3, [r7, #8]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	611a      	str	r2, [r3, #16]
 8008aee:	e021      	b.n	8008b34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008af0:	893b      	ldrh	r3, [r7, #8]
 8008af2:	0a1b      	lsrs	r3, r3, #8
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b00:	6a39      	ldr	r1, [r7, #32]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f9e6 	bl	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00d      	beq.n	8008b2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d107      	bne.n	8008b26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e050      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b2a:	893b      	ldrh	r3, [r7, #8]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b36:	6a39      	ldr	r1, [r7, #32]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f9cb 	bl	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00d      	beq.n	8008b60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d107      	bne.n	8008b5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e035      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f8d3 	bl	8008d28 <I2C_WaitOnFlagUntilTimeout>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00d      	beq.n	8008ba4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b96:	d103      	bne.n	8008ba0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e013      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ba4:	897b      	ldrh	r3, [r7, #10]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f043 0301 	orr.w	r3, r3, #1
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	4906      	ldr	r1, [pc, #24]	; (8008bd4 <I2C_RequestMemoryRead+0x1cc>)
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f90b 	bl	8008dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e000      	b.n	8008bcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	00010002 	.word	0x00010002

08008bd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008bf2:	4b4b      	ldr	r3, [pc, #300]	; (8008d20 <I2C_DMAAbort+0x148>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	08db      	lsrs	r3, r3, #3
 8008bf8:	4a4a      	ldr	r2, [pc, #296]	; (8008d24 <I2C_DMAAbort+0x14c>)
 8008bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfe:	0a1a      	lsrs	r2, r3, #8
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	00da      	lsls	r2, r3, #3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	f043 0220 	orr.w	r2, r3, #32
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008c1e:	e00a      	b.n	8008c36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d0ea      	beq.n	8008c0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	2200      	movs	r2, #0
 8008c44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	2200      	movs	r2, #0
 8008c54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c78:	2200      	movs	r2, #0
 8008c7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	2200      	movs	r2, #0
 8008c8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b60      	cmp	r3, #96	; 0x60
 8008ca6:	d10e      	bne.n	8008cc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008cbe:	6978      	ldr	r0, [r7, #20]
 8008cc0:	f7fe fc9c 	bl	80075fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cc4:	e027      	b.n	8008d16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cc6:	7cfb      	ldrb	r3, [r7, #19]
 8008cc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ccc:	2b28      	cmp	r3, #40	; 0x28
 8008cce:	d117      	bne.n	8008d00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2228      	movs	r2, #40	; 0x28
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008cfe:	e007      	b.n	8008d10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008d10:	6978      	ldr	r0, [r7, #20]
 8008d12:	f7fe fc69 	bl	80075e8 <HAL_I2C_ErrorCallback>
}
 8008d16:	bf00      	nop
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	200000ac 	.word	0x200000ac
 8008d24:	14f8b589 	.word	0x14f8b589

08008d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	4613      	mov	r3, r2
 8008d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d38:	e025      	b.n	8008d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d40:	d021      	beq.n	8008d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d42:	f7fc ff57 	bl	8005bf4 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d302      	bcc.n	8008d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d116      	bne.n	8008d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	f043 0220 	orr.w	r2, r3, #32
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e023      	b.n	8008dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10d      	bne.n	8008dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	43da      	mvns	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	e00c      	b.n	8008dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	43da      	mvns	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4013      	ands	r3, r2
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bf0c      	ite	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	2300      	movne	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d0b6      	beq.n	8008d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	607a      	str	r2, [r7, #4]
 8008de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008de4:	e051      	b.n	8008e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df4:	d123      	bne.n	8008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e046      	b.n	8008ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e44:	d021      	beq.n	8008e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e46:	f7fc fed5 	bl	8005bf4 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d302      	bcc.n	8008e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d116      	bne.n	8008e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	f043 0220 	orr.w	r2, r3, #32
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e020      	b.n	8008ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	0c1b      	lsrs	r3, r3, #16
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d10c      	bne.n	8008eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	43da      	mvns	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bf14      	ite	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	2300      	moveq	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	e00b      	b.n	8008ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	43da      	mvns	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d18d      	bne.n	8008de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ee0:	e02d      	b.n	8008f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f900 	bl	80090e8 <I2C_IsAcknowledgeFailed>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e02d      	b.n	8008f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef8:	d021      	beq.n	8008f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efa:	f7fc fe7b 	bl	8005bf4 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d116      	bne.n	8008f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	f043 0220 	orr.w	r2, r3, #32
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e007      	b.n	8008f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f48:	2b80      	cmp	r3, #128	; 0x80
 8008f4a:	d1ca      	bne.n	8008ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f62:	e02d      	b.n	8008fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f8bf 	bl	80090e8 <I2C_IsAcknowledgeFailed>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e02d      	b.n	8008fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d021      	beq.n	8008fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f7c:	f7fc fe3a 	bl	8005bf4 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d302      	bcc.n	8008f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d116      	bne.n	8008fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	f043 0220 	orr.w	r2, r3, #32
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e007      	b.n	8008fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d1ca      	bne.n	8008f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fe4:	4b13      	ldr	r3, [pc, #76]	; (8009034 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	4a13      	ldr	r2, [pc, #76]	; (8009038 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008fec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff0:	0a1a      	lsrs	r2, r3, #8
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d107      	bne.n	8009016 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	f043 0220 	orr.w	r2, r3, #32
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e008      	b.n	8009028 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009024:	d0e9      	beq.n	8008ffa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	200000ac 	.word	0x200000ac
 8009038:	14f8b589 	.word	0x14f8b589

0800903c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009048:	e042      	b.n	80090d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b10      	cmp	r3, #16
 8009056:	d119      	bne.n	800908c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0210 	mvn.w	r2, #16
 8009060:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e029      	b.n	80090e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800908c:	f7fc fdb2 	bl	8005bf4 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	429a      	cmp	r2, r3
 800909a:	d302      	bcc.n	80090a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d116      	bne.n	80090d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	f043 0220 	orr.w	r2, r3, #32
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e007      	b.n	80090e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d1b5      	bne.n	800904a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fe:	d11b      	bne.n	8009138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	f043 0204 	orr.w	r2, r3, #4
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009156:	d103      	bne.n	8009160 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800915e:	e007      	b.n	8009170 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009168:	d102      	bne.n	8009170 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2208      	movs	r2, #8
 800916e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e267      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d075      	beq.n	8009286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800919a:	4b88      	ldr	r3, [pc, #544]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 030c 	and.w	r3, r3, #12
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d00c      	beq.n	80091c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091a6:	4b85      	ldr	r3, [pc, #532]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ae:	2b08      	cmp	r3, #8
 80091b0:	d112      	bne.n	80091d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091b2:	4b82      	ldr	r3, [pc, #520]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091be:	d10b      	bne.n	80091d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091c0:	4b7e      	ldr	r3, [pc, #504]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d05b      	beq.n	8009284 <HAL_RCC_OscConfig+0x108>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d157      	bne.n	8009284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e242      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e0:	d106      	bne.n	80091f0 <HAL_RCC_OscConfig+0x74>
 80091e2:	4b76      	ldr	r3, [pc, #472]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a75      	ldr	r2, [pc, #468]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	e01d      	b.n	800922c <HAL_RCC_OscConfig+0xb0>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f8:	d10c      	bne.n	8009214 <HAL_RCC_OscConfig+0x98>
 80091fa:	4b70      	ldr	r3, [pc, #448]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a6f      	ldr	r2, [pc, #444]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	4b6d      	ldr	r3, [pc, #436]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a6c      	ldr	r2, [pc, #432]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800920c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	e00b      	b.n	800922c <HAL_RCC_OscConfig+0xb0>
 8009214:	4b69      	ldr	r3, [pc, #420]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a68      	ldr	r2, [pc, #416]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800921a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	4b66      	ldr	r3, [pc, #408]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a65      	ldr	r2, [pc, #404]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800922a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d013      	beq.n	800925c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009234:	f7fc fcde 	bl	8005bf4 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800923c:	f7fc fcda 	bl	8005bf4 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b64      	cmp	r3, #100	; 0x64
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e207      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800924e:	4b5b      	ldr	r3, [pc, #364]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0xc0>
 800925a:	e014      	b.n	8009286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800925c:	f7fc fcca 	bl	8005bf4 <HAL_GetTick>
 8009260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009262:	e008      	b.n	8009276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009264:	f7fc fcc6 	bl	8005bf4 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b64      	cmp	r3, #100	; 0x64
 8009270:	d901      	bls.n	8009276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e1f3      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009276:	4b51      	ldr	r3, [pc, #324]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <HAL_RCC_OscConfig+0xe8>
 8009282:	e000      	b.n	8009286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d063      	beq.n	800935a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009292:	4b4a      	ldr	r3, [pc, #296]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f003 030c 	and.w	r3, r3, #12
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800929e:	4b47      	ldr	r3, [pc, #284]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d11c      	bne.n	80092e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092aa:	4b44      	ldr	r3, [pc, #272]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d116      	bne.n	80092e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <HAL_RCC_OscConfig+0x152>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d001      	beq.n	80092ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e1c7      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ce:	4b3b      	ldr	r3, [pc, #236]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4937      	ldr	r1, [pc, #220]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092e2:	e03a      	b.n	800935a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d020      	beq.n	800932e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092ec:	4b34      	ldr	r3, [pc, #208]	; (80093c0 <HAL_RCC_OscConfig+0x244>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f2:	f7fc fc7f 	bl	8005bf4 <HAL_GetTick>
 80092f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092fa:	f7fc fc7b 	bl	8005bf4 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e1a8      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800930c:	4b2b      	ldr	r3, [pc, #172]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f0      	beq.n	80092fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009318:	4b28      	ldr	r3, [pc, #160]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	4925      	ldr	r1, [pc, #148]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009328:	4313      	orrs	r3, r2
 800932a:	600b      	str	r3, [r1, #0]
 800932c:	e015      	b.n	800935a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800932e:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <HAL_RCC_OscConfig+0x244>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009334:	f7fc fc5e 	bl	8005bf4 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800933a:	e008      	b.n	800934e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800933c:	f7fc fc5a 	bl	8005bf4 <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e187      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800934e:	4b1b      	ldr	r3, [pc, #108]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f0      	bne.n	800933c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d036      	beq.n	80093d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d016      	beq.n	800939c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <HAL_RCC_OscConfig+0x248>)
 8009370:	2201      	movs	r2, #1
 8009372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009374:	f7fc fc3e 	bl	8005bf4 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800937c:	f7fc fc3a 	bl	8005bf4 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e167      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800938e:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x200>
 800939a:	e01b      	b.n	80093d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800939c:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <HAL_RCC_OscConfig+0x248>)
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093a2:	f7fc fc27 	bl	8005bf4 <HAL_GetTick>
 80093a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093a8:	e00e      	b.n	80093c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093aa:	f7fc fc23 	bl	8005bf4 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d907      	bls.n	80093c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e150      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
 80093bc:	40023800 	.word	0x40023800
 80093c0:	42470000 	.word	0x42470000
 80093c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093c8:	4b88      	ldr	r3, [pc, #544]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1ea      	bne.n	80093aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8097 	beq.w	8009510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093e6:	4b81      	ldr	r3, [pc, #516]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10f      	bne.n	8009412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093f2:	2300      	movs	r3, #0
 80093f4:	60bb      	str	r3, [r7, #8]
 80093f6:	4b7d      	ldr	r3, [pc, #500]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	4a7c      	ldr	r2, [pc, #496]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009400:	6413      	str	r3, [r2, #64]	; 0x40
 8009402:	4b7a      	ldr	r3, [pc, #488]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800940a:	60bb      	str	r3, [r7, #8]
 800940c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800940e:	2301      	movs	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009412:	4b77      	ldr	r3, [pc, #476]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800941a:	2b00      	cmp	r3, #0
 800941c:	d118      	bne.n	8009450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800941e:	4b74      	ldr	r3, [pc, #464]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a73      	ldr	r2, [pc, #460]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800942a:	f7fc fbe3 	bl	8005bf4 <HAL_GetTick>
 800942e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009430:	e008      	b.n	8009444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009432:	f7fc fbdf 	bl	8005bf4 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e10c      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009444:	4b6a      	ldr	r3, [pc, #424]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0f0      	beq.n	8009432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d106      	bne.n	8009466 <HAL_RCC_OscConfig+0x2ea>
 8009458:	4b64      	ldr	r3, [pc, #400]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	4a63      	ldr	r2, [pc, #396]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	6713      	str	r3, [r2, #112]	; 0x70
 8009464:	e01c      	b.n	80094a0 <HAL_RCC_OscConfig+0x324>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	2b05      	cmp	r3, #5
 800946c:	d10c      	bne.n	8009488 <HAL_RCC_OscConfig+0x30c>
 800946e:	4b5f      	ldr	r3, [pc, #380]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009472:	4a5e      	ldr	r2, [pc, #376]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009474:	f043 0304 	orr.w	r3, r3, #4
 8009478:	6713      	str	r3, [r2, #112]	; 0x70
 800947a:	4b5c      	ldr	r3, [pc, #368]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	4a5b      	ldr	r2, [pc, #364]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009480:	f043 0301 	orr.w	r3, r3, #1
 8009484:	6713      	str	r3, [r2, #112]	; 0x70
 8009486:	e00b      	b.n	80094a0 <HAL_RCC_OscConfig+0x324>
 8009488:	4b58      	ldr	r3, [pc, #352]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800948a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948c:	4a57      	ldr	r2, [pc, #348]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	6713      	str	r3, [r2, #112]	; 0x70
 8009494:	4b55      	ldr	r3, [pc, #340]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009498:	4a54      	ldr	r2, [pc, #336]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800949a:	f023 0304 	bic.w	r3, r3, #4
 800949e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d015      	beq.n	80094d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a8:	f7fc fba4 	bl	8005bf4 <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ae:	e00a      	b.n	80094c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094b0:	f7fc fba0 	bl	8005bf4 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80094be:	4293      	cmp	r3, r2
 80094c0:	d901      	bls.n	80094c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e0cb      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094c6:	4b49      	ldr	r3, [pc, #292]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80094c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0ee      	beq.n	80094b0 <HAL_RCC_OscConfig+0x334>
 80094d2:	e014      	b.n	80094fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094d4:	f7fc fb8e 	bl	8005bf4 <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094da:	e00a      	b.n	80094f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094dc:	f7fc fb8a 	bl	8005bf4 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e0b5      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094f2:	4b3e      	ldr	r3, [pc, #248]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80094f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1ee      	bne.n	80094dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d105      	bne.n	8009510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009504:	4b39      	ldr	r3, [pc, #228]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	4a38      	ldr	r2, [pc, #224]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800950a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800950e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80a1 	beq.w	800965c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800951a:	4b34      	ldr	r3, [pc, #208]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 030c 	and.w	r3, r3, #12
 8009522:	2b08      	cmp	r3, #8
 8009524:	d05c      	beq.n	80095e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d141      	bne.n	80095b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800952e:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <HAL_RCC_OscConfig+0x478>)
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009534:	f7fc fb5e 	bl	8005bf4 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800953c:	f7fc fb5a 	bl	8005bf4 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b02      	cmp	r3, #2
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e087      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800954e:	4b27      	ldr	r3, [pc, #156]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f0      	bne.n	800953c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69da      	ldr	r2, [r3, #28]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	431a      	orrs	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	019b      	lsls	r3, r3, #6
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	3b01      	subs	r3, #1
 8009574:	041b      	lsls	r3, r3, #16
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	061b      	lsls	r3, r3, #24
 800957e:	491b      	ldr	r1, [pc, #108]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009580:	4313      	orrs	r3, r2
 8009582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009584:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <HAL_RCC_OscConfig+0x478>)
 8009586:	2201      	movs	r2, #1
 8009588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800958a:	f7fc fb33 	bl	8005bf4 <HAL_GetTick>
 800958e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009590:	e008      	b.n	80095a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009592:	f7fc fb2f 	bl	8005bf4 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d901      	bls.n	80095a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e05c      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a4:	4b11      	ldr	r3, [pc, #68]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0f0      	beq.n	8009592 <HAL_RCC_OscConfig+0x416>
 80095b0:	e054      	b.n	800965c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <HAL_RCC_OscConfig+0x478>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b8:	f7fc fb1c 	bl	8005bf4 <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095c0:	f7fc fb18 	bl	8005bf4 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e045      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d2:	4b06      	ldr	r3, [pc, #24]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f0      	bne.n	80095c0 <HAL_RCC_OscConfig+0x444>
 80095de:	e03d      	b.n	800965c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d107      	bne.n	80095f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e038      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
 80095ec:	40023800 	.word	0x40023800
 80095f0:	40007000 	.word	0x40007000
 80095f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095f8:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <HAL_RCC_OscConfig+0x4ec>)
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d028      	beq.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009610:	429a      	cmp	r2, r3
 8009612:	d121      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961e:	429a      	cmp	r2, r3
 8009620:	d11a      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009628:	4013      	ands	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800962e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009630:	4293      	cmp	r3, r2
 8009632:	d111      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	3b01      	subs	r3, #1
 8009642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009644:	429a      	cmp	r2, r3
 8009646:	d107      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009654:	429a      	cmp	r2, r3
 8009656:	d001      	beq.n	800965c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e000      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40023800 	.word	0x40023800

0800966c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e0cc      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009680:	4b68      	ldr	r3, [pc, #416]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d90c      	bls.n	80096a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800968e:	4b65      	ldr	r3, [pc, #404]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009696:	4b63      	ldr	r3, [pc, #396]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d001      	beq.n	80096a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e0b8      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d020      	beq.n	80096f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096c0:	4b59      	ldr	r3, [pc, #356]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a58      	ldr	r2, [pc, #352]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0308 	and.w	r3, r3, #8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096d8:	4b53      	ldr	r3, [pc, #332]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4a52      	ldr	r2, [pc, #328]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096e4:	4b50      	ldr	r3, [pc, #320]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	494d      	ldr	r1, [pc, #308]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d044      	beq.n	800978c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d107      	bne.n	800971a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800970a:	4b47      	ldr	r3, [pc, #284]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d119      	bne.n	800974a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e07f      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b02      	cmp	r3, #2
 8009720:	d003      	beq.n	800972a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009726:	2b03      	cmp	r3, #3
 8009728:	d107      	bne.n	800973a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800972a:	4b3f      	ldr	r3, [pc, #252]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e06f      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800973a:	4b3b      	ldr	r3, [pc, #236]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e067      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800974a:	4b37      	ldr	r3, [pc, #220]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f023 0203 	bic.w	r2, r3, #3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4934      	ldr	r1, [pc, #208]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 8009758:	4313      	orrs	r3, r2
 800975a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800975c:	f7fc fa4a 	bl	8005bf4 <HAL_GetTick>
 8009760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009762:	e00a      	b.n	800977a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009764:	f7fc fa46 	bl	8005bf4 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009772:	4293      	cmp	r3, r2
 8009774:	d901      	bls.n	800977a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e04f      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800977a:	4b2b      	ldr	r3, [pc, #172]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 020c 	and.w	r2, r3, #12
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	429a      	cmp	r2, r3
 800978a:	d1eb      	bne.n	8009764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800978c:	4b25      	ldr	r3, [pc, #148]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d20c      	bcs.n	80097b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979a:	4b22      	ldr	r3, [pc, #136]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097a2:	4b20      	ldr	r3, [pc, #128]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d001      	beq.n	80097b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e032      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d008      	beq.n	80097d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097c0:	4b19      	ldr	r3, [pc, #100]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4916      	ldr	r1, [pc, #88]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0308 	and.w	r3, r3, #8
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d009      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	490e      	ldr	r1, [pc, #56]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097f2:	f000 f821 	bl	8009838 <HAL_RCC_GetSysClockFreq>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	091b      	lsrs	r3, r3, #4
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	490a      	ldr	r1, [pc, #40]	; (800982c <HAL_RCC_ClockConfig+0x1c0>)
 8009804:	5ccb      	ldrb	r3, [r1, r3]
 8009806:	fa22 f303 	lsr.w	r3, r2, r3
 800980a:	4a09      	ldr	r2, [pc, #36]	; (8009830 <HAL_RCC_ClockConfig+0x1c4>)
 800980c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <HAL_RCC_ClockConfig+0x1c8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f7fc f9aa 	bl	8005b6c <HAL_InitTick>

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	40023c00 	.word	0x40023c00
 8009828:	40023800 	.word	0x40023800
 800982c:	0800ee20 	.word	0x0800ee20
 8009830:	200000ac 	.word	0x200000ac
 8009834:	200000d8 	.word	0x200000d8

08009838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b094      	sub	sp, #80	; 0x50
 800983e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	647b      	str	r3, [r7, #68]	; 0x44
 8009844:	2300      	movs	r3, #0
 8009846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009848:	2300      	movs	r3, #0
 800984a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009850:	4b79      	ldr	r3, [pc, #484]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f003 030c 	and.w	r3, r3, #12
 8009858:	2b08      	cmp	r3, #8
 800985a:	d00d      	beq.n	8009878 <HAL_RCC_GetSysClockFreq+0x40>
 800985c:	2b08      	cmp	r3, #8
 800985e:	f200 80e1 	bhi.w	8009a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_RCC_GetSysClockFreq+0x34>
 8009866:	2b04      	cmp	r3, #4
 8009868:	d003      	beq.n	8009872 <HAL_RCC_GetSysClockFreq+0x3a>
 800986a:	e0db      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800986c:	4b73      	ldr	r3, [pc, #460]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800986e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009870:	e0db      	b.n	8009a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009872:	4b73      	ldr	r3, [pc, #460]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8009874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009876:	e0d8      	b.n	8009a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009878:	4b6f      	ldr	r3, [pc, #444]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009882:	4b6d      	ldr	r3, [pc, #436]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d063      	beq.n	8009956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800988e:	4b6a      	ldr	r3, [pc, #424]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	099b      	lsrs	r3, r3, #6
 8009894:	2200      	movs	r2, #0
 8009896:	63bb      	str	r3, [r7, #56]	; 0x38
 8009898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a0:	633b      	str	r3, [r7, #48]	; 0x30
 80098a2:	2300      	movs	r3, #0
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
 80098a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80098aa:	4622      	mov	r2, r4
 80098ac:	462b      	mov	r3, r5
 80098ae:	f04f 0000 	mov.w	r0, #0
 80098b2:	f04f 0100 	mov.w	r1, #0
 80098b6:	0159      	lsls	r1, r3, #5
 80098b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098bc:	0150      	lsls	r0, r2, #5
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4621      	mov	r1, r4
 80098c4:	1a51      	subs	r1, r2, r1
 80098c6:	6139      	str	r1, [r7, #16]
 80098c8:	4629      	mov	r1, r5
 80098ca:	eb63 0301 	sbc.w	r3, r3, r1
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098dc:	4659      	mov	r1, fp
 80098de:	018b      	lsls	r3, r1, #6
 80098e0:	4651      	mov	r1, sl
 80098e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098e6:	4651      	mov	r1, sl
 80098e8:	018a      	lsls	r2, r1, #6
 80098ea:	4651      	mov	r1, sl
 80098ec:	ebb2 0801 	subs.w	r8, r2, r1
 80098f0:	4659      	mov	r1, fp
 80098f2:	eb63 0901 	sbc.w	r9, r3, r1
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800990a:	4690      	mov	r8, r2
 800990c:	4699      	mov	r9, r3
 800990e:	4623      	mov	r3, r4
 8009910:	eb18 0303 	adds.w	r3, r8, r3
 8009914:	60bb      	str	r3, [r7, #8]
 8009916:	462b      	mov	r3, r5
 8009918:	eb49 0303 	adc.w	r3, r9, r3
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	f04f 0300 	mov.w	r3, #0
 8009926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800992a:	4629      	mov	r1, r5
 800992c:	024b      	lsls	r3, r1, #9
 800992e:	4621      	mov	r1, r4
 8009930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009934:	4621      	mov	r1, r4
 8009936:	024a      	lsls	r2, r1, #9
 8009938:	4610      	mov	r0, r2
 800993a:	4619      	mov	r1, r3
 800993c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993e:	2200      	movs	r2, #0
 8009940:	62bb      	str	r3, [r7, #40]	; 0x28
 8009942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009948:	f7f6 fc46 	bl	80001d8 <__aeabi_uldivmod>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4613      	mov	r3, r2
 8009952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009954:	e058      	b.n	8009a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009956:	4b38      	ldr	r3, [pc, #224]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	099b      	lsrs	r3, r3, #6
 800995c:	2200      	movs	r2, #0
 800995e:	4618      	mov	r0, r3
 8009960:	4611      	mov	r1, r2
 8009962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009966:	623b      	str	r3, [r7, #32]
 8009968:	2300      	movs	r3, #0
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
 800996c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	f04f 0100 	mov.w	r1, #0
 800997c:	0159      	lsls	r1, r3, #5
 800997e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009982:	0150      	lsls	r0, r2, #5
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4641      	mov	r1, r8
 800998a:	ebb2 0a01 	subs.w	sl, r2, r1
 800998e:	4649      	mov	r1, r9
 8009990:	eb63 0b01 	sbc.w	fp, r3, r1
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80099a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80099a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80099a8:	ebb2 040a 	subs.w	r4, r2, sl
 80099ac:	eb63 050b 	sbc.w	r5, r3, fp
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	00eb      	lsls	r3, r5, #3
 80099ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099be:	00e2      	lsls	r2, r4, #3
 80099c0:	4614      	mov	r4, r2
 80099c2:	461d      	mov	r5, r3
 80099c4:	4643      	mov	r3, r8
 80099c6:	18e3      	adds	r3, r4, r3
 80099c8:	603b      	str	r3, [r7, #0]
 80099ca:	464b      	mov	r3, r9
 80099cc:	eb45 0303 	adc.w	r3, r5, r3
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099de:	4629      	mov	r1, r5
 80099e0:	028b      	lsls	r3, r1, #10
 80099e2:	4621      	mov	r1, r4
 80099e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099e8:	4621      	mov	r1, r4
 80099ea:	028a      	lsls	r2, r1, #10
 80099ec:	4610      	mov	r0, r2
 80099ee:	4619      	mov	r1, r3
 80099f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f2:	2200      	movs	r2, #0
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	61fa      	str	r2, [r7, #28]
 80099f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099fc:	f7f6 fbec 	bl	80001d8 <__aeabi_uldivmod>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4613      	mov	r3, r2
 8009a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a08:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	0c1b      	lsrs	r3, r3, #16
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	3301      	adds	r3, #1
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a22:	e002      	b.n	8009a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8009a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3750      	adds	r7, #80	; 0x50
 8009a30:	46bd      	mov	sp, r7
 8009a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a36:	bf00      	nop
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	00f42400 	.word	0x00f42400
 8009a40:	007a1200 	.word	0x007a1200

08009a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	200000ac 	.word	0x200000ac

08009a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a60:	f7ff fff0 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	0a9b      	lsrs	r3, r3, #10
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	4903      	ldr	r1, [pc, #12]	; (8009a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a72:	5ccb      	ldrb	r3, [r1, r3]
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40023800 	.word	0x40023800
 8009a80:	0800ee30 	.word	0x0800ee30

08009a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a88:	f7ff ffdc 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	0b5b      	lsrs	r3, r3, #13
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	4903      	ldr	r1, [pc, #12]	; (8009aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a9a:	5ccb      	ldrb	r3, [r1, r3]
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	40023800 	.word	0x40023800
 8009aa8:	0800ee30 	.word	0x0800ee30

08009aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e07b      	b.n	8009bb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d108      	bne.n	8009ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ace:	d009      	beq.n	8009ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	61da      	str	r2, [r3, #28]
 8009ad6:	e005      	b.n	8009ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fb fa14 	bl	8004f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b54:	431a      	orrs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b68:	ea42 0103 	orr.w	r1, r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	0c1b      	lsrs	r3, r3, #16
 8009b82:	f003 0104 	and.w	r1, r3, #4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	f003 0210 	and.w	r2, r3, #16
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69da      	ldr	r2, [r3, #28]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ba4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b088      	sub	sp, #32
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	603b      	str	r3, [r7, #0]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_SPI_Transmit+0x22>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e126      	b.n	8009e2e <HAL_SPI_Transmit+0x270>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009be8:	f7fc f804 	bl	8005bf4 <HAL_GetTick>
 8009bec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d002      	beq.n	8009c04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c02:	e10b      	b.n	8009e1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <HAL_SPI_Transmit+0x52>
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c14:	e102      	b.n	8009e1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2203      	movs	r2, #3
 8009c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5c:	d10f      	bne.n	8009c7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b40      	cmp	r3, #64	; 0x40
 8009c8a:	d007      	beq.n	8009c9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ca4:	d14b      	bne.n	8009d3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <HAL_SPI_Transmit+0xf6>
 8009cae:	8afb      	ldrh	r3, [r7, #22]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d13e      	bne.n	8009d32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb8:	881a      	ldrh	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc4:	1c9a      	adds	r2, r3, #2
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009cd8:	e02b      	b.n	8009d32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d112      	bne.n	8009d0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cec:	881a      	ldrh	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf8:	1c9a      	adds	r2, r3, #2
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d0c:	e011      	b.n	8009d32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d0e:	f7fb ff71 	bl	8005bf4 <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d803      	bhi.n	8009d26 <HAL_SPI_Transmit+0x168>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d24:	d102      	bne.n	8009d2c <HAL_SPI_Transmit+0x16e>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d30:	e074      	b.n	8009e1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1ce      	bne.n	8009cda <HAL_SPI_Transmit+0x11c>
 8009d3c:	e04c      	b.n	8009dd8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <HAL_SPI_Transmit+0x18e>
 8009d46:	8afb      	ldrh	r3, [r7, #22]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d140      	bne.n	8009dce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	330c      	adds	r3, #12
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d72:	e02c      	b.n	8009dce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d113      	bne.n	8009daa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	7812      	ldrb	r2, [r2, #0]
 8009d8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	3b01      	subs	r3, #1
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	86da      	strh	r2, [r3, #54]	; 0x36
 8009da8:	e011      	b.n	8009dce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009daa:	f7fb ff23 	bl	8005bf4 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d803      	bhi.n	8009dc2 <HAL_SPI_Transmit+0x204>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc0:	d102      	bne.n	8009dc8 <HAL_SPI_Transmit+0x20a>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d102      	bne.n	8009dce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009dcc:	e026      	b.n	8009e1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1cd      	bne.n	8009d74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fce9 	bl	800a7b4 <SPI_EndRxTxTransaction>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2220      	movs	r2, #32
 8009dec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df6:	2300      	movs	r3, #0
 8009df8:	613b      	str	r3, [r7, #16]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e000      	b.n	8009e1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8009e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3720      	adds	r7, #32
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af02      	add	r7, sp, #8
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	603b      	str	r3, [r7, #0]
 8009e42:	4613      	mov	r3, r2
 8009e44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e52:	d112      	bne.n	8009e7a <HAL_SPI_Receive+0x44>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10e      	bne.n	8009e7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009e64:	88fa      	ldrh	r2, [r7, #6]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 f8f1 	bl	800a058 <HAL_SPI_TransmitReceive>
 8009e76:	4603      	mov	r3, r0
 8009e78:	e0ea      	b.n	800a050 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d101      	bne.n	8009e88 <HAL_SPI_Receive+0x52>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e0e3      	b.n	800a050 <HAL_SPI_Receive+0x21a>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e90:	f7fb feb0 	bl	8005bf4 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d002      	beq.n	8009ea8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ea6:	e0ca      	b.n	800a03e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <HAL_SPI_Receive+0x7e>
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009eb8:	e0c1      	b.n	800a03e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	88fa      	ldrh	r2, [r7, #6]
 8009ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f00:	d10f      	bne.n	8009f22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2c:	2b40      	cmp	r3, #64	; 0x40
 8009f2e:	d007      	beq.n	8009f40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d162      	bne.n	800a00e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009f48:	e02e      	b.n	8009fa8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d115      	bne.n	8009f84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f103 020c 	add.w	r2, r3, #12
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f64:	7812      	ldrb	r2, [r2, #0]
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f82:	e011      	b.n	8009fa8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f84:	f7fb fe36 	bl	8005bf4 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d803      	bhi.n	8009f9c <HAL_SPI_Receive+0x166>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d102      	bne.n	8009fa2 <HAL_SPI_Receive+0x16c>
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009fa6:	e04a      	b.n	800a03e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1cb      	bne.n	8009f4a <HAL_SPI_Receive+0x114>
 8009fb2:	e031      	b.n	800a018 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d113      	bne.n	8009fea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68da      	ldr	r2, [r3, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fcc:	b292      	uxth	r2, r2
 8009fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd4:	1c9a      	adds	r2, r3, #2
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fe8:	e011      	b.n	800a00e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fea:	f7fb fe03 	bl	8005bf4 <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d803      	bhi.n	800a002 <HAL_SPI_Receive+0x1cc>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a000:	d102      	bne.n	800a008 <HAL_SPI_Receive+0x1d2>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a00c:	e017      	b.n	800a03e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a012:	b29b      	uxth	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1cd      	bne.n	8009fb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fb63 	bl	800a6e8 <SPI_EndRxTransaction>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2220      	movs	r2, #32
 800a02c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
 800a03a:	e000      	b.n	800a03e <HAL_SPI_Receive+0x208>
  }

error :
 800a03c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08c      	sub	sp, #48	; 0x30
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a066:	2301      	movs	r3, #1
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_SPI_TransmitReceive+0x26>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e18a      	b.n	800a394 <HAL_SPI_TransmitReceive+0x33c>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a086:	f7fb fdb5 	bl	8005bf4 <HAL_GetTick>
 800a08a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a09c:	887b      	ldrh	r3, [r7, #2]
 800a09e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d00f      	beq.n	800a0c8 <HAL_SPI_TransmitReceive+0x70>
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0ae:	d107      	bne.n	800a0c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <HAL_SPI_TransmitReceive+0x68>
 800a0b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d003      	beq.n	800a0c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a0c6:	e15b      	b.n	800a380 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_SPI_TransmitReceive+0x82>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <HAL_SPI_TransmitReceive+0x82>
 800a0d4:	887b      	ldrh	r3, [r7, #2]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a0e0:	e14e      	b.n	800a380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d003      	beq.n	800a0f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2205      	movs	r2, #5
 800a0f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	887a      	ldrh	r2, [r7, #2]
 800a106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	887a      	ldrh	r2, [r7, #2]
 800a10c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	887a      	ldrh	r2, [r7, #2]
 800a118:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	887a      	ldrh	r2, [r7, #2]
 800a11e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a136:	2b40      	cmp	r3, #64	; 0x40
 800a138:	d007      	beq.n	800a14a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a152:	d178      	bne.n	800a246 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <HAL_SPI_TransmitReceive+0x10a>
 800a15c:	8b7b      	ldrh	r3, [r7, #26]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d166      	bne.n	800a230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	881a      	ldrh	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a172:	1c9a      	adds	r2, r3, #2
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	3b01      	subs	r3, #1
 800a180:	b29a      	uxth	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a186:	e053      	b.n	800a230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b02      	cmp	r3, #2
 800a194:	d11b      	bne.n	800a1ce <HAL_SPI_TransmitReceive+0x176>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d016      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x176>
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d113      	bne.n	800a1ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	881a      	ldrh	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	1c9a      	adds	r2, r3, #2
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d119      	bne.n	800a210 <HAL_SPI_TransmitReceive+0x1b8>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d014      	beq.n	800a210 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f0:	b292      	uxth	r2, r2
 800a1f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	1c9a      	adds	r2, r3, #2
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a20c:	2301      	movs	r3, #1
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a210:	f7fb fcf0 	bl	8005bf4 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d807      	bhi.n	800a230 <HAL_SPI_TransmitReceive+0x1d8>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d003      	beq.n	800a230 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a22e:	e0a7      	b.n	800a380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a234:	b29b      	uxth	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1a6      	bne.n	800a188 <HAL_SPI_TransmitReceive+0x130>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a23e:	b29b      	uxth	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1a1      	bne.n	800a188 <HAL_SPI_TransmitReceive+0x130>
 800a244:	e07c      	b.n	800a340 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <HAL_SPI_TransmitReceive+0x1fc>
 800a24e:	8b7b      	ldrh	r3, [r7, #26]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d16b      	bne.n	800a32c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	330c      	adds	r3, #12
 800a25e:	7812      	ldrb	r2, [r2, #0]
 800a260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a270:	b29b      	uxth	r3, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a27a:	e057      	b.n	800a32c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b02      	cmp	r3, #2
 800a288:	d11c      	bne.n	800a2c4 <HAL_SPI_TransmitReceive+0x26c>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d017      	beq.n	800a2c4 <HAL_SPI_TransmitReceive+0x26c>
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	2b01      	cmp	r3, #1
 800a298:	d114      	bne.n	800a2c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	7812      	ldrb	r2, [r2, #0]
 800a2a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d119      	bne.n	800a306 <HAL_SPI_TransmitReceive+0x2ae>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d014      	beq.n	800a306 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a302:	2301      	movs	r3, #1
 800a304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a306:	f7fb fc75 	bl	8005bf4 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a312:	429a      	cmp	r2, r3
 800a314:	d803      	bhi.n	800a31e <HAL_SPI_TransmitReceive+0x2c6>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31c:	d102      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x2cc>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	2b00      	cmp	r3, #0
 800a322:	d103      	bne.n	800a32c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a32a:	e029      	b.n	800a380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a330:	b29b      	uxth	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1a2      	bne.n	800a27c <HAL_SPI_TransmitReceive+0x224>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d19d      	bne.n	800a27c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a342:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 fa35 	bl	800a7b4 <SPI_EndRxTxTransaction>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2220      	movs	r2, #32
 800a35a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a35c:	e010      	b.n	800a380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	e000      	b.n	800a380 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a37e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a394:	4618      	mov	r0, r3
 800a396:	3730      	adds	r7, #48	; 0x30
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	099b      	lsrs	r3, r3, #6
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10f      	bne.n	800a3e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	099b      	lsrs	r3, r3, #6
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	4798      	blx	r3
    return;
 800a3de:	e0d7      	b.n	800a590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00a      	beq.n	800a402 <HAL_SPI_IRQHandler+0x66>
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	09db      	lsrs	r3, r3, #7
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
    return;
 800a400:	e0c6      	b.n	800a590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	095b      	lsrs	r3, r3, #5
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10c      	bne.n	800a428 <HAL_SPI_IRQHandler+0x8c>
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	099b      	lsrs	r3, r3, #6
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d106      	bne.n	800a428 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	0a1b      	lsrs	r3, r3, #8
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80b4 	beq.w	800a590 <HAL_SPI_IRQHandler+0x1f4>
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80ad 	beq.w	800a590 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	099b      	lsrs	r3, r3, #6
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d023      	beq.n	800a48a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d011      	beq.n	800a472 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	f043 0204 	orr.w	r2, r3, #4
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a45a:	2300      	movs	r3, #0
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	e00b      	b.n	800a48a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a472:	2300      	movs	r3, #0
 800a474:	613b      	str	r3, [r7, #16]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	693b      	ldr	r3, [r7, #16]
        return;
 800a488:	e082      	b.n	800a590 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	095b      	lsrs	r3, r3, #5
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d014      	beq.n	800a4c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49a:	f043 0201 	orr.w	r2, r3, #1
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00c      	beq.n	800a4e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d0:	f043 0208 	orr.w	r2, r3, #8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60bb      	str	r3, [r7, #8]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	60bb      	str	r3, [r7, #8]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d04f      	beq.n	800a58e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a4fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <HAL_SPI_IRQHandler+0x17e>
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d034      	beq.n	800a584 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0203 	bic.w	r2, r2, #3
 800a528:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d011      	beq.n	800a556 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a536:	4a18      	ldr	r2, [pc, #96]	; (800a598 <HAL_SPI_IRQHandler+0x1fc>)
 800a538:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fb fd48 	bl	8005fd4 <HAL_DMA_Abort_IT>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d016      	beq.n	800a58c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a562:	4a0d      	ldr	r2, [pc, #52]	; (800a598 <HAL_SPI_IRQHandler+0x1fc>)
 800a564:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fb fd32 	bl	8005fd4 <HAL_DMA_Abort_IT>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a582:	e003      	b.n	800a58c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f809 	bl	800a59c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a58a:	e000      	b.n	800a58e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a58c:	bf00      	nop
    return;
 800a58e:	bf00      	nop
  }
}
 800a590:	3720      	adds	r7, #32
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	0800a5b1 	.word	0x0800a5b1

0800a59c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7ff ffe6 	bl	800a59c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5d0:	bf00      	nop
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a5e8:	f7fb fb04 	bl	8005bf4 <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5f8:	f7fb fafc 	bl	8005bf4 <HAL_GetTick>
 800a5fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5fe:	4b39      	ldr	r3, [pc, #228]	; (800a6e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	015b      	lsls	r3, r3, #5
 800a604:	0d1b      	lsrs	r3, r3, #20
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	fb02 f303 	mul.w	r3, r2, r3
 800a60c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a60e:	e054      	b.n	800a6ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d050      	beq.n	800a6ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a618:	f7fb faec 	bl	8005bf4 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	429a      	cmp	r2, r3
 800a626:	d902      	bls.n	800a62e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d13d      	bne.n	800a6aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a63c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a646:	d111      	bne.n	800a66c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a650:	d004      	beq.n	800a65c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a65a:	d107      	bne.n	800a66c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a66a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a674:	d10f      	bne.n	800a696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e017      	b.n	800a6da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	bf0c      	ite	eq
 800a6ca:	2301      	moveq	r3, #1
 800a6cc:	2300      	movne	r3, #0
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d19b      	bne.n	800a610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3720      	adds	r7, #32
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200000ac 	.word	0x200000ac

0800a6e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af02      	add	r7, sp, #8
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6fc:	d111      	bne.n	800a722 <SPI_EndRxTransaction+0x3a>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a706:	d004      	beq.n	800a712 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a710:	d107      	bne.n	800a722 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a720:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a72a:	d12a      	bne.n	800a782 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a734:	d012      	beq.n	800a75c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2200      	movs	r2, #0
 800a73e:	2180      	movs	r1, #128	; 0x80
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff ff49 	bl	800a5d8 <SPI_WaitFlagStateUntilTimeout>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d02d      	beq.n	800a7a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a750:	f043 0220 	orr.w	r2, r3, #32
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e026      	b.n	800a7aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2200      	movs	r2, #0
 800a764:	2101      	movs	r1, #1
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7ff ff36 	bl	800a5d8 <SPI_WaitFlagStateUntilTimeout>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01a      	beq.n	800a7a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a776:	f043 0220 	orr.w	r2, r3, #32
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e013      	b.n	800a7aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	2101      	movs	r1, #1
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff ff23 	bl	800a5d8 <SPI_WaitFlagStateUntilTimeout>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79c:	f043 0220 	orr.w	r2, r3, #32
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e000      	b.n	800a7aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af02      	add	r7, sp, #8
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a7c0:	4b1b      	ldr	r3, [pc, #108]	; (800a830 <SPI_EndRxTxTransaction+0x7c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a1b      	ldr	r2, [pc, #108]	; (800a834 <SPI_EndRxTxTransaction+0x80>)
 800a7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ca:	0d5b      	lsrs	r3, r3, #21
 800a7cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7d0:	fb02 f303 	mul.w	r3, r2, r3
 800a7d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7de:	d112      	bne.n	800a806 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	2180      	movs	r1, #128	; 0x80
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fef4 	bl	800a5d8 <SPI_WaitFlagStateUntilTimeout>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d016      	beq.n	800a824 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fa:	f043 0220 	orr.w	r2, r3, #32
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e00f      	b.n	800a826 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00a      	beq.n	800a822 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3b01      	subs	r3, #1
 800a810:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81c:	2b80      	cmp	r3, #128	; 0x80
 800a81e:	d0f2      	beq.n	800a806 <SPI_EndRxTxTransaction+0x52>
 800a820:	e000      	b.n	800a824 <SPI_EndRxTxTransaction+0x70>
        break;
 800a822:	bf00      	nop
  }

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	200000ac 	.word	0x200000ac
 800a834:	165e9f81 	.word	0x165e9f81

0800a838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e041      	b.n	800a8ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7fa fd8a 	bl	8005378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3304      	adds	r3, #4
 800a874:	4619      	mov	r1, r3
 800a876:	4610      	mov	r0, r2
 800a878:	f000 fae0 	bl	800ae3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d001      	beq.n	800a8f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e04e      	b.n	800a98e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a23      	ldr	r2, [pc, #140]	; (800a99c <HAL_TIM_Base_Start_IT+0xc4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d022      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91a:	d01d      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1f      	ldr	r2, [pc, #124]	; (800a9a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d018      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1e      	ldr	r2, [pc, #120]	; (800a9a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d013      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1c      	ldr	r2, [pc, #112]	; (800a9a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00e      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <HAL_TIM_Base_Start_IT+0xd4>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d009      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a19      	ldr	r2, [pc, #100]	; (800a9b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d004      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a18      	ldr	r2, [pc, #96]	; (800a9b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d111      	bne.n	800a97c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b06      	cmp	r3, #6
 800a968:	d010      	beq.n	800a98c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 0201 	orr.w	r2, r2, #1
 800a978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a97a:	e007      	b.n	800a98c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0201 	orr.w	r2, r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40000400 	.word	0x40000400
 800a9a4:	40000800 	.word	0x40000800
 800a9a8:	40000c00 	.word	0x40000c00
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40001800 	.word	0x40001800

0800a9b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e041      	b.n	800aa4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7fa fca8 	bl	8005334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f000 fa20 	bl	800ae3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d122      	bne.n	800aab2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d11b      	bne.n	800aab2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f06f 0202 	mvn.w	r2, #2
 800aa82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f9b1 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800aa9e:	e005      	b.n	800aaac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f9a3 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f9b4 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d122      	bne.n	800ab06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d11b      	bne.n	800ab06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f06f 0204 	mvn.w	r2, #4
 800aad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f987 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800aaf2:	e005      	b.n	800ab00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f979 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f98a 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	f003 0308 	and.w	r3, r3, #8
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d122      	bne.n	800ab5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f003 0308 	and.w	r3, r3, #8
 800ab1e:	2b08      	cmp	r3, #8
 800ab20:	d11b      	bne.n	800ab5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f06f 0208 	mvn.w	r2, #8
 800ab2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2204      	movs	r2, #4
 800ab30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f95d 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800ab46:	e005      	b.n	800ab54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f94f 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f960 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b10      	cmp	r3, #16
 800ab66:	d122      	bne.n	800abae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d11b      	bne.n	800abae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f06f 0210 	mvn.w	r2, #16
 800ab7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2208      	movs	r2, #8
 800ab84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f933 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800ab9a:	e005      	b.n	800aba8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f925 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f936 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d10e      	bne.n	800abda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d107      	bne.n	800abda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f06f 0201 	mvn.w	r2, #1
 800abd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7fa faef 	bl	80051b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe4:	2b80      	cmp	r3, #128	; 0x80
 800abe6:	d10e      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf2:	2b80      	cmp	r3, #128	; 0x80
 800abf4:	d107      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fbf1 	bl	800b3e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac10:	2b40      	cmp	r3, #64	; 0x40
 800ac12:	d10e      	bne.n	800ac32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1e:	2b40      	cmp	r3, #64	; 0x40
 800ac20:	d107      	bne.n	800ac32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f8fb 	bl	800ae28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	f003 0320 	and.w	r3, r3, #32
 800ac3c:	2b20      	cmp	r3, #32
 800ac3e:	d10e      	bne.n	800ac5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b20      	cmp	r3, #32
 800ac4c:	d107      	bne.n	800ac5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f06f 0220 	mvn.w	r2, #32
 800ac56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fbbb 	bl	800b3d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac82:	2302      	movs	r3, #2
 800ac84:	e0ae      	b.n	800ade4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b0c      	cmp	r3, #12
 800ac92:	f200 809f 	bhi.w	800add4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ac96:	a201      	add	r2, pc, #4	; (adr r2, 800ac9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9c:	0800acd1 	.word	0x0800acd1
 800aca0:	0800add5 	.word	0x0800add5
 800aca4:	0800add5 	.word	0x0800add5
 800aca8:	0800add5 	.word	0x0800add5
 800acac:	0800ad11 	.word	0x0800ad11
 800acb0:	0800add5 	.word	0x0800add5
 800acb4:	0800add5 	.word	0x0800add5
 800acb8:	0800add5 	.word	0x0800add5
 800acbc:	0800ad53 	.word	0x0800ad53
 800acc0:	0800add5 	.word	0x0800add5
 800acc4:	0800add5 	.word	0x0800add5
 800acc8:	0800add5 	.word	0x0800add5
 800accc:	0800ad93 	.word	0x0800ad93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f950 	bl	800af7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f042 0208 	orr.w	r2, r2, #8
 800acea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699a      	ldr	r2, [r3, #24]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f022 0204 	bic.w	r2, r2, #4
 800acfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6999      	ldr	r1, [r3, #24]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	619a      	str	r2, [r3, #24]
      break;
 800ad0e:	e064      	b.n	800adda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f9a0 	bl	800b05c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6999      	ldr	r1, [r3, #24]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	021a      	lsls	r2, r3, #8
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	619a      	str	r2, [r3, #24]
      break;
 800ad50:	e043      	b.n	800adda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 f9f5 	bl	800b148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69da      	ldr	r2, [r3, #28]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f042 0208 	orr.w	r2, r2, #8
 800ad6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69da      	ldr	r2, [r3, #28]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0204 	bic.w	r2, r2, #4
 800ad7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69d9      	ldr	r1, [r3, #28]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	61da      	str	r2, [r3, #28]
      break;
 800ad90:	e023      	b.n	800adda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 fa49 	bl	800b230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69da      	ldr	r2, [r3, #28]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69d9      	ldr	r1, [r3, #28]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	021a      	lsls	r2, r3, #8
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	61da      	str	r2, [r3, #28]
      break;
 800add2:	e002      	b.n	800adda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	75fb      	strb	r3, [r7, #23]
      break;
 800add8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a40      	ldr	r2, [pc, #256]	; (800af50 <TIM_Base_SetConfig+0x114>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d013      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5a:	d00f      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a3d      	ldr	r2, [pc, #244]	; (800af54 <TIM_Base_SetConfig+0x118>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00b      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a3c      	ldr	r2, [pc, #240]	; (800af58 <TIM_Base_SetConfig+0x11c>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d007      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a3b      	ldr	r2, [pc, #236]	; (800af5c <TIM_Base_SetConfig+0x120>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a3a      	ldr	r2, [pc, #232]	; (800af60 <TIM_Base_SetConfig+0x124>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d108      	bne.n	800ae8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a2f      	ldr	r2, [pc, #188]	; (800af50 <TIM_Base_SetConfig+0x114>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d02b      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae9c:	d027      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a2c      	ldr	r2, [pc, #176]	; (800af54 <TIM_Base_SetConfig+0x118>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d023      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2b      	ldr	r2, [pc, #172]	; (800af58 <TIM_Base_SetConfig+0x11c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d01f      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2a      	ldr	r2, [pc, #168]	; (800af5c <TIM_Base_SetConfig+0x120>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d01b      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a29      	ldr	r2, [pc, #164]	; (800af60 <TIM_Base_SetConfig+0x124>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d017      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a28      	ldr	r2, [pc, #160]	; (800af64 <TIM_Base_SetConfig+0x128>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d013      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a27      	ldr	r2, [pc, #156]	; (800af68 <TIM_Base_SetConfig+0x12c>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d00f      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a26      	ldr	r2, [pc, #152]	; (800af6c <TIM_Base_SetConfig+0x130>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00b      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a25      	ldr	r2, [pc, #148]	; (800af70 <TIM_Base_SetConfig+0x134>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d007      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a24      	ldr	r2, [pc, #144]	; (800af74 <TIM_Base_SetConfig+0x138>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d003      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a23      	ldr	r2, [pc, #140]	; (800af78 <TIM_Base_SetConfig+0x13c>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d108      	bne.n	800af00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a0a      	ldr	r2, [pc, #40]	; (800af50 <TIM_Base_SetConfig+0x114>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d003      	beq.n	800af34 <TIM_Base_SetConfig+0xf8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a0c      	ldr	r2, [pc, #48]	; (800af60 <TIM_Base_SetConfig+0x124>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d103      	bne.n	800af3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	615a      	str	r2, [r3, #20]
}
 800af42:	bf00      	nop
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	40010000 	.word	0x40010000
 800af54:	40000400 	.word	0x40000400
 800af58:	40000800 	.word	0x40000800
 800af5c:	40000c00 	.word	0x40000c00
 800af60:	40010400 	.word	0x40010400
 800af64:	40014000 	.word	0x40014000
 800af68:	40014400 	.word	0x40014400
 800af6c:	40014800 	.word	0x40014800
 800af70:	40001800 	.word	0x40001800
 800af74:	40001c00 	.word	0x40001c00
 800af78:	40002000 	.word	0x40002000

0800af7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	f023 0201 	bic.w	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f023 0303 	bic.w	r3, r3, #3
 800afb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f023 0302 	bic.w	r3, r3, #2
 800afc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	4313      	orrs	r3, r2
 800afce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a20      	ldr	r2, [pc, #128]	; (800b054 <TIM_OC1_SetConfig+0xd8>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d003      	beq.n	800afe0 <TIM_OC1_SetConfig+0x64>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a1f      	ldr	r2, [pc, #124]	; (800b058 <TIM_OC1_SetConfig+0xdc>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d10c      	bne.n	800affa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f023 0308 	bic.w	r3, r3, #8
 800afe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f023 0304 	bic.w	r3, r3, #4
 800aff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a15      	ldr	r2, [pc, #84]	; (800b054 <TIM_OC1_SetConfig+0xd8>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d003      	beq.n	800b00a <TIM_OC1_SetConfig+0x8e>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a14      	ldr	r2, [pc, #80]	; (800b058 <TIM_OC1_SetConfig+0xdc>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d111      	bne.n	800b02e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	4313      	orrs	r3, r2
 800b022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	621a      	str	r2, [r3, #32]
}
 800b048:	bf00      	nop
 800b04a:	371c      	adds	r7, #28
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	40010000 	.word	0x40010000
 800b058:	40010400 	.word	0x40010400

0800b05c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	f023 0210 	bic.w	r2, r3, #16
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	021b      	lsls	r3, r3, #8
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f023 0320 	bic.w	r3, r3, #32
 800b0a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a22      	ldr	r2, [pc, #136]	; (800b140 <TIM_OC2_SetConfig+0xe4>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d003      	beq.n	800b0c4 <TIM_OC2_SetConfig+0x68>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a21      	ldr	r2, [pc, #132]	; (800b144 <TIM_OC2_SetConfig+0xe8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d10d      	bne.n	800b0e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a17      	ldr	r2, [pc, #92]	; (800b140 <TIM_OC2_SetConfig+0xe4>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d003      	beq.n	800b0f0 <TIM_OC2_SetConfig+0x94>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a16      	ldr	r2, [pc, #88]	; (800b144 <TIM_OC2_SetConfig+0xe8>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d113      	bne.n	800b118 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	4313      	orrs	r3, r2
 800b116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	621a      	str	r2, [r3, #32]
}
 800b132:	bf00      	nop
 800b134:	371c      	adds	r7, #28
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	40010000 	.word	0x40010000
 800b144:	40010400 	.word	0x40010400

0800b148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4313      	orrs	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	021b      	lsls	r3, r3, #8
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a21      	ldr	r2, [pc, #132]	; (800b228 <TIM_OC3_SetConfig+0xe0>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d003      	beq.n	800b1ae <TIM_OC3_SetConfig+0x66>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a20      	ldr	r2, [pc, #128]	; (800b22c <TIM_OC3_SetConfig+0xe4>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d10d      	bne.n	800b1ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	021b      	lsls	r3, r3, #8
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a16      	ldr	r2, [pc, #88]	; (800b228 <TIM_OC3_SetConfig+0xe0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d003      	beq.n	800b1da <TIM_OC3_SetConfig+0x92>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a15      	ldr	r2, [pc, #84]	; (800b22c <TIM_OC3_SetConfig+0xe4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d113      	bne.n	800b202 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	621a      	str	r2, [r3, #32]
}
 800b21c:	bf00      	nop
 800b21e:	371c      	adds	r7, #28
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	40010000 	.word	0x40010000
 800b22c:	40010400 	.word	0x40010400

0800b230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	69db      	ldr	r3, [r3, #28]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	4313      	orrs	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b27a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	031b      	lsls	r3, r3, #12
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a12      	ldr	r2, [pc, #72]	; (800b2d4 <TIM_OC4_SetConfig+0xa4>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d003      	beq.n	800b298 <TIM_OC4_SetConfig+0x68>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <TIM_OC4_SetConfig+0xa8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d109      	bne.n	800b2ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b29e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	019b      	lsls	r3, r3, #6
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	621a      	str	r2, [r3, #32]
}
 800b2c6:	bf00      	nop
 800b2c8:	371c      	adds	r7, #28
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40010400 	.word	0x40010400

0800b2dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d101      	bne.n	800b2f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	e05a      	b.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b31a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a21      	ldr	r2, [pc, #132]	; (800b3b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d022      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b340:	d01d      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a1d      	ldr	r2, [pc, #116]	; (800b3bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d018      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a1b      	ldr	r2, [pc, #108]	; (800b3c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d013      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a1a      	ldr	r2, [pc, #104]	; (800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d00e      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d009      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d004      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a15      	ldr	r2, [pc, #84]	; (800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d10c      	bne.n	800b398 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40010000 	.word	0x40010000
 800b3bc:	40000400 	.word	0x40000400
 800b3c0:	40000800 	.word	0x40000800
 800b3c4:	40000c00 	.word	0x40000c00
 800b3c8:	40010400 	.word	0x40010400
 800b3cc:	40014000 	.word	0x40014000
 800b3d0:	40001800 	.word	0x40001800

0800b3d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e03f      	b.n	800b48e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fa fab6 	bl	8005994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2224      	movs	r2, #36	; 0x24
 800b42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68da      	ldr	r2, [r3, #12]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b43e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f929 	bl	800b698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	691a      	ldr	r2, [r3, #16]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	695a      	ldr	r2, [r3, #20]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68da      	ldr	r2, [r3, #12]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2220      	movs	r2, #32
 800b480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b08a      	sub	sp, #40	; 0x28
 800b49a:	af02      	add	r7, sp, #8
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	603b      	str	r3, [r7, #0]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	d17c      	bne.n	800b5b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <HAL_UART_Transmit+0x2c>
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d101      	bne.n	800b4c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e075      	b.n	800b5b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d101      	bne.n	800b4d4 <HAL_UART_Transmit+0x3e>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e06e      	b.n	800b5b2 <HAL_UART_Transmit+0x11c>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2221      	movs	r2, #33	; 0x21
 800b4e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4ea:	f7fa fb83 	bl	8005bf4 <HAL_GetTick>
 800b4ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	88fa      	ldrh	r2, [r7, #6]
 800b4f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	88fa      	ldrh	r2, [r7, #6]
 800b4fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b504:	d108      	bne.n	800b518 <HAL_UART_Transmit+0x82>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d104      	bne.n	800b518 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	61bb      	str	r3, [r7, #24]
 800b516:	e003      	b.n	800b520 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b51c:	2300      	movs	r3, #0
 800b51e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b528:	e02a      	b.n	800b580 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2200      	movs	r2, #0
 800b532:	2180      	movs	r1, #128	; 0x80
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 f840 	bl	800b5ba <UART_WaitOnFlagUntilTimeout>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e036      	b.n	800b5b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10b      	bne.n	800b562 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b558:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	3302      	adds	r3, #2
 800b55e:	61bb      	str	r3, [r7, #24]
 800b560:	e007      	b.n	800b572 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	781a      	ldrb	r2, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	3301      	adds	r3, #1
 800b570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b576:	b29b      	uxth	r3, r3
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b584:	b29b      	uxth	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1cf      	bne.n	800b52a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2200      	movs	r2, #0
 800b592:	2140      	movs	r1, #64	; 0x40
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 f810 	bl	800b5ba <UART_WaitOnFlagUntilTimeout>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e006      	b.n	800b5b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	e000      	b.n	800b5b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b5b0:	2302      	movs	r3, #2
  }
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b090      	sub	sp, #64	; 0x40
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	60f8      	str	r0, [r7, #12]
 800b5c2:	60b9      	str	r1, [r7, #8]
 800b5c4:	603b      	str	r3, [r7, #0]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5ca:	e050      	b.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d2:	d04c      	beq.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d007      	beq.n	800b5ea <UART_WaitOnFlagUntilTimeout+0x30>
 800b5da:	f7fa fb0b 	bl	8005bf4 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d241      	bcs.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	330c      	adds	r3, #12
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	e853 3f00 	ldrex	r3, [r3]
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	330c      	adds	r3, #12
 800b608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b60a:	637a      	str	r2, [r7, #52]	; 0x34
 800b60c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e5      	bne.n	800b5ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3314      	adds	r3, #20
 800b624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	e853 3f00 	ldrex	r3, [r3]
 800b62c:	613b      	str	r3, [r7, #16]
   return(result);
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f023 0301 	bic.w	r3, r3, #1
 800b634:	63bb      	str	r3, [r7, #56]	; 0x38
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3314      	adds	r3, #20
 800b63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b63e:	623a      	str	r2, [r7, #32]
 800b640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b642:	69f9      	ldr	r1, [r7, #28]
 800b644:	6a3a      	ldr	r2, [r7, #32]
 800b646:	e841 2300 	strex	r3, r2, [r1]
 800b64a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1e5      	bne.n	800b61e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2220      	movs	r2, #32
 800b656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2220      	movs	r2, #32
 800b65e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e00f      	b.n	800b68e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	4013      	ands	r3, r2
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	bf0c      	ite	eq
 800b67e:	2301      	moveq	r3, #1
 800b680:	2300      	movne	r3, #0
 800b682:	b2db      	uxtb	r3, r3
 800b684:	461a      	mov	r2, r3
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d09f      	beq.n	800b5cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3740      	adds	r7, #64	; 0x40
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b69c:	b0c0      	sub	sp, #256	; 0x100
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b4:	68d9      	ldr	r1, [r3, #12]
 800b6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	ea40 0301 	orr.w	r3, r0, r1
 800b6c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	689a      	ldr	r2, [r3, #8]
 800b6c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	431a      	orrs	r2, r3
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6f0:	f021 010c 	bic.w	r1, r1, #12
 800b6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6fe:	430b      	orrs	r3, r1
 800b700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b712:	6999      	ldr	r1, [r3, #24]
 800b714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	ea40 0301 	orr.w	r3, r0, r1
 800b71e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	4b8f      	ldr	r3, [pc, #572]	; (800b964 <UART_SetConfig+0x2cc>)
 800b728:	429a      	cmp	r2, r3
 800b72a:	d005      	beq.n	800b738 <UART_SetConfig+0xa0>
 800b72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	4b8d      	ldr	r3, [pc, #564]	; (800b968 <UART_SetConfig+0x2d0>)
 800b734:	429a      	cmp	r2, r3
 800b736:	d104      	bne.n	800b742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b738:	f7fe f9a4 	bl	8009a84 <HAL_RCC_GetPCLK2Freq>
 800b73c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b740:	e003      	b.n	800b74a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b742:	f7fe f98b 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800b746:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b74a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b754:	f040 810c 	bne.w	800b970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b762:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b76a:	4622      	mov	r2, r4
 800b76c:	462b      	mov	r3, r5
 800b76e:	1891      	adds	r1, r2, r2
 800b770:	65b9      	str	r1, [r7, #88]	; 0x58
 800b772:	415b      	adcs	r3, r3
 800b774:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b77a:	4621      	mov	r1, r4
 800b77c:	eb12 0801 	adds.w	r8, r2, r1
 800b780:	4629      	mov	r1, r5
 800b782:	eb43 0901 	adc.w	r9, r3, r1
 800b786:	f04f 0200 	mov.w	r2, #0
 800b78a:	f04f 0300 	mov.w	r3, #0
 800b78e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b79a:	4690      	mov	r8, r2
 800b79c:	4699      	mov	r9, r3
 800b79e:	4623      	mov	r3, r4
 800b7a0:	eb18 0303 	adds.w	r3, r8, r3
 800b7a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	eb49 0303 	adc.w	r3, r9, r3
 800b7ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b7c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	18db      	adds	r3, r3, r3
 800b7ca:	653b      	str	r3, [r7, #80]	; 0x50
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	eb42 0303 	adc.w	r3, r2, r3
 800b7d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b7d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7dc:	f7f4 fcfc 	bl	80001d8 <__aeabi_uldivmod>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4b61      	ldr	r3, [pc, #388]	; (800b96c <UART_SetConfig+0x2d4>)
 800b7e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ea:	095b      	lsrs	r3, r3, #5
 800b7ec:	011c      	lsls	r4, r3, #4
 800b7ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b800:	4642      	mov	r2, r8
 800b802:	464b      	mov	r3, r9
 800b804:	1891      	adds	r1, r2, r2
 800b806:	64b9      	str	r1, [r7, #72]	; 0x48
 800b808:	415b      	adcs	r3, r3
 800b80a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b80c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b810:	4641      	mov	r1, r8
 800b812:	eb12 0a01 	adds.w	sl, r2, r1
 800b816:	4649      	mov	r1, r9
 800b818:	eb43 0b01 	adc.w	fp, r3, r1
 800b81c:	f04f 0200 	mov.w	r2, #0
 800b820:	f04f 0300 	mov.w	r3, #0
 800b824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b82c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b830:	4692      	mov	sl, r2
 800b832:	469b      	mov	fp, r3
 800b834:	4643      	mov	r3, r8
 800b836:	eb1a 0303 	adds.w	r3, sl, r3
 800b83a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b83e:	464b      	mov	r3, r9
 800b840:	eb4b 0303 	adc.w	r3, fp, r3
 800b844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b854:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b85c:	460b      	mov	r3, r1
 800b85e:	18db      	adds	r3, r3, r3
 800b860:	643b      	str	r3, [r7, #64]	; 0x40
 800b862:	4613      	mov	r3, r2
 800b864:	eb42 0303 	adc.w	r3, r2, r3
 800b868:	647b      	str	r3, [r7, #68]	; 0x44
 800b86a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b86e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b872:	f7f4 fcb1 	bl	80001d8 <__aeabi_uldivmod>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4611      	mov	r1, r2
 800b87c:	4b3b      	ldr	r3, [pc, #236]	; (800b96c <UART_SetConfig+0x2d4>)
 800b87e:	fba3 2301 	umull	r2, r3, r3, r1
 800b882:	095b      	lsrs	r3, r3, #5
 800b884:	2264      	movs	r2, #100	; 0x64
 800b886:	fb02 f303 	mul.w	r3, r2, r3
 800b88a:	1acb      	subs	r3, r1, r3
 800b88c:	00db      	lsls	r3, r3, #3
 800b88e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b892:	4b36      	ldr	r3, [pc, #216]	; (800b96c <UART_SetConfig+0x2d4>)
 800b894:	fba3 2302 	umull	r2, r3, r3, r2
 800b898:	095b      	lsrs	r3, r3, #5
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8a0:	441c      	add	r4, r3
 800b8a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b8b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b8b4:	4642      	mov	r2, r8
 800b8b6:	464b      	mov	r3, r9
 800b8b8:	1891      	adds	r1, r2, r2
 800b8ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800b8bc:	415b      	adcs	r3, r3
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	1851      	adds	r1, r2, r1
 800b8c8:	6339      	str	r1, [r7, #48]	; 0x30
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	414b      	adcs	r3, r1
 800b8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	f04f 0300 	mov.w	r3, #0
 800b8d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8dc:	4659      	mov	r1, fp
 800b8de:	00cb      	lsls	r3, r1, #3
 800b8e0:	4651      	mov	r1, sl
 800b8e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8e6:	4651      	mov	r1, sl
 800b8e8:	00ca      	lsls	r2, r1, #3
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	189b      	adds	r3, r3, r2
 800b8f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	460a      	mov	r2, r1
 800b8fc:	eb42 0303 	adc.w	r3, r2, r3
 800b900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b910:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b918:	460b      	mov	r3, r1
 800b91a:	18db      	adds	r3, r3, r3
 800b91c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b91e:	4613      	mov	r3, r2
 800b920:	eb42 0303 	adc.w	r3, r2, r3
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b92a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b92e:	f7f4 fc53 	bl	80001d8 <__aeabi_uldivmod>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4b0d      	ldr	r3, [pc, #52]	; (800b96c <UART_SetConfig+0x2d4>)
 800b938:	fba3 1302 	umull	r1, r3, r3, r2
 800b93c:	095b      	lsrs	r3, r3, #5
 800b93e:	2164      	movs	r1, #100	; 0x64
 800b940:	fb01 f303 	mul.w	r3, r1, r3
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	3332      	adds	r3, #50	; 0x32
 800b94a:	4a08      	ldr	r2, [pc, #32]	; (800b96c <UART_SetConfig+0x2d4>)
 800b94c:	fba2 2303 	umull	r2, r3, r2, r3
 800b950:	095b      	lsrs	r3, r3, #5
 800b952:	f003 0207 	and.w	r2, r3, #7
 800b956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4422      	add	r2, r4
 800b95e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b960:	e105      	b.n	800bb6e <UART_SetConfig+0x4d6>
 800b962:	bf00      	nop
 800b964:	40011000 	.word	0x40011000
 800b968:	40011400 	.word	0x40011400
 800b96c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b974:	2200      	movs	r2, #0
 800b976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b97a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b97e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b982:	4642      	mov	r2, r8
 800b984:	464b      	mov	r3, r9
 800b986:	1891      	adds	r1, r2, r2
 800b988:	6239      	str	r1, [r7, #32]
 800b98a:	415b      	adcs	r3, r3
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
 800b98e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b992:	4641      	mov	r1, r8
 800b994:	1854      	adds	r4, r2, r1
 800b996:	4649      	mov	r1, r9
 800b998:	eb43 0501 	adc.w	r5, r3, r1
 800b99c:	f04f 0200 	mov.w	r2, #0
 800b9a0:	f04f 0300 	mov.w	r3, #0
 800b9a4:	00eb      	lsls	r3, r5, #3
 800b9a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9aa:	00e2      	lsls	r2, r4, #3
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	461d      	mov	r5, r3
 800b9b0:	4643      	mov	r3, r8
 800b9b2:	18e3      	adds	r3, r4, r3
 800b9b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b9b8:	464b      	mov	r3, r9
 800b9ba:	eb45 0303 	adc.w	r3, r5, r3
 800b9be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9d2:	f04f 0200 	mov.w	r2, #0
 800b9d6:	f04f 0300 	mov.w	r3, #0
 800b9da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9de:	4629      	mov	r1, r5
 800b9e0:	008b      	lsls	r3, r1, #2
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	008a      	lsls	r2, r1, #2
 800b9ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9f0:	f7f4 fbf2 	bl	80001d8 <__aeabi_uldivmod>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4b60      	ldr	r3, [pc, #384]	; (800bb7c <UART_SetConfig+0x4e4>)
 800b9fa:	fba3 2302 	umull	r2, r3, r3, r2
 800b9fe:	095b      	lsrs	r3, r3, #5
 800ba00:	011c      	lsls	r4, r3, #4
 800ba02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ba14:	4642      	mov	r2, r8
 800ba16:	464b      	mov	r3, r9
 800ba18:	1891      	adds	r1, r2, r2
 800ba1a:	61b9      	str	r1, [r7, #24]
 800ba1c:	415b      	adcs	r3, r3
 800ba1e:	61fb      	str	r3, [r7, #28]
 800ba20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba24:	4641      	mov	r1, r8
 800ba26:	1851      	adds	r1, r2, r1
 800ba28:	6139      	str	r1, [r7, #16]
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	414b      	adcs	r3, r1
 800ba2e:	617b      	str	r3, [r7, #20]
 800ba30:	f04f 0200 	mov.w	r2, #0
 800ba34:	f04f 0300 	mov.w	r3, #0
 800ba38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba3c:	4659      	mov	r1, fp
 800ba3e:	00cb      	lsls	r3, r1, #3
 800ba40:	4651      	mov	r1, sl
 800ba42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba46:	4651      	mov	r1, sl
 800ba48:	00ca      	lsls	r2, r1, #3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4642      	mov	r2, r8
 800ba52:	189b      	adds	r3, r3, r2
 800ba54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba58:	464b      	mov	r3, r9
 800ba5a:	460a      	mov	r2, r1
 800ba5c:	eb42 0303 	adc.w	r3, r2, r3
 800ba60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba70:	f04f 0200 	mov.w	r2, #0
 800ba74:	f04f 0300 	mov.w	r3, #0
 800ba78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	008b      	lsls	r3, r1, #2
 800ba80:	4641      	mov	r1, r8
 800ba82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba86:	4641      	mov	r1, r8
 800ba88:	008a      	lsls	r2, r1, #2
 800ba8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba8e:	f7f4 fba3 	bl	80001d8 <__aeabi_uldivmod>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4b39      	ldr	r3, [pc, #228]	; (800bb7c <UART_SetConfig+0x4e4>)
 800ba98:	fba3 1302 	umull	r1, r3, r3, r2
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	2164      	movs	r1, #100	; 0x64
 800baa0:	fb01 f303 	mul.w	r3, r1, r3
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	3332      	adds	r3, #50	; 0x32
 800baaa:	4a34      	ldr	r2, [pc, #208]	; (800bb7c <UART_SetConfig+0x4e4>)
 800baac:	fba2 2303 	umull	r2, r3, r2, r3
 800bab0:	095b      	lsrs	r3, r3, #5
 800bab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bab6:	441c      	add	r4, r3
 800bab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800babc:	2200      	movs	r2, #0
 800babe:	673b      	str	r3, [r7, #112]	; 0x70
 800bac0:	677a      	str	r2, [r7, #116]	; 0x74
 800bac2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bac6:	4642      	mov	r2, r8
 800bac8:	464b      	mov	r3, r9
 800baca:	1891      	adds	r1, r2, r2
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	415b      	adcs	r3, r3
 800bad0:	60fb      	str	r3, [r7, #12]
 800bad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bad6:	4641      	mov	r1, r8
 800bad8:	1851      	adds	r1, r2, r1
 800bada:	6039      	str	r1, [r7, #0]
 800badc:	4649      	mov	r1, r9
 800bade:	414b      	adcs	r3, r1
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	f04f 0200 	mov.w	r2, #0
 800bae6:	f04f 0300 	mov.w	r3, #0
 800baea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800baee:	4659      	mov	r1, fp
 800baf0:	00cb      	lsls	r3, r1, #3
 800baf2:	4651      	mov	r1, sl
 800baf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800baf8:	4651      	mov	r1, sl
 800bafa:	00ca      	lsls	r2, r1, #3
 800bafc:	4610      	mov	r0, r2
 800bafe:	4619      	mov	r1, r3
 800bb00:	4603      	mov	r3, r0
 800bb02:	4642      	mov	r2, r8
 800bb04:	189b      	adds	r3, r3, r2
 800bb06:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb08:	464b      	mov	r3, r9
 800bb0a:	460a      	mov	r2, r1
 800bb0c:	eb42 0303 	adc.w	r3, r2, r3
 800bb10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	663b      	str	r3, [r7, #96]	; 0x60
 800bb1c:	667a      	str	r2, [r7, #100]	; 0x64
 800bb1e:	f04f 0200 	mov.w	r2, #0
 800bb22:	f04f 0300 	mov.w	r3, #0
 800bb26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	008b      	lsls	r3, r1, #2
 800bb2e:	4641      	mov	r1, r8
 800bb30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb34:	4641      	mov	r1, r8
 800bb36:	008a      	lsls	r2, r1, #2
 800bb38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb3c:	f7f4 fb4c 	bl	80001d8 <__aeabi_uldivmod>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4b0d      	ldr	r3, [pc, #52]	; (800bb7c <UART_SetConfig+0x4e4>)
 800bb46:	fba3 1302 	umull	r1, r3, r3, r2
 800bb4a:	095b      	lsrs	r3, r3, #5
 800bb4c:	2164      	movs	r1, #100	; 0x64
 800bb4e:	fb01 f303 	mul.w	r3, r1, r3
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	011b      	lsls	r3, r3, #4
 800bb56:	3332      	adds	r3, #50	; 0x32
 800bb58:	4a08      	ldr	r2, [pc, #32]	; (800bb7c <UART_SetConfig+0x4e4>)
 800bb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb5e:	095b      	lsrs	r3, r3, #5
 800bb60:	f003 020f 	and.w	r2, r3, #15
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4422      	add	r2, r4
 800bb6c:	609a      	str	r2, [r3, #8]
}
 800bb6e:	bf00      	nop
 800bb70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb74:	46bd      	mov	sp, r7
 800bb76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb7a:	bf00      	nop
 800bb7c:	51eb851f 	.word	0x51eb851f

0800bb80 <__libc_init_array>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	4d0d      	ldr	r5, [pc, #52]	; (800bbb8 <__libc_init_array+0x38>)
 800bb84:	4c0d      	ldr	r4, [pc, #52]	; (800bbbc <__libc_init_array+0x3c>)
 800bb86:	1b64      	subs	r4, r4, r5
 800bb88:	10a4      	asrs	r4, r4, #2
 800bb8a:	2600      	movs	r6, #0
 800bb8c:	42a6      	cmp	r6, r4
 800bb8e:	d109      	bne.n	800bba4 <__libc_init_array+0x24>
 800bb90:	4d0b      	ldr	r5, [pc, #44]	; (800bbc0 <__libc_init_array+0x40>)
 800bb92:	4c0c      	ldr	r4, [pc, #48]	; (800bbc4 <__libc_init_array+0x44>)
 800bb94:	f000 f87c 	bl	800bc90 <_init>
 800bb98:	1b64      	subs	r4, r4, r5
 800bb9a:	10a4      	asrs	r4, r4, #2
 800bb9c:	2600      	movs	r6, #0
 800bb9e:	42a6      	cmp	r6, r4
 800bba0:	d105      	bne.n	800bbae <__libc_init_array+0x2e>
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bba8:	4798      	blx	r3
 800bbaa:	3601      	adds	r6, #1
 800bbac:	e7ee      	b.n	800bb8c <__libc_init_array+0xc>
 800bbae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb2:	4798      	blx	r3
 800bbb4:	3601      	adds	r6, #1
 800bbb6:	e7f2      	b.n	800bb9e <__libc_init_array+0x1e>
 800bbb8:	0800ee70 	.word	0x0800ee70
 800bbbc:	0800ee70 	.word	0x0800ee70
 800bbc0:	0800ee70 	.word	0x0800ee70
 800bbc4:	0800ee74 	.word	0x0800ee74

0800bbc8 <__itoa>:
 800bbc8:	1e93      	subs	r3, r2, #2
 800bbca:	2b22      	cmp	r3, #34	; 0x22
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	460c      	mov	r4, r1
 800bbd0:	d904      	bls.n	800bbdc <__itoa+0x14>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	700b      	strb	r3, [r1, #0]
 800bbd6:	461c      	mov	r4, r3
 800bbd8:	4620      	mov	r0, r4
 800bbda:	bd10      	pop	{r4, pc}
 800bbdc:	2a0a      	cmp	r2, #10
 800bbde:	d109      	bne.n	800bbf4 <__itoa+0x2c>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	da07      	bge.n	800bbf4 <__itoa+0x2c>
 800bbe4:	232d      	movs	r3, #45	; 0x2d
 800bbe6:	700b      	strb	r3, [r1, #0]
 800bbe8:	4240      	negs	r0, r0
 800bbea:	2101      	movs	r1, #1
 800bbec:	4421      	add	r1, r4
 800bbee:	f000 f80d 	bl	800bc0c <__utoa>
 800bbf2:	e7f1      	b.n	800bbd8 <__itoa+0x10>
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	e7f9      	b.n	800bbec <__itoa+0x24>

0800bbf8 <itoa>:
 800bbf8:	f7ff bfe6 	b.w	800bbc8 <__itoa>

0800bbfc <memset>:
 800bbfc:	4402      	add	r2, r0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d100      	bne.n	800bc06 <memset+0xa>
 800bc04:	4770      	bx	lr
 800bc06:	f803 1b01 	strb.w	r1, [r3], #1
 800bc0a:	e7f9      	b.n	800bc00 <memset+0x4>

0800bc0c <__utoa>:
 800bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc0e:	4c1f      	ldr	r4, [pc, #124]	; (800bc8c <__utoa+0x80>)
 800bc10:	b08b      	sub	sp, #44	; 0x2c
 800bc12:	4605      	mov	r5, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	466e      	mov	r6, sp
 800bc18:	f104 0c20 	add.w	ip, r4, #32
 800bc1c:	6820      	ldr	r0, [r4, #0]
 800bc1e:	6861      	ldr	r1, [r4, #4]
 800bc20:	4637      	mov	r7, r6
 800bc22:	c703      	stmia	r7!, {r0, r1}
 800bc24:	3408      	adds	r4, #8
 800bc26:	4564      	cmp	r4, ip
 800bc28:	463e      	mov	r6, r7
 800bc2a:	d1f7      	bne.n	800bc1c <__utoa+0x10>
 800bc2c:	7921      	ldrb	r1, [r4, #4]
 800bc2e:	7139      	strb	r1, [r7, #4]
 800bc30:	1e91      	subs	r1, r2, #2
 800bc32:	6820      	ldr	r0, [r4, #0]
 800bc34:	6038      	str	r0, [r7, #0]
 800bc36:	2922      	cmp	r1, #34	; 0x22
 800bc38:	f04f 0100 	mov.w	r1, #0
 800bc3c:	d904      	bls.n	800bc48 <__utoa+0x3c>
 800bc3e:	7019      	strb	r1, [r3, #0]
 800bc40:	460b      	mov	r3, r1
 800bc42:	4618      	mov	r0, r3
 800bc44:	b00b      	add	sp, #44	; 0x2c
 800bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc48:	1e58      	subs	r0, r3, #1
 800bc4a:	4684      	mov	ip, r0
 800bc4c:	fbb5 f7f2 	udiv	r7, r5, r2
 800bc50:	fb02 5617 	mls	r6, r2, r7, r5
 800bc54:	3628      	adds	r6, #40	; 0x28
 800bc56:	446e      	add	r6, sp
 800bc58:	460c      	mov	r4, r1
 800bc5a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bc5e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bc62:	462e      	mov	r6, r5
 800bc64:	42b2      	cmp	r2, r6
 800bc66:	f101 0101 	add.w	r1, r1, #1
 800bc6a:	463d      	mov	r5, r7
 800bc6c:	d9ee      	bls.n	800bc4c <__utoa+0x40>
 800bc6e:	2200      	movs	r2, #0
 800bc70:	545a      	strb	r2, [r3, r1]
 800bc72:	1919      	adds	r1, r3, r4
 800bc74:	1aa5      	subs	r5, r4, r2
 800bc76:	42aa      	cmp	r2, r5
 800bc78:	dae3      	bge.n	800bc42 <__utoa+0x36>
 800bc7a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bc7e:	780e      	ldrb	r6, [r1, #0]
 800bc80:	7006      	strb	r6, [r0, #0]
 800bc82:	3201      	adds	r2, #1
 800bc84:	f801 5901 	strb.w	r5, [r1], #-1
 800bc88:	e7f4      	b.n	800bc74 <__utoa+0x68>
 800bc8a:	bf00      	nop
 800bc8c:	0800ee40 	.word	0x0800ee40

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
