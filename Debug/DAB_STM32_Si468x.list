
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003480  0800d334  0800d334  0001d334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107b4  080107b4  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  080107b4  080107b4  000207b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107bc  080107bc  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107bc  080107bc  000207bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080107c0  080107c0  000207c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080107c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030188  2**0
                  CONTENTS
 10 .bss          00007050  20000188  20000188  00030188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200071d8  200071d8  00030188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194ea  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a6  00000000  00000000  000496a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0004d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  0004e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245f6  00000000  00000000  0004f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cde5  00000000  00000000  00073f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b6f  00000000  00000000  00090d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001638da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058e8  00000000  00000000  0016392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d31c 	.word	0x0800d31c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d31c 	.word	0x0800d31c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004f4:	f000 f914 	bl	8000720 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fb97 	bl	8000c2c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004fe:	20cb      	movs	r0, #203	; 0xcb
 8000500:	f000 fb94 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8000504:	2039      	movs	r0, #57	; 0x39
 8000506:	f000 fba0 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800050a:	202c      	movs	r0, #44	; 0x2c
 800050c:	f000 fb9d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fb9a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000516:	2034      	movs	r0, #52	; 0x34
 8000518:	f000 fb97 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fb94 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8000522:	20cf      	movs	r0, #207	; 0xcf
 8000524:	f000 fb82 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fb8e 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800052e:	20c1      	movs	r0, #193	; 0xc1
 8000530:	f000 fb8b 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000534:	2030      	movs	r0, #48	; 0x30
 8000536:	f000 fb88 	bl	8000c4a <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800053a:	20e8      	movs	r0, #232	; 0xe8
 800053c:	f000 fb76 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000540:	2085      	movs	r0, #133	; 0x85
 8000542:	f000 fb82 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb7f 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fb7c 	bl	8000c4a <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8000552:	20ea      	movs	r0, #234	; 0xea
 8000554:	f000 fb6a 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb76 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fb73 	bl	8000c4a <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000564:	20ed      	movs	r0, #237	; 0xed
 8000566:	f000 fb61 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f000 fb6d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 fb6a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000576:	2012      	movs	r0, #18
 8000578:	f000 fb67 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 800057c:	2081      	movs	r0, #129	; 0x81
 800057e:	f000 fb64 	bl	8000c4a <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8000582:	20f7      	movs	r0, #247	; 0xf7
 8000584:	f000 fb52 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 fb5e 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800058e:	20c0      	movs	r0, #192	; 0xc0
 8000590:	f000 fb4c 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000594:	2010      	movs	r0, #16
 8000596:	f000 fb58 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 800059a:	20c1      	movs	r0, #193	; 0xc1
 800059c:	f000 fb46 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005a0:	2010      	movs	r0, #16
 80005a2:	f000 fb52 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005a6:	20c5      	movs	r0, #197	; 0xc5
 80005a8:	f000 fb40 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005ac:	203e      	movs	r0, #62	; 0x3e
 80005ae:	f000 fb4c 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fb49 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005b8:	20c7      	movs	r0, #199	; 0xc7
 80005ba:	f000 fb37 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005be:	2086      	movs	r0, #134	; 0x86
 80005c0:	f000 fb43 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005c4:	2036      	movs	r0, #54	; 0x36
 80005c6:	f000 fb31 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005ca:	2048      	movs	r0, #72	; 0x48
 80005cc:	f000 fb3d 	bl	8000c4a <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005d0:	203a      	movs	r0, #58	; 0x3a
 80005d2:	f000 fb2b 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005d6:	2055      	movs	r0, #85	; 0x55
 80005d8:	f000 fb37 	bl	8000c4a <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005dc:	20b1      	movs	r0, #177	; 0xb1
 80005de:	f000 fb25 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fb31 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005e8:	2018      	movs	r0, #24
 80005ea:	f000 fb2e 	bl	8000c4a <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005ee:	20b6      	movs	r0, #182	; 0xb6
 80005f0:	f000 fb1c 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005f4:	2008      	movs	r0, #8
 80005f6:	f000 fb28 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005fa:	2082      	movs	r0, #130	; 0x82
 80005fc:	f000 fb25 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000600:	2027      	movs	r0, #39	; 0x27
 8000602:	f000 fb22 	bl	8000c4a <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8000606:	20f2      	movs	r0, #242	; 0xf2
 8000608:	f000 fb10 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fb1c 	bl	8000c4a <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8000612:	2026      	movs	r0, #38	; 0x26
 8000614:	f000 fb0a 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fb16 	bl	8000c4a <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800061e:	20e0      	movs	r0, #224	; 0xe0
 8000620:	f000 fb04 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000624:	200f      	movs	r0, #15
 8000626:	f000 fb10 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800062a:	2031      	movs	r0, #49	; 0x31
 800062c:	f000 fb0d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000630:	202b      	movs	r0, #43	; 0x2b
 8000632:	f000 fb0a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000636:	200c      	movs	r0, #12
 8000638:	f000 fb07 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800063c:	200e      	movs	r0, #14
 800063e:	f000 fb04 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000642:	2008      	movs	r0, #8
 8000644:	f000 fb01 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000648:	204e      	movs	r0, #78	; 0x4e
 800064a:	f000 fafe 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800064e:	20f1      	movs	r0, #241	; 0xf1
 8000650:	f000 fafb 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000654:	2037      	movs	r0, #55	; 0x37
 8000656:	f000 faf8 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800065a:	2007      	movs	r0, #7
 800065c:	f000 faf5 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000660:	2010      	movs	r0, #16
 8000662:	f000 faf2 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 faef 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800066c:	200e      	movs	r0, #14
 800066e:	f000 faec 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8000672:	2009      	movs	r0, #9
 8000674:	f000 fae9 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fae6 	bl	8000c4a <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800067e:	20e1      	movs	r0, #225	; 0xe1
 8000680:	f000 fad4 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fae0 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800068a:	200e      	movs	r0, #14
 800068c:	f000 fadd 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8000690:	2014      	movs	r0, #20
 8000692:	f000 fada 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 fad7 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 800069c:	2011      	movs	r0, #17
 800069e:	f000 fad4 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006a2:	2007      	movs	r0, #7
 80006a4:	f000 fad1 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 face 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006ae:	20c1      	movs	r0, #193	; 0xc1
 80006b0:	f000 facb 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006b4:	2048      	movs	r0, #72	; 0x48
 80006b6:	f000 fac8 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f000 fac5 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f000 fac2 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006c6:	200c      	movs	r0, #12
 80006c8:	f000 fabf 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006cc:	2031      	movs	r0, #49	; 0x31
 80006ce:	f000 fabc 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006d2:	2036      	movs	r0, #54	; 0x36
 80006d4:	f000 fab9 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006d8:	200f      	movs	r0, #15
 80006da:	f000 fab6 	bl	8000c4a <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f000 faa4 	bl	8000c2c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006e4:	2029      	movs	r0, #41	; 0x29
 80006e6:	f000 faa1 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006ea:	202c      	movs	r0, #44	; 0x2c
 80006ec:	f000 faad 	bl	8000c4a <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f83d 	bl	8000770 <ILI9341_Set_Rotation>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 8000706:	1df9      	adds	r1, r7, #7
 8000708:	2301      	movs	r3, #1
 800070a:	2201      	movs	r2, #1
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <ILI9341_SPI_Send+0x20>)
 800070e:	f00a fd9c 	bl	800b24a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20006f54 	.word	0x20006f54

08000720 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	RESET_ON;
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <ILI9341_Reset+0x4c>)
 800072c:	f007 fbb8 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000730:	2032      	movs	r0, #50	; 0x32
 8000732:	f006 fdb1 	bl	8007298 <HAL_Delay>
	RESET_OFF;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <ILI9341_Reset+0x4c>)
 800073e:	f007 fbaf 	bl	8007ea0 <HAL_GPIO_WritePin>
	CS_ON;
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <ILI9341_Reset+0x4c>)
 800074a:	f007 fba9 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f006 fda2 	bl	8007298 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fa69 	bl	8000c2c <ILI9341_Send_Command>
	CS_OFF;
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_Reset+0x4c>)
 8000762:	f007 fb9d 	bl	8007ea0 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020c00 	.word	0x40020c00

08000770 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fa56 	bl	8000c2c <ILI9341_Send_Command>
	switch (rotation) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d836      	bhi.n	80007f4 <ILI9341_Set_Rotation+0x84>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <ILI9341_Set_Rotation+0x1c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007b3 	.word	0x080007b3
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007df 	.word	0x080007df
	case 0:
		ILI9341_Send_Data(0x48);
 800079c:	2048      	movs	r0, #72	; 0x48
 800079e:	f000 fa54 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 240;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007a4:	22f0      	movs	r2, #240	; 0xf0
 80007a6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	601a      	str	r2, [r3, #0]
		break;
 80007b0:	e020      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f000 fa49 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 320;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	601a      	str	r2, [r3, #0]
		break;
 80007c6:	e015      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007c8:	2088      	movs	r0, #136	; 0x88
 80007ca:	f000 fa3e 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007d0:	22f0      	movs	r2, #240	; 0xf0
 80007d2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	601a      	str	r2, [r3, #0]
		break;
 80007dc:	e00a      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007de:	20e8      	movs	r0, #232	; 0xe8
 80007e0:	f000 fa33 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ea:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007ee:	22f0      	movs	r2, #240	; 0xf0
 80007f0:	601a      	str	r2, [r3, #0]
		break;
 80007f2:	bf00      	nop
	}
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000004 	.word	0x20000004

08000804 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000818:	f007 fb42 	bl	8007ea0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f007 fb3c 	bl	8007ea0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff66 	bl	80006fc <ILI9341_SPI_Send>

	DC_DATA;
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000838:	f007 fb32 	bl	8007ea0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	0e1b      	lsrs	r3, r3, #24
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff5a 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff54 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff4e 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff49 	bl	80006fc <ILI9341_SPI_Send>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000898:	6979      	ldr	r1, [r7, #20]
 800089a:	202a      	movs	r0, #42	; 0x2a
 800089c:	f7ff ffb2 	bl	8000804 <ILI9341_SPI_Send_32>
	t = y1;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	041b      	lsls	r3, r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	202b      	movs	r0, #43	; 0x2b
 80008b6:	f7ff ffa5 	bl	8000804 <ILI9341_SPI_Send_32>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ffcc 	bl	8000878 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	fb01 f202 	mul.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9b7 	bl	8000c68 <ILI9341_Send_Burst>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db31      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db2e      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d229      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d224      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	f7ff ff96 	bl	8000878 <ILI9341_Set_Address>
	DC_COMMAND;
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000954:	f007 faa4 	bl	8007ea0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000958:	202c      	movs	r0, #44	; 0x2c
 800095a:	f7ff fecf 	bl	80006fc <ILI9341_SPI_Send>
	DC_DATA;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000966:	f007 fa9b 	bl	8007ea0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec3 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff febe 	bl	80006fc <ILI9341_SPI_Send>
 8000980:	e000      	b.n	8000984 <ILI9341_Draw_Pixel+0x78>
		return;
 8000982:	bf00      	nop
}
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004
 8000994:	40020c00 	.word	0x40020c00

08000998 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f7ff ff63 	bl	8000878 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	b298      	uxth	r0, r3
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	3301      	adds	r3, #1
 80009be:	4619      	mov	r1, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	fb01 f303 	mul.w	r3, r1, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 f94b 	bl	8000c68 <ILI9341_Send_Burst>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b08c      	sub	sp, #48	; 0x30
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1acb      	subs	r3, r1, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bfb8      	it	lt
 8000a00:	425b      	neglt	r3, r3
 8000a02:	429a      	cmp	r2, r3
 8000a04:	bfcc      	ite	gt
 8000a06:	2301      	movgt	r3, #1
 8000a08:	2300      	movle	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00d      	beq.n	8000a30 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a20:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	843b      	strh	r3, [r7, #32]
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d90d      	bls.n	8000a54 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	83fb      	strh	r3, [r7, #30]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a44:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	83bb      	strh	r3, [r7, #28]
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	0fda      	lsrs	r2, r3, #31
 8000a6e:	4413      	add	r3, r2
 8000a70:	105b      	asrs	r3, r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d202      	bcs.n	8000a82 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a80:	e023      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a88:	e01f      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff38 	bl	800090c <ILI9341_Draw_Pixel>
 8000a9c:	e005      	b.n	8000aaa <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da05      	bge.n	8000ac4 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d9db      	bls.n	8000a8a <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
	switch (size)
 8000aea:	7f3b      	ldrb	r3, [r7, #28]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d061      	beq.n	8000bb4 <ILI9341_Draw_String+0xd8>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	f300 8092 	bgt.w	8000c1a <ILI9341_Draw_String+0x13e>
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d028      	beq.n	8000b4c <ILI9341_Draw_String+0x70>
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d02b      	beq.n	8000b56 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000afe:	e08c      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b00:	7f3b      	ldrb	r3, [r7, #28]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	441a      	add	r2, r3
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d907      	bls.n	8000b22 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b16:	7f3b      	ldrb	r3, [r7, #28]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	7f3a      	ldrb	r2, [r7, #28]
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	f000 f95a 	bl	8000dec <ILI9341_Draw_Char>
			x += size*8-2;
 8000b38:	7f3b      	ldrb	r3, [r7, #28]
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	3b02      	subs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1d5      	bne.n	8000b00 <ILI9341_Draw_String+0x24>
	break;
 8000b54:	e061      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b5c:	e025      	b.n	8000baa <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b5e:	7f3b      	ldrb	r3, [r7, #28]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	441a      	add	r2, r3
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d907      	bls.n	8000b80 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b74:	7f3b      	ldrb	r3, [r7, #28]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	7f3a      	ldrb	r2, [r7, #28]
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	f000 f92b 	bl	8000dec <ILI9341_Draw_Char>
			x += hh*8;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
			*str++;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1d5      	bne.n	8000b5e <ILI9341_Draw_String+0x82>
	break;
 8000bb2:	e032      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bba:	e029      	b.n	8000c10 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bbc:	7f3b      	ldrb	r3, [r7, #28]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d907      	bls.n	8000bde <ILI9341_Draw_String+0x102>
				x = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bd2:	7f3b      	ldrb	r3, [r7, #28]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7f3a      	ldrb	r2, [r7, #28]
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	f000 f8fc 	bl	8000dec <ILI9341_Draw_Char>
			x += hh*10;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1d1      	bne.n	8000bbc <ILI9341_Draw_String+0xe0>
	break;
 8000c18:	bf00      	nop
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c36:	f000 fa09 	bl	800104c <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fd5d 	bl	80006fc <ILI9341_SPI_Send>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c54:	f000 f9e8 	bl	8001028 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd4e 	bl	80006fc <ILI9341_SPI_Send>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	4858      	ldr	r0, [pc, #352]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c88:	f007 f90a 	bl	8007ea0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4855      	ldr	r0, [pc, #340]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c94:	f007 f904 	bl	8007ea0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c98:	202c      	movs	r0, #44	; 0x2c
 8000c9a:	f7ff fd2f 	bl	80006fc <ILI9341_SPI_Send>
	DC_DATA;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	4850      	ldr	r0, [pc, #320]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000ca6:	f007 f8fb 	bl	8007ea0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd25 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cb2:	7afb      	ldrb	r3, [r7, #11]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd21 	bl	80006fc <ILI9341_SPI_Send>
	len--;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	099b      	lsrs	r3, r3, #6
 8000cc4:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d169      	bne.n	8000da2 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cce:	e027      	b.n	8000d20 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd10 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd0c 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd08 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd04 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd00 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcfc 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcf8 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fcf4 	bl	80006fc <ILI9341_SPI_Send>
			} while (--i);
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	737b      	strb	r3, [r7, #13]
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1d9      	bne.n	8000cd4 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	81fa      	strh	r2, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1d2      	bne.n	8000cd0 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d32:	737b      	strb	r3, [r7, #13]
 8000d34:	e007      	b.n	8000d46 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcdf 	bl	80006fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fcdb 	bl	80006fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	737a      	strb	r2, [r7, #13]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f2      	bne.n	8000d36 <ILI9341_Send_Burst+0xce>
 8000d50:	e03f      	b.n	8000dd2 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d52:	2310      	movs	r3, #16
 8000d54:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d56:	7b3b      	ldrb	r3, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fccf 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fccb 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d66:	7b3b      	ldrb	r3, [r7, #12]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcc7 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fcc3 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcbf 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fcbb 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcb7 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcb3 	bl	80006fc <ILI9341_SPI_Send>
			} while (--i);
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1d9      	bne.n	8000d56 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	81fa      	strh	r2, [r7, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1d2      	bne.n	8000d52 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000db4:	737b      	strb	r3, [r7, #13]
 8000db6:	e007      	b.n	8000dc8 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc9e 	bl	80006fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fc9a 	bl	80006fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	1e5a      	subs	r2, r3, #1
 8000dcc:	737a      	strb	r2, [r7, #13]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f2      	bne.n	8000db8 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000dda:	f007 f861 	bl	8007ea0 <HAL_GPIO_WritePin>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020c00 	.word	0x40020c00

08000dec <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f000 80b2 	beq.w	8000f68 <ILI9341_Draw_Char+0x17c>
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f300 8104 	bgt.w	8001012 <ILI9341_Draw_Char+0x226>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <ILI9341_Draw_Char+0x28>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d055      	beq.n	8000ebe <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e12:	e0fe      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3305      	adds	r3, #5
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3308      	adds	r3, #8
 8000e22:	f7ff fd29 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	487b      	ldr	r0, [pc, #492]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e2e:	f007 f837 	bl	8007ea0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e32:	202c      	movs	r0, #44	; 0x2c
 8000e34:	f7ff fc62 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3e:	4877      	ldr	r0, [pc, #476]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e40:	f007 f82e 	bl	8007ea0 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	e035      	b.n	8000eb6 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e02c      	b.n	8000eaa <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e54:	3b20      	subs	r3, #32
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <ILI9341_Draw_Char+0x234>)
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	441a      	add	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	fa42 f303 	asr.w	r3, r2, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc3d 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc38 	bl	80006fc <ILI9341_SPI_Send>
 8000e8c:	e00a      	b.n	8000ea4 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc31 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc2c 	bl	80006fc <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	ddcf      	ble.n	8000e50 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	ddc6      	ble.n	8000e4a <ILI9341_Draw_Char+0x5e>
			break;
 8000ebc:	e0a9      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3310      	adds	r3, #16
 8000ecc:	f7ff fcd4 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4851      	ldr	r0, [pc, #324]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000ed8:	f006 ffe2 	bl	8007ea0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000edc:	202c      	movs	r0, #44	; 0x2c
 8000ede:	f7ff fc0d 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	484c      	ldr	r0, [pc, #304]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000eea:	f006 ffd9 	bl	8007ea0 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e035      	b.n	8000f60 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e02c      	b.n	8000f54 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efe:	3b20      	subs	r3, #32
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	441a      	add	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f1c3 0307 	rsb	r3, r3, #7
 8000f14:	fa42 f303 	asr.w	r3, r2, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fbe8 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fbe3 	bl	80006fc <ILI9341_SPI_Send>
 8000f36:	e00a      	b.n	8000f4e <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbdc 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbd7 	bl	80006fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	ddcf      	ble.n	8000efa <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	ddc6      	ble.n	8000ef4 <ILI9341_Draw_Char+0x108>
		break;
 8000f66:	e054      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3309      	adds	r3, #9
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3310      	adds	r3, #16
 8000f76:	f7ff fc7f 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f80:	4826      	ldr	r0, [pc, #152]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f82:	f006 ff8d 	bl	8007ea0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f86:	202c      	movs	r0, #44	; 0x2c
 8000f88:	f7ff fbb8 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f94:	f006 ff84 	bl	8007ea0 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e035      	b.n	800100a <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e02c      	b.n	8000ffe <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa8:	3b20      	subs	r3, #32
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	441a      	add	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	fa42 f303 	asr.w	r3, r2, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb93 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb8e 	bl	80006fc <ILI9341_SPI_Send>
 8000fe0:	e00a      	b.n	8000ff8 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb87 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb82 	bl	80006fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b07      	cmp	r3, #7
 8001002:	ddcf      	ble.n	8000fa4 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b1d      	cmp	r3, #29
 800100e:	ddc6      	ble.n	8000f9e <ILI9341_Draw_Char+0x1b2>
		break;
 8001010:	bf00      	nop
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020c00 	.word	0x40020c00
 8001020:	0800e800 	.word	0x0800e800
 8001024:	0800ead8 	.word	0x0800ead8

08001028 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <Before_Sending_Data+0x20>)
 8001034:	f006 ff34 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <Before_Sending_Data+0x20>)
 8001040:	f006 ff2e 	bl	8007ea0 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020c00 	.word	0x40020c00

0800104c <Before_Sending_Command>:

static void Before_Sending_Command() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <Before_Sending_Command+0x20>)
 8001058:	f006 ff22 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	4802      	ldr	r0, [pc, #8]	; (800106c <Before_Sending_Command+0x20>)
 8001064:	f006 ff1c 	bl	8007ea0 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020c00 	.word	0x40020c00

08001070 <Si468x_dab_init>:

static uint8_t slideshow_data[8500];


void Si468x_dab_init()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001074:	2101      	movs	r1, #1
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <Si468x_dab_init+0xc0>)
 8001078:	f002 fc02 	bl	8003880 <send_debug_msg>
	Si468x_reset();
 800107c:	f000 f85a 	bl	8001134 <Si468x_reset>
	Si468x_power_up();
 8001080:	f000 f874 	bl	800116c <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001084:	f000 f8f6 	bl	8001274 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001088:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800108c:	f000 f966 	bl	800135c <Si468x_firmware_load_flash>
	Si468x_boot();
 8001090:	f000 fa04 	bl	800149c <Si468x_boot>
	Si468x_get_part_info();
 8001094:	f000 fbbc 	bl	8001810 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001098:	f000 fb34 	bl	8001704 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 800109c:	2101      	movs	r1, #1
 800109e:	f241 7012 	movw	r0, #5906	; 0x1712
 80010a2:	f000 fc25 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8a9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010a6:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010aa:	f241 7010 	movw	r0, #5904	; 0x1710
 80010ae:	f000 fc1f 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01c6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010b2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010b6:	f241 7011 	movw	r0, #5905	; 0x1711
 80010ba:	f000 fc19 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010be:	2107      	movs	r1, #7
 80010c0:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010c4:	f000 fc14 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010c8:	2130      	movs	r1, #48	; 0x30
 80010ca:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ce:	f000 fc0f 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010d2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010d6:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010da:	f000 fc09 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 80010de:	f244 0105 	movw	r1, #16389	; 0x4005
 80010e2:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010e6:	f000 fc03 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010ea:	2101      	movs	r1, #1
 80010ec:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010f0:	f000 fbfe 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010f4:	2101      	movs	r1, #1
 80010f6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010fa:	f000 fbf9 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010fe:	2101      	movs	r1, #1
 8001100:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001104:	f000 fbf4 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001108:	2105      	movs	r1, #5
 800110a:	f24b 5001 	movw	r0, #46337	; 0xb501
 800110e:	f000 fbef 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001112:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001116:	f24b 5003 	movw	r0, #46339	; 0xb503
 800111a:	f000 fbe9 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800111e:	2101      	movs	r1, #1
 8001120:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001124:	f000 fbe4 	bl	80018f0 <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001128:	f000 faec 	bl	8001704 <Si468x_get_sys_state>

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	0800d3e4 	.word	0x0800d3e4

08001134 <Si468x_reset>:

void Si468x_reset()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001138:	2101      	movs	r1, #1
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <Si468x_reset+0x30>)
 800113c:	f002 fba0 	bl	8003880 <send_debug_msg>
	RESET_PIN_LOW;
 8001140:	2200      	movs	r2, #0
 8001142:	2120      	movs	r1, #32
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <Si468x_reset+0x34>)
 8001146:	f006 feab 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f006 f8a4 	bl	8007298 <HAL_Delay>
	RESET_PIN_HIGH;
 8001150:	2201      	movs	r2, #1
 8001152:	2120      	movs	r1, #32
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <Si468x_reset+0x34>)
 8001156:	f006 fea3 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800115a:	20c8      	movs	r0, #200	; 0xc8
 800115c:	f006 f89c 	bl	8007298 <HAL_Delay>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800d434 	.word	0x0800d434
 8001168:	40020800 	.word	0x40020800

0800116c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001170:	2101      	movs	r1, #1
 8001172:	4826      	ldr	r0, [pc, #152]	; (800120c <Si468x_power_up+0xa0>)
 8001174:	f002 fb84 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <Si468x_power_up+0xa4>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <Si468x_power_up+0xa4>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <Si468x_power_up+0xa4>)
 8001186:	2217      	movs	r2, #23
 8001188:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <Si468x_power_up+0xa4>)
 800118c:	2250      	movs	r2, #80	; 0x50
 800118e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <Si468x_power_up+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <Si468x_power_up+0xa4>)
 8001198:	22f8      	movs	r2, #248	; 0xf8
 800119a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <Si468x_power_up+0xa4>)
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <Si468x_power_up+0xa4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <Si468x_power_up+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <Si468x_power_up+0xa4>)
 80011b0:	2210      	movs	r2, #16
 80011b2:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <Si468x_power_up+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <Si468x_power_up+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <Si468x_power_up+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <Si468x_power_up+0xa4>)
 80011c8:	2228      	movs	r2, #40	; 0x28
 80011ca:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <Si468x_power_up+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <Si468x_power_up+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011d8:	490d      	ldr	r1, [pc, #52]	; (8001210 <Si468x_power_up+0xa4>)
 80011da:	2010      	movs	r0, #16
 80011dc:	f000 fa58 	bl	8001690 <Si468x_write_command>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <Si468x_power_up+0xa8>)
 80011e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f006 f855 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <Si468x_power_up+0xac>)
 80011f0:	2005      	movs	r0, #5
 80011f2:	f000 fa6f 	bl	80016d4 <Si468x_read_reply>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <Si468x_power_up+0xa8>)
 80011fc:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011fe:	2101      	movs	r1, #1
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <Si468x_power_up+0xb0>)
 8001202:	f002 fb3d 	bl	8003880 <send_debug_msg>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800d448 	.word	0x0800d448
 8001210:	200001a8 	.word	0x200001a8
 8001214:	20003510 	.word	0x20003510
 8001218:	200011a8 	.word	0x200011a8
 800121c:	0800d484 	.word	0x0800d484

08001220 <Si468x_load_init>:

void Si468x_load_init()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001224:	2101      	movs	r1, #1
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <Si468x_load_init+0x44>)
 8001228:	f002 fb2a 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <Si468x_load_init+0x48>)
 800122e:	2206      	movs	r2, #6
 8001230:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <Si468x_load_init+0x48>)
 8001234:	2200      	movs	r2, #0
 8001236:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <Si468x_load_init+0x48>)
 800123a:	2002      	movs	r0, #2
 800123c:	f000 fa28 	bl	8001690 <Si468x_write_command>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <Si468x_load_init+0x4c>)
 8001246:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f006 f825 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <Si468x_load_init+0x50>)
 8001250:	2005      	movs	r0, #5
 8001252:	f000 fa3f 	bl	80016d4 <Si468x_read_reply>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <Si468x_load_init+0x4c>)
 800125c:	701a      	strb	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d4a4 	.word	0x0800d4a4
 8001268:	200001a8 	.word	0x200001a8
 800126c:	20003510 	.word	0x20003510
 8001270:	200011a8 	.word	0x200011a8

08001274 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800127a:	2101      	movs	r1, #1
 800127c:	4830      	ldr	r0, [pc, #192]	; (8001340 <Si468x_bootloader_load_host+0xcc>)
 800127e:	f002 faff 	bl	8003880 <send_debug_msg>
	Si468x_load_init();
 8001282:	f7ff ffcd 	bl	8001220 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001286:	f241 63a4 	movw	r3, #5796	; 0x16a4
 800128a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 800128e:	2204      	movs	r2, #4
 8001290:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 8001294:	2200      	movs	r2, #0
 8001296:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 800129a:	2200      	movs	r2, #0
 800129c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	e03e      	b.n	8001328 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	80bb      	strh	r3, [r7, #4]
 80012ae:	e014      	b.n	80012da <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	4924      	ldr	r1, [pc, #144]	; (8001348 <Si468x_bootloader_load_host+0xd4>)
 80012b6:	fba1 1303 	umull	r1, r3, r1, r3
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	441a      	add	r2, r3
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	3304      	adds	r3, #4
 80012cc:	491f      	ldr	r1, [pc, #124]	; (800134c <Si468x_bootloader_load_host+0xd8>)
 80012ce:	5c89      	ldrb	r1, [r1, r2]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 80012d2:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <Si468x_bootloader_load_host+0xd4>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	88ba      	ldrh	r2, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3e1      	bcc.n	80012b0 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4a16      	ldr	r2, [pc, #88]	; (8001348 <Si468x_bootloader_load_host+0xd4>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3304      	adds	r3, #4
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4911      	ldr	r1, [pc, #68]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f9c6 	bl	8001690 <Si468x_write_command>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <Si468x_bootloader_load_host+0xdc>)
 800130a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f005 ffc3 	bl	8007298 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <Si468x_bootloader_load_host+0xe0>)
 8001314:	2005      	movs	r0, #5
 8001316:	f000 f9dd 	bl	80016d4 <Si468x_read_reply>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <Si468x_bootloader_load_host+0xdc>)
 8001320:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	3301      	adds	r3, #1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d9bd      	bls.n	80012aa <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800132e:	2101      	movs	r1, #1
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <Si468x_bootloader_load_host+0xe4>)
 8001332:	f002 faa5 	bl	8003880 <send_debug_msg>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	0800d4bc 	.word	0x0800d4bc
 8001344:	200001a8 	.word	0x200001a8
 8001348:	aaaaaaab 	.word	0xaaaaaaab
 800134c:	0800f0c8 	.word	0x0800f0c8
 8001350:	20003510 	.word	0x20003510
 8001354:	200011a8 	.word	0x200011a8
 8001358:	0800d4f8 	.word	0x0800d4f8

0800135c <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001364:	2101      	movs	r1, #1
 8001366:	4845      	ldr	r0, [pc, #276]	; (800147c <Si468x_firmware_load_flash+0x120>)
 8001368:	f002 fa8a 	bl	8003880 <send_debug_msg>
	Si468x_load_init();
 800136c:	f7ff ff58 	bl	8001220 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001372:	2205      	movs	r2, #5
 8001374:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001378:	2200      	movs	r2, #0
 800137a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800137c:	4b40      	ldr	r3, [pc, #256]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800137e:	2200      	movs	r2, #0
 8001380:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001384:	2200      	movs	r2, #0
 8001386:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800138e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001398:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b37      	ldr	r3, [pc, #220]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013a2:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0e1b      	lsrs	r3, r3, #24
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013ac:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4834      	ldr	r0, [pc, #208]	; (8001484 <Si468x_firmware_load_flash+0x128>)
 80013b2:	f002 fa65 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	2210      	movs	r2, #16
 80013bc:	4932      	ldr	r1, [pc, #200]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b ff60 	bl	800d284 <itoa>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fa59 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013d0:	795b      	ldrb	r3, [r3, #5]
 80013d2:	2210      	movs	r2, #16
 80013d4:	492c      	ldr	r1, [pc, #176]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00b ff54 	bl	800d284 <itoa>
 80013dc:	4603      	mov	r3, r0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fa4d 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013e8:	799b      	ldrb	r3, [r3, #6]
 80013ea:	2210      	movs	r2, #16
 80013ec:	4926      	ldr	r1, [pc, #152]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b ff48 	bl	800d284 <itoa>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fa41 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001400:	79db      	ldrb	r3, [r3, #7]
 8001402:	2210      	movs	r2, #16
 8001404:	4920      	ldr	r1, [pc, #128]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f00b ff3c 	bl	800d284 <itoa>
 800140c:	4603      	mov	r3, r0
 800140e:	2101      	movs	r1, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fa35 	bl	8003880 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800142a:	2200      	movs	r2, #0
 800142c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001430:	200c      	movs	r0, #12
 8001432:	f000 f92d 	bl	8001690 <Si468x_write_command>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <Si468x_firmware_load_flash+0x130>)
 800143c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f005 ff2a 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001444:	4912      	ldr	r1, [pc, #72]	; (8001490 <Si468x_firmware_load_flash+0x134>)
 8001446:	2005      	movs	r0, #5
 8001448:	f000 f944 	bl	80016d4 <Si468x_read_reply>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <Si468x_firmware_load_flash+0x130>)
 8001452:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Si468x_firmware_load_flash+0x134>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001460:	2101      	movs	r1, #1
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <Si468x_firmware_load_flash+0x138>)
 8001464:	f002 fa0c 	bl	8003880 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001468:	e003      	b.n	8001472 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800146a:	2101      	movs	r1, #1
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <Si468x_firmware_load_flash+0x13c>)
 800146e:	f002 fa07 	bl	8003880 <send_debug_msg>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800d518 	.word	0x0800d518
 8001480:	200001a8 	.word	0x200001a8
 8001484:	0800d554 	.word	0x0800d554
 8001488:	200034d0 	.word	0x200034d0
 800148c:	20003510 	.word	0x20003510
 8001490:	200011a8 	.word	0x200011a8
 8001494:	0800d568 	.word	0x0800d568
 8001498:	0800d578 	.word	0x0800d578

0800149c <Si468x_boot>:

void Si468x_boot()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014a0:	2101      	movs	r1, #1
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <Si468x_boot+0x60>)
 80014a4:	f002 f9ec 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <Si468x_boot+0x64>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <Si468x_boot+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014b4:	4912      	ldr	r1, [pc, #72]	; (8001500 <Si468x_boot+0x64>)
 80014b6:	2002      	movs	r0, #2
 80014b8:	f000 f8ea 	bl	8001690 <Si468x_write_command>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <Si468x_boot+0x68>)
 80014c2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f005 fee7 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014ca:	490f      	ldr	r1, [pc, #60]	; (8001508 <Si468x_boot+0x6c>)
 80014cc:	2005      	movs	r0, #5
 80014ce:	f000 f901 	bl	80016d4 <Si468x_read_reply>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <Si468x_boot+0x68>)
 80014d8:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <Si468x_boot+0x6c>)
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014e2:	2bc0      	cmp	r3, #192	; 0xc0
 80014e4:	d104      	bne.n	80014f0 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014e6:	2101      	movs	r1, #1
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <Si468x_boot+0x70>)
 80014ea:	f002 f9c9 	bl	8003880 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014ee:	e003      	b.n	80014f8 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <Si468x_boot+0x74>)
 80014f4:	f002 f9c4 	bl	8003880 <send_debug_msg>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	0800d594 	.word	0x0800d594
 8001500:	200001a8 	.word	0x200001a8
 8001504:	20003510 	.word	0x20003510
 8001508:	200011a8 	.word	0x200011a8
 800150c:	0800d5d0 	.word	0x0800d5d0
 8001510:	0800d5ec 	.word	0x0800d5ec

08001514 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800151e:	1df9      	adds	r1, r7, #7
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	2201      	movs	r2, #1
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <Si468x_write_single_byte+0x20>)
 8001526:	f009 fe90 	bl	800b24a <HAL_SPI_Transmit>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20006efc 	.word	0x20006efc

08001538 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001542:	1df9      	adds	r1, r7, #7
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	2201      	movs	r2, #1
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <Si468x_read_single_byte+0x20>)
 800154a:	f009 ffba 	bl	800b4c2 <HAL_SPI_Receive>
	return data_buffer;
 800154e:	79fb      	ldrb	r3, [r7, #7]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20006efc 	.word	0x20006efc

0800155c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	81fb      	strh	r3, [r7, #14]
 800156a:	e01f      	b.n	80015ac <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <Si468x_wait_for_CTS+0x6c>)
 800156e:	2001      	movs	r0, #1
 8001570:	f000 f8b0 	bl	80016d4 <Si468x_read_reply>
		if(rd_reply.cts)
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <Si468x_wait_for_CTS+0x70>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00e      	beq.n	80015a0 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <Si468x_wait_for_CTS+0x70>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001590:	2101      	movs	r1, #1
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <Si468x_wait_for_CTS+0x74>)
 8001594:	f002 f974 	bl	8003880 <send_debug_msg>
				return COMMAND_ERROR;
 8001598:	2320      	movs	r3, #32
 800159a:	e010      	b.n	80015be <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 800159c:	2300      	movs	r3, #0
 800159e:	e00e      	b.n	80015be <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f005 fe79 	bl	8007298 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	81fb      	strh	r3, [r7, #14]
 80015ac:	89fa      	ldrh	r2, [r7, #14]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d3db      	bcc.n	800156c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015b4:	2101      	movs	r1, #1
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <Si468x_wait_for_CTS+0x78>)
 80015b8:	f002 f962 	bl	8003880 <send_debug_msg>
	return TIMEOUT;
 80015bc:	2308      	movs	r3, #8
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200011a8 	.word	0x200011a8
 80015cc:	200035fc 	.word	0x200035fc
 80015d0:	0800d600 	.word	0x0800d600
 80015d4:	0800d628 	.word	0x0800d628

080015d8 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <Si468x_write_multiple+0x4c>)
 80015ee:	f006 fc57 	bl	8007ea0 <HAL_GPIO_WritePin>
	while(len--)
 80015f2:	e009      	b.n	8001608 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	81fa      	strh	r2, [r7, #14]
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff86 	bl	8001514 <Si468x_write_single_byte>
	while(len--)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	80fa      	strh	r2, [r7, #6]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	4803      	ldr	r0, [pc, #12]	; (8001624 <Si468x_write_multiple+0x4c>)
 8001618:	f006 fc42 	bl	8007ea0 <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020800 	.word	0x40020800

08001628 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <Si468x_read_multiple+0x64>)
 800163e:	f006 fc2f 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001642:	2003      	movs	r0, #3
 8001644:	f005 fe28 	bl	8007298 <HAL_Delay>
	CS_PIN_LOW;
 8001648:	2200      	movs	r2, #0
 800164a:	2110      	movs	r1, #16
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <Si468x_read_multiple+0x64>)
 800164e:	f006 fc27 	bl	8007ea0 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff ff5e 	bl	8001514 <Si468x_write_single_byte>
	while(len--)
 8001658:	e009      	b.n	800166e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	81fa      	strh	r2, [r7, #14]
 8001660:	461a      	mov	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	189c      	adds	r4, r3, r2
 8001666:	f7ff ff67 	bl	8001538 <Si468x_read_single_byte>
 800166a:	4603      	mov	r3, r0
 800166c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	80fa      	strh	r2, [r7, #6]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <Si468x_read_multiple+0x64>)
 800167e:	f006 fc0f 	bl	8007ea0 <HAL_GPIO_WritePin>
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	40020800 	.word	0x40020800

08001690 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800169c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016a0:	f7ff ff5c 	bl	800155c <Si468x_wait_for_CTS>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <Si468x_write_command+0x24>
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d10a      	bne.n	80016ca <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff8d 	bl	80015d8 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016c2:	f7ff ff4b 	bl	800155c <Si468x_wait_for_CTS>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff9f 	bl	8001628 <Si468x_read_multiple>
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <Si468x_read_reply+0x28>)
 80016ec:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <Si468x_read_reply+0x2c>)
 80016f0:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200011a8 	.word	0x200011a8
 8001700:	200035fc 	.word	0x200035fc

08001704 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001708:	2101      	movs	r1, #1
 800170a:	4833      	ldr	r0, [pc, #204]	; (80017d8 <Si468x_get_sys_state+0xd4>)
 800170c:	f002 f8b8 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <Si468x_get_sys_state+0xd8>)
 8001712:	2209      	movs	r2, #9
 8001714:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <Si468x_get_sys_state+0xd8>)
 8001718:	2200      	movs	r2, #0
 800171a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800171c:	492f      	ldr	r1, [pc, #188]	; (80017dc <Si468x_get_sys_state+0xd8>)
 800171e:	2002      	movs	r0, #2
 8001720:	f7ff ffb6 	bl	8001690 <Si468x_write_command>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <Si468x_get_sys_state+0xdc>)
 800172a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800172c:	2001      	movs	r0, #1
 800172e:	f005 fdb3 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001732:	492c      	ldr	r1, [pc, #176]	; (80017e4 <Si468x_get_sys_state+0xe0>)
 8001734:	2005      	movs	r0, #5
 8001736:	f7ff ffcd 	bl	80016d4 <Si468x_read_reply>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <Si468x_get_sys_state+0xdc>)
 8001740:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001742:	2100      	movs	r1, #0
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <Si468x_get_sys_state+0xe4>)
 8001746:	f002 f89b 	bl	8003880 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <Si468x_get_sys_state+0xe0>)
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d83a      	bhi.n	80017c8 <Si468x_get_sys_state+0xc4>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <Si468x_get_sys_state+0x54>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001779 	.word	0x08001779
 800175c:	08001783 	.word	0x08001783
 8001760:	0800178d 	.word	0x0800178d
 8001764:	08001797 	.word	0x08001797
 8001768:	080017a1 	.word	0x080017a1
 800176c:	080017ab 	.word	0x080017ab
 8001770:	080017b5 	.word	0x080017b5
 8001774:	080017bf 	.word	0x080017bf
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001778:	2101      	movs	r1, #1
 800177a:	481c      	ldr	r0, [pc, #112]	; (80017ec <Si468x_get_sys_state+0xe8>)
 800177c:	f002 f880 	bl	8003880 <send_debug_msg>
			break;
 8001780:	e027      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001782:	2101      	movs	r1, #1
 8001784:	481a      	ldr	r0, [pc, #104]	; (80017f0 <Si468x_get_sys_state+0xec>)
 8001786:	f002 f87b 	bl	8003880 <send_debug_msg>
			break;
 800178a:	e022      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <Si468x_get_sys_state+0xf0>)
 8001790:	f002 f876 	bl	8003880 <send_debug_msg>
			break;
 8001794:	e01d      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001796:	2101      	movs	r1, #1
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <Si468x_get_sys_state+0xf4>)
 800179a:	f002 f871 	bl	8003880 <send_debug_msg>
			break;
 800179e:	e018      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4816      	ldr	r0, [pc, #88]	; (80017fc <Si468x_get_sys_state+0xf8>)
 80017a4:	f002 f86c 	bl	8003880 <send_debug_msg>
			break;
 80017a8:	e013      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4814      	ldr	r0, [pc, #80]	; (8001800 <Si468x_get_sys_state+0xfc>)
 80017ae:	f002 f867 	bl	8003880 <send_debug_msg>
			break;
 80017b2:	e00e      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4813      	ldr	r0, [pc, #76]	; (8001804 <Si468x_get_sys_state+0x100>)
 80017b8:	f002 f862 	bl	8003880 <send_debug_msg>
			break;
 80017bc:	e009      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017be:	2101      	movs	r1, #1
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <Si468x_get_sys_state+0x104>)
 80017c2:	f002 f85d 	bl	8003880 <send_debug_msg>
			break;
 80017c6:	e004      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017c8:	2101      	movs	r1, #1
 80017ca:	4810      	ldr	r0, [pc, #64]	; (800180c <Si468x_get_sys_state+0x108>)
 80017cc:	f002 f858 	bl	8003880 <send_debug_msg>
			break;
 80017d0:	bf00      	nop
	}
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0800d638 	.word	0x0800d638
 80017dc:	200001a8 	.word	0x200001a8
 80017e0:	20003510 	.word	0x20003510
 80017e4:	200011a8 	.word	0x200011a8
 80017e8:	0800d674 	.word	0x0800d674
 80017ec:	0800d680 	.word	0x0800d680
 80017f0:	0800d698 	.word	0x0800d698
 80017f4:	0800d6b0 	.word	0x0800d6b0
 80017f8:	0800d6c8 	.word	0x0800d6c8
 80017fc:	0800d6f0 	.word	0x0800d6f0
 8001800:	0800d70c 	.word	0x0800d70c
 8001804:	0800d724 	.word	0x0800d724
 8001808:	0800d740 	.word	0x0800d740
 800180c:	0800d758 	.word	0x0800d758

08001810 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001816:	2101      	movs	r1, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <Si468x_get_part_info+0xc0>)
 800181a:	f002 f831 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <Si468x_get_part_info+0xc4>)
 8001820:	2208      	movs	r2, #8
 8001822:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <Si468x_get_part_info+0xc4>)
 8001826:	2200      	movs	r2, #0
 8001828:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800182a:	492a      	ldr	r1, [pc, #168]	; (80018d4 <Si468x_get_part_info+0xc4>)
 800182c:	2002      	movs	r0, #2
 800182e:	f7ff ff2f 	bl	8001690 <Si468x_write_command>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <Si468x_get_part_info+0xc8>)
 8001838:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f005 fd2c 	bl	8007298 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fe67 	bl	8001514 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001846:	4925      	ldr	r1, [pc, #148]	; (80018dc <Si468x_get_part_info+0xcc>)
 8001848:	200a      	movs	r0, #10
 800184a:	f7ff ff43 	bl	80016d4 <Si468x_read_reply>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <Si468x_get_part_info+0xc8>)
 8001854:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001856:	2100      	movs	r1, #0
 8001858:	4821      	ldr	r0, [pc, #132]	; (80018e0 <Si468x_get_part_info+0xd0>)
 800185a:	f002 f811 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <Si468x_get_part_info+0xcc>)
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	220a      	movs	r2, #10
 8001864:	491f      	ldr	r1, [pc, #124]	; (80018e4 <Si468x_get_part_info+0xd4>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00b fd0c 	bl	800d284 <itoa>
 800186c:	4603      	mov	r3, r0
 800186e:	2101      	movs	r1, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f805 	bl	8003880 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001876:	2100      	movs	r1, #0
 8001878:	481b      	ldr	r0, [pc, #108]	; (80018e8 <Si468x_get_part_info+0xd8>)
 800187a:	f002 f801 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <Si468x_get_part_info+0xcc>)
 8001880:	795b      	ldrb	r3, [r3, #5]
 8001882:	220a      	movs	r2, #10
 8001884:	4917      	ldr	r1, [pc, #92]	; (80018e4 <Si468x_get_part_info+0xd4>)
 8001886:	4618      	mov	r0, r3
 8001888:	f00b fcfc 	bl	800d284 <itoa>
 800188c:	4603      	mov	r3, r0
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fff5 	bl	8003880 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001896:	2100      	movs	r1, #0
 8001898:	4814      	ldr	r0, [pc, #80]	; (80018ec <Si468x_get_part_info+0xdc>)
 800189a:	f001 fff1 	bl	8003880 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <Si468x_get_part_info+0xcc>)
 80018a0:	7a5b      	ldrb	r3, [r3, #9]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <Si468x_get_part_info+0xcc>)
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	220a      	movs	r2, #10
 80018b6:	490b      	ldr	r1, [pc, #44]	; (80018e4 <Si468x_get_part_info+0xd4>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b fce3 	bl	800d284 <itoa>
 80018be:	4603      	mov	r3, r0
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 ffdc 	bl	8003880 <send_debug_msg>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800d76c 	.word	0x0800d76c
 80018d4:	200001a8 	.word	0x200001a8
 80018d8:	20003510 	.word	0x20003510
 80018dc:	200011a8 	.word	0x200011a8
 80018e0:	0800d7a8 	.word	0x0800d7a8
 80018e4:	200034d0 	.word	0x200034d0
 80018e8:	0800d7b8 	.word	0x0800d7b8
 80018ec:	0800d7c4 	.word	0x0800d7c4

080018f0 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	80fb      	strh	r3, [r7, #6]
 80018fc:	4613      	mov	r3, r2
 80018fe:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001900:	2101      	movs	r1, #1
 8001902:	4832      	ldr	r0, [pc, #200]	; (80019cc <Si468x_set_property+0xdc>)
 8001904:	f001 ffbc 	bl	8003880 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001908:	2100      	movs	r1, #0
 800190a:	4831      	ldr	r0, [pc, #196]	; (80019d0 <Si468x_set_property+0xe0>)
 800190c:	f001 ffb8 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	2210      	movs	r2, #16
 8001914:	492f      	ldr	r1, [pc, #188]	; (80019d4 <Si468x_set_property+0xe4>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00b fcb4 	bl	800d284 <itoa>
 800191c:	4603      	mov	r3, r0
 800191e:	2101      	movs	r1, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f001 ffad 	bl	8003880 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001926:	2100      	movs	r1, #0
 8001928:	482b      	ldr	r0, [pc, #172]	; (80019d8 <Si468x_set_property+0xe8>)
 800192a:	f001 ffa9 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	2210      	movs	r2, #16
 8001932:	4928      	ldr	r1, [pc, #160]	; (80019d4 <Si468x_set_property+0xe4>)
 8001934:	4618      	mov	r0, r3
 8001936:	f00b fca5 	bl	800d284 <itoa>
 800193a:	4603      	mov	r3, r0
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f001 ff9e 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <Si468x_set_property+0xec>)
 8001946:	2213      	movs	r2, #19
 8001948:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <Si468x_set_property+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <Si468x_set_property+0xec>)
 8001956:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <Si468x_set_property+0xec>)
 8001962:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <Si468x_set_property+0xec>)
 800196a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	b29b      	uxth	r3, r3
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <Si468x_set_property+0xec>)
 8001976:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001978:	4918      	ldr	r1, [pc, #96]	; (80019dc <Si468x_set_property+0xec>)
 800197a:	2006      	movs	r0, #6
 800197c:	f7ff fe88 	bl	8001690 <Si468x_write_command>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <Si468x_set_property+0xf0>)
 8001986:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f005 fc85 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800198e:	4915      	ldr	r1, [pc, #84]	; (80019e4 <Si468x_set_property+0xf4>)
 8001990:	2005      	movs	r0, #5
 8001992:	f7ff fe9f 	bl	80016d4 <Si468x_read_reply>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <Si468x_set_property+0xf0>)
 800199c:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f825 	bl	80019f0 <Si468x_get_property>
 80019a6:	4603      	mov	r3, r0
 80019a8:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019aa:	89fa      	ldrh	r2, [r7, #14]
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d104      	bne.n	80019bc <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019b2:	2101      	movs	r1, #1
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <Si468x_set_property+0xf8>)
 80019b6:	f001 ff63 	bl	8003880 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019ba:	e003      	b.n	80019c4 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019bc:	2101      	movs	r1, #1
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <Si468x_set_property+0xfc>)
 80019c0:	f001 ff5e 	bl	8003880 <send_debug_msg>
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	0800d7d4 	.word	0x0800d7d4
 80019d0:	0800d814 	.word	0x0800d814
 80019d4:	200034d0 	.word	0x200034d0
 80019d8:	0800d824 	.word	0x0800d824
 80019dc:	200001a8 	.word	0x200001a8
 80019e0:	20003510 	.word	0x20003510
 80019e4:	200011a8 	.word	0x200011a8
 80019e8:	0800d840 	.word	0x0800d840
 80019ec:	0800d85c 	.word	0x0800d85c

080019f0 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019fa:	2101      	movs	r1, #1
 80019fc:	482b      	ldr	r0, [pc, #172]	; (8001aac <Si468x_get_property+0xbc>)
 80019fe:	f001 ff3f 	bl	8003880 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a02:	2100      	movs	r1, #0
 8001a04:	482a      	ldr	r0, [pc, #168]	; (8001ab0 <Si468x_get_property+0xc0>)
 8001a06:	f001 ff3b 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <Si468x_get_property+0xc4>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00b fc37 	bl	800d284 <itoa>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 ff30 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a22:	2214      	movs	r2, #20
 8001a24:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a32:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a3e:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a40:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a42:	2004      	movs	r0, #4
 8001a44:	f7ff fe24 	bl	8001690 <Si468x_write_command>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <Si468x_get_property+0xcc>)
 8001a4e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f005 fc21 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a56:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a58:	2006      	movs	r0, #6
 8001a5a:	f7ff fe3b 	bl	80016d4 <Si468x_read_reply>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <Si468x_get_property+0xcc>)
 8001a64:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a66:	2100      	movs	r1, #0
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <Si468x_get_property+0xd4>)
 8001a6a:	f001 ff09 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a70:	795b      	ldrb	r3, [r3, #5]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a76:	7912      	ldrb	r2, [r2, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <Si468x_get_property+0xc4>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f00b fc00 	bl	800d284 <itoa>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2101      	movs	r1, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fef9 	bl	8003880 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	0800d874 	.word	0x0800d874
 8001ab0:	0800d814 	.word	0x0800d814
 8001ab4:	200034d0 	.word	0x200034d0
 8001ab8:	200001a8 	.word	0x200001a8
 8001abc:	20003510 	.word	0x20003510
 8001ac0:	200011a8 	.word	0x200011a8
 8001ac4:	0800d8b0 	.word	0x0800d8b0

08001ac8 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4849      	ldr	r0, [pc, #292]	; (8001c00 <Si468x_dab_tune_freq+0x138>)
 8001adc:	f001 fed0 	bl	8003880 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4848      	ldr	r0, [pc, #288]	; (8001c04 <Si468x_dab_tune_freq+0x13c>)
 8001ae4:	f001 fecc 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <Si468x_dab_tune_freq+0x140>)
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	220a      	movs	r2, #10
 8001af2:	4946      	ldr	r1, [pc, #280]	; (8001c0c <Si468x_dab_tune_freq+0x144>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00b fbc5 	bl	800d284 <itoa>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 febe 	bl	8003880 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001b04:	2101      	movs	r1, #1
 8001b06:	4842      	ldr	r0, [pc, #264]	; (8001c10 <Si468x_dab_tune_freq+0x148>)
 8001b08:	f001 feba 	bl	8003880 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b0e:	22b0      	movs	r2, #176	; 0xb0
 8001b10:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b18:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b2a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b36:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b38:	4936      	ldr	r1, [pc, #216]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b3a:	2006      	movs	r0, #6
 8001b3c:	f7ff fda8 	bl	8001690 <Si468x_write_command>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <Si468x_dab_tune_freq+0x150>)
 8001b46:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b48:	4934      	ldr	r1, [pc, #208]	; (8001c1c <Si468x_dab_tune_freq+0x154>)
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fdc2 	bl	80016d4 <Si468x_read_reply>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <Si468x_dab_tune_freq+0x150>)
 8001b56:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <Si468x_dab_tune_freq+0x158>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b66:	2101      	movs	r1, #1
 8001b68:	482e      	ldr	r0, [pc, #184]	; (8001c24 <Si468x_dab_tune_freq+0x15c>)
 8001b6a:	f001 fe89 	bl	8003880 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	81fb      	strh	r3, [r7, #14]
 8001b72:	e03a      	b.n	8001bea <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b74:	4929      	ldr	r1, [pc, #164]	; (8001c1c <Si468x_dab_tune_freq+0x154>)
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fdac 	bl	80016d4 <Si468x_read_reply>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <Si468x_dab_tune_freq+0x150>)
 8001b82:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <Si468x_dab_tune_freq+0x158>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01c      	beq.n	8001bcc <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001b92:	2100      	movs	r1, #0
 8001b94:	4824      	ldr	r0, [pc, #144]	; (8001c28 <Si468x_dab_tune_freq+0x160>)
 8001b96:	f001 fe73 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	491b      	ldr	r1, [pc, #108]	; (8001c0c <Si468x_dab_tune_freq+0x144>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00b fb6f 	bl	800d284 <itoa>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fe68 	bl	8003880 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	481e      	ldr	r0, [pc, #120]	; (8001c2c <Si468x_dab_tune_freq+0x164>)
 8001bb4:	f001 fe64 	bl	8003880 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <Si468x_dab_tune_freq+0x168>)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <Si468x_dab_tune_freq+0x140>)
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <Si468x_dab_tune_freq+0x168>)
 8001bc8:	6093      	str	r3, [r2, #8]
			break;
 8001bca:	e014      	b.n	8001bf6 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d103      	bne.n	8001bde <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <Si468x_dab_tune_freq+0x16c>)
 8001bda:	f001 fe51 	bl	8003880 <send_debug_msg>
		}
		HAL_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f005 fb5a 	bl	8007298 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	3301      	adds	r3, #1
 8001be8:	81fb      	strh	r3, [r7, #14]
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d9bf      	bls.n	8001b74 <Si468x_dab_tune_freq+0xac>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	0800d968 	.word	0x0800d968
 8001c04:	0800d9a4 	.word	0x0800d9a4
 8001c08:	20003514 	.word	0x20003514
 8001c0c:	200034d0 	.word	0x200034d0
 8001c10:	0800d924 	.word	0x0800d924
 8001c14:	200001a8 	.word	0x200001a8
 8001c18:	20003510 	.word	0x20003510
 8001c1c:	200011a8 	.word	0x200011a8
 8001c20:	200035fc 	.word	0x200035fc
 8001c24:	0800d568 	.word	0x0800d568
 8001c28:	0800d9b0 	.word	0x0800d9b0
 8001c2c:	0800d9cc 	.word	0x0800d9cc
 8001c30:	20004bc4 	.word	0x20004bc4
 8001c34:	0800d9d4 	.word	0x0800d9d4

08001c38 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <Si468x_dab_digrad_status+0x9c>)
 8001c42:	22b2      	movs	r2, #178	; 0xb2
 8001c44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <Si468x_dab_digrad_status+0x9c>)
 8001c48:	221a      	movs	r2, #26
 8001c4a:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c4c:	4921      	ldr	r1, [pc, #132]	; (8001cd4 <Si468x_dab_digrad_status+0x9c>)
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f7ff fd1e 	bl	8001690 <Si468x_write_command>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <Si468x_dab_digrad_status+0xa0>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f005 fb1b 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c62:	491e      	ldr	r1, [pc, #120]	; (8001cdc <Si468x_dab_digrad_status+0xa4>)
 8001c64:	2028      	movs	r0, #40	; 0x28
 8001c66:	f7ff fd35 	bl	80016d4 <Si468x_read_reply>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <Si468x_dab_digrad_status+0xa0>)
 8001c70:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <Si468x_dab_digrad_status+0xa8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d019      	beq.n	8001cb4 <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <Si468x_dab_digrad_status+0xa4>)
 8001c84:	4615      	mov	r5, r2
 8001c86:	1d1c      	adds	r4, r3, #4
 8001c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c94:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001c9a:	78db      	ldrb	r3, [r3, #3]
 8001c9c:	2b14      	cmp	r3, #20
 8001c9e:	d902      	bls.n	8001ca6 <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001ca8:	795b      	ldrb	r3, [r3, #5]
 8001caa:	2b36      	cmp	r3, #54	; 0x36
 8001cac:	d902      	bls.n	8001cb4 <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001cb8:	461c      	mov	r4, r3
 8001cba:	4615      	mov	r5, r2
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd4:	200001a8 	.word	0x200001a8
 8001cd8:	20003510 	.word	0x20003510
 8001cdc:	200011a8 	.word	0x200011a8
 8001ce0:	200035fc 	.word	0x200035fc
 8001ce4:	200035d4 	.word	0x200035d4

08001ce8 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001cee:	2300      	movs	r3, #0
 8001cf0:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001cfe:	4ba2      	ldr	r3, [pc, #648]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001d04:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d0a:	499f      	ldr	r1, [pc, #636]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7ff fcbf 	bl	8001690 <Si468x_write_command>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d18:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f005 fabc 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d20:	499b      	ldr	r1, [pc, #620]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d26:	f7ff fcd5 	bl	80016d4 <Si468x_read_reply>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b97      	ldr	r3, [pc, #604]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d30:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d32:	2101      	movs	r1, #1
 8001d34:	4897      	ldr	r0, [pc, #604]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d36:	f001 fda3 	bl	8003880 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d3a:	4b97      	ldr	r3, [pc, #604]	; (8001f98 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4894      	ldr	r0, [pc, #592]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d4c:	f001 fd98 	bl	8003880 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d58:	795b      	ldrb	r3, [r3, #5]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d64:	4b8a      	ldr	r3, [pc, #552]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d66:	7a1b      	ldrb	r3, [r3, #8]
 8001d68:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	773b      	strb	r3, [r7, #28]
 8001d6e:	e250      	b.n	8002212 <Si468x_dab_get_digital_service_list+0x52a>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001d70:	7f3b      	ldrb	r3, [r7, #28]
 8001d72:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d74:	7892      	ldrb	r2, [r2, #2]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a89      	ldr	r2, [pc, #548]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d7a:	6892      	ldr	r2, [r2, #8]
 8001d7c:	4989      	ldr	r1, [pc, #548]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d7e:	2034      	movs	r0, #52	; 0x34
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	440b      	add	r3, r1
 8001d86:	3324      	adds	r3, #36	; 0x24
 8001d88:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001d8a:	7f3b      	ldrb	r3, [r7, #28]
 8001d8c:	4a84      	ldr	r2, [pc, #528]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d8e:	7892      	ldrb	r2, [r2, #2]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a83      	ldr	r2, [pc, #524]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d94:	7b10      	ldrb	r0, [r2, #12]
 8001d96:	4a83      	ldr	r2, [pc, #524]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d98:	2134      	movs	r1, #52	; 0x34
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3328      	adds	r3, #40	; 0x28
 8001da2:	4602      	mov	r2, r0
 8001da4:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001da6:	7fba      	ldrb	r2, [r7, #30]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	f103 0210 	add.w	r2, r3, #16
 8001db4:	7f7b      	ldrb	r3, [r7, #29]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001dbc:	5cd2      	ldrb	r2, [r2, r3]
 8001dbe:	7f3b      	ldrb	r3, [r7, #28]
 8001dc0:	4977      	ldr	r1, [pc, #476]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dc2:	7889      	ldrb	r1, [r1, #2]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f002 0201 	and.w	r2, r2, #1
 8001dca:	b2d0      	uxtb	r0, r2
 8001dcc:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dce:	2134      	movs	r1, #52	; 0x34
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	4602      	mov	r2, r0
 8001dda:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001ddc:	7fba      	ldrb	r2, [r7, #30]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	f103 0211 	add.w	r2, r3, #17
 8001dea:	7f7b      	ldrb	r3, [r7, #29]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	4a67      	ldr	r2, [pc, #412]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001df2:	5cd2      	ldrb	r2, [r2, r3]
 8001df4:	7f3b      	ldrb	r3, [r7, #28]
 8001df6:	496a      	ldr	r1, [pc, #424]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001df8:	7889      	ldrb	r1, [r1, #2]
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f002 020f 	and.w	r2, r2, #15
 8001e00:	b2d0      	uxtb	r0, r2
 8001e02:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e04:	2134      	movs	r1, #52	; 0x34
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3329      	adds	r3, #41	; 0x29
 8001e0e:	4602      	mov	r2, r0
 8001e10:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e12:	7f3b      	ldrb	r3, [r7, #28]
 8001e14:	4a62      	ldr	r2, [pc, #392]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e16:	7892      	ldrb	r2, [r2, #2]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a62      	ldr	r2, [pc, #392]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e1c:	2134      	movs	r1, #52	; 0x34
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3314      	adds	r3, #20
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d017      	beq.n	8001e5c <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e2c:	7fbb      	ldrb	r3, [r7, #30]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e32:	7f3b      	ldrb	r3, [r7, #28]
 8001e34:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e36:	7892      	ldrb	r2, [r2, #2]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e3c:	2134      	movs	r1, #52	; 0x34
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3329      	adds	r3, #41	; 0x29
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	7f7b      	ldrb	r3, [r7, #29]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e4e:	7f3b      	ldrb	r3, [r7, #28]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e54:	7ffb      	ldrb	r3, [r7, #31]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]
			continue;
 8001e5a:	e1d7      	b.n	800220c <Si468x_dab_get_digital_service_list+0x524>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e5c:	7fba      	ldrb	r2, [r7, #30]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	f103 0210 	add.w	r2, r3, #16
 8001e6a:	7f7b      	ldrb	r3, [r7, #29]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	105b      	asrs	r3, r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	7f3b      	ldrb	r3, [r7, #28]
 8001e7a:	4949      	ldr	r1, [pc, #292]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e7c:	7889      	ldrb	r1, [r1, #2]
 8001e7e:	440b      	add	r3, r1
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	b2d0      	uxtb	r0, r2
 8001e86:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e88:	2134      	movs	r1, #52	; 0x34
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3315      	adds	r3, #21
 8001e92:	4602      	mov	r2, r0
 8001e94:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e96:	7f3b      	ldrb	r3, [r7, #28]
 8001e98:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e9a:	7892      	ldrb	r2, [r2, #2]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a41      	ldr	r2, [pc, #260]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ea0:	2134      	movs	r1, #52	; 0x34
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <Si468x_dab_get_digital_service_list+0x1ce>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d079      	beq.n	8001fa8 <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001eb4:	e0ee      	b.n	8002094 <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001eb6:	7fba      	ldrb	r2, [r7, #30]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	f103 020c 	add.w	r2, r3, #12
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	7fba      	ldrb	r2, [r7, #30]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f103 020d 	add.w	r2, r3, #13
 8001ede:	7f7b      	ldrb	r3, [r7, #29]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001eee:	4419      	add	r1, r3
 8001ef0:	7f3b      	ldrb	r3, [r7, #28]
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ef4:	7892      	ldrb	r2, [r2, #2]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001efc:	2134      	movs	r1, #52	; 0x34
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3318      	adds	r3, #24
 8001f06:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001f08:	7fba      	ldrb	r2, [r7, #30]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	f103 020d 	add.w	r2, r3, #13
 8001f16:	7f7b      	ldrb	r3, [r7, #29]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f1e:	5cd2      	ldrb	r2, [r2, r3]
 8001f20:	7f3b      	ldrb	r3, [r7, #28]
 8001f22:	491f      	ldr	r1, [pc, #124]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f24:	7889      	ldrb	r1, [r1, #2]
 8001f26:	440b      	add	r3, r1
 8001f28:	0912      	lsrs	r2, r2, #4
 8001f2a:	b2d0      	uxtb	r0, r2
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f2e:	2134      	movs	r1, #52	; 0x34
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	331c      	adds	r3, #28
 8001f38:	4602      	mov	r2, r0
 8001f3a:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f3c:	7f3b      	ldrb	r3, [r7, #28]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f40:	7892      	ldrb	r2, [r2, #2]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f46:	2134      	movs	r1, #52	; 0x34
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	331c      	adds	r3, #28
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	031b      	lsls	r3, r3, #12
 8001f54:	4618      	mov	r0, r3
 8001f56:	7f3b      	ldrb	r3, [r7, #28]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5a:	7892      	ldrb	r2, [r2, #2]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f60:	2134      	movs	r1, #52	; 0x34
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	3318      	adds	r3, #24
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	7f3b      	ldrb	r3, [r7, #28]
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f70:	7889      	ldrb	r1, [r1, #2]
 8001f72:	440b      	add	r3, r1
 8001f74:	4402      	add	r2, r0
 8001f76:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f78:	2034      	movs	r0, #52	; 0x34
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3320      	adds	r3, #32
 8001f82:	601a      	str	r2, [r3, #0]
				break;
 8001f84:	e086      	b.n	8002094 <Si468x_dab_get_digital_service_list+0x3ac>
 8001f86:	bf00      	nop
 8001f88:	200001a8 	.word	0x200001a8
 8001f8c:	20003510 	.word	0x20003510
 8001f90:	200011a8 	.word	0x200011a8
 8001f94:	0800da34 	.word	0x0800da34
 8001f98:	200035fc 	.word	0x200035fc
 8001f9c:	0800d568 	.word	0x0800d568
 8001fa0:	20004bc4 	.word	0x20004bc4
 8001fa4:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001fa8:	7fba      	ldrb	r2, [r7, #30]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f103 020c 	add.w	r2, r3, #12
 8001fb6:	7f7b      	ldrb	r3, [r7, #29]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	4aa0      	ldr	r2, [pc, #640]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	7fba      	ldrb	r2, [r7, #30]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f103 020d 	add.w	r2, r3, #13
 8001fd0:	7f7b      	ldrb	r3, [r7, #29]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a9a      	ldr	r2, [pc, #616]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	4419      	add	r1, r3
 8001fde:	7fba      	ldrb	r2, [r7, #30]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f103 020e 	add.w	r2, r3, #14
 8001fec:	7f7b      	ldrb	r3, [r7, #29]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a93      	ldr	r2, [pc, #588]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ffc:	4419      	add	r1, r3
 8001ffe:	7f3b      	ldrb	r3, [r7, #28]
 8002000:	4a90      	ldr	r2, [pc, #576]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002002:	7892      	ldrb	r2, [r2, #2]
 8002004:	4413      	add	r3, r2
 8002006:	4608      	mov	r0, r1
 8002008:	4a8f      	ldr	r2, [pc, #572]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 800200a:	2134      	movs	r1, #52	; 0x34
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3318      	adds	r3, #24
 8002014:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002016:	7fba      	ldrb	r2, [r7, #30]
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	f103 020e 	add.w	r2, r3, #14
 8002024:	7f7b      	ldrb	r3, [r7, #29]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	4a85      	ldr	r2, [pc, #532]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 800202c:	5cd2      	ldrb	r2, [r2, r3]
 800202e:	7f3b      	ldrb	r3, [r7, #28]
 8002030:	4984      	ldr	r1, [pc, #528]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002032:	7889      	ldrb	r1, [r1, #2]
 8002034:	440b      	add	r3, r1
 8002036:	0912      	lsrs	r2, r2, #4
 8002038:	b2d0      	uxtb	r0, r2
 800203a:	4a83      	ldr	r2, [pc, #524]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 800203c:	2134      	movs	r1, #52	; 0x34
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	331c      	adds	r3, #28
 8002046:	4602      	mov	r2, r0
 8002048:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800204a:	7f3b      	ldrb	r3, [r7, #28]
 800204c:	4a7d      	ldr	r2, [pc, #500]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800204e:	7892      	ldrb	r2, [r2, #2]
 8002050:	4413      	add	r3, r2
 8002052:	4a7d      	ldr	r2, [pc, #500]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002054:	2134      	movs	r1, #52	; 0x34
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	331c      	adds	r3, #28
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	4618      	mov	r0, r3
 8002064:	7f3b      	ldrb	r3, [r7, #28]
 8002066:	4a77      	ldr	r2, [pc, #476]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002068:	7892      	ldrb	r2, [r2, #2]
 800206a:	4413      	add	r3, r2
 800206c:	4a76      	ldr	r2, [pc, #472]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 800206e:	2134      	movs	r1, #52	; 0x34
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3318      	adds	r3, #24
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	7f3b      	ldrb	r3, [r7, #28]
 800207c:	4971      	ldr	r1, [pc, #452]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800207e:	7889      	ldrb	r1, [r1, #2]
 8002080:	440b      	add	r3, r1
 8002082:	4402      	add	r2, r0
 8002084:	4970      	ldr	r1, [pc, #448]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002086:	2034      	movs	r0, #52	; 0x34
 8002088:	fb00 f303 	mul.w	r3, r0, r3
 800208c:	440b      	add	r3, r1
 800208e:	3320      	adds	r3, #32
 8002090:	601a      	str	r2, [r3, #0]
				break;
 8002092:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002094:	7fba      	ldrb	r2, [r7, #30]
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	f103 0214 	add.w	r2, r3, #20
 80020a2:	7f7b      	ldrb	r3, [r7, #29]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03f      	beq.n	8002130 <Si468x_dab_get_digital_service_list+0x448>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	76fb      	strb	r3, [r7, #27]
 80020b4:	e038      	b.n	8002128 <Si468x_dab_get_digital_service_list+0x440>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020b6:	7efb      	ldrb	r3, [r7, #27]
 80020b8:	f103 0114 	add.w	r1, r3, #20
 80020bc:	7fba      	ldrb	r2, [r7, #30]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	18ca      	adds	r2, r1, r3
 80020c8:	7f7b      	ldrb	r3, [r7, #29]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	18d1      	adds	r1, r2, r3
 80020ce:	7f3b      	ldrb	r3, [r7, #28]
 80020d0:	4a5c      	ldr	r2, [pc, #368]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80020d2:	7892      	ldrb	r2, [r2, #2]
 80020d4:	441a      	add	r2, r3
 80020d6:	7efb      	ldrb	r3, [r7, #27]
 80020d8:	4859      	ldr	r0, [pc, #356]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 80020da:	5c44      	ldrb	r4, [r0, r1]
 80020dc:	495a      	ldr	r1, [pc, #360]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80020de:	2034      	movs	r0, #52	; 0x34
 80020e0:	fb00 f202 	mul.w	r2, r0, r2
 80020e4:	440a      	add	r2, r1
 80020e6:	4413      	add	r3, r2
 80020e8:	4622      	mov	r2, r4
 80020ea:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80020ec:	7f3b      	ldrb	r3, [r7, #28]
 80020ee:	4a55      	ldr	r2, [pc, #340]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80020f0:	7892      	ldrb	r2, [r2, #2]
 80020f2:	441a      	add	r2, r3
 80020f4:	7efb      	ldrb	r3, [r7, #27]
 80020f6:	4954      	ldr	r1, [pc, #336]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80020f8:	2034      	movs	r0, #52	; 0x34
 80020fa:	fb00 f202 	mul.w	r2, r0, r2
 80020fe:	440a      	add	r2, r1
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b86      	cmp	r3, #134	; 0x86
 8002106:	d10c      	bne.n	8002122 <Si468x_dab_get_digital_service_list+0x43a>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 8002108:	7f3b      	ldrb	r3, [r7, #28]
 800210a:	4a4e      	ldr	r2, [pc, #312]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800210c:	7892      	ldrb	r2, [r2, #2]
 800210e:	441a      	add	r2, r3
 8002110:	7efb      	ldrb	r3, [r7, #27]
 8002112:	494d      	ldr	r1, [pc, #308]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002114:	2034      	movs	r0, #52	; 0x34
 8002116:	fb00 f202 	mul.w	r2, r0, r2
 800211a:	440a      	add	r2, r1
 800211c:	4413      	add	r3, r2
 800211e:	226f      	movs	r2, #111	; 0x6f
 8002120:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002122:	7efb      	ldrb	r3, [r7, #27]
 8002124:	3301      	adds	r3, #1
 8002126:	76fb      	strb	r3, [r7, #27]
 8002128:	7efb      	ldrb	r3, [r7, #27]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	d9c3      	bls.n	80020b6 <Si468x_dab_get_digital_service_list+0x3ce>
 800212e:	e026      	b.n	800217e <Si468x_dab_get_digital_service_list+0x496>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <Si468x_dab_get_digital_service_list+0x564>)
 8002132:	463c      	mov	r4, r7
 8002134:	461d      	mov	r5, r3
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	7023      	strb	r3, [r4, #0]
 800213e:	f107 0311 	add.w	r3, r7, #17
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002148:	2300      	movs	r3, #0
 800214a:	76bb      	strb	r3, [r7, #26]
 800214c:	e014      	b.n	8002178 <Si468x_dab_get_digital_service_list+0x490>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 800214e:	7eb9      	ldrb	r1, [r7, #26]
 8002150:	7f3b      	ldrb	r3, [r7, #28]
 8002152:	4a3c      	ldr	r2, [pc, #240]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002154:	7892      	ldrb	r2, [r2, #2]
 8002156:	441a      	add	r2, r3
 8002158:	7ebb      	ldrb	r3, [r7, #26]
 800215a:	3120      	adds	r1, #32
 800215c:	4439      	add	r1, r7
 800215e:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8002162:	4939      	ldr	r1, [pc, #228]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002164:	2034      	movs	r0, #52	; 0x34
 8002166:	fb00 f202 	mul.w	r2, r0, r2
 800216a:	440a      	add	r2, r1
 800216c:	4413      	add	r3, r2
 800216e:	4622      	mov	r2, r4
 8002170:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002172:	7ebb      	ldrb	r3, [r7, #26]
 8002174:	3301      	adds	r3, #1
 8002176:	76bb      	strb	r3, [r7, #26]
 8002178:	7ebb      	ldrb	r3, [r7, #26]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	d9e7      	bls.n	800214e <Si468x_dab_get_digital_service_list+0x466>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 800217e:	2300      	movs	r3, #0
 8002180:	767b      	strb	r3, [r7, #25]
 8002182:	e032      	b.n	80021ea <Si468x_dab_get_digital_service_list+0x502>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002184:	7f3b      	ldrb	r3, [r7, #28]
 8002186:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002188:	7892      	ldrb	r2, [r2, #2]
 800218a:	441a      	add	r2, r3
 800218c:	7e7b      	ldrb	r3, [r7, #25]
 800218e:	492e      	ldr	r1, [pc, #184]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002190:	201a      	movs	r0, #26
 8002192:	fb00 f202 	mul.w	r2, r0, r2
 8002196:	4413      	add	r3, r2
 8002198:	3314      	adds	r3, #20
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	440b      	add	r3, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80021a2:	7fba      	ldrb	r2, [r7, #30]
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021b0:	7f7b      	ldrb	r3, [r7, #29]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 80021b8:	5cd1      	ldrb	r1, [r2, r3]
 80021ba:	7f3b      	ldrb	r3, [r7, #28]
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80021be:	7892      	ldrb	r2, [r2, #2]
 80021c0:	441a      	add	r2, r3
 80021c2:	7e7b      	ldrb	r3, [r7, #25]
 80021c4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021c8:	b2cc      	uxtb	r4, r1
 80021ca:	491f      	ldr	r1, [pc, #124]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80021cc:	201a      	movs	r0, #26
 80021ce:	fb00 f202 	mul.w	r2, r0, r2
 80021d2:	4413      	add	r3, r2
 80021d4:	3314      	adds	r3, #20
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	440b      	add	r3, r1
 80021da:	4622      	mov	r2, r4
 80021dc:	709a      	strb	r2, [r3, #2]
			components_count++;
 80021de:	7f7b      	ldrb	r3, [r7, #29]
 80021e0:	3301      	adds	r3, #1
 80021e2:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80021e4:	7e7b      	ldrb	r3, [r7, #25]
 80021e6:	3301      	adds	r3, #1
 80021e8:	767b      	strb	r3, [r7, #25]
 80021ea:	7f3b      	ldrb	r3, [r7, #28]
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80021ee:	7892      	ldrb	r2, [r2, #2]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80021f4:	2134      	movs	r1, #52	; 0x34
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3329      	adds	r3, #41	; 0x29
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	7e7a      	ldrb	r2, [r7, #25]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3be      	bcc.n	8002184 <Si468x_dab_get_digital_service_list+0x49c>
		}
		services_count++;
 8002206:	7fbb      	ldrb	r3, [r7, #30]
 8002208:	3301      	adds	r3, #1
 800220a:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 800220c:	7f3b      	ldrb	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	773b      	strb	r3, [r7, #28]
 8002212:	7f3a      	ldrb	r2, [r7, #28]
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	429a      	cmp	r2, r3
 8002218:	f4ff adaa 	bcc.w	8001d70 <Si468x_dab_get_digital_service_list+0x88>
	}

	dab_management.total_services += number_of_services;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	4413      	add	r3, r2
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002228:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800222c:	789a      	ldrb	r2, [r3, #2]
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	4413      	add	r3, r2
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002236:	709a      	strb	r2, [r3, #2]
}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bdb0      	pop	{r4, r5, r7, pc}
 8002240:	200011a8 	.word	0x200011a8
 8002244:	20004bc4 	.word	0x20004bc4
 8002248:	20003774 	.word	0x20003774
 800224c:	0800da70 	.word	0x0800da70

08002250 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800225a:	2101      	movs	r1, #1
 800225c:	482d      	ldr	r0, [pc, #180]	; (8002314 <Si468x_dab_start_digital_service+0xc4>)
 800225e:	f001 fb0f 	bl	8003880 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002264:	2281      	movs	r2, #129	; 0x81
 8002266:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002270:	2200      	movs	r2, #0
 8002272:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002276:	2200      	movs	r2, #0
 8002278:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002280:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 800228a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002294:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0e1b      	lsrs	r3, r3, #24
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 800229e:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022a6:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022b0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022ba:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	0e1b      	lsrs	r3, r3, #24
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022c4:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80022c6:	4914      	ldr	r1, [pc, #80]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022c8:	200c      	movs	r0, #12
 80022ca:	f7ff f9e1 	bl	8001690 <Si468x_write_command>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <Si468x_dab_start_digital_service+0xcc>)
 80022d4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f004 ffde 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80022dc:	4910      	ldr	r1, [pc, #64]	; (8002320 <Si468x_dab_start_digital_service+0xd0>)
 80022de:	2005      	movs	r0, #5
 80022e0:	f7ff f9f8 	bl	80016d4 <Si468x_read_reply>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <Si468x_dab_start_digital_service+0xcc>)
 80022ea:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <Si468x_dab_start_digital_service+0xd4>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80022fa:	2101      	movs	r1, #1
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <Si468x_dab_start_digital_service+0xd8>)
 80022fe:	f001 fabf 	bl	8003880 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8002302:	e003      	b.n	800230c <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002304:	2101      	movs	r1, #1
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <Si468x_dab_start_digital_service+0xdc>)
 8002308:	f001 faba 	bl	8003880 <send_debug_msg>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800da84 	.word	0x0800da84
 8002318:	200001a8 	.word	0x200001a8
 800231c:	20003510 	.word	0x20003510
 8002320:	200011a8 	.word	0x200011a8
 8002324:	200035fc 	.word	0x200035fc
 8002328:	0800d568 	.word	0x0800d568
 800232c:	0800dac0 	.word	0x0800dac0

08002330 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800233a:	2101      	movs	r1, #1
 800233c:	484a      	ldr	r0, [pc, #296]	; (8002468 <Si468x_dab_get_ensemble_info+0x138>)
 800233e:	f001 fa9f 	bl	8003880 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 8002344:	22b4      	movs	r2, #180	; 0xb4
 8002346:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 800234a:	2200      	movs	r2, #0
 800234c:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800234e:	4947      	ldr	r1, [pc, #284]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 8002350:	2002      	movs	r0, #2
 8002352:	f7ff f99d 	bl	8001690 <Si468x_write_command>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 800235c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800235e:	2002      	movs	r0, #2
 8002360:	f004 ff9a 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002364:	4943      	ldr	r1, [pc, #268]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 8002366:	2015      	movs	r0, #21
 8002368:	f7ff f9b4 	bl	80016d4 <Si468x_read_reply>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 8002372:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002374:	e012      	b.n	800239c <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002376:	493d      	ldr	r1, [pc, #244]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff f989 	bl	8001690 <Si468x_write_command>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 8002384:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8002386:	2002      	movs	r0, #2
 8002388:	f004 ff86 	bl	8007298 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 800238c:	4939      	ldr	r1, [pc, #228]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 800238e:	2015      	movs	r0, #21
 8002390:	f7ff f9a0 	bl	80016d4 <Si468x_read_reply>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 800239a:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 800239e:	799b      	ldrb	r3, [r3, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0e8      	beq.n	8002376 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80023a4:	4b34      	ldr	r3, [pc, #208]	; (8002478 <Si468x_dab_get_ensemble_info+0x148>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023b2:	2101      	movs	r1, #1
 80023b4:	4831      	ldr	r0, [pc, #196]	; (800247c <Si468x_dab_get_ensemble_info+0x14c>)
 80023b6:	f001 fa63 	bl	8003880 <send_debug_msg>
		return 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e050      	b.n	8002460 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 80023c0:	795b      	ldrb	r3, [r3, #5]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 80023c6:	7912      	ldrb	r2, [r2, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d041      	beq.n	8002456 <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80023d2:	2101      	movs	r1, #1
 80023d4:	482a      	ldr	r0, [pc, #168]	; (8002480 <Si468x_dab_get_ensemble_info+0x150>)
 80023d6:	f001 fa53 	bl	8003880 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	b291      	uxth	r1, r2
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	4413      	add	r3, r2
 80023e8:	460a      	mov	r2, r1
 80023ea:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	4618      	mov	r0, r3
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4924      	ldr	r1, [pc, #144]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 80023f8:	0143      	lsls	r3, r0, #5
 80023fa:	440b      	add	r3, r1
 80023fc:	3318      	adds	r3, #24
 80023fe:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	4618      	mov	r0, r3
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002408:	7b19      	ldrb	r1, [r3, #12]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 800240c:	0143      	lsls	r3, r0, #5
 800240e:	4413      	add	r3, r2
 8002410:	331c      	adds	r3, #28
 8002412:	460a      	mov	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	e011      	b.n	8002440 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	1d9a      	adds	r2, r3, #6
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	461c      	mov	r4, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4912      	ldr	r1, [pc, #72]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 800242a:	5c88      	ldrb	r0, [r1, r2]
 800242c:	4916      	ldr	r1, [pc, #88]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 800242e:	0162      	lsls	r2, r4, #5
 8002430:	440a      	add	r2, r1
 8002432:	4413      	add	r3, r2
 8002434:	3302      	adds	r3, #2
 8002436:	4602      	mov	r2, r0
 8002438:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	3301      	adds	r3, #1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d9ea      	bls.n	800241c <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002450:	705a      	strb	r2, [r3, #1]
			return 1;
 8002452:	2301      	movs	r3, #1
 8002454:	e004      	b.n	8002460 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002456:	2101      	movs	r1, #1
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <Si468x_dab_get_ensemble_info+0x15c>)
 800245a:	f001 fa11 	bl	8003880 <send_debug_msg>
			return 0;
 800245e:	2300      	movs	r3, #0
		}
	}
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	0800dae0 	.word	0x0800dae0
 800246c:	200001a8 	.word	0x200001a8
 8002470:	20003510 	.word	0x20003510
 8002474:	200011a8 	.word	0x200011a8
 8002478:	200035fc 	.word	0x200035fc
 800247c:	0800d568 	.word	0x0800d568
 8002480:	0800db1c 	.word	0x0800db1c
 8002484:	20004bc4 	.word	0x20004bc4
 8002488:	20003634 	.word	0x20003634
 800248c:	0800db2c 	.word	0x0800db2c

08002490 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b099      	sub	sp, #100	; 0x64
 8002494:	af0a      	add	r7, sp, #40	; 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 8002496:	2101      	movs	r1, #1
 8002498:	4887      	ldr	r0, [pc, #540]	; (80026b8 <Si468x_dab_full_scan+0x228>)
 800249a:	f001 f9f1 	bl	8003880 <send_debug_msg>
	dab_management.total_services = 0;
 800249e:	4b87      	ldr	r3, [pc, #540]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 80024a4:	4b85      	ldr	r3, [pc, #532]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 80024aa:	4b84      	ldr	r3, [pc, #528]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t fic_q_timeout = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t _scan_cancel_flag = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024c8:	e09e      	b.n	8002608 <Si468x_dab_full_scan+0x178>
	{
		_touch_coordinates = Touch_read();
 80024ca:	f004 fb3d 	bl	8006b48 <Touch_read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80024d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d90c      	bls.n	80024f2 <Si468x_dab_full_scan+0x62>
 80024d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024da:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80024de:	d808      	bhi.n	80024f2 <Si468x_dab_full_scan+0x62>
 80024e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024e2:	2bc3      	cmp	r3, #195	; 0xc3
 80024e4:	d905      	bls.n	80024f2 <Si468x_dab_full_scan+0x62>
 80024e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024e8:	2bea      	cmp	r3, #234	; 0xea
 80024ea:	d802      	bhi.n	80024f2 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		if(_scan_cancel_flag)
 80024f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 808e 	bne.w	8002618 <Si468x_dab_full_scan+0x188>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80024fc:	2306      	movs	r3, #6
 80024fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002502:	2396      	movs	r3, #150	; 0x96
 8002504:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		Si468x_dab_tune_freq(freq_index, 0);
 8002508:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fada 	bl	8001ac8 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002514:	463b      	mov	r3, r7
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fb8e 	bl	8001c38 <Si468x_dab_digrad_status>
			valid_timeout--;
 800251c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002520:	3b01      	subs	r3, #1
 8002522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(!valid_timeout)
 8002526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 800252e:	2101      	movs	r1, #1
 8002530:	4863      	ldr	r0, [pc, #396]	; (80026c0 <Si468x_dab_full_scan+0x230>)
 8002532:	f001 f9a5 	bl	8003880 <send_debug_msg>
				break;
 8002536:	e010      	b.n	800255a <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002538:	2032      	movs	r0, #50	; 0x32
 800253a:	f004 fead 	bl	8007298 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 800253e:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0e3      	beq.n	8002514 <Si468x_dab_full_scan+0x84>
 800254c:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0dc      	beq.n	8002514 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800255a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800255e:	2b00      	cmp	r3, #0
 8002560:	d018      	beq.n	8002594 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002562:	463b      	mov	r3, r7
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb67 	bl	8001c38 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800256a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800256e:	3b01      	subs	r3, #1
 8002570:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(!fic_q_timeout)
 8002574:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 800257c:	2101      	movs	r1, #1
 800257e:	4850      	ldr	r0, [pc, #320]	; (80026c0 <Si468x_dab_full_scan+0x230>)
 8002580:	f001 f97e 	bl	8003880 <send_debug_msg>
					break;
 8002584:	e006      	b.n	8002594 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002586:	2032      	movs	r0, #50	; 0x32
 8002588:	f004 fe86 	bl	8007298 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 800258c:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	2b31      	cmp	r3, #49	; 0x31
 8002592:	d9e6      	bls.n	8002562 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002594:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01d      	beq.n	80025d8 <Si468x_dab_full_scan+0x148>
 800259c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d019      	beq.n	80025d8 <Si468x_dab_full_scan+0x148>
		{
			do
			{
				Si468x_dab_get_event_status();
 80025a4:	f000 fb12 	bl	8002bcc <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80025a8:	200a      	movs	r0, #10
 80025aa:	f004 fe75 	bl	8007298 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80025ae:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <Si468x_dab_full_scan+0x238>)
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f3      	beq.n	80025a4 <Si468x_dab_full_scan+0x114>
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <Si468x_dab_full_scan+0x238>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ec      	bne.n	80025a4 <Si468x_dab_full_scan+0x114>

			if(Si468x_dab_get_ensemble_info())
 80025ca:	f7ff feb1 	bl	8002330 <Si468x_dab_get_ensemble_info>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <Si468x_dab_full_scan+0x148>
			{
				Si468x_dab_get_digital_service_list();
 80025d4:	f7ff fb88 	bl	8001ce8 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80025d8:	4e3a      	ldr	r6, [pc, #232]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80025dc:	ac06      	add	r4, sp, #24
 80025de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025e4:	466d      	mov	r5, sp
 80025e6:	f106 0410 	add.w	r4, r6, #16
 80025ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025fa:	f001 ffb3 	bl	8004564 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80025fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002602:	3301      	adds	r3, #1
 8002604:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 800260a:	7b5b      	ldrb	r3, [r3, #13]
 800260c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002610:	429a      	cmp	r2, r3
 8002612:	f4ff af5a 	bcc.w	80024ca <Si468x_dab_full_scan+0x3a>
 8002616:	e000      	b.n	800261a <Si468x_dab_full_scan+0x18a>
			break;
 8002618:	bf00      	nop
	}

	if(_scan_cancel_flag)
 800261a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <Si468x_dab_full_scan+0x1a2>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 8002622:	2101      	movs	r1, #1
 8002624:	4829      	ldr	r0, [pc, #164]	; (80026cc <Si468x_dab_full_scan+0x23c>)
 8002626:	f001 f92b 	bl	8003880 <send_debug_msg>
		restore_from_eeprom();
 800262a:	f000 fdc3 	bl	80031b4 <restore_from_eeprom>
		return 0;
 800262e:	2300      	movs	r3, #0
 8002630:	e1e9      	b.n	8002a06 <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 8002632:	f002 fffb 	bl	800562c <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <Si468x_dab_full_scan+0x1d6>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002640:	7819      	ldrb	r1, [r3, #0]
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <Si468x_dab_full_scan+0x240>)
 8002648:	4822      	ldr	r0, [pc, #136]	; (80026d4 <Si468x_dab_full_scan+0x244>)
 800264a:	f003 f84b 	bl	80056e4 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002650:	2200      	movs	r2, #0
 8002652:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002656:	2200      	movs	r2, #0
 8002658:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 800265a:	2201      	movs	r2, #1
 800265c:	491e      	ldr	r1, [pc, #120]	; (80026d8 <Si468x_dab_full_scan+0x248>)
 800265e:	f240 1007 	movw	r0, #263	; 0x107
 8002662:	f002 ffbb 	bl	80055dc <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002666:	2100      	movs	r1, #0
 8002668:	481c      	ldr	r0, [pc, #112]	; (80026dc <Si468x_dab_full_scan+0x24c>)
 800266a:	f001 f909 	bl	8003880 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	220a      	movs	r2, #10
 8002674:	491a      	ldr	r1, [pc, #104]	; (80026e0 <Si468x_dab_full_scan+0x250>)
 8002676:	4618      	mov	r0, r3
 8002678:	f00a fe04 	bl	800d284 <itoa>
 800267c:	4603      	mov	r3, r0
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f8fd 	bl	8003880 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002686:	2101      	movs	r1, #1
 8002688:	4816      	ldr	r0, [pc, #88]	; (80026e4 <Si468x_dab_full_scan+0x254>)
 800268a:	f001 f8f9 	bl	8003880 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 800268e:	2100      	movs	r1, #0
 8002690:	4815      	ldr	r0, [pc, #84]	; (80026e8 <Si468x_dab_full_scan+0x258>)
 8002692:	f001 f8f5 	bl	8003880 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002696:	2100      	movs	r1, #0
 8002698:	4814      	ldr	r0, [pc, #80]	; (80026ec <Si468x_dab_full_scan+0x25c>)
 800269a:	f001 f8f1 	bl	8003880 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 800269e:	2100      	movs	r1, #0
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <Si468x_dab_full_scan+0x260>)
 80026a2:	f001 f8ed 	bl	8003880 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80026a6:	2101      	movs	r1, #1
 80026a8:	4812      	ldr	r0, [pc, #72]	; (80026f4 <Si468x_dab_full_scan+0x264>)
 80026aa:	f001 f8e9 	bl	8003880 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80026b4:	e07d      	b.n	80027b2 <Si468x_dab_full_scan+0x322>
 80026b6:	bf00      	nop
 80026b8:	0800db40 	.word	0x0800db40
 80026bc:	20004bc4 	.word	0x20004bc4
 80026c0:	0800db2c 	.word	0x0800db2c
 80026c4:	200035d4 	.word	0x200035d4
 80026c8:	20003600 	.word	0x20003600
 80026cc:	0800db7c 	.word	0x0800db7c
 80026d0:	20003634 	.word	0x20003634
 80026d4:	20003774 	.word	0x20003774
 80026d8:	20004bc8 	.word	0x20004bc8
 80026dc:	0800db90 	.word	0x0800db90
 80026e0:	200034d0 	.word	0x200034d0
 80026e4:	0800dba4 	.word	0x0800dba4
 80026e8:	0800dbd8 	.word	0x0800dbd8
 80026ec:	0800dbe4 	.word	0x0800dbe4
 80026f0:	0800dbf8 	.word	0x0800dbf8
 80026f4:	0800dc08 	.word	0x0800dc08
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80026f8:	2100      	movs	r1, #0
 80026fa:	48c5      	ldr	r0, [pc, #788]	; (8002a10 <Si468x_dab_full_scan+0x580>)
 80026fc:	f001 f8c0 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002704:	3301      	adds	r3, #1
 8002706:	220a      	movs	r2, #10
 8002708:	49c2      	ldr	r1, [pc, #776]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fdba 	bl	800d284 <itoa>
 8002710:	4603      	mov	r3, r0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f8b3 	bl	8003880 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 800271a:	2100      	movs	r1, #0
 800271c:	48be      	ldr	r0, [pc, #760]	; (8002a18 <Si468x_dab_full_scan+0x588>)
 800271e:	f001 f8af 	bl	8003880 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8002722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	4abc      	ldr	r2, [pc, #752]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800272a:	4413      	add	r3, r2
 800272c:	3302      	adds	r3, #2
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f001 f8a5 	bl	8003880 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8002736:	2100      	movs	r1, #0
 8002738:	48b5      	ldr	r0, [pc, #724]	; (8002a10 <Si468x_dab_full_scan+0x580>)
 800273a:	f001 f8a1 	bl	8003880 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800273e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002742:	4ab6      	ldr	r2, [pc, #728]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 8002744:	015b      	lsls	r3, r3, #5
 8002746:	4413      	add	r3, r2
 8002748:	3318      	adds	r3, #24
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	220a      	movs	r2, #10
 800274e:	49b1      	ldr	r1, [pc, #708]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002750:	4618      	mov	r0, r3
 8002752:	f00a fd97 	bl	800d284 <itoa>
 8002756:	4603      	mov	r3, r0
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f890 	bl	8003880 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002760:	2100      	movs	r1, #0
 8002762:	48af      	ldr	r0, [pc, #700]	; (8002a20 <Si468x_dab_full_scan+0x590>)
 8002764:	f001 f88c 	bl	8003880 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002768:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800276c:	4aab      	ldr	r2, [pc, #684]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	4413      	add	r3, r2
 8002772:	331c      	adds	r3, #28
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4baa      	ldr	r3, [pc, #680]	; (8002a24 <Si468x_dab_full_scan+0x594>)
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f87d 	bl	8003880 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8002786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800278a:	4aa4      	ldr	r2, [pc, #656]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800278c:	015b      	lsls	r3, r3, #5
 800278e:	4413      	add	r3, r2
 8002790:	331c      	adds	r3, #28
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b13      	cmp	r3, #19
 8002796:	d803      	bhi.n	80027a0 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002798:	2100      	movs	r1, #0
 800279a:	48a3      	ldr	r0, [pc, #652]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 800279c:	f001 f870 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80027a0:	2101      	movs	r1, #1
 80027a2:	48a2      	ldr	r0, [pc, #648]	; (8002a2c <Si468x_dab_full_scan+0x59c>)
 80027a4:	f001 f86c 	bl	8003880 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80027a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027ac:	3301      	adds	r3, #1
 80027ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80027b2:	4b9f      	ldr	r3, [pc, #636]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d39c      	bcc.n	80026f8 <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027be:	2101      	movs	r1, #1
 80027c0:	489c      	ldr	r0, [pc, #624]	; (8002a34 <Si468x_dab_full_scan+0x5a4>)
 80027c2:	f001 f85d 	bl	8003880 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80027c6:	2100      	movs	r1, #0
 80027c8:	489b      	ldr	r0, [pc, #620]	; (8002a38 <Si468x_dab_full_scan+0x5a8>)
 80027ca:	f001 f859 	bl	8003880 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80027ce:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	220a      	movs	r2, #10
 80027d4:	498f      	ldr	r1, [pc, #572]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a fd54 	bl	800d284 <itoa>
 80027dc:	4603      	mov	r3, r0
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 f84d 	bl	8003880 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80027e6:	2101      	movs	r1, #1
 80027e8:	4894      	ldr	r0, [pc, #592]	; (8002a3c <Si468x_dab_full_scan+0x5ac>)
 80027ea:	f001 f849 	bl	8003880 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80027ee:	2101      	movs	r1, #1
 80027f0:	4893      	ldr	r0, [pc, #588]	; (8002a40 <Si468x_dab_full_scan+0x5b0>)
 80027f2:	f001 f845 	bl	8003880 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80027fc:	e0f7      	b.n	80029ee <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80027fe:	2100      	movs	r1, #0
 8002800:	4883      	ldr	r0, [pc, #524]	; (8002a10 <Si468x_dab_full_scan+0x580>)
 8002802:	f001 f83d 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800280a:	3301      	adds	r3, #1
 800280c:	220a      	movs	r2, #10
 800280e:	4981      	ldr	r1, [pc, #516]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002810:	4618      	mov	r0, r3
 8002812:	f00a fd37 	bl	800d284 <itoa>
 8002816:	4603      	mov	r3, r0
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f830 	bl	8003880 <send_debug_msg>
			if((services_index + 1) < 10)
 8002820:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002824:	2b08      	cmp	r3, #8
 8002826:	d803      	bhi.n	8002830 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002828:	2100      	movs	r1, #0
 800282a:	487f      	ldr	r0, [pc, #508]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 800282c:	f001 f828 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002830:	2100      	movs	r1, #0
 8002832:	4884      	ldr	r0, [pc, #528]	; (8002a44 <Si468x_dab_full_scan+0x5b4>)
 8002834:	f001 f824 	bl	8003880 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002838:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800283c:	2234      	movs	r2, #52	; 0x34
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a81      	ldr	r2, [pc, #516]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002844:	4413      	add	r3, r2
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f001 f819 	bl	8003880 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800284e:	2100      	movs	r1, #0
 8002850:	487e      	ldr	r0, [pc, #504]	; (8002a4c <Si468x_dab_full_scan+0x5bc>)
 8002852:	f001 f815 	bl	8003880 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800285c:	e021      	b.n	80028a2 <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800285e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	4413      	add	r3, r2
 8002868:	331c      	adds	r3, #28
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002870:	4975      	ldr	r1, [pc, #468]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002872:	2034      	movs	r0, #52	; 0x34
 8002874:	fb00 f303 	mul.w	r3, r0, r3
 8002878:	440b      	add	r3, r1
 800287a:	3328      	adds	r3, #40	; 0x28
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d10a      	bne.n	8002898 <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002882:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002886:	015b      	lsls	r3, r3, #5
 8002888:	4a64      	ldr	r2, [pc, #400]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800288a:	4413      	add	r3, r2
 800288c:	3302      	adds	r3, #2
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fff5 	bl	8003880 <send_debug_msg>
					break;
 8002896:	e00a      	b.n	80028ae <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002898:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800289c:	3301      	adds	r3, #1
 800289e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d3d7      	bcc.n	800285e <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80028ae:	2100      	movs	r1, #0
 80028b0:	4866      	ldr	r0, [pc, #408]	; (8002a4c <Si468x_dab_full_scan+0x5bc>)
 80028b2:	f000 ffe5 	bl	8003880 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80028b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028ba:	4a63      	ldr	r2, [pc, #396]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 80028bc:	2134      	movs	r1, #52	; 0x34
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3324      	adds	r3, #36	; 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	220a      	movs	r2, #10
 80028ca:	4952      	ldr	r1, [pc, #328]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00a fcd9 	bl	800d284 <itoa>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 ffd2 	bl	8003880 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80028dc:	2100      	movs	r1, #0
 80028de:	4850      	ldr	r0, [pc, #320]	; (8002a20 <Si468x_dab_full_scan+0x590>)
 80028e0:	f000 ffce 	bl	8003880 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80028e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 80028ea:	2134      	movs	r1, #52	; 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3328      	adds	r3, #40	; 0x28
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <Si468x_dab_full_scan+0x594>)
 80028fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ffbd 	bl	8003880 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8002906:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800290a:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 800290c:	2134      	movs	r1, #52	; 0x34
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b13      	cmp	r3, #19
 800291a:	d803      	bhi.n	8002924 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800291c:	2100      	movs	r1, #0
 800291e:	4842      	ldr	r0, [pc, #264]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 8002920:	f000 ffae 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002924:	2100      	movs	r1, #0
 8002926:	4847      	ldr	r0, [pc, #284]	; (8002a44 <Si468x_dab_full_scan+0x5b4>)
 8002928:	f000 ffaa 	bl	8003880 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 800292c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002930:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002932:	2134      	movs	r1, #52	; 0x34
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3315      	adds	r3, #21
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	220a      	movs	r2, #10
 8002940:	4934      	ldr	r1, [pc, #208]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002942:	4618      	mov	r0, r3
 8002944:	f00a fc9e 	bl	800d284 <itoa>
 8002948:	4603      	mov	r3, r0
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f000 ff97 	bl	8003880 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002956:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002958:	2134      	movs	r1, #52	; 0x34
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3315      	adds	r3, #21
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d803      	bhi.n	8002970 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002968:	2100      	movs	r1, #0
 800296a:	482f      	ldr	r0, [pc, #188]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 800296c:	f000 ff88 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002970:	2100      	movs	r1, #0
 8002972:	4837      	ldr	r0, [pc, #220]	; (8002a50 <Si468x_dab_full_scan+0x5c0>)
 8002974:	f000 ff84 	bl	8003880 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002978:	2100      	movs	r1, #0
 800297a:	4836      	ldr	r0, [pc, #216]	; (8002a54 <Si468x_dab_full_scan+0x5c4>)
 800297c:	f000 ff80 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002980:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002986:	2134      	movs	r1, #52	; 0x34
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3320      	adds	r3, #32
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	491f      	ldr	r1, [pc, #124]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002996:	4618      	mov	r0, r3
 8002998:	f00a fc74 	bl	800d284 <itoa>
 800299c:	4603      	mov	r3, r0
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 ff6d 	bl	8003880 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029a6:	2100      	movs	r1, #0
 80029a8:	4826      	ldr	r0, [pc, #152]	; (8002a44 <Si468x_dab_full_scan+0x5b4>)
 80029aa:	f000 ff69 	bl	8003880 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029ae:	2100      	movs	r1, #0
 80029b0:	4828      	ldr	r0, [pc, #160]	; (8002a54 <Si468x_dab_full_scan+0x5c4>)
 80029b2:	f000 ff65 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 80029bc:	2134      	movs	r1, #52	; 0x34
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	332a      	adds	r3, #42	; 0x2a
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4912      	ldr	r1, [pc, #72]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00a fc59 	bl	800d284 <itoa>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 ff52 	bl	8003880 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80029dc:	2101      	movs	r1, #1
 80029de:	481e      	ldr	r0, [pc, #120]	; (8002a58 <Si468x_dab_full_scan+0x5c8>)
 80029e0:	f000 ff4e 	bl	8003880 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80029e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029e8:	3301      	adds	r3, #1
 80029ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f4ff af01 	bcc.w	80027fe <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80029fc:	2101      	movs	r1, #1
 80029fe:	480f      	ldr	r0, [pc, #60]	; (8002a3c <Si468x_dab_full_scan+0x5ac>)
 8002a00:	f000 ff3e 	bl	8003880 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002a04:	2301      	movs	r3, #1
	}
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	373c      	adds	r7, #60	; 0x3c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800dc18 	.word	0x0800dc18
 8002a14:	200034d0 	.word	0x200034d0
 8002a18:	0800dc1c 	.word	0x0800dc1c
 8002a1c:	20003634 	.word	0x20003634
 8002a20:	0800dc28 	.word	0x0800dc28
 8002a24:	20000008 	.word	0x20000008
 8002a28:	0800dc30 	.word	0x0800dc30
 8002a2c:	0800dc34 	.word	0x0800dc34
 8002a30:	20004bc4 	.word	0x20004bc4
 8002a34:	0800dba4 	.word	0x0800dba4
 8002a38:	0800dc3c 	.word	0x0800dc3c
 8002a3c:	0800dc50 	.word	0x0800dc50
 8002a40:	0800dcbc 	.word	0x0800dcbc
 8002a44:	0800dd28 	.word	0x0800dd28
 8002a48:	20003774 	.word	0x20003774
 8002a4c:	0800dd30 	.word	0x0800dd30
 8002a50:	0800dd34 	.word	0x0800dd34
 8002a54:	0800dd3c 	.word	0x0800dd3c
 8002a58:	0800dd40 	.word	0x0800dd40

08002a5c <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002a64:	2101      	movs	r1, #1
 8002a66:	484d      	ldr	r0, [pc, #308]	; (8002b9c <Si468x_dab_get_audio_info+0x140>)
 8002a68:	f000 ff0a 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <Si468x_dab_get_audio_info+0x144>)
 8002a6e:	22bd      	movs	r2, #189	; 0xbd
 8002a70:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002a72:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <Si468x_dab_get_audio_info+0x144>)
 8002a74:	2203      	movs	r2, #3
 8002a76:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002a78:	4949      	ldr	r1, [pc, #292]	; (8002ba0 <Si468x_dab_get_audio_info+0x144>)
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fe fe08 	bl	8001690 <Si468x_write_command>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <Si468x_dab_get_audio_info+0x148>)
 8002a86:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f004 fc05 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002a8e:	4946      	ldr	r1, [pc, #280]	; (8002ba8 <Si468x_dab_get_audio_info+0x14c>)
 8002a90:	2014      	movs	r0, #20
 8002a92:	f7fe fe1f 	bl	80016d4 <Si468x_read_reply>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <Si468x_dab_get_audio_info+0x148>)
 8002a9c:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002a9e:	4a43      	ldr	r2, [pc, #268]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <Si468x_dab_get_audio_info+0x14c>)
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002aac:	2100      	movs	r1, #0
 8002aae:	4840      	ldr	r0, [pc, #256]	; (8002bb0 <Si468x_dab_get_audio_info+0x154>)
 8002ab0:	f000 fee6 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	220a      	movs	r2, #10
 8002aba:	493e      	ldr	r1, [pc, #248]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00a fbe1 	bl	800d284 <itoa>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 feda 	bl	8003880 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002acc:	2100      	movs	r1, #0
 8002ace:	483a      	ldr	r0, [pc, #232]	; (8002bb8 <Si468x_dab_get_audio_info+0x15c>)
 8002ad0:	f000 fed6 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002ad6:	885b      	ldrh	r3, [r3, #2]
 8002ad8:	220a      	movs	r2, #10
 8002ada:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00a fbd1 	bl	800d284 <itoa>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 feca 	bl	8003880 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002aec:	2100      	movs	r1, #0
 8002aee:	4833      	ldr	r0, [pc, #204]	; (8002bbc <Si468x_dab_get_audio_info+0x160>)
 8002af0:	f000 fec6 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002af6:	791b      	ldrb	r3, [r3, #4]
 8002af8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	220a      	movs	r2, #10
 8002b00:	492c      	ldr	r1, [pc, #176]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00a fbbe 	bl	800d284 <itoa>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 feb7 	bl	8003880 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002b12:	2100      	movs	r1, #0
 8002b14:	482a      	ldr	r0, [pc, #168]	; (8002bc0 <Si468x_dab_get_audio_info+0x164>)
 8002b16:	f000 feb3 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	220a      	movs	r2, #10
 8002b26:	4923      	ldr	r1, [pc, #140]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f00a fbab 	bl	800d284 <itoa>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fea4 	bl	8003880 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4822      	ldr	r0, [pc, #136]	; (8002bc4 <Si468x_dab_get_audio_info+0x168>)
 8002b3c:	f000 fea0 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b42:	791b      	ldrb	r3, [r3, #4]
 8002b44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	220a      	movs	r2, #10
 8002b4c:	4919      	ldr	r1, [pc, #100]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00a fb98 	bl	800d284 <itoa>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2101      	movs	r1, #1
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fe91 	bl	8003880 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4819      	ldr	r0, [pc, #100]	; (8002bc8 <Si468x_dab_get_audio_info+0x16c>)
 8002b62:	f000 fe8d 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	220a      	movs	r2, #10
 8002b72:	4910      	ldr	r1, [pc, #64]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00a fb85 	bl	800d284 <itoa>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fe7e 	bl	8003880 <send_debug_msg>

	return dab_audio_info;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b88:	461c      	mov	r4, r3
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	0800dd4c 	.word	0x0800dd4c
 8002ba0:	200001a8 	.word	0x200001a8
 8002ba4:	20003510 	.word	0x20003510
 8002ba8:	200011a8 	.word	0x200011a8
 8002bac:	20003610 	.word	0x20003610
 8002bb0:	0800dd88 	.word	0x0800dd88
 8002bb4:	200034d0 	.word	0x200034d0
 8002bb8:	0800dd94 	.word	0x0800dd94
 8002bbc:	0800dda4 	.word	0x0800dda4
 8002bc0:	0800ddb8 	.word	0x0800ddb8
 8002bc4:	0800ddc4 	.word	0x0800ddc4
 8002bc8:	0800ddd0 	.word	0x0800ddd0

08002bcc <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4811      	ldr	r0, [pc, #68]	; (8002c18 <Si468x_dab_get_event_status+0x4c>)
 8002bd4:	f000 fe54 	bl	8003880 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <Si468x_dab_get_event_status+0x50>)
 8002bda:	22b3      	movs	r2, #179	; 0xb3
 8002bdc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <Si468x_dab_get_event_status+0x50>)
 8002be0:	2203      	movs	r2, #3
 8002be2:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002be4:	490d      	ldr	r1, [pc, #52]	; (8002c1c <Si468x_dab_get_event_status+0x50>)
 8002be6:	2002      	movs	r0, #2
 8002be8:	f7fe fd52 	bl	8001690 <Si468x_write_command>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <Si468x_dab_get_event_status+0x54>)
 8002bf2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f004 fb4f 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <Si468x_dab_get_event_status+0x58>)
 8002bfc:	2009      	movs	r0, #9
 8002bfe:	f7fe fd69 	bl	80016d4 <Si468x_read_reply>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <Si468x_dab_get_event_status+0x54>)
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <Si468x_dab_get_event_status+0x58>)
 8002c0c:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002c0e:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <Si468x_dab_get_event_status+0x5c>)
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	0800dde0 	.word	0x0800dde0
 8002c1c:	200001a8 	.word	0x200001a8
 8002c20:	20003510 	.word	0x20003510
 8002c24:	200011a8 	.word	0x200011a8
 8002c28:	20003600 	.word	0x20003600

08002c2c <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	484a      	ldr	r0, [pc, #296]	; (8002d64 <Si468x_dab_get_component_info+0x138>)
 8002c3c:	f000 fe20 	bl	8003880 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c40:	4b49      	ldr	r3, [pc, #292]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c42:	22bb      	movs	r2, #187	; 0xbb
 8002c44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c46:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c52:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c5e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c68:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c72:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c7c:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	121b      	asrs	r3, r3, #8
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c8c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	141b      	asrs	r3, r3, #16
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c96:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	161b      	asrs	r3, r3, #24
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002ca0:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002ca2:	4931      	ldr	r1, [pc, #196]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002ca4:	200c      	movs	r0, #12
 8002ca6:	f7fe fcf3 	bl	8001690 <Si468x_write_command>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <Si468x_dab_get_component_info+0x140>)
 8002cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002cb2:	2005      	movs	r0, #5
 8002cb4:	f004 faf0 	bl	8007298 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002cb8:	492d      	ldr	r1, [pc, #180]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002cba:	201a      	movs	r0, #26
 8002cbc:	f7fe fd0a 	bl	80016d4 <Si468x_read_reply>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <Si468x_dab_get_component_info+0x140>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002cca:	799b      	ldrb	r3, [r3, #6]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd0:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e00c      	b.n	8002cf2 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
 8002cda:	f103 0208 	add.w	r2, r3, #8
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	4923      	ldr	r1, [pc, #140]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002ce2:	5c8a      	ldrb	r2, [r1, r2]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d9ef      	bls.n	8002cd8 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002d00:	7e5b      	ldrb	r3, [r3, #25]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4819      	ldr	r0, [pc, #100]	; (8002d74 <Si468x_dab_get_component_info+0x148>)
 8002d10:	f000 fdb6 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d14:	7fbb      	ldrb	r3, [r7, #30]
 8002d16:	220a      	movs	r2, #10
 8002d18:	4917      	ldr	r1, [pc, #92]	; (8002d78 <Si468x_dab_get_component_info+0x14c>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a fab2 	bl	800d284 <itoa>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fdab 	bl	8003880 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <Si468x_dab_get_component_info+0x150>)
 8002d2e:	f000 fda7 	bl	8003880 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fda1 	bl	8003880 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	480f      	ldr	r0, [pc, #60]	; (8002d80 <Si468x_dab_get_component_info+0x154>)
 8002d42:	f000 fd9d 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d46:	8bbb      	ldrh	r3, [r7, #28]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	490b      	ldr	r1, [pc, #44]	; (8002d78 <Si468x_dab_get_component_info+0x14c>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00a fa99 	bl	800d284 <itoa>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fd92 	bl	8003880 <send_debug_msg>

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	0800de20 	.word	0x0800de20
 8002d68:	200001a8 	.word	0x200001a8
 8002d6c:	20003510 	.word	0x20003510
 8002d70:	200011a8 	.word	0x200011a8
 8002d74:	0800de54 	.word	0x0800de54
 8002d78:	200034d0 	.word	0x200034d0
 8002d7c:	0800de60 	.word	0x0800de60
 8002d80:	0800de74 	.word	0x0800de74

08002d84 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002d8a:	4976      	ldr	r1, [pc, #472]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002d8c:	2005      	movs	r0, #5
 8002d8e:	f7fe fca1 	bl	80016d4 <Si468x_read_reply>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <Si468x_dab_get_digital_service_data+0x1e4>)
 8002d98:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <Si468x_dab_get_digital_service_data+0x1e8>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80d8 	beq.w	8002f5a <Si468x_dab_get_digital_service_data+0x1d6>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002daa:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <Si468x_dab_get_digital_service_data+0x1ec>)
 8002dac:	2284      	movs	r2, #132	; 0x84
 8002dae:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <Si468x_dab_get_digital_service_data+0x1ec>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002db6:	496e      	ldr	r1, [pc, #440]	; (8002f70 <Si468x_dab_get_digital_service_data+0x1ec>)
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fe fc69 	bl	8001690 <Si468x_write_command>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b69      	ldr	r3, [pc, #420]	; (8002f68 <Si468x_dab_get_digital_service_data+0x1e4>)
 8002dc4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002dc6:	2005      	movs	r0, #5
 8002dc8:	f004 fa66 	bl	8007298 <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002dcc:	4965      	ldr	r1, [pc, #404]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002dce:	201e      	movs	r0, #30
 8002dd0:	f7fe fc80 	bl	80016d4 <Si468x_read_reply>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <Si468x_dab_get_digital_service_data+0x1e4>)
 8002dda:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002ddc:	4a65      	ldr	r2, [pc, #404]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002de0:	4615      	mov	r5, r2
 8002de2:	1d1c      	adds	r4, r3, #4
 8002de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002dec:	2101      	movs	r1, #1
 8002dee:	4862      	ldr	r0, [pc, #392]	; (8002f78 <Si468x_dab_get_digital_service_data+0x1f4>)
 8002df0:	f000 fd46 	bl	8003880 <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002df4:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80ab 	bne.w	8002f5a <Si468x_dab_get_digital_service_data+0x1d6>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002e04:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002e06:	89db      	ldrh	r3, [r3, #14]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4955      	ldr	r1, [pc, #340]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fc60 	bl	80016d4 <Si468x_read_reply>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <Si468x_dab_get_digital_service_data+0x1e4>)
 8002e1a:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002e1c:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002e1e:	78db      	ldrb	r3, [r3, #3]
 8002e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b3c      	cmp	r3, #60	; 0x3c
 8002e28:	d12f      	bne.n	8002e8a <Si468x_dab_get_digital_service_data+0x106>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4853      	ldr	r0, [pc, #332]	; (8002f7c <Si468x_dab_get_digital_service_data+0x1f8>)
 8002e2e:	f000 fd27 	bl	8003880 <send_debug_msg>

					for(uint16_t i = 0; i < 4096; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	81fb      	strh	r3, [r7, #14]
 8002e36:	e006      	b.n	8002e46 <Si468x_dab_get_digital_service_data+0xc2>
					{
						slideshow_data[i] = 0;
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <Si468x_dab_get_digital_service_data+0x1fc>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	3301      	adds	r3, #1
 8002e44:	81fb      	strh	r3, [r7, #14]
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d3f4      	bcc.n	8002e38 <Si468x_dab_get_digital_service_data+0xb4>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	81bb      	strh	r3, [r7, #12]
 8002e52:	e00a      	b.n	8002e6a <Si468x_dab_get_digital_service_data+0xe6>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002e54:	89bb      	ldrh	r3, [r7, #12]
 8002e56:	f103 0218 	add.w	r2, r3, #24
 8002e5a:	89bb      	ldrh	r3, [r7, #12]
 8002e5c:	4941      	ldr	r1, [pc, #260]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002e5e:	5c89      	ldrb	r1, [r1, r2]
 8002e60:	4a47      	ldr	r2, [pc, #284]	; (8002f80 <Si468x_dab_get_digital_service_data+0x1fc>)
 8002e62:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002e64:	89bb      	ldrh	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	81bb      	strh	r3, [r7, #12]
 8002e6a:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002e6c:	89db      	ldrh	r3, [r3, #14]
 8002e6e:	89ba      	ldrh	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3ef      	bcc.n	8002e54 <Si468x_dab_get_digital_service_data+0xd0>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	817b      	strh	r3, [r7, #10]
 8002e78:	e002      	b.n	8002e80 <Si468x_dab_get_digital_service_data+0xfc>
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	817b      	strh	r3, [r7, #10]
 8002e80:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002e82:	89db      	ldrh	r3, [r3, #14]
 8002e84:	897a      	ldrh	r2, [r7, #10]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3f7      	bcc.n	8002e7a <Si468x_dab_get_digital_service_data+0xf6>
					}
//					send_debug_msg("", CRLF_SEND);
//					send_debug_msg("end", CRLF_SEND);
				}

				if(dab_service_data_reply_header.data_src == 2)
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d160      	bne.n	8002f5a <Si468x_dab_get_digital_service_data+0x1d6>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	483a      	ldr	r0, [pc, #232]	; (8002f84 <Si468x_dab_get_digital_service_data+0x200>)
 8002e9c:	f000 fcf0 	bl	8003880 <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	727b      	strb	r3, [r7, #9]
 8002ea4:	e006      	b.n	8002eb4 <Si468x_dab_get_digital_service_data+0x130>
					{
						dls_label[i] = 0;
 8002ea6:	7a7b      	ldrb	r3, [r7, #9]
 8002ea8:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 8002eae:	7a7b      	ldrb	r3, [r7, #9]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	727b      	strb	r3, [r7, #9]
 8002eb4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	daf4      	bge.n	8002ea6 <Si468x_dab_get_digital_service_data+0x122>
					}

					uint8_t label_pos = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	723b      	strb	r3, [r7, #8]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	e03f      	b.n	8002f46 <Si468x_dab_get_digital_service_data+0x1c2>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f103 021a 	add.w	r2, r3, #26
 8002ecc:	7a3b      	ldrb	r3, [r7, #8]
 8002ece:	4925      	ldr	r1, [pc, #148]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002ed0:	5c89      	ldrb	r1, [r1, r2]
 8002ed2:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002ed4:	54d1      	strb	r1, [r2, r3]
						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	331a      	adds	r3, #26
 8002eda:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <Si468x_dab_get_digital_service_data+0x1e0>)
 8002edc:	5cd3      	ldrb	r3, [r2, r3]
 8002ede:	220a      	movs	r2, #10
 8002ee0:	492a      	ldr	r1, [pc, #168]	; (8002f8c <Si468x_dab_get_digital_service_data+0x208>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f00a f9ce 	bl	800d284 <itoa>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2101      	movs	r1, #1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fcc7 	bl	8003880 <send_debug_msg>

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8002ef2:	7a3b      	ldrb	r3, [r7, #8]
 8002ef4:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	2bc3      	cmp	r3, #195	; 0xc3
 8002efa:	d106      	bne.n	8002f0a <Si468x_dab_get_digital_service_data+0x186>
						{
							dls_label[label_pos] = 111;//lub 243
 8002efc:	7a3b      	ldrb	r3, [r7, #8]
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002f00:	216f      	movs	r1, #111	; 0x6f
 8002f02:	54d1      	strb	r1, [r2, r3]
							i++;
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	3301      	adds	r3, #1
 8002f08:	71fb      	strb	r3, [r7, #7]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 8002f0a:	7a3b      	ldrb	r3, [r7, #8]
 8002f0c:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	2bc4      	cmp	r3, #196	; 0xc4
 8002f12:	d106      	bne.n	8002f22 <Si468x_dab_get_digital_service_data+0x19e>
						{
							dls_label[label_pos] = 99; //lub 230
 8002f14:	7a3b      	ldrb	r3, [r7, #8]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002f18:	2163      	movs	r1, #99	; 0x63
 8002f1a:	54d1      	strb	r1, [r2, r3]
							i++;
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	71fb      	strb	r3, [r7, #7]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 8002f22:	7a3b      	ldrb	r3, [r7, #8]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	2bc5      	cmp	r3, #197	; 0xc5
 8002f2a:	d106      	bne.n	8002f3a <Si468x_dab_get_digital_service_data+0x1b6>
						{
							dls_label[label_pos] = 108; //lub 179
 8002f2c:	7a3b      	ldrb	r3, [r7, #8]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002f30:	216c      	movs	r1, #108	; 0x6c
 8002f32:	54d1      	strb	r1, [r2, r3]
							i++;
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	3301      	adds	r3, #1
 8002f38:	71fb      	strb	r3, [r7, #7]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 8002f3a:	7a3b      	ldrb	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	723b      	strb	r3, [r7, #8]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	3301      	adds	r3, #1
 8002f44:	71fb      	strb	r3, [r7, #7]
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <Si468x_dab_get_digital_service_data+0x1f0>)
 8002f4c:	89db      	ldrh	r3, [r3, #14]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3b9      	bcc.n	8002ec6 <Si468x_dab_get_digital_service_data+0x142>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 8002f52:	2101      	movs	r1, #1
 8002f54:	480c      	ldr	r0, [pc, #48]	; (8002f88 <Si468x_dab_get_digital_service_data+0x204>)
 8002f56:	f000 fc93 	bl	8003880 <send_debug_msg>
				}
			}
		}
	}
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200011a8 	.word	0x200011a8
 8002f68:	20003510 	.word	0x20003510
 8002f6c:	200035fc 	.word	0x200035fc
 8002f70:	200001a8 	.word	0x200001a8
 8002f74:	20003620 	.word	0x20003620
 8002f78:	0800de88 	.word	0x0800de88
 8002f7c:	0800debc 	.word	0x0800debc
 8002f80:	20004c58 	.word	0x20004c58
 8002f84:	0800ded0 	.word	0x0800ded0
 8002f88:	20004bd4 	.word	0x20004bd4
 8002f8c:	200034d0 	.word	0x200034d0

08002f90 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <Si468x_dab_get_time+0x78>)
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02f      	beq.n	8003002 <Si468x_dab_get_time+0x72>
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <Si468x_dab_get_time+0x78>)
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d028      	beq.n	8003002 <Si468x_dab_get_time+0x72>
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <Si468x_dab_get_time+0x78>)
 8002fb2:	791b      	ldrb	r3, [r3, #4]
 8002fb4:	2b5a      	cmp	r3, #90	; 0x5a
 8002fb6:	d924      	bls.n	8003002 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <Si468x_dab_get_time+0x7c>)
 8002fba:	22bc      	movs	r2, #188	; 0xbc
 8002fbc:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <Si468x_dab_get_time+0x7c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002fc4:	4911      	ldr	r1, [pc, #68]	; (800300c <Si468x_dab_get_time+0x7c>)
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7fe fb62 	bl	8001690 <Si468x_write_command>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <Si468x_dab_get_time+0x80>)
 8002fd2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f004 f95f 	bl	8007298 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002fda:	490e      	ldr	r1, [pc, #56]	; (8003014 <Si468x_dab_get_time+0x84>)
 8002fdc:	200b      	movs	r0, #11
 8002fde:	f7fe fb79 	bl	80016d4 <Si468x_read_reply>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <Si468x_dab_get_time+0x80>)
 8002fe8:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <Si468x_dab_get_time+0x88>)
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <Si468x_dab_get_time+0x84>)
 8002fee:	3304      	adds	r3, #4
 8002ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ff4:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <Si468x_dab_get_time+0x88>)
 8002ffa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ffe:	f002 fa15 	bl	800542c <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200035d4 	.word	0x200035d4
 800300c:	200001a8 	.word	0x200001a8
 8003010:	20003510 	.word	0x20003510
 8003014:	200011a8 	.word	0x200011a8
 8003018:	20003608 	.word	0x20003608

0800301c <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	b29b      	uxth	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003030:	f7fe fc5e 	bl	80018f0 <Si468x_set_property>
	dab_management.audio_volume = _volume;
 8003034:	79fa      	ldrb	r2, [r7, #7]
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <Si468x_set_audio_volume+0x5c>)
 8003038:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 800303a:	2100      	movs	r1, #0
 800303c:	480f      	ldr	r0, [pc, #60]	; (800307c <Si468x_set_audio_volume+0x60>)
 800303e:	f000 fc1f 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <Si468x_set_audio_volume+0x5c>)
 8003044:	7b9b      	ldrb	r3, [r3, #14]
 8003046:	220a      	movs	r2, #10
 8003048:	490d      	ldr	r1, [pc, #52]	; (8003080 <Si468x_set_audio_volume+0x64>)
 800304a:	4618      	mov	r0, r3
 800304c:	f00a f91a 	bl	800d284 <itoa>
 8003050:	4603      	mov	r3, r0
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fc13 	bl	8003880 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 800305a:	2101      	movs	r1, #1
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <Si468x_set_audio_volume+0x68>)
 800305e:	f000 fc0f 	bl	8003880 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	2201      	movs	r2, #1
 8003066:	4619      	mov	r1, r3
 8003068:	200b      	movs	r0, #11
 800306a:	f002 fab7 	bl	80055dc <eeprom_write>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20004bc4 	.word	0x20004bc4
 800307c:	0800df24 	.word	0x0800df24
 8003080:	200034d0 	.word	0x200034d0
 8003084:	0800df30 	.word	0x0800df30

08003088 <play_station>:

void play_station(uint8_t station_id)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	; 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dab_management.actual_station = station_id;
 8003094:	4a40      	ldr	r2, [pc, #256]	; (8003198 <play_station+0x110>)
 8003096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800309a:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 800309c:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <play_station+0x110>)
 800309e:	78da      	ldrb	r2, [r3, #3]
 80030a0:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <play_station+0x110>)
 80030a2:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80030a4:	2201      	movs	r2, #1
 80030a6:	493d      	ldr	r1, [pc, #244]	; (800319c <play_station+0x114>)
 80030a8:	f240 1007 	movw	r0, #263	; 0x107
 80030ac:	f002 fa96 	bl	80055dc <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 80030b0:	2101      	movs	r1, #1
 80030b2:	483b      	ldr	r0, [pc, #236]	; (80031a0 <play_station+0x118>)
 80030b4:	f000 fbe4 	bl	8003880 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 80030b8:	2100      	movs	r1, #0
 80030ba:	483a      	ldr	r0, [pc, #232]	; (80031a4 <play_station+0x11c>)
 80030bc:	f000 fbe0 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <play_station+0x110>)
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	3301      	adds	r3, #1
 80030c6:	220a      	movs	r2, #10
 80030c8:	4937      	ldr	r1, [pc, #220]	; (80031a8 <play_station+0x120>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f00a f8da 	bl	800d284 <itoa>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fbd3 	bl	8003880 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 80030da:	2100      	movs	r1, #0
 80030dc:	4833      	ldr	r0, [pc, #204]	; (80031ac <play_station+0x124>)
 80030de:	f000 fbcf 	bl	8003880 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 80030e2:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <play_station+0x110>)
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	461a      	mov	r2, r3
 80030e8:	2334      	movs	r3, #52	; 0x34
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <play_station+0x128>)
 80030f0:	4413      	add	r3, r2
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fbc3 	bl	8003880 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <play_station+0x110>)
 80030fc:	78db      	ldrb	r3, [r3, #3]
 80030fe:	4619      	mov	r1, r3
 8003100:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <play_station+0x128>)
 8003102:	2334      	movs	r3, #52	; 0x34
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3328      	adds	r3, #40	; 0x28
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fcd9 	bl	8001ac8 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <play_station+0x110>)
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	4619      	mov	r1, r3
 800311c:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <play_station+0x128>)
 800311e:	2334      	movs	r3, #52	; 0x34
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3320      	adds	r3, #32
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <play_station+0x110>)
 800312c:	78db      	ldrb	r3, [r3, #3]
 800312e:	4618      	mov	r0, r3
 8003130:	491f      	ldr	r1, [pc, #124]	; (80031b0 <play_station+0x128>)
 8003132:	2334      	movs	r3, #52	; 0x34
 8003134:	fb00 f303 	mul.w	r3, r0, r3
 8003138:	440b      	add	r3, r1
 800313a:	332a      	adds	r3, #42	; 0x2a
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7ff fd73 	bl	8002c2c <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <play_station+0x110>)
 8003148:	78db      	ldrb	r3, [r3, #3]
 800314a:	4619      	mov	r1, r3
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <play_station+0x128>)
 800314e:	2334      	movs	r3, #52	; 0x34
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3320      	adds	r3, #32
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <play_station+0x110>)
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	4618      	mov	r0, r3
 8003160:	4913      	ldr	r1, [pc, #76]	; (80031b0 <play_station+0x128>)
 8003162:	2334      	movs	r3, #52	; 0x34
 8003164:	fb00 f303 	mul.w	r3, r0, r3
 8003168:	440b      	add	r3, r1
 800316a:	332a      	adds	r3, #42	; 0x2a
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7ff f86d 	bl	8002250 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 8003176:	463b      	mov	r3, r7
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fd5d 	bl	8001c38 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 800317e:	463b      	mov	r3, r7
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fc6b 	bl	8002a5c <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 8003186:	2103      	movs	r1, #3
 8003188:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 800318c:	f7fe fbb0 	bl	80018f0 <Si468x_set_property>
}
 8003190:	bf00      	nop
 8003192:	3730      	adds	r7, #48	; 0x30
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20004bc4 	.word	0x20004bc4
 800319c:	20004bc8 	.word	0x20004bc8
 80031a0:	0800df34 	.word	0x0800df34
 80031a4:	0800df58 	.word	0x0800df58
 80031a8:	200034d0 	.word	0x200034d0
 80031ac:	0800df6c 	.word	0x0800df6c
 80031b0:	20003774 	.word	0x20003774

080031b4 <restore_from_eeprom>:

void restore_from_eeprom()
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 80031ba:	2101      	movs	r1, #1
 80031bc:	4895      	ldr	r0, [pc, #596]	; (8003414 <restore_from_eeprom+0x260>)
 80031be:	f000 fb5f 	bl	8003880 <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 80031c2:	2201      	movs	r2, #1
 80031c4:	4994      	ldr	r1, [pc, #592]	; (8003418 <restore_from_eeprom+0x264>)
 80031c6:	203f      	movs	r0, #63	; 0x3f
 80031c8:	f002 f9ea 	bl	80055a0 <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
 80031d0:	e012      	b.n	80031f8 <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	3301      	adds	r3, #1
 80031d6:	019b      	lsls	r3, r3, #6
 80031d8:	4618      	mov	r0, r3
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4a8e      	ldr	r2, [pc, #568]	; (800341c <restore_from_eeprom+0x268>)
 80031e2:	4413      	add	r3, r2
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	4619      	mov	r1, r3
 80031e8:	f002 f9da 	bl	80055a0 <eeprom_read>
		HAL_Delay(5);
 80031ec:	2005      	movs	r0, #5
 80031ee:	f004 f853 	bl	8007298 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	3301      	adds	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d9e9      	bls.n	80031d2 <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 80031fe:	2100      	movs	r1, #0
 8003200:	4887      	ldr	r0, [pc, #540]	; (8003420 <restore_from_eeprom+0x26c>)
 8003202:	f000 fb3d 	bl	8003880 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003206:	4b87      	ldr	r3, [pc, #540]	; (8003424 <restore_from_eeprom+0x270>)
 8003208:	7b5b      	ldrb	r3, [r3, #13]
 800320a:	220a      	movs	r2, #10
 800320c:	4986      	ldr	r1, [pc, #536]	; (8003428 <restore_from_eeprom+0x274>)
 800320e:	4618      	mov	r0, r3
 8003210:	f00a f838 	bl	800d284 <itoa>
 8003214:	4603      	mov	r3, r0
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fb31 	bl	8003880 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 800321e:	2101      	movs	r1, #1
 8003220:	4882      	ldr	r0, [pc, #520]	; (800342c <restore_from_eeprom+0x278>)
 8003222:	f000 fb2d 	bl	8003880 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	e022      	b.n	8003272 <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800322c:	220a      	movs	r2, #10
 800322e:	497e      	ldr	r1, [pc, #504]	; (8003428 <restore_from_eeprom+0x274>)
 8003230:	6938      	ldr	r0, [r7, #16]
 8003232:	f00a f827 	bl	800d284 <itoa>
 8003236:	4603      	mov	r3, r0
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fb20 	bl	8003880 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003240:	2100      	movs	r1, #0
 8003242:	487b      	ldr	r0, [pc, #492]	; (8003430 <restore_from_eeprom+0x27c>)
 8003244:	f000 fb1c 	bl	8003880 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003248:	4a74      	ldr	r2, [pc, #464]	; (800341c <restore_from_eeprom+0x268>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003250:	220a      	movs	r2, #10
 8003252:	4975      	ldr	r1, [pc, #468]	; (8003428 <restore_from_eeprom+0x274>)
 8003254:	4618      	mov	r0, r3
 8003256:	f00a f815 	bl	800d284 <itoa>
 800325a:	4603      	mov	r3, r0
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fb0e 	bl	8003880 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003264:	2101      	movs	r1, #1
 8003266:	4873      	ldr	r0, [pc, #460]	; (8003434 <restore_from_eeprom+0x280>)
 8003268:	f000 fb0a 	bl	8003880 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3301      	adds	r3, #1
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <restore_from_eeprom+0x270>)
 8003274:	7b5b      	ldrb	r3, [r3, #13]
 8003276:	461a      	mov	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4293      	cmp	r3, r2
 800327c:	dbd6      	blt.n	800322c <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 800327e:	2201      	movs	r2, #1
 8003280:	496d      	ldr	r1, [pc, #436]	; (8003438 <restore_from_eeprom+0x284>)
 8003282:	f240 1005 	movw	r0, #261	; 0x105
 8003286:	f002 f98b 	bl	80055a0 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 800328a:	2201      	movs	r2, #1
 800328c:	4965      	ldr	r1, [pc, #404]	; (8003424 <restore_from_eeprom+0x270>)
 800328e:	f44f 7083 	mov.w	r0, #262	; 0x106
 8003292:	f002 f985 	bl	80055a0 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 8003296:	4b63      	ldr	r3, [pc, #396]	; (8003424 <restore_from_eeprom+0x270>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2bff      	cmp	r3, #255	; 0xff
 800329c:	f000 828b 	beq.w	80037b6 <restore_from_eeprom+0x602>
 80032a0:	4b60      	ldr	r3, [pc, #384]	; (8003424 <restore_from_eeprom+0x270>)
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2bff      	cmp	r3, #255	; 0xff
 80032a6:	f000 8286 	beq.w	80037b6 <restore_from_eeprom+0x602>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 80032aa:	2204      	movs	r2, #4
 80032ac:	4963      	ldr	r1, [pc, #396]	; (800343c <restore_from_eeprom+0x288>)
 80032ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032b2:	f002 f975 	bl	80055a0 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 80032b6:	2201      	movs	r2, #1
 80032b8:	4961      	ldr	r1, [pc, #388]	; (8003440 <restore_from_eeprom+0x28c>)
 80032ba:	f44f 7082 	mov.w	r0, #260	; 0x104
 80032be:	f002 f96f 	bl	80055a0 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80032c2:	2201      	movs	r2, #1
 80032c4:	495f      	ldr	r1, [pc, #380]	; (8003444 <restore_from_eeprom+0x290>)
 80032c6:	f240 1007 	movw	r0, #263	; 0x107
 80032ca:	f002 f969 	bl	80055a0 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 80032ce:	4b55      	ldr	r3, [pc, #340]	; (8003424 <restore_from_eeprom+0x270>)
 80032d0:	791b      	ldrb	r3, [r3, #4]
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	d102      	bne.n	80032dc <restore_from_eeprom+0x128>
		{
			dab_management.last_station_index = 0;
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <restore_from_eeprom+0x270>)
 80032d8:	2200      	movs	r2, #0
 80032da:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 80032dc:	4b51      	ldr	r3, [pc, #324]	; (8003424 <restore_from_eeprom+0x270>)
 80032de:	791a      	ldrb	r2, [r3, #4]
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <restore_from_eeprom+0x270>)
 80032e2:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e00e      	b.n	8003308 <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3305      	adds	r3, #5
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	4618      	mov	r0, r3
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	015b      	lsls	r3, r3, #5
 80032f6:	4a54      	ldr	r2, [pc, #336]	; (8003448 <restore_from_eeprom+0x294>)
 80032f8:	4413      	add	r3, r2
 80032fa:	2220      	movs	r2, #32
 80032fc:	4619      	mov	r1, r3
 80032fe:	f002 f94f 	bl	80055a0 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3301      	adds	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	4b46      	ldr	r3, [pc, #280]	; (8003424 <restore_from_eeprom+0x270>)
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	429a      	cmp	r2, r3
 8003310:	d3eb      	bcc.n	80032ea <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	73bb      	strb	r3, [r7, #14]
 8003316:	e010      	b.n	800333a <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	330f      	adds	r3, #15
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	4618      	mov	r0, r3
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	2234      	movs	r2, #52	; 0x34
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	4a48      	ldr	r2, [pc, #288]	; (800344c <restore_from_eeprom+0x298>)
 800332a:	4413      	add	r3, r2
 800332c:	2234      	movs	r2, #52	; 0x34
 800332e:	4619      	mov	r1, r3
 8003330:	f002 f936 	bl	80055a0 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	3301      	adds	r3, #1
 8003338:	73bb      	strb	r3, [r7, #14]
 800333a:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <restore_from_eeprom+0x270>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	7bba      	ldrb	r2, [r7, #14]
 8003340:	429a      	cmp	r2, r3
 8003342:	d3e9      	bcc.n	8003318 <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 8003344:	2100      	movs	r1, #0
 8003346:	4836      	ldr	r0, [pc, #216]	; (8003420 <restore_from_eeprom+0x26c>)
 8003348:	f000 fa9a 	bl	8003880 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <restore_from_eeprom+0x270>)
 800334e:	7b5b      	ldrb	r3, [r3, #13]
 8003350:	220a      	movs	r2, #10
 8003352:	4935      	ldr	r1, [pc, #212]	; (8003428 <restore_from_eeprom+0x274>)
 8003354:	4618      	mov	r0, r3
 8003356:	f009 ff95 	bl	800d284 <itoa>
 800335a:	4603      	mov	r3, r0
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fa8e 	bl	8003880 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003364:	2101      	movs	r1, #1
 8003366:	4831      	ldr	r0, [pc, #196]	; (800342c <restore_from_eeprom+0x278>)
 8003368:	f000 fa8a 	bl	8003880 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e022      	b.n	80033b8 <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003372:	220a      	movs	r2, #10
 8003374:	492c      	ldr	r1, [pc, #176]	; (8003428 <restore_from_eeprom+0x274>)
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f009 ff84 	bl	800d284 <itoa>
 800337c:	4603      	mov	r3, r0
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa7d 	bl	8003880 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 8003386:	2100      	movs	r1, #0
 8003388:	4829      	ldr	r0, [pc, #164]	; (8003430 <restore_from_eeprom+0x27c>)
 800338a:	f000 fa79 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 800338e:	4a23      	ldr	r2, [pc, #140]	; (800341c <restore_from_eeprom+0x268>)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	220a      	movs	r2, #10
 8003398:	4923      	ldr	r1, [pc, #140]	; (8003428 <restore_from_eeprom+0x274>)
 800339a:	4618      	mov	r0, r3
 800339c:	f009 ff72 	bl	800d284 <itoa>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa6b 	bl	8003880 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 80033aa:	2101      	movs	r1, #1
 80033ac:	4821      	ldr	r0, [pc, #132]	; (8003434 <restore_from_eeprom+0x280>)
 80033ae:	f000 fa67 	bl	8003880 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <restore_from_eeprom+0x270>)
 80033ba:	7b5b      	ldrb	r3, [r3, #13]
 80033bc:	461a      	mov	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	dbd6      	blt.n	8003372 <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80033c4:	2100      	movs	r1, #0
 80033c6:	4822      	ldr	r0, [pc, #136]	; (8003450 <restore_from_eeprom+0x29c>)
 80033c8:	f000 fa5a 	bl	8003880 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <restore_from_eeprom+0x270>)
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	220a      	movs	r2, #10
 80033d2:	4915      	ldr	r1, [pc, #84]	; (8003428 <restore_from_eeprom+0x274>)
 80033d4:	4618      	mov	r0, r3
 80033d6:	f009 ff55 	bl	800d284 <itoa>
 80033da:	4603      	mov	r3, r0
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa4e 	bl	8003880 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80033e4:	2101      	movs	r1, #1
 80033e6:	481b      	ldr	r0, [pc, #108]	; (8003454 <restore_from_eeprom+0x2a0>)
 80033e8:	f000 fa4a 	bl	8003880 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80033ec:	2100      	movs	r1, #0
 80033ee:	481a      	ldr	r0, [pc, #104]	; (8003458 <restore_from_eeprom+0x2a4>)
 80033f0:	f000 fa46 	bl	8003880 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80033f4:	2100      	movs	r1, #0
 80033f6:	4819      	ldr	r0, [pc, #100]	; (800345c <restore_from_eeprom+0x2a8>)
 80033f8:	f000 fa42 	bl	8003880 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80033fc:	2100      	movs	r1, #0
 80033fe:	4818      	ldr	r0, [pc, #96]	; (8003460 <restore_from_eeprom+0x2ac>)
 8003400:	f000 fa3e 	bl	8003880 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003404:	2101      	movs	r1, #1
 8003406:	4817      	ldr	r0, [pc, #92]	; (8003464 <restore_from_eeprom+0x2b0>)
 8003408:	f000 fa3a 	bl	8003880 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800340c:	2300      	movs	r3, #0
 800340e:	71fb      	strb	r3, [r7, #7]
 8003410:	e080      	b.n	8003514 <restore_from_eeprom+0x360>
 8003412:	bf00      	nop
 8003414:	0800df74 	.word	0x0800df74
 8003418:	20004bd1 	.word	0x20004bd1
 800341c:	20003514 	.word	0x20003514
 8003420:	0800d900 	.word	0x0800d900
 8003424:	20004bc4 	.word	0x20004bc4
 8003428:	200034d0 	.word	0x200034d0
 800342c:	0800d908 	.word	0x0800d908
 8003430:	0800d920 	.word	0x0800d920
 8003434:	0800d924 	.word	0x0800d924
 8003438:	20004bc5 	.word	0x20004bc5
 800343c:	20004bcc 	.word	0x20004bcc
 8003440:	20004bd0 	.word	0x20004bd0
 8003444:	20004bc8 	.word	0x20004bc8
 8003448:	20003634 	.word	0x20003634
 800344c:	20003774 	.word	0x20003774
 8003450:	0800db90 	.word	0x0800db90
 8003454:	0800dba4 	.word	0x0800dba4
 8003458:	0800dbd8 	.word	0x0800dbd8
 800345c:	0800dbe4 	.word	0x0800dbe4
 8003460:	0800dbf8 	.word	0x0800dbf8
 8003464:	0800dc08 	.word	0x0800dc08
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003468:	2100      	movs	r1, #0
 800346a:	485f      	ldr	r0, [pc, #380]	; (80035e8 <restore_from_eeprom+0x434>)
 800346c:	f000 fa08 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	3301      	adds	r3, #1
 8003474:	220a      	movs	r2, #10
 8003476:	495d      	ldr	r1, [pc, #372]	; (80035ec <restore_from_eeprom+0x438>)
 8003478:	4618      	mov	r0, r3
 800347a:	f009 ff03 	bl	800d284 <itoa>
 800347e:	4603      	mov	r3, r0
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f9fc 	bl	8003880 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003488:	2100      	movs	r1, #0
 800348a:	4859      	ldr	r0, [pc, #356]	; (80035f0 <restore_from_eeprom+0x43c>)
 800348c:	f000 f9f8 	bl	8003880 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	015b      	lsls	r3, r3, #5
 8003494:	4a57      	ldr	r2, [pc, #348]	; (80035f4 <restore_from_eeprom+0x440>)
 8003496:	4413      	add	r3, r2
 8003498:	3302      	adds	r3, #2
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f9ef 	bl	8003880 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 80034a2:	2100      	movs	r1, #0
 80034a4:	4850      	ldr	r0, [pc, #320]	; (80035e8 <restore_from_eeprom+0x434>)
 80034a6:	f000 f9eb 	bl	8003880 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4a51      	ldr	r2, [pc, #324]	; (80035f4 <restore_from_eeprom+0x440>)
 80034ae:	015b      	lsls	r3, r3, #5
 80034b0:	4413      	add	r3, r2
 80034b2:	3318      	adds	r3, #24
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	220a      	movs	r2, #10
 80034b8:	494c      	ldr	r1, [pc, #304]	; (80035ec <restore_from_eeprom+0x438>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f009 fee2 	bl	800d284 <itoa>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f9db 	bl	8003880 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80034ca:	2100      	movs	r1, #0
 80034cc:	484a      	ldr	r0, [pc, #296]	; (80035f8 <restore_from_eeprom+0x444>)
 80034ce:	f000 f9d7 	bl	8003880 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <restore_from_eeprom+0x440>)
 80034d6:	015b      	lsls	r3, r3, #5
 80034d8:	4413      	add	r3, r2
 80034da:	331c      	adds	r3, #28
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	4b46      	ldr	r3, [pc, #280]	; (80035fc <restore_from_eeprom+0x448>)
 80034e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f9c9 	bl	8003880 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	4a40      	ldr	r2, [pc, #256]	; (80035f4 <restore_from_eeprom+0x440>)
 80034f2:	015b      	lsls	r3, r3, #5
 80034f4:	4413      	add	r3, r2
 80034f6:	331c      	adds	r3, #28
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b13      	cmp	r3, #19
 80034fc:	d803      	bhi.n	8003506 <restore_from_eeprom+0x352>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80034fe:	2100      	movs	r1, #0
 8003500:	483f      	ldr	r0, [pc, #252]	; (8003600 <restore_from_eeprom+0x44c>)
 8003502:	f000 f9bd 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8003506:	2101      	movs	r1, #1
 8003508:	483e      	ldr	r0, [pc, #248]	; (8003604 <restore_from_eeprom+0x450>)
 800350a:	f000 f9b9 	bl	8003880 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	3301      	adds	r3, #1
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <restore_from_eeprom+0x454>)
 8003516:	785b      	ldrb	r3, [r3, #1]
 8003518:	79fa      	ldrb	r2, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d3a4      	bcc.n	8003468 <restore_from_eeprom+0x2b4>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800351e:	2101      	movs	r1, #1
 8003520:	483a      	ldr	r0, [pc, #232]	; (800360c <restore_from_eeprom+0x458>)
 8003522:	f000 f9ad 	bl	8003880 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003526:	2100      	movs	r1, #0
 8003528:	4839      	ldr	r0, [pc, #228]	; (8003610 <restore_from_eeprom+0x45c>)
 800352a:	f000 f9a9 	bl	8003880 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <restore_from_eeprom+0x454>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	220a      	movs	r2, #10
 8003534:	492d      	ldr	r1, [pc, #180]	; (80035ec <restore_from_eeprom+0x438>)
 8003536:	4618      	mov	r0, r3
 8003538:	f009 fea4 	bl	800d284 <itoa>
 800353c:	4603      	mov	r3, r0
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f99d 	bl	8003880 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003546:	2101      	movs	r1, #1
 8003548:	4832      	ldr	r0, [pc, #200]	; (8003614 <restore_from_eeprom+0x460>)
 800354a:	f000 f999 	bl	8003880 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 800354e:	2101      	movs	r1, #1
 8003550:	4831      	ldr	r0, [pc, #196]	; (8003618 <restore_from_eeprom+0x464>)
 8003552:	f000 f995 	bl	8003880 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003556:	2300      	movs	r3, #0
 8003558:	71bb      	strb	r3, [r7, #6]
 800355a:	e104      	b.n	8003766 <restore_from_eeprom+0x5b2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 800355c:	2100      	movs	r1, #0
 800355e:	4822      	ldr	r0, [pc, #136]	; (80035e8 <restore_from_eeprom+0x434>)
 8003560:	f000 f98e 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003564:	79bb      	ldrb	r3, [r7, #6]
 8003566:	3301      	adds	r3, #1
 8003568:	220a      	movs	r2, #10
 800356a:	4920      	ldr	r1, [pc, #128]	; (80035ec <restore_from_eeprom+0x438>)
 800356c:	4618      	mov	r0, r3
 800356e:	f009 fe89 	bl	800d284 <itoa>
 8003572:	4603      	mov	r3, r0
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f982 	bl	8003880 <send_debug_msg>
			if((services_index +1) < 10)
 800357c:	79bb      	ldrb	r3, [r7, #6]
 800357e:	2b08      	cmp	r3, #8
 8003580:	d803      	bhi.n	800358a <restore_from_eeprom+0x3d6>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003582:	2100      	movs	r1, #0
 8003584:	481e      	ldr	r0, [pc, #120]	; (8003600 <restore_from_eeprom+0x44c>)
 8003586:	f000 f97b 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800358a:	2100      	movs	r1, #0
 800358c:	4823      	ldr	r0, [pc, #140]	; (800361c <restore_from_eeprom+0x468>)
 800358e:	f000 f977 	bl	8003880 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	2234      	movs	r2, #52	; 0x34
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	4a21      	ldr	r2, [pc, #132]	; (8003620 <restore_from_eeprom+0x46c>)
 800359c:	4413      	add	r3, r2
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f96d 	bl	8003880 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 80035a6:	2100      	movs	r1, #0
 80035a8:	481e      	ldr	r0, [pc, #120]	; (8003624 <restore_from_eeprom+0x470>)
 80035aa:	f000 f969 	bl	8003880 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	717b      	strb	r3, [r7, #5]
 80035b2:	e03c      	b.n	800362e <restore_from_eeprom+0x47a>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80035b4:	797b      	ldrb	r3, [r7, #5]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <restore_from_eeprom+0x440>)
 80035b8:	015b      	lsls	r3, r3, #5
 80035ba:	4413      	add	r3, r2
 80035bc:	331c      	adds	r3, #28
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	79bb      	ldrb	r3, [r7, #6]
 80035c2:	4917      	ldr	r1, [pc, #92]	; (8003620 <restore_from_eeprom+0x46c>)
 80035c4:	2034      	movs	r0, #52	; 0x34
 80035c6:	fb00 f303 	mul.w	r3, r0, r3
 80035ca:	440b      	add	r3, r1
 80035cc:	3328      	adds	r3, #40	; 0x28
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d129      	bne.n	8003628 <restore_from_eeprom+0x474>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80035d4:	797b      	ldrb	r3, [r7, #5]
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <restore_from_eeprom+0x440>)
 80035da:	4413      	add	r3, r2
 80035dc:	3302      	adds	r3, #2
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f94d 	bl	8003880 <send_debug_msg>
					break;
 80035e6:	e027      	b.n	8003638 <restore_from_eeprom+0x484>
 80035e8:	0800dc18 	.word	0x0800dc18
 80035ec:	200034d0 	.word	0x200034d0
 80035f0:	0800dc1c 	.word	0x0800dc1c
 80035f4:	20003634 	.word	0x20003634
 80035f8:	0800dc28 	.word	0x0800dc28
 80035fc:	20000008 	.word	0x20000008
 8003600:	0800dc30 	.word	0x0800dc30
 8003604:	0800dc34 	.word	0x0800dc34
 8003608:	20004bc4 	.word	0x20004bc4
 800360c:	0800dba4 	.word	0x0800dba4
 8003610:	0800dc3c 	.word	0x0800dc3c
 8003614:	0800dc50 	.word	0x0800dc50
 8003618:	0800dcbc 	.word	0x0800dcbc
 800361c:	0800dd28 	.word	0x0800dd28
 8003620:	20003774 	.word	0x20003774
 8003624:	0800dd30 	.word	0x0800dd30
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003628:	797b      	ldrb	r3, [r7, #5]
 800362a:	3301      	adds	r3, #1
 800362c:	717b      	strb	r3, [r7, #5]
 800362e:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <restore_from_eeprom+0x634>)
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	797a      	ldrb	r2, [r7, #5]
 8003634:	429a      	cmp	r2, r3
 8003636:	d3bd      	bcc.n	80035b4 <restore_from_eeprom+0x400>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003638:	2100      	movs	r1, #0
 800363a:	486c      	ldr	r0, [pc, #432]	; (80037ec <restore_from_eeprom+0x638>)
 800363c:	f000 f920 	bl	8003880 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003640:	79bb      	ldrb	r3, [r7, #6]
 8003642:	4a6b      	ldr	r2, [pc, #428]	; (80037f0 <restore_from_eeprom+0x63c>)
 8003644:	2134      	movs	r1, #52	; 0x34
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	220a      	movs	r2, #10
 8003652:	4968      	ldr	r1, [pc, #416]	; (80037f4 <restore_from_eeprom+0x640>)
 8003654:	4618      	mov	r0, r3
 8003656:	f009 fe15 	bl	800d284 <itoa>
 800365a:	4603      	mov	r3, r0
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f90e 	bl	8003880 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003664:	2100      	movs	r1, #0
 8003666:	4864      	ldr	r0, [pc, #400]	; (80037f8 <restore_from_eeprom+0x644>)
 8003668:	f000 f90a 	bl	8003880 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 800366c:	79bb      	ldrb	r3, [r7, #6]
 800366e:	4a60      	ldr	r2, [pc, #384]	; (80037f0 <restore_from_eeprom+0x63c>)
 8003670:	2134      	movs	r1, #52	; 0x34
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3328      	adds	r3, #40	; 0x28
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <restore_from_eeprom+0x648>)
 8003680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f8fa 	bl	8003880 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <restore_from_eeprom+0x63c>)
 8003690:	2134      	movs	r1, #52	; 0x34
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3328      	adds	r3, #40	; 0x28
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b13      	cmp	r3, #19
 800369e:	d803      	bhi.n	80036a8 <restore_from_eeprom+0x4f4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80036a0:	2100      	movs	r1, #0
 80036a2:	4857      	ldr	r0, [pc, #348]	; (8003800 <restore_from_eeprom+0x64c>)
 80036a4:	f000 f8ec 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80036a8:	2100      	movs	r1, #0
 80036aa:	4856      	ldr	r0, [pc, #344]	; (8003804 <restore_from_eeprom+0x650>)
 80036ac:	f000 f8e8 	bl	8003880 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 80036b0:	79bb      	ldrb	r3, [r7, #6]
 80036b2:	4a4f      	ldr	r2, [pc, #316]	; (80037f0 <restore_from_eeprom+0x63c>)
 80036b4:	2134      	movs	r1, #52	; 0x34
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3315      	adds	r3, #21
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	220a      	movs	r2, #10
 80036c2:	494c      	ldr	r1, [pc, #304]	; (80037f4 <restore_from_eeprom+0x640>)
 80036c4:	4618      	mov	r0, r3
 80036c6:	f009 fddd 	bl	800d284 <itoa>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f8d6 	bl	8003880 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 80036d4:	79bb      	ldrb	r3, [r7, #6]
 80036d6:	4a46      	ldr	r2, [pc, #280]	; (80037f0 <restore_from_eeprom+0x63c>)
 80036d8:	2134      	movs	r1, #52	; 0x34
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3315      	adds	r3, #21
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d803      	bhi.n	80036f0 <restore_from_eeprom+0x53c>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80036e8:	2100      	movs	r1, #0
 80036ea:	4845      	ldr	r0, [pc, #276]	; (8003800 <restore_from_eeprom+0x64c>)
 80036ec:	f000 f8c8 	bl	8003880 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80036f0:	2100      	movs	r1, #0
 80036f2:	4845      	ldr	r0, [pc, #276]	; (8003808 <restore_from_eeprom+0x654>)
 80036f4:	f000 f8c4 	bl	8003880 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80036f8:	2100      	movs	r1, #0
 80036fa:	4844      	ldr	r0, [pc, #272]	; (800380c <restore_from_eeprom+0x658>)
 80036fc:	f000 f8c0 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	4a3b      	ldr	r2, [pc, #236]	; (80037f0 <restore_from_eeprom+0x63c>)
 8003704:	2134      	movs	r1, #52	; 0x34
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3320      	adds	r3, #32
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2210      	movs	r2, #16
 8003712:	4938      	ldr	r1, [pc, #224]	; (80037f4 <restore_from_eeprom+0x640>)
 8003714:	4618      	mov	r0, r3
 8003716:	f009 fdb5 	bl	800d284 <itoa>
 800371a:	4603      	mov	r3, r0
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f8ae 	bl	8003880 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003724:	2100      	movs	r1, #0
 8003726:	4837      	ldr	r0, [pc, #220]	; (8003804 <restore_from_eeprom+0x650>)
 8003728:	f000 f8aa 	bl	8003880 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800372c:	2100      	movs	r1, #0
 800372e:	4837      	ldr	r0, [pc, #220]	; (800380c <restore_from_eeprom+0x658>)
 8003730:	f000 f8a6 	bl	8003880 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003734:	79bb      	ldrb	r3, [r7, #6]
 8003736:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <restore_from_eeprom+0x63c>)
 8003738:	2134      	movs	r1, #52	; 0x34
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	332a      	adds	r3, #42	; 0x2a
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	492b      	ldr	r1, [pc, #172]	; (80037f4 <restore_from_eeprom+0x640>)
 8003748:	4618      	mov	r0, r3
 800374a:	f009 fd9b 	bl	800d284 <itoa>
 800374e:	4603      	mov	r3, r0
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f894 	bl	8003880 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003758:	2101      	movs	r1, #1
 800375a:	482d      	ldr	r0, [pc, #180]	; (8003810 <restore_from_eeprom+0x65c>)
 800375c:	f000 f890 	bl	8003880 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003760:	79bb      	ldrb	r3, [r7, #6]
 8003762:	3301      	adds	r3, #1
 8003764:	71bb      	strb	r3, [r7, #6]
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <restore_from_eeprom+0x634>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	79ba      	ldrb	r2, [r7, #6]
 800376c:	429a      	cmp	r2, r3
 800376e:	f4ff aef5 	bcc.w	800355c <restore_from_eeprom+0x3a8>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003772:	2101      	movs	r1, #1
 8003774:	4827      	ldr	r0, [pc, #156]	; (8003814 <restore_from_eeprom+0x660>)
 8003776:	f000 f883 	bl	8003880 <send_debug_msg>

		//restore volume level
		eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 800377a:	2201      	movs	r2, #1
 800377c:	4926      	ldr	r1, [pc, #152]	; (8003818 <restore_from_eeprom+0x664>)
 800377e:	200b      	movs	r0, #11
 8003780:	f001 ff0e 	bl	80055a0 <eeprom_read>
		Si468x_set_audio_volume(dab_management.audio_volume);
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <restore_from_eeprom+0x634>)
 8003786:	7b9b      	ldrb	r3, [r3, #14]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fc47 	bl	800301c <Si468x_set_audio_volume>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, 0);
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <restore_from_eeprom+0x634>)
 8003790:	791b      	ldrb	r3, [r3, #4]
 8003792:	4619      	mov	r1, r3
 8003794:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <restore_from_eeprom+0x63c>)
 8003796:	2334      	movs	r3, #52	; 0x34
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3328      	adds	r3, #40	; 0x28
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe f98f 	bl	8001ac8 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <restore_from_eeprom+0x634>)
 80037ac:	791b      	ldrb	r3, [r3, #4]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fc6a 	bl	8003088 <play_station>
 80037b4:	e013      	b.n	80037de <restore_from_eeprom+0x62a>

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 80037b6:	2101      	movs	r1, #1
 80037b8:	4818      	ldr	r0, [pc, #96]	; (800381c <restore_from_eeprom+0x668>)
 80037ba:	f000 f861 	bl	8003880 <send_debug_msg>
		dab_management.actual_freq = 0;
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <restore_from_eeprom+0x634>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <restore_from_eeprom+0x634>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <restore_from_eeprom+0x634>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <restore_from_eeprom+0x634>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <restore_from_eeprom+0x634>)
 80037d8:	2200      	movs	r2, #0
 80037da:	70da      	strb	r2, [r3, #3]
	}
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20004bc4 	.word	0x20004bc4
 80037ec:	0800dd30 	.word	0x0800dd30
 80037f0:	20003774 	.word	0x20003774
 80037f4:	200034d0 	.word	0x200034d0
 80037f8:	0800dc28 	.word	0x0800dc28
 80037fc:	20000008 	.word	0x20000008
 8003800:	0800dc30 	.word	0x0800dc30
 8003804:	0800dd28 	.word	0x0800dd28
 8003808:	0800dd34 	.word	0x0800dd34
 800380c:	0800dd3c 	.word	0x0800dd3c
 8003810:	0800dd40 	.word	0x0800dd40
 8003814:	0800dc50 	.word	0x0800dc50
 8003818:	20004bd2 	.word	0x20004bd2
 800381c:	0800dfb0 	.word	0x0800dfb0

08003820 <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
	return services_list;
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <get_dab_service_list+0x10>)
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20003774 	.word	0x20003774

08003834 <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
	return ensembles_list;
 8003838:	4b02      	ldr	r3, [pc, #8]	; (8003844 <get_dab_ensemble_list+0x10>)
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20003634 	.word	0x20003634

08003848 <get_dab_management>:

dab_management_t get_dab_management()
{
 8003848:	b490      	push	{r4, r7}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	return dab_management;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <get_dab_management+0x20>)
 8003854:	461c      	mov	r4, r3
 8003856:	4613      	mov	r3, r2
 8003858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bc90      	pop	{r4, r7}
 8003866:	4770      	bx	lr
 8003868:	20004bc4 	.word	0x20004bc4

0800386c <get_dls_label>:

char* get_dls_label()
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	return dls_label;
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <get_dls_label+0x10>)
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	20004bd4 	.word	0x20004bd4

08003880 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fc fca5 	bl	80001dc <strlen>
 8003892:	4603      	mov	r3, r0
 8003894:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	b29a      	uxth	r2, r3
 800389a:	2364      	movs	r3, #100	; 0x64
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	480a      	ldr	r0, [pc, #40]	; (80038c8 <send_debug_msg+0x48>)
 80038a0:	f009 f93f 	bl	800cb22 <HAL_UART_Transmit>

	if(is_crlf)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80038aa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80038ae:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80038b0:	f107 010c 	add.w	r1, r7, #12
 80038b4:	2364      	movs	r3, #100	; 0x64
 80038b6:	2202      	movs	r2, #2
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <send_debug_msg+0x48>)
 80038ba:	f009 f932 	bl	800cb22 <HAL_UART_Transmit>
	}
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20007190 	.word	0x20007190

080038cc <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[128];

void Display_clear_screen()
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7fc fff6 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80038d8:	2311      	movs	r3, #17
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80038e0:	2211      	movs	r2, #17
 80038e2:	2100      	movs	r1, #0
 80038e4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80038e8:	f7fd f877 	bl	80009da <ILI9341_Draw_Line>
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <Display_booting_screen>:

void Display_booting_screen()
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80038fa:	2000      	movs	r0, #0
 80038fc:	f7fc ffe2 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003900:	2302      	movs	r3, #2
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <Display_booting_screen+0xc4>)
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800390e:	2128      	movs	r1, #40	; 0x28
 8003910:	205f      	movs	r0, #95	; 0x5f
 8003912:	f7fd f8e3 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003916:	2302      	movs	r3, #2
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <Display_booting_screen+0xc8>)
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003924:	213c      	movs	r1, #60	; 0x3c
 8003926:	2046      	movs	r0, #70	; 0x46
 8003928:	f7fd f8d8 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 800392c:	2302      	movs	r3, #2
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <Display_booting_screen+0xcc>)
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393a:	2150      	movs	r1, #80	; 0x50
 800393c:	2082      	movs	r0, #130	; 0x82
 800393e:	f7fd f8cd 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003942:	2302      	movs	r3, #2
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <Display_booting_screen+0xd0>)
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003950:	2164      	movs	r1, #100	; 0x64
 8003952:	2064      	movs	r0, #100	; 0x64
 8003954:	f7fd f8c2 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003958:	2302      	movs	r3, #2
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <Display_booting_screen+0xd4>)
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003966:	2178      	movs	r1, #120	; 0x78
 8003968:	205a      	movs	r0, #90	; 0x5a
 800396a:	f7fd f8b7 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 800396e:	2302      	movs	r3, #2
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <Display_booting_screen+0xd8>)
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397c:	218c      	movs	r1, #140	; 0x8c
 800397e:	2032      	movs	r0, #50	; 0x32
 8003980:	f7fd f8ac 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003984:	2302      	movs	r3, #2
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <Display_booting_screen+0xdc>)
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2300      	movs	r3, #0
 800398e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003992:	21a0      	movs	r1, #160	; 0xa0
 8003994:	205a      	movs	r0, #90	; 0x5a
 8003996:	f7fd f8a1 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 800399a:	2302      	movs	r3, #2
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <Display_booting_screen+0xe0>)
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a8:	21b4      	movs	r1, #180	; 0xb4
 80039aa:	2078      	movs	r0, #120	; 0x78
 80039ac:	f7fd f896 	bl	8000adc <ILI9341_Draw_String>
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	0800e078 	.word	0x0800e078
 80039bc:	0800e088 	.word	0x0800e088
 80039c0:	0800e0a0 	.word	0x0800e0a0
 80039c4:	0800e0a8 	.word	0x0800e0a8
 80039c8:	0800e0b8 	.word	0x0800e0b8
 80039cc:	0800e0cc 	.word	0x0800e0cc
 80039d0:	0800e0e8 	.word	0x0800e0e8
 80039d4:	0800e0fc 	.word	0x0800e0fc

080039d8 <Display_main_screen_background>:

void Display_main_screen_background()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80039de:	f7ff ff75 	bl	80038cc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2); //Naglowek
 80039e2:	2302      	movs	r3, #2
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <Display_main_screen_background+0x110>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f0:	2101      	movs	r1, #1
 80039f2:	2005      	movs	r0, #5
 80039f4:	f7fd f872 	bl	8000adc <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 80039f8:	2328      	movs	r3, #40	; 0x28
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	238c      	movs	r3, #140	; 0x8c
 80039fe:	2214      	movs	r2, #20
 8003a00:	2105      	movs	r1, #5
 8003a02:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a06:	f7fc ffc7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003a0a:	2341      	movs	r3, #65	; 0x41
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	238c      	movs	r3, #140	; 0x8c
 8003a10:	222d      	movs	r2, #45	; 0x2d
 8003a12:	2105      	movs	r1, #5
 8003a14:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a18:	f7fc ffbe 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003a1c:	235a      	movs	r3, #90	; 0x5a
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	238c      	movs	r3, #140	; 0x8c
 8003a22:	2246      	movs	r2, #70	; 0x46
 8003a24:	2105      	movs	r1, #5
 8003a26:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a2a:	f7fc ffb5 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003a2e:	2373      	movs	r3, #115	; 0x73
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	238c      	movs	r3, #140	; 0x8c
 8003a34:	225f      	movs	r2, #95	; 0x5f
 8003a36:	2105      	movs	r1, #5
 8003a38:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a3c:	f7fc ffac 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003a40:	238c      	movs	r3, #140	; 0x8c
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	238c      	movs	r3, #140	; 0x8c
 8003a46:	2278      	movs	r2, #120	; 0x78
 8003a48:	2105      	movs	r1, #5
 8003a4a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a4e:	f7fc ffa3 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003a52:	23a5      	movs	r3, #165	; 0xa5
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	238c      	movs	r3, #140	; 0x8c
 8003a58:	2291      	movs	r2, #145	; 0x91
 8003a5a:	2105      	movs	r1, #5
 8003a5c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a60:	f7fc ff9a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003a64:	23be      	movs	r3, #190	; 0xbe
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	238c      	movs	r3, #140	; 0x8c
 8003a6a:	22aa      	movs	r2, #170	; 0xaa
 8003a6c:	2105      	movs	r1, #5
 8003a6e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a72:	f7fc ff91 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003a76:	23be      	movs	r3, #190	; 0xbe
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	f240 133b 	movw	r3, #315	; 0x13b
 8003a7e:	2214      	movs	r2, #20
 8003a80:	2191      	movs	r1, #145	; 0x91
 8003a82:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003a86:	f7fc ff87 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003a8a:	23eb      	movs	r3, #235	; 0xeb
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	239d      	movs	r3, #157	; 0x9d
 8003a90:	22c3      	movs	r2, #195	; 0xc3
 8003a92:	2105      	movs	r1, #5
 8003a94:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003a98:	f7fc ff7e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003a9c:	23eb      	movs	r3, #235	; 0xeb
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	f240 133b 	movw	r3, #315	; 0x13b
 8003aa4:	22c3      	movs	r2, #195	; 0xc3
 8003aa6:	21a3      	movs	r1, #163	; 0xa3
 8003aa8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003aac:	f7fc ff74 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <Display_main_screen_background+0x114>)
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac0:	21cf      	movs	r1, #207	; 0xcf
 8003ac2:	2032      	movs	r0, #50	; 0x32
 8003ac4:	f7fd f80a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003ac8:	2302      	movs	r3, #2
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <Display_main_screen_background+0x118>)
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad8:	21cf      	movs	r1, #207	; 0xcf
 8003ada:	20c0      	movs	r0, #192	; 0xc0
 8003adc:	f7fc fffe 	bl	8000adc <ILI9341_Draw_String>
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	0800e108 	.word	0x0800e108
 8003aec:	0800e118 	.word	0x0800e118
 8003af0:	0800e124 	.word	0x0800e124

08003af4 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003af4:	b082      	sub	sp, #8
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af02      	add	r7, sp, #8
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
 8003b00:	f107 0118 	add.w	r1, r7, #24
 8003b04:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003b08:	7efb      	ldrb	r3, [r7, #27]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2334      	movs	r3, #52	; 0x34
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	461a      	mov	r2, r3
 8003b18:	2302      	movs	r3, #2
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	9200      	str	r2, [sp, #0]
 8003b1e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b26:	2117      	movs	r1, #23
 8003b28:	2008      	movs	r0, #8
 8003b2a:	f7fc ffd7 	bl	8000adc <ILI9341_Draw_String>
	//Bar1
//	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);


	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "", 2);
 8003b2e:	2302      	movs	r3, #2
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	4b90      	ldr	r3, [pc, #576]	; (8003d74 <Display_main_screen_data+0x280>)
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b3e:	2149      	movs	r1, #73	; 0x49
 8003b40:	2008      	movs	r0, #8
 8003b42:	f7fc ffcb 	bl	8000adc <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);
 8003b46:	2302      	movs	r3, #2
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	4b8a      	ldr	r3, [pc, #552]	; (8003d74 <Display_main_screen_data+0x280>)
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b56:	2162      	movs	r1, #98	; 0x62
 8003b58:	2008      	movs	r0, #8
 8003b5a:	f7fc ffbf 	bl	8000adc <ILI9341_Draw_String>

	//BAr4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b60:	2b63      	cmp	r3, #99	; 0x63
 8003b62:	d81e      	bhi.n	8003ba2 <Display_main_screen_data+0xae>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003b64:	2302      	movs	r3, #2
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <Display_main_screen_data+0x284>)
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b74:	217b      	movs	r1, #123	; 0x7b
 8003b76:	2008      	movs	r0, #8
 8003b78:	f7fc ffb0 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003b7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b7e:	220a      	movs	r2, #10
 8003b80:	497e      	ldr	r1, [pc, #504]	; (8003d7c <Display_main_screen_data+0x288>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f009 fb7e 	bl	800d284 <itoa>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	9201      	str	r2, [sp, #4]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b98:	217b      	movs	r1, #123	; 0x7b
 8003b9a:	2011      	movs	r0, #17
 8003b9c:	f7fc ff9e 	bl	8000adc <ILI9341_Draw_String>
 8003ba0:	e011      	b.n	8003bc6 <Display_main_screen_data+0xd2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ba4:	220a      	movs	r2, #10
 8003ba6:	4975      	ldr	r1, [pc, #468]	; (8003d7c <Display_main_screen_data+0x288>)
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f009 fb6b 	bl	800d284 <itoa>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	9201      	str	r2, [sp, #4]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bbe:	217b      	movs	r1, #123	; 0x7b
 8003bc0:	2008      	movs	r0, #8
 8003bc2:	f7fc ff8b 	bl	8000adc <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <Display_main_screen_data+0x28c>)
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd6:	217b      	movs	r1, #123	; 0x7b
 8003bd8:	2024      	movs	r0, #36	; 0x24
 8003bda:	f7fc ff7f 	bl	8000adc <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003bde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003be0:	220a      	movs	r2, #10
 8003be2:	4966      	ldr	r1, [pc, #408]	; (8003d7c <Display_main_screen_data+0x288>)
 8003be4:	4618      	mov	r0, r3
 8003be6:	f009 fb4d 	bl	800d284 <itoa>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2202      	movs	r2, #2
 8003bee:	9201      	str	r2, [sp, #4]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bfa:	217b      	movs	r1, #123	; 0x7b
 8003bfc:	204e      	movs	r0, #78	; 0x4e
 8003bfe:	f7fc ff6d 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003c02:	2302      	movs	r3, #2
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <Display_main_screen_data+0x290>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c12:	217b      	movs	r1, #123	; 0x7b
 8003c14:	207a      	movs	r0, #122	; 0x7a
 8003c16:	f7fc ff61 	bl	8000adc <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e022      	b.n	8003c66 <Display_main_screen_data+0x172>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	015b      	lsls	r3, r3, #5
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	7f1a      	ldrb	r2, [r3, #28]
 8003c2a:	7efb      	ldrb	r3, [r7, #27]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	2334      	movs	r3, #52	; 0x34
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	440b      	add	r3, r1
 8003c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d10f      	bne.n	8003c60 <Display_main_screen_data+0x16c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	3302      	adds	r3, #2
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	9201      	str	r2, [sp, #4]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c58:	2194      	movs	r1, #148	; 0x94
 8003c5a:	2008      	movs	r0, #8
 8003c5c:	f7fc ff3e 	bl	8000adc <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	3301      	adds	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	7e7b      	ldrb	r3, [r7, #25]
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d3d8      	bcc.n	8003c20 <Display_main_screen_data+0x12c>
		}
	}

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003c6e:	7efb      	ldrb	r3, [r7, #27]
 8003c70:	461a      	mov	r2, r3
 8003c72:	2334      	movs	r3, #52	; 0x34
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	4a42      	ldr	r2, [pc, #264]	; (8003d88 <Display_main_screen_data+0x294>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	220a      	movs	r2, #10
 8003c88:	493c      	ldr	r1, [pc, #240]	; (8003d7c <Display_main_screen_data+0x288>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f009 fafa 	bl	800d284 <itoa>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2202      	movs	r2, #2
 8003c94:	9201      	str	r2, [sp, #4]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca0:	21ad      	movs	r1, #173	; 0xad
 8003ca2:	2008      	movs	r0, #8
 8003ca4:	f7fc ff1a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003ca8:	2302      	movs	r3, #2
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <Display_main_screen_data+0x298>)
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb8:	21ad      	movs	r1, #173	; 0xad
 8003cba:	201f      	movs	r0, #31
 8003cbc:	f7fc ff0e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003cc0:	7efb      	ldrb	r3, [r7, #27]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2334      	movs	r3, #52	; 0x34
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <Display_main_screen_data+0x294>)
 8003cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	220a      	movs	r2, #10
 8003ce4:	4925      	ldr	r1, [pc, #148]	; (8003d7c <Display_main_screen_data+0x288>)
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f009 facc 	bl	800d284 <itoa>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2202      	movs	r2, #2
 8003cf0:	9201      	str	r2, [sp, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfc:	21ad      	movs	r1, #173	; 0xad
 8003cfe:	2026      	movs	r0, #38	; 0x26
 8003d00:	f7fc feec 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003d04:	2302      	movs	r3, #2
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <Display_main_screen_data+0x29c>)
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d14:	21ad      	movs	r1, #173	; 0xad
 8003d16:	2041      	movs	r0, #65	; 0x41
 8003d18:	f7fc fee0 	bl	8000adc <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <Display_main_screen_data+0x2a0>)
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2c:	21ad      	movs	r1, #173	; 0xad
 8003d2e:	205f      	movs	r0, #95	; 0x5f
 8003d30:	f7fc fed4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003d34:	7efb      	ldrb	r3, [r7, #27]
 8003d36:	461a      	mov	r2, r3
 8003d38:	2334      	movs	r3, #52	; 0x34
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <Display_main_screen_data+0x2a4>)
 8003d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5c:	21ad      	movs	r1, #173	; 0xad
 8003d5e:	2073      	movs	r0, #115	; 0x73
 8003d60:	f7fc febc 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d6e:	b002      	add	sp, #8
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	0800e134 	.word	0x0800e134
 8003d78:	0800e138 	.word	0x0800e138
 8003d7c:	20006d8c 	.word	0x20006d8c
 8003d80:	0800e13c 	.word	0x0800e13c
 8003d84:	0800e144 	.word	0x0800e144
 8003d88:	10624dd3 	.word	0x10624dd3
 8003d8c:	0800e148 	.word	0x0800e148
 8003d90:	0800e14c 	.word	0x0800e14c
 8003d94:	0800e150 	.word	0x0800e150
 8003d98:	200000ac 	.word	0x200000ac

08003d9c <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003da4:	4919      	ldr	r1, [pc, #100]	; (8003e0c <Display_main_screen_dls+0x70>)
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fc fa0e 	bl	80001c8 <strcmp>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d028      	beq.n	8003e04 <Display_main_screen_dls+0x68>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003db2:	2302      	movs	r3, #2
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <Display_main_screen_dls+0x74>)
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc2:	2130      	movs	r1, #48	; 0x30
 8003dc4:	2008      	movs	r0, #8
 8003dc6:	f7fc fe89 	bl	8000adc <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003dca:	2302      	movs	r3, #2
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dda:	2130      	movs	r1, #48	; 0x30
 8003ddc:	2008      	movs	r0, #8
 8003dde:	f7fc fe7d 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 128; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e009      	b.n	8003dfc <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	441a      	add	r2, r3
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	7811      	ldrb	r1, [r2, #0]
 8003df2:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <Display_main_screen_dls+0x70>)
 8003df4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 128; i++)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	daf1      	bge.n	8003de8 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20006dd0 	.word	0x20006dd0
 8003e10:	0800e154 	.word	0x0800e154

08003e14 <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af02      	add	r7, sp, #8
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <Display_main_screen_empty+0xb4>)
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e2a:	2117      	movs	r1, #23
 8003e2c:	2008      	movs	r0, #8
 8003e2e:	f7fc fe55 	bl	8000adc <ILI9341_Draw_String>

	//Bar1
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003e32:	2302      	movs	r3, #2
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <Display_main_screen_empty+0xb8>)
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e42:	2130      	movs	r1, #48	; 0x30
 8003e44:	2008      	movs	r0, #8
 8003e46:	f7fc fe49 	bl	8000adc <ILI9341_Draw_String>

	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <Display_main_screen_empty+0xbc>)
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e5a:	2149      	movs	r1, #73	; 0x49
 8003e5c:	2008      	movs	r0, #8
 8003e5e:	f7fc fe3d 	bl	8000adc <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003e62:	2302      	movs	r3, #2
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <Display_main_screen_empty+0xc0>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e72:	2162      	movs	r1, #98	; 0x62
 8003e74:	2008      	movs	r0, #8
 8003e76:	f7fc fe31 	bl	8000adc <ILI9341_Draw_String>

	//BAr4
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <Display_main_screen_empty+0xc4>)
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8a:	217b      	movs	r1, #123	; 0x7b
 8003e8c:	2008      	movs	r0, #8
 8003e8e:	f7fc fe25 	bl	8000adc <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)

	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003e92:	2302      	movs	r3, #2
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <Display_main_screen_empty+0xc8>)
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea2:	2194      	movs	r1, #148	; 0x94
 8003ea4:	2008      	movs	r0, #8
 8003ea6:	f7fc fe19 	bl	8000adc <ILI9341_Draw_String>

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8003eaa:	2302      	movs	r3, #2
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <Display_main_screen_empty+0xc8>)
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eba:	21ad      	movs	r1, #173	; 0xad
 8003ebc:	2008      	movs	r0, #8
 8003ebe:	f7fc fe0d 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	0800e1d4 	.word	0x0800e1d4
 8003ecc:	0800e1e8 	.word	0x0800e1e8
 8003ed0:	0800e1fc 	.word	0x0800e1fc
 8003ed4:	0800e210 	.word	0x0800e210
 8003ed8:	0800e224 	.word	0x0800e224
 8003edc:	0800e238 	.word	0x0800e238

08003ee0 <Display_stations_list_background>:


void Display_stations_list_background()
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003ee6:	f7ff fcf1 	bl	80038cc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2); //Naglowek
 8003eea:	2302      	movs	r3, #2
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	4b59      	ldr	r3, [pc, #356]	; (8004054 <Display_stations_list_background+0x174>)
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2005      	movs	r0, #5
 8003efc:	f7fc fdee 	bl	8000adc <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8003f00:	2332      	movs	r3, #50	; 0x32
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	f240 131d 	movw	r3, #285	; 0x11d
 8003f08:	2214      	movs	r2, #20
 8003f0a:	2105      	movs	r1, #5
 8003f0c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003f10:	f7fc fd42 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8003f14:	2355      	movs	r3, #85	; 0x55
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f240 131d 	movw	r3, #285	; 0x11d
 8003f1c:	2237      	movs	r2, #55	; 0x37
 8003f1e:	2105      	movs	r1, #5
 8003f20:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003f24:	f7fc fd38 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8003f28:	2378      	movs	r3, #120	; 0x78
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	f240 131d 	movw	r3, #285	; 0x11d
 8003f30:	225a      	movs	r2, #90	; 0x5a
 8003f32:	2105      	movs	r1, #5
 8003f34:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003f38:	f7fc fd2e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8003f3c:	239b      	movs	r3, #155	; 0x9b
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	f240 131d 	movw	r3, #285	; 0x11d
 8003f44:	227d      	movs	r2, #125	; 0x7d
 8003f46:	2105      	movs	r1, #5
 8003f48:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003f4c:	f7fc fd24 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8003f50:	23be      	movs	r3, #190	; 0xbe
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	f240 131d 	movw	r3, #285	; 0x11d
 8003f58:	22a0      	movs	r2, #160	; 0xa0
 8003f5a:	2105      	movs	r1, #5
 8003f5c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003f60:	f7fc fd1a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8003f64:	2366      	movs	r3, #102	; 0x66
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	f240 133b 	movw	r3, #315	; 0x13b
 8003f6c:	2214      	movs	r2, #20
 8003f6e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003f72:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003f76:	f7fc fd0f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <Display_stations_list_background+0x178>)
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8a:	2138      	movs	r1, #56	; 0x38
 8003f8c:	f240 1027 	movw	r0, #295	; 0x127
 8003f90:	f7fc fda4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8003f94:	2302      	movs	r3, #2
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <Display_stations_list_background+0x17c>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa4:	2138      	movs	r1, #56	; 0x38
 8003fa6:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8003faa:	f7fc fd97 	bl	8000adc <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8003fae:	23be      	movs	r3, #190	; 0xbe
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	f240 133b 	movw	r3, #315	; 0x13b
 8003fb6:	226c      	movs	r2, #108	; 0x6c
 8003fb8:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003fbc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003fc0:	f7fc fcea 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <Display_stations_list_background+0x17c>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd4:	2192      	movs	r1, #146	; 0x92
 8003fd6:	f240 1027 	movw	r0, #295	; 0x127
 8003fda:	f7fc fd7f 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <Display_stations_list_background+0x178>)
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	2192      	movs	r1, #146	; 0x92
 8003ff0:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8003ff4:	f7fc fd72 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003ff8:	23eb      	movs	r3, #235	; 0xeb
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	239d      	movs	r3, #157	; 0x9d
 8003ffe:	22c3      	movs	r2, #195	; 0xc3
 8004000:	2105      	movs	r1, #5
 8004002:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004006:	f7fc fcc7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800400a:	23eb      	movs	r3, #235	; 0xeb
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f240 133b 	movw	r3, #315	; 0x13b
 8004012:	22c3      	movs	r2, #195	; 0xc3
 8004014:	21a3      	movs	r1, #163	; 0xa3
 8004016:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800401a:	f7fc fcbd 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 800401e:	2302      	movs	r3, #2
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <Display_stations_list_background+0x180>)
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800402a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402e:	21cf      	movs	r1, #207	; 0xcf
 8004030:	2025      	movs	r0, #37	; 0x25
 8004032:	f7fc fd53 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8004036:	2302      	movs	r3, #2
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <Display_stations_list_background+0x184>)
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004046:	21cf      	movs	r1, #207	; 0xcf
 8004048:	20c3      	movs	r0, #195	; 0xc3
 800404a:	f7fc fd47 	bl	8000adc <ILI9341_Draw_String>

}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	0800e24c 	.word	0x0800e24c
 8004058:	0800e260 	.word	0x0800e260
 800405c:	0800e264 	.word	0x0800e264
 8004060:	0800e268 	.word	0x0800e268
 8004064:	0800e274 	.word	0x0800e274

08004068 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8004068:	b084      	sub	sp, #16
 800406a:	b590      	push	{r4, r7, lr}
 800406c:	b087      	sub	sp, #28
 800406e:	af02      	add	r7, sp, #8
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(_dab_management.total_services)
 800407a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8133 	beq.w	80042ea <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8004084:	2300      	movs	r3, #0
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e12a      	b.n	80042e0 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 800408a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800408e:	4619      	mov	r1, r3
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	4299      	cmp	r1, r3
 8004098:	dc02      	bgt.n	80040a0 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	425b      	negs	r3, r3
 800409e:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	dc30      	bgt.n	800410c <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00da      	lsls	r2, r3, #3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	331c      	adds	r3, #28
 80040b8:	4619      	mov	r1, r3
 80040ba:	2302      	movs	r3, #2
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	4bac      	ldr	r3, [pc, #688]	; (8004370 <Display_stations_list_data+0x308>)
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ca:	2008      	movs	r0, #8
 80040cc:	f7fc fd06 	bl	8000adc <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	00da      	lsls	r2, r3, #3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	331c      	adds	r3, #28
 80040de:	461c      	mov	r4, r3
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3301      	adds	r3, #1
 80040e8:	220a      	movs	r2, #10
 80040ea:	49a2      	ldr	r1, [pc, #648]	; (8004374 <Display_stations_list_data+0x30c>)
 80040ec:	4618      	mov	r0, r3
 80040ee:	f009 f8c9 	bl	800d284 <itoa>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2202      	movs	r2, #2
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004102:	4621      	mov	r1, r4
 8004104:	2011      	movs	r0, #17
 8004106:	f7fc fce9 	bl	8000adc <ILI9341_Draw_String>
 800410a:	e01c      	b.n	8004146 <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00da      	lsls	r2, r3, #3
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	331c      	adds	r3, #28
 800411a:	461c      	mov	r4, r3
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	3301      	adds	r3, #1
 8004124:	220a      	movs	r2, #10
 8004126:	4993      	ldr	r1, [pc, #588]	; (8004374 <Display_stations_list_data+0x30c>)
 8004128:	4618      	mov	r0, r3
 800412a:	f009 f8ab 	bl	800d284 <itoa>
 800412e:	4603      	mov	r3, r0
 8004130:	2202      	movs	r2, #2
 8004132:	9201      	str	r2, [sp, #4]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800413a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800413e:	4621      	mov	r1, r4
 8004140:	2008      	movs	r0, #8
 8004142:	f7fc fccb 	bl	8000adc <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00da      	lsls	r2, r3, #3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	331c      	adds	r3, #28
 8004154:	4619      	mov	r1, r3
 8004156:	2302      	movs	r3, #2
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	4b87      	ldr	r3, [pc, #540]	; (8004378 <Display_stations_list_data+0x310>)
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004166:	2018      	movs	r0, #24
 8004168:	f7fc fcb8 	bl	8000adc <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00da      	lsls	r2, r3, #3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	331c      	adds	r3, #28
 800417a:	4619      	mov	r1, r3
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	461a      	mov	r2, r3
 8004184:	2334      	movs	r3, #52	; 0x34
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800418c:	4413      	add	r3, r2
 800418e:	461a      	mov	r2, r3
 8004190:	2302      	movs	r3, #2
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	9200      	str	r2, [sp, #0]
 8004196:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800419a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800419e:	2022      	movs	r0, #34	; 0x22
 80041a0:	f7fc fc9c 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	00da      	lsls	r2, r3, #3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	331c      	adds	r3, #28
 80041b2:	4619      	mov	r1, r3
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	461a      	mov	r2, r3
 80041bc:	2334      	movs	r3, #52	; 0x34
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c4:	4413      	add	r3, r2
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b6b      	ldr	r3, [pc, #428]	; (800437c <Display_stations_list_data+0x314>)
 80041ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d2:	2202      	movs	r2, #2
 80041d4:	9201      	str	r2, [sp, #4]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041e0:	20ab      	movs	r0, #171	; 0xab
 80041e2:	f7fc fc7b 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 80041e6:	7bfa      	ldrb	r2, [r7, #15]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	00da      	lsls	r2, r3, #3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	331c      	adds	r3, #28
 80041f4:	461c      	mov	r4, r3
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	2334      	movs	r3, #52	; 0x34
 8004200:	fb02 f303 	mul.w	r3, r2, r3
 8004204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004206:	4413      	add	r3, r2
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	4a5d      	ldr	r2, [pc, #372]	; (8004380 <Display_stations_list_data+0x318>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	220a      	movs	r2, #10
 8004214:	4957      	ldr	r1, [pc, #348]	; (8004374 <Display_stations_list_data+0x30c>)
 8004216:	4618      	mov	r0, r3
 8004218:	f009 f834 	bl	800d284 <itoa>
 800421c:	4603      	mov	r3, r0
 800421e:	2202      	movs	r2, #2
 8004220:	9201      	str	r2, [sp, #4]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800422c:	4621      	mov	r1, r4
 800422e:	20ca      	movs	r0, #202	; 0xca
 8004230:	f7fc fc54 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00da      	lsls	r2, r3, #3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	331c      	adds	r3, #28
 8004242:	4619      	mov	r1, r3
 8004244:	2302      	movs	r3, #2
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <Display_stations_list_data+0x310>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004254:	20e1      	movs	r0, #225	; 0xe1
 8004256:	f7fc fc41 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00da      	lsls	r2, r3, #3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	331c      	adds	r3, #28
 8004268:	461c      	mov	r4, r3
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	461a      	mov	r2, r3
 8004272:	2334      	movs	r3, #52	; 0x34
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427a:	4413      	add	r3, r2
 800427c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427e:	4b40      	ldr	r3, [pc, #256]	; (8004380 <Display_stations_list_data+0x318>)
 8004280:	fba3 1302 	umull	r1, r3, r3, r2
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	220a      	movs	r2, #10
 8004292:	4938      	ldr	r1, [pc, #224]	; (8004374 <Display_stations_list_data+0x30c>)
 8004294:	4618      	mov	r0, r3
 8004296:	f008 fff5 	bl	800d284 <itoa>
 800429a:	4603      	mov	r3, r0
 800429c:	2202      	movs	r2, #2
 800429e:	9201      	str	r2, [sp, #4]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042aa:	4621      	mov	r1, r4
 80042ac:	20e8      	movs	r0, #232	; 0xe8
 80042ae:	f7fc fc15 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	00da      	lsls	r2, r3, #3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	331c      	adds	r3, #28
 80042c0:	4619      	mov	r1, r3
 80042c2:	2302      	movs	r3, #2
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <Display_stations_list_data+0x31c>)
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042d2:	f240 1003 	movw	r0, #259	; 0x103
 80042d6:	f7fc fc01 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	3301      	adds	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	f67f aed1 	bls.w	800408a <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 80042e8:	e03b      	b.n	8004362 <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 80042ea:	2302      	movs	r3, #2
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <Display_stations_list_data+0x320>)
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fa:	211c      	movs	r1, #28
 80042fc:	2008      	movs	r0, #8
 80042fe:	f7fc fbed 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 8004302:	2302      	movs	r3, #2
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <Display_stations_list_data+0x324>)
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800430e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004312:	213f      	movs	r1, #63	; 0x3f
 8004314:	2008      	movs	r0, #8
 8004316:	f7fc fbe1 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 800431a:	2302      	movs	r3, #2
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <Display_stations_list_data+0x328>)
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800432a:	2162      	movs	r1, #98	; 0x62
 800432c:	2008      	movs	r0, #8
 800432e:	f7fc fbd5 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 8004332:	2302      	movs	r3, #2
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	4b17      	ldr	r3, [pc, #92]	; (8004394 <Display_stations_list_data+0x32c>)
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800433e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004342:	2185      	movs	r1, #133	; 0x85
 8004344:	2008      	movs	r0, #8
 8004346:	f7fc fbc9 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 800434a:	2302      	movs	r3, #2
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <Display_stations_list_data+0x330>)
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800435a:	21a8      	movs	r1, #168	; 0xa8
 800435c:	2008      	movs	r0, #8
 800435e:	f7fc fbbd 	bl	8000adc <ILI9341_Draw_String>
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr
 8004370:	0800e138 	.word	0x0800e138
 8004374:	20006d8c 	.word	0x20006d8c
 8004378:	0800e148 	.word	0x0800e148
 800437c:	200000ac 	.word	0x200000ac
 8004380:	10624dd3 	.word	0x10624dd3
 8004384:	0800e14c 	.word	0x0800e14c
 8004388:	0800e280 	.word	0x0800e280
 800438c:	0800e298 	.word	0x0800e298
 8004390:	0800e2b0 	.word	0x0800e2b0
 8004394:	0800e2c8 	.word	0x0800e2c8
 8004398:	0800e2e4 	.word	0x0800e2e4

0800439c <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80043a2:	f7ff fa93 	bl	80038cc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2); //Naglowek
 80043a6:	2302      	movs	r3, #2
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	4b64      	ldr	r3, [pc, #400]	; (800453c <Display_scanning_screen_background+0x1a0>)
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043b4:	2101      	movs	r1, #1
 80043b6:	2005      	movs	r0, #5
 80043b8:	f7fc fb90 	bl	8000adc <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 80043bc:	2328      	movs	r3, #40	; 0x28
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	f240 133b 	movw	r3, #315	; 0x13b
 80043c4:	2214      	movs	r2, #20
 80043c6:	2105      	movs	r1, #5
 80043c8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80043cc:	f7fc fae4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 80043d0:	2302      	movs	r3, #2
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <Display_scanning_screen_background+0x1a4>)
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e0:	2117      	movs	r1, #23
 80043e2:	2050      	movs	r0, #80	; 0x50
 80043e4:	f7fc fb7a 	bl	8000adc <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80043e8:	2341      	movs	r3, #65	; 0x41
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	f240 133b 	movw	r3, #315	; 0x13b
 80043f0:	222d      	movs	r2, #45	; 0x2d
 80043f2:	2105      	movs	r1, #5
 80043f4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80043f8:	f7fc face 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80043fc:	235a      	movs	r3, #90	; 0x5a
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	f240 133b 	movw	r3, #315	; 0x13b
 8004404:	2246      	movs	r2, #70	; 0x46
 8004406:	2105      	movs	r1, #5
 8004408:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800440c:	f7fc fac4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8004410:	2302      	movs	r3, #2
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <Display_scanning_screen_background+0x1a8>)
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800441c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004420:	2149      	movs	r1, #73	; 0x49
 8004422:	200a      	movs	r0, #10
 8004424:	f7fc fb5a 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004428:	2373      	movs	r3, #115	; 0x73
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	f240 133b 	movw	r3, #315	; 0x13b
 8004430:	225f      	movs	r2, #95	; 0x5f
 8004432:	2105      	movs	r1, #5
 8004434:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004438:	f7fc faae 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 800443c:	2302      	movs	r3, #2
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	4b41      	ldr	r3, [pc, #260]	; (8004548 <Display_scanning_screen_background+0x1ac>)
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444c:	2162      	movs	r1, #98	; 0x62
 800444e:	200a      	movs	r0, #10
 8004450:	f7fc fb44 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004454:	238c      	movs	r3, #140	; 0x8c
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	f240 133b 	movw	r3, #315	; 0x13b
 800445c:	2278      	movs	r2, #120	; 0x78
 800445e:	2105      	movs	r1, #5
 8004460:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004464:	f7fc fa98 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8004468:	2302      	movs	r3, #2
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <Display_scanning_screen_background+0x1b0>)
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004478:	217b      	movs	r1, #123	; 0x7b
 800447a:	200a      	movs	r0, #10
 800447c:	f7fc fb2e 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004480:	23a5      	movs	r3, #165	; 0xa5
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	f240 133b 	movw	r3, #315	; 0x13b
 8004488:	2291      	movs	r2, #145	; 0x91
 800448a:	2105      	movs	r1, #5
 800448c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004490:	f7fc fa82 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8004494:	2302      	movs	r3, #2
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <Display_scanning_screen_background+0x1b4>)
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a4:	2194      	movs	r1, #148	; 0x94
 80044a6:	200a      	movs	r0, #10
 80044a8:	f7fc fb18 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 80044ac:	2302      	movs	r3, #2
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <Display_scanning_screen_background+0x1b8>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044bc:	2194      	movs	r1, #148	; 0x94
 80044be:	2078      	movs	r0, #120	; 0x78
 80044c0:	f7fc fb0c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 80044c4:	2302      	movs	r3, #2
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <Display_scanning_screen_background+0x1bc>)
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d4:	2194      	movs	r1, #148	; 0x94
 80044d6:	209e      	movs	r0, #158	; 0x9e
 80044d8:	f7fc fb00 	bl	8000adc <ILI9341_Draw_String>


	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80044dc:	23be      	movs	r3, #190	; 0xbe
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	f240 133b 	movw	r3, #315	; 0x13b
 80044e4:	22aa      	movs	r2, #170	; 0xaa
 80044e6:	2105      	movs	r1, #5
 80044e8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044ec:	f7fc fa54 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 80044f0:	2302      	movs	r3, #2
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <Display_scanning_screen_background+0x1c0>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004500:	21ad      	movs	r1, #173	; 0xad
 8004502:	200a      	movs	r0, #10
 8004504:	f7fc faea 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004508:	23eb      	movs	r3, #235	; 0xeb
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	f240 133b 	movw	r3, #315	; 0x13b
 8004510:	22c3      	movs	r2, #195	; 0xc3
 8004512:	2105      	movs	r1, #5
 8004514:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004518:	f7fc fa3e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 800451c:	2302      	movs	r3, #2
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <Display_scanning_screen_background+0x1c4>)
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452c:	21cf      	movs	r1, #207	; 0xcf
 800452e:	2082      	movs	r0, #130	; 0x82
 8004530:	f7fc fad4 	bl	8000adc <ILI9341_Draw_String>

}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	0800e2fc 	.word	0x0800e2fc
 8004540:	0800e30c 	.word	0x0800e30c
 8004544:	0800e324 	.word	0x0800e324
 8004548:	0800e338 	.word	0x0800e338
 800454c:	0800e348 	.word	0x0800e348
 8004550:	0800e358 	.word	0x0800e358
 8004554:	0800e148 	.word	0x0800e148
 8004558:	0800e14c 	.word	0x0800e14c
 800455c:	0800e364 	.word	0x0800e364
 8004560:	0800e370 	.word	0x0800e370

08004564 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8004564:	b084      	sub	sp, #16
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af02      	add	r7, sp, #8
 800456c:	f107 0c08 	add.w	ip, r7, #8
 8004570:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8004574:	7d3b      	ldrb	r3, [r7, #20]
 8004576:	3301      	adds	r3, #1
 8004578:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004584:	fb93 f3f2 	sdiv	r3, r3, r2
 8004588:	330a      	adds	r3, #10
 800458a:	461a      	mov	r2, r3
 800458c:	233c      	movs	r3, #60	; 0x3c
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	2232      	movs	r2, #50	; 0x32
 8004594:	210a      	movs	r1, #10
 8004596:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800459a:	f7fc f9fd 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 800459e:	7d3b      	ldrb	r3, [r7, #20]
 80045a0:	3301      	adds	r3, #1
 80045a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80045b2:	330a      	adds	r3, #10
 80045b4:	4619      	mov	r1, r3
 80045b6:	233c      	movs	r3, #60	; 0x3c
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	f44f 739b 	mov.w	r3, #310	; 0x136
 80045be:	2232      	movs	r2, #50	; 0x32
 80045c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80045c4:	f7fc f9e8 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 80045c8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80045cc:	220a      	movs	r2, #10
 80045ce:	4954      	ldr	r1, [pc, #336]	; (8004720 <Display_scanning_screen_data+0x1bc>)
 80045d0:	4618      	mov	r0, r3
 80045d2:	f008 fe57 	bl	800d284 <itoa>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2202      	movs	r2, #2
 80045da:	9201      	str	r2, [sp, #4]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e6:	2149      	movs	r1, #73	; 0x49
 80045e8:	2091      	movs	r0, #145	; 0x91
 80045ea:	f7fc fa77 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 80045ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045f2:	220a      	movs	r2, #10
 80045f4:	494a      	ldr	r1, [pc, #296]	; (8004720 <Display_scanning_screen_data+0x1bc>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	f008 fe44 	bl	800d284 <itoa>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2202      	movs	r2, #2
 8004600:	9201      	str	r2, [sp, #4]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800460c:	2162      	movs	r1, #98	; 0x62
 800460e:	2087      	movs	r0, #135	; 0x87
 8004610:	f7fc fa64 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 8004614:	7d3b      	ldrb	r3, [r7, #20]
 8004616:	3301      	adds	r3, #1
 8004618:	220a      	movs	r2, #10
 800461a:	4941      	ldr	r1, [pc, #260]	; (8004720 <Display_scanning_screen_data+0x1bc>)
 800461c:	4618      	mov	r0, r3
 800461e:	f008 fe31 	bl	800d284 <itoa>
 8004622:	4603      	mov	r3, r0
 8004624:	2202      	movs	r2, #2
 8004626:	9201      	str	r2, [sp, #4]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800462e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004632:	217b      	movs	r1, #123	; 0x7b
 8004634:	2076      	movs	r0, #118	; 0x76
 8004636:	f7fc fa51 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 800463a:	2302      	movs	r3, #2
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <Display_scanning_screen_data+0x1c0>)
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464a:	217b      	movs	r1, #123	; 0x7b
 800464c:	2089      	movs	r0, #137	; 0x89
 800464e:	f7fc fa45 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 8004652:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004656:	220a      	movs	r2, #10
 8004658:	4931      	ldr	r1, [pc, #196]	; (8004720 <Display_scanning_screen_data+0x1bc>)
 800465a:	4618      	mov	r0, r3
 800465c:	f008 fe12 	bl	800d284 <itoa>
 8004660:	4603      	mov	r3, r0
 8004662:	2202      	movs	r2, #2
 8004664:	9201      	str	r2, [sp, #4]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800466c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004670:	217b      	movs	r1, #123	; 0x7b
 8004672:	2093      	movs	r0, #147	; 0x93
 8004674:	f7fc fa32 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <Display_scanning_screen_data+0x1c4>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	220a      	movs	r2, #10
 8004684:	4926      	ldr	r1, [pc, #152]	; (8004720 <Display_scanning_screen_data+0x1bc>)
 8004686:	4618      	mov	r0, r3
 8004688:	f008 fdfc 	bl	800d284 <itoa>
 800468c:	4603      	mov	r3, r0
 800468e:	2202      	movs	r2, #2
 8004690:	9201      	str	r2, [sp, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800469c:	2194      	movs	r1, #148	; 0x94
 800469e:	205f      	movs	r0, #95	; 0x5f
 80046a0:	f7fc fa1c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <Display_scanning_screen_data+0x1c4>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	220a      	movs	r2, #10
 80046ba:	4919      	ldr	r1, [pc, #100]	; (8004720 <Display_scanning_screen_data+0x1bc>)
 80046bc:	4618      	mov	r0, r3
 80046be:	f008 fde1 	bl	800d284 <itoa>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2202      	movs	r2, #2
 80046c6:	9201      	str	r2, [sp, #4]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d2:	2194      	movs	r1, #148	; 0x94
 80046d4:	2081      	movs	r0, #129	; 0x81
 80046d6:	f7fc fa01 	bl	8000adc <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 80046da:	2302      	movs	r3, #2
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <Display_scanning_screen_data+0x1c8>)
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ea:	21ad      	movs	r1, #173	; 0xad
 80046ec:	2050      	movs	r0, #80	; 0x50
 80046ee:	f7fc f9f5 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 80046f2:	7d3b      	ldrb	r3, [r7, #20]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <Display_scanning_screen_data+0x1cc>)
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	2202      	movs	r2, #2
 80046fe:	9201      	str	r2, [sp, #4]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800470a:	21ad      	movs	r1, #173	; 0xad
 800470c:	2050      	movs	r0, #80	; 0x50
 800470e:	f7fc f9e5 	bl	8000adc <ILI9341_Draw_String>


}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800471a:	b004      	add	sp, #16
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20006d8c 	.word	0x20006d8c
 8004724:	0800e260 	.word	0x0800e260
 8004728:	10624dd3 	.word	0x10624dd3
 800472c:	0800e378 	.word	0x0800e378
 8004730:	200000ac 	.word	0x200000ac

08004734 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 800473a:	2328      	movs	r3, #40	; 0x28
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	f240 133b 	movw	r3, #315	; 0x13b
 8004742:	2214      	movs	r2, #20
 8004744:	2105      	movs	r1, #5
 8004746:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800474a:	f7fc f925 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 800474e:	2302      	movs	r3, #2
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <Display_scanning_screen_complete+0x64>)
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800475a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800475e:	2117      	movs	r1, #23
 8004760:	2050      	movs	r0, #80	; 0x50
 8004762:	f7fc f9bb 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004766:	23eb      	movs	r3, #235	; 0xeb
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f240 133b 	movw	r3, #315	; 0x13b
 800476e:	22c3      	movs	r2, #195	; 0xc3
 8004770:	2105      	movs	r1, #5
 8004772:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004776:	f7fc f90f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 800477a:	2302      	movs	r3, #2
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <Display_scanning_screen_complete+0x68>)
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800478a:	21cf      	movs	r1, #207	; 0xcf
 800478c:	2082      	movs	r0, #130	; 0x82
 800478e:	f7fc f9a5 	bl	8000adc <ILI9341_Draw_String>

}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	0800e380 	.word	0x0800e380
 800479c:	0800e398 	.word	0x0800e398

080047a0 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80047a6:	f7ff f891 	bl	80038cc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 80047aa:	2302      	movs	r3, #2
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	4bb4      	ldr	r3, [pc, #720]	; (8004a80 <Display_dab_digrad_status_background+0x2e0>)
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047b8:	2101      	movs	r1, #1
 80047ba:	2005      	movs	r0, #5
 80047bc:	f7fc f98e 	bl	8000adc <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 80047c0:	2328      	movs	r3, #40	; 0x28
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2369      	movs	r3, #105	; 0x69
 80047c6:	2214      	movs	r2, #20
 80047c8:	2105      	movs	r1, #5
 80047ca:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80047ce:	f7fc f8e3 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80047d2:	2328      	movs	r3, #40	; 0x28
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	23d2      	movs	r3, #210	; 0xd2
 80047d8:	2214      	movs	r2, #20
 80047da:	216e      	movs	r1, #110	; 0x6e
 80047dc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80047e0:	f7fc f8da 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80047e4:	2328      	movs	r3, #40	; 0x28
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f240 133b 	movw	r3, #315	; 0x13b
 80047ec:	2214      	movs	r2, #20
 80047ee:	21d7      	movs	r1, #215	; 0xd7
 80047f0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80047f4:	f7fc f8d0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80047f8:	2341      	movs	r3, #65	; 0x41
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	f240 133b 	movw	r3, #315	; 0x13b
 8004800:	222d      	movs	r2, #45	; 0x2d
 8004802:	2105      	movs	r1, #5
 8004804:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004808:	f7fc f8c6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 800480c:	2302      	movs	r3, #2
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	4b9c      	ldr	r3, [pc, #624]	; (8004a84 <Display_dab_digrad_status_background+0x2e4>)
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800481c:	2130      	movs	r1, #48	; 0x30
 800481e:	200a      	movs	r0, #10
 8004820:	f7fc f95c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8004824:	2302      	movs	r3, #2
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	4b97      	ldr	r3, [pc, #604]	; (8004a88 <Display_dab_digrad_status_background+0x2e8>)
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004834:	2130      	movs	r1, #48	; 0x30
 8004836:	205a      	movs	r0, #90	; 0x5a
 8004838:	f7fc f950 	bl	8000adc <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 800483c:	235a      	movs	r3, #90	; 0x5a
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	f240 133b 	movw	r3, #315	; 0x13b
 8004844:	2246      	movs	r2, #70	; 0x46
 8004846:	2105      	movs	r1, #5
 8004848:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800484c:	f7fc f8a4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8004850:	2302      	movs	r3, #2
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	4b8d      	ldr	r3, [pc, #564]	; (8004a8c <Display_dab_digrad_status_background+0x2ec>)
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800485c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004860:	2149      	movs	r1, #73	; 0x49
 8004862:	200a      	movs	r0, #10
 8004864:	f7fc f93a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004868:	2302      	movs	r3, #2
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <Display_dab_digrad_status_background+0x2f0>)
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004878:	2149      	movs	r1, #73	; 0x49
 800487a:	2069      	movs	r0, #105	; 0x69
 800487c:	f7fc f92e 	bl	8000adc <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004880:	2373      	movs	r3, #115	; 0x73
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	f240 133b 	movw	r3, #315	; 0x13b
 8004888:	225f      	movs	r2, #95	; 0x5f
 800488a:	2105      	movs	r1, #5
 800488c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004890:	f7fc f882 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8004894:	2302      	movs	r3, #2
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <Display_dab_digrad_status_background+0x2f4>)
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a4:	2162      	movs	r1, #98	; 0x62
 80048a6:	200a      	movs	r0, #10
 80048a8:	f7fc f918 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80048ac:	2302      	movs	r3, #2
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	4b77      	ldr	r3, [pc, #476]	; (8004a90 <Display_dab_digrad_status_background+0x2f0>)
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048bc:	2162      	movs	r1, #98	; 0x62
 80048be:	2069      	movs	r0, #105	; 0x69
 80048c0:	f7fc f90c 	bl	8000adc <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80048c4:	238c      	movs	r3, #140	; 0x8c
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	f240 133b 	movw	r3, #315	; 0x13b
 80048cc:	2278      	movs	r2, #120	; 0x78
 80048ce:	2105      	movs	r1, #5
 80048d0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048d4:	f7fc f860 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 80048d8:	2302      	movs	r3, #2
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	4b6e      	ldr	r3, [pc, #440]	; (8004a98 <Display_dab_digrad_status_background+0x2f8>)
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e8:	217b      	movs	r1, #123	; 0x7b
 80048ea:	200a      	movs	r0, #10
 80048ec:	f7fc f8f6 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 80048f0:	2302      	movs	r3, #2
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	4b69      	ldr	r3, [pc, #420]	; (8004a9c <Display_dab_digrad_status_background+0x2fc>)
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004900:	217b      	movs	r1, #123	; 0x7b
 8004902:	206e      	movs	r0, #110	; 0x6e
 8004904:	f7fc f8ea 	bl	8000adc <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004908:	23a5      	movs	r3, #165	; 0xa5
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	f240 133b 	movw	r3, #315	; 0x13b
 8004910:	2291      	movs	r2, #145	; 0x91
 8004912:	2105      	movs	r1, #5
 8004914:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004918:	f7fc f83e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 800491c:	2302      	movs	r3, #2
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <Display_dab_digrad_status_background+0x300>)
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800492c:	2194      	movs	r1, #148	; 0x94
 800492e:	200a      	movs	r0, #10
 8004930:	f7fc f8d4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004934:	2302      	movs	r3, #2
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	4b5a      	ldr	r3, [pc, #360]	; (8004aa4 <Display_dab_digrad_status_background+0x304>)
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004944:	2194      	movs	r1, #148	; 0x94
 8004946:	2071      	movs	r0, #113	; 0x71
 8004948:	f7fc f8c8 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 800494c:	2302      	movs	r3, #2
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	4b55      	ldr	r3, [pc, #340]	; (8004aa8 <Display_dab_digrad_status_background+0x308>)
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800495c:	2194      	movs	r1, #148	; 0x94
 800495e:	2094      	movs	r0, #148	; 0x94
 8004960:	f7fc f8bc 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004964:	2302      	movs	r3, #2
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <Display_dab_digrad_status_background+0x30c>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004974:	2194      	movs	r1, #148	; 0x94
 8004976:	20b7      	movs	r0, #183	; 0xb7
 8004978:	f7fc f8b0 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 800497c:	2302      	movs	r3, #2
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <Display_dab_digrad_status_background+0x310>)
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800498c:	2194      	movs	r1, #148	; 0x94
 800498e:	20db      	movs	r0, #219	; 0xdb
 8004990:	f7fc f8a4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004994:	2302      	movs	r3, #2
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <Display_dab_digrad_status_background+0x314>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049a4:	2194      	movs	r1, #148	; 0x94
 80049a6:	f240 101b 	movw	r0, #283	; 0x11b
 80049aa:	f7fc f897 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 80049ae:	2302      	movs	r3, #2
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <Display_dab_digrad_status_background+0x318>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049be:	2194      	movs	r1, #148	; 0x94
 80049c0:	f240 1025 	movw	r0, #293	; 0x125
 80049c4:	f7fc f88a 	bl	8000adc <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80049c8:	23be      	movs	r3, #190	; 0xbe
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	f240 133b 	movw	r3, #315	; 0x13b
 80049d0:	22aa      	movs	r2, #170	; 0xaa
 80049d2:	2105      	movs	r1, #5
 80049d4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049d8:	f7fb ffde 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 80049dc:	2302      	movs	r3, #2
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	4b36      	ldr	r3, [pc, #216]	; (8004abc <Display_dab_digrad_status_background+0x31c>)
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ec:	21ad      	movs	r1, #173	; 0xad
 80049ee:	200a      	movs	r0, #10
 80049f0:	f7fc f874 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 80049f4:	2302      	movs	r3, #2
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <Display_dab_digrad_status_background+0x320>)
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a04:	21ad      	movs	r1, #173	; 0xad
 8004a06:	207d      	movs	r0, #125	; 0x7d
 8004a08:	f7fc f868 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <Display_dab_digrad_status_background+0x324>)
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a1c:	21ad      	movs	r1, #173	; 0xad
 8004a1e:	20b4      	movs	r0, #180	; 0xb4
 8004a20:	f7fc f85c 	bl	8000adc <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004a24:	23eb      	movs	r3, #235	; 0xeb
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	239d      	movs	r3, #157	; 0x9d
 8004a2a:	22c3      	movs	r2, #195	; 0xc3
 8004a2c:	2105      	movs	r1, #5
 8004a2e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004a32:	f7fb ffb1 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004a36:	23eb      	movs	r3, #235	; 0xeb
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	f240 133b 	movw	r3, #315	; 0x13b
 8004a3e:	22c3      	movs	r2, #195	; 0xc3
 8004a40:	21a3      	movs	r1, #163	; 0xa3
 8004a42:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004a46:	f7fb ffa7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <Display_dab_digrad_status_background+0x328>)
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a5a:	21cf      	movs	r1, #207	; 0xcf
 8004a5c:	2023      	movs	r0, #35	; 0x23
 8004a5e:	f7fc f83d 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004a62:	2302      	movs	r3, #2
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	4b19      	ldr	r3, [pc, #100]	; (8004acc <Display_dab_digrad_status_background+0x32c>)
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a72:	21cf      	movs	r1, #207	; 0xcf
 8004a74:	20cd      	movs	r0, #205	; 0xcd
 8004a76:	f7fc f831 	bl	8000adc <ILI9341_Draw_String>
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	0800e3a0 	.word	0x0800e3a0
 8004a84:	0800e3b4 	.word	0x0800e3b4
 8004a88:	0800e3bc 	.word	0x0800e3bc
 8004a8c:	0800e3c4 	.word	0x0800e3c4
 8004a90:	0800e3c8 	.word	0x0800e3c8
 8004a94:	0800e3cc 	.word	0x0800e3cc
 8004a98:	0800e3d0 	.word	0x0800e3d0
 8004a9c:	0800e3d8 	.word	0x0800e3d8
 8004aa0:	0800e3dc 	.word	0x0800e3dc
 8004aa4:	0800e148 	.word	0x0800e148
 8004aa8:	0800e14c 	.word	0x0800e14c
 8004aac:	0800e3e8 	.word	0x0800e3e8
 8004ab0:	0800e3f0 	.word	0x0800e3f0
 8004ab4:	0800e260 	.word	0x0800e260
 8004ab8:	0800e3f8 	.word	0x0800e3f8
 8004abc:	0800e3fc 	.word	0x0800e3fc
 8004ac0:	0800e408 	.word	0x0800e408
 8004ac4:	0800e40c 	.word	0x0800e40c
 8004ac8:	0800e124 	.word	0x0800e124
 8004acc:	0800e118 	.word	0x0800e118

08004ad0 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af02      	add	r7, sp, #8
 8004ad8:	f107 0c18 	add.w	ip, r7, #24
 8004adc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	23fa      	movs	r3, #250	; 0xfa
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a33      	ldr	r2, [pc, #204]	; (8004bbc <Display_dab_digrad_status_data+0xec>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <Display_dab_digrad_status_data+0xec>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <Display_dab_digrad_status_data+0xf0>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 8331 	bne.w	800517a <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 8004b18:	7e7b      	ldrb	r3, [r7, #25]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004b24:	2302      	movs	r3, #2
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <Display_dab_digrad_status_data+0xf4>)
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b30:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b34:	2117      	movs	r1, #23
 8004b36:	2023      	movs	r0, #35	; 0x23
 8004b38:	f7fb ffd0 	bl	8000adc <ILI9341_Draw_String>
 8004b3c:	e00b      	b.n	8004b56 <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004b3e:	2302      	movs	r3, #2
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <Display_dab_digrad_status_data+0xf4>)
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b4a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004b4e:	2117      	movs	r1, #23
 8004b50:	2023      	movs	r0, #35	; 0x23
 8004b52:	f7fb ffc3 	bl	8000adc <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 8004b56:	7e7b      	ldrb	r3, [r7, #25]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004b62:	2302      	movs	r3, #2
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <Display_dab_digrad_status_data+0xf8>)
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b6e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b72:	2117      	movs	r1, #23
 8004b74:	2085      	movs	r0, #133	; 0x85
 8004b76:	f7fb ffb1 	bl	8000adc <ILI9341_Draw_String>
 8004b7a:	e00b      	b.n	8004b94 <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <Display_dab_digrad_status_data+0xf8>)
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b88:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004b8c:	2117      	movs	r1, #23
 8004b8e:	2085      	movs	r0, #133	; 0x85
 8004b90:	f7fb ffa4 	bl	8000adc <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 8004b94:	7e7b      	ldrb	r3, [r7, #25]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <Display_dab_digrad_status_data+0xfc>)
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004bac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004bb0:	2117      	movs	r1, #23
 8004bb2:	20e4      	movs	r0, #228	; 0xe4
 8004bb4:	f7fb ff92 	bl	8000adc <ILI9341_Draw_String>
 8004bb8:	e016      	b.n	8004be8 <Display_dab_digrad_status_data+0x118>
 8004bba:	bf00      	nop
 8004bbc:	10624dd3 	.word	0x10624dd3
 8004bc0:	20006dcc 	.word	0x20006dcc
 8004bc4:	0800e410 	.word	0x0800e410
 8004bc8:	0800e418 	.word	0x0800e418
 8004bcc:	0800e420 	.word	0x0800e420
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	4bb6      	ldr	r3, [pc, #728]	; (8004eb0 <Display_dab_digrad_status_data+0x3e0>)
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004bdc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004be0:	2117      	movs	r1, #23
 8004be2:	20e4      	movs	r0, #228	; 0xe4
 8004be4:	f7fb ff7a 	bl	8000adc <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 8004be8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004bec:	2b0d      	cmp	r3, #13
 8004bee:	dc02      	bgt.n	8004bf6 <Display_dab_digrad_status_data+0x126>
 8004bf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bf4:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004bf6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004bfa:	2b1a      	cmp	r3, #26
 8004bfc:	dc06      	bgt.n	8004c0c <Display_dab_digrad_status_data+0x13c>
 8004bfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c02:	2b0d      	cmp	r3, #13
 8004c04:	dd02      	ble.n	8004c0c <Display_dab_digrad_status_data+0x13c>
 8004c06:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c0a:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004c0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c10:	2b27      	cmp	r3, #39	; 0x27
 8004c12:	dc06      	bgt.n	8004c22 <Display_dab_digrad_status_data+0x152>
 8004c14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c18:	2b1a      	cmp	r3, #26
 8004c1a:	dd02      	ble.n	8004c22 <Display_dab_digrad_status_data+0x152>
 8004c1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004c20:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004c22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c26:	2b34      	cmp	r3, #52	; 0x34
 8004c28:	dc06      	bgt.n	8004c38 <Display_dab_digrad_status_data+0x168>
 8004c2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c2e:	2b27      	cmp	r3, #39	; 0x27
 8004c30:	dd02      	ble.n	8004c38 <Display_dab_digrad_status_data+0x168>
 8004c32:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c36:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 8004c38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c3c:	2b34      	cmp	r3, #52	; 0x34
 8004c3e:	dd02      	ble.n	8004c46 <Display_dab_digrad_status_data+0x176>
 8004c40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c44:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004c46:	2302      	movs	r3, #2
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	4b9a      	ldr	r3, [pc, #616]	; (8004eb4 <Display_dab_digrad_status_data+0x3e4>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c56:	2130      	movs	r1, #48	; 0x30
 8004c58:	2032      	movs	r0, #50	; 0x32
 8004c5a:	f7fb ff3f 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004c5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c62:	220a      	movs	r2, #10
 8004c64:	4994      	ldr	r1, [pc, #592]	; (8004eb8 <Display_dab_digrad_status_data+0x3e8>)
 8004c66:	4618      	mov	r0, r3
 8004c68:	f008 fb0c 	bl	800d284 <itoa>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2202      	movs	r2, #2
 8004c70:	9201      	str	r2, [sp, #4]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c7c:	2130      	movs	r1, #48	; 0x30
 8004c7e:	2032      	movs	r0, #50	; 0x32
 8004c80:	f7fb ff2c 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004c84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	23b4      	movs	r3, #180	; 0xb4
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	da00      	bge.n	8004c96 <Display_dab_digrad_status_data+0x1c6>
 8004c94:	333f      	adds	r3, #63	; 0x3f
 8004c96:	119b      	asrs	r3, r3, #6
 8004c98:	3382      	adds	r3, #130	; 0x82
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	233c      	movs	r3, #60	; 0x3c
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	2232      	movs	r2, #50	; 0x32
 8004ca4:	2182      	movs	r1, #130	; 0x82
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7fb fe76 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004cac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	23b4      	movs	r3, #180	; 0xb4
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	da00      	bge.n	8004cbe <Display_dab_digrad_status_data+0x1ee>
 8004cbc:	333f      	adds	r3, #63	; 0x3f
 8004cbe:	119b      	asrs	r3, r3, #6
 8004cc0:	3382      	adds	r3, #130	; 0x82
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	233c      	movs	r3, #60	; 0x3c
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004ccc:	2232      	movs	r2, #50	; 0x32
 8004cce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004cd2:	f7fb fe61 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 8004cd6:	7efb      	ldrb	r3, [r7, #27]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d802      	bhi.n	8004ce2 <Display_dab_digrad_status_data+0x212>
 8004cdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ce0:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004ce2:	7efb      	ldrb	r3, [r7, #27]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d805      	bhi.n	8004cf4 <Display_dab_digrad_status_data+0x224>
 8004ce8:	7efb      	ldrb	r3, [r7, #27]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d902      	bls.n	8004cf4 <Display_dab_digrad_status_data+0x224>
 8004cee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004cf2:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004cf4:	7efb      	ldrb	r3, [r7, #27]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d805      	bhi.n	8004d06 <Display_dab_digrad_status_data+0x236>
 8004cfa:	7efb      	ldrb	r3, [r7, #27]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d902      	bls.n	8004d06 <Display_dab_digrad_status_data+0x236>
 8004d00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d04:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004d06:	7efb      	ldrb	r3, [r7, #27]
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d805      	bhi.n	8004d18 <Display_dab_digrad_status_data+0x248>
 8004d0c:	7efb      	ldrb	r3, [r7, #27]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d902      	bls.n	8004d18 <Display_dab_digrad_status_data+0x248>
 8004d12:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d16:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8004d18:	7efb      	ldrb	r3, [r7, #27]
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d902      	bls.n	8004d24 <Display_dab_digrad_status_data+0x254>
 8004d1e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d22:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004d24:	2302      	movs	r3, #2
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	4b62      	ldr	r3, [pc, #392]	; (8004eb4 <Display_dab_digrad_status_data+0x3e4>)
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d34:	2149      	movs	r1, #73	; 0x49
 8004d36:	2032      	movs	r0, #50	; 0x32
 8004d38:	f7fb fed0 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004d3c:	7efb      	ldrb	r3, [r7, #27]
 8004d3e:	220a      	movs	r2, #10
 8004d40:	495d      	ldr	r1, [pc, #372]	; (8004eb8 <Display_dab_digrad_status_data+0x3e8>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f008 fa9e 	bl	800d284 <itoa>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	9201      	str	r2, [sp, #4]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d58:	2149      	movs	r1, #73	; 0x49
 8004d5a:	2032      	movs	r0, #50	; 0x32
 8004d5c:	f7fb febe 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004d60:	7efb      	ldrb	r3, [r7, #27]
 8004d62:	461a      	mov	r2, r3
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	3382      	adds	r3, #130	; 0x82
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2355      	movs	r3, #85	; 0x55
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	224b      	movs	r2, #75	; 0x4b
 8004d76:	2182      	movs	r1, #130	; 0x82
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fb fe0d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004d7e:	7efb      	ldrb	r3, [r7, #27]
 8004d80:	461a      	mov	r2, r3
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	3382      	adds	r3, #130	; 0x82
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	2355      	movs	r3, #85	; 0x55
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004d94:	224b      	movs	r2, #75	; 0x4b
 8004d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d9a:	f7fb fdfd 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 8004d9e:	7f7b      	ldrb	r3, [r7, #29]
 8004da0:	2b0b      	cmp	r3, #11
 8004da2:	d802      	bhi.n	8004daa <Display_dab_digrad_status_data+0x2da>
 8004da4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004da8:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004daa:	7f7b      	ldrb	r3, [r7, #29]
 8004dac:	2b16      	cmp	r3, #22
 8004dae:	d805      	bhi.n	8004dbc <Display_dab_digrad_status_data+0x2ec>
 8004db0:	7f7b      	ldrb	r3, [r7, #29]
 8004db2:	2b0b      	cmp	r3, #11
 8004db4:	d902      	bls.n	8004dbc <Display_dab_digrad_status_data+0x2ec>
 8004db6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004dba:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004dbc:	7f7b      	ldrb	r3, [r7, #29]
 8004dbe:	2b21      	cmp	r3, #33	; 0x21
 8004dc0:	d805      	bhi.n	8004dce <Display_dab_digrad_status_data+0x2fe>
 8004dc2:	7f7b      	ldrb	r3, [r7, #29]
 8004dc4:	2b16      	cmp	r3, #22
 8004dc6:	d902      	bls.n	8004dce <Display_dab_digrad_status_data+0x2fe>
 8004dc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dcc:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004dce:	7f7b      	ldrb	r3, [r7, #29]
 8004dd0:	2b2c      	cmp	r3, #44	; 0x2c
 8004dd2:	d805      	bhi.n	8004de0 <Display_dab_digrad_status_data+0x310>
 8004dd4:	7f7b      	ldrb	r3, [r7, #29]
 8004dd6:	2b21      	cmp	r3, #33	; 0x21
 8004dd8:	d902      	bls.n	8004de0 <Display_dab_digrad_status_data+0x310>
 8004dda:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004dde:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 8004de0:	7f7b      	ldrb	r3, [r7, #29]
 8004de2:	2b2c      	cmp	r3, #44	; 0x2c
 8004de4:	d902      	bls.n	8004dec <Display_dab_digrad_status_data+0x31c>
 8004de6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dea:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004dec:	2302      	movs	r3, #2
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <Display_dab_digrad_status_data+0x3e4>)
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dfc:	2162      	movs	r1, #98	; 0x62
 8004dfe:	2032      	movs	r0, #50	; 0x32
 8004e00:	f7fb fe6c 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004e04:	7f7b      	ldrb	r3, [r7, #29]
 8004e06:	220a      	movs	r2, #10
 8004e08:	492b      	ldr	r1, [pc, #172]	; (8004eb8 <Display_dab_digrad_status_data+0x3e8>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f008 fa3a 	bl	800d284 <itoa>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2202      	movs	r2, #2
 8004e14:	9201      	str	r2, [sp, #4]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e20:	2162      	movs	r1, #98	; 0x62
 8004e22:	2032      	movs	r0, #50	; 0x32
 8004e24:	f7fb fe5a 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004e28:	7f7b      	ldrb	r3, [r7, #29]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	23b4      	movs	r3, #180	; 0xb4
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <Display_dab_digrad_status_data+0x3ec>)
 8004e34:	fb82 1203 	smull	r1, r2, r2, r3
 8004e38:	1112      	asrs	r2, r2, #4
 8004e3a:	17db      	asrs	r3, r3, #31
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	3382      	adds	r3, #130	; 0x82
 8004e40:	461a      	mov	r2, r3
 8004e42:	236e      	movs	r3, #110	; 0x6e
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	2264      	movs	r2, #100	; 0x64
 8004e4a:	2182      	movs	r1, #130	; 0x82
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7fb fda3 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004e52:	7f7b      	ldrb	r3, [r7, #29]
 8004e54:	461a      	mov	r2, r3
 8004e56:	23b4      	movs	r3, #180	; 0xb4
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <Display_dab_digrad_status_data+0x3ec>)
 8004e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8004e62:	1112      	asrs	r2, r2, #4
 8004e64:	17db      	asrs	r3, r3, #31
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	3382      	adds	r3, #130	; 0x82
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	236e      	movs	r3, #110	; 0x6e
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004e74:	2264      	movs	r2, #100	; 0x64
 8004e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e7a:	f7fb fd8d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 8004e7e:	7f3b      	ldrb	r3, [r7, #28]
 8004e80:	2b14      	cmp	r3, #20
 8004e82:	d802      	bhi.n	8004e8a <Display_dab_digrad_status_data+0x3ba>
 8004e84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e88:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004e8a:	7f3b      	ldrb	r3, [r7, #28]
 8004e8c:	2b28      	cmp	r3, #40	; 0x28
 8004e8e:	d805      	bhi.n	8004e9c <Display_dab_digrad_status_data+0x3cc>
 8004e90:	7f3b      	ldrb	r3, [r7, #28]
 8004e92:	2b14      	cmp	r3, #20
 8004e94:	d902      	bls.n	8004e9c <Display_dab_digrad_status_data+0x3cc>
 8004e96:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e9a:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004e9c:	7f3b      	ldrb	r3, [r7, #28]
 8004e9e:	2b3c      	cmp	r3, #60	; 0x3c
 8004ea0:	d80e      	bhi.n	8004ec0 <Display_dab_digrad_status_data+0x3f0>
 8004ea2:	7f3b      	ldrb	r3, [r7, #28]
 8004ea4:	2b28      	cmp	r3, #40	; 0x28
 8004ea6:	d90b      	bls.n	8004ec0 <Display_dab_digrad_status_data+0x3f0>
 8004ea8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e007      	b.n	8004ec0 <Display_dab_digrad_status_data+0x3f0>
 8004eb0:	0800e420 	.word	0x0800e420
 8004eb4:	0800e42c 	.word	0x0800e42c
 8004eb8:	20006d8c 	.word	0x20006d8c
 8004ebc:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8004ec0:	7f3b      	ldrb	r3, [r7, #28]
 8004ec2:	2b50      	cmp	r3, #80	; 0x50
 8004ec4:	d805      	bhi.n	8004ed2 <Display_dab_digrad_status_data+0x402>
 8004ec6:	7f3b      	ldrb	r3, [r7, #28]
 8004ec8:	2b3c      	cmp	r3, #60	; 0x3c
 8004eca:	d902      	bls.n	8004ed2 <Display_dab_digrad_status_data+0x402>
 8004ecc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ed0:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 8004ed2:	7f3b      	ldrb	r3, [r7, #28]
 8004ed4:	2b50      	cmp	r3, #80	; 0x50
 8004ed6:	d902      	bls.n	8004ede <Display_dab_digrad_status_data+0x40e>
 8004ed8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004edc:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8004ede:	2302      	movs	r3, #2
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	4ba9      	ldr	r3, [pc, #676]	; (8005188 <Display_dab_digrad_status_data+0x6b8>)
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eee:	217b      	movs	r1, #123	; 0x7b
 8004ef0:	204b      	movs	r0, #75	; 0x4b
 8004ef2:	f7fb fdf3 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8004ef6:	7f3b      	ldrb	r3, [r7, #28]
 8004ef8:	220a      	movs	r2, #10
 8004efa:	49a4      	ldr	r1, [pc, #656]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 8004efc:	4618      	mov	r0, r3
 8004efe:	f008 f9c1 	bl	800d284 <itoa>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2202      	movs	r2, #2
 8004f06:	9201      	str	r2, [sp, #4]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f12:	217b      	movs	r1, #123	; 0x7b
 8004f14:	204b      	movs	r0, #75	; 0x4b
 8004f16:	f7fb fde1 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8004f1a:	7f3b      	ldrb	r3, [r7, #28]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	23b4      	movs	r3, #180	; 0xb4
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	4a9a      	ldr	r2, [pc, #616]	; (8005190 <Display_dab_digrad_status_data+0x6c0>)
 8004f26:	fb82 1203 	smull	r1, r2, r2, r3
 8004f2a:	1152      	asrs	r2, r2, #5
 8004f2c:	17db      	asrs	r3, r3, #31
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	3382      	adds	r3, #130	; 0x82
 8004f32:	461a      	mov	r2, r3
 8004f34:	2387      	movs	r3, #135	; 0x87
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	227d      	movs	r2, #125	; 0x7d
 8004f3c:	2182      	movs	r1, #130	; 0x82
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7fb fd2a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8004f44:	7f3b      	ldrb	r3, [r7, #28]
 8004f46:	461a      	mov	r2, r3
 8004f48:	23b4      	movs	r3, #180	; 0xb4
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	4a90      	ldr	r2, [pc, #576]	; (8005190 <Display_dab_digrad_status_data+0x6c0>)
 8004f50:	fb82 1203 	smull	r1, r2, r2, r3
 8004f54:	1152      	asrs	r2, r2, #5
 8004f56:	17db      	asrs	r3, r3, #31
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	3382      	adds	r3, #130	; 0x82
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	2387      	movs	r3, #135	; 0x87
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004f66:	227d      	movs	r2, #125	; 0x7d
 8004f68:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004f6c:	f7fb fd14 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	4a88      	ldr	r2, [pc, #544]	; (8005194 <Display_dab_digrad_status_data+0x6c4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	220a      	movs	r2, #10
 8004f7c:	4983      	ldr	r1, [pc, #524]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f008 f980 	bl	800d284 <itoa>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2202      	movs	r2, #2
 8004f88:	9201      	str	r2, [sp, #4]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f94:	2194      	movs	r1, #148	; 0x94
 8004f96:	205b      	movs	r0, #91	; 0x5b
 8004f98:	f7fb fda0 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	4b7d      	ldr	r3, [pc, #500]	; (8005194 <Display_dab_digrad_status_data+0x6c4>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	220a      	movs	r2, #10
 8004fb2:	4976      	ldr	r1, [pc, #472]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f008 f965 	bl	800d284 <itoa>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	9201      	str	r2, [sp, #4]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fca:	2194      	movs	r1, #148	; 0x94
 8004fcc:	2078      	movs	r0, #120	; 0x78
 8004fce:	f7fb fd85 	bl	8000adc <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 8004fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fd6:	2b09      	cmp	r3, #9
 8004fd8:	d821      	bhi.n	800501e <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 8004fda:	2302      	movs	r3, #2
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	4b6e      	ldr	r3, [pc, #440]	; (8005198 <Display_dab_digrad_status_data+0x6c8>)
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fea:	2194      	movs	r1, #148	; 0x94
 8004fec:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004ff0:	f7fb fd74 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8004ff4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4964      	ldr	r1, [pc, #400]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f008 f941 	bl	800d284 <itoa>
 8005002:	4603      	mov	r3, r0
 8005004:	2202      	movs	r2, #2
 8005006:	9201      	str	r2, [sp, #4]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800500e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005012:	2194      	movs	r1, #148	; 0x94
 8005014:	f240 1011 	movw	r0, #273	; 0x111
 8005018:	f7fb fd60 	bl	8000adc <ILI9341_Draw_String>
 800501c:	e013      	b.n	8005046 <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 800501e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005022:	220a      	movs	r2, #10
 8005024:	4959      	ldr	r1, [pc, #356]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 8005026:	4618      	mov	r0, r3
 8005028:	f008 f92c 	bl	800d284 <itoa>
 800502c:	4603      	mov	r3, r0
 800502e:	2202      	movs	r2, #2
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800503c:	2194      	movs	r1, #148	; 0x94
 800503e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8005042:	f7fb fd4b 	bl	8000adc <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	2b09      	cmp	r3, #9
 800504a:	d81d      	bhi.n	8005088 <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 800504c:	2302      	movs	r3, #2
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	4b52      	ldr	r3, [pc, #328]	; (800519c <Display_dab_digrad_status_data+0x6cc>)
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800505c:	21ad      	movs	r1, #173	; 0xad
 800505e:	204f      	movs	r0, #79	; 0x4f
 8005060:	f7fb fd3c 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	220a      	movs	r2, #10
 8005068:	4948      	ldr	r1, [pc, #288]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 800506a:	4618      	mov	r0, r3
 800506c:	f008 f90a 	bl	800d284 <itoa>
 8005070:	4603      	mov	r3, r0
 8005072:	2202      	movs	r2, #2
 8005074:	9201      	str	r2, [sp, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800507c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005080:	21ad      	movs	r1, #173	; 0xad
 8005082:	2057      	movs	r0, #87	; 0x57
 8005084:	f7fb fd2a 	bl	8000adc <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	2b09      	cmp	r3, #9
 800508c:	d911      	bls.n	80050b2 <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	220a      	movs	r2, #10
 8005092:	493e      	ldr	r1, [pc, #248]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 8005094:	4618      	mov	r0, r3
 8005096:	f008 f8f5 	bl	800d284 <itoa>
 800509a:	4603      	mov	r3, r0
 800509c:	2202      	movs	r2, #2
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050aa:	21ad      	movs	r1, #173	; 0xad
 80050ac:	204f      	movs	r0, #79	; 0x4f
 80050ae:	f7fb fd15 	bl	8000adc <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 80050b2:	2302      	movs	r3, #2
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <Display_dab_digrad_status_data+0x6d0>)
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c2:	21ad      	movs	r1, #173	; 0xad
 80050c4:	205f      	movs	r0, #95	; 0x5f
 80050c6:	f7fb fd09 	bl	8000adc <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 80050ca:	88bb      	ldrh	r3, [r7, #4]
 80050cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d023      	beq.n	800511c <Display_dab_digrad_status_data+0x64c>
 80050d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80050d8:	4293      	cmp	r3, r2
 80050da:	dc2c      	bgt.n	8005136 <Display_dab_digrad_status_data+0x666>
 80050dc:	2bfa      	cmp	r3, #250	; 0xfa
 80050de:	d003      	beq.n	80050e8 <Display_dab_digrad_status_data+0x618>
 80050e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050e4:	d00d      	beq.n	8005102 <Display_dab_digrad_status_data+0x632>
 80050e6:	e026      	b.n	8005136 <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 80050e8:	2302      	movs	r3, #2
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <Display_dab_digrad_status_data+0x6d4>)
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050f8:	21ad      	movs	r1, #173	; 0xad
 80050fa:	2067      	movs	r0, #103	; 0x67
 80050fc:	f7fb fcee 	bl	8000adc <ILI9341_Draw_String>
			break;
 8005100:	e026      	b.n	8005150 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8005102:	2302      	movs	r3, #2
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <Display_dab_digrad_status_data+0x6d8>)
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800510e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005112:	21ad      	movs	r1, #173	; 0xad
 8005114:	2067      	movs	r0, #103	; 0x67
 8005116:	f7fb fce1 	bl	8000adc <ILI9341_Draw_String>
			break;
 800511a:	e019      	b.n	8005150 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 800511c:	2302      	movs	r3, #2
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	4b22      	ldr	r3, [pc, #136]	; (80051ac <Display_dab_digrad_status_data+0x6dc>)
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800512c:	21ad      	movs	r1, #173	; 0xad
 800512e:	2067      	movs	r0, #103	; 0x67
 8005130:	f7fb fcd4 	bl	8000adc <ILI9341_Draw_String>
			break;
 8005134:	e00c      	b.n	8005150 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8005136:	2302      	movs	r3, #2
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <Display_dab_digrad_status_data+0x6e0>)
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005146:	21ad      	movs	r1, #173	; 0xad
 8005148:	2067      	movs	r0, #103	; 0x67
 800514a:	f7fb fcc7 	bl	8000adc <ILI9341_Draw_String>
			break;
 800514e:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8005150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	220a      	movs	r2, #10
 800515a:	490c      	ldr	r1, [pc, #48]	; (800518c <Display_dab_digrad_status_data+0x6bc>)
 800515c:	4618      	mov	r0, r3
 800515e:	f008 f891 	bl	800d284 <itoa>
 8005162:	4603      	mov	r3, r0
 8005164:	2202      	movs	r2, #2
 8005166:	9201      	str	r2, [sp, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800516e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005172:	21ad      	movs	r1, #173	; 0xad
 8005174:	20d7      	movs	r0, #215	; 0xd7
 8005176:	f7fb fcb1 	bl	8000adc <ILI9341_Draw_String>
	}
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005184:	b004      	add	sp, #16
 8005186:	4770      	bx	lr
 8005188:	0800e42c 	.word	0x0800e42c
 800518c:	20006d8c 	.word	0x20006d8c
 8005190:	51eb851f 	.word	0x51eb851f
 8005194:	10624dd3 	.word	0x10624dd3
 8005198:	0800e430 	.word	0x0800e430
 800519c:	0800e138 	.word	0x0800e138
 80051a0:	0800e148 	.word	0x0800e148
 80051a4:	0800e434 	.word	0x0800e434
 80051a8:	0800e438 	.word	0x0800e438
 80051ac:	0800e43c 	.word	0x0800e43c
 80051b0:	0800e440 	.word	0x0800e440

080051b4 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80051ba:	f7fe fb87 	bl	80038cc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 80051be:	2302      	movs	r3, #2
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	4b6d      	ldr	r3, [pc, #436]	; (8005378 <Display_settings_screen_background+0x1c4>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051cc:	2101      	movs	r1, #1
 80051ce:	2005      	movs	r0, #5
 80051d0:	f7fb fc84 	bl	8000adc <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 80051d4:	2337      	movs	r3, #55	; 0x37
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	f240 133b 	movw	r3, #315	; 0x13b
 80051dc:	2214      	movs	r2, #20
 80051de:	2105      	movs	r1, #5
 80051e0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80051e4:	f7fb fbd8 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 80051e8:	2302      	movs	r3, #2
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	4b63      	ldr	r3, [pc, #396]	; (800537c <Display_settings_screen_background+0x1c8>)
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f8:	2116      	movs	r1, #22
 80051fa:	2037      	movs	r0, #55	; 0x37
 80051fc:	f7fb fc6e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 8005200:	2302      	movs	r3, #2
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	4b5e      	ldr	r3, [pc, #376]	; (8005380 <Display_settings_screen_background+0x1cc>)
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800520c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005210:	2116      	movs	r1, #22
 8005212:	20ce      	movs	r0, #206	; 0xce
 8005214:	f7fb fc62 	bl	8000adc <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8005218:	2364      	movs	r3, #100	; 0x64
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	239d      	movs	r3, #157	; 0x9d
 800521e:	223c      	movs	r2, #60	; 0x3c
 8005220:	2105      	movs	r1, #5
 8005222:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005226:	f7fb fbb7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 800522a:	2364      	movs	r3, #100	; 0x64
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	f240 133b 	movw	r3, #315	; 0x13b
 8005232:	223c      	movs	r2, #60	; 0x3c
 8005234:	21a3      	movs	r1, #163	; 0xa3
 8005236:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800523a:	f7fb fbad 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 800523e:	2302      	movs	r3, #2
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	4b50      	ldr	r3, [pc, #320]	; (8005384 <Display_settings_screen_background+0x1d0>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	2148      	movs	r1, #72	; 0x48
 8005250:	2036      	movs	r0, #54	; 0x36
 8005252:	f7fb fc43 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8005256:	2302      	movs	r3, #2
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <Display_settings_screen_background+0x1d4>)
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005266:	2148      	movs	r1, #72	; 0x48
 8005268:	20d3      	movs	r0, #211	; 0xd3
 800526a:	f7fb fc37 	bl	8000adc <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 800526e:	2391      	movs	r3, #145	; 0x91
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	239d      	movs	r3, #157	; 0x9d
 8005274:	2269      	movs	r2, #105	; 0x69
 8005276:	2105      	movs	r1, #5
 8005278:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800527c:	f7fb fb8c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8005280:	2391      	movs	r3, #145	; 0x91
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	f240 133b 	movw	r3, #315	; 0x13b
 8005288:	2269      	movs	r2, #105	; 0x69
 800528a:	21a3      	movs	r1, #163	; 0xa3
 800528c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005290:	f7fb fb82 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8005294:	2302      	movs	r3, #2
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	4b3c      	ldr	r3, [pc, #240]	; (800538c <Display_settings_screen_background+0x1d8>)
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80052a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a4:	2175      	movs	r1, #117	; 0x75
 80052a6:	2023      	movs	r0, #35	; 0x23
 80052a8:	f7fb fc18 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 80052ac:	2302      	movs	r3, #2
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	4b37      	ldr	r3, [pc, #220]	; (8005390 <Display_settings_screen_background+0x1dc>)
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80052b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052bc:	2175      	movs	r1, #117	; 0x75
 80052be:	20c1      	movs	r0, #193	; 0xc1
 80052c0:	f7fb fc0c 	bl	8000adc <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 80052c4:	23be      	movs	r3, #190	; 0xbe
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	239d      	movs	r3, #157	; 0x9d
 80052ca:	2296      	movs	r2, #150	; 0x96
 80052cc:	2105      	movs	r1, #5
 80052ce:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80052d2:	f7fb fb61 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 80052d6:	23be      	movs	r3, #190	; 0xbe
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	f240 133b 	movw	r3, #315	; 0x13b
 80052de:	2296      	movs	r2, #150	; 0x96
 80052e0:	21a3      	movs	r1, #163	; 0xa3
 80052e2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80052e6:	f7fb fb57 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 80052ea:	2302      	movs	r3, #2
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	4b29      	ldr	r3, [pc, #164]	; (8005394 <Display_settings_screen_background+0x1e0>)
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80052f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052fa:	21a2      	movs	r1, #162	; 0xa2
 80052fc:	2020      	movs	r0, #32
 80052fe:	f7fb fbed 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 8005302:	2302      	movs	r3, #2
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <Display_settings_screen_background+0x1e4>)
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800530e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005312:	21a2      	movs	r1, #162	; 0xa2
 8005314:	20a8      	movs	r0, #168	; 0xa8
 8005316:	f7fb fbe1 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 800531a:	23eb      	movs	r3, #235	; 0xeb
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	239d      	movs	r3, #157	; 0x9d
 8005320:	22c3      	movs	r2, #195	; 0xc3
 8005322:	2105      	movs	r1, #5
 8005324:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005328:	f7fb fb36 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800532c:	23eb      	movs	r3, #235	; 0xeb
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	f240 133b 	movw	r3, #315	; 0x13b
 8005334:	22c3      	movs	r2, #195	; 0xc3
 8005336:	21a3      	movs	r1, #163	; 0xa3
 8005338:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800533c:	f7fb fb2c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8005340:	2302      	movs	r3, #2
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	4b15      	ldr	r3, [pc, #84]	; (800539c <Display_settings_screen_background+0x1e8>)
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800534c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005350:	21cf      	movs	r1, #207	; 0xcf
 8005352:	2025      	movs	r0, #37	; 0x25
 8005354:	f7fb fbc2 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8005358:	2302      	movs	r3, #2
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <Display_settings_screen_background+0x1ec>)
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005368:	21cf      	movs	r1, #207	; 0xcf
 800536a:	20c3      	movs	r0, #195	; 0xc3
 800536c:	f7fb fbb6 	bl	8000adc <ILI9341_Draw_String>

}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	0800e444 	.word	0x0800e444
 800537c:	0800e454 	.word	0x0800e454
 8005380:	0800e45c 	.word	0x0800e45c
 8005384:	0800e468 	.word	0x0800e468
 8005388:	0800e474 	.word	0x0800e474
 800538c:	0800e480 	.word	0x0800e480
 8005390:	0800e48c 	.word	0x0800e48c
 8005394:	0800e498 	.word	0x0800e498
 8005398:	0800e4a8 	.word	0x0800e4a8
 800539c:	0800e274 	.word	0x0800e274
 80053a0:	0800e268 	.word	0x0800e268

080053a4 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	463c      	mov	r4, r7
 80053ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	461a      	mov	r2, r3
 80053b4:	238c      	movs	r3, #140	; 0x8c
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <Display_settings_screen_data+0x84>)
 80053bc:	fb82 1203 	smull	r1, r2, r2, r3
 80053c0:	441a      	add	r2, r3
 80053c2:	1152      	asrs	r2, r2, #5
 80053c4:	17db      	asrs	r3, r3, #31
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	330c      	adds	r3, #12
 80053ca:	4619      	mov	r1, r3
 80053cc:	2332      	movs	r3, #50	; 0x32
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2398      	movs	r3, #152	; 0x98
 80053d2:	2228      	movs	r2, #40	; 0x28
 80053d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80053d8:	f7fb fade 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
 80053de:	461a      	mov	r2, r3
 80053e0:	238c      	movs	r3, #140	; 0x8c
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <Display_settings_screen_data+0x84>)
 80053e8:	fb82 1203 	smull	r1, r2, r2, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	1152      	asrs	r2, r2, #5
 80053f0:	17db      	asrs	r3, r3, #31
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	330c      	adds	r3, #12
 80053f6:	461a      	mov	r2, r3
 80053f8:	2332      	movs	r3, #50	; 0x32
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	2228      	movs	r2, #40	; 0x28
 8005400:	210c      	movs	r1, #12
 8005402:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005406:	f7fb fac7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 800540a:	2332      	movs	r3, #50	; 0x32
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	f44f 739a 	mov.w	r3, #308	; 0x134
 8005412:	2228      	movs	r2, #40	; 0x28
 8005414:	21a8      	movs	r1, #168	; 0xa8
 8005416:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800541a:	f7fb fabd 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bd90      	pop	{r4, r7, pc}
 8005426:	bf00      	nop
 8005428:	82082083 	.word	0x82082083

0800542c <Display_time>:

void Display_time(time_t time_val)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af02      	add	r7, sp, #8
 8005432:	463b      	mov	r3, r7
 8005434:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005438:	883b      	ldrh	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d076      	beq.n	800552c <Display_time+0x100>
 800543e:	78bb      	ldrb	r3, [r7, #2]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d073      	beq.n	800552c <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8005444:	793b      	ldrb	r3, [r7, #4]
 8005446:	2b09      	cmp	r3, #9
 8005448:	d81e      	bhi.n	8005488 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 800544a:	2302      	movs	r3, #2
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <Display_time+0x108>)
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005458:	2101      	movs	r1, #1
 800545a:	f240 100f 	movw	r0, #271	; 0x10f
 800545e:	f7fb fb3d 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005462:	793b      	ldrb	r3, [r7, #4]
 8005464:	220a      	movs	r2, #10
 8005466:	4934      	ldr	r1, [pc, #208]	; (8005538 <Display_time+0x10c>)
 8005468:	4618      	mov	r0, r3
 800546a:	f007 ff0b 	bl	800d284 <itoa>
 800546e:	4603      	mov	r3, r0
 8005470:	2202      	movs	r2, #2
 8005472:	9201      	str	r2, [sp, #4]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800547c:	2101      	movs	r1, #1
 800547e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8005482:	f7fb fb2b 	bl	8000adc <ILI9341_Draw_String>
 8005486:	e011      	b.n	80054ac <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005488:	793b      	ldrb	r3, [r7, #4]
 800548a:	220a      	movs	r2, #10
 800548c:	492a      	ldr	r1, [pc, #168]	; (8005538 <Display_time+0x10c>)
 800548e:	4618      	mov	r0, r3
 8005490:	f007 fef8 	bl	800d284 <itoa>
 8005494:	4603      	mov	r3, r0
 8005496:	2202      	movs	r2, #2
 8005498:	9201      	str	r2, [sp, #4]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2300      	movs	r3, #0
 800549e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054a2:	2101      	movs	r1, #1
 80054a4:	f240 100f 	movw	r0, #271	; 0x10f
 80054a8:	f7fb fb18 	bl	8000adc <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80054ac:	2302      	movs	r3, #2
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	4b22      	ldr	r3, [pc, #136]	; (800553c <Display_time+0x110>)
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ba:	2101      	movs	r1, #1
 80054bc:	f240 101f 	movw	r0, #287	; 0x11f
 80054c0:	f7fb fb0c 	bl	8000adc <ILI9341_Draw_String>

		if(time_val.minute < 10)
 80054c4:	797b      	ldrb	r3, [r7, #5]
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	d81e      	bhi.n	8005508 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 80054ca:	2302      	movs	r3, #2
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	4b19      	ldr	r3, [pc, #100]	; (8005534 <Display_time+0x108>)
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d8:	2101      	movs	r1, #1
 80054da:	f240 1027 	movw	r0, #295	; 0x127
 80054de:	f7fb fafd 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80054e2:	797b      	ldrb	r3, [r7, #5]
 80054e4:	220a      	movs	r2, #10
 80054e6:	4914      	ldr	r1, [pc, #80]	; (8005538 <Display_time+0x10c>)
 80054e8:	4618      	mov	r0, r3
 80054ea:	f007 fecb 	bl	800d284 <itoa>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2202      	movs	r2, #2
 80054f2:	9201      	str	r2, [sp, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2300      	movs	r3, #0
 80054f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054fc:	2101      	movs	r1, #1
 80054fe:	f44f 7098 	mov.w	r0, #304	; 0x130
 8005502:	f7fb faeb 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 8005506:	e011      	b.n	800552c <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005508:	797b      	ldrb	r3, [r7, #5]
 800550a:	220a      	movs	r2, #10
 800550c:	490a      	ldr	r1, [pc, #40]	; (8005538 <Display_time+0x10c>)
 800550e:	4618      	mov	r0, r3
 8005510:	f007 feb8 	bl	800d284 <itoa>
 8005514:	4603      	mov	r3, r0
 8005516:	2202      	movs	r2, #2
 8005518:	9201      	str	r2, [sp, #4]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2300      	movs	r3, #0
 800551e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005522:	2101      	movs	r1, #1
 8005524:	f240 1027 	movw	r0, #295	; 0x127
 8005528:	f7fb fad8 	bl	8000adc <ILI9341_Draw_String>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	0800e430 	.word	0x0800e430
 8005538:	20006d8c 	.word	0x20006d8c
 800553c:	0800e4bc 	.word	0x0800e4bc

08005540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <MX_DMA_Init+0x3c>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	4a0b      	ldr	r2, [pc, #44]	; (800557c <MX_DMA_Init+0x3c>)
 8005550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005554:	6313      	str	r3, [r2, #48]	; 0x30
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <MX_DMA_Init+0x3c>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	200f      	movs	r0, #15
 8005568:	f001 ff95 	bl	8007496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800556c:	200f      	movs	r0, #15
 800556e:	f001 ffae 	bl	80074ce <HAL_NVIC_EnableIRQ>

}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800

08005580 <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 8005584:	bf00      	nop
 8005586:	f001 fe7b 	bl	8007280 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <eeprom_wait+0x1c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b14      	cmp	r3, #20
 8005594:	d9f7      	bls.n	8005586 <eeprom_wait+0x6>
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20006e50 	.word	0x20006e50

080055a0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af04      	add	r7, sp, #16
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80055ac:	f7ff ffe8 	bl	8005580 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80055bc:	9102      	str	r1, [sp, #8]
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2302      	movs	r3, #2
 80055c6:	21a0      	movs	r1, #160	; 0xa0
 80055c8:	4803      	ldr	r0, [pc, #12]	; (80055d8 <eeprom_read+0x38>)
 80055ca:	f002 fec1 	bl	8008350 <HAL_I2C_Mem_Read>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20006e54 	.word	0x20006e54

080055dc <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80055e8:	f7ff ffca 	bl	8005580 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80055f8:	9102      	str	r1, [sp, #8]
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2302      	movs	r3, #2
 8005602:	21a0      	movs	r1, #160	; 0xa0
 8005604:	4807      	ldr	r0, [pc, #28]	; (8005624 <eeprom_write+0x48>)
 8005606:	f002 fda9 	bl	800815c <HAL_I2C_Mem_Write>
 800560a:	4603      	mov	r3, r0
 800560c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800560e:	f001 fe37 	bl	8007280 <HAL_GetTick>
 8005612:	4603      	mov	r3, r0
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <eeprom_write+0x4c>)
 8005616:	6013      	str	r3, [r2, #0]

    return rc;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20006e54 	.word	0x20006e54
 8005628:	20006e50 	.word	0x20006e50

0800562c <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b092      	sub	sp, #72	; 0x48
 8005630:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 8005632:	2101      	movs	r1, #1
 8005634:	4829      	ldr	r0, [pc, #164]	; (80056dc <eeprom_clear_scanning_data+0xb0>)
 8005636:	f7fe f923 	bl	8003880 <send_debug_msg>

	 uint8_t clear_page_sequence[64];

	 for (uint8_t i = 0; i < 64; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005640:	e00b      	b.n	800565a <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 8005642:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005646:	3348      	adds	r3, #72	; 0x48
 8005648:	443b      	add	r3, r7
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	f803 2c44 	strb.w	r2, [r3, #-68]
	 for (uint8_t i = 0; i < 64; i++)
 8005650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005654:	3301      	adds	r3, #1
 8005656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800565a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800565e:	2b3f      	cmp	r3, #63	; 0x3f
 8005660:	d9ef      	bls.n	8005642 <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	2240      	movs	r2, #64	; 0x40
 8005666:	4619      	mov	r1, r3
 8005668:	f44f 7080 	mov.w	r0, #256	; 0x100
 800566c:	f7ff ffb6 	bl	80055dc <eeprom_write>


	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005676:	e00e      	b.n	8005696 <eeprom_clear_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 8005678:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800567c:	3305      	adds	r3, #5
 800567e:	019b      	lsls	r3, r3, #6
 8005680:	4618      	mov	r0, r3
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	2240      	movs	r2, #64	; 0x40
 8005686:	4619      	mov	r1, r3
 8005688:	f7ff ffa8 	bl	80055dc <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 800568c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005690:	3301      	adds	r3, #1
 8005692:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005696:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800569a:	2b09      	cmp	r3, #9
 800569c:	d9ec      	bls.n	8005678 <eeprom_clear_scanning_data+0x4c>
	}

	//clear services list
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80056a4:	e00e      	b.n	80056c4 <eeprom_clear_scanning_data+0x98>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80056a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80056aa:	330f      	adds	r3, #15
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	4618      	mov	r0, r3
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	4619      	mov	r1, r3
 80056b6:	f7ff ff91 	bl	80055dc <eeprom_write>
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 80056ba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80056be:	3301      	adds	r3, #1
 80056c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80056c4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80056c8:	2b63      	cmp	r3, #99	; 0x63
 80056ca:	d9ec      	bls.n	80056a6 <eeprom_clear_scanning_data+0x7a>
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 80056cc:	2101      	movs	r1, #1
 80056ce:	4804      	ldr	r0, [pc, #16]	; (80056e0 <eeprom_clear_scanning_data+0xb4>)
 80056d0:	f7fe f8d6 	bl	8003880 <send_debug_msg>
}
 80056d4:	bf00      	nop
 80056d6:	3748      	adds	r7, #72	; 0x48
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	0800e580 	.word	0x0800e580
 80056e0:	0800e5a0 	.word	0x0800e5a0

080056e4 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	461a      	mov	r2, r3
 80056f0:	460b      	mov	r3, r1
 80056f2:	72fb      	strb	r3, [r7, #11]
 80056f4:	4613      	mov	r3, r2
 80056f6:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 80056f8:	2101      	movs	r1, #1
 80056fa:	4824      	ldr	r0, [pc, #144]	; (800578c <eeprom_save_scanning_data+0xa8>)
 80056fc:	f7fe f8c0 	bl	8003880 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8005700:	f107 030a 	add.w	r3, r7, #10
 8005704:	2201      	movs	r2, #1
 8005706:	4619      	mov	r1, r3
 8005708:	f240 1005 	movw	r0, #261	; 0x105
 800570c:	f7ff ff66 	bl	80055dc <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8005710:	f107 030b 	add.w	r3, r7, #11
 8005714:	2201      	movs	r2, #1
 8005716:	4619      	mov	r1, r3
 8005718:	f44f 7083 	mov.w	r0, #262	; 0x106
 800571c:	f7ff ff5e 	bl	80055dc <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005720:	2300      	movs	r3, #0
 8005722:	75fb      	strb	r3, [r7, #23]
 8005724:	e00e      	b.n	8005744 <eeprom_save_scanning_data+0x60>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	3305      	adds	r3, #5
 800572a:	019b      	lsls	r3, r3, #6
 800572c:	4618      	mov	r0, r3
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	015b      	lsls	r3, r3, #5
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	2220      	movs	r2, #32
 8005738:	4619      	mov	r1, r3
 800573a:	f7ff ff4f 	bl	80055dc <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	3301      	adds	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
 8005744:	7abb      	ldrb	r3, [r7, #10]
 8005746:	7dfa      	ldrb	r2, [r7, #23]
 8005748:	429a      	cmp	r2, r3
 800574a:	d3ec      	bcc.n	8005726 <eeprom_save_scanning_data+0x42>
	}

	//save services
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 800574c:	2300      	movs	r3, #0
 800574e:	75bb      	strb	r3, [r7, #22]
 8005750:	e010      	b.n	8005774 <eeprom_save_scanning_data+0x90>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE, &_services_list[services_index], sizeof(dab_service_t));
 8005752:	7dbb      	ldrb	r3, [r7, #22]
 8005754:	330f      	adds	r3, #15
 8005756:	019b      	lsls	r3, r3, #6
 8005758:	4618      	mov	r0, r3
 800575a:	7dbb      	ldrb	r3, [r7, #22]
 800575c:	2234      	movs	r2, #52	; 0x34
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	2234      	movs	r2, #52	; 0x34
 8005768:	4619      	mov	r1, r3
 800576a:	f7ff ff37 	bl	80055dc <eeprom_write>
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 800576e:	7dbb      	ldrb	r3, [r7, #22]
 8005770:	3301      	adds	r3, #1
 8005772:	75bb      	strb	r3, [r7, #22]
 8005774:	7afb      	ldrb	r3, [r7, #11]
 8005776:	7dba      	ldrb	r2, [r7, #22]
 8005778:	429a      	cmp	r2, r3
 800577a:	d3ea      	bcc.n	8005752 <eeprom_save_scanning_data+0x6e>
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 800577c:	2101      	movs	r1, #1
 800577e:	4804      	ldr	r0, [pc, #16]	; (8005790 <eeprom_save_scanning_data+0xac>)
 8005780:	f7fe f87e 	bl	8003880 <send_debug_msg>
}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	0800e5ac 	.word	0x0800e5ac
 8005790:	0800e5c8 	.word	0x0800e5c8

08005794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	; 0x30
 8005798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579a:	f107 031c 	add.w	r3, r7, #28
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	4b6c      	ldr	r3, [pc, #432]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4a6b      	ldr	r2, [pc, #428]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ba:	4b69      	ldr	r3, [pc, #420]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	4b65      	ldr	r3, [pc, #404]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4a64      	ldr	r2, [pc, #400]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6313      	str	r3, [r2, #48]	; 0x30
 80057d6:	4b62      	ldr	r3, [pc, #392]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	4b5e      	ldr	r3, [pc, #376]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	4a5d      	ldr	r2, [pc, #372]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	6313      	str	r3, [r2, #48]	; 0x30
 80057f2:	4b5b      	ldr	r3, [pc, #364]	; (8005960 <MX_GPIO_Init+0x1cc>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	4b57      	ldr	r3, [pc, #348]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4a56      	ldr	r2, [pc, #344]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	6313      	str	r3, [r2, #48]	; 0x30
 800580e:	4b54      	ldr	r3, [pc, #336]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	4b50      	ldr	r3, [pc, #320]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	4a4f      	ldr	r2, [pc, #316]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005824:	f043 0310 	orr.w	r3, r3, #16
 8005828:	6313      	str	r3, [r2, #48]	; 0x30
 800582a:	4b4d      	ldr	r3, [pc, #308]	; (8005960 <MX_GPIO_Init+0x1cc>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	4b49      	ldr	r3, [pc, #292]	; (8005960 <MX_GPIO_Init+0x1cc>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4a48      	ldr	r2, [pc, #288]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005840:	f043 0308 	orr.w	r3, r3, #8
 8005844:	6313      	str	r3, [r2, #48]	; 0x30
 8005846:	4b46      	ldr	r3, [pc, #280]	; (8005960 <MX_GPIO_Init+0x1cc>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8005852:	2200      	movs	r2, #0
 8005854:	2130      	movs	r1, #48	; 0x30
 8005856:	4843      	ldr	r0, [pc, #268]	; (8005964 <MX_GPIO_Init+0x1d0>)
 8005858:	f002 fb22 	bl	8007ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 800585c:	2200      	movs	r2, #0
 800585e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005862:	4841      	ldr	r0, [pc, #260]	; (8005968 <MX_GPIO_Init+0x1d4>)
 8005864:	f002 fb1c 	bl	8007ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8005868:	2200      	movs	r2, #0
 800586a:	f24f 7180 	movw	r1, #63360	; 0xf780
 800586e:	483f      	ldr	r0, [pc, #252]	; (800596c <MX_GPIO_Init+0x1d8>)
 8005870:	f002 fb16 	bl	8007ea0 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8005874:	2200      	movs	r2, #0
 8005876:	2128      	movs	r1, #40	; 0x28
 8005878:	483d      	ldr	r0, [pc, #244]	; (8005970 <MX_GPIO_Init+0x1dc>)
 800587a:	f002 fb11 	bl	8007ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 800587e:	2310      	movs	r3, #16
 8005880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005882:	2300      	movs	r3, #0
 8005884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 800588a:	f107 031c 	add.w	r3, r7, #28
 800588e:	4619      	mov	r1, r3
 8005890:	4838      	ldr	r0, [pc, #224]	; (8005974 <MX_GPIO_Init+0x1e0>)
 8005892:	f002 f951 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8005896:	2330      	movs	r3, #48	; 0x30
 8005898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800589a:	2301      	movs	r3, #1
 800589c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058a2:	2302      	movs	r3, #2
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a6:	f107 031c 	add.w	r3, r7, #28
 80058aa:	4619      	mov	r1, r3
 80058ac:	482d      	ldr	r0, [pc, #180]	; (8005964 <MX_GPIO_Init+0x1d0>)
 80058ae:	f002 f943 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 80058b2:	2311      	movs	r3, #17
 80058b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058b6:	2300      	movs	r3, #0
 80058b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058be:	f107 031c 	add.w	r3, r7, #28
 80058c2:	4619      	mov	r1, r3
 80058c4:	482a      	ldr	r0, [pc, #168]	; (8005970 <MX_GPIO_Init+0x1dc>)
 80058c6:	f002 f937 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80058ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058d0:	2301      	movs	r3, #1
 80058d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d8:	2300      	movs	r3, #0
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80058dc:	f107 031c 	add.w	r3, r7, #28
 80058e0:	4619      	mov	r1, r3
 80058e2:	4821      	ldr	r0, [pc, #132]	; (8005968 <MX_GPIO_Init+0x1d4>)
 80058e4:	f002 f928 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 80058e8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80058ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058ee:	2301      	movs	r3, #1
 80058f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058f6:	2302      	movs	r3, #2
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058fa:	f107 031c 	add.w	r3, r7, #28
 80058fe:	4619      	mov	r1, r3
 8005900:	481a      	ldr	r0, [pc, #104]	; (800596c <MX_GPIO_Init+0x1d8>)
 8005902:	f002 f919 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005906:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800590a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800590c:	2301      	movs	r3, #1
 800590e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005910:	2300      	movs	r3, #0
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005914:	2300      	movs	r3, #0
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005918:	f107 031c 	add.w	r3, r7, #28
 800591c:	4619      	mov	r1, r3
 800591e:	4813      	ldr	r0, [pc, #76]	; (800596c <MX_GPIO_Init+0x1d8>)
 8005920:	f002 f90a 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005928:	2300      	movs	r3, #0
 800592a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005930:	f107 031c 	add.w	r3, r7, #28
 8005934:	4619      	mov	r1, r3
 8005936:	480d      	ldr	r0, [pc, #52]	; (800596c <MX_GPIO_Init+0x1d8>)
 8005938:	f002 f8fe 	bl	8007b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 800593c:	2328      	movs	r3, #40	; 0x28
 800593e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005940:	2301      	movs	r3, #1
 8005942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005948:	2302      	movs	r3, #2
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4619      	mov	r1, r3
 8005952:	4807      	ldr	r0, [pc, #28]	; (8005970 <MX_GPIO_Init+0x1dc>)
 8005954:	f002 f8f0 	bl	8007b38 <HAL_GPIO_Init>

}
 8005958:	bf00      	nop
 800595a:	3730      	adds	r7, #48	; 0x30
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40023800 	.word	0x40023800
 8005964:	40020800 	.word	0x40020800
 8005968:	40021000 	.word	0x40021000
 800596c:	40020c00 	.word	0x40020c00
 8005970:	40020400 	.word	0x40020400
 8005974:	40020000 	.word	0x40020000

08005978 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <MX_I2C1_Init+0x50>)
 800597e:	4a13      	ldr	r2, [pc, #76]	; (80059cc <MX_I2C1_Init+0x54>)
 8005980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005982:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <MX_I2C1_Init+0x50>)
 8005984:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <MX_I2C1_Init+0x58>)
 8005986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <MX_I2C1_Init+0x50>)
 800598a:	2200      	movs	r2, #0
 800598c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800598e:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <MX_I2C1_Init+0x50>)
 8005990:	2200      	movs	r2, #0
 8005992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <MX_I2C1_Init+0x50>)
 8005996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800599a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <MX_I2C1_Init+0x50>)
 800599e:	2200      	movs	r2, #0
 80059a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <MX_I2C1_Init+0x50>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059a8:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <MX_I2C1_Init+0x50>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <MX_I2C1_Init+0x50>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059b4:	4804      	ldr	r0, [pc, #16]	; (80059c8 <MX_I2C1_Init+0x50>)
 80059b6:	f002 fa8d 	bl	8007ed4 <HAL_I2C_Init>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80059c0:	f000 f982 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20006e54 	.word	0x20006e54
 80059cc:	40005400 	.word	0x40005400
 80059d0:	000186a0 	.word	0x000186a0

080059d4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <MX_I2C3_Init+0x50>)
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <MX_I2C3_Init+0x54>)
 80059dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <MX_I2C3_Init+0x50>)
 80059e0:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <MX_I2C3_Init+0x58>)
 80059e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <MX_I2C3_Init+0x50>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <MX_I2C3_Init+0x50>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80059f0:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <MX_I2C3_Init+0x50>)
 80059f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <MX_I2C3_Init+0x50>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <MX_I2C3_Init+0x50>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <MX_I2C3_Init+0x50>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <MX_I2C3_Init+0x50>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005a10:	4804      	ldr	r0, [pc, #16]	; (8005a24 <MX_I2C3_Init+0x50>)
 8005a12:	f002 fa5f 	bl	8007ed4 <HAL_I2C_Init>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005a1c:	f000 f954 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20006ea8 	.word	0x20006ea8
 8005a28:	40005c00 	.word	0x40005c00
 8005a2c:	000186a0 	.word	0x000186a0

08005a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 031c 	add.w	r3, r7, #28
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a4a      	ldr	r2, [pc, #296]	; (8005b78 <HAL_I2C_MspInit+0x148>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d12c      	bne.n	8005aac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	4b49      	ldr	r3, [pc, #292]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4a48      	ldr	r2, [pc, #288]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	6313      	str	r3, [r2, #48]	; 0x30
 8005a62:	4b46      	ldr	r3, [pc, #280]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005a6e:	23c0      	movs	r3, #192	; 0xc0
 8005a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a72:	2312      	movs	r3, #18
 8005a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a7e:	2304      	movs	r3, #4
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a82:	f107 031c 	add.w	r3, r7, #28
 8005a86:	4619      	mov	r1, r3
 8005a88:	483d      	ldr	r0, [pc, #244]	; (8005b80 <HAL_I2C_MspInit+0x150>)
 8005a8a:	f002 f855 	bl	8007b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	4a39      	ldr	r2, [pc, #228]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9e:	4b37      	ldr	r3, [pc, #220]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005aaa:	e060      	b.n	8005b6e <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a34      	ldr	r2, [pc, #208]	; (8005b84 <HAL_I2C_MspInit+0x154>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d15b      	bne.n	8005b6e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac6:	4b2d      	ldr	r3, [pc, #180]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005af4:	2312      	movs	r3, #18
 8005af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005afc:	2303      	movs	r3, #3
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b00:	2304      	movs	r3, #4
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005b04:	f107 031c 	add.w	r3, r7, #28
 8005b08:	4619      	mov	r1, r3
 8005b0a:	481f      	ldr	r0, [pc, #124]	; (8005b88 <HAL_I2C_MspInit+0x158>)
 8005b0c:	f002 f814 	bl	8007b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b16:	2312      	movs	r3, #18
 8005b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b22:	2304      	movs	r3, #4
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005b26:	f107 031c 	add.w	r3, r7, #28
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4817      	ldr	r0, [pc, #92]	; (8005b8c <HAL_I2C_MspInit+0x15c>)
 8005b2e:	f002 f803 	bl	8007b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b40:	6413      	str	r3, [r2, #64]	; 0x40
 8005b42:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <HAL_I2C_MspInit+0x14c>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2100      	movs	r1, #0
 8005b52:	2048      	movs	r0, #72	; 0x48
 8005b54:	f001 fc9f 	bl	8007496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005b58:	2048      	movs	r0, #72	; 0x48
 8005b5a:	f001 fcb8 	bl	80074ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	2049      	movs	r0, #73	; 0x49
 8005b64:	f001 fc97 	bl	8007496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005b68:	2049      	movs	r0, #73	; 0x49
 8005b6a:	f001 fcb0 	bl	80074ce <HAL_NVIC_EnableIRQ>
}
 8005b6e:	bf00      	nop
 8005b70:	3730      	adds	r7, #48	; 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40005400 	.word	0x40005400
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40020400 	.word	0x40020400
 8005b84:	40005c00 	.word	0x40005c00
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020000 	.word	0x40020000

08005b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b94:	f001 fb0e 	bl	80071b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b98:	f000 f82c 	bl	8005bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b9c:	f7ff fdfa 	bl	8005794 <MX_GPIO_Init>
  MX_DMA_Init();
 8005ba0:	f7ff fcce 	bl	8005540 <MX_DMA_Init>
  MX_I2C1_Init();
 8005ba4:	f7ff fee8 	bl	8005978 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005ba8:	f7ff ff14 	bl	80059d4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005bac:	f000 f892 	bl	8005cd4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005bb0:	f000 f8c6 	bl	8005d40 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005bb4:	f000 fe84 	bl	80068c0 <MX_TIM3_Init>
  MX_UART5_Init();
 8005bb8:	f001 f9de 	bl	8006f78 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005bbc:	f001 fa06 	bl	8006fcc <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005bc0:	f000 fed8 	bl	8006974 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005bc4:	f000 fefa 	bl	80069bc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005bc8:	2101      	movs	r1, #1
 8005bca:	4808      	ldr	r0, [pc, #32]	; (8005bec <main+0x5c>)
 8005bcc:	f7fd fe58 	bl	8003880 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005bd0:	4807      	ldr	r0, [pc, #28]	; (8005bf0 <main+0x60>)
 8005bd2:	f006 f9c7 	bl	800bf64 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005bd6:	f7fa fc8b 	bl	80004f0 <ILI9341_Init>

  Display_booting_screen();
 8005bda:	f7fd fe8b 	bl	80038f4 <Display_booting_screen>


  Si468x_dab_init();
 8005bde:	f7fb fa47 	bl	8001070 <Si468x_dab_init>
  restore_from_eeprom();
 8005be2:	f7fd fae7 	bl	80031b4 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005be6:	f000 f999 	bl	8005f1c <state_machine>
 8005bea:	e7fc      	b.n	8005be6 <main+0x56>
 8005bec:	0800e7f0 	.word	0x0800e7f0
 8005bf0:	20007100 	.word	0x20007100

08005bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b094      	sub	sp, #80	; 0x50
 8005bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bfa:	f107 0320 	add.w	r3, r7, #32
 8005bfe:	2230      	movs	r2, #48	; 0x30
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f007 fb40 	bl	800d288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c08:	f107 030c 	add.w	r3, r7, #12
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <SystemClock_Config+0xcc>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <SystemClock_Config+0xcc>)
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6413      	str	r3, [r2, #64]	; 0x40
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <SystemClock_Config+0xcc>)
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <SystemClock_Config+0xd0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <SystemClock_Config+0xd0>)
 8005c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <SystemClock_Config+0xd0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005c64:	2304      	movs	r3, #4
 8005c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8005c68:	23f0      	movs	r3, #240	; 0xf0
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005c70:	2304      	movs	r3, #4
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c74:	f107 0320 	add.w	r3, r7, #32
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f004 fdc5 	bl	800a808 <HAL_RCC_OscConfig>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005c84:	f000 f820 	bl	8005cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c88:	230f      	movs	r3, #15
 8005c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	2105      	movs	r1, #5
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f005 f826 	bl	800acf8 <HAL_RCC_ClockConfig>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005cb2:	f000 f809 	bl	8005cc8 <Error_Handler>
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3750      	adds	r7, #80	; 0x50
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	40007000 	.word	0x40007000

08005cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ccc:	b672      	cpsid	i
}
 8005cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <Error_Handler+0x8>
	...

08005cd4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005cd8:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <MX_SPI1_Init+0x68>)
 8005cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d08:	2220      	movs	r2, #32
 8005d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005d1e:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d20:	220a      	movs	r2, #10
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d24:	4804      	ldr	r0, [pc, #16]	; (8005d38 <MX_SPI1_Init+0x64>)
 8005d26:	f005 fa07 	bl	800b138 <HAL_SPI_Init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005d30:	f7ff ffca 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20006efc 	.word	0x20006efc
 8005d3c:	40013000 	.word	0x40013000

08005d40 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005d44:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <MX_SPI2_Init+0x68>)
 8005d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d58:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005d90:	4804      	ldr	r0, [pc, #16]	; (8005da4 <MX_SPI2_Init+0x64>)
 8005d92:	f005 f9d1 	bl	800b138 <HAL_SPI_Init>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005d9c:	f7ff ff94 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20006f54 	.word	0x20006f54
 8005da8:	40003800 	.word	0x40003800

08005dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db4:	f107 031c 	add.w	r3, r7, #28
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a4d      	ldr	r2, [pc, #308]	; (8005f00 <HAL_SPI_MspInit+0x154>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d12c      	bne.n	8005e28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dde:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	4b45      	ldr	r3, [pc, #276]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	4a44      	ldr	r2, [pc, #272]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dfa:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005e06:	23e0      	movs	r3, #224	; 0xe0
 8005e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e12:	2303      	movs	r3, #3
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005e16:	2305      	movs	r3, #5
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e1a:	f107 031c 	add.w	r3, r7, #28
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4839      	ldr	r0, [pc, #228]	; (8005f08 <HAL_SPI_MspInit+0x15c>)
 8005e22:	f001 fe89 	bl	8007b38 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005e26:	e066      	b.n	8005ef6 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a37      	ldr	r2, [pc, #220]	; (8005f0c <HAL_SPI_MspInit+0x160>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d161      	bne.n	8005ef6 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	4b33      	ldr	r3, [pc, #204]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4a32      	ldr	r2, [pc, #200]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e40:	6413      	str	r3, [r2, #64]	; 0x40
 8005e42:	4b30      	ldr	r3, [pc, #192]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	4b2c      	ldr	r3, [pc, #176]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005e58:	f043 0302 	orr.w	r3, r3, #2
 8005e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5e:	4b29      	ldr	r3, [pc, #164]	; (8005f04 <HAL_SPI_MspInit+0x158>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8005e6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e70:	2302      	movs	r3, #2
 8005e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e7c:	2305      	movs	r3, #5
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e80:	f107 031c 	add.w	r3, r7, #28
 8005e84:	4619      	mov	r1, r3
 8005e86:	4822      	ldr	r0, [pc, #136]	; (8005f10 <HAL_SPI_MspInit+0x164>)
 8005e88:	f001 fe56 	bl	8007b38 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005e8c:	4b21      	ldr	r3, [pc, #132]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005e8e:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <HAL_SPI_MspInit+0x16c>)
 8005e90:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005e92:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005e9a:	2240      	movs	r2, #64	; 0x40
 8005e9c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eaa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eb2:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005eb8:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005eca:	4812      	ldr	r0, [pc, #72]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ecc:	f001 fb1a 	bl	8007504 <HAL_DMA_Init>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8005ed6:	f7ff fef7 	bl	8005cc8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0d      	ldr	r2, [pc, #52]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ede:	649a      	str	r2, [r3, #72]	; 0x48
 8005ee0:	4a0c      	ldr	r2, [pc, #48]	; (8005f14 <HAL_SPI_MspInit+0x168>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	2024      	movs	r0, #36	; 0x24
 8005eec:	f001 fad3 	bl	8007496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005ef0:	2024      	movs	r0, #36	; 0x24
 8005ef2:	f001 faec 	bl	80074ce <HAL_NVIC_EnableIRQ>
}
 8005ef6:	bf00      	nop
 8005ef8:	3730      	adds	r7, #48	; 0x30
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40013000 	.word	0x40013000
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40020000 	.word	0x40020000
 8005f0c:	40003800 	.word	0x40003800
 8005f10:	40020400 	.word	0x40020400
 8005f14:	20006fac 	.word	0x20006fac
 8005f18:	40026070 	.word	0x40026070

08005f1c <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 8005f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1e:	b097      	sub	sp, #92	; 0x5c
 8005f20:	af06      	add	r7, sp, #24
	if(state_change_done)
 8005f22:	4b64      	ldr	r3, [pc, #400]	; (80060b4 <state_machine+0x198>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 8005f2a:	f000 fe0d 	bl	8006b48 <Touch_read>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4a61      	ldr	r2, [pc, #388]	; (80060b8 <state_machine+0x19c>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e005      	b.n	8005f42 <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 8005f36:	4b60      	ldr	r3, [pc, #384]	; (80060b8 <state_machine+0x19c>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8005f3c:	4b5e      	ldr	r3, [pc, #376]	; (80060b8 <state_machine+0x19c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 8005f42:	4c5e      	ldr	r4, [pc, #376]	; (80060bc <state_machine+0x1a0>)
 8005f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fd fc7d 	bl	8003848 <get_dab_management>
 8005f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 8005f58:	f7fd fc88 	bl	800386c <get_dls_label>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4a58      	ldr	r2, [pc, #352]	; (80060c0 <state_machine+0x1a4>)
 8005f60:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 8005f62:	f7fd f815 	bl	8002f90 <Si468x_dab_get_time>


	switch(system_state)
 8005f66:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <state_machine+0x1a8>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	f200 83e0 	bhi.w	8006730 <state_machine+0x814>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <state_machine+0x5c>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f8d 	.word	0x08005f8d
 8005f7c:	080060dd 	.word	0x080060dd
 8005f80:	08006545 	.word	0x08006545
 8005f84:	08006475 	.word	0x08006475
 8005f88:	080065b9 	.word	0x080065b9
	{
	case main_screen:

		if(!state_change_done)
 8005f8c:	4b49      	ldr	r3, [pc, #292]	; (80060b4 <state_machine+0x198>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d14e      	bne.n	8006032 <state_machine+0x116>
		{
			if(!dab_management_to_display.total_services)
 8005f94:	4b49      	ldr	r3, [pc, #292]	; (80060bc <state_machine+0x1a0>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <state_machine+0x88>
			{
				playing_state = not_playing;
 8005f9c:	4b4a      	ldr	r3, [pc, #296]	; (80060c8 <state_machine+0x1ac>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e028      	b.n	8005ff6 <state_machine+0xda>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 8005fa4:	f7fd fc3c 	bl	8003820 <get_dab_service_list>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4a48      	ldr	r2, [pc, #288]	; (80060cc <state_machine+0x1b0>)
 8005fac:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 8005fae:	f7fd fc41 	bl	8003834 <get_dab_ensemble_list>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4a46      	ldr	r2, [pc, #280]	; (80060d0 <state_machine+0x1b4>)
 8005fb6:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 8005fb8:	4b46      	ldr	r3, [pc, #280]	; (80060d4 <state_machine+0x1b8>)
 8005fba:	2232      	movs	r2, #50	; 0x32
 8005fbc:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 8005fbe:	e014      	b.n	8005fea <state_machine+0xce>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 8005fc0:	4c45      	ldr	r4, [pc, #276]	; (80060d8 <state_machine+0x1bc>)
 8005fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fc fd48 	bl	8002a5c <Si468x_dab_get_audio_info>
 8005fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <state_machine+0x1b8>)
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <state_machine+0x1b8>)
 8005fe0:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 8005fe2:	4b3c      	ldr	r3, [pc, #240]	; (80060d4 <state_machine+0x1b8>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <state_machine+0xd8>
				while(!dab_audio_info_to_display.audio_sample_rate)
 8005fea:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <state_machine+0x1bc>)
 8005fec:	885b      	ldrh	r3, [r3, #2]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0e6      	beq.n	8005fc0 <state_machine+0xa4>
 8005ff2:	e000      	b.n	8005ff6 <state_machine+0xda>
					{
						break;
 8005ff4:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 8005ff6:	f7fd fcef 	bl	80039d8 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 8005ffa:	4b34      	ldr	r3, [pc, #208]	; (80060cc <state_machine+0x1b0>)
 8005ffc:	681e      	ldr	r6, [r3, #0]
 8005ffe:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <state_machine+0x1b4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	4c2d      	ldr	r4, [pc, #180]	; (80060bc <state_machine+0x1a0>)
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <state_machine+0x1bc>)
 8006008:	ad02      	add	r5, sp, #8
 800600a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800600c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006010:	466a      	mov	r2, sp
 8006012:	f104 0308 	add.w	r3, r4, #8
 8006016:	e893 0003 	ldmia.w	r3, {r0, r1}
 800601a:	e882 0003 	stmia.w	r2, {r0, r1}
 800601e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4630      	mov	r0, r6
 8006026:	f7fd fd65 	bl	8003af4 <Display_main_screen_data>
			state_change_done = 1;
 800602a:	4b22      	ldr	r3, [pc, #136]	; (80060b4 <state_machine+0x198>)
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	e00d      	b.n	800604e <state_machine+0x132>
		}

		else
		{
			if(playing_state == playing)
 8006032:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <state_machine+0x1ac>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <state_machine+0x12e>
			{
				Si468x_dab_get_digital_service_data();
 800603a:	f7fc fea3 	bl	8002d84 <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 800603e:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <state_machine+0x1a4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fd feaa 	bl	8003d9c <Display_main_screen_dls>
 8006048:	e001      	b.n	800604e <state_machine+0x132>
			}
			else
			{
				Display_main_screen_empty();
 800604a:	f7fd fee3 	bl	8003e14 <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800604e:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <state_machine+0x19c>)
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	2b05      	cmp	r3, #5
 8006054:	d911      	bls.n	800607a <state_machine+0x15e>
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <state_machine+0x19c>)
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	2b9c      	cmp	r3, #156	; 0x9c
 800605c:	d80d      	bhi.n	800607a <state_machine+0x15e>
 800605e:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <state_machine+0x19c>)
 8006060:	885b      	ldrh	r3, [r3, #2]
 8006062:	2bc3      	cmp	r3, #195	; 0xc3
 8006064:	d909      	bls.n	800607a <state_machine+0x15e>
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <state_machine+0x19c>)
 8006068:	885b      	ldrh	r3, [r3, #2]
 800606a:	2bea      	cmp	r3, #234	; 0xea
 800606c:	d805      	bhi.n	800607a <state_machine+0x15e>
		{
			state_change_done = 0;
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <state_machine+0x198>)
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006074:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <state_machine+0x1a8>)
 8006076:	2204      	movs	r2, #4
 8006078:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800607a:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <state_machine+0x19c>)
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	2ba3      	cmp	r3, #163	; 0xa3
 8006080:	f240 8358 	bls.w	8006734 <state_machine+0x818>
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <state_machine+0x19c>)
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800608c:	f200 8352 	bhi.w	8006734 <state_machine+0x818>
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <state_machine+0x19c>)
 8006092:	885b      	ldrh	r3, [r3, #2]
 8006094:	2bc3      	cmp	r3, #195	; 0xc3
 8006096:	f240 834d 	bls.w	8006734 <state_machine+0x818>
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <state_machine+0x19c>)
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	2bea      	cmp	r3, #234	; 0xea
 80060a0:	f200 8348 	bhi.w	8006734 <state_machine+0x818>
		{
			state_change_done = 0;
 80060a4:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <state_machine+0x198>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <state_machine+0x1a8>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
		}

		break;
 80060b0:	e340      	b.n	8006734 <state_machine+0x818>
 80060b2:	bf00      	nop
 80060b4:	2000700d 	.word	0x2000700d
 80060b8:	20007014 	.word	0x20007014
 80060bc:	20007040 	.word	0x20007040
 80060c0:	20007068 	.word	0x20007068
 80060c4:	2000700c 	.word	0x2000700c
 80060c8:	20000150 	.word	0x20000150
 80060cc:	20007050 	.word	0x20007050
 80060d0:	20007054 	.word	0x20007054
 80060d4:	2000706e 	.word	0x2000706e
 80060d8:	20007058 	.word	0x20007058

	case services_list_screen:
		if(!state_change_done)
 80060dc:	4b7d      	ldr	r3, [pc, #500]	; (80062d4 <state_machine+0x3b8>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d114      	bne.n	800610e <state_machine+0x1f2>
		{
			services_list_to_display = get_dab_service_list();
 80060e4:	f7fd fb9c 	bl	8003820 <get_dab_service_list>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4a7b      	ldr	r2, [pc, #492]	; (80062d8 <state_machine+0x3bc>)
 80060ec:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 80060ee:	f7fd fef7 	bl	8003ee0 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80060f2:	4b7a      	ldr	r3, [pc, #488]	; (80062dc <state_machine+0x3c0>)
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	4b78      	ldr	r3, [pc, #480]	; (80062d8 <state_machine+0x3bc>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b79      	ldr	r3, [pc, #484]	; (80062e0 <state_machine+0x3c4>)
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	9200      	str	r2, [sp, #0]
 8006102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006104:	f7fd ffb0 	bl	8004068 <Display_stations_list_data>
			state_change_done = 1;
 8006108:	4b72      	ldr	r3, [pc, #456]	; (80062d4 <state_machine+0x3b8>)
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800610e:	4b75      	ldr	r3, [pc, #468]	; (80062e4 <state_machine+0x3c8>)
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d911      	bls.n	800613a <state_machine+0x21e>
 8006116:	4b73      	ldr	r3, [pc, #460]	; (80062e4 <state_machine+0x3c8>)
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	2b9c      	cmp	r3, #156	; 0x9c
 800611c:	d80d      	bhi.n	800613a <state_machine+0x21e>
 800611e:	4b71      	ldr	r3, [pc, #452]	; (80062e4 <state_machine+0x3c8>)
 8006120:	885b      	ldrh	r3, [r3, #2]
 8006122:	2bc3      	cmp	r3, #195	; 0xc3
 8006124:	d909      	bls.n	800613a <state_machine+0x21e>
 8006126:	4b6f      	ldr	r3, [pc, #444]	; (80062e4 <state_machine+0x3c8>)
 8006128:	885b      	ldrh	r3, [r3, #2]
 800612a:	2bea      	cmp	r3, #234	; 0xea
 800612c:	d805      	bhi.n	800613a <state_machine+0x21e>
		{
			state_change_done = 0;
 800612e:	4b69      	ldr	r3, [pc, #420]	; (80062d4 <state_machine+0x3b8>)
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006134:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <state_machine+0x3cc>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800613a:	4b6a      	ldr	r3, [pc, #424]	; (80062e4 <state_machine+0x3c8>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	2ba3      	cmp	r3, #163	; 0xa3
 8006140:	d912      	bls.n	8006168 <state_machine+0x24c>
 8006142:	4b68      	ldr	r3, [pc, #416]	; (80062e4 <state_machine+0x3c8>)
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800614a:	d80d      	bhi.n	8006168 <state_machine+0x24c>
 800614c:	4b65      	ldr	r3, [pc, #404]	; (80062e4 <state_machine+0x3c8>)
 800614e:	885b      	ldrh	r3, [r3, #2]
 8006150:	2bc3      	cmp	r3, #195	; 0xc3
 8006152:	d909      	bls.n	8006168 <state_machine+0x24c>
 8006154:	4b63      	ldr	r3, [pc, #396]	; (80062e4 <state_machine+0x3c8>)
 8006156:	885b      	ldrh	r3, [r3, #2]
 8006158:	2bea      	cmp	r3, #234	; 0xea
 800615a:	d805      	bhi.n	8006168 <state_machine+0x24c>
		{
			state_change_done = 0;
 800615c:	4b5d      	ldr	r3, [pc, #372]	; (80062d4 <state_machine+0x3b8>)
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8006162:	4b61      	ldr	r3, [pc, #388]	; (80062e8 <state_machine+0x3cc>)
 8006164:	2203      	movs	r2, #3
 8006166:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006168:	4b5e      	ldr	r3, [pc, #376]	; (80062e4 <state_machine+0x3c8>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006170:	d930      	bls.n	80061d4 <state_machine+0x2b8>
 8006172:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <state_machine+0x3c8>)
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800617a:	d82b      	bhi.n	80061d4 <state_machine+0x2b8>
 800617c:	4b59      	ldr	r3, [pc, #356]	; (80062e4 <state_machine+0x3c8>)
 800617e:	885b      	ldrh	r3, [r3, #2]
 8006180:	2b14      	cmp	r3, #20
 8006182:	d927      	bls.n	80061d4 <state_machine+0x2b8>
 8006184:	4b57      	ldr	r3, [pc, #348]	; (80062e4 <state_machine+0x3c8>)
 8006186:	885b      	ldrh	r3, [r3, #2]
 8006188:	2b65      	cmp	r3, #101	; 0x65
 800618a:	d823      	bhi.n	80061d4 <state_machine+0x2b8>
		{
			if(dab_management_to_display.total_services)
 800618c:	4b54      	ldr	r3, [pc, #336]	; (80062e0 <state_machine+0x3c4>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01f      	beq.n	80061d4 <state_machine+0x2b8>
			{
				srv_list_start_index--;
 8006194:	4b51      	ldr	r3, [pc, #324]	; (80062dc <state_machine+0x3c0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3b01      	subs	r3, #1
 800619a:	4a50      	ldr	r2, [pc, #320]	; (80062dc <state_machine+0x3c0>)
 800619c:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 800619e:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <state_machine+0x3c4>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	4b4d      	ldr	r3, [pc, #308]	; (80062dc <state_machine+0x3c0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	db03      	blt.n	80061b4 <state_machine+0x298>
 80061ac:	4b4b      	ldr	r3, [pc, #300]	; (80062dc <state_machine+0x3c0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	da04      	bge.n	80061be <state_machine+0x2a2>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 80061b4:	4b4a      	ldr	r3, [pc, #296]	; (80062e0 <state_machine+0x3c4>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	4a48      	ldr	r2, [pc, #288]	; (80062dc <state_machine+0x3c0>)
 80061bc:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <state_machine+0x3c0>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	4b45      	ldr	r3, [pc, #276]	; (80062d8 <state_machine+0x3bc>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <state_machine+0x3c4>)
 80061c8:	9201      	str	r2, [sp, #4]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	9200      	str	r2, [sp, #0]
 80061ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d0:	f7fd ff4a 	bl	8004068 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 80061d4:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <state_machine+0x3c8>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80061dc:	d92a      	bls.n	8006234 <state_machine+0x318>
 80061de:	4b41      	ldr	r3, [pc, #260]	; (80062e4 <state_machine+0x3c8>)
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80061e6:	d825      	bhi.n	8006234 <state_machine+0x318>
 80061e8:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <state_machine+0x3c8>)
 80061ea:	885b      	ldrh	r3, [r3, #2]
 80061ec:	2b6c      	cmp	r3, #108	; 0x6c
 80061ee:	d921      	bls.n	8006234 <state_machine+0x318>
 80061f0:	4b3c      	ldr	r3, [pc, #240]	; (80062e4 <state_machine+0x3c8>)
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	2bbd      	cmp	r3, #189	; 0xbd
 80061f6:	d81d      	bhi.n	8006234 <state_machine+0x318>
		{
			if(dab_management_to_display.total_services)
 80061f8:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <state_machine+0x3c4>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d019      	beq.n	8006234 <state_machine+0x318>
			{
				srv_list_start_index++;
 8006200:	4b36      	ldr	r3, [pc, #216]	; (80062dc <state_machine+0x3c0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3301      	adds	r3, #1
 8006206:	4a35      	ldr	r2, [pc, #212]	; (80062dc <state_machine+0x3c0>)
 8006208:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 800620a:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <state_machine+0x3c4>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	4b32      	ldr	r3, [pc, #200]	; (80062dc <state_machine+0x3c0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	dc02      	bgt.n	800621e <state_machine+0x302>
				{
					srv_list_start_index = 0;
 8006218:	4b30      	ldr	r3, [pc, #192]	; (80062dc <state_machine+0x3c0>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800621e:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <state_machine+0x3c0>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	4b2d      	ldr	r3, [pc, #180]	; (80062d8 <state_machine+0x3bc>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <state_machine+0x3c4>)
 8006228:	9201      	str	r2, [sp, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	9200      	str	r2, [sp, #0]
 800622e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006230:	f7fd ff1a 	bl	8004068 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <state_machine+0x3c8>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2b05      	cmp	r3, #5
 800623a:	d91f      	bls.n	800627c <state_machine+0x360>
 800623c:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <state_machine+0x3c8>)
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006244:	d81a      	bhi.n	800627c <state_machine+0x360>
 8006246:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <state_machine+0x3c8>)
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	2b14      	cmp	r3, #20
 800624c:	d916      	bls.n	800627c <state_machine+0x360>
 800624e:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <state_machine+0x3c8>)
 8006250:	885b      	ldrh	r3, [r3, #2]
 8006252:	2b31      	cmp	r3, #49	; 0x31
 8006254:	d812      	bhi.n	800627c <state_machine+0x360>
		{
			if(dab_management_to_display.total_services)
 8006256:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <state_machine+0x3c4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <state_machine+0x360>
			{
				state_change_done = 0;
 800625e:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <state_machine+0x3b8>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8006264:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <state_machine+0x3c0>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	4618      	mov	r0, r3
 800626c:	f7fc ff0c 	bl	8003088 <play_station>
				playing_state = playing;
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <state_machine+0x3d0>)
 8006272:	2201      	movs	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <state_machine+0x3cc>)
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <state_machine+0x3c8>)
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	2b05      	cmp	r3, #5
 8006282:	d943      	bls.n	800630c <state_machine+0x3f0>
 8006284:	4b17      	ldr	r3, [pc, #92]	; (80062e4 <state_machine+0x3c8>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800628c:	d83e      	bhi.n	800630c <state_machine+0x3f0>
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <state_machine+0x3c8>)
 8006290:	885b      	ldrh	r3, [r3, #2]
 8006292:	2b37      	cmp	r3, #55	; 0x37
 8006294:	d93a      	bls.n	800630c <state_machine+0x3f0>
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <state_machine+0x3c8>)
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	2b54      	cmp	r3, #84	; 0x54
 800629c:	d836      	bhi.n	800630c <state_machine+0x3f0>
		{
			if(dab_management_to_display.total_services)
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <state_machine+0x3c4>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d032      	beq.n	800630c <state_machine+0x3f0>
			{
				state_change_done = 0;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <state_machine+0x3b8>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <state_machine+0x3c0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	4a0b      	ldr	r2, [pc, #44]	; (80062e0 <state_machine+0x3c4>)
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	4293      	cmp	r3, r2
 80062b8:	db1a      	blt.n	80062f0 <state_machine+0x3d4>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <state_machine+0x3c0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <state_machine+0x3c4>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fc fedb 	bl	8003088 <play_station>
 80062d2:	e015      	b.n	8006300 <state_machine+0x3e4>
 80062d4:	2000700d 	.word	0x2000700d
 80062d8:	20007050 	.word	0x20007050
 80062dc:	20007010 	.word	0x20007010
 80062e0:	20007040 	.word	0x20007040
 80062e4:	20007014 	.word	0x20007014
 80062e8:	2000700c 	.word	0x2000700c
 80062ec:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 80062f0:	4b8d      	ldr	r3, [pc, #564]	; (8006528 <state_machine+0x60c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fc fec4 	bl	8003088 <play_station>
				}

				playing_state = playing;
 8006300:	4b8a      	ldr	r3, [pc, #552]	; (800652c <state_machine+0x610>)
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006306:	4b8a      	ldr	r3, [pc, #552]	; (8006530 <state_machine+0x614>)
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 800630c:	4b89      	ldr	r3, [pc, #548]	; (8006534 <state_machine+0x618>)
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	2b05      	cmp	r3, #5
 8006312:	d935      	bls.n	8006380 <state_machine+0x464>
 8006314:	4b87      	ldr	r3, [pc, #540]	; (8006534 <state_machine+0x618>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800631c:	d830      	bhi.n	8006380 <state_machine+0x464>
 800631e:	4b85      	ldr	r3, [pc, #532]	; (8006534 <state_machine+0x618>)
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	2b5a      	cmp	r3, #90	; 0x5a
 8006324:	d92c      	bls.n	8006380 <state_machine+0x464>
 8006326:	4b83      	ldr	r3, [pc, #524]	; (8006534 <state_machine+0x618>)
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	2b77      	cmp	r3, #119	; 0x77
 800632c:	d828      	bhi.n	8006380 <state_machine+0x464>
		{
			if(dab_management_to_display.total_services)
 800632e:	4b82      	ldr	r3, [pc, #520]	; (8006538 <state_machine+0x61c>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d024      	beq.n	8006380 <state_machine+0x464>
			{
				state_change_done = 0;
 8006336:	4b81      	ldr	r3, [pc, #516]	; (800653c <state_machine+0x620>)
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 800633c:	4b7a      	ldr	r3, [pc, #488]	; (8006528 <state_machine+0x60c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3302      	adds	r3, #2
 8006342:	4a7d      	ldr	r2, [pc, #500]	; (8006538 <state_machine+0x61c>)
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	4293      	cmp	r3, r2
 8006348:	db0c      	blt.n	8006364 <state_machine+0x448>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 800634a:	4b77      	ldr	r3, [pc, #476]	; (8006528 <state_machine+0x60c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	4b79      	ldr	r3, [pc, #484]	; (8006538 <state_machine+0x61c>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	3302      	adds	r3, #2
 800635a:	b2db      	uxtb	r3, r3
 800635c:	4618      	mov	r0, r3
 800635e:	f7fc fe93 	bl	8003088 <play_station>
 8006362:	e007      	b.n	8006374 <state_machine+0x458>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 8006364:	4b70      	ldr	r3, [pc, #448]	; (8006528 <state_machine+0x60c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3302      	adds	r3, #2
 800636c:	b2db      	uxtb	r3, r3
 800636e:	4618      	mov	r0, r3
 8006370:	f7fc fe8a 	bl	8003088 <play_station>
				}

				playing_state = playing;
 8006374:	4b6d      	ldr	r3, [pc, #436]	; (800652c <state_machine+0x610>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800637a:	4b6d      	ldr	r3, [pc, #436]	; (8006530 <state_machine+0x614>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 8006380:	4b6c      	ldr	r3, [pc, #432]	; (8006534 <state_machine+0x618>)
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	2b05      	cmp	r3, #5
 8006386:	d935      	bls.n	80063f4 <state_machine+0x4d8>
 8006388:	4b6a      	ldr	r3, [pc, #424]	; (8006534 <state_machine+0x618>)
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006390:	d830      	bhi.n	80063f4 <state_machine+0x4d8>
 8006392:	4b68      	ldr	r3, [pc, #416]	; (8006534 <state_machine+0x618>)
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	2b7d      	cmp	r3, #125	; 0x7d
 8006398:	d92c      	bls.n	80063f4 <state_machine+0x4d8>
 800639a:	4b66      	ldr	r3, [pc, #408]	; (8006534 <state_machine+0x618>)
 800639c:	885b      	ldrh	r3, [r3, #2]
 800639e:	2b9a      	cmp	r3, #154	; 0x9a
 80063a0:	d828      	bhi.n	80063f4 <state_machine+0x4d8>
		{
			if(dab_management_to_display.total_services)
 80063a2:	4b65      	ldr	r3, [pc, #404]	; (8006538 <state_machine+0x61c>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d024      	beq.n	80063f4 <state_machine+0x4d8>
			{
				state_change_done = 0;
 80063aa:	4b64      	ldr	r3, [pc, #400]	; (800653c <state_machine+0x620>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 80063b0:	4b5d      	ldr	r3, [pc, #372]	; (8006528 <state_machine+0x60c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3303      	adds	r3, #3
 80063b6:	4a60      	ldr	r2, [pc, #384]	; (8006538 <state_machine+0x61c>)
 80063b8:	7812      	ldrb	r2, [r2, #0]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	db0c      	blt.n	80063d8 <state_machine+0x4bc>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 80063be:	4b5a      	ldr	r3, [pc, #360]	; (8006528 <state_machine+0x60c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	4b5c      	ldr	r3, [pc, #368]	; (8006538 <state_machine+0x61c>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	3303      	adds	r3, #3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fc fe59 	bl	8003088 <play_station>
 80063d6:	e007      	b.n	80063e8 <state_machine+0x4cc>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 80063d8:	4b53      	ldr	r3, [pc, #332]	; (8006528 <state_machine+0x60c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	3303      	adds	r3, #3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fc fe50 	bl	8003088 <play_station>
				}

				playing_state = playing;
 80063e8:	4b50      	ldr	r3, [pc, #320]	; (800652c <state_machine+0x610>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80063ee:	4b50      	ldr	r3, [pc, #320]	; (8006530 <state_machine+0x614>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 80063f4:	4b4f      	ldr	r3, [pc, #316]	; (8006534 <state_machine+0x618>)
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2b05      	cmp	r3, #5
 80063fa:	f240 819d 	bls.w	8006738 <state_machine+0x81c>
 80063fe:	4b4d      	ldr	r3, [pc, #308]	; (8006534 <state_machine+0x618>)
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006406:	f200 8197 	bhi.w	8006738 <state_machine+0x81c>
 800640a:	4b4a      	ldr	r3, [pc, #296]	; (8006534 <state_machine+0x618>)
 800640c:	885b      	ldrh	r3, [r3, #2]
 800640e:	2ba0      	cmp	r3, #160	; 0xa0
 8006410:	f240 8192 	bls.w	8006738 <state_machine+0x81c>
 8006414:	4b47      	ldr	r3, [pc, #284]	; (8006534 <state_machine+0x618>)
 8006416:	885b      	ldrh	r3, [r3, #2]
 8006418:	2bbd      	cmp	r3, #189	; 0xbd
 800641a:	f200 818d 	bhi.w	8006738 <state_machine+0x81c>
		{
			if(dab_management_to_display.total_services)
 800641e:	4b46      	ldr	r3, [pc, #280]	; (8006538 <state_machine+0x61c>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8188 	beq.w	8006738 <state_machine+0x81c>
			{
				state_change_done = 0;
 8006428:	4b44      	ldr	r3, [pc, #272]	; (800653c <state_machine+0x620>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 800642e:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <state_machine+0x60c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3304      	adds	r3, #4
 8006434:	4a40      	ldr	r2, [pc, #256]	; (8006538 <state_machine+0x61c>)
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	4293      	cmp	r3, r2
 800643a:	db0c      	blt.n	8006456 <state_machine+0x53a>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 800643c:	4b3a      	ldr	r3, [pc, #232]	; (8006528 <state_machine+0x60c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <state_machine+0x61c>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	b2db      	uxtb	r3, r3
 800644a:	3304      	adds	r3, #4
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4618      	mov	r0, r3
 8006450:	f7fc fe1a 	bl	8003088 <play_station>
 8006454:	e007      	b.n	8006466 <state_machine+0x54a>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 8006456:	4b34      	ldr	r3, [pc, #208]	; (8006528 <state_machine+0x60c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	3304      	adds	r3, #4
 800645e:	b2db      	uxtb	r3, r3
 8006460:	4618      	mov	r0, r3
 8006462:	f7fc fe11 	bl	8003088 <play_station>
				}

				playing_state = playing;
 8006466:	4b31      	ldr	r3, [pc, #196]	; (800652c <state_machine+0x610>)
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800646c:	4b30      	ldr	r3, [pc, #192]	; (8006530 <state_machine+0x614>)
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8006472:	e161      	b.n	8006738 <state_machine+0x81c>

	case signal_info:
		if(!state_change_done)
 8006474:	4b31      	ldr	r3, [pc, #196]	; (800653c <state_machine+0x620>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <state_machine+0x56a>
		{
			Display_dab_digrad_status_background();
 800647c:	f7fe f990 	bl	80047a0 <Display_dab_digrad_status_background>
			state_change_done = 1;
 8006480:	4b2e      	ldr	r3, [pc, #184]	; (800653c <state_machine+0x620>)
 8006482:	2201      	movs	r2, #1
 8006484:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8006486:	4c2e      	ldr	r4, [pc, #184]	; (8006540 <state_machine+0x624>)
 8006488:	f107 0308 	add.w	r3, r7, #8
 800648c:	4618      	mov	r0, r3
 800648e:	f7fb fbd3 	bl	8001c38 <Si468x_dab_digrad_status>
 8006492:	4625      	mov	r5, r4
 8006494:	f107 0408 	add.w	r4, r7, #8
 8006498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800649a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800649c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800649e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064a4:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 80064a8:	4e25      	ldr	r6, [pc, #148]	; (8006540 <state_machine+0x624>)
 80064aa:	466d      	mov	r5, sp
 80064ac:	f106 0410 	add.w	r4, r6, #16
 80064b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80064bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80064c0:	f7fe fb06 	bl	8004ad0 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <state_machine+0x618>)
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d911      	bls.n	80064f0 <state_machine+0x5d4>
 80064cc:	4b19      	ldr	r3, [pc, #100]	; (8006534 <state_machine+0x618>)
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	2b9c      	cmp	r3, #156	; 0x9c
 80064d2:	d80d      	bhi.n	80064f0 <state_machine+0x5d4>
 80064d4:	4b17      	ldr	r3, [pc, #92]	; (8006534 <state_machine+0x618>)
 80064d6:	885b      	ldrh	r3, [r3, #2]
 80064d8:	2bc3      	cmp	r3, #195	; 0xc3
 80064da:	d909      	bls.n	80064f0 <state_machine+0x5d4>
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <state_machine+0x618>)
 80064de:	885b      	ldrh	r3, [r3, #2]
 80064e0:	2bea      	cmp	r3, #234	; 0xea
 80064e2:	d805      	bhi.n	80064f0 <state_machine+0x5d4>
		{
			state_change_done = 0;
 80064e4:	4b15      	ldr	r3, [pc, #84]	; (800653c <state_machine+0x620>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <state_machine+0x614>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <state_machine+0x618>)
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	2ba3      	cmp	r3, #163	; 0xa3
 80064f6:	f240 8121 	bls.w	800673c <state_machine+0x820>
 80064fa:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <state_machine+0x618>)
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006502:	f200 811b 	bhi.w	800673c <state_machine+0x820>
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <state_machine+0x618>)
 8006508:	885b      	ldrh	r3, [r3, #2]
 800650a:	2bc3      	cmp	r3, #195	; 0xc3
 800650c:	f240 8116 	bls.w	800673c <state_machine+0x820>
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <state_machine+0x618>)
 8006512:	885b      	ldrh	r3, [r3, #2]
 8006514:	2bea      	cmp	r3, #234	; 0xea
 8006516:	f200 8111 	bhi.w	800673c <state_machine+0x820>
		{
			state_change_done = 0;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <state_machine+0x620>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <state_machine+0x614>)
 8006522:	2204      	movs	r2, #4
 8006524:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006526:	e109      	b.n	800673c <state_machine+0x820>
 8006528:	20007010 	.word	0x20007010
 800652c:	20000150 	.word	0x20000150
 8006530:	2000700c 	.word	0x2000700c
 8006534:	20007014 	.word	0x20007014
 8006538:	20007040 	.word	0x20007040
 800653c:	2000700d 	.word	0x2000700d
 8006540:	20007018 	.word	0x20007018

	case scanning:
		if(!state_change_done)
 8006544:	4b82      	ldr	r3, [pc, #520]	; (8006750 <state_machine+0x834>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <state_machine+0x65e>
		{
			playing_state = not_playing;
 800654c:	4b81      	ldr	r3, [pc, #516]	; (8006754 <state_machine+0x838>)
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 8006552:	f7fd ff23 	bl	800439c <Display_scanning_screen_background>
			state_change_done = 1;
 8006556:	4b7e      	ldr	r3, [pc, #504]	; (8006750 <state_machine+0x834>)
 8006558:	2201      	movs	r2, #1
 800655a:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 800655c:	f7fb ff98 	bl	8002490 <Si468x_dab_full_scan>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	4b7c      	ldr	r3, [pc, #496]	; (8006758 <state_machine+0x83c>)
 8006566:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006568:	4b7b      	ldr	r3, [pc, #492]	; (8006758 <state_machine+0x83c>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <state_machine+0x65e>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006570:	f7fe f8e0 	bl	8004734 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8006574:	4b78      	ldr	r3, [pc, #480]	; (8006758 <state_machine+0x83c>)
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800657a:	4b78      	ldr	r3, [pc, #480]	; (800675c <state_machine+0x840>)
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	2b05      	cmp	r3, #5
 8006580:	f240 80de 	bls.w	8006740 <state_machine+0x824>
 8006584:	4b75      	ldr	r3, [pc, #468]	; (800675c <state_machine+0x840>)
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800658c:	f200 80d8 	bhi.w	8006740 <state_machine+0x824>
 8006590:	4b72      	ldr	r3, [pc, #456]	; (800675c <state_machine+0x840>)
 8006592:	885b      	ldrh	r3, [r3, #2]
 8006594:	2bc3      	cmp	r3, #195	; 0xc3
 8006596:	f240 80d3 	bls.w	8006740 <state_machine+0x824>
 800659a:	4b70      	ldr	r3, [pc, #448]	; (800675c <state_machine+0x840>)
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	2bea      	cmp	r3, #234	; 0xea
 80065a0:	f200 80ce 	bhi.w	8006740 <state_machine+0x824>
		{
			scan_cancel_flag = 1;
 80065a4:	4b6e      	ldr	r3, [pc, #440]	; (8006760 <state_machine+0x844>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 80065aa:	4b69      	ldr	r3, [pc, #420]	; (8006750 <state_machine+0x834>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80065b0:	4b6c      	ldr	r3, [pc, #432]	; (8006764 <state_machine+0x848>)
 80065b2:	2204      	movs	r2, #4
 80065b4:	701a      	strb	r2, [r3, #0]
		}

		break;
 80065b6:	e0c3      	b.n	8006740 <state_machine+0x824>

	case settings:
		if(!state_change_done)
 80065b8:	4b65      	ldr	r3, [pc, #404]	; (8006750 <state_machine+0x834>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d107      	bne.n	80065d0 <state_machine+0x6b4>
		{
			Display_settings_screen_background();
 80065c0:	f7fe fdf8 	bl	80051b4 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 80065c4:	4b66      	ldr	r3, [pc, #408]	; (8006760 <state_machine+0x844>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 80065ca:	4b61      	ldr	r3, [pc, #388]	; (8006750 <state_machine+0x834>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 80065d0:	4b65      	ldr	r3, [pc, #404]	; (8006768 <state_machine+0x84c>)
 80065d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065d4:	f7fe fee6 	bl	80053a4 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80065d8:	4b60      	ldr	r3, [pc, #384]	; (800675c <state_machine+0x840>)
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	2ba3      	cmp	r3, #163	; 0xa3
 80065de:	d91e      	bls.n	800661e <state_machine+0x702>
 80065e0:	4b5e      	ldr	r3, [pc, #376]	; (800675c <state_machine+0x840>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80065e8:	d819      	bhi.n	800661e <state_machine+0x702>
 80065ea:	4b5c      	ldr	r3, [pc, #368]	; (800675c <state_machine+0x840>)
 80065ec:	885b      	ldrh	r3, [r3, #2]
 80065ee:	2b3c      	cmp	r3, #60	; 0x3c
 80065f0:	d915      	bls.n	800661e <state_machine+0x702>
 80065f2:	4b5a      	ldr	r3, [pc, #360]	; (800675c <state_machine+0x840>)
 80065f4:	885b      	ldrh	r3, [r3, #2]
 80065f6:	2b63      	cmp	r3, #99	; 0x63
 80065f8:	d811      	bhi.n	800661e <state_machine+0x702>
		{
			dab_management_to_display.audio_volume += 2;
 80065fa:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <state_machine+0x84c>)
 80065fc:	7b9b      	ldrb	r3, [r3, #14]
 80065fe:	3302      	adds	r3, #2
 8006600:	b2da      	uxtb	r2, r3
 8006602:	4b59      	ldr	r3, [pc, #356]	; (8006768 <state_machine+0x84c>)
 8006604:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 8006606:	4b58      	ldr	r3, [pc, #352]	; (8006768 <state_machine+0x84c>)
 8006608:	7b9b      	ldrb	r3, [r3, #14]
 800660a:	2b3f      	cmp	r3, #63	; 0x3f
 800660c:	d902      	bls.n	8006614 <state_machine+0x6f8>
			{
				dab_management_to_display.audio_volume = 63;
 800660e:	4b56      	ldr	r3, [pc, #344]	; (8006768 <state_machine+0x84c>)
 8006610:	223f      	movs	r2, #63	; 0x3f
 8006612:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006614:	4b54      	ldr	r3, [pc, #336]	; (8006768 <state_machine+0x84c>)
 8006616:	7b9b      	ldrb	r3, [r3, #14]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fc fcff 	bl	800301c <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 800661e:	4b4f      	ldr	r3, [pc, #316]	; (800675c <state_machine+0x840>)
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	2b05      	cmp	r3, #5
 8006624:	d91d      	bls.n	8006662 <state_machine+0x746>
 8006626:	4b4d      	ldr	r3, [pc, #308]	; (800675c <state_machine+0x840>)
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	2b9c      	cmp	r3, #156	; 0x9c
 800662c:	d819      	bhi.n	8006662 <state_machine+0x746>
 800662e:	4b4b      	ldr	r3, [pc, #300]	; (800675c <state_machine+0x840>)
 8006630:	885b      	ldrh	r3, [r3, #2]
 8006632:	2b3c      	cmp	r3, #60	; 0x3c
 8006634:	d915      	bls.n	8006662 <state_machine+0x746>
 8006636:	4b49      	ldr	r3, [pc, #292]	; (800675c <state_machine+0x840>)
 8006638:	885b      	ldrh	r3, [r3, #2]
 800663a:	2b63      	cmp	r3, #99	; 0x63
 800663c:	d811      	bhi.n	8006662 <state_machine+0x746>
		{
			dab_management_to_display.audio_volume -= 2;
 800663e:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <state_machine+0x84c>)
 8006640:	7b9b      	ldrb	r3, [r3, #14]
 8006642:	3b02      	subs	r3, #2
 8006644:	b2da      	uxtb	r2, r3
 8006646:	4b48      	ldr	r3, [pc, #288]	; (8006768 <state_machine+0x84c>)
 8006648:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <state_machine+0x84c>)
 800664c:	7b9b      	ldrb	r3, [r3, #14]
 800664e:	2b3f      	cmp	r3, #63	; 0x3f
 8006650:	d902      	bls.n	8006658 <state_machine+0x73c>
			{
				dab_management_to_display.audio_volume = 0;
 8006652:	4b45      	ldr	r3, [pc, #276]	; (8006768 <state_machine+0x84c>)
 8006654:	2200      	movs	r2, #0
 8006656:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006658:	4b43      	ldr	r3, [pc, #268]	; (8006768 <state_machine+0x84c>)
 800665a:	7b9b      	ldrb	r3, [r3, #14]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fc fcdd 	bl	800301c <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006662:	4b3e      	ldr	r3, [pc, #248]	; (800675c <state_machine+0x840>)
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	2ba3      	cmp	r3, #163	; 0xa3
 8006668:	d907      	bls.n	800667a <state_machine+0x75e>
 800666a:	4b3c      	ldr	r3, [pc, #240]	; (800675c <state_machine+0x840>)
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006672:	d802      	bhi.n	800667a <state_machine+0x75e>
 8006674:	4b39      	ldr	r3, [pc, #228]	; (800675c <state_machine+0x840>)
 8006676:	885b      	ldrh	r3, [r3, #2]
 8006678:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800667a:	4b38      	ldr	r3, [pc, #224]	; (800675c <state_machine+0x840>)
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	2b05      	cmp	r3, #5
 8006680:	d906      	bls.n	8006690 <state_machine+0x774>
 8006682:	4b36      	ldr	r3, [pc, #216]	; (800675c <state_machine+0x840>)
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	2b9c      	cmp	r3, #156	; 0x9c
 8006688:	d802      	bhi.n	8006690 <state_machine+0x774>
 800668a:	4b34      	ldr	r3, [pc, #208]	; (800675c <state_machine+0x840>)
 800668c:	885b      	ldrh	r3, [r3, #2]
 800668e:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006690:	4b32      	ldr	r3, [pc, #200]	; (800675c <state_machine+0x840>)
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	2b05      	cmp	r3, #5
 8006696:	d911      	bls.n	80066bc <state_machine+0x7a0>
 8006698:	4b30      	ldr	r3, [pc, #192]	; (800675c <state_machine+0x840>)
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	2b9c      	cmp	r3, #156	; 0x9c
 800669e:	d80d      	bhi.n	80066bc <state_machine+0x7a0>
 80066a0:	4b2e      	ldr	r3, [pc, #184]	; (800675c <state_machine+0x840>)
 80066a2:	885b      	ldrh	r3, [r3, #2]
 80066a4:	2b96      	cmp	r3, #150	; 0x96
 80066a6:	d909      	bls.n	80066bc <state_machine+0x7a0>
 80066a8:	4b2c      	ldr	r3, [pc, #176]	; (800675c <state_machine+0x840>)
 80066aa:	885b      	ldrh	r3, [r3, #2]
 80066ac:	2bbd      	cmp	r3, #189	; 0xbd
 80066ae:	d805      	bhi.n	80066bc <state_machine+0x7a0>
		{
			state_change_done = 0;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <state_machine+0x834>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <state_machine+0x848>)
 80066b8:	2202      	movs	r2, #2
 80066ba:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 80066bc:	4b27      	ldr	r3, [pc, #156]	; (800675c <state_machine+0x840>)
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	2ba3      	cmp	r3, #163	; 0xa3
 80066c2:	d907      	bls.n	80066d4 <state_machine+0x7b8>
 80066c4:	4b25      	ldr	r3, [pc, #148]	; (800675c <state_machine+0x840>)
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80066cc:	d802      	bhi.n	80066d4 <state_machine+0x7b8>
 80066ce:	4b23      	ldr	r3, [pc, #140]	; (800675c <state_machine+0x840>)
 80066d0:	885b      	ldrh	r3, [r3, #2]
 80066d2:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <state_machine+0x840>)
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	2b05      	cmp	r3, #5
 80066da:	d911      	bls.n	8006700 <state_machine+0x7e4>
 80066dc:	4b1f      	ldr	r3, [pc, #124]	; (800675c <state_machine+0x840>)
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	2b9c      	cmp	r3, #156	; 0x9c
 80066e2:	d80d      	bhi.n	8006700 <state_machine+0x7e4>
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <state_machine+0x840>)
 80066e6:	885b      	ldrh	r3, [r3, #2]
 80066e8:	2bc3      	cmp	r3, #195	; 0xc3
 80066ea:	d909      	bls.n	8006700 <state_machine+0x7e4>
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <state_machine+0x840>)
 80066ee:	885b      	ldrh	r3, [r3, #2]
 80066f0:	2bea      	cmp	r3, #234	; 0xea
 80066f2:	d805      	bhi.n	8006700 <state_machine+0x7e4>
		{
			state_change_done = 0;
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <state_machine+0x834>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <state_machine+0x848>)
 80066fc:	2203      	movs	r2, #3
 80066fe:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006700:	4b16      	ldr	r3, [pc, #88]	; (800675c <state_machine+0x840>)
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	2ba3      	cmp	r3, #163	; 0xa3
 8006706:	d91d      	bls.n	8006744 <state_machine+0x828>
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <state_machine+0x840>)
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006710:	d818      	bhi.n	8006744 <state_machine+0x828>
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <state_machine+0x840>)
 8006714:	885b      	ldrh	r3, [r3, #2]
 8006716:	2bc3      	cmp	r3, #195	; 0xc3
 8006718:	d914      	bls.n	8006744 <state_machine+0x828>
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <state_machine+0x840>)
 800671c:	885b      	ldrh	r3, [r3, #2]
 800671e:	2bea      	cmp	r3, #234	; 0xea
 8006720:	d810      	bhi.n	8006744 <state_machine+0x828>
		{
			state_change_done = 0;
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <state_machine+0x834>)
 8006724:	2200      	movs	r2, #0
 8006726:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <state_machine+0x848>)
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
		}


		break;
 800672e:	e009      	b.n	8006744 <state_machine+0x828>

	default:
		break;
 8006730:	bf00      	nop
 8006732:	e008      	b.n	8006746 <state_machine+0x82a>
		break;
 8006734:	bf00      	nop
 8006736:	e006      	b.n	8006746 <state_machine+0x82a>
		break;
 8006738:	bf00      	nop
 800673a:	e004      	b.n	8006746 <state_machine+0x82a>
		break;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <state_machine+0x82a>
		break;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <state_machine+0x82a>
		break;
 8006744:	bf00      	nop
	}
}
 8006746:	bf00      	nop
 8006748:	3744      	adds	r7, #68	; 0x44
 800674a:	46bd      	mov	sp, r7
 800674c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674e:	bf00      	nop
 8006750:	2000700d 	.word	0x2000700d
 8006754:	20000150 	.word	0x20000150
 8006758:	2000706d 	.word	0x2000706d
 800675c:	20007014 	.word	0x20007014
 8006760:	2000706c 	.word	0x2000706c
 8006764:	2000700c 	.word	0x2000700c
 8006768:	20007040 	.word	0x20007040

0800676c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <HAL_MspInit+0x4c>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	4a0f      	ldr	r2, [pc, #60]	; (80067b8 <HAL_MspInit+0x4c>)
 800677c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006780:	6453      	str	r3, [r2, #68]	; 0x44
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <HAL_MspInit+0x4c>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678a:	607b      	str	r3, [r7, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_MspInit+0x4c>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <HAL_MspInit+0x4c>)
 8006798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679c:	6413      	str	r3, [r2, #64]	; 0x40
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <HAL_MspInit+0x4c>)
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800

080067bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80067c0:	e7fe      	b.n	80067c0 <NMI_Handler+0x4>

080067c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067c2:	b480      	push	{r7}
 80067c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067c6:	e7fe      	b.n	80067c6 <HardFault_Handler+0x4>

080067c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067cc:	e7fe      	b.n	80067cc <MemManage_Handler+0x4>

080067ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067ce:	b480      	push	{r7}
 80067d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067d2:	e7fe      	b.n	80067d2 <BusFault_Handler+0x4>

080067d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067d8:	e7fe      	b.n	80067d8 <UsageFault_Handler+0x4>

080067da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067da:	b480      	push	{r7}
 80067dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006808:	f000 fd26 	bl	8007258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800680c:	bf00      	nop
 800680e:	bd80      	pop	{r7, pc}

08006810 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006814:	4802      	ldr	r0, [pc, #8]	; (8006820 <DMA1_Stream4_IRQHandler+0x10>)
 8006816:	f000 ff45 	bl	80076a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20006fac 	.word	0x20006fac

08006824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006828:	4802      	ldr	r0, [pc, #8]	; (8006834 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800682a:	f005 fc5a 	bl	800c0e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800682e:	bf00      	nop
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200070b8 	.word	0x200070b8

08006838 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800683c:	4802      	ldr	r0, [pc, #8]	; (8006848 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800683e:	f005 fc50 	bl	800c0e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20007100 	.word	0x20007100

0800684c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006850:	4802      	ldr	r0, [pc, #8]	; (800685c <SPI2_IRQHandler+0x10>)
 8006852:	f005 f8e9 	bl	800ba28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20006f54 	.word	0x20006f54

08006860 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8006864:	4802      	ldr	r0, [pc, #8]	; (8006870 <I2C3_EV_IRQHandler+0x10>)
 8006866:	f001 ff99 	bl	800879c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20006ea8 	.word	0x20006ea8

08006874 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <I2C3_ER_IRQHandler+0x10>)
 800687a:	f002 f900 	bl	8008a7e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20006ea8 	.word	0x20006ea8

08006888 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <SystemInit+0x20>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a6:	4a05      	ldr	r2, [pc, #20]	; (80068bc <SystemInit+0x20>)
 80068a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068b0:	bf00      	nop
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	e000ed00 	.word	0xe000ed00

080068c0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068c6:	f107 0320 	add.w	r3, r7, #32
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068d0:	1d3b      	adds	r3, r7, #4
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	609a      	str	r2, [r3, #8]
 80068da:	60da      	str	r2, [r3, #12]
 80068dc:	611a      	str	r2, [r3, #16]
 80068de:	615a      	str	r2, [r3, #20]
 80068e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <MX_TIM3_Init+0xac>)
 80068e4:	4a22      	ldr	r2, [pc, #136]	; (8006970 <MX_TIM3_Init+0xb0>)
 80068e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80068e8:	4b20      	ldr	r3, [pc, #128]	; (800696c <MX_TIM3_Init+0xac>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ee:	4b1f      	ldr	r3, [pc, #124]	; (800696c <MX_TIM3_Init+0xac>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80068f4:	4b1d      	ldr	r3, [pc, #116]	; (800696c <MX_TIM3_Init+0xac>)
 80068f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068fc:	4b1b      	ldr	r3, [pc, #108]	; (800696c <MX_TIM3_Init+0xac>)
 80068fe:	2200      	movs	r2, #0
 8006900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <MX_TIM3_Init+0xac>)
 8006904:	2200      	movs	r2, #0
 8006906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006908:	4818      	ldr	r0, [pc, #96]	; (800696c <MX_TIM3_Init+0xac>)
 800690a:	f005 fb9b 	bl	800c044 <HAL_TIM_PWM_Init>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006914:	f7ff f9d8 	bl	8005cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006918:	2300      	movs	r3, #0
 800691a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800691c:	2300      	movs	r3, #0
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006920:	f107 0320 	add.w	r3, r7, #32
 8006924:	4619      	mov	r1, r3
 8006926:	4811      	ldr	r0, [pc, #68]	; (800696c <MX_TIM3_Init+0xac>)
 8006928:	f006 f81e 	bl	800c968 <HAL_TIMEx_MasterConfigSynchronization>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006932:	f7ff f9c9 	bl	8005cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006936:	2360      	movs	r3, #96	; 0x60
 8006938:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	2208      	movs	r2, #8
 800694a:	4619      	mov	r1, r3
 800694c:	4807      	ldr	r0, [pc, #28]	; (800696c <MX_TIM3_Init+0xac>)
 800694e:	f005 fcd1 	bl	800c2f4 <HAL_TIM_PWM_ConfigChannel>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006958:	f7ff f9b6 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800695c:	4803      	ldr	r0, [pc, #12]	; (800696c <MX_TIM3_Init+0xac>)
 800695e:	f000 f8b9 	bl	8006ad4 <HAL_TIM_MspPostInit>

}
 8006962:	bf00      	nop
 8006964:	3728      	adds	r7, #40	; 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20007070 	.word	0x20007070
 8006970:	40000400 	.word	0x40000400

08006974 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006978:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <MX_TIM10_Init+0x40>)
 800697a:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <MX_TIM10_Init+0x44>)
 800697c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 800697e:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <MX_TIM10_Init+0x40>)
 8006980:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006984:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <MX_TIM10_Init+0x40>)
 8006988:	2200      	movs	r2, #0
 800698a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <MX_TIM10_Init+0x40>)
 800698e:	f240 2257 	movw	r2, #599	; 0x257
 8006992:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <MX_TIM10_Init+0x40>)
 8006996:	2200      	movs	r2, #0
 8006998:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <MX_TIM10_Init+0x40>)
 800699c:	2200      	movs	r2, #0
 800699e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80069a0:	4804      	ldr	r0, [pc, #16]	; (80069b4 <MX_TIM10_Init+0x40>)
 80069a2:	f005 fa8f 	bl	800bec4 <HAL_TIM_Base_Init>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80069ac:	f7ff f98c 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80069b0:	bf00      	nop
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	200070b8 	.word	0x200070b8
 80069b8:	40014400 	.word	0x40014400

080069bc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <MX_TIM11_Init+0x40>)
 80069c2:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <MX_TIM11_Init+0x44>)
 80069c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <MX_TIM11_Init+0x40>)
 80069c8:	f643 2297 	movw	r2, #14999	; 0x3a97
 80069cc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <MX_TIM11_Init+0x40>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80069d4:	4b09      	ldr	r3, [pc, #36]	; (80069fc <MX_TIM11_Init+0x40>)
 80069d6:	f240 5213 	movw	r2, #1299	; 0x513
 80069da:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <MX_TIM11_Init+0x40>)
 80069de:	2200      	movs	r2, #0
 80069e0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <MX_TIM11_Init+0x40>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80069e8:	4804      	ldr	r0, [pc, #16]	; (80069fc <MX_TIM11_Init+0x40>)
 80069ea:	f005 fa6b 	bl	800bec4 <HAL_TIM_Base_Init>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80069f4:	f7ff f968 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80069f8:	bf00      	nop
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20007100 	.word	0x20007100
 8006a00:	40014800 	.word	0x40014800

08006a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d10d      	bne.n	8006a32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <HAL_TIM_PWM_MspInit+0x40>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <HAL_TIM_PWM_MspInit+0x40>)
 8006a20:	f043 0302 	orr.w	r3, r3, #2
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <HAL_TIM_PWM_MspInit+0x40>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40023800 	.word	0x40023800

08006a48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1c      	ldr	r2, [pc, #112]	; (8006ac8 <HAL_TIM_Base_MspInit+0x80>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d116      	bne.n	8006a88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_TIM_Base_MspInit+0x84>)
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	4a1a      	ldr	r2, [pc, #104]	; (8006acc <HAL_TIM_Base_MspInit+0x84>)
 8006a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a68:	6453      	str	r3, [r2, #68]	; 0x44
 8006a6a:	4b18      	ldr	r3, [pc, #96]	; (8006acc <HAL_TIM_Base_MspInit+0x84>)
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	2019      	movs	r0, #25
 8006a7c:	f000 fd0b 	bl	8007496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006a80:	2019      	movs	r0, #25
 8006a82:	f000 fd24 	bl	80074ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006a86:	e01a      	b.n	8006abe <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a10      	ldr	r2, [pc, #64]	; (8006ad0 <HAL_TIM_Base_MspInit+0x88>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d115      	bne.n	8006abe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <HAL_TIM_Base_MspInit+0x84>)
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <HAL_TIM_Base_MspInit+0x84>)
 8006a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <HAL_TIM_Base_MspInit+0x84>)
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aaa:	60bb      	str	r3, [r7, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	201a      	movs	r0, #26
 8006ab4:	f000 fcef 	bl	8007496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006ab8:	201a      	movs	r0, #26
 8006aba:	f000 fd08 	bl	80074ce <HAL_NVIC_EnableIRQ>
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006adc:	f107 030c 	add.w	r3, r7, #12
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <HAL_TIM_MspPostInit+0x68>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d11e      	bne.n	8006b34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_TIM_MspPostInit+0x6c>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <HAL_TIM_MspPostInit+0x6c>)
 8006b00:	f043 0304 	orr.w	r3, r3, #4
 8006b04:	6313      	str	r3, [r2, #48]	; 0x30
 8006b06:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <HAL_TIM_MspPostInit+0x6c>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8006b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006b24:	2302      	movs	r3, #2
 8006b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006b28:	f107 030c 	add.w	r3, r7, #12
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4805      	ldr	r0, [pc, #20]	; (8006b44 <HAL_TIM_MspPostInit+0x70>)
 8006b30:	f001 f802 	bl	8007b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40023800 	.word	0x40023800
 8006b44:	40020800 	.word	0x40020800

08006b48 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8006b4e:	4b26      	ldr	r3, [pc, #152]	; (8006be8 <Touch_read+0xa0>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2000      	movs	r0, #0
 8006b54:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8006b56:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <Touch_read+0xa0>)
 8006b58:	7c1b      	ldrb	r3, [r3, #16]
 8006b5a:	b25b      	sxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	da32      	bge.n	8006bc6 <Touch_read+0x7e>
	{
		xtemp = TP_Read_XOY(0xD0);
 8006b60:	20d0      	movs	r0, #208	; 0xd0
 8006b62:	f000 f8e9 	bl	8006d38 <TP_Read_XOY>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <Touch_read+0xa4>)
 8006b6c:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8006b6e:	2090      	movs	r0, #144	; 0x90
 8006b70:	f000 f8e2 	bl	8006d38 <TP_Read_XOY>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <Touch_read+0xa8>)
 8006b7a:	801a      	strh	r2, [r3, #0]

		touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
 8006b7c:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <Touch_read+0xa8>)
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	019b      	lsls	r3, r3, #6
 8006b8c:	4a19      	ldr	r2, [pc, #100]	; (8006bf4 <Touch_read+0xac>)
 8006b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8006b92:	441a      	add	r2, r3
 8006b94:	12d2      	asrs	r2, r2, #11
 8006b96:	17db      	asrs	r3, r3, #31
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
 8006ba4:	4b11      	ldr	r3, [pc, #68]	; (8006bec <Touch_read+0xa4>)
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	3bf0      	subs	r3, #240	; 0xf0
 8006baa:	22e6      	movs	r2, #230	; 0xe6
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	4a11      	ldr	r2, [pc, #68]	; (8006bf8 <Touch_read+0xb0>)
 8006bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8006bb6:	1252      	asrs	r2, r2, #9
 8006bb8:	17db      	asrs	r3, r3, #31
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	33f0      	adds	r3, #240	; 0xf0
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	807b      	strh	r3, [r7, #2]
 8006bc4:	e003      	b.n	8006bce <Touch_read+0x86>

	}

	else
	{
		touch_coordinates.x = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	88ba      	ldrh	r2, [r7, #4]
 8006bd6:	f362 030f 	bfi	r3, r2, #0, #16
 8006bda:	88fa      	ldrh	r2, [r7, #6]
 8006bdc:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000158 	.word	0x20000158
 8006bec:	20007148 	.word	0x20007148
 8006bf0:	2000714a 	.word	0x2000714a
 8006bf4:	93afcf8b 	.word	0x93afcf8b
 8006bf8:	24b70025 	.word	0x24b70025

08006bfc <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
 8006c0e:	e021      	b.n	8006c54 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8006c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	da05      	bge.n	8006c24 <TP_Write_Byte+0x28>
			T_DIN_ON;
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2120      	movs	r1, #32
 8006c1c:	4811      	ldr	r0, [pc, #68]	; (8006c64 <TP_Write_Byte+0x68>)
 8006c1e:	f001 f93f 	bl	8007ea0 <HAL_GPIO_WritePin>
 8006c22:	e004      	b.n	8006c2e <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8006c24:	2200      	movs	r2, #0
 8006c26:	2120      	movs	r1, #32
 8006c28:	480e      	ldr	r0, [pc, #56]	; (8006c64 <TP_Write_Byte+0x68>)
 8006c2a:	f001 f939 	bl	8007ea0 <HAL_GPIO_WritePin>

		num <<= 1;
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8006c34:	2200      	movs	r2, #0
 8006c36:	2108      	movs	r1, #8
 8006c38:	480a      	ldr	r0, [pc, #40]	; (8006c64 <TP_Write_Byte+0x68>)
 8006c3a:	f001 f931 	bl	8007ea0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f000 fb2a 	bl	8007298 <HAL_Delay>
		T_CLK_ON;
 8006c44:	2201      	movs	r2, #1
 8006c46:	2108      	movs	r1, #8
 8006c48:	4806      	ldr	r0, [pc, #24]	; (8006c64 <TP_Write_Byte+0x68>)
 8006c4a:	f001 f929 	bl	8007ea0 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	3301      	adds	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	2b07      	cmp	r3, #7
 8006c58:	d9da      	bls.n	8006c10 <TP_Write_Byte+0x14>
	}
}
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40020400 	.word	0x40020400

08006c68 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2108      	movs	r1, #8
 8006c7e:	482c      	ldr	r0, [pc, #176]	; (8006d30 <TP_Read_AD+0xc8>)
 8006c80:	f001 f90e 	bl	8007ea0 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8006c84:	2200      	movs	r2, #0
 8006c86:	2120      	movs	r1, #32
 8006c88:	4829      	ldr	r0, [pc, #164]	; (8006d30 <TP_Read_AD+0xc8>)
 8006c8a:	f001 f909 	bl	8007ea0 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2180      	movs	r1, #128	; 0x80
 8006c92:	4828      	ldr	r0, [pc, #160]	; (8006d34 <TP_Read_AD+0xcc>)
 8006c94:	f001 f904 	bl	8007ea0 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff ffae 	bl	8006bfc <TP_Write_Byte>
	HAL_Delay(1);
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	f000 faf9 	bl	8007298 <HAL_Delay>
	T_CLK_OFF;
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2108      	movs	r1, #8
 8006caa:	4821      	ldr	r0, [pc, #132]	; (8006d30 <TP_Read_AD+0xc8>)
 8006cac:	f001 f8f8 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f000 faf1 	bl	8007298 <HAL_Delay>
	T_CLK_ON;
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	2108      	movs	r1, #8
 8006cba:	481d      	ldr	r0, [pc, #116]	; (8006d30 <TP_Read_AD+0xc8>)
 8006cbc:	f001 f8f0 	bl	8007ea0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	f000 fae9 	bl	8007298 <HAL_Delay>
	T_CLK_OFF;
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2108      	movs	r1, #8
 8006cca:	4819      	ldr	r0, [pc, #100]	; (8006d30 <TP_Read_AD+0xc8>)
 8006ccc:	f001 f8e8 	bl	8007ea0 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	e01c      	b.n	8006d10 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8006cd6:	89bb      	ldrh	r3, [r7, #12]
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2108      	movs	r1, #8
 8006ce0:	4813      	ldr	r0, [pc, #76]	; (8006d30 <TP_Read_AD+0xc8>)
 8006ce2:	f001 f8dd 	bl	8007ea0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f000 fad6 	bl	8007298 <HAL_Delay>
		T_CLK_ON;
 8006cec:	2201      	movs	r2, #1
 8006cee:	2108      	movs	r1, #8
 8006cf0:	480f      	ldr	r0, [pc, #60]	; (8006d30 <TP_Read_AD+0xc8>)
 8006cf2:	f001 f8d5 	bl	8007ea0 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8006cf6:	2110      	movs	r1, #16
 8006cf8:	480d      	ldr	r0, [pc, #52]	; (8006d30 <TP_Read_AD+0xc8>)
 8006cfa:	f001 f8b9 	bl	8007e70 <HAL_GPIO_ReadPin>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <TP_Read_AD+0xa2>
 8006d04:	89bb      	ldrh	r3, [r7, #12]
 8006d06:	3301      	adds	r3, #1
 8006d08:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d9df      	bls.n	8006cd6 <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8006d16:	89bb      	ldrh	r3, [r7, #12]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	4804      	ldr	r0, [pc, #16]	; (8006d34 <TP_Read_AD+0xcc>)
 8006d22:	f001 f8bd 	bl	8007ea0 <HAL_GPIO_WritePin>
	return(Num);
 8006d26:	89bb      	ldrh	r3, [r7, #12]

}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40020400 	.word	0x40020400
 8006d34:	40020c00 	.word	0x40020c00

08006d38 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ff8f 	bl	8006c68 <TP_Read_AD>
}
 8006d4a:	bf00      	nop
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8006d5e:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <TP_Read_XY+0x3c>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff ffe8 	bl	8006d38 <TP_Read_XOY>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <TP_Read_XY+0x40>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff ffe1 	bl	8006d38 <TP_Read_XOY>
 8006d76:	4603      	mov	r3, r0
 8006d78:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	89fa      	ldrh	r2, [r7, #14]
 8006d7e:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	89ba      	ldrh	r2, [r7, #12]
 8006d84:	801a      	strh	r2, [r3, #0]
	return 1;
 8006d86:	2301      	movs	r3, #1
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	2000017c 	.word	0x2000017c
 8006d94:	2000017d 	.word	0x2000017d

08006d98 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006da2:	f107 0212 	add.w	r2, r7, #18
 8006da6:	f107 0314 	add.w	r3, r7, #20
 8006daa:	4611      	mov	r1, r2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ffd1 	bl	8006d54 <TP_Read_XY>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <TP_Read_XY2+0x28>
    	return(0);
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e049      	b.n	8006e54 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8006dc0:	f107 020e 	add.w	r2, r7, #14
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ffc2 	bl	8006d54 <TP_Read_XY>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <TP_Read_XY2+0x46>
    	return(0);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e03a      	b.n	8006e54 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8006dde:	8a3a      	ldrh	r2, [r7, #16]
 8006de0:	8abb      	ldrh	r3, [r7, #20]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d804      	bhi.n	8006df0 <TP_Read_XY2+0x58>
 8006de6:	8a3b      	ldrh	r3, [r7, #16]
 8006de8:	3331      	adds	r3, #49	; 0x31
 8006dea:	8aba      	ldrh	r2, [r7, #20]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	da08      	bge.n	8006e02 <TP_Read_XY2+0x6a>
 8006df0:	8aba      	ldrh	r2, [r7, #20]
 8006df2:	8a3b      	ldrh	r3, [r7, #16]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d82c      	bhi.n	8006e52 <TP_Read_XY2+0xba>
 8006df8:	8abb      	ldrh	r3, [r7, #20]
 8006dfa:	3331      	adds	r3, #49	; 0x31
 8006dfc:	8a3a      	ldrh	r2, [r7, #16]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	db27      	blt.n	8006e52 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8006e02:	89fa      	ldrh	r2, [r7, #14]
 8006e04:	8a7b      	ldrh	r3, [r7, #18]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d804      	bhi.n	8006e14 <TP_Read_XY2+0x7c>
 8006e0a:	89fb      	ldrh	r3, [r7, #14]
 8006e0c:	3331      	adds	r3, #49	; 0x31
 8006e0e:	8a7a      	ldrh	r2, [r7, #18]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	da08      	bge.n	8006e26 <TP_Read_XY2+0x8e>
 8006e14:	8a7a      	ldrh	r2, [r7, #18]
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d81a      	bhi.n	8006e52 <TP_Read_XY2+0xba>
 8006e1c:	8a7b      	ldrh	r3, [r7, #18]
 8006e1e:	3331      	adds	r3, #49	; 0x31
 8006e20:	89fa      	ldrh	r2, [r7, #14]
 8006e22:	4293      	cmp	r3, r2
 8006e24:	db15      	blt.n	8006e52 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006e26:	8abb      	ldrh	r3, [r7, #20]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	8a3b      	ldrh	r3, [r7, #16]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	0fda      	lsrs	r2, r3, #31
 8006e30:	4413      	add	r3, r2
 8006e32:	105b      	asrs	r3, r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8006e3a:	8a7b      	ldrh	r3, [r7, #18]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	89fb      	ldrh	r3, [r7, #14]
 8006e40:	4413      	add	r3, r2
 8006e42:	0fda      	lsrs	r2, r3, #31
 8006e44:	4413      	add	r3, r2
 8006e46:	105b      	asrs	r3, r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	801a      	strh	r2, [r3, #0]
        return 1;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8006e66:	2140      	movs	r1, #64	; 0x40
 8006e68:	483f      	ldr	r0, [pc, #252]	; (8006f68 <TP_Scan+0x10c>)
 8006e6a:	f001 f801 	bl	8007e70 <HAL_GPIO_ReadPin>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d155      	bne.n	8006f20 <TP_Scan+0xc4>
	{
		if(tp)
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8006e7a:	493c      	ldr	r1, [pc, #240]	; (8006f6c <TP_Scan+0x110>)
 8006e7c:	483c      	ldr	r0, [pc, #240]	; (8006f70 <TP_Scan+0x114>)
 8006e7e:	f7ff ff8b 	bl	8006d98 <TP_Read_XY2>
 8006e82:	e03c      	b.n	8006efe <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8006e84:	4939      	ldr	r1, [pc, #228]	; (8006f6c <TP_Scan+0x110>)
 8006e86:	483a      	ldr	r0, [pc, #232]	; (8006f70 <TP_Scan+0x114>)
 8006e88:	f7ff ff86 	bl	8006d98 <TP_Read_XY2>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d035      	beq.n	8006efe <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8006e92:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <TP_Scan+0x118>)
 8006e94:	ed93 7a05 	vldr	s14, [r3, #20]
 8006e98:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <TP_Scan+0x118>)
 8006e9a:	899b      	ldrh	r3, [r3, #12]
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ea8:	4b32      	ldr	r3, [pc, #200]	; (8006f74 <TP_Scan+0x118>)
 8006eaa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 3a90 	vmov	r3, s15
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	4b2b      	ldr	r3, [pc, #172]	; (8006f74 <TP_Scan+0x118>)
 8006ec6:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8006ec8:	4b2a      	ldr	r3, [pc, #168]	; (8006f74 <TP_Scan+0x118>)
 8006eca:	ed93 7a06 	vldr	s14, [r3, #24]
 8006ece:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <TP_Scan+0x118>)
 8006ed0:	89db      	ldrh	r3, [r3, #14]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ede:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <TP_Scan+0x118>)
 8006ee0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef4:	ee17 3a90 	vmov	r3, s15
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <TP_Scan+0x118>)
 8006efc:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8006efe:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <TP_Scan+0x118>)
 8006f00:	7c1b      	ldrb	r3, [r3, #16]
 8006f02:	b25b      	sxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db26      	blt.n	8006f56 <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <TP_Scan+0x118>)
 8006f0a:	22c0      	movs	r2, #192	; 0xc0
 8006f0c:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8006f0e:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <TP_Scan+0x118>)
 8006f10:	899a      	ldrh	r2, [r3, #12]
 8006f12:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <TP_Scan+0x118>)
 8006f14:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8006f16:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <TP_Scan+0x118>)
 8006f18:	89da      	ldrh	r2, [r3, #14]
 8006f1a:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <TP_Scan+0x118>)
 8006f1c:	815a      	strh	r2, [r3, #10]
 8006f1e:	e01a      	b.n	8006f56 <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8006f20:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <TP_Scan+0x118>)
 8006f22:	7c1b      	ldrb	r3, [r3, #16]
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da07      	bge.n	8006f3a <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <TP_Scan+0x118>)
 8006f2c:	7c1b      	ldrb	r3, [r3, #16]
 8006f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <TP_Scan+0x118>)
 8006f36:	741a      	strb	r2, [r3, #16]
 8006f38:	e00d      	b.n	8006f56 <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <TP_Scan+0x118>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <TP_Scan+0x118>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <TP_Scan+0x118>)
 8006f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f4c:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <TP_Scan+0x118>)
 8006f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f54:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8006f56:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <TP_Scan+0x118>)
 8006f58:	7c1b      	ldrb	r3, [r3, #16]
 8006f5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f5e:	b2db      	uxtb	r3, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40020c00 	.word	0x40020c00
 8006f6c:	20000166 	.word	0x20000166
 8006f70:	20000164 	.word	0x20000164
 8006f74:	20000158 	.word	0x20000158

08006f78 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006f7e:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <MX_UART5_Init+0x50>)
 8006f80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <MX_UART5_Init+0x4c>)
 8006fb0:	f005 fd6a 	bl	800ca88 <HAL_UART_Init>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006fba:	f7fe fe85 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000714c 	.word	0x2000714c
 8006fc8:	40005000 	.word	0x40005000

08006fcc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006fd0:	4b11      	ldr	r3, [pc, #68]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006fd2:	4a12      	ldr	r2, [pc, #72]	; (800701c <MX_USART3_UART_Init+0x50>)
 8006fd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006fdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006fde:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006ff0:	4b09      	ldr	r3, [pc, #36]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006ff2:	220c      	movs	r2, #12
 8006ff4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ff6:	4b08      	ldr	r3, [pc, #32]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <MX_USART3_UART_Init+0x4c>)
 8007004:	f005 fd40 	bl	800ca88 <HAL_UART_Init>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800700e:	f7fe fe5b 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20007190 	.word	0x20007190
 800701c:	40004800 	.word	0x40004800

08007020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08c      	sub	sp, #48	; 0x30
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007028:	f107 031c 	add.w	r3, r7, #28
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a42      	ldr	r2, [pc, #264]	; (8007148 <HAL_UART_MspInit+0x128>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d14b      	bne.n	80070da <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	4b41      	ldr	r3, [pc, #260]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	4a40      	ldr	r2, [pc, #256]	; (800714c <HAL_UART_MspInit+0x12c>)
 800704c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007050:	6413      	str	r3, [r2, #64]	; 0x40
 8007052:	4b3e      	ldr	r3, [pc, #248]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	4b3a      	ldr	r3, [pc, #232]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	4a39      	ldr	r2, [pc, #228]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007068:	f043 0304 	orr.w	r3, r3, #4
 800706c:	6313      	str	r3, [r2, #48]	; 0x30
 800706e:	4b37      	ldr	r3, [pc, #220]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	4b33      	ldr	r3, [pc, #204]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	4a32      	ldr	r2, [pc, #200]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007084:	f043 0308 	orr.w	r3, r3, #8
 8007088:	6313      	str	r3, [r2, #48]	; 0x30
 800708a:	4b30      	ldr	r3, [pc, #192]	; (800714c <HAL_UART_MspInit+0x12c>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	613b      	str	r3, [r7, #16]
 8007094:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800709a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709c:	2302      	movs	r3, #2
 800709e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a4:	2303      	movs	r3, #3
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80070a8:	2308      	movs	r3, #8
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ac:	f107 031c 	add.w	r3, r7, #28
 80070b0:	4619      	mov	r1, r3
 80070b2:	4827      	ldr	r0, [pc, #156]	; (8007150 <HAL_UART_MspInit+0x130>)
 80070b4:	f000 fd40 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070b8:	2304      	movs	r3, #4
 80070ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070bc:	2302      	movs	r3, #2
 80070be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070c4:	2303      	movs	r3, #3
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80070c8:	2308      	movs	r3, #8
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070cc:	f107 031c 	add.w	r3, r7, #28
 80070d0:	4619      	mov	r1, r3
 80070d2:	4820      	ldr	r0, [pc, #128]	; (8007154 <HAL_UART_MspInit+0x134>)
 80070d4:	f000 fd30 	bl	8007b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80070d8:	e031      	b.n	800713e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_UART_MspInit+0x138>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d12c      	bne.n	800713e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	4b18      	ldr	r3, [pc, #96]	; (800714c <HAL_UART_MspInit+0x12c>)
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_UART_MspInit+0x12c>)
 80070ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f2:	6413      	str	r3, [r2, #64]	; 0x40
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <HAL_UART_MspInit+0x12c>)
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007100:	2300      	movs	r3, #0
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	4a10      	ldr	r2, [pc, #64]	; (800714c <HAL_UART_MspInit+0x12c>)
 800710a:	f043 0302 	orr.w	r3, r3, #2
 800710e:	6313      	str	r3, [r2, #48]	; 0x30
 8007110:	4b0e      	ldr	r3, [pc, #56]	; (800714c <HAL_UART_MspInit+0x12c>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 800711c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007122:	2302      	movs	r3, #2
 8007124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007126:	2300      	movs	r3, #0
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712a:	2303      	movs	r3, #3
 800712c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800712e:	2307      	movs	r3, #7
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007132:	f107 031c 	add.w	r3, r7, #28
 8007136:	4619      	mov	r1, r3
 8007138:	4808      	ldr	r0, [pc, #32]	; (800715c <HAL_UART_MspInit+0x13c>)
 800713a:	f000 fcfd 	bl	8007b38 <HAL_GPIO_Init>
}
 800713e:	bf00      	nop
 8007140:	3730      	adds	r7, #48	; 0x30
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40005000 	.word	0x40005000
 800714c:	40023800 	.word	0x40023800
 8007150:	40020800 	.word	0x40020800
 8007154:	40020c00 	.word	0x40020c00
 8007158:	40004800 	.word	0x40004800
 800715c:	40020400 	.word	0x40020400

08007160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007164:	480d      	ldr	r0, [pc, #52]	; (800719c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007166:	490e      	ldr	r1, [pc, #56]	; (80071a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007168:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800716a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800716c:	e002      	b.n	8007174 <LoopCopyDataInit>

0800716e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800716e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007172:	3304      	adds	r3, #4

08007174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007178:	d3f9      	bcc.n	800716e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800717a:	4a0b      	ldr	r2, [pc, #44]	; (80071a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800717c:	4c0b      	ldr	r4, [pc, #44]	; (80071ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800717e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007180:	e001      	b.n	8007186 <LoopFillZerobss>

08007182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007184:	3204      	adds	r2, #4

08007186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007188:	d3fb      	bcc.n	8007182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800718a:	f7ff fb87 	bl	800689c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800718e:	f006 f83d 	bl	800d20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007192:	f7fe fcfd 	bl	8005b90 <main>
  bx  lr    
 8007196:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800719c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80071a0:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80071a4:	080107c4 	.word	0x080107c4
  ldr r2, =_sbss
 80071a8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80071ac:	200071d8 	.word	0x200071d8

080071b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071b0:	e7fe      	b.n	80071b0 <ADC_IRQHandler>
	...

080071b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <HAL_Init+0x40>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <HAL_Init+0x40>)
 80071be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <HAL_Init+0x40>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a0a      	ldr	r2, [pc, #40]	; (80071f4 <HAL_Init+0x40>)
 80071ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071d0:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <HAL_Init+0x40>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a07      	ldr	r2, [pc, #28]	; (80071f4 <HAL_Init+0x40>)
 80071d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071dc:	2003      	movs	r0, #3
 80071de:	f000 f94f 	bl	8007480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071e2:	200f      	movs	r0, #15
 80071e4:	f000 f808 	bl	80071f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071e8:	f7ff fac0 	bl	800676c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40023c00 	.word	0x40023c00

080071f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007200:	4b12      	ldr	r3, [pc, #72]	; (800724c <HAL_InitTick+0x54>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b12      	ldr	r3, [pc, #72]	; (8007250 <HAL_InitTick+0x58>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	4619      	mov	r1, r3
 800720a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800720e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007212:	fbb2 f3f3 	udiv	r3, r2, r3
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f967 	bl	80074ea <HAL_SYSTICK_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e00e      	b.n	8007244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b0f      	cmp	r3, #15
 800722a:	d80a      	bhi.n	8007242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800722c:	2200      	movs	r2, #0
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	f000 f92f 	bl	8007496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007238:	4a06      	ldr	r2, [pc, #24]	; (8007254 <HAL_InitTick+0x5c>)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20000154 	.word	0x20000154
 8007250:	20000184 	.word	0x20000184
 8007254:	20000180 	.word	0x20000180

08007258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_IncTick+0x20>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <HAL_IncTick+0x24>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4413      	add	r3, r2
 8007268:	4a04      	ldr	r2, [pc, #16]	; (800727c <HAL_IncTick+0x24>)
 800726a:	6013      	str	r3, [r2, #0]
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000184 	.word	0x20000184
 800727c:	200071d4 	.word	0x200071d4

08007280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  return uwTick;
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <HAL_GetTick+0x14>)
 8007286:	681b      	ldr	r3, [r3, #0]
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	200071d4 	.word	0x200071d4

08007298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072a0:	f7ff ffee 	bl	8007280 <HAL_GetTick>
 80072a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d005      	beq.n	80072be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <HAL_Delay+0x44>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072be:	bf00      	nop
 80072c0:	f7ff ffde 	bl	8007280 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d8f7      	bhi.n	80072c0 <HAL_Delay+0x28>
  {
  }
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000184 	.word	0x20000184

080072e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <__NVIC_SetPriorityGrouping+0x44>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072fc:	4013      	ands	r3, r2
 80072fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800730c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <__NVIC_SetPriorityGrouping+0x44>)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	60d3      	str	r3, [r2, #12]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	e000ed00 	.word	0xe000ed00

08007328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800732c:	4b04      	ldr	r3, [pc, #16]	; (8007340 <__NVIC_GetPriorityGrouping+0x18>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	0a1b      	lsrs	r3, r3, #8
 8007332:	f003 0307 	and.w	r3, r3, #7
}
 8007336:	4618      	mov	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800734e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007352:	2b00      	cmp	r3, #0
 8007354:	db0b      	blt.n	800736e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	f003 021f 	and.w	r2, r3, #31
 800735c:	4907      	ldr	r1, [pc, #28]	; (800737c <__NVIC_EnableIRQ+0x38>)
 800735e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007362:	095b      	lsrs	r3, r3, #5
 8007364:	2001      	movs	r0, #1
 8007366:	fa00 f202 	lsl.w	r2, r0, r2
 800736a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	e000e100 	.word	0xe000e100

08007380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800738c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db0a      	blt.n	80073aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	490c      	ldr	r1, [pc, #48]	; (80073cc <__NVIC_SetPriority+0x4c>)
 800739a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800739e:	0112      	lsls	r2, r2, #4
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	440b      	add	r3, r1
 80073a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073a8:	e00a      	b.n	80073c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	4908      	ldr	r1, [pc, #32]	; (80073d0 <__NVIC_SetPriority+0x50>)
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	3b04      	subs	r3, #4
 80073b8:	0112      	lsls	r2, r2, #4
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	440b      	add	r3, r1
 80073be:	761a      	strb	r2, [r3, #24]
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	e000e100 	.word	0xe000e100
 80073d0:	e000ed00 	.word	0xe000ed00

080073d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b089      	sub	sp, #36	; 0x24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f1c3 0307 	rsb	r3, r3, #7
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	bf28      	it	cs
 80073f2:	2304      	movcs	r3, #4
 80073f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2b06      	cmp	r3, #6
 80073fc:	d902      	bls.n	8007404 <NVIC_EncodePriority+0x30>
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	3b03      	subs	r3, #3
 8007402:	e000      	b.n	8007406 <NVIC_EncodePriority+0x32>
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007408:	f04f 32ff 	mov.w	r2, #4294967295
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43da      	mvns	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	401a      	ands	r2, r3
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800741c:	f04f 31ff 	mov.w	r1, #4294967295
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	fa01 f303 	lsl.w	r3, r1, r3
 8007426:	43d9      	mvns	r1, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800742c:	4313      	orrs	r3, r2
         );
}
 800742e:	4618      	mov	r0, r3
 8007430:	3724      	adds	r7, #36	; 0x24
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3b01      	subs	r3, #1
 8007448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800744c:	d301      	bcc.n	8007452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800744e:	2301      	movs	r3, #1
 8007450:	e00f      	b.n	8007472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007452:	4a0a      	ldr	r2, [pc, #40]	; (800747c <SysTick_Config+0x40>)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3b01      	subs	r3, #1
 8007458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800745a:	210f      	movs	r1, #15
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	f7ff ff8e 	bl	8007380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <SysTick_Config+0x40>)
 8007466:	2200      	movs	r2, #0
 8007468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800746a:	4b04      	ldr	r3, [pc, #16]	; (800747c <SysTick_Config+0x40>)
 800746c:	2207      	movs	r2, #7
 800746e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	e000e010 	.word	0xe000e010

08007480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff ff29 	bl	80072e0 <__NVIC_SetPriorityGrouping>
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007496:	b580      	push	{r7, lr}
 8007498:	b086      	sub	sp, #24
 800749a:	af00      	add	r7, sp, #0
 800749c:	4603      	mov	r3, r0
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80074a8:	f7ff ff3e 	bl	8007328 <__NVIC_GetPriorityGrouping>
 80074ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	6978      	ldr	r0, [r7, #20]
 80074b4:	f7ff ff8e 	bl	80073d4 <NVIC_EncodePriority>
 80074b8:	4602      	mov	r2, r0
 80074ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff ff5d 	bl	8007380 <__NVIC_SetPriority>
}
 80074c6:	bf00      	nop
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	4603      	mov	r3, r0
 80074d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff ff31 	bl	8007344 <__NVIC_EnableIRQ>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff ffa2 	bl	800743c <SysTick_Config>
 80074f8:	4603      	mov	r3, r0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007510:	f7ff feb6 	bl	8007280 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e099      	b.n	8007654 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0201 	bic.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007540:	e00f      	b.n	8007562 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007542:	f7ff fe9d 	bl	8007280 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b05      	cmp	r3, #5
 800754e:	d908      	bls.n	8007562 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2203      	movs	r2, #3
 800755a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e078      	b.n	8007654 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e8      	bne.n	8007542 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4b38      	ldr	r3, [pc, #224]	; (800765c <HAL_DMA_Init+0x158>)
 800757c:	4013      	ands	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800758e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800759a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d107      	bne.n	80075cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	4313      	orrs	r3, r2
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d117      	bne.n	8007626 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fa19 	bl	8007a40 <DMA_CheckFifoParam>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2240      	movs	r2, #64	; 0x40
 8007618:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007622:	2301      	movs	r3, #1
 8007624:	e016      	b.n	8007654 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9d0 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 8007634:	4603      	mov	r3, r0
 8007636:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763c:	223f      	movs	r2, #63	; 0x3f
 800763e:	409a      	lsls	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	f010803f 	.word	0xf010803f

08007660 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d004      	beq.n	800767e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2280      	movs	r2, #128	; 0x80
 8007678:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e00c      	b.n	8007698 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2205      	movs	r2, #5
 8007682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076b0:	4b8e      	ldr	r3, [pc, #568]	; (80078ec <HAL_DMA_IRQHandler+0x248>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a8e      	ldr	r2, [pc, #568]	; (80078f0 <HAL_DMA_IRQHandler+0x24c>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	0a9b      	lsrs	r3, r3, #10
 80076bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ce:	2208      	movs	r2, #8
 80076d0:	409a      	lsls	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4013      	ands	r3, r2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01a      	beq.n	8007710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d013      	beq.n	8007710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0204 	bic.w	r2, r2, #4
 80076f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fc:	2208      	movs	r2, #8
 80076fe:	409a      	lsls	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007708:	f043 0201 	orr.w	r2, r3, #1
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007714:	2201      	movs	r2, #1
 8007716:	409a      	lsls	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d012      	beq.n	8007746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007732:	2201      	movs	r2, #1
 8007734:	409a      	lsls	r2, r3
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	f043 0202 	orr.w	r2, r3, #2
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774a:	2204      	movs	r2, #4
 800774c:	409a      	lsls	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007768:	2204      	movs	r2, #4
 800776a:	409a      	lsls	r2, r3
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007774:	f043 0204 	orr.w	r2, r3, #4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007780:	2210      	movs	r2, #16
 8007782:	409a      	lsls	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4013      	ands	r3, r2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d043      	beq.n	8007814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d03c      	beq.n	8007814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779e:	2210      	movs	r2, #16
 80077a0:	409a      	lsls	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d018      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d108      	bne.n	80077d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d024      	beq.n	8007814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
 80077d2:	e01f      	b.n	8007814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
 80077e4:	e016      	b.n	8007814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0208 	bic.w	r2, r2, #8
 8007802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007818:	2220      	movs	r2, #32
 800781a:	409a      	lsls	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 808f 	beq.w	8007944 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8087 	beq.w	8007944 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783a:	2220      	movs	r2, #32
 800783c:	409a      	lsls	r2, r3
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b05      	cmp	r3, #5
 800784c:	d136      	bne.n	80078bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0216 	bic.w	r2, r2, #22
 800785c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695a      	ldr	r2, [r3, #20]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800786c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <HAL_DMA_IRQHandler+0x1da>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0208 	bic.w	r2, r2, #8
 800788c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007892:	223f      	movs	r2, #63	; 0x3f
 8007894:	409a      	lsls	r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d07e      	beq.n	80079b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
        }
        return;
 80078ba:	e079      	b.n	80079b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01d      	beq.n	8007906 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10d      	bne.n	80078f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d031      	beq.n	8007944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
 80078e8:	e02c      	b.n	8007944 <HAL_DMA_IRQHandler+0x2a0>
 80078ea:	bf00      	nop
 80078ec:	20000154 	.word	0x20000154
 80078f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d023      	beq.n	8007944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
 8007904:	e01e      	b.n	8007944 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10f      	bne.n	8007934 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0210 	bic.w	r2, r2, #16
 8007922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007948:	2b00      	cmp	r3, #0
 800794a:	d032      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d022      	beq.n	800799e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2205      	movs	r2, #5
 800795c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	3301      	adds	r3, #1
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	429a      	cmp	r2, r3
 800797a:	d307      	bcc.n	800798c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f2      	bne.n	8007970 <HAL_DMA_IRQHandler+0x2cc>
 800798a:	e000      	b.n	800798e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800798c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4798      	blx	r3
 80079ae:	e000      	b.n	80079b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80079b0:	bf00      	nop
    }
  }
}
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079c6:	b2db      	uxtb	r3, r3
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	3b10      	subs	r3, #16
 80079e4:	4a14      	ldr	r2, [pc, #80]	; (8007a38 <DMA_CalcBaseAndBitshift+0x64>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079ee:	4a13      	ldr	r2, [pc, #76]	; (8007a3c <DMA_CalcBaseAndBitshift+0x68>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d909      	bls.n	8007a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	659a      	str	r2, [r3, #88]	; 0x58
 8007a14:	e007      	b.n	8007a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	aaaaaaab 	.word	0xaaaaaaab
 8007a3c:	08010784 	.word	0x08010784

08007a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d11f      	bne.n	8007a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d856      	bhi.n	8007b0e <DMA_CheckFifoParam+0xce>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <DMA_CheckFifoParam+0x28>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a8b 	.word	0x08007a8b
 8007a70:	08007a79 	.word	0x08007a79
 8007a74:	08007b0f 	.word	0x08007b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d046      	beq.n	8007b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a88:	e043      	b.n	8007b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a92:	d140      	bne.n	8007b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a98:	e03d      	b.n	8007b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa2:	d121      	bne.n	8007ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d837      	bhi.n	8007b1a <DMA_CheckFifoParam+0xda>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <DMA_CheckFifoParam+0x70>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ac7 	.word	0x08007ac7
 8007ab8:	08007ac1 	.word	0x08007ac1
 8007abc:	08007ad9 	.word	0x08007ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac4:	e030      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d025      	beq.n	8007b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ad6:	e022      	b.n	8007b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ae0:	d11f      	bne.n	8007b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ae6:	e01c      	b.n	8007b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d903      	bls.n	8007af6 <DMA_CheckFifoParam+0xb6>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d003      	beq.n	8007afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007af4:	e018      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e015      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0c:	e00b      	b.n	8007b26 <DMA_CheckFifoParam+0xe6>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e00a      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b12:	bf00      	nop
 8007b14:	e008      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b16:	bf00      	nop
 8007b18:	e006      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e004      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b26:	bf00      	nop
    }
  } 
  
  return status; 
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b089      	sub	sp, #36	; 0x24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	e16b      	b.n	8007e2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b54:	2201      	movs	r2, #1
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4013      	ands	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	f040 815a 	bne.w	8007e26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d005      	beq.n	8007b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d130      	bne.n	8007bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	2203      	movs	r2, #3
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	091b      	lsrs	r3, r3, #4
 8007bd6:	f003 0201 	and.w	r2, r3, #1
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d017      	beq.n	8007c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	2203      	movs	r2, #3
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d123      	bne.n	8007c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	08da      	lsrs	r2, r3, #3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3208      	adds	r2, #8
 8007c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	220f      	movs	r2, #15
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4013      	ands	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	08da      	lsrs	r2, r3, #3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3208      	adds	r2, #8
 8007c76:	69b9      	ldr	r1, [r7, #24]
 8007c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	2203      	movs	r2, #3
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f003 0203 	and.w	r2, r3, #3
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80b4 	beq.w	8007e26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	4b60      	ldr	r3, [pc, #384]	; (8007e44 <HAL_GPIO_Init+0x30c>)
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc6:	4a5f      	ldr	r2, [pc, #380]	; (8007e44 <HAL_GPIO_Init+0x30c>)
 8007cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8007cce:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <HAL_GPIO_Init+0x30c>)
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cda:	4a5b      	ldr	r2, [pc, #364]	; (8007e48 <HAL_GPIO_Init+0x310>)
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	089b      	lsrs	r3, r3, #2
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	220f      	movs	r2, #15
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a52      	ldr	r2, [pc, #328]	; (8007e4c <HAL_GPIO_Init+0x314>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d02b      	beq.n	8007d5e <HAL_GPIO_Init+0x226>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a51      	ldr	r2, [pc, #324]	; (8007e50 <HAL_GPIO_Init+0x318>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d025      	beq.n	8007d5a <HAL_GPIO_Init+0x222>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a50      	ldr	r2, [pc, #320]	; (8007e54 <HAL_GPIO_Init+0x31c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01f      	beq.n	8007d56 <HAL_GPIO_Init+0x21e>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a4f      	ldr	r2, [pc, #316]	; (8007e58 <HAL_GPIO_Init+0x320>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d019      	beq.n	8007d52 <HAL_GPIO_Init+0x21a>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a4e      	ldr	r2, [pc, #312]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_GPIO_Init+0x216>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a4d      	ldr	r2, [pc, #308]	; (8007e60 <HAL_GPIO_Init+0x328>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00d      	beq.n	8007d4a <HAL_GPIO_Init+0x212>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a4c      	ldr	r2, [pc, #304]	; (8007e64 <HAL_GPIO_Init+0x32c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d007      	beq.n	8007d46 <HAL_GPIO_Init+0x20e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a4b      	ldr	r2, [pc, #300]	; (8007e68 <HAL_GPIO_Init+0x330>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d101      	bne.n	8007d42 <HAL_GPIO_Init+0x20a>
 8007d3e:	2307      	movs	r3, #7
 8007d40:	e00e      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d42:	2308      	movs	r3, #8
 8007d44:	e00c      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d46:	2306      	movs	r3, #6
 8007d48:	e00a      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d4a:	2305      	movs	r3, #5
 8007d4c:	e008      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d4e:	2304      	movs	r3, #4
 8007d50:	e006      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d52:	2303      	movs	r3, #3
 8007d54:	e004      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e002      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_GPIO_Init+0x228>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	f002 0203 	and.w	r2, r2, #3
 8007d66:	0092      	lsls	r2, r2, #2
 8007d68:	4093      	lsls	r3, r2
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d70:	4935      	ldr	r1, [pc, #212]	; (8007e48 <HAL_GPIO_Init+0x310>)
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	3302      	adds	r3, #2
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d7e:	4b3b      	ldr	r3, [pc, #236]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	43db      	mvns	r3, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007da2:	4a32      	ldr	r2, [pc, #200]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007da8:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	4013      	ands	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007dcc:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dd2:	4b26      	ldr	r3, [pc, #152]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	4013      	ands	r3, r2
 8007de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007df6:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007dfc:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	43db      	mvns	r3, r3
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e20:	4a12      	ldr	r2, [pc, #72]	; (8007e6c <HAL_GPIO_Init+0x334>)
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b0f      	cmp	r3, #15
 8007e30:	f67f ae90 	bls.w	8007b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	3724      	adds	r7, #36	; 0x24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40023800 	.word	0x40023800
 8007e48:	40013800 	.word	0x40013800
 8007e4c:	40020000 	.word	0x40020000
 8007e50:	40020400 	.word	0x40020400
 8007e54:	40020800 	.word	0x40020800
 8007e58:	40020c00 	.word	0x40020c00
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40021400 	.word	0x40021400
 8007e64:	40021800 	.word	0x40021800
 8007e68:	40021c00 	.word	0x40021c00
 8007e6c:	40013c00 	.word	0x40013c00

08007e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	887b      	ldrh	r3, [r7, #2]
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
 8007e8c:	e001      	b.n	8007e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
 8007eac:	4613      	mov	r3, r2
 8007eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007eb0:	787b      	ldrb	r3, [r7, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eb6:	887a      	ldrh	r2, [r7, #2]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ebc:	e003      	b.n	8007ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	041a      	lsls	r2, r3, #16
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	619a      	str	r2, [r3, #24]
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
	...

08007ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e12b      	b.n	800813e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fd fd98 	bl	8005a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2224      	movs	r2, #36	; 0x24
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0201 	bic.w	r2, r2, #1
 8007f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f38:	f003 f8d6 	bl	800b0e8 <HAL_RCC_GetPCLK1Freq>
 8007f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	4a81      	ldr	r2, [pc, #516]	; (8008148 <HAL_I2C_Init+0x274>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d807      	bhi.n	8007f58 <HAL_I2C_Init+0x84>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a80      	ldr	r2, [pc, #512]	; (800814c <HAL_I2C_Init+0x278>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	bf94      	ite	ls
 8007f50:	2301      	movls	r3, #1
 8007f52:	2300      	movhi	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e006      	b.n	8007f66 <HAL_I2C_Init+0x92>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a7d      	ldr	r2, [pc, #500]	; (8008150 <HAL_I2C_Init+0x27c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	bf94      	ite	ls
 8007f60:	2301      	movls	r3, #1
 8007f62:	2300      	movhi	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e0e7      	b.n	800813e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4a78      	ldr	r2, [pc, #480]	; (8008154 <HAL_I2C_Init+0x280>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	0c9b      	lsrs	r3, r3, #18
 8007f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4a6a      	ldr	r2, [pc, #424]	; (8008148 <HAL_I2C_Init+0x274>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d802      	bhi.n	8007fa8 <HAL_I2C_Init+0xd4>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	e009      	b.n	8007fbc <HAL_I2C_Init+0xe8>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
 8007fb2:	4a69      	ldr	r2, [pc, #420]	; (8008158 <HAL_I2C_Init+0x284>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	099b      	lsrs	r3, r3, #6
 8007fba:	3301      	adds	r3, #1
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	495c      	ldr	r1, [pc, #368]	; (8008148 <HAL_I2C_Init+0x274>)
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	d819      	bhi.n	8008010 <HAL_I2C_Init+0x13c>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	1e59      	subs	r1, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fea:	1c59      	adds	r1, r3, #1
 8007fec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ff0:	400b      	ands	r3, r1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <HAL_I2C_Init+0x138>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1e59      	subs	r1, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	fbb1 f3f3 	udiv	r3, r1, r3
 8008004:	3301      	adds	r3, #1
 8008006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800800a:	e051      	b.n	80080b0 <HAL_I2C_Init+0x1dc>
 800800c:	2304      	movs	r3, #4
 800800e:	e04f      	b.n	80080b0 <HAL_I2C_Init+0x1dc>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d111      	bne.n	800803c <HAL_I2C_Init+0x168>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	1e58      	subs	r0, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6859      	ldr	r1, [r3, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	440b      	add	r3, r1
 8008026:	fbb0 f3f3 	udiv	r3, r0, r3
 800802a:	3301      	adds	r3, #1
 800802c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf0c      	ite	eq
 8008034:	2301      	moveq	r3, #1
 8008036:	2300      	movne	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	e012      	b.n	8008062 <HAL_I2C_Init+0x18e>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	1e58      	subs	r0, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6859      	ldr	r1, [r3, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	0099      	lsls	r1, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008052:	3301      	adds	r3, #1
 8008054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008058:	2b00      	cmp	r3, #0
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_I2C_Init+0x196>
 8008066:	2301      	movs	r3, #1
 8008068:	e022      	b.n	80080b0 <HAL_I2C_Init+0x1dc>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10e      	bne.n	8008090 <HAL_I2C_Init+0x1bc>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1e58      	subs	r0, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6859      	ldr	r1, [r3, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	440b      	add	r3, r1
 8008080:	fbb0 f3f3 	udiv	r3, r0, r3
 8008084:	3301      	adds	r3, #1
 8008086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800808a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800808e:	e00f      	b.n	80080b0 <HAL_I2C_Init+0x1dc>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	1e58      	subs	r0, r3, #1
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6859      	ldr	r1, [r3, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	0099      	lsls	r1, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080a6:	3301      	adds	r3, #1
 80080a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	6809      	ldr	r1, [r1, #0]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69da      	ldr	r2, [r3, #28]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80080de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6911      	ldr	r1, [r2, #16]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	68d2      	ldr	r2, [r2, #12]
 80080ea:	4311      	orrs	r1, r2
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	6812      	ldr	r2, [r2, #0]
 80080f0:	430b      	orrs	r3, r1
 80080f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695a      	ldr	r2, [r3, #20]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	000186a0 	.word	0x000186a0
 800814c:	001e847f 	.word	0x001e847f
 8008150:	003d08ff 	.word	0x003d08ff
 8008154:	431bde83 	.word	0x431bde83
 8008158:	10624dd3 	.word	0x10624dd3

0800815c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af02      	add	r7, sp, #8
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	461a      	mov	r2, r3
 800816a:	4603      	mov	r3, r0
 800816c:	817b      	strh	r3, [r7, #10]
 800816e:	460b      	mov	r3, r1
 8008170:	813b      	strh	r3, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008176:	f7ff f883 	bl	8007280 <HAL_GetTick>
 800817a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b20      	cmp	r3, #32
 8008186:	f040 80d9 	bne.w	800833c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	2319      	movs	r3, #25
 8008190:	2201      	movs	r2, #1
 8008192:	496d      	ldr	r1, [pc, #436]	; (8008348 <HAL_I2C_Mem_Write+0x1ec>)
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f002 f90d 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80081a0:	2302      	movs	r3, #2
 80081a2:	e0cc      	b.n	800833e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d101      	bne.n	80081b2 <HAL_I2C_Mem_Write+0x56>
 80081ae:	2302      	movs	r3, #2
 80081b0:	e0c5      	b.n	800833e <HAL_I2C_Mem_Write+0x1e2>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d007      	beq.n	80081d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2221      	movs	r2, #33	; 0x21
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2240      	movs	r2, #64	; 0x40
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4a4d      	ldr	r2, [pc, #308]	; (800834c <HAL_I2C_Mem_Write+0x1f0>)
 8008218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800821a:	88f8      	ldrh	r0, [r7, #6]
 800821c:	893a      	ldrh	r2, [r7, #8]
 800821e:	8979      	ldrh	r1, [r7, #10]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4603      	mov	r3, r0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 fe9c 	bl	8009f68 <I2C_RequestMemoryWrite>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d052      	beq.n	80082dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e081      	b.n	800833e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f002 f98e 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	2b04      	cmp	r3, #4
 8008250:	d107      	bne.n	8008262 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e06b      	b.n	800833e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d11b      	bne.n	80082dc <HAL_I2C_Mem_Write+0x180>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1aa      	bne.n	800823a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f002 f97a 	bl	800a5e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00d      	beq.n	8008310 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d107      	bne.n	800830c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800830a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e016      	b.n	800833e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800831e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	e000      	b.n	800833e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800833c:	2302      	movs	r3, #2
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	00100002 	.word	0x00100002
 800834c:	ffff0000 	.word	0xffff0000

08008350 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	; 0x30
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	4608      	mov	r0, r1
 800835a:	4611      	mov	r1, r2
 800835c:	461a      	mov	r2, r3
 800835e:	4603      	mov	r3, r0
 8008360:	817b      	strh	r3, [r7, #10]
 8008362:	460b      	mov	r3, r1
 8008364:	813b      	strh	r3, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800836a:	f7fe ff89 	bl	8007280 <HAL_GetTick>
 800836e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b20      	cmp	r3, #32
 800837a:	f040 8208 	bne.w	800878e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	2319      	movs	r3, #25
 8008384:	2201      	movs	r2, #1
 8008386:	497b      	ldr	r1, [pc, #492]	; (8008574 <HAL_I2C_Mem_Read+0x224>)
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f002 f813 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008394:	2302      	movs	r3, #2
 8008396:	e1fb      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_I2C_Mem_Read+0x56>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e1f4      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d007      	beq.n	80083cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2222      	movs	r2, #34	; 0x22
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2240      	movs	r2, #64	; 0x40
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80083fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4a5b      	ldr	r2, [pc, #364]	; (8008578 <HAL_I2C_Mem_Read+0x228>)
 800840c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800840e:	88f8      	ldrh	r0, [r7, #6]
 8008410:	893a      	ldrh	r2, [r7, #8]
 8008412:	8979      	ldrh	r1, [r7, #10]
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4603      	mov	r3, r0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f001 fe38 	bl	800a094 <I2C_RequestMemoryRead>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e1b0      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d113      	bne.n	800845e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008436:	2300      	movs	r3, #0
 8008438:	623b      	str	r3, [r7, #32]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	623b      	str	r3, [r7, #32]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	623b      	str	r3, [r7, #32]
 800844a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e184      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008462:	2b01      	cmp	r3, #1
 8008464:	d11b      	bne.n	800849e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008474:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	61fb      	str	r3, [r7, #28]
 800848a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e164      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d11b      	bne.n	80084de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084c6:	2300      	movs	r3, #0
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	e144      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80084f4:	e138      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	f200 80f1 	bhi.w	80086e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008504:	2b01      	cmp	r3, #1
 8008506:	d123      	bne.n	8008550 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f002 f8db 	bl	800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e139      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008544:	b29b      	uxth	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800854e:	e10b      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008554:	2b02      	cmp	r3, #2
 8008556:	d14e      	bne.n	80085f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	2200      	movs	r2, #0
 8008560:	4906      	ldr	r1, [pc, #24]	; (800857c <HAL_I2C_Mem_Read+0x22c>)
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f001 ff26 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e10e      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
 8008572:	bf00      	nop
 8008574:	00100002 	.word	0x00100002
 8008578:	ffff0000 	.word	0xffff0000
 800857c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691a      	ldr	r2, [r3, #16]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085f4:	e0b8      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	2200      	movs	r2, #0
 80085fe:	4966      	ldr	r1, [pc, #408]	; (8008798 <HAL_I2C_Mem_Read+0x448>)
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f001 fed7 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0bf      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800861e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008648:	b29b      	uxth	r3, r3
 800864a:	3b01      	subs	r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	2200      	movs	r2, #0
 800865a:	494f      	ldr	r1, [pc, #316]	; (8008798 <HAL_I2C_Mem_Read+0x448>)
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f001 fea9 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e091      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800867a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	691a      	ldr	r2, [r3, #16]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	3b01      	subs	r3, #1
 80086da:	b29a      	uxth	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086e0:	e042      	b.n	8008768 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f001 ffee 	bl	800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e04c      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008712:	3b01      	subs	r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800871e:	b29b      	uxth	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d118      	bne.n	8008768 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	b2d2      	uxtb	r2, r2
 8008742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	3b01      	subs	r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	f47f aec2 	bne.w	80084f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2220      	movs	r2, #32
 8008776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	e000      	b.n	8008790 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800878e:	2302      	movs	r3, #2
  }
}
 8008790:	4618      	mov	r0, r3
 8008792:	3728      	adds	r7, #40	; 0x28
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	00010004 	.word	0x00010004

0800879c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d003      	beq.n	80087d4 <HAL_I2C_EV_IRQHandler+0x38>
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	2b40      	cmp	r3, #64	; 0x40
 80087d0:	f040 80c1 	bne.w	8008956 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10d      	bne.n	800880a <HAL_I2C_EV_IRQHandler+0x6e>
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80087f4:	d003      	beq.n	80087fe <HAL_I2C_EV_IRQHandler+0x62>
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80087fc:	d101      	bne.n	8008802 <HAL_I2C_EV_IRQHandler+0x66>
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <HAL_I2C_EV_IRQHandler+0x68>
 8008802:	2300      	movs	r3, #0
 8008804:	2b01      	cmp	r3, #1
 8008806:	f000 8132 	beq.w	8008a6e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00c      	beq.n	800882e <HAL_I2C_EV_IRQHandler+0x92>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	0a5b      	lsrs	r3, r3, #9
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d006      	beq.n	800882e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 ffd6 	bl	800a7d2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fd83 	bl	8009332 <I2C_Master_SB>
 800882c:	e092      	b.n	8008954 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	08db      	lsrs	r3, r3, #3
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <HAL_I2C_EV_IRQHandler+0xb2>
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	0a5b      	lsrs	r3, r3, #9
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fdf9 	bl	800943e <I2C_Master_ADD10>
 800884c:	e082      	b.n	8008954 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <HAL_I2C_EV_IRQHandler+0xd2>
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	0a5b      	lsrs	r3, r3, #9
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fe13 	bl	8009492 <I2C_Master_ADDR>
 800886c:	e072      	b.n	8008954 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	089b      	lsrs	r3, r3, #2
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d03b      	beq.n	80088f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008888:	f000 80f3 	beq.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	09db      	lsrs	r3, r3, #7
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00f      	beq.n	80088b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	0a9b      	lsrs	r3, r3, #10
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d009      	beq.n	80088b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	089b      	lsrs	r3, r3, #2
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f9f3 	bl	8008c9c <I2C_MasterTransmit_TXE>
 80088b6:	e04d      	b.n	8008954 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	089b      	lsrs	r3, r3, #2
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80d6 	beq.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	0a5b      	lsrs	r3, r3, #9
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80cf 	beq.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b21      	cmp	r3, #33	; 0x21
 80088d8:	d103      	bne.n	80088e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa7a 	bl	8008dd4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088e0:	e0c7      	b.n	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	f040 80c4 	bne.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fae8 	bl	8008ec0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088f0:	e0bf      	b.n	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008900:	f000 80b7 	beq.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	099b      	lsrs	r3, r3, #6
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00f      	beq.n	8008930 <HAL_I2C_EV_IRQHandler+0x194>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	0a9b      	lsrs	r3, r3, #10
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <HAL_I2C_EV_IRQHandler+0x194>
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	089b      	lsrs	r3, r3, #2
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d103      	bne.n	8008930 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fb5d 	bl	8008fe8 <I2C_MasterReceive_RXNE>
 800892e:	e011      	b.n	8008954 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	089b      	lsrs	r3, r3, #2
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 809a 	beq.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	0a5b      	lsrs	r3, r3, #9
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 8093 	beq.w	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc06 	bl	800915e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008952:	e08e      	b.n	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008954:	e08d      	b.n	8008a72 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	e007      	b.n	8008978 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d012      	beq.n	80089aa <HAL_I2C_EV_IRQHandler+0x20e>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	0a5b      	lsrs	r3, r3, #9
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00c      	beq.n	80089aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80089a0:	69b9      	ldr	r1, [r7, #24]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 ffc4 	bl	8009930 <I2C_Slave_ADDR>
 80089a8:	e066      	b.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <HAL_I2C_EV_IRQHandler+0x22e>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	0a5b      	lsrs	r3, r3, #9
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fffe 	bl	80099c4 <I2C_Slave_STOPF>
 80089c8:	e056      	b.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b21      	cmp	r3, #33	; 0x21
 80089ce:	d002      	beq.n	80089d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	2b29      	cmp	r3, #41	; 0x29
 80089d4:	d125      	bne.n	8008a22 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	09db      	lsrs	r3, r3, #7
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00f      	beq.n	8008a02 <HAL_I2C_EV_IRQHandler+0x266>
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	0a9b      	lsrs	r3, r3, #10
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d009      	beq.n	8008a02 <HAL_I2C_EV_IRQHandler+0x266>
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	089b      	lsrs	r3, r3, #2
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d103      	bne.n	8008a02 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 feda 	bl	80097b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a00:	e039      	b.n	8008a76 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	089b      	lsrs	r3, r3, #2
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d033      	beq.n	8008a76 <HAL_I2C_EV_IRQHandler+0x2da>
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	0a5b      	lsrs	r3, r3, #9
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d02d      	beq.n	8008a76 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 ff07 	bl	800982e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a20:	e029      	b.n	8008a76 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	099b      	lsrs	r3, r3, #6
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00f      	beq.n	8008a4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	0a9b      	lsrs	r3, r3, #10
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	089b      	lsrs	r3, r3, #2
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 ff12 	bl	8009870 <I2C_SlaveReceive_RXNE>
 8008a4c:	e014      	b.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	089b      	lsrs	r3, r3, #2
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 ff40 	bl	80098ec <I2C_SlaveReceive_BTF>
 8008a6c:	e004      	b.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008a6e:	bf00      	nop
 8008a70:	e002      	b.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a72:	bf00      	nop
 8008a74:	e000      	b.n	8008a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b08a      	sub	sp, #40	; 0x28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	0a1b      	lsrs	r3, r3, #8
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <HAL_I2C_ER_IRQHandler+0x4e>
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	0a1b      	lsrs	r3, r3, #8
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d008      	beq.n	8008acc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	f043 0301 	orr.w	r3, r3, #1
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008aca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	0a5b      	lsrs	r3, r3, #9
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <HAL_I2C_ER_IRQHandler+0x78>
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	0a1b      	lsrs	r3, r3, #8
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d008      	beq.n	8008af6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	f043 0302 	orr.w	r3, r3, #2
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008af4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	0a9b      	lsrs	r3, r3, #10
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d03f      	beq.n	8008b82 <HAL_I2C_ER_IRQHandler+0x104>
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	0a1b      	lsrs	r3, r3, #8
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d039      	beq.n	8008b82 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008b0e:	7efb      	ldrb	r3, [r7, #27]
 8008b10:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b20:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008b28:	7ebb      	ldrb	r3, [r7, #26]
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d112      	bne.n	8008b54 <HAL_I2C_ER_IRQHandler+0xd6>
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10f      	bne.n	8008b54 <HAL_I2C_ER_IRQHandler+0xd6>
 8008b34:	7cfb      	ldrb	r3, [r7, #19]
 8008b36:	2b21      	cmp	r3, #33	; 0x21
 8008b38:	d008      	beq.n	8008b4c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008b3a:	7cfb      	ldrb	r3, [r7, #19]
 8008b3c:	2b29      	cmp	r3, #41	; 0x29
 8008b3e:	d005      	beq.n	8008b4c <HAL_I2C_ER_IRQHandler+0xce>
 8008b40:	7cfb      	ldrb	r3, [r7, #19]
 8008b42:	2b28      	cmp	r3, #40	; 0x28
 8008b44:	d106      	bne.n	8008b54 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b21      	cmp	r3, #33	; 0x21
 8008b4a:	d103      	bne.n	8008b54 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f869 	bl	8009c24 <I2C_Slave_AF>
 8008b52:	e016      	b.n	8008b82 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b5c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	f043 0304 	orr.w	r3, r3, #4
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b66:	7efb      	ldrb	r3, [r7, #27]
 8008b68:	2b10      	cmp	r3, #16
 8008b6a:	d002      	beq.n	8008b72 <HAL_I2C_ER_IRQHandler+0xf4>
 8008b6c:	7efb      	ldrb	r3, [r7, #27]
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d107      	bne.n	8008b82 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b80:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	0adb      	lsrs	r3, r3, #11
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <HAL_I2C_ER_IRQHandler+0x12e>
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d008      	beq.n	8008bac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	f043 0308 	orr.w	r3, r3, #8
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008baa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 f8a0 	bl	8009d04 <I2C_ITError>
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	3728      	adds	r7, #40	; 0x28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008caa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d150      	bne.n	8008d64 <I2C_MasterTransmit_TXE+0xc8>
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b21      	cmp	r3, #33	; 0x21
 8008cc6:	d14d      	bne.n	8008d64 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d01d      	beq.n	8008d0a <I2C_MasterTransmit_TXE+0x6e>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d01a      	beq.n	8008d0a <I2C_MasterTransmit_TXE+0x6e>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cda:	d016      	beq.n	8008d0a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2211      	movs	r2, #17
 8008cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff ff62 	bl	8008bcc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d08:	e060      	b.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d18:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d28:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2220      	movs	r2, #32
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b40      	cmp	r3, #64	; 0x40
 8008d42:	d107      	bne.n	8008d54 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff ff7d 	bl	8008c4c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d52:	e03b      	b.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff ff35 	bl	8008bcc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d62:	e033      	b.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	2b21      	cmp	r3, #33	; 0x21
 8008d68:	d005      	beq.n	8008d76 <I2C_MasterTransmit_TXE+0xda>
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b40      	cmp	r3, #64	; 0x40
 8008d6e:	d12d      	bne.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b22      	cmp	r3, #34	; 0x22
 8008d74:	d12a      	bne.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d8e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008d90:	e01c      	b.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d103      	bne.n	8008da6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f88e 	bl	8008ec0 <I2C_MemoryTransmit_TXE_BTF>
}
 8008da4:	e012      	b.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008dca:	e7ff      	b.n	8008dcc <I2C_MasterTransmit_TXE+0x130>
 8008dcc:	bf00      	nop
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b21      	cmp	r3, #33	; 0x21
 8008dec:	d164      	bne.n	8008eb8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d012      	beq.n	8008e1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008e1c:	e04c      	b.n	8008eb8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d01d      	beq.n	8008e60 <I2C_MasterTransmit_BTF+0x8c>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d01a      	beq.n	8008e60 <I2C_MasterTransmit_BTF+0x8c>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e30:	d016      	beq.n	8008e60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2211      	movs	r2, #17
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff feb7 	bl	8008bcc <HAL_I2C_MasterTxCpltCallback>
}
 8008e5e:	e02b      	b.n	8008eb8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b40      	cmp	r3, #64	; 0x40
 8008e98:	d107      	bne.n	8008eaa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fed2 	bl	8008c4c <HAL_I2C_MemTxCpltCallback>
}
 8008ea8:	e006      	b.n	8008eb8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fe8a 	bl	8008bcc <HAL_I2C_MasterTxCpltCallback>
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ece:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11d      	bne.n	8008f14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d10b      	bne.n	8008ef8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef0:	1c9a      	adds	r2, r3, #2
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008ef6:	e073      	b.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	121b      	asrs	r3, r3, #8
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008f12:	e065      	b.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d10b      	bne.n	8008f34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008f32:	e055      	b.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d151      	bne.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b22      	cmp	r3, #34	; 0x22
 8008f40:	d10d      	bne.n	8008f5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008f5c:	e040      	b.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	2b21      	cmp	r3, #33	; 0x21
 8008f6c:	d112      	bne.n	8008f94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f92:	e025      	b.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d120      	bne.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b21      	cmp	r3, #33	; 0x21
 8008fa2:	d11d      	bne.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fb2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fe36 	bl	8008c4c <HAL_I2C_MemTxCpltCallback>
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b22      	cmp	r3, #34	; 0x22
 8008ffa:	f040 80ac 	bne.w	8009156 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d921      	bls.n	8009050 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009028:	b29b      	uxth	r3, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b03      	cmp	r3, #3
 800903a:	f040 808c 	bne.w	8009156 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800904e:	e082      	b.n	8009156 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	2b02      	cmp	r3, #2
 8009056:	d075      	beq.n	8009144 <I2C_MasterReceive_RXNE+0x15c>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d002      	beq.n	8009064 <I2C_MasterReceive_RXNE+0x7c>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d16f      	bne.n	8009144 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 fafd 	bl	800a664 <I2C_WaitOnSTOPRequestThroughIT>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d142      	bne.n	80090f6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800908e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	691a      	ldr	r2, [r3, #16]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	b2d2      	uxtb	r2, r2
 800909c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b40      	cmp	r3, #64	; 0x40
 80090c8:	d10a      	bne.n	80090e0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fdc1 	bl	8008c60 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090de:	e03a      	b.n	8009156 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2212      	movs	r2, #18
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fd76 	bl	8008be0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090f4:	e02f      	b.n	8009156 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009104:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009122:	b29b      	uxth	r3, r3
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff fd99 	bl	8008c74 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009142:	e008      	b.n	8009156 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009152:	605a      	str	r2, [r3, #4]
}
 8009154:	e7ff      	b.n	8009156 <I2C_MasterReceive_RXNE+0x16e>
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009170:	b29b      	uxth	r3, r3
 8009172:	2b04      	cmp	r3, #4
 8009174:	d11b      	bne.n	80091ae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009184:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	b2d2      	uxtb	r2, r2
 8009192:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80091ac:	e0bd      	b.n	800932a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d129      	bne.n	800920c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d00a      	beq.n	80091e4 <I2C_MasterReceive_BTF+0x86>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d007      	beq.n	80091e4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800920a:	e08e      	b.n	800932a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009210:	b29b      	uxth	r3, r3
 8009212:	2b02      	cmp	r3, #2
 8009214:	d176      	bne.n	8009304 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d002      	beq.n	8009222 <I2C_MasterReceive_BTF+0xc4>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b10      	cmp	r3, #16
 8009220:	d108      	bne.n	8009234 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e019      	b.n	8009268 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b04      	cmp	r3, #4
 8009238:	d002      	beq.n	8009240 <I2C_MasterReceive_BTF+0xe2>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d108      	bne.n	8009252 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e00a      	b.n	8009268 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b10      	cmp	r3, #16
 8009256:	d007      	beq.n	8009268 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009266:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80092c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b40      	cmp	r3, #64	; 0x40
 80092d6:	d10a      	bne.n	80092ee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fcba 	bl	8008c60 <HAL_I2C_MemRxCpltCallback>
}
 80092ec:	e01d      	b.n	800932a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2212      	movs	r2, #18
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff fc6f 	bl	8008be0 <HAL_I2C_MasterRxCpltCallback>
}
 8009302:	e012      	b.n	800932a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691a      	ldr	r2, [r3, #16]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b40      	cmp	r3, #64	; 0x40
 8009344:	d117      	bne.n	8009376 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009352:	b2db      	uxtb	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800935e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009360:	e067      	b.n	8009432 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	b2da      	uxtb	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	611a      	str	r2, [r3, #16]
}
 8009374:	e05d      	b.n	8009432 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800937e:	d133      	bne.n	80093e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b21      	cmp	r3, #33	; 0x21
 800938a:	d109      	bne.n	80093a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009390:	b2db      	uxtb	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800939c:	611a      	str	r2, [r3, #16]
 800939e:	e008      	b.n	80093b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <I2C_Master_SB+0x92>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d108      	bne.n	80093d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d032      	beq.n	8009432 <I2C_Master_SB+0x100>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d02d      	beq.n	8009432 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093e4:	605a      	str	r2, [r3, #4]
}
 80093e6:	e024      	b.n	8009432 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10e      	bne.n	800940e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	11db      	asrs	r3, r3, #7
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 0306 	and.w	r3, r3, #6
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f063 030f 	orn	r3, r3, #15
 8009404:	b2da      	uxtb	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	611a      	str	r2, [r3, #16]
}
 800940c:	e011      	b.n	8009432 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009412:	2b01      	cmp	r3, #1
 8009414:	d10d      	bne.n	8009432 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941a:	b29b      	uxth	r3, r3
 800941c:	11db      	asrs	r3, r3, #7
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 0306 	and.w	r3, r3, #6
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f063 030e 	orn	r3, r3, #14
 800942a:	b2da      	uxtb	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	611a      	str	r2, [r3, #16]
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <I2C_Master_ADD10+0x26>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d108      	bne.n	8009476 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00c      	beq.n	8009486 <I2C_Master_ADD10+0x48>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009484:	605a      	str	r2, [r3, #4]
  }
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009492:	b480      	push	{r7}
 8009494:	b091      	sub	sp, #68	; 0x44
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b22      	cmp	r3, #34	; 0x22
 80094ba:	f040 8169 	bne.w	8009790 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10f      	bne.n	80094e6 <I2C_Master_ADDR+0x54>
 80094c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d10b      	bne.n	80094e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ce:	2300      	movs	r3, #0
 80094d0:	633b      	str	r3, [r7, #48]	; 0x30
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	633b      	str	r3, [r7, #48]	; 0x30
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	633b      	str	r3, [r7, #48]	; 0x30
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	e160      	b.n	80097a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d11d      	bne.n	800952a <I2C_Master_ADDR+0x98>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80094f6:	d118      	bne.n	800952a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094f8:	2300      	movs	r3, #0
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800951c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	651a      	str	r2, [r3, #80]	; 0x50
 8009528:	e13e      	b.n	80097a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952e:	b29b      	uxth	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	d113      	bne.n	800955c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009534:	2300      	movs	r3, #0
 8009536:	62bb      	str	r3, [r7, #40]	; 0x28
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e115      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b01      	cmp	r3, #1
 8009564:	f040 808a 	bne.w	800967c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800956e:	d137      	bne.n	80095e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800958a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800958e:	d113      	bne.n	80095b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800959e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095a0:	2300      	movs	r3, #0
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	e0e7      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b8:	2300      	movs	r3, #0
 80095ba:	623b      	str	r3, [r7, #32]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	623b      	str	r3, [r7, #32]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	623b      	str	r3, [r7, #32]
 80095cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e0d3      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	2b08      	cmp	r3, #8
 80095e4:	d02e      	beq.n	8009644 <I2C_Master_ADDR+0x1b2>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d02b      	beq.n	8009644 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	2b12      	cmp	r3, #18
 80095f0:	d102      	bne.n	80095f8 <I2C_Master_ADDR+0x166>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d125      	bne.n	8009644 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	d00e      	beq.n	800961c <I2C_Master_ADDR+0x18a>
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	2b02      	cmp	r3, #2
 8009602:	d00b      	beq.n	800961c <I2C_Master_ADDR+0x18a>
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	2b10      	cmp	r3, #16
 8009608:	d008      	beq.n	800961c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	e007      	b.n	800962c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800962a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	e0a1      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009652:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	61bb      	str	r3, [r7, #24]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	61bb      	str	r3, [r7, #24]
 8009668:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	e085      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d14d      	bne.n	8009722 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	2b04      	cmp	r3, #4
 800968a:	d016      	beq.n	80096ba <I2C_Master_ADDR+0x228>
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	2b02      	cmp	r3, #2
 8009690:	d013      	beq.n	80096ba <I2C_Master_ADDR+0x228>
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	2b10      	cmp	r3, #16
 8009696:	d010      	beq.n	80096ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	e007      	b.n	80096ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d8:	d117      	bne.n	800970a <I2C_Master_ADDR+0x278>
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096e0:	d00b      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d008      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	2b08      	cmp	r3, #8
 80096ec:	d005      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d002      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	2b20      	cmp	r3, #32
 80096f8:	d107      	bne.n	800970a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009708:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	e032      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009730:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800973c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009740:	d117      	bne.n	8009772 <I2C_Master_ADDR+0x2e0>
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009748:	d00b      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	2b01      	cmp	r3, #1
 800974e:	d008      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	2b08      	cmp	r3, #8
 8009754:	d005      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 8009756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009758:	2b10      	cmp	r3, #16
 800975a:	d002      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	2b20      	cmp	r3, #32
 8009760:	d107      	bne.n	8009772 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009770:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800978e:	e00b      	b.n	80097a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	e7ff      	b.n	80097a8 <I2C_Master_ADDR+0x316>
 80097a8:	bf00      	nop
 80097aa:	3744      	adds	r7, #68	; 0x44
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d02b      	beq.n	8009826 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d114      	bne.n	8009826 <I2C_SlaveTransmit_TXE+0x72>
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	2b29      	cmp	r3, #41	; 0x29
 8009800:	d111      	bne.n	8009826 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009810:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2221      	movs	r2, #33	; 0x21
 8009816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2228      	movs	r2, #40	; 0x28
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff f9e7 	bl	8008bf4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009826:	bf00      	nop
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983a:	b29b      	uxth	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d011      	beq.n	8009864 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009884:	b29b      	uxth	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02c      	beq.n	80098e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	691a      	ldr	r2, [r3, #16]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d114      	bne.n	80098e4 <I2C_SlaveReceive_RXNE+0x74>
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	2b2a      	cmp	r3, #42	; 0x2a
 80098be:	d111      	bne.n	80098e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2222      	movs	r2, #34	; 0x22
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2228      	movs	r2, #40	; 0x28
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff f992 	bl	8008c08 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d012      	beq.n	8009924 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800994a:	2b28      	cmp	r3, #40	; 0x28
 800994c:	d127      	bne.n	800999e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800995c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	089b      	lsrs	r3, r3, #2
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800996a:	2301      	movs	r3, #1
 800996c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	09db      	lsrs	r3, r3, #7
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d103      	bne.n	8009982 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	81bb      	strh	r3, [r7, #12]
 8009980:	e002      	b.n	8009988 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009990:	89ba      	ldrh	r2, [r7, #12]
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff f940 	bl	8008c1c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800999c:	e00e      	b.n	80099bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80099e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80099e4:	2300      	movs	r3, #0
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	60bb      	str	r3, [r7, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0201 	orr.w	r2, r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a20:	d172      	bne.n	8009b08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b22      	cmp	r3, #34	; 0x22
 8009a26:	d002      	beq.n	8009a2e <I2C_Slave_STOPF+0x6a>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2c:	d135      	bne.n	8009a9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	f043 0204 	orr.w	r2, r3, #4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd ffa6 	bl	80079b8 <HAL_DMA_GetState>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d049      	beq.n	8009b06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	4a69      	ldr	r2, [pc, #420]	; (8009c1c <I2C_Slave_STOPF+0x258>)
 8009a78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fd fdee 	bl	8007660 <HAL_DMA_Abort_IT>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d03d      	beq.n	8009b06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a98:	e035      	b.n	8009b06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f043 0204 	orr.w	r2, r3, #4
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009acc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fd ff70 	bl	80079b8 <HAL_DMA_GetState>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d014      	beq.n	8009b08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae2:	4a4e      	ldr	r2, [pc, #312]	; (8009c1c <I2C_Slave_STOPF+0x258>)
 8009ae4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd fdb8 	bl	8007660 <HAL_DMA_Abort_IT>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d008      	beq.n	8009b08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	e000      	b.n	8009b08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d03e      	beq.n	8009b90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d112      	bne.n	8009b46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b50:	2b40      	cmp	r3, #64	; 0x40
 8009b52:	d112      	bne.n	8009b7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	691a      	ldr	r2, [r3, #16]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b88:	f043 0204 	orr.w	r2, r3, #4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8b3 	bl	8009d04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009b9e:	e039      	b.n	8009c14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba4:	d109      	bne.n	8009bba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2228      	movs	r2, #40	; 0x28
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff f827 	bl	8008c08 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b28      	cmp	r3, #40	; 0x28
 8009bc4:	d111      	bne.n	8009bea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a15      	ldr	r2, [pc, #84]	; (8009c20 <I2C_Slave_STOPF+0x25c>)
 8009bca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff f828 	bl	8008c38 <HAL_I2C_ListenCpltCallback>
}
 8009be8:	e014      	b.n	8009c14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	2b22      	cmp	r3, #34	; 0x22
 8009bf0:	d002      	beq.n	8009bf8 <I2C_Slave_STOPF+0x234>
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	2b22      	cmp	r3, #34	; 0x22
 8009bf6:	d10d      	bne.n	8009c14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fe fffa 	bl	8008c08 <HAL_I2C_SlaveRxCpltCallback>
}
 8009c14:	bf00      	nop
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	0800a265 	.word	0x0800a265
 8009c20:	ffff0000 	.word	0xffff0000

08009c24 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c32:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d002      	beq.n	8009c46 <I2C_Slave_AF+0x22>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	d129      	bne.n	8009c9a <I2C_Slave_AF+0x76>
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b28      	cmp	r3, #40	; 0x28
 8009c4a:	d126      	bne.n	8009c9a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a2c      	ldr	r2, [pc, #176]	; (8009d00 <I2C_Slave_AF+0xdc>)
 8009c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c60:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c6a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c7a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7fe ffd0 	bl	8008c38 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009c98:	e02e      	b.n	8009cf8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	2b21      	cmp	r3, #33	; 0x21
 8009c9e:	d126      	bne.n	8009cee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a17      	ldr	r2, [pc, #92]	; (8009d00 <I2C_Slave_AF+0xdc>)
 8009ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2221      	movs	r2, #33	; 0x21
 8009caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009cca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cd4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ce4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7fe ff84 	bl	8008bf4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009cec:	e004      	b.n	8009cf8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cf6:	615a      	str	r2, [r3, #20]
}
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	ffff0000 	.word	0xffff0000

08009d04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	d002      	beq.n	8009d28 <I2C_ITError+0x24>
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	d10a      	bne.n	8009d3e <I2C_ITError+0x3a>
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	2b22      	cmp	r3, #34	; 0x22
 8009d2c:	d107      	bne.n	8009d3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d44:	2b28      	cmp	r3, #40	; 0x28
 8009d46:	d107      	bne.n	8009d58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2228      	movs	r2, #40	; 0x28
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d56:	e015      	b.n	8009d84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d66:	d00a      	beq.n	8009d7e <I2C_ITError+0x7a>
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b60      	cmp	r3, #96	; 0x60
 8009d6c:	d007      	beq.n	8009d7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d92:	d162      	bne.n	8009e5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009da2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d020      	beq.n	8009df4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	4a6a      	ldr	r2, [pc, #424]	; (8009f60 <I2C_ITError+0x25c>)
 8009db8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd fc4e 	bl	8007660 <HAL_DMA_Abort_IT>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8089 	beq.w	8009ede <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0201 	bic.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	e074      	b.n	8009ede <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	4a59      	ldr	r2, [pc, #356]	; (8009f60 <I2C_ITError+0x25c>)
 8009dfa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fd fc2d 	bl	8007660 <HAL_DMA_Abort_IT>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d068      	beq.n	8009ede <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e16:	2b40      	cmp	r3, #64	; 0x40
 8009e18:	d10b      	bne.n	8009e32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	b2d2      	uxtb	r2, r2
 8009e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 0201 	bic.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	e041      	b.n	8009ede <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b60      	cmp	r3, #96	; 0x60
 8009e64:	d125      	bne.n	8009eb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	d10b      	bne.n	8009e9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	691a      	ldr	r2, [r3, #16]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0201 	bic.w	r2, r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7fe feec 	bl	8008c88 <HAL_I2C_AbortCpltCallback>
 8009eb0:	e015      	b.n	8009ede <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebc:	2b40      	cmp	r3, #64	; 0x40
 8009ebe:	d10b      	bne.n	8009ed8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	691a      	ldr	r2, [r3, #16]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7fe fecb 	bl	8008c74 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10e      	bne.n	8009f0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d104      	bne.n	8009f0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d007      	beq.n	8009f1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d113      	bne.n	8009f58 <I2C_ITError+0x254>
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	2b28      	cmp	r3, #40	; 0x28
 8009f34:	d110      	bne.n	8009f58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <I2C_ITError+0x260>)
 8009f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7fe fe70 	bl	8008c38 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f58:	bf00      	nop
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	0800a265 	.word	0x0800a265
 8009f64:	ffff0000 	.word	0xffff0000

08009f68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	4608      	mov	r0, r1
 8009f72:	4611      	mov	r1, r2
 8009f74:	461a      	mov	r2, r3
 8009f76:	4603      	mov	r3, r0
 8009f78:	817b      	strh	r3, [r7, #10]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	813b      	strh	r3, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fa08 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00d      	beq.n	8009fc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb8:	d103      	bne.n	8009fc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e05f      	b.n	800a086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fc6:	897b      	ldrh	r3, [r7, #10]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	6a3a      	ldr	r2, [r7, #32]
 8009fda:	492d      	ldr	r1, [pc, #180]	; (800a090 <I2C_RequestMemoryWrite+0x128>)
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 fa40 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e04c      	b.n	800a086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fec:	2300      	movs	r3, #0
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a004:	6a39      	ldr	r1, [r7, #32]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 faaa 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00d      	beq.n	800a02e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	2b04      	cmp	r3, #4
 800a018:	d107      	bne.n	800a02a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e02b      	b.n	800a086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d105      	bne.n	800a040 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a034:	893b      	ldrh	r3, [r7, #8]
 800a036:	b2da      	uxtb	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	611a      	str	r2, [r3, #16]
 800a03e:	e021      	b.n	800a084 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a040:	893b      	ldrh	r3, [r7, #8]
 800a042:	0a1b      	lsrs	r3, r3, #8
 800a044:	b29b      	uxth	r3, r3
 800a046:	b2da      	uxtb	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a050:	6a39      	ldr	r1, [r7, #32]
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fa84 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00d      	beq.n	800a07a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	2b04      	cmp	r3, #4
 800a064:	d107      	bne.n	800a076 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e005      	b.n	800a086 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a07a:	893b      	ldrh	r3, [r7, #8]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	00010002 	.word	0x00010002

0800a094 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af02      	add	r7, sp, #8
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	817b      	strh	r3, [r7, #10]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	813b      	strh	r3, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f96a 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00d      	beq.n	800a102 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f4:	d103      	bne.n	800a0fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e0aa      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a102:	897b      	ldrh	r3, [r7, #10]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	6a3a      	ldr	r2, [r7, #32]
 800a116:	4952      	ldr	r1, [pc, #328]	; (800a260 <I2C_RequestMemoryRead+0x1cc>)
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 f9a2 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e097      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a140:	6a39      	ldr	r1, [r7, #32]
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 fa0c 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00d      	beq.n	800a16a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	2b04      	cmp	r3, #4
 800a154:	d107      	bne.n	800a166 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e076      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a16a:	88fb      	ldrh	r3, [r7, #6]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d105      	bne.n	800a17c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a170:	893b      	ldrh	r3, [r7, #8]
 800a172:	b2da      	uxtb	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	611a      	str	r2, [r3, #16]
 800a17a:	e021      	b.n	800a1c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a17c:	893b      	ldrh	r3, [r7, #8]
 800a17e:	0a1b      	lsrs	r3, r3, #8
 800a180:	b29b      	uxth	r3, r3
 800a182:	b2da      	uxtb	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18c:	6a39      	ldr	r1, [r7, #32]
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f9e6 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00d      	beq.n	800a1b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d107      	bne.n	800a1b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e050      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b6:	893b      	ldrh	r3, [r7, #8]
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c2:	6a39      	ldr	r1, [r7, #32]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 f9cb 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00d      	beq.n	800a1ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	d107      	bne.n	800a1e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e035      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	2200      	movs	r2, #0
 800a204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f8d3 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00d      	beq.n	800a230 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a222:	d103      	bne.n	800a22c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a22a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e013      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a230:	897b      	ldrh	r3, [r7, #10]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	6a3a      	ldr	r2, [r7, #32]
 800a244:	4906      	ldr	r1, [pc, #24]	; (800a260 <I2C_RequestMemoryRead+0x1cc>)
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f90b 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e000      	b.n	800a258 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	00010002 	.word	0x00010002

0800a264 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a27e:	4b4b      	ldr	r3, [pc, #300]	; (800a3ac <I2C_DMAAbort+0x148>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	08db      	lsrs	r3, r3, #3
 800a284:	4a4a      	ldr	r2, [pc, #296]	; (800a3b0 <I2C_DMAAbort+0x14c>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	0a1a      	lsrs	r2, r3, #8
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	00da      	lsls	r2, r3, #3
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	f043 0220 	orr.w	r2, r3, #32
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a2aa:	e00a      	b.n	800a2c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c0:	d0ea      	beq.n	800a298 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	2200      	movs	r2, #0
 800a2e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a304:	2200      	movs	r2, #0
 800a306:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	2200      	movs	r2, #0
 800a316:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b60      	cmp	r3, #96	; 0x60
 800a332:	d10e      	bne.n	800a352 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2220      	movs	r2, #32
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2200      	movs	r2, #0
 800a348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a34a:	6978      	ldr	r0, [r7, #20]
 800a34c:	f7fe fc9c 	bl	8008c88 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a350:	e027      	b.n	800a3a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a352:	7cfb      	ldrb	r3, [r7, #19]
 800a354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a358:	2b28      	cmp	r3, #40	; 0x28
 800a35a:	d117      	bne.n	800a38c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0201 	orr.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a37a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2228      	movs	r2, #40	; 0x28
 800a386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a38a:	e007      	b.n	800a39c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2220      	movs	r2, #32
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f7fe fc69 	bl	8008c74 <HAL_I2C_ErrorCallback>
}
 800a3a2:	bf00      	nop
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20000154 	.word	0x20000154
 800a3b0:	14f8b589 	.word	0x14f8b589

0800a3b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3c4:	e025      	b.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d021      	beq.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ce:	f7fc ff57 	bl	8007280 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d302      	bcc.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d116      	bne.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f043 0220 	orr.w	r2, r3, #32
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e023      	b.n	800a45a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	0c1b      	lsrs	r3, r3, #16
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10d      	bne.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	43da      	mvns	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4013      	ands	r3, r2
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	bf0c      	ite	eq
 800a42e:	2301      	moveq	r3, #1
 800a430:	2300      	movne	r3, #0
 800a432:	b2db      	uxtb	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	e00c      	b.n	800a452 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	43da      	mvns	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4013      	ands	r3, r2
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	bf0c      	ite	eq
 800a44a:	2301      	moveq	r3, #1
 800a44c:	2300      	movne	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	461a      	mov	r2, r3
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	429a      	cmp	r2, r3
 800a456:	d0b6      	beq.n	800a3c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	607a      	str	r2, [r7, #4]
 800a46e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a470:	e051      	b.n	800a516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a480:	d123      	bne.n	800a4ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a490:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a49a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f043 0204 	orr.w	r2, r3, #4
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e046      	b.n	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d0:	d021      	beq.n	800a516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d2:	f7fc fed5 	bl	8007280 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d302      	bcc.n	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d116      	bne.n	800a516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	f043 0220 	orr.w	r2, r3, #32
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e020      	b.n	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	0c1b      	lsrs	r3, r3, #16
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10c      	bne.n	800a53a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	43da      	mvns	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4013      	ands	r3, r2
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf14      	ite	ne
 800a532:	2301      	movne	r3, #1
 800a534:	2300      	moveq	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	e00b      	b.n	800a552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	43da      	mvns	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4013      	ands	r3, r2
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf14      	ite	ne
 800a54c:	2301      	movne	r3, #1
 800a54e:	2300      	moveq	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d18d      	bne.n	800a472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a56c:	e02d      	b.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f900 	bl	800a774 <I2C_IsAcknowledgeFailed>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e02d      	b.n	800a5da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d021      	beq.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a586:	f7fc fe7b 	bl	8007280 <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	429a      	cmp	r2, r3
 800a594:	d302      	bcc.n	800a59c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d116      	bne.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b6:	f043 0220 	orr.w	r2, r3, #32
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e007      	b.n	800a5da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d1ca      	bne.n	800a56e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5ee:	e02d      	b.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f8bf 	bl	800a774 <I2C_IsAcknowledgeFailed>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e02d      	b.n	800a65c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d021      	beq.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a608:	f7fc fe3a 	bl	8007280 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	429a      	cmp	r2, r3
 800a616:	d302      	bcc.n	800a61e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d116      	bne.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	f043 0220 	orr.w	r2, r3, #32
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e007      	b.n	800a65c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b04      	cmp	r3, #4
 800a658:	d1ca      	bne.n	800a5f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a670:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	08db      	lsrs	r3, r3, #3
 800a676:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a678:	fba2 2303 	umull	r2, r3, r2, r3
 800a67c:	0a1a      	lsrs	r2, r3, #8
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3b01      	subs	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d107      	bne.n	800a6a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	f043 0220 	orr.w	r2, r3, #32
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e008      	b.n	800a6b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b0:	d0e9      	beq.n	800a686 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	20000154 	.word	0x20000154
 800a6c4:	14f8b589 	.word	0x14f8b589

0800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6d4:	e042      	b.n	800a75c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b10      	cmp	r3, #16
 800a6e2:	d119      	bne.n	800a718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0210 	mvn.w	r2, #16
 800a6ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e029      	b.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a718:	f7fc fdb2 	bl	8007280 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d302      	bcc.n	800a72e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	f043 0220 	orr.w	r2, r3, #32
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e007      	b.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a766:	2b40      	cmp	r3, #64	; 0x40
 800a768:	d1b5      	bne.n	800a6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a78a:	d11b      	bne.n	800a7c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a794:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b0:	f043 0204 	orr.w	r2, r3, #4
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e000      	b.n	800a7c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a7e2:	d103      	bne.n	800a7ec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7ea:	e007      	b.n	800a7fc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a7f4:	d102      	bne.n	800a7fc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e267      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d075      	beq.n	800a912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a826:	4b88      	ldr	r3, [pc, #544]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f003 030c 	and.w	r3, r3, #12
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d00c      	beq.n	800a84c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a832:	4b85      	ldr	r3, [pc, #532]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d112      	bne.n	800a864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a83e:	4b82      	ldr	r3, [pc, #520]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a84a:	d10b      	bne.n	800a864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a84c:	4b7e      	ldr	r3, [pc, #504]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d05b      	beq.n	800a910 <HAL_RCC_OscConfig+0x108>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d157      	bne.n	800a910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e242      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86c:	d106      	bne.n	800a87c <HAL_RCC_OscConfig+0x74>
 800a86e:	4b76      	ldr	r3, [pc, #472]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a75      	ldr	r2, [pc, #468]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e01d      	b.n	800a8b8 <HAL_RCC_OscConfig+0xb0>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a884:	d10c      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x98>
 800a886:	4b70      	ldr	r3, [pc, #448]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a6f      	ldr	r2, [pc, #444]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a88c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	4b6d      	ldr	r3, [pc, #436]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a6c      	ldr	r2, [pc, #432]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	e00b      	b.n	800a8b8 <HAL_RCC_OscConfig+0xb0>
 800a8a0:	4b69      	ldr	r3, [pc, #420]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a68      	ldr	r2, [pc, #416]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	4b66      	ldr	r3, [pc, #408]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a65      	ldr	r2, [pc, #404]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d013      	beq.n	800a8e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8c0:	f7fc fcde 	bl	8007280 <HAL_GetTick>
 800a8c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8c6:	e008      	b.n	800a8da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8c8:	f7fc fcda 	bl	8007280 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	2b64      	cmp	r3, #100	; 0x64
 800a8d4:	d901      	bls.n	800a8da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e207      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8da:	4b5b      	ldr	r3, [pc, #364]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0f0      	beq.n	800a8c8 <HAL_RCC_OscConfig+0xc0>
 800a8e6:	e014      	b.n	800a912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8e8:	f7fc fcca 	bl	8007280 <HAL_GetTick>
 800a8ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8ee:	e008      	b.n	800a902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8f0:	f7fc fcc6 	bl	8007280 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b64      	cmp	r3, #100	; 0x64
 800a8fc:	d901      	bls.n	800a902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e1f3      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a902:	4b51      	ldr	r3, [pc, #324]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1f0      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xe8>
 800a90e:	e000      	b.n	800a912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d063      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a91e:	4b4a      	ldr	r3, [pc, #296]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f003 030c 	and.w	r3, r3, #12
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a92a:	4b47      	ldr	r3, [pc, #284]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a932:	2b08      	cmp	r3, #8
 800a934:	d11c      	bne.n	800a970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a936:	4b44      	ldr	r3, [pc, #272]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d116      	bne.n	800a970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a942:	4b41      	ldr	r3, [pc, #260]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <HAL_RCC_OscConfig+0x152>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d001      	beq.n	800a95a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e1c7      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a95a:	4b3b      	ldr	r3, [pc, #236]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	4937      	ldr	r1, [pc, #220]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a96e:	e03a      	b.n	800a9e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d020      	beq.n	800a9ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a978:	4b34      	ldr	r3, [pc, #208]	; (800aa4c <HAL_RCC_OscConfig+0x244>)
 800a97a:	2201      	movs	r2, #1
 800a97c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a97e:	f7fc fc7f 	bl	8007280 <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a984:	e008      	b.n	800a998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a986:	f7fc fc7b 	bl	8007280 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b02      	cmp	r3, #2
 800a992:	d901      	bls.n	800a998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e1a8      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a998:	4b2b      	ldr	r3, [pc, #172]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0f0      	beq.n	800a986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a4:	4b28      	ldr	r3, [pc, #160]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	4925      	ldr	r1, [pc, #148]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	600b      	str	r3, [r1, #0]
 800a9b8:	e015      	b.n	800a9e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9ba:	4b24      	ldr	r3, [pc, #144]	; (800aa4c <HAL_RCC_OscConfig+0x244>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c0:	f7fc fc5e 	bl	8007280 <HAL_GetTick>
 800a9c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9c8:	f7fc fc5a 	bl	8007280 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e187      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9da:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d036      	beq.n	800aa60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d016      	beq.n	800aa28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <HAL_RCC_OscConfig+0x248>)
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa00:	f7fc fc3e 	bl	8007280 <HAL_GetTick>
 800aa04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa06:	e008      	b.n	800aa1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa08:	f7fc fc3a 	bl	8007280 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d901      	bls.n	800aa1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e167      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <HAL_RCC_OscConfig+0x240>)
 800aa1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0f0      	beq.n	800aa08 <HAL_RCC_OscConfig+0x200>
 800aa26:	e01b      	b.n	800aa60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <HAL_RCC_OscConfig+0x248>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa2e:	f7fc fc27 	bl	8007280 <HAL_GetTick>
 800aa32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa34:	e00e      	b.n	800aa54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa36:	f7fc fc23 	bl	8007280 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d907      	bls.n	800aa54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e150      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
 800aa48:	40023800 	.word	0x40023800
 800aa4c:	42470000 	.word	0x42470000
 800aa50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa54:	4b88      	ldr	r3, [pc, #544]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1ea      	bne.n	800aa36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 8097 	beq.w	800ab9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa72:	4b81      	ldr	r3, [pc, #516]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10f      	bne.n	800aa9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
 800aa82:	4b7d      	ldr	r3, [pc, #500]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	4a7c      	ldr	r2, [pc, #496]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	6413      	str	r3, [r2, #64]	; 0x40
 800aa8e:	4b7a      	ldr	r3, [pc, #488]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa96:	60bb      	str	r3, [r7, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa9e:	4b77      	ldr	r3, [pc, #476]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d118      	bne.n	800aadc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaaa:	4b74      	ldr	r3, [pc, #464]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a73      	ldr	r2, [pc, #460]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aab6:	f7fc fbe3 	bl	8007280 <HAL_GetTick>
 800aaba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aabc:	e008      	b.n	800aad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aabe:	f7fc fbdf 	bl	8007280 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e10c      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad0:	4b6a      	ldr	r3, [pc, #424]	; (800ac7c <HAL_RCC_OscConfig+0x474>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d106      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x2ea>
 800aae4:	4b64      	ldr	r3, [pc, #400]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae8:	4a63      	ldr	r2, [pc, #396]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	6713      	str	r3, [r2, #112]	; 0x70
 800aaf0:	e01c      	b.n	800ab2c <HAL_RCC_OscConfig+0x324>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d10c      	bne.n	800ab14 <HAL_RCC_OscConfig+0x30c>
 800aafa:	4b5f      	ldr	r3, [pc, #380]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafe:	4a5e      	ldr	r2, [pc, #376]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab00:	f043 0304 	orr.w	r3, r3, #4
 800ab04:	6713      	str	r3, [r2, #112]	; 0x70
 800ab06:	4b5c      	ldr	r3, [pc, #368]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0a:	4a5b      	ldr	r2, [pc, #364]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	6713      	str	r3, [r2, #112]	; 0x70
 800ab12:	e00b      	b.n	800ab2c <HAL_RCC_OscConfig+0x324>
 800ab14:	4b58      	ldr	r3, [pc, #352]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab18:	4a57      	ldr	r2, [pc, #348]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab20:	4b55      	ldr	r3, [pc, #340]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	4a54      	ldr	r2, [pc, #336]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab26:	f023 0304 	bic.w	r3, r3, #4
 800ab2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d015      	beq.n	800ab60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab34:	f7fc fba4 	bl	8007280 <HAL_GetTick>
 800ab38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab3a:	e00a      	b.n	800ab52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab3c:	f7fc fba0 	bl	8007280 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e0cb      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab52:	4b49      	ldr	r3, [pc, #292]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0ee      	beq.n	800ab3c <HAL_RCC_OscConfig+0x334>
 800ab5e:	e014      	b.n	800ab8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab60:	f7fc fb8e 	bl	8007280 <HAL_GetTick>
 800ab64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab66:	e00a      	b.n	800ab7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab68:	f7fc fb8a 	bl	8007280 <HAL_GetTick>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d901      	bls.n	800ab7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e0b5      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab7e:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1ee      	bne.n	800ab68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d105      	bne.n	800ab9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab90:	4b39      	ldr	r3, [pc, #228]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab94:	4a38      	ldr	r2, [pc, #224]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ab96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 80a1 	beq.w	800ace8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aba6:	4b34      	ldr	r3, [pc, #208]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 030c 	and.w	r3, r3, #12
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d05c      	beq.n	800ac6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d141      	bne.n	800ac3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abba:	4b31      	ldr	r3, [pc, #196]	; (800ac80 <HAL_RCC_OscConfig+0x478>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abc0:	f7fc fb5e 	bl	8007280 <HAL_GetTick>
 800abc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abc6:	e008      	b.n	800abda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abc8:	f7fc fb5a 	bl	8007280 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e087      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abda:	4b27      	ldr	r3, [pc, #156]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1f0      	bne.n	800abc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	69da      	ldr	r2, [r3, #28]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	019b      	lsls	r3, r3, #6
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	085b      	lsrs	r3, r3, #1
 800abfe:	3b01      	subs	r3, #1
 800ac00:	041b      	lsls	r3, r3, #16
 800ac02:	431a      	orrs	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	061b      	lsls	r3, r3, #24
 800ac0a:	491b      	ldr	r1, [pc, #108]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <HAL_RCC_OscConfig+0x478>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac16:	f7fc fb33 	bl	8007280 <HAL_GetTick>
 800ac1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac1c:	e008      	b.n	800ac30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac1e:	f7fc fb2f 	bl	8007280 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e05c      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac30:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f0      	beq.n	800ac1e <HAL_RCC_OscConfig+0x416>
 800ac3c:	e054      	b.n	800ace8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac3e:	4b10      	ldr	r3, [pc, #64]	; (800ac80 <HAL_RCC_OscConfig+0x478>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac44:	f7fc fb1c 	bl	8007280 <HAL_GetTick>
 800ac48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac4a:	e008      	b.n	800ac5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac4c:	f7fc fb18 	bl	8007280 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d901      	bls.n	800ac5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e045      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac5e:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <HAL_RCC_OscConfig+0x470>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1f0      	bne.n	800ac4c <HAL_RCC_OscConfig+0x444>
 800ac6a:	e03d      	b.n	800ace8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d107      	bne.n	800ac84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e038      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
 800ac78:	40023800 	.word	0x40023800
 800ac7c:	40007000 	.word	0x40007000
 800ac80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ac84:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <HAL_RCC_OscConfig+0x4ec>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d028      	beq.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d121      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acaa:	429a      	cmp	r2, r3
 800acac:	d11a      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800acb4:	4013      	ands	r3, r2
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800acba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d111      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	3b01      	subs	r3, #1
 800acce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d107      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d001      	beq.n	800ace8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e000      	b.n	800acea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	40023800 	.word	0x40023800

0800acf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0cc      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad0c:	4b68      	ldr	r3, [pc, #416]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0307 	and.w	r3, r3, #7
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d90c      	bls.n	800ad34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad1a:	4b65      	ldr	r3, [pc, #404]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad22:	4b63      	ldr	r3, [pc, #396]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d001      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0b8      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d020      	beq.n	800ad82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad4c:	4b59      	ldr	r3, [pc, #356]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	4a58      	ldr	r2, [pc, #352]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d005      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad64:	4b53      	ldr	r3, [pc, #332]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	4a52      	ldr	r2, [pc, #328]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad70:	4b50      	ldr	r3, [pc, #320]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	494d      	ldr	r1, [pc, #308]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d044      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d107      	bne.n	800ada6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad96:	4b47      	ldr	r3, [pc, #284]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d119      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e07f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d003      	beq.n	800adb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d107      	bne.n	800adc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adb6:	4b3f      	ldr	r3, [pc, #252]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d109      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e06f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adc6:	4b3b      	ldr	r3, [pc, #236]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e067      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800add6:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f023 0203 	bic.w	r2, r3, #3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4934      	ldr	r1, [pc, #208]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ade8:	f7fc fa4a 	bl	8007280 <HAL_GetTick>
 800adec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adee:	e00a      	b.n	800ae06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adf0:	f7fc fa46 	bl	8007280 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e04f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae06:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 020c 	and.w	r2, r3, #12
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d1eb      	bne.n	800adf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae18:	4b25      	ldr	r3, [pc, #148]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0307 	and.w	r3, r3, #7
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d20c      	bcs.n	800ae40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae26:	4b22      	ldr	r3, [pc, #136]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	b2d2      	uxtb	r2, r2
 800ae2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae2e:	4b20      	ldr	r3, [pc, #128]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d001      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e032      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0304 	and.w	r3, r3, #4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae4c:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	4916      	ldr	r1, [pc, #88]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0308 	and.w	r3, r3, #8
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae6a:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	490e      	ldr	r1, [pc, #56]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae7e:	f000 f821 	bl	800aec4 <HAL_RCC_GetSysClockFreq>
 800ae82:	4602      	mov	r2, r0
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	091b      	lsrs	r3, r3, #4
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	490a      	ldr	r1, [pc, #40]	; (800aeb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae90:	5ccb      	ldrb	r3, [r1, r3]
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	4a09      	ldr	r2, [pc, #36]	; (800aebc <HAL_RCC_ClockConfig+0x1c4>)
 800ae98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae9a:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <HAL_RCC_ClockConfig+0x1c8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fc f9aa 	bl	80071f8 <HAL_InitTick>

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	40023c00 	.word	0x40023c00
 800aeb4:	40023800 	.word	0x40023800
 800aeb8:	0801076c 	.word	0x0801076c
 800aebc:	20000154 	.word	0x20000154
 800aec0:	20000180 	.word	0x20000180

0800aec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aec8:	b094      	sub	sp, #80	; 0x50
 800aeca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	647b      	str	r3, [r7, #68]	; 0x44
 800aed0:	2300      	movs	r3, #0
 800aed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aed4:	2300      	movs	r3, #0
 800aed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aedc:	4b79      	ldr	r3, [pc, #484]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f003 030c 	and.w	r3, r3, #12
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d00d      	beq.n	800af04 <HAL_RCC_GetSysClockFreq+0x40>
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	f200 80e1 	bhi.w	800b0b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <HAL_RCC_GetSysClockFreq+0x34>
 800aef2:	2b04      	cmp	r3, #4
 800aef4:	d003      	beq.n	800aefe <HAL_RCC_GetSysClockFreq+0x3a>
 800aef6:	e0db      	b.n	800b0b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aef8:	4b73      	ldr	r3, [pc, #460]	; (800b0c8 <HAL_RCC_GetSysClockFreq+0x204>)
 800aefa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800aefc:	e0db      	b.n	800b0b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aefe:	4b73      	ldr	r3, [pc, #460]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x208>)
 800af00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800af02:	e0d8      	b.n	800b0b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af04:	4b6f      	ldr	r3, [pc, #444]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af0e:	4b6d      	ldr	r3, [pc, #436]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d063      	beq.n	800afe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af1a:	4b6a      	ldr	r3, [pc, #424]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	099b      	lsrs	r3, r3, #6
 800af20:	2200      	movs	r2, #0
 800af22:	63bb      	str	r3, [r7, #56]	; 0x38
 800af24:	63fa      	str	r2, [r7, #60]	; 0x3c
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2c:	633b      	str	r3, [r7, #48]	; 0x30
 800af2e:	2300      	movs	r3, #0
 800af30:	637b      	str	r3, [r7, #52]	; 0x34
 800af32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800af36:	4622      	mov	r2, r4
 800af38:	462b      	mov	r3, r5
 800af3a:	f04f 0000 	mov.w	r0, #0
 800af3e:	f04f 0100 	mov.w	r1, #0
 800af42:	0159      	lsls	r1, r3, #5
 800af44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af48:	0150      	lsls	r0, r2, #5
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4621      	mov	r1, r4
 800af50:	1a51      	subs	r1, r2, r1
 800af52:	6139      	str	r1, [r7, #16]
 800af54:	4629      	mov	r1, r5
 800af56:	eb63 0301 	sbc.w	r3, r3, r1
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af68:	4659      	mov	r1, fp
 800af6a:	018b      	lsls	r3, r1, #6
 800af6c:	4651      	mov	r1, sl
 800af6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800af72:	4651      	mov	r1, sl
 800af74:	018a      	lsls	r2, r1, #6
 800af76:	4651      	mov	r1, sl
 800af78:	ebb2 0801 	subs.w	r8, r2, r1
 800af7c:	4659      	mov	r1, fp
 800af7e:	eb63 0901 	sbc.w	r9, r3, r1
 800af82:	f04f 0200 	mov.w	r2, #0
 800af86:	f04f 0300 	mov.w	r3, #0
 800af8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af96:	4690      	mov	r8, r2
 800af98:	4699      	mov	r9, r3
 800af9a:	4623      	mov	r3, r4
 800af9c:	eb18 0303 	adds.w	r3, r8, r3
 800afa0:	60bb      	str	r3, [r7, #8]
 800afa2:	462b      	mov	r3, r5
 800afa4:	eb49 0303 	adc.w	r3, r9, r3
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	f04f 0300 	mov.w	r3, #0
 800afb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800afb6:	4629      	mov	r1, r5
 800afb8:	024b      	lsls	r3, r1, #9
 800afba:	4621      	mov	r1, r4
 800afbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800afc0:	4621      	mov	r1, r4
 800afc2:	024a      	lsls	r2, r1, #9
 800afc4:	4610      	mov	r0, r2
 800afc6:	4619      	mov	r1, r3
 800afc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afca:	2200      	movs	r2, #0
 800afcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800afce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800afd4:	f7f5 f90a 	bl	80001ec <__aeabi_uldivmod>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4613      	mov	r3, r2
 800afde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afe0:	e058      	b.n	800b094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afe2:	4b38      	ldr	r3, [pc, #224]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	099b      	lsrs	r3, r3, #6
 800afe8:	2200      	movs	r2, #0
 800afea:	4618      	mov	r0, r3
 800afec:	4611      	mov	r1, r2
 800afee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	2300      	movs	r3, #0
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
 800aff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	f04f 0000 	mov.w	r0, #0
 800b004:	f04f 0100 	mov.w	r1, #0
 800b008:	0159      	lsls	r1, r3, #5
 800b00a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b00e:	0150      	lsls	r0, r2, #5
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4641      	mov	r1, r8
 800b016:	ebb2 0a01 	subs.w	sl, r2, r1
 800b01a:	4649      	mov	r1, r9
 800b01c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b020:	f04f 0200 	mov.w	r2, #0
 800b024:	f04f 0300 	mov.w	r3, #0
 800b028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b02c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b034:	ebb2 040a 	subs.w	r4, r2, sl
 800b038:	eb63 050b 	sbc.w	r5, r3, fp
 800b03c:	f04f 0200 	mov.w	r2, #0
 800b040:	f04f 0300 	mov.w	r3, #0
 800b044:	00eb      	lsls	r3, r5, #3
 800b046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b04a:	00e2      	lsls	r2, r4, #3
 800b04c:	4614      	mov	r4, r2
 800b04e:	461d      	mov	r5, r3
 800b050:	4643      	mov	r3, r8
 800b052:	18e3      	adds	r3, r4, r3
 800b054:	603b      	str	r3, [r7, #0]
 800b056:	464b      	mov	r3, r9
 800b058:	eb45 0303 	adc.w	r3, r5, r3
 800b05c:	607b      	str	r3, [r7, #4]
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	f04f 0300 	mov.w	r3, #0
 800b066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b06a:	4629      	mov	r1, r5
 800b06c:	028b      	lsls	r3, r1, #10
 800b06e:	4621      	mov	r1, r4
 800b070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b074:	4621      	mov	r1, r4
 800b076:	028a      	lsls	r2, r1, #10
 800b078:	4610      	mov	r0, r2
 800b07a:	4619      	mov	r1, r3
 800b07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b07e:	2200      	movs	r2, #0
 800b080:	61bb      	str	r3, [r7, #24]
 800b082:	61fa      	str	r2, [r7, #28]
 800b084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b088:	f7f5 f8b0 	bl	80001ec <__aeabi_uldivmod>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	4613      	mov	r3, r2
 800b092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b094:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	0c1b      	lsrs	r3, r3, #16
 800b09a:	f003 0303 	and.w	r3, r3, #3
 800b09e:	3301      	adds	r3, #1
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b0a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b0ae:	e002      	b.n	800b0b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b0b0:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b0b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b0b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3750      	adds	r7, #80	; 0x50
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0c2:	bf00      	nop
 800b0c4:	40023800 	.word	0x40023800
 800b0c8:	00f42400 	.word	0x00f42400
 800b0cc:	007a1200 	.word	0x007a1200

0800b0d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b0d4:	4b03      	ldr	r3, [pc, #12]	; (800b0e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	20000154 	.word	0x20000154

0800b0e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b0ec:	f7ff fff0 	bl	800b0d0 <HAL_RCC_GetHCLKFreq>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	4b05      	ldr	r3, [pc, #20]	; (800b108 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	0a9b      	lsrs	r3, r3, #10
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	4903      	ldr	r1, [pc, #12]	; (800b10c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0fe:	5ccb      	ldrb	r3, [r1, r3]
 800b100:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b104:	4618      	mov	r0, r3
 800b106:	bd80      	pop	{r7, pc}
 800b108:	40023800 	.word	0x40023800
 800b10c:	0801077c 	.word	0x0801077c

0800b110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b114:	f7ff ffdc 	bl	800b0d0 <HAL_RCC_GetHCLKFreq>
 800b118:	4602      	mov	r2, r0
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	0b5b      	lsrs	r3, r3, #13
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	4903      	ldr	r1, [pc, #12]	; (800b134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b126:	5ccb      	ldrb	r3, [r1, r3]
 800b128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	40023800 	.word	0x40023800
 800b134:	0801077c 	.word	0x0801077c

0800b138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e07b      	b.n	800b242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d108      	bne.n	800b164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b15a:	d009      	beq.n	800b170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	61da      	str	r2, [r3, #28]
 800b162:	e005      	b.n	800b170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7fa fe0e 	bl	8005dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f4:	ea42 0103 	orr.w	r1, r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	0c1b      	lsrs	r3, r3, #16
 800b20e:	f003 0104 	and.w	r1, r3, #4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	f003 0210 	and.w	r2, r3, #16
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69da      	ldr	r2, [r3, #28]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b088      	sub	sp, #32
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	4613      	mov	r3, r2
 800b258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b264:	2b01      	cmp	r3, #1
 800b266:	d101      	bne.n	800b26c <HAL_SPI_Transmit+0x22>
 800b268:	2302      	movs	r3, #2
 800b26a:	e126      	b.n	800b4ba <HAL_SPI_Transmit+0x270>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b274:	f7fc f804 	bl	8007280 <HAL_GetTick>
 800b278:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b01      	cmp	r3, #1
 800b288:	d002      	beq.n	800b290 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b28a:	2302      	movs	r3, #2
 800b28c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b28e:	e10b      	b.n	800b4a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <HAL_SPI_Transmit+0x52>
 800b296:	88fb      	ldrh	r3, [r7, #6]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b2a0:	e102      	b.n	800b4a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2203      	movs	r2, #3
 800b2a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	88fa      	ldrh	r2, [r7, #6]
 800b2ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	88fa      	ldrh	r2, [r7, #6]
 800b2c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2e8:	d10f      	bne.n	800b30a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b314:	2b40      	cmp	r3, #64	; 0x40
 800b316:	d007      	beq.n	800b328 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b330:	d14b      	bne.n	800b3ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_SPI_Transmit+0xf6>
 800b33a:	8afb      	ldrh	r3, [r7, #22]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d13e      	bne.n	800b3be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b344:	881a      	ldrh	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b350:	1c9a      	adds	r2, r3, #2
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	b29a      	uxth	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b364:	e02b      	b.n	800b3be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b02      	cmp	r3, #2
 800b372:	d112      	bne.n	800b39a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b378:	881a      	ldrh	r2, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	1c9a      	adds	r2, r3, #2
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b38e:	b29b      	uxth	r3, r3
 800b390:	3b01      	subs	r3, #1
 800b392:	b29a      	uxth	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	86da      	strh	r2, [r3, #54]	; 0x36
 800b398:	e011      	b.n	800b3be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b39a:	f7fb ff71 	bl	8007280 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d803      	bhi.n	800b3b2 <HAL_SPI_Transmit+0x168>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d102      	bne.n	800b3b8 <HAL_SPI_Transmit+0x16e>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3bc:	e074      	b.n	800b4a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1ce      	bne.n	800b366 <HAL_SPI_Transmit+0x11c>
 800b3c8:	e04c      	b.n	800b464 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <HAL_SPI_Transmit+0x18e>
 800b3d2:	8afb      	ldrh	r3, [r7, #22]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d140      	bne.n	800b45a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	7812      	ldrb	r2, [r2, #0]
 800b3e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b3fe:	e02c      	b.n	800b45a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d113      	bne.n	800b436 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	330c      	adds	r3, #12
 800b418:	7812      	ldrb	r2, [r2, #0]
 800b41a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b29a      	uxth	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	86da      	strh	r2, [r3, #54]	; 0x36
 800b434:	e011      	b.n	800b45a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b436:	f7fb ff23 	bl	8007280 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	429a      	cmp	r2, r3
 800b444:	d803      	bhi.n	800b44e <HAL_SPI_Transmit+0x204>
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44c:	d102      	bne.n	800b454 <HAL_SPI_Transmit+0x20a>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d102      	bne.n	800b45a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b454:	2303      	movs	r3, #3
 800b456:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b458:	e026      	b.n	800b4a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b45e:	b29b      	uxth	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1cd      	bne.n	800b400 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b464:	69ba      	ldr	r2, [r7, #24]
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fce9 	bl	800be40 <SPI_EndRxTxTransaction>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2220      	movs	r2, #32
 800b478:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b482:	2300      	movs	r3, #0
 800b484:	613b      	str	r3, [r7, #16]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	77fb      	strb	r3, [r7, #31]
 800b4a4:	e000      	b.n	800b4a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b4a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3720      	adds	r7, #32
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b088      	sub	sp, #32
 800b4c6:	af02      	add	r7, sp, #8
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	603b      	str	r3, [r7, #0]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4de:	d112      	bne.n	800b506 <HAL_SPI_Receive+0x44>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10e      	bne.n	800b506 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2204      	movs	r2, #4
 800b4ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b4f0:	88fa      	ldrh	r2, [r7, #6]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	68b9      	ldr	r1, [r7, #8]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 f8f1 	bl	800b6e4 <HAL_SPI_TransmitReceive>
 800b502:	4603      	mov	r3, r0
 800b504:	e0ea      	b.n	800b6dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d101      	bne.n	800b514 <HAL_SPI_Receive+0x52>
 800b510:	2302      	movs	r3, #2
 800b512:	e0e3      	b.n	800b6dc <HAL_SPI_Receive+0x21a>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b51c:	f7fb feb0 	bl	8007280 <HAL_GetTick>
 800b520:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d002      	beq.n	800b534 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b52e:	2302      	movs	r3, #2
 800b530:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b532:	e0ca      	b.n	800b6ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <HAL_SPI_Receive+0x7e>
 800b53a:	88fb      	ldrh	r3, [r7, #6]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b544:	e0c1      	b.n	800b6ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2204      	movs	r2, #4
 800b54a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	88fa      	ldrh	r2, [r7, #6]
 800b55e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	88fa      	ldrh	r2, [r7, #6]
 800b564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b58c:	d10f      	bne.n	800b5ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b59c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b5ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b8:	2b40      	cmp	r3, #64	; 0x40
 800b5ba:	d007      	beq.n	800b5cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d162      	bne.n	800b69a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5d4:	e02e      	b.n	800b634 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d115      	bne.n	800b610 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f103 020c 	add.w	r2, r3, #12
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f0:	7812      	ldrb	r2, [r2, #0]
 800b5f2:	b2d2      	uxtb	r2, r2
 800b5f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b604:	b29b      	uxth	r3, r3
 800b606:	3b01      	subs	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b60e:	e011      	b.n	800b634 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b610:	f7fb fe36 	bl	8007280 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d803      	bhi.n	800b628 <HAL_SPI_Receive+0x166>
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d102      	bne.n	800b62e <HAL_SPI_Receive+0x16c>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d102      	bne.n	800b634 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b632:	e04a      	b.n	800b6ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1cb      	bne.n	800b5d6 <HAL_SPI_Receive+0x114>
 800b63e:	e031      	b.n	800b6a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d113      	bne.n	800b676 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	b292      	uxth	r2, r2
 800b65a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b660:	1c9a      	adds	r2, r3, #2
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	b29a      	uxth	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b674:	e011      	b.n	800b69a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b676:	f7fb fe03 	bl	8007280 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d803      	bhi.n	800b68e <HAL_SPI_Receive+0x1cc>
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68c:	d102      	bne.n	800b694 <HAL_SPI_Receive+0x1d2>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b698:	e017      	b.n	800b6ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1cd      	bne.n	800b640 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 fb63 	bl	800bd74 <SPI_EndRxTransaction>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	75fb      	strb	r3, [r7, #23]
 800b6c6:	e000      	b.n	800b6ca <HAL_SPI_Receive+0x208>
  }

error :
 800b6c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08c      	sub	sp, #48	; 0x30
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b702:	2b01      	cmp	r3, #1
 800b704:	d101      	bne.n	800b70a <HAL_SPI_TransmitReceive+0x26>
 800b706:	2302      	movs	r3, #2
 800b708:	e18a      	b.n	800ba20 <HAL_SPI_TransmitReceive+0x33c>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b712:	f7fb fdb5 	bl	8007280 <HAL_GetTick>
 800b716:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b728:	887b      	ldrh	r3, [r7, #2]
 800b72a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b72c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b730:	2b01      	cmp	r3, #1
 800b732:	d00f      	beq.n	800b754 <HAL_SPI_TransmitReceive+0x70>
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b73a:	d107      	bne.n	800b74c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <HAL_SPI_TransmitReceive+0x68>
 800b744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b748:	2b04      	cmp	r3, #4
 800b74a:	d003      	beq.n	800b754 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b74c:	2302      	movs	r3, #2
 800b74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b752:	e15b      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_SPI_TransmitReceive+0x82>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <HAL_SPI_TransmitReceive+0x82>
 800b760:	887b      	ldrh	r3, [r7, #2]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b76c:	e14e      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b04      	cmp	r3, #4
 800b778:	d003      	beq.n	800b782 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2205      	movs	r2, #5
 800b77e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	887a      	ldrh	r2, [r7, #2]
 800b792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	887a      	ldrh	r2, [r7, #2]
 800b798:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	887a      	ldrh	r2, [r7, #2]
 800b7a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	887a      	ldrh	r2, [r7, #2]
 800b7aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c2:	2b40      	cmp	r3, #64	; 0x40
 800b7c4:	d007      	beq.n	800b7d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7de:	d178      	bne.n	800b8d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <HAL_SPI_TransmitReceive+0x10a>
 800b7e8:	8b7b      	ldrh	r3, [r7, #26]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d166      	bne.n	800b8bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f2:	881a      	ldrh	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fe:	1c9a      	adds	r2, r3, #2
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b812:	e053      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d11b      	bne.n	800b85a <HAL_SPI_TransmitReceive+0x176>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b826:	b29b      	uxth	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d016      	beq.n	800b85a <HAL_SPI_TransmitReceive+0x176>
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d113      	bne.n	800b85a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b836:	881a      	ldrh	r2, [r3, #0]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b842:	1c9a      	adds	r2, r3, #2
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	3b01      	subs	r3, #1
 800b850:	b29a      	uxth	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b01      	cmp	r3, #1
 800b866:	d119      	bne.n	800b89c <HAL_SPI_TransmitReceive+0x1b8>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d014      	beq.n	800b89c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68da      	ldr	r2, [r3, #12]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87c:	b292      	uxth	r2, r2
 800b87e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b884:	1c9a      	adds	r2, r3, #2
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b88e:	b29b      	uxth	r3, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b898:	2301      	movs	r3, #1
 800b89a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b89c:	f7fb fcf0 	bl	8007280 <HAL_GetTick>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d807      	bhi.n	800b8bc <HAL_SPI_TransmitReceive+0x1d8>
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b2:	d003      	beq.n	800b8bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b8ba:	e0a7      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1a6      	bne.n	800b814 <HAL_SPI_TransmitReceive+0x130>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1a1      	bne.n	800b814 <HAL_SPI_TransmitReceive+0x130>
 800b8d0:	e07c      	b.n	800b9cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <HAL_SPI_TransmitReceive+0x1fc>
 800b8da:	8b7b      	ldrh	r3, [r7, #26]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d16b      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	330c      	adds	r3, #12
 800b8ea:	7812      	ldrb	r2, [r2, #0]
 800b8ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b29a      	uxth	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b906:	e057      	b.n	800b9b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 0302 	and.w	r3, r3, #2
 800b912:	2b02      	cmp	r3, #2
 800b914:	d11c      	bne.n	800b950 <HAL_SPI_TransmitReceive+0x26c>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d017      	beq.n	800b950 <HAL_SPI_TransmitReceive+0x26c>
 800b920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b922:	2b01      	cmp	r3, #1
 800b924:	d114      	bne.n	800b950 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	330c      	adds	r3, #12
 800b930:	7812      	ldrb	r2, [r2, #0]
 800b932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b942:	b29b      	uxth	r3, r3
 800b944:	3b01      	subs	r3, #1
 800b946:	b29a      	uxth	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f003 0301 	and.w	r3, r3, #1
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d119      	bne.n	800b992 <HAL_SPI_TransmitReceive+0x2ae>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d014      	beq.n	800b992 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68da      	ldr	r2, [r3, #12]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b972:	b2d2      	uxtb	r2, r2
 800b974:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b98e:	2301      	movs	r3, #1
 800b990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b992:	f7fb fc75 	bl	8007280 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d803      	bhi.n	800b9aa <HAL_SPI_TransmitReceive+0x2c6>
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a8:	d102      	bne.n	800b9b0 <HAL_SPI_TransmitReceive+0x2cc>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9b6:	e029      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1a2      	bne.n	800b908 <HAL_SPI_TransmitReceive+0x224>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d19d      	bne.n	800b908 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 fa35 	bl	800be40 <SPI_EndRxTxTransaction>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d006      	beq.n	800b9ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b9e8:	e010      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10b      	bne.n	800ba0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	e000      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ba0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3730      	adds	r7, #48	; 0x30
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	099b      	lsrs	r3, r3, #6
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10f      	bne.n	800ba6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	099b      	lsrs	r3, r3, #6
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d004      	beq.n	800ba6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
    return;
 800ba6a:	e0d7      	b.n	800bc1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	085b      	lsrs	r3, r3, #1
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <HAL_SPI_IRQHandler+0x66>
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	09db      	lsrs	r3, r3, #7
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d004      	beq.n	800ba8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	4798      	blx	r3
    return;
 800ba8c:	e0c6      	b.n	800bc1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	095b      	lsrs	r3, r3, #5
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10c      	bne.n	800bab4 <HAL_SPI_IRQHandler+0x8c>
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	099b      	lsrs	r3, r3, #6
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	0a1b      	lsrs	r3, r3, #8
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 80b4 	beq.w	800bc1c <HAL_SPI_IRQHandler+0x1f4>
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 80ad 	beq.w	800bc1c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	099b      	lsrs	r3, r3, #6
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d023      	beq.n	800bb16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d011      	beq.n	800bafe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bade:	f043 0204 	orr.w	r2, r3, #4
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	e00b      	b.n	800bb16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bafe:	2300      	movs	r3, #0
 800bb00:	613b      	str	r3, [r7, #16]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	693b      	ldr	r3, [r7, #16]
        return;
 800bb14:	e082      	b.n	800bc1c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	095b      	lsrs	r3, r3, #5
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d014      	beq.n	800bb4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb26:	f043 0201 	orr.w	r2, r3, #1
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	0a1b      	lsrs	r3, r3, #8
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00c      	beq.n	800bb72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5c:	f043 0208 	orr.w	r2, r3, #8
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb64:	2300      	movs	r3, #0
 800bb66:	60bb      	str	r3, [r7, #8]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	60bb      	str	r3, [r7, #8]
 800bb70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d04f      	beq.n	800bc1a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d104      	bne.n	800bba6 <HAL_SPI_IRQHandler+0x17e>
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d034      	beq.n	800bc10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 0203 	bic.w	r2, r2, #3
 800bbb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d011      	beq.n	800bbe2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc2:	4a18      	ldr	r2, [pc, #96]	; (800bc24 <HAL_SPI_IRQHandler+0x1fc>)
 800bbc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fb fd48 	bl	8007660 <HAL_DMA_Abort_IT>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d005      	beq.n	800bbe2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d016      	beq.n	800bc18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbee:	4a0d      	ldr	r2, [pc, #52]	; (800bc24 <HAL_SPI_IRQHandler+0x1fc>)
 800bbf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fb fd32 	bl	8007660 <HAL_DMA_Abort_IT>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bc0e:	e003      	b.n	800bc18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f809 	bl	800bc28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc16:	e000      	b.n	800bc1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bc18:	bf00      	nop
    return;
 800bc1a:	bf00      	nop
  }
}
 800bc1c:	3720      	adds	r7, #32
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	0800bc3d 	.word	0x0800bc3d

0800bc28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7ff ffe6 	bl	800bc28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc5c:	bf00      	nop
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	603b      	str	r3, [r7, #0]
 800bc70:	4613      	mov	r3, r2
 800bc72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc74:	f7fb fb04 	bl	8007280 <HAL_GetTick>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	1a9b      	subs	r3, r3, r2
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	4413      	add	r3, r2
 800bc82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc84:	f7fb fafc 	bl	8007280 <HAL_GetTick>
 800bc88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc8a:	4b39      	ldr	r3, [pc, #228]	; (800bd70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	015b      	lsls	r3, r3, #5
 800bc90:	0d1b      	lsrs	r3, r3, #20
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	fb02 f303 	mul.w	r3, r2, r3
 800bc98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc9a:	e054      	b.n	800bd46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca2:	d050      	beq.n	800bd46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bca4:	f7fb faec 	bl	8007280 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d902      	bls.n	800bcba <SPI_WaitFlagStateUntilTimeout+0x56>
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d13d      	bne.n	800bd36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bcc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcd2:	d111      	bne.n	800bcf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcdc:	d004      	beq.n	800bce8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bce6:	d107      	bne.n	800bcf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd00:	d10f      	bne.n	800bd22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bd32:	2303      	movs	r3, #3
 800bd34:	e017      	b.n	800bd66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	bf0c      	ite	eq
 800bd56:	2301      	moveq	r3, #1
 800bd58:	2300      	movne	r3, #0
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d19b      	bne.n	800bc9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3720      	adds	r7, #32
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000154 	.word	0x20000154

0800bd74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd88:	d111      	bne.n	800bdae <SPI_EndRxTransaction+0x3a>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd92:	d004      	beq.n	800bd9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd9c:	d107      	bne.n	800bdae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdb6:	d12a      	bne.n	800be0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdc0:	d012      	beq.n	800bde8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2180      	movs	r1, #128	; 0x80
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f7ff ff49 	bl	800bc64 <SPI_WaitFlagStateUntilTimeout>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d02d      	beq.n	800be34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bddc:	f043 0220 	orr.w	r2, r3, #32
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e026      	b.n	800be36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7ff ff36 	bl	800bc64 <SPI_WaitFlagStateUntilTimeout>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01a      	beq.n	800be34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be02:	f043 0220 	orr.w	r2, r3, #32
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e013      	b.n	800be36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	2101      	movs	r1, #1
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff ff23 	bl	800bc64 <SPI_WaitFlagStateUntilTimeout>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d007      	beq.n	800be34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be28:	f043 0220 	orr.w	r2, r3, #32
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be30:	2303      	movs	r3, #3
 800be32:	e000      	b.n	800be36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
	...

0800be40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b088      	sub	sp, #32
 800be44:	af02      	add	r7, sp, #8
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be4c:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <SPI_EndRxTxTransaction+0x7c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a1b      	ldr	r2, [pc, #108]	; (800bec0 <SPI_EndRxTxTransaction+0x80>)
 800be52:	fba2 2303 	umull	r2, r3, r2, r3
 800be56:	0d5b      	lsrs	r3, r3, #21
 800be58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be5c:	fb02 f303 	mul.w	r3, r2, r3
 800be60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be6a:	d112      	bne.n	800be92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2200      	movs	r2, #0
 800be74:	2180      	movs	r1, #128	; 0x80
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	f7ff fef4 	bl	800bc64 <SPI_WaitFlagStateUntilTimeout>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d016      	beq.n	800beb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be86:	f043 0220 	orr.w	r2, r3, #32
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e00f      	b.n	800beb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00a      	beq.n	800beae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea8:	2b80      	cmp	r3, #128	; 0x80
 800beaa:	d0f2      	beq.n	800be92 <SPI_EndRxTxTransaction+0x52>
 800beac:	e000      	b.n	800beb0 <SPI_EndRxTxTransaction+0x70>
        break;
 800beae:	bf00      	nop
  }

  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20000154 	.word	0x20000154
 800bec0:	165e9f81 	.word	0x165e9f81

0800bec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e041      	b.n	800bf5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7fa fdac 	bl	8006a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2202      	movs	r2, #2
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3304      	adds	r3, #4
 800bf00:	4619      	mov	r1, r3
 800bf02:	4610      	mov	r0, r2
 800bf04:	f000 fae0 	bl	800c4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d001      	beq.n	800bf7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e04e      	b.n	800c01a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2202      	movs	r2, #2
 800bf80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0201 	orr.w	r2, r2, #1
 800bf92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a23      	ldr	r2, [pc, #140]	; (800c028 <HAL_TIM_Base_Start_IT+0xc4>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d022      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa6:	d01d      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a1f      	ldr	r2, [pc, #124]	; (800c02c <HAL_TIM_Base_Start_IT+0xc8>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d018      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1e      	ldr	r2, [pc, #120]	; (800c030 <HAL_TIM_Base_Start_IT+0xcc>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d013      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a1c      	ldr	r2, [pc, #112]	; (800c034 <HAL_TIM_Base_Start_IT+0xd0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00e      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a1b      	ldr	r2, [pc, #108]	; (800c038 <HAL_TIM_Base_Start_IT+0xd4>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d009      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a19      	ldr	r2, [pc, #100]	; (800c03c <HAL_TIM_Base_Start_IT+0xd8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d004      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x80>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a18      	ldr	r2, [pc, #96]	; (800c040 <HAL_TIM_Base_Start_IT+0xdc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d111      	bne.n	800c008 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b06      	cmp	r3, #6
 800bff4:	d010      	beq.n	800c018 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f042 0201 	orr.w	r2, r2, #1
 800c004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c006:	e007      	b.n	800c018 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f042 0201 	orr.w	r2, r2, #1
 800c016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40010000 	.word	0x40010000
 800c02c:	40000400 	.word	0x40000400
 800c030:	40000800 	.word	0x40000800
 800c034:	40000c00 	.word	0x40000c00
 800c038:	40010400 	.word	0x40010400
 800c03c:	40014000 	.word	0x40014000
 800c040:	40001800 	.word	0x40001800

0800c044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e041      	b.n	800c0da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7fa fcca 	bl	8006a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3304      	adds	r3, #4
 800c080:	4619      	mov	r1, r3
 800c082:	4610      	mov	r0, r2
 800c084:	f000 fa20 	bl	800c4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	f003 0302 	and.w	r3, r3, #2
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d122      	bne.n	800c13e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b02      	cmp	r3, #2
 800c104:	d11b      	bne.n	800c13e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f06f 0202 	mvn.w	r2, #2
 800c10e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	f003 0303 	and.w	r3, r3, #3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f9b1 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c12a:	e005      	b.n	800c138 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f9a3 	bl	800c478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f9b4 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d122      	bne.n	800c192 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b04      	cmp	r3, #4
 800c158:	d11b      	bne.n	800c192 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f06f 0204 	mvn.w	r2, #4
 800c162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2202      	movs	r2, #2
 800c168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c174:	2b00      	cmp	r3, #0
 800c176:	d003      	beq.n	800c180 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f987 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c17e:	e005      	b.n	800c18c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f979 	bl	800c478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f98a 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	f003 0308 	and.w	r3, r3, #8
 800c19c:	2b08      	cmp	r3, #8
 800c19e:	d122      	bne.n	800c1e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	f003 0308 	and.w	r3, r3, #8
 800c1aa:	2b08      	cmp	r3, #8
 800c1ac:	d11b      	bne.n	800c1e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f06f 0208 	mvn.w	r2, #8
 800c1b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2204      	movs	r2, #4
 800c1bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	f003 0303 	and.w	r3, r3, #3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d003      	beq.n	800c1d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f95d 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c1d2:	e005      	b.n	800c1e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f94f 	bl	800c478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f960 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	f003 0310 	and.w	r3, r3, #16
 800c1f0:	2b10      	cmp	r3, #16
 800c1f2:	d122      	bne.n	800c23a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	f003 0310 	and.w	r3, r3, #16
 800c1fe:	2b10      	cmp	r3, #16
 800c200:	d11b      	bne.n	800c23a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f06f 0210 	mvn.w	r2, #16
 800c20a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2208      	movs	r2, #8
 800c210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d003      	beq.n	800c228 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f933 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c226:	e005      	b.n	800c234 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f925 	bl	800c478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f936 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b01      	cmp	r3, #1
 800c246:	d10e      	bne.n	800c266 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b01      	cmp	r3, #1
 800c254:	d107      	bne.n	800c266 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f06f 0201 	mvn.w	r2, #1
 800c25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7fa fb11 	bl	8006888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c270:	2b80      	cmp	r3, #128	; 0x80
 800c272:	d10e      	bne.n	800c292 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d107      	bne.n	800c292 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fbf1 	bl	800ca74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29c:	2b40      	cmp	r3, #64	; 0x40
 800c29e:	d10e      	bne.n	800c2be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2aa:	2b40      	cmp	r3, #64	; 0x40
 800c2ac:	d107      	bne.n	800c2be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f8fb 	bl	800c4b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	f003 0320 	and.w	r3, r3, #32
 800c2c8:	2b20      	cmp	r3, #32
 800c2ca:	d10e      	bne.n	800c2ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	f003 0320 	and.w	r3, r3, #32
 800c2d6:	2b20      	cmp	r3, #32
 800c2d8:	d107      	bne.n	800c2ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f06f 0220 	mvn.w	r2, #32
 800c2e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fbbb 	bl	800ca60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2ea:	bf00      	nop
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d101      	bne.n	800c312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c30e:	2302      	movs	r3, #2
 800c310:	e0ae      	b.n	800c470 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b0c      	cmp	r3, #12
 800c31e:	f200 809f 	bhi.w	800c460 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c322:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c328:	0800c35d 	.word	0x0800c35d
 800c32c:	0800c461 	.word	0x0800c461
 800c330:	0800c461 	.word	0x0800c461
 800c334:	0800c461 	.word	0x0800c461
 800c338:	0800c39d 	.word	0x0800c39d
 800c33c:	0800c461 	.word	0x0800c461
 800c340:	0800c461 	.word	0x0800c461
 800c344:	0800c461 	.word	0x0800c461
 800c348:	0800c3df 	.word	0x0800c3df
 800c34c:	0800c461 	.word	0x0800c461
 800c350:	0800c461 	.word	0x0800c461
 800c354:	0800c461 	.word	0x0800c461
 800c358:	0800c41f 	.word	0x0800c41f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f950 	bl	800c608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	699a      	ldr	r2, [r3, #24]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f042 0208 	orr.w	r2, r2, #8
 800c376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0204 	bic.w	r2, r2, #4
 800c386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6999      	ldr	r1, [r3, #24]
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	691a      	ldr	r2, [r3, #16]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	430a      	orrs	r2, r1
 800c398:	619a      	str	r2, [r3, #24]
      break;
 800c39a:	e064      	b.n	800c466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68b9      	ldr	r1, [r7, #8]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f9a0 	bl	800c6e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	699a      	ldr	r2, [r3, #24]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	699a      	ldr	r2, [r3, #24]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6999      	ldr	r1, [r3, #24]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	021a      	lsls	r2, r3, #8
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	430a      	orrs	r2, r1
 800c3da:	619a      	str	r2, [r3, #24]
      break;
 800c3dc:	e043      	b.n	800c466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 f9f5 	bl	800c7d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	69da      	ldr	r2, [r3, #28]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f042 0208 	orr.w	r2, r2, #8
 800c3f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	69da      	ldr	r2, [r3, #28]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 0204 	bic.w	r2, r2, #4
 800c408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	69d9      	ldr	r1, [r3, #28]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	691a      	ldr	r2, [r3, #16]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	61da      	str	r2, [r3, #28]
      break;
 800c41c:	e023      	b.n	800c466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68b9      	ldr	r1, [r7, #8]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fa49 	bl	800c8bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	69da      	ldr	r2, [r3, #28]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69da      	ldr	r2, [r3, #28]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	69d9      	ldr	r1, [r3, #28]
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	021a      	lsls	r2, r3, #8
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	61da      	str	r2, [r3, #28]
      break;
 800c45e:	e002      	b.n	800c466 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	75fb      	strb	r3, [r7, #23]
      break;
 800c464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a40      	ldr	r2, [pc, #256]	; (800c5dc <TIM_Base_SetConfig+0x114>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d013      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e6:	d00f      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a3d      	ldr	r2, [pc, #244]	; (800c5e0 <TIM_Base_SetConfig+0x118>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d00b      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a3c      	ldr	r2, [pc, #240]	; (800c5e4 <TIM_Base_SetConfig+0x11c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d007      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a3b      	ldr	r2, [pc, #236]	; (800c5e8 <TIM_Base_SetConfig+0x120>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d003      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a3a      	ldr	r2, [pc, #232]	; (800c5ec <TIM_Base_SetConfig+0x124>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d108      	bne.n	800c51a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c50e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a2f      	ldr	r2, [pc, #188]	; (800c5dc <TIM_Base_SetConfig+0x114>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d02b      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c528:	d027      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a2c      	ldr	r2, [pc, #176]	; (800c5e0 <TIM_Base_SetConfig+0x118>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d023      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a2b      	ldr	r2, [pc, #172]	; (800c5e4 <TIM_Base_SetConfig+0x11c>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d01f      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a2a      	ldr	r2, [pc, #168]	; (800c5e8 <TIM_Base_SetConfig+0x120>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d01b      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a29      	ldr	r2, [pc, #164]	; (800c5ec <TIM_Base_SetConfig+0x124>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d017      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a28      	ldr	r2, [pc, #160]	; (800c5f0 <TIM_Base_SetConfig+0x128>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d013      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a27      	ldr	r2, [pc, #156]	; (800c5f4 <TIM_Base_SetConfig+0x12c>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d00f      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a26      	ldr	r2, [pc, #152]	; (800c5f8 <TIM_Base_SetConfig+0x130>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d00b      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a25      	ldr	r2, [pc, #148]	; (800c5fc <TIM_Base_SetConfig+0x134>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d007      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a24      	ldr	r2, [pc, #144]	; (800c600 <TIM_Base_SetConfig+0x138>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d003      	beq.n	800c57a <TIM_Base_SetConfig+0xb2>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a23      	ldr	r2, [pc, #140]	; (800c604 <TIM_Base_SetConfig+0x13c>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d108      	bne.n	800c58c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	4313      	orrs	r3, r2
 800c598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a0a      	ldr	r2, [pc, #40]	; (800c5dc <TIM_Base_SetConfig+0x114>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d003      	beq.n	800c5c0 <TIM_Base_SetConfig+0xf8>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a0c      	ldr	r2, [pc, #48]	; (800c5ec <TIM_Base_SetConfig+0x124>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d103      	bne.n	800c5c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	691a      	ldr	r2, [r3, #16]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	615a      	str	r2, [r3, #20]
}
 800c5ce:	bf00      	nop
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	40010000 	.word	0x40010000
 800c5e0:	40000400 	.word	0x40000400
 800c5e4:	40000800 	.word	0x40000800
 800c5e8:	40000c00 	.word	0x40000c00
 800c5ec:	40010400 	.word	0x40010400
 800c5f0:	40014000 	.word	0x40014000
 800c5f4:	40014400 	.word	0x40014400
 800c5f8:	40014800 	.word	0x40014800
 800c5fc:	40001800 	.word	0x40001800
 800c600:	40001c00 	.word	0x40001c00
 800c604:	40002000 	.word	0x40002000

0800c608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c608:	b480      	push	{r7}
 800c60a:	b087      	sub	sp, #28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	f023 0201 	bic.w	r2, r3, #1
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a1b      	ldr	r3, [r3, #32]
 800c622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	4313      	orrs	r3, r2
 800c648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f023 0302 	bic.w	r3, r3, #2
 800c650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4313      	orrs	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a20      	ldr	r2, [pc, #128]	; (800c6e0 <TIM_OC1_SetConfig+0xd8>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d003      	beq.n	800c66c <TIM_OC1_SetConfig+0x64>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a1f      	ldr	r2, [pc, #124]	; (800c6e4 <TIM_OC1_SetConfig+0xdc>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d10c      	bne.n	800c686 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f023 0308 	bic.w	r3, r3, #8
 800c672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f023 0304 	bic.w	r3, r3, #4
 800c684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a15      	ldr	r2, [pc, #84]	; (800c6e0 <TIM_OC1_SetConfig+0xd8>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d003      	beq.n	800c696 <TIM_OC1_SetConfig+0x8e>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a14      	ldr	r2, [pc, #80]	; (800c6e4 <TIM_OC1_SetConfig+0xdc>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d111      	bne.n	800c6ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c69c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	621a      	str	r2, [r3, #32]
}
 800c6d4:	bf00      	nop
 800c6d6:	371c      	adds	r7, #28
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400

0800c6e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	f023 0210 	bic.w	r2, r3, #16
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	4313      	orrs	r3, r2
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f023 0320 	bic.w	r3, r3, #32
 800c732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	011b      	lsls	r3, r3, #4
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a22      	ldr	r2, [pc, #136]	; (800c7cc <TIM_OC2_SetConfig+0xe4>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d003      	beq.n	800c750 <TIM_OC2_SetConfig+0x68>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a21      	ldr	r2, [pc, #132]	; (800c7d0 <TIM_OC2_SetConfig+0xe8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d10d      	bne.n	800c76c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	011b      	lsls	r3, r3, #4
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4313      	orrs	r3, r2
 800c762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c76a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a17      	ldr	r2, [pc, #92]	; (800c7cc <TIM_OC2_SetConfig+0xe4>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d003      	beq.n	800c77c <TIM_OC2_SetConfig+0x94>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a16      	ldr	r2, [pc, #88]	; (800c7d0 <TIM_OC2_SetConfig+0xe8>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d113      	bne.n	800c7a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c78a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	4313      	orrs	r3, r2
 800c796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	621a      	str	r2, [r3, #32]
}
 800c7be:	bf00      	nop
 800c7c0:	371c      	adds	r7, #28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40010400 	.word	0x40010400

0800c7d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b087      	sub	sp, #28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a1b      	ldr	r3, [r3, #32]
 800c7e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	69db      	ldr	r3, [r3, #28]
 800c7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 0303 	bic.w	r3, r3, #3
 800c80a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	4313      	orrs	r3, r2
 800c814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c81c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	4313      	orrs	r3, r2
 800c828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a21      	ldr	r2, [pc, #132]	; (800c8b4 <TIM_OC3_SetConfig+0xe0>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_OC3_SetConfig+0x66>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a20      	ldr	r2, [pc, #128]	; (800c8b8 <TIM_OC3_SetConfig+0xe4>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d10d      	bne.n	800c856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	021b      	lsls	r3, r3, #8
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a16      	ldr	r2, [pc, #88]	; (800c8b4 <TIM_OC3_SetConfig+0xe0>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d003      	beq.n	800c866 <TIM_OC3_SetConfig+0x92>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a15      	ldr	r2, [pc, #84]	; (800c8b8 <TIM_OC3_SetConfig+0xe4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d113      	bne.n	800c88e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c86c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	4313      	orrs	r3, r2
 800c880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	011b      	lsls	r3, r3, #4
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	621a      	str	r2, [r3, #32]
}
 800c8a8:	bf00      	nop
 800c8aa:	371c      	adds	r7, #28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	40010000 	.word	0x40010000
 800c8b8:	40010400 	.word	0x40010400

0800c8bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	021b      	lsls	r3, r3, #8
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	031b      	lsls	r3, r3, #12
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	4313      	orrs	r3, r2
 800c912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a12      	ldr	r2, [pc, #72]	; (800c960 <TIM_OC4_SetConfig+0xa4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d003      	beq.n	800c924 <TIM_OC4_SetConfig+0x68>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a11      	ldr	r2, [pc, #68]	; (800c964 <TIM_OC4_SetConfig+0xa8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d109      	bne.n	800c938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c92a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	019b      	lsls	r3, r3, #6
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	4313      	orrs	r3, r2
 800c936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	621a      	str	r2, [r3, #32]
}
 800c952:	bf00      	nop
 800c954:	371c      	adds	r7, #28
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	40010000 	.word	0x40010000
 800c964:	40010400 	.word	0x40010400

0800c968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d101      	bne.n	800c980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c97c:	2302      	movs	r3, #2
 800c97e:	e05a      	b.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2202      	movs	r2, #2
 800c98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a21      	ldr	r2, [pc, #132]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d022      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9cc:	d01d      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a1d      	ldr	r2, [pc, #116]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d018      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d013      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a1a      	ldr	r2, [pc, #104]	; (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d00e      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a18      	ldr	r2, [pc, #96]	; (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d009      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d004      	beq.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a15      	ldr	r2, [pc, #84]	; (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d10c      	bne.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	40010000 	.word	0x40010000
 800ca48:	40000400 	.word	0x40000400
 800ca4c:	40000800 	.word	0x40000800
 800ca50:	40000c00 	.word	0x40000c00
 800ca54:	40010400 	.word	0x40010400
 800ca58:	40014000 	.word	0x40014000
 800ca5c:	40001800 	.word	0x40001800

0800ca60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e03f      	b.n	800cb1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7fa fab6 	bl	8007020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2224      	movs	r2, #36	; 0x24
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800caca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f929 	bl	800cd24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	691a      	ldr	r2, [r3, #16]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	695a      	ldr	r2, [r3, #20]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800caf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68da      	ldr	r2, [r3, #12]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2220      	movs	r2, #32
 800cb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2220      	movs	r2, #32
 800cb14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b08a      	sub	sp, #40	; 0x28
 800cb26:	af02      	add	r7, sp, #8
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	60b9      	str	r1, [r7, #8]
 800cb2c:	603b      	str	r3, [r7, #0]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb32:	2300      	movs	r3, #0
 800cb34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b20      	cmp	r3, #32
 800cb40:	d17c      	bne.n	800cc3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <HAL_UART_Transmit+0x2c>
 800cb48:	88fb      	ldrh	r3, [r7, #6]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e075      	b.n	800cc3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d101      	bne.n	800cb60 <HAL_UART_Transmit+0x3e>
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	e06e      	b.n	800cc3e <HAL_UART_Transmit+0x11c>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2221      	movs	r2, #33	; 0x21
 800cb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb76:	f7fa fb83 	bl	8007280 <HAL_GetTick>
 800cb7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	88fa      	ldrh	r2, [r7, #6]
 800cb80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	88fa      	ldrh	r2, [r7, #6]
 800cb86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb90:	d108      	bne.n	800cba4 <HAL_UART_Transmit+0x82>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d104      	bne.n	800cba4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	61bb      	str	r3, [r7, #24]
 800cba2:	e003      	b.n	800cbac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cbb4:	e02a      	b.n	800cc0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2180      	movs	r1, #128	; 0x80
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 f840 	bl	800cc46 <UART_WaitOnFlagUntilTimeout>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e036      	b.n	800cc3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10b      	bne.n	800cbee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	3302      	adds	r3, #2
 800cbea:	61bb      	str	r3, [r7, #24]
 800cbec:	e007      	b.n	800cbfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	781a      	ldrb	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	3b01      	subs	r3, #1
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1cf      	bne.n	800cbb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2140      	movs	r1, #64	; 0x40
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f000 f810 	bl	800cc46 <UART_WaitOnFlagUntilTimeout>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e006      	b.n	800cc3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2220      	movs	r2, #32
 800cc34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e000      	b.n	800cc3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cc3c:	2302      	movs	r3, #2
  }
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b090      	sub	sp, #64	; 0x40
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	4613      	mov	r3, r2
 800cc54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc56:	e050      	b.n	800ccfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5e:	d04c      	beq.n	800ccfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cc60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d007      	beq.n	800cc76 <UART_WaitOnFlagUntilTimeout+0x30>
 800cc66:	f7fa fb0b 	bl	8007280 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d241      	bcs.n	800ccfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	330c      	adds	r3, #12
 800cc7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	e853 3f00 	ldrex	r3, [r3]
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	330c      	adds	r3, #12
 800cc94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc96:	637a      	str	r2, [r7, #52]	; 0x34
 800cc98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc9e:	e841 2300 	strex	r3, r2, [r1]
 800cca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e5      	bne.n	800cc76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	3314      	adds	r3, #20
 800ccb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	e853 3f00 	ldrex	r3, [r3]
 800ccb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f023 0301 	bic.w	r3, r3, #1
 800ccc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3314      	adds	r3, #20
 800ccc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccca:	623a      	str	r2, [r7, #32]
 800cccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccce:	69f9      	ldr	r1, [r7, #28]
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	e841 2300 	strex	r3, r2, [r1]
 800ccd6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1e5      	bne.n	800ccaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2220      	movs	r2, #32
 800ccea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e00f      	b.n	800cd1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	4013      	ands	r3, r2
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	bf0c      	ite	eq
 800cd0a:	2301      	moveq	r3, #1
 800cd0c:	2300      	movne	r3, #0
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	461a      	mov	r2, r3
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d09f      	beq.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3740      	adds	r7, #64	; 0x40
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd28:	b0c0      	sub	sp, #256	; 0x100
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd40:	68d9      	ldr	r1, [r3, #12]
 800cd42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	ea40 0301 	orr.w	r3, r0, r1
 800cd4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd68:	69db      	ldr	r3, [r3, #28]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cd70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cd7c:	f021 010c 	bic.w	r1, r1, #12
 800cd80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd8a:	430b      	orrs	r3, r1
 800cd8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cd9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd9e:	6999      	ldr	r1, [r3, #24]
 800cda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	ea40 0301 	orr.w	r3, r0, r1
 800cdaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	4b8f      	ldr	r3, [pc, #572]	; (800cff0 <UART_SetConfig+0x2cc>)
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d005      	beq.n	800cdc4 <UART_SetConfig+0xa0>
 800cdb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4b8d      	ldr	r3, [pc, #564]	; (800cff4 <UART_SetConfig+0x2d0>)
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d104      	bne.n	800cdce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cdc4:	f7fe f9a4 	bl	800b110 <HAL_RCC_GetPCLK2Freq>
 800cdc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cdcc:	e003      	b.n	800cdd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cdce:	f7fe f98b 	bl	800b0e8 <HAL_RCC_GetPCLK1Freq>
 800cdd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdda:	69db      	ldr	r3, [r3, #28]
 800cddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cde0:	f040 810c 	bne.w	800cffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cde4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cde8:	2200      	movs	r2, #0
 800cdea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cdee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cdf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	462b      	mov	r3, r5
 800cdfa:	1891      	adds	r1, r2, r2
 800cdfc:	65b9      	str	r1, [r7, #88]	; 0x58
 800cdfe:	415b      	adcs	r3, r3
 800ce00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce06:	4621      	mov	r1, r4
 800ce08:	eb12 0801 	adds.w	r8, r2, r1
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	eb43 0901 	adc.w	r9, r3, r1
 800ce12:	f04f 0200 	mov.w	r2, #0
 800ce16:	f04f 0300 	mov.w	r3, #0
 800ce1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce26:	4690      	mov	r8, r2
 800ce28:	4699      	mov	r9, r3
 800ce2a:	4623      	mov	r3, r4
 800ce2c:	eb18 0303 	adds.w	r3, r8, r3
 800ce30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce34:	462b      	mov	r3, r5
 800ce36:	eb49 0303 	adc.w	r3, r9, r3
 800ce3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ce4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ce4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ce52:	460b      	mov	r3, r1
 800ce54:	18db      	adds	r3, r3, r3
 800ce56:	653b      	str	r3, [r7, #80]	; 0x50
 800ce58:	4613      	mov	r3, r2
 800ce5a:	eb42 0303 	adc.w	r3, r2, r3
 800ce5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ce60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ce64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ce68:	f7f3 f9c0 	bl	80001ec <__aeabi_uldivmod>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	4b61      	ldr	r3, [pc, #388]	; (800cff8 <UART_SetConfig+0x2d4>)
 800ce72:	fba3 2302 	umull	r2, r3, r3, r2
 800ce76:	095b      	lsrs	r3, r3, #5
 800ce78:	011c      	lsls	r4, r3, #4
 800ce7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ce88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	1891      	adds	r1, r2, r2
 800ce92:	64b9      	str	r1, [r7, #72]	; 0x48
 800ce94:	415b      	adcs	r3, r3
 800ce96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ce9c:	4641      	mov	r1, r8
 800ce9e:	eb12 0a01 	adds.w	sl, r2, r1
 800cea2:	4649      	mov	r1, r9
 800cea4:	eb43 0b01 	adc.w	fp, r3, r1
 800cea8:	f04f 0200 	mov.w	r2, #0
 800ceac:	f04f 0300 	mov.w	r3, #0
 800ceb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ceb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ceb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cebc:	4692      	mov	sl, r2
 800cebe:	469b      	mov	fp, r3
 800cec0:	4643      	mov	r3, r8
 800cec2:	eb1a 0303 	adds.w	r3, sl, r3
 800cec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ceca:	464b      	mov	r3, r9
 800cecc:	eb4b 0303 	adc.w	r3, fp, r3
 800ced0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ced4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cee8:	460b      	mov	r3, r1
 800ceea:	18db      	adds	r3, r3, r3
 800ceec:	643b      	str	r3, [r7, #64]	; 0x40
 800ceee:	4613      	mov	r3, r2
 800cef0:	eb42 0303 	adc.w	r3, r2, r3
 800cef4:	647b      	str	r3, [r7, #68]	; 0x44
 800cef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cefa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cefe:	f7f3 f975 	bl	80001ec <__aeabi_uldivmod>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	4611      	mov	r1, r2
 800cf08:	4b3b      	ldr	r3, [pc, #236]	; (800cff8 <UART_SetConfig+0x2d4>)
 800cf0a:	fba3 2301 	umull	r2, r3, r3, r1
 800cf0e:	095b      	lsrs	r3, r3, #5
 800cf10:	2264      	movs	r2, #100	; 0x64
 800cf12:	fb02 f303 	mul.w	r3, r2, r3
 800cf16:	1acb      	subs	r3, r1, r3
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cf1e:	4b36      	ldr	r3, [pc, #216]	; (800cff8 <UART_SetConfig+0x2d4>)
 800cf20:	fba3 2302 	umull	r2, r3, r3, r2
 800cf24:	095b      	lsrs	r3, r3, #5
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf2c:	441c      	add	r4, r3
 800cf2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cf3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf40:	4642      	mov	r2, r8
 800cf42:	464b      	mov	r3, r9
 800cf44:	1891      	adds	r1, r2, r2
 800cf46:	63b9      	str	r1, [r7, #56]	; 0x38
 800cf48:	415b      	adcs	r3, r3
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf50:	4641      	mov	r1, r8
 800cf52:	1851      	adds	r1, r2, r1
 800cf54:	6339      	str	r1, [r7, #48]	; 0x30
 800cf56:	4649      	mov	r1, r9
 800cf58:	414b      	adcs	r3, r1
 800cf5a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf5c:	f04f 0200 	mov.w	r2, #0
 800cf60:	f04f 0300 	mov.w	r3, #0
 800cf64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cf68:	4659      	mov	r1, fp
 800cf6a:	00cb      	lsls	r3, r1, #3
 800cf6c:	4651      	mov	r1, sl
 800cf6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf72:	4651      	mov	r1, sl
 800cf74:	00ca      	lsls	r2, r1, #3
 800cf76:	4610      	mov	r0, r2
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	4642      	mov	r2, r8
 800cf7e:	189b      	adds	r3, r3, r2
 800cf80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf84:	464b      	mov	r3, r9
 800cf86:	460a      	mov	r2, r1
 800cf88:	eb42 0303 	adc.w	r3, r2, r3
 800cf8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cf9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cfa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	18db      	adds	r3, r3, r3
 800cfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfaa:	4613      	mov	r3, r2
 800cfac:	eb42 0303 	adc.w	r3, r2, r3
 800cfb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cfb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cfba:	f7f3 f917 	bl	80001ec <__aeabi_uldivmod>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <UART_SetConfig+0x2d4>)
 800cfc4:	fba3 1302 	umull	r1, r3, r3, r2
 800cfc8:	095b      	lsrs	r3, r3, #5
 800cfca:	2164      	movs	r1, #100	; 0x64
 800cfcc:	fb01 f303 	mul.w	r3, r1, r3
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	3332      	adds	r3, #50	; 0x32
 800cfd6:	4a08      	ldr	r2, [pc, #32]	; (800cff8 <UART_SetConfig+0x2d4>)
 800cfd8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfdc:	095b      	lsrs	r3, r3, #5
 800cfde:	f003 0207 	and.w	r2, r3, #7
 800cfe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4422      	add	r2, r4
 800cfea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cfec:	e105      	b.n	800d1fa <UART_SetConfig+0x4d6>
 800cfee:	bf00      	nop
 800cff0:	40011000 	.word	0x40011000
 800cff4:	40011400 	.word	0x40011400
 800cff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d000:	2200      	movs	r2, #0
 800d002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d00a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d00e:	4642      	mov	r2, r8
 800d010:	464b      	mov	r3, r9
 800d012:	1891      	adds	r1, r2, r2
 800d014:	6239      	str	r1, [r7, #32]
 800d016:	415b      	adcs	r3, r3
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
 800d01a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d01e:	4641      	mov	r1, r8
 800d020:	1854      	adds	r4, r2, r1
 800d022:	4649      	mov	r1, r9
 800d024:	eb43 0501 	adc.w	r5, r3, r1
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	00eb      	lsls	r3, r5, #3
 800d032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d036:	00e2      	lsls	r2, r4, #3
 800d038:	4614      	mov	r4, r2
 800d03a:	461d      	mov	r5, r3
 800d03c:	4643      	mov	r3, r8
 800d03e:	18e3      	adds	r3, r4, r3
 800d040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d044:	464b      	mov	r3, r9
 800d046:	eb45 0303 	adc.w	r3, r5, r3
 800d04a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d04e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d05a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d05e:	f04f 0200 	mov.w	r2, #0
 800d062:	f04f 0300 	mov.w	r3, #0
 800d066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d06a:	4629      	mov	r1, r5
 800d06c:	008b      	lsls	r3, r1, #2
 800d06e:	4621      	mov	r1, r4
 800d070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d074:	4621      	mov	r1, r4
 800d076:	008a      	lsls	r2, r1, #2
 800d078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d07c:	f7f3 f8b6 	bl	80001ec <__aeabi_uldivmod>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4b60      	ldr	r3, [pc, #384]	; (800d208 <UART_SetConfig+0x4e4>)
 800d086:	fba3 2302 	umull	r2, r3, r3, r2
 800d08a:	095b      	lsrs	r3, r3, #5
 800d08c:	011c      	lsls	r4, r3, #4
 800d08e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d092:	2200      	movs	r2, #0
 800d094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d09c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d0a0:	4642      	mov	r2, r8
 800d0a2:	464b      	mov	r3, r9
 800d0a4:	1891      	adds	r1, r2, r2
 800d0a6:	61b9      	str	r1, [r7, #24]
 800d0a8:	415b      	adcs	r3, r3
 800d0aa:	61fb      	str	r3, [r7, #28]
 800d0ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0b0:	4641      	mov	r1, r8
 800d0b2:	1851      	adds	r1, r2, r1
 800d0b4:	6139      	str	r1, [r7, #16]
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	414b      	adcs	r3, r1
 800d0ba:	617b      	str	r3, [r7, #20]
 800d0bc:	f04f 0200 	mov.w	r2, #0
 800d0c0:	f04f 0300 	mov.w	r3, #0
 800d0c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d0c8:	4659      	mov	r1, fp
 800d0ca:	00cb      	lsls	r3, r1, #3
 800d0cc:	4651      	mov	r1, sl
 800d0ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0d2:	4651      	mov	r1, sl
 800d0d4:	00ca      	lsls	r2, r1, #3
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4603      	mov	r3, r0
 800d0dc:	4642      	mov	r2, r8
 800d0de:	189b      	adds	r3, r3, r2
 800d0e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0e4:	464b      	mov	r3, r9
 800d0e6:	460a      	mov	r2, r1
 800d0e8:	eb42 0303 	adc.w	r3, r2, r3
 800d0ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d0fc:	f04f 0200 	mov.w	r2, #0
 800d100:	f04f 0300 	mov.w	r3, #0
 800d104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d108:	4649      	mov	r1, r9
 800d10a:	008b      	lsls	r3, r1, #2
 800d10c:	4641      	mov	r1, r8
 800d10e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d112:	4641      	mov	r1, r8
 800d114:	008a      	lsls	r2, r1, #2
 800d116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d11a:	f7f3 f867 	bl	80001ec <__aeabi_uldivmod>
 800d11e:	4602      	mov	r2, r0
 800d120:	460b      	mov	r3, r1
 800d122:	4b39      	ldr	r3, [pc, #228]	; (800d208 <UART_SetConfig+0x4e4>)
 800d124:	fba3 1302 	umull	r1, r3, r3, r2
 800d128:	095b      	lsrs	r3, r3, #5
 800d12a:	2164      	movs	r1, #100	; 0x64
 800d12c:	fb01 f303 	mul.w	r3, r1, r3
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	011b      	lsls	r3, r3, #4
 800d134:	3332      	adds	r3, #50	; 0x32
 800d136:	4a34      	ldr	r2, [pc, #208]	; (800d208 <UART_SetConfig+0x4e4>)
 800d138:	fba2 2303 	umull	r2, r3, r2, r3
 800d13c:	095b      	lsrs	r3, r3, #5
 800d13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d142:	441c      	add	r4, r3
 800d144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d148:	2200      	movs	r2, #0
 800d14a:	673b      	str	r3, [r7, #112]	; 0x70
 800d14c:	677a      	str	r2, [r7, #116]	; 0x74
 800d14e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d152:	4642      	mov	r2, r8
 800d154:	464b      	mov	r3, r9
 800d156:	1891      	adds	r1, r2, r2
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	415b      	adcs	r3, r3
 800d15c:	60fb      	str	r3, [r7, #12]
 800d15e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d162:	4641      	mov	r1, r8
 800d164:	1851      	adds	r1, r2, r1
 800d166:	6039      	str	r1, [r7, #0]
 800d168:	4649      	mov	r1, r9
 800d16a:	414b      	adcs	r3, r1
 800d16c:	607b      	str	r3, [r7, #4]
 800d16e:	f04f 0200 	mov.w	r2, #0
 800d172:	f04f 0300 	mov.w	r3, #0
 800d176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d17a:	4659      	mov	r1, fp
 800d17c:	00cb      	lsls	r3, r1, #3
 800d17e:	4651      	mov	r1, sl
 800d180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d184:	4651      	mov	r1, sl
 800d186:	00ca      	lsls	r2, r1, #3
 800d188:	4610      	mov	r0, r2
 800d18a:	4619      	mov	r1, r3
 800d18c:	4603      	mov	r3, r0
 800d18e:	4642      	mov	r2, r8
 800d190:	189b      	adds	r3, r3, r2
 800d192:	66bb      	str	r3, [r7, #104]	; 0x68
 800d194:	464b      	mov	r3, r9
 800d196:	460a      	mov	r2, r1
 800d198:	eb42 0303 	adc.w	r3, r2, r3
 800d19c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	663b      	str	r3, [r7, #96]	; 0x60
 800d1a8:	667a      	str	r2, [r7, #100]	; 0x64
 800d1aa:	f04f 0200 	mov.w	r2, #0
 800d1ae:	f04f 0300 	mov.w	r3, #0
 800d1b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	008b      	lsls	r3, r1, #2
 800d1ba:	4641      	mov	r1, r8
 800d1bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1c0:	4641      	mov	r1, r8
 800d1c2:	008a      	lsls	r2, r1, #2
 800d1c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d1c8:	f7f3 f810 	bl	80001ec <__aeabi_uldivmod>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	4b0d      	ldr	r3, [pc, #52]	; (800d208 <UART_SetConfig+0x4e4>)
 800d1d2:	fba3 1302 	umull	r1, r3, r3, r2
 800d1d6:	095b      	lsrs	r3, r3, #5
 800d1d8:	2164      	movs	r1, #100	; 0x64
 800d1da:	fb01 f303 	mul.w	r3, r1, r3
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	011b      	lsls	r3, r3, #4
 800d1e2:	3332      	adds	r3, #50	; 0x32
 800d1e4:	4a08      	ldr	r2, [pc, #32]	; (800d208 <UART_SetConfig+0x4e4>)
 800d1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ea:	095b      	lsrs	r3, r3, #5
 800d1ec:	f003 020f 	and.w	r2, r3, #15
 800d1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4422      	add	r2, r4
 800d1f8:	609a      	str	r2, [r3, #8]
}
 800d1fa:	bf00      	nop
 800d1fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d200:	46bd      	mov	sp, r7
 800d202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d206:	bf00      	nop
 800d208:	51eb851f 	.word	0x51eb851f

0800d20c <__libc_init_array>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	4d0d      	ldr	r5, [pc, #52]	; (800d244 <__libc_init_array+0x38>)
 800d210:	4c0d      	ldr	r4, [pc, #52]	; (800d248 <__libc_init_array+0x3c>)
 800d212:	1b64      	subs	r4, r4, r5
 800d214:	10a4      	asrs	r4, r4, #2
 800d216:	2600      	movs	r6, #0
 800d218:	42a6      	cmp	r6, r4
 800d21a:	d109      	bne.n	800d230 <__libc_init_array+0x24>
 800d21c:	4d0b      	ldr	r5, [pc, #44]	; (800d24c <__libc_init_array+0x40>)
 800d21e:	4c0c      	ldr	r4, [pc, #48]	; (800d250 <__libc_init_array+0x44>)
 800d220:	f000 f87c 	bl	800d31c <_init>
 800d224:	1b64      	subs	r4, r4, r5
 800d226:	10a4      	asrs	r4, r4, #2
 800d228:	2600      	movs	r6, #0
 800d22a:	42a6      	cmp	r6, r4
 800d22c:	d105      	bne.n	800d23a <__libc_init_array+0x2e>
 800d22e:	bd70      	pop	{r4, r5, r6, pc}
 800d230:	f855 3b04 	ldr.w	r3, [r5], #4
 800d234:	4798      	blx	r3
 800d236:	3601      	adds	r6, #1
 800d238:	e7ee      	b.n	800d218 <__libc_init_array+0xc>
 800d23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d23e:	4798      	blx	r3
 800d240:	3601      	adds	r6, #1
 800d242:	e7f2      	b.n	800d22a <__libc_init_array+0x1e>
 800d244:	080107bc 	.word	0x080107bc
 800d248:	080107bc 	.word	0x080107bc
 800d24c:	080107bc 	.word	0x080107bc
 800d250:	080107c0 	.word	0x080107c0

0800d254 <__itoa>:
 800d254:	1e93      	subs	r3, r2, #2
 800d256:	2b22      	cmp	r3, #34	; 0x22
 800d258:	b510      	push	{r4, lr}
 800d25a:	460c      	mov	r4, r1
 800d25c:	d904      	bls.n	800d268 <__itoa+0x14>
 800d25e:	2300      	movs	r3, #0
 800d260:	700b      	strb	r3, [r1, #0]
 800d262:	461c      	mov	r4, r3
 800d264:	4620      	mov	r0, r4
 800d266:	bd10      	pop	{r4, pc}
 800d268:	2a0a      	cmp	r2, #10
 800d26a:	d109      	bne.n	800d280 <__itoa+0x2c>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	da07      	bge.n	800d280 <__itoa+0x2c>
 800d270:	232d      	movs	r3, #45	; 0x2d
 800d272:	700b      	strb	r3, [r1, #0]
 800d274:	4240      	negs	r0, r0
 800d276:	2101      	movs	r1, #1
 800d278:	4421      	add	r1, r4
 800d27a:	f000 f80d 	bl	800d298 <__utoa>
 800d27e:	e7f1      	b.n	800d264 <__itoa+0x10>
 800d280:	2100      	movs	r1, #0
 800d282:	e7f9      	b.n	800d278 <__itoa+0x24>

0800d284 <itoa>:
 800d284:	f7ff bfe6 	b.w	800d254 <__itoa>

0800d288 <memset>:
 800d288:	4402      	add	r2, r0
 800d28a:	4603      	mov	r3, r0
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d100      	bne.n	800d292 <memset+0xa>
 800d290:	4770      	bx	lr
 800d292:	f803 1b01 	strb.w	r1, [r3], #1
 800d296:	e7f9      	b.n	800d28c <memset+0x4>

0800d298 <__utoa>:
 800d298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29a:	4c1f      	ldr	r4, [pc, #124]	; (800d318 <__utoa+0x80>)
 800d29c:	b08b      	sub	sp, #44	; 0x2c
 800d29e:	4605      	mov	r5, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	466e      	mov	r6, sp
 800d2a4:	f104 0c20 	add.w	ip, r4, #32
 800d2a8:	6820      	ldr	r0, [r4, #0]
 800d2aa:	6861      	ldr	r1, [r4, #4]
 800d2ac:	4637      	mov	r7, r6
 800d2ae:	c703      	stmia	r7!, {r0, r1}
 800d2b0:	3408      	adds	r4, #8
 800d2b2:	4564      	cmp	r4, ip
 800d2b4:	463e      	mov	r6, r7
 800d2b6:	d1f7      	bne.n	800d2a8 <__utoa+0x10>
 800d2b8:	7921      	ldrb	r1, [r4, #4]
 800d2ba:	7139      	strb	r1, [r7, #4]
 800d2bc:	1e91      	subs	r1, r2, #2
 800d2be:	6820      	ldr	r0, [r4, #0]
 800d2c0:	6038      	str	r0, [r7, #0]
 800d2c2:	2922      	cmp	r1, #34	; 0x22
 800d2c4:	f04f 0100 	mov.w	r1, #0
 800d2c8:	d904      	bls.n	800d2d4 <__utoa+0x3c>
 800d2ca:	7019      	strb	r1, [r3, #0]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	b00b      	add	sp, #44	; 0x2c
 800d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d4:	1e58      	subs	r0, r3, #1
 800d2d6:	4684      	mov	ip, r0
 800d2d8:	fbb5 f7f2 	udiv	r7, r5, r2
 800d2dc:	fb02 5617 	mls	r6, r2, r7, r5
 800d2e0:	3628      	adds	r6, #40	; 0x28
 800d2e2:	446e      	add	r6, sp
 800d2e4:	460c      	mov	r4, r1
 800d2e6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d2ea:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d2ee:	462e      	mov	r6, r5
 800d2f0:	42b2      	cmp	r2, r6
 800d2f2:	f101 0101 	add.w	r1, r1, #1
 800d2f6:	463d      	mov	r5, r7
 800d2f8:	d9ee      	bls.n	800d2d8 <__utoa+0x40>
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	545a      	strb	r2, [r3, r1]
 800d2fe:	1919      	adds	r1, r3, r4
 800d300:	1aa5      	subs	r5, r4, r2
 800d302:	42aa      	cmp	r2, r5
 800d304:	dae3      	bge.n	800d2ce <__utoa+0x36>
 800d306:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d30a:	780e      	ldrb	r6, [r1, #0]
 800d30c:	7006      	strb	r6, [r0, #0]
 800d30e:	3201      	adds	r2, #1
 800d310:	f801 5901 	strb.w	r5, [r1], #-1
 800d314:	e7f4      	b.n	800d300 <__utoa+0x68>
 800d316:	bf00      	nop
 800d318:	0801078c 	.word	0x0801078c

0800d31c <_init>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr

0800d328 <_fini>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr
