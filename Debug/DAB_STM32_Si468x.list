
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b8  0800d470  0800d470  0001d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b28  08010b28  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08010b28  08010b28  00020b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b30  08010b30  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b30  08010b30  00020b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b34  08010b34  00020b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08010b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030188  2**0
                  CONTENTS
 10 .bss          00007050  20000188  20000188  00030188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200071d8  200071d8  00030188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000182ee  00000000  00000000  000301fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c8c  00000000  00000000  000484e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001560  00000000  00000000  0004c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010d1  00000000  00000000  0004d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024748  00000000  00000000  0004e7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e0e7  00000000  00000000  00072ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3009  00000000  00000000  00090fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005950  00000000  00000000  00163fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00169934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d458 	.word	0x0800d458

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d458 	.word	0x0800d458

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004ec:	f000 f914 	bl	8000718 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fb97 	bl	8000c24 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004f6:	20cb      	movs	r0, #203	; 0xcb
 80004f8:	f000 fb94 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004fc:	2039      	movs	r0, #57	; 0x39
 80004fe:	f000 fba0 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8000502:	202c      	movs	r0, #44	; 0x2c
 8000504:	f000 fb9d 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fb9a 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800050e:	2034      	movs	r0, #52	; 0x34
 8000510:	f000 fb97 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000514:	2002      	movs	r0, #2
 8000516:	f000 fb94 	bl	8000c42 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800051a:	20cf      	movs	r0, #207	; 0xcf
 800051c:	f000 fb82 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fb8e 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000526:	20c1      	movs	r0, #193	; 0xc1
 8000528:	f000 fb8b 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	f000 fb88 	bl	8000c42 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000532:	20e8      	movs	r0, #232	; 0xe8
 8000534:	f000 fb76 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000538:	2085      	movs	r0, #133	; 0x85
 800053a:	f000 fb82 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fb7f 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000544:	2078      	movs	r0, #120	; 0x78
 8000546:	f000 fb7c 	bl	8000c42 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800054a:	20ea      	movs	r0, #234	; 0xea
 800054c:	f000 fb6a 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fb76 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fb73 	bl	8000c42 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800055c:	20ed      	movs	r0, #237	; 0xed
 800055e:	f000 fb61 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fb6d 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 fb6a 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800056e:	2012      	movs	r0, #18
 8000570:	f000 fb67 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000574:	2081      	movs	r0, #129	; 0x81
 8000576:	f000 fb64 	bl	8000c42 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800057a:	20f7      	movs	r0, #247	; 0xf7
 800057c:	f000 fb52 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000580:	2020      	movs	r0, #32
 8000582:	f000 fb5e 	bl	8000c42 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8000586:	20c0      	movs	r0, #192	; 0xc0
 8000588:	f000 fb4c 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb58 	bl	8000c42 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000592:	20c1      	movs	r0, #193	; 0xc1
 8000594:	f000 fb46 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000598:	2010      	movs	r0, #16
 800059a:	f000 fb52 	bl	8000c42 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800059e:	20c5      	movs	r0, #197	; 0xc5
 80005a0:	f000 fb40 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005a4:	203e      	movs	r0, #62	; 0x3e
 80005a6:	f000 fb4c 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005aa:	2028      	movs	r0, #40	; 0x28
 80005ac:	f000 fb49 	bl	8000c42 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005b0:	20c7      	movs	r0, #199	; 0xc7
 80005b2:	f000 fb37 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005b6:	2086      	movs	r0, #134	; 0x86
 80005b8:	f000 fb43 	bl	8000c42 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005bc:	2036      	movs	r0, #54	; 0x36
 80005be:	f000 fb31 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005c2:	2048      	movs	r0, #72	; 0x48
 80005c4:	f000 fb3d 	bl	8000c42 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005c8:	203a      	movs	r0, #58	; 0x3a
 80005ca:	f000 fb2b 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005ce:	2055      	movs	r0, #85	; 0x55
 80005d0:	f000 fb37 	bl	8000c42 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005d4:	20b1      	movs	r0, #177	; 0xb1
 80005d6:	f000 fb25 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fb31 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005e0:	2018      	movs	r0, #24
 80005e2:	f000 fb2e 	bl	8000c42 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005e6:	20b6      	movs	r0, #182	; 0xb6
 80005e8:	f000 fb1c 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005ec:	2008      	movs	r0, #8
 80005ee:	f000 fb28 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005f2:	2082      	movs	r0, #130	; 0x82
 80005f4:	f000 fb25 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005f8:	2027      	movs	r0, #39	; 0x27
 80005fa:	f000 fb22 	bl	8000c42 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005fe:	20f2      	movs	r0, #242	; 0xf2
 8000600:	f000 fb10 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fb1c 	bl	8000c42 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800060a:	2026      	movs	r0, #38	; 0x26
 800060c:	f000 fb0a 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fb16 	bl	8000c42 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8000616:	20e0      	movs	r0, #224	; 0xe0
 8000618:	f000 fb04 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800061c:	200f      	movs	r0, #15
 800061e:	f000 fb10 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000622:	2031      	movs	r0, #49	; 0x31
 8000624:	f000 fb0d 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000628:	202b      	movs	r0, #43	; 0x2b
 800062a:	f000 fb0a 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800062e:	200c      	movs	r0, #12
 8000630:	f000 fb07 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000634:	200e      	movs	r0, #14
 8000636:	f000 fb04 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800063a:	2008      	movs	r0, #8
 800063c:	f000 fb01 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000640:	204e      	movs	r0, #78	; 0x4e
 8000642:	f000 fafe 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000646:	20f1      	movs	r0, #241	; 0xf1
 8000648:	f000 fafb 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800064c:	2037      	movs	r0, #55	; 0x37
 800064e:	f000 faf8 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000652:	2007      	movs	r0, #7
 8000654:	f000 faf5 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000658:	2010      	movs	r0, #16
 800065a:	f000 faf2 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800065e:	2003      	movs	r0, #3
 8000660:	f000 faef 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000664:	200e      	movs	r0, #14
 8000666:	f000 faec 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800066a:	2009      	movs	r0, #9
 800066c:	f000 fae9 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae6 	bl	8000c42 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8000676:	20e1      	movs	r0, #225	; 0xe1
 8000678:	f000 fad4 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fae0 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000682:	200e      	movs	r0, #14
 8000684:	f000 fadd 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8000688:	2014      	movs	r0, #20
 800068a:	f000 fada 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 fad7 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000694:	2011      	movs	r0, #17
 8000696:	f000 fad4 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800069a:	2007      	movs	r0, #7
 800069c:	f000 fad1 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a0:	2031      	movs	r0, #49	; 0x31
 80006a2:	f000 face 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006a6:	20c1      	movs	r0, #193	; 0xc1
 80006a8:	f000 facb 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006ac:	2048      	movs	r0, #72	; 0x48
 80006ae:	f000 fac8 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006b2:	2008      	movs	r0, #8
 80006b4:	f000 fac5 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006b8:	200f      	movs	r0, #15
 80006ba:	f000 fac2 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006be:	200c      	movs	r0, #12
 80006c0:	f000 fabf 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006c4:	2031      	movs	r0, #49	; 0x31
 80006c6:	f000 fabc 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f000 fab9 	bl	8000c42 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006d0:	200f      	movs	r0, #15
 80006d2:	f000 fab6 	bl	8000c42 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006d6:	2011      	movs	r0, #17
 80006d8:	f000 faa4 	bl	8000c24 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006dc:	2029      	movs	r0, #41	; 0x29
 80006de:	f000 faa1 	bl	8000c24 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006e2:	202c      	movs	r0, #44	; 0x2c
 80006e4:	f000 faad 	bl	8000c42 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 f83d 	bl	8000768 <ILI9341_Set_Rotation>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006fe:	1df9      	adds	r1, r7, #7
 8000700:	2301      	movs	r3, #1
 8000702:	2201      	movs	r2, #1
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <ILI9341_SPI_Send+0x20>)
 8000706:	f00a fe3c 	bl	800b382 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20006f54 	.word	0x20006f54

08000718 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	RESET_ON;
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	4810      	ldr	r0, [pc, #64]	; (8000764 <ILI9341_Reset+0x4c>)
 8000724:	f007 fc80 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000728:	2032      	movs	r0, #50	; 0x32
 800072a:	f006 fe79 	bl	8007420 <HAL_Delay>
	RESET_OFF;
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <ILI9341_Reset+0x4c>)
 8000736:	f007 fc77 	bl	8008028 <HAL_GPIO_WritePin>
	CS_ON;
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <ILI9341_Reset+0x4c>)
 8000742:	f007 fc71 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f006 fe6a 	bl	8007420 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fa69 	bl	8000c24 <ILI9341_Send_Command>
	CS_OFF;
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <ILI9341_Reset+0x4c>)
 800075a:	f007 fc65 	bl	8008028 <HAL_GPIO_WritePin>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40020c00 	.word	0x40020c00

08000768 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000772:	2036      	movs	r0, #54	; 0x36
 8000774:	f000 fa56 	bl	8000c24 <ILI9341_Send_Command>
	switch (rotation) {
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d836      	bhi.n	80007ec <ILI9341_Set_Rotation+0x84>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <ILI9341_Set_Rotation+0x1c>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	08000795 	.word	0x08000795
 8000788:	080007ab 	.word	0x080007ab
 800078c:	080007c1 	.word	0x080007c1
 8000790:	080007d7 	.word	0x080007d7
	case 0:
		ILI9341_Send_Data(0x48);
 8000794:	2048      	movs	r0, #72	; 0x48
 8000796:	f000 fa54 	bl	8000c42 <ILI9341_Send_Data>
		X_SIZE = 240;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <ILI9341_Set_Rotation+0x8c>)
 800079c:	22f0      	movs	r2, #240	; 0xf0
 800079e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <ILI9341_Set_Rotation+0x90>)
 80007a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007a6:	601a      	str	r2, [r3, #0]
		break;
 80007a8:	e020      	b.n	80007ec <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 fa49 	bl	8000c42 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <ILI9341_Set_Rotation+0x8c>)
 80007b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007b6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <ILI9341_Set_Rotation+0x90>)
 80007ba:	22f0      	movs	r2, #240	; 0xf0
 80007bc:	601a      	str	r2, [r3, #0]
		break;
 80007be:	e015      	b.n	80007ec <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007c0:	2088      	movs	r0, #136	; 0x88
 80007c2:	f000 fa3e 	bl	8000c42 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <ILI9341_Set_Rotation+0x8c>)
 80007c8:	22f0      	movs	r2, #240	; 0xf0
 80007ca:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <ILI9341_Set_Rotation+0x90>)
 80007ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d2:	601a      	str	r2, [r3, #0]
		break;
 80007d4:	e00a      	b.n	80007ec <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007d6:	20e8      	movs	r0, #232	; 0xe8
 80007d8:	f000 fa33 	bl	8000c42 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <ILI9341_Set_Rotation+0x8c>)
 80007de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007e2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <ILI9341_Set_Rotation+0x90>)
 80007e6:	22f0      	movs	r2, #240	; 0xf0
 80007e8:	601a      	str	r2, [r3, #0]
		break;
 80007ea:	bf00      	nop
	}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000004 	.word	0x20000004

080007fc <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080e:	4817      	ldr	r0, [pc, #92]	; (800086c <ILI9341_SPI_Send_32+0x70>)
 8000810:	f007 fc0a 	bl	8008028 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <ILI9341_SPI_Send_32+0x70>)
 800081c:	f007 fc04 	bl	8008028 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff66 	bl	80006f4 <ILI9341_SPI_Send>

	DC_DATA;
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <ILI9341_SPI_Send_32+0x70>)
 8000830:	f007 fbfa 	bl	8008028 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0e1b      	lsrs	r3, r3, #24
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff5a 	bl	80006f4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0c1b      	lsrs	r3, r3, #16
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff54 	bl	80006f4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff4e 	bl	80006f4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff49 	bl	80006f4 <ILI9341_SPI_Send>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020c00 	.word	0x40020c00

08000870 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	041b      	lsls	r3, r3, #16
 8000886:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4313      	orrs	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000890:	6979      	ldr	r1, [r7, #20]
 8000892:	202a      	movs	r0, #42	; 0x2a
 8000894:	f7ff ffb2 	bl	80007fc <ILI9341_SPI_Send_32>
	t = y1;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	041b      	lsls	r3, r3, #16
 80008a0:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	202b      	movs	r0, #43	; 0x2b
 80008ae:	f7ff ffa5 	bl	80007fc <ILI9341_SPI_Send_32>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <ILI9341_Fill_Screen+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <ILI9341_Fill_Screen+0x44>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ffcc 	bl	8000870 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <ILI9341_Fill_Screen+0x40>)
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <ILI9341_Fill_Screen+0x44>)
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	fb01 f202 	mul.w	r2, r1, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9b7 	bl	8000c60 <ILI9341_Send_Burst>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000004 	.word	0x20000004

08000904 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db31      	blt.n	800097a <ILI9341_Draw_Pixel+0x76>
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db2e      	blt.n	800097a <ILI9341_Draw_Pixel+0x76>
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <ILI9341_Draw_Pixel+0x80>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d229      	bcs.n	800097a <ILI9341_Draw_Pixel+0x76>
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <ILI9341_Draw_Pixel+0x84>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d224      	bcs.n	800097a <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <ILI9341_Draw_Pixel+0x80>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <ILI9341_Draw_Pixel+0x84>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3b01      	subs	r3, #1
 8000940:	f7ff ff96 	bl	8000870 <ILI9341_Set_Address>
	DC_COMMAND;
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <ILI9341_Draw_Pixel+0x88>)
 800094c:	f007 fb6c 	bl	8008028 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000950:	202c      	movs	r0, #44	; 0x2c
 8000952:	f7ff fecf 	bl	80006f4 <ILI9341_SPI_Send>
	DC_DATA;
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <ILI9341_Draw_Pixel+0x88>)
 800095e:	f007 fb63 	bl	8008028 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fec3 	bl	80006f4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff febe 	bl	80006f4 <ILI9341_SPI_Send>
 8000978:	e000      	b.n	800097c <ILI9341_Draw_Pixel+0x78>
		return;
 800097a:	bf00      	nop
}
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000000 	.word	0x20000000
 8000988:	20000004 	.word	0x20000004
 800098c:	40020c00 	.word	0x40020c00

08000990 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f7ff ff63 	bl	8000870 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	b298      	uxth	r0, r3
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	3301      	adds	r3, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	3301      	adds	r3, #1
 80009c0:	fb01 f303 	mul.w	r3, r1, r3
 80009c4:	4619      	mov	r1, r3
 80009c6:	f000 f94b 	bl	8000c60 <ILI9341_Send_Burst>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b08c      	sub	sp, #48	; 0x30
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009ee:	6839      	ldr	r1, [r7, #0]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1acb      	subs	r3, r1, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bfb8      	it	lt
 80009f8:	425b      	neglt	r3, r3
 80009fa:	429a      	cmp	r2, r3
 80009fc:	bfcc      	ite	gt
 80009fe:	2301      	movgt	r3, #1
 8000a00:	2300      	movle	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00d      	beq.n	8000a28 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a18:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	843b      	strh	r3, [r7, #32]
 8000a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d90d      	bls.n	8000a4c <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	83fb      	strh	r3, [r7, #30]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a3c:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	83bb      	strh	r3, [r7, #28]
 8000a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	0fda      	lsrs	r2, r3, #31
 8000a66:	4413      	add	r3, r2
 8000a68:	105b      	asrs	r3, r3, #1
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d202      	bcs.n	8000a7a <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	e023      	b.n	8000ac2 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a80:	e01f      	b.n	8000ac2 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff38 	bl	8000904 <ILI9341_Draw_Pixel>
 8000a94:	e005      	b.n	8000aa2 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff31 	bl	8000904 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da05      	bge.n	8000abc <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d9db      	bls.n	8000a82 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ae2:	7f3b      	ldrb	r3, [r7, #28]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d061      	beq.n	8000bac <ILI9341_Draw_String+0xd8>
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	f300 8092 	bgt.w	8000c12 <ILI9341_Draw_String+0x13e>
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d028      	beq.n	8000b44 <ILI9341_Draw_String+0x70>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d02b      	beq.n	8000b4e <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000af6:	e08c      	b.n	8000c12 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000af8:	7f3b      	ldrb	r3, [r7, #28]
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	461a      	mov	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	441a      	add	r2, r3
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <ILI9341_Draw_String+0x148>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d907      	bls.n	8000b1a <ILI9341_Draw_String+0x46>
				x = 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b0e:	7f3b      	ldrb	r3, [r7, #28]
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	461a      	mov	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4413      	add	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	7f3a      	ldrb	r2, [r7, #28]
 8000b24:	9201      	str	r2, [sp, #4]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	f000 f95a 	bl	8000de4 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b30:	7f3b      	ldrb	r3, [r7, #28]
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4413      	add	r3, r2
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	3301      	adds	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1d5      	bne.n	8000af8 <ILI9341_Draw_String+0x24>
	break;
 8000b4c:	e061      	b.n	8000c12 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b4e:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <ILI9341_Draw_String+0x14c>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b54:	e025      	b.n	8000ba2 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b56:	7f3b      	ldrb	r3, [r7, #28]
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	441a      	add	r2, r3
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <ILI9341_Draw_String+0x148>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d907      	bls.n	8000b78 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b6c:	7f3b      	ldrb	r3, [r7, #28]
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	461a      	mov	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4413      	add	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	7f3a      	ldrb	r2, [r7, #28]
 8000b82:	9201      	str	r2, [sp, #4]
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	f000 f92b 	bl	8000de4 <ILI9341_Draw_Char>
			x += hh*8;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <ILI9341_Draw_String+0x14c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	461a      	mov	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1d5      	bne.n	8000b56 <ILI9341_Draw_String+0x82>
	break;
 8000baa:	e032      	b.n	8000c12 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <ILI9341_Draw_String+0x14c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bb2:	e029      	b.n	8000c08 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bb4:	7f3b      	ldrb	r3, [r7, #28]
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <ILI9341_Draw_String+0x148>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d907      	bls.n	8000bd6 <ILI9341_Draw_String+0x102>
				x = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bca:	7f3b      	ldrb	r3, [r7, #28]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	7f3a      	ldrb	r2, [r7, #28]
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	f000 f8fc 	bl	8000de4 <ILI9341_Draw_Char>
			x += hh*10;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <ILI9341_Draw_String+0x14c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1d1      	bne.n	8000bb4 <ILI9341_Draw_String+0xe0>
	break;
 8000c10:	bf00      	nop
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200001a4 	.word	0x200001a4

08000c24 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c2e:	f000 fa09 	bl	8001044 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd5d 	bl	80006f4 <ILI9341_SPI_Send>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c4c:	f000 f9e8 	bl	8001020 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd4e 	bl	80006f4 <ILI9341_SPI_Send>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	733b      	strb	r3, [r7, #12]
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	4858      	ldr	r0, [pc, #352]	; (8000de0 <ILI9341_Send_Burst+0x180>)
 8000c80:	f007 f9d2 	bl	8008028 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	4855      	ldr	r0, [pc, #340]	; (8000de0 <ILI9341_Send_Burst+0x180>)
 8000c8c:	f007 f9cc 	bl	8008028 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c90:	202c      	movs	r0, #44	; 0x2c
 8000c92:	f7ff fd2f 	bl	80006f4 <ILI9341_SPI_Send>
	DC_DATA;
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9c:	4850      	ldr	r0, [pc, #320]	; (8000de0 <ILI9341_Send_Burst+0x180>)
 8000c9e:	f007 f9c3 	bl	8008028 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000ca2:	7b3b      	ldrb	r3, [r7, #12]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd25 	bl	80006f4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000caa:	7afb      	ldrb	r3, [r7, #11]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd21 	bl	80006f4 <ILI9341_SPI_Send>
	len--;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	099b      	lsrs	r3, r3, #6
 8000cbc:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cbe:	7b3a      	ldrb	r2, [r7, #12]
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d169      	bne.n	8000d9a <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cc6:	e027      	b.n	8000d18 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000ccc:	7afb      	ldrb	r3, [r7, #11]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd10 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd0c 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd08 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd04 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd00 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcfc 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcf8 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcf4 	bl	80006f4 <ILI9341_SPI_Send>
			} while (--i);
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	737b      	strb	r3, [r7, #13]
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1d9      	bne.n	8000ccc <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	81fa      	strh	r2, [r7, #14]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1d2      	bne.n	8000cc8 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d2a:	737b      	strb	r3, [r7, #13]
 8000d2c:	e007      	b.n	8000d3e <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fcdf 	bl	80006f4 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcdb 	bl	80006f4 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d3e:	7b7b      	ldrb	r3, [r7, #13]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	737a      	strb	r2, [r7, #13]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f2      	bne.n	8000d2e <ILI9341_Send_Burst+0xce>
 8000d48:	e03f      	b.n	8000dca <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d4e:	7b3b      	ldrb	r3, [r7, #12]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fccf 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d56:	7afb      	ldrb	r3, [r7, #11]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fccb 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fcc7 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcc3 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fcbf 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d76:	7afb      	ldrb	r3, [r7, #11]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcbb 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d7e:	7b3b      	ldrb	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fcb7 	bl	80006f4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcb3 	bl	80006f4 <ILI9341_SPI_Send>
			} while (--i);
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	737b      	strb	r3, [r7, #13]
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1d9      	bne.n	8000d4e <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	81fa      	strh	r2, [r7, #14]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1d2      	bne.n	8000d4a <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dac:	737b      	strb	r3, [r7, #13]
 8000dae:	e007      	b.n	8000dc0 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc9e 	bl	80006f4 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc9a 	bl	80006f4 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dc0:	7b7b      	ldrb	r3, [r7, #13]
 8000dc2:	1e5a      	subs	r2, r3, #1
 8000dc4:	737a      	strb	r2, [r7, #13]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f2      	bne.n	8000db0 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <ILI9341_Send_Burst+0x180>)
 8000dd2:	f007 f929 	bl	8008028 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020c00 	.word	0x40020c00

08000de4 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000df2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	f000 80b2 	beq.w	8000f60 <ILI9341_Draw_Char+0x17c>
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	f300 8104 	bgt.w	800100a <ILI9341_Draw_Char+0x226>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d002      	beq.n	8000e0c <ILI9341_Draw_Char+0x28>
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d055      	beq.n	8000eb6 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e0a:	e0fe      	b.n	800100a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3305      	adds	r3, #5
 8000e14:	461a      	mov	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3308      	adds	r3, #8
 8000e1a:	f7ff fd29 	bl	8000870 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e24:	487b      	ldr	r0, [pc, #492]	; (8001014 <ILI9341_Draw_Char+0x230>)
 8000e26:	f007 f8ff 	bl	8008028 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e2a:	202c      	movs	r0, #44	; 0x2c
 8000e2c:	f7ff fc62 	bl	80006f4 <ILI9341_SPI_Send>
			DC_DATA;
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	4877      	ldr	r0, [pc, #476]	; (8001014 <ILI9341_Draw_Char+0x230>)
 8000e38:	f007 f8f6 	bl	8008028 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	e035      	b.n	8000eae <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e42:	2302      	movs	r3, #2
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e02c      	b.n	8000ea2 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e4c:	3b20      	subs	r3, #32
 8000e4e:	4a72      	ldr	r2, [pc, #456]	; (8001018 <ILI9341_Draw_Char+0x234>)
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	441a      	add	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	fa42 f303 	asr.w	r3, r2, r3
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00b      	beq.n	8000e86 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fc3d 	bl	80006f4 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fc38 	bl	80006f4 <ILI9341_SPI_Send>
 8000e84:	e00a      	b.n	8000e9c <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc31 	bl	80006f4 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc2c 	bl	80006f4 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddcf      	ble.n	8000e48 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	ddc6      	ble.n	8000e42 <ILI9341_Draw_Char+0x5e>
			break;
 8000eb4:	e0a9      	b.n	800100a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	3310      	adds	r3, #16
 8000ec4:	f7ff fcd4 	bl	8000870 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ece:	4851      	ldr	r0, [pc, #324]	; (8001014 <ILI9341_Draw_Char+0x230>)
 8000ed0:	f007 f8aa 	bl	8008028 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ed4:	202c      	movs	r0, #44	; 0x2c
 8000ed6:	f7ff fc0d 	bl	80006f4 <ILI9341_SPI_Send>
			DC_DATA;
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	484c      	ldr	r0, [pc, #304]	; (8001014 <ILI9341_Draw_Char+0x230>)
 8000ee2:	f007 f8a1 	bl	8008028 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e035      	b.n	8000f58 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e02c      	b.n	8000f4c <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ef6:	3b20      	subs	r3, #32
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <ILI9341_Draw_Char+0x238>)
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	441a      	add	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f1c3 0307 	rsb	r3, r3, #7
 8000f0c:	fa42 f303 	asr.w	r3, r2, r3
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00b      	beq.n	8000f30 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fbe8 	bl	80006f4 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fbe3 	bl	80006f4 <ILI9341_SPI_Send>
 8000f2e:	e00a      	b.n	8000f46 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fbdc 	bl	80006f4 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fbd7 	bl	80006f4 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	ddcf      	ble.n	8000ef2 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	3301      	adds	r3, #1
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	ddc6      	ble.n	8000eec <ILI9341_Draw_Char+0x108>
		break;
 8000f5e:	e054      	b.n	800100a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3309      	adds	r3, #9
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	f7ff fc7f 	bl	8000870 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	4826      	ldr	r0, [pc, #152]	; (8001014 <ILI9341_Draw_Char+0x230>)
 8000f7a:	f007 f855 	bl	8008028 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f7e:	202c      	movs	r0, #44	; 0x2c
 8000f80:	f7ff fbb8 	bl	80006f4 <ILI9341_SPI_Send>
			DC_DATA;
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <ILI9341_Draw_Char+0x230>)
 8000f8c:	f007 f84c 	bl	8008028 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	e035      	b.n	8001002 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e02c      	b.n	8000ff6 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa0:	3b20      	subs	r3, #32
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <ILI9341_Draw_Char+0x238>)
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	441a      	add	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	fa42 f303 	asr.w	r3, r2, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00b      	beq.n	8000fda <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb93 	bl	80006f4 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fb8e 	bl	80006f4 <ILI9341_SPI_Send>
 8000fd8:	e00a      	b.n	8000ff0 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fb87 	bl	80006f4 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fb82 	bl	80006f4 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	ddcf      	ble.n	8000f9c <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	3301      	adds	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b1d      	cmp	r3, #29
 8001006:	ddc6      	ble.n	8000f96 <ILI9341_Draw_Char+0x1b2>
		break;
 8001008:	bf00      	nop
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020c00 	.word	0x40020c00
 8001018:	0800eb20 	.word	0x0800eb20
 800101c:	0800edf8 	.word	0x0800edf8

08001020 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <Before_Sending_Data+0x20>)
 800102c:	f006 fffc 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <Before_Sending_Data+0x20>)
 8001038:	f006 fff6 	bl	8008028 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020c00 	.word	0x40020c00

08001044 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <Before_Sending_Command+0x20>)
 8001050:	f006 ffea 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <Before_Sending_Command+0x20>)
 800105c:	f006 ffe4 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020c00 	.word	0x40020c00

08001068 <Si468x_dab_init>:

static uint16_t rssi_hi_res;


void Si468x_dab_init()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 800106c:	2101      	movs	r1, #1
 800106e:	4828      	ldr	r0, [pc, #160]	; (8001110 <Si468x_dab_init+0xa8>)
 8001070:	f002 fcc6 	bl	8003a00 <send_debug_msg>
	Si468x_reset();
 8001074:	f000 f84e 	bl	8001114 <Si468x_reset>
	Si468x_power_up();
 8001078:	f000 f868 	bl	800114c <Si468x_power_up>
	Si468x_bootloader_load_host();
 800107c:	f000 f8ea 	bl	8001254 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001080:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001084:	f000 f95a 	bl	800133c <Si468x_firmware_load_flash>
	Si468x_boot();
 8001088:	f000 f9f8 	bl	800147c <Si468x_boot>
	Si468x_get_part_info();
 800108c:	f000 fbb0 	bl	80017f0 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001090:	f000 fb28 	bl	80016e4 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, dla FM dać 0x00 (otwarty), dla DAB 0x01 (zamkniety)
 8001094:	2101      	movs	r1, #1
 8001096:	f241 7012 	movw	r0, #5906	; 0x1712
 800109a:	f000 fc19 	bl	80018d0 <Si468x_set_property>
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF468); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5. Wartość z kalibracji DAB: 0xF468 (-2968)
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x250); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3. Wartość z kalibracji DAB: 0x0250 (592)
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x5); 				//prog RSSI od kiedy łapie kanał, default 12
 800109e:	2105      	movs	r1, #5
 80010a0:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010a4:	f000 fc14 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010a8:	2130      	movs	r1, #48	; 0x30
 80010aa:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ae:	f000 fc0f 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010b2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010b6:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010ba:	f000 fc09 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 80010be:	f244 0105 	movw	r1, #16389	; 0x4005
 80010c2:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010c6:	f000 fc03 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010ca:	2101      	movs	r1, #1
 80010cc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010d0:	f000 fbfe 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010d4:	2101      	movs	r1, #1
 80010d6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010da:	f000 fbf9 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010de:	2101      	movs	r1, #1
 80010e0:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010e4:	f000 fbf4 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010e8:	2105      	movs	r1, #5
 80010ea:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010ee:	f000 fbef 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010f2:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 80010f6:	f24b 5003 	movw	r0, #46339	; 0xb503
 80010fa:	f000 fbe9 	bl	80018d0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 80010fe:	2101      	movs	r1, #1
 8001100:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001104:	f000 fbe4 	bl	80018d0 <Si468x_set_property>
	//Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001108:	f000 faec 	bl	80016e4 <Si468x_get_sys_state>

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800d520 	.word	0x0800d520

08001114 <Si468x_reset>:

void Si468x_reset()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001118:	2101      	movs	r1, #1
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <Si468x_reset+0x30>)
 800111c:	f002 fc70 	bl	8003a00 <send_debug_msg>
	RESET_PIN_LOW;
 8001120:	2200      	movs	r2, #0
 8001122:	2120      	movs	r1, #32
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <Si468x_reset+0x34>)
 8001126:	f006 ff7f 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f006 f978 	bl	8007420 <HAL_Delay>
	RESET_PIN_HIGH;
 8001130:	2201      	movs	r2, #1
 8001132:	2120      	movs	r1, #32
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <Si468x_reset+0x34>)
 8001136:	f006 ff77 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800113a:	20c8      	movs	r0, #200	; 0xc8
 800113c:	f006 f970 	bl	8007420 <HAL_Delay>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	0800d570 	.word	0x0800d570
 8001148:	40020800 	.word	0x40020800

0800114c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001150:	2101      	movs	r1, #1
 8001152:	4826      	ldr	r0, [pc, #152]	; (80011ec <Si468x_power_up+0xa0>)
 8001154:	f002 fc54 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <Si468x_power_up+0xa4>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <Si468x_power_up+0xa4>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <Si468x_power_up+0xa4>)
 8001166:	2217      	movs	r2, #23
 8001168:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Si468x_power_up+0xa4>)
 800116c:	2250      	movs	r2, #80	; 0x50
 800116e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Si468x_power_up+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <Si468x_power_up+0xa4>)
 8001178:	22f8      	movs	r2, #248	; 0xf8
 800117a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Si468x_power_up+0xa4>)
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <Si468x_power_up+0xa4>)
 8001184:	2201      	movs	r2, #1
 8001186:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <Si468x_power_up+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <Si468x_power_up+0xa4>)
 8001190:	2210      	movs	r2, #16
 8001192:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Si468x_power_up+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <Si468x_power_up+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <Si468x_power_up+0xa4>)
 80011a8:	2228      	movs	r2, #40	; 0x28
 80011aa:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <Si468x_power_up+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <Si468x_power_up+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011b8:	490d      	ldr	r1, [pc, #52]	; (80011f0 <Si468x_power_up+0xa4>)
 80011ba:	2010      	movs	r0, #16
 80011bc:	f000 fa58 	bl	8001670 <Si468x_write_command>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <Si468x_power_up+0xa8>)
 80011c6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f006 f929 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011ce:	490a      	ldr	r1, [pc, #40]	; (80011f8 <Si468x_power_up+0xac>)
 80011d0:	2005      	movs	r0, #5
 80011d2:	f000 fa6f 	bl	80016b4 <Si468x_read_reply>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <Si468x_power_up+0xa8>)
 80011dc:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011de:	2101      	movs	r1, #1
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <Si468x_power_up+0xb0>)
 80011e2:	f002 fc0d 	bl	8003a00 <send_debug_msg>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800d584 	.word	0x0800d584
 80011f0:	200001a8 	.word	0x200001a8
 80011f4:	20003510 	.word	0x20003510
 80011f8:	200011a8 	.word	0x200011a8
 80011fc:	0800d5c0 	.word	0x0800d5c0

08001200 <Si468x_load_init>:

void Si468x_load_init()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001204:	2101      	movs	r1, #1
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <Si468x_load_init+0x44>)
 8001208:	f002 fbfa 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <Si468x_load_init+0x48>)
 800120e:	2206      	movs	r2, #6
 8001210:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <Si468x_load_init+0x48>)
 8001214:	2200      	movs	r2, #0
 8001216:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001218:	490b      	ldr	r1, [pc, #44]	; (8001248 <Si468x_load_init+0x48>)
 800121a:	2002      	movs	r0, #2
 800121c:	f000 fa28 	bl	8001670 <Si468x_write_command>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <Si468x_load_init+0x4c>)
 8001226:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f006 f8f9 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <Si468x_load_init+0x50>)
 8001230:	2005      	movs	r0, #5
 8001232:	f000 fa3f 	bl	80016b4 <Si468x_read_reply>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <Si468x_load_init+0x4c>)
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	0800d5e0 	.word	0x0800d5e0
 8001248:	200001a8 	.word	0x200001a8
 800124c:	20003510 	.word	0x20003510
 8001250:	200011a8 	.word	0x200011a8

08001254 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800125a:	2101      	movs	r1, #1
 800125c:	4830      	ldr	r0, [pc, #192]	; (8001320 <Si468x_bootloader_load_host+0xcc>)
 800125e:	f002 fbcf 	bl	8003a00 <send_debug_msg>
	Si468x_load_init();
 8001262:	f7ff ffcd 	bl	8001200 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001266:	f241 63a4 	movw	r3, #5796	; 0x16a4
 800126a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <Si468x_bootloader_load_host+0xd0>)
 800126e:	2204      	movs	r2, #4
 8001270:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <Si468x_bootloader_load_host+0xd0>)
 8001274:	2200      	movs	r2, #0
 8001276:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <Si468x_bootloader_load_host+0xd0>)
 800127a:	2200      	movs	r2, #0
 800127c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <Si468x_bootloader_load_host+0xd0>)
 8001280:	2200      	movs	r2, #0
 8001282:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	e03e      	b.n	8001308 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800128a:	2300      	movs	r3, #0
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	e014      	b.n	80012ba <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001290:	88ba      	ldrh	r2, [r7, #4]
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	4924      	ldr	r1, [pc, #144]	; (8001328 <Si468x_bootloader_load_host+0xd4>)
 8001296:	fba1 1303 	umull	r1, r3, r1, r3
 800129a:	085b      	lsrs	r3, r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	4619      	mov	r1, r3
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	fb01 f303 	mul.w	r3, r1, r3
 80012a6:	441a      	add	r2, r3
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	3304      	adds	r3, #4
 80012ac:	491f      	ldr	r1, [pc, #124]	; (800132c <Si468x_bootloader_load_host+0xd8>)
 80012ae:	5c89      	ldrb	r1, [r1, r2]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <Si468x_bootloader_load_host+0xd0>)
 80012b2:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	3301      	adds	r3, #1
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <Si468x_bootloader_load_host+0xd4>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	085b      	lsrs	r3, r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	88ba      	ldrh	r2, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3e1      	bcc.n	8001290 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <Si468x_bootloader_load_host+0xd4>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4911      	ldr	r1, [pc, #68]	; (8001324 <Si468x_bootloader_load_host+0xd0>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f9c6 	bl	8001670 <Si468x_write_command>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <Si468x_bootloader_load_host+0xdc>)
 80012ea:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f006 f897 	bl	8007420 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012f2:	4910      	ldr	r1, [pc, #64]	; (8001334 <Si468x_bootloader_load_host+0xe0>)
 80012f4:	2005      	movs	r0, #5
 80012f6:	f000 f9dd 	bl	80016b4 <Si468x_read_reply>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <Si468x_bootloader_load_host+0xdc>)
 8001300:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	3301      	adds	r3, #1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d9bd      	bls.n	800128a <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800130e:	2101      	movs	r1, #1
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <Si468x_bootloader_load_host+0xe4>)
 8001312:	f002 fb75 	bl	8003a00 <send_debug_msg>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800d5f8 	.word	0x0800d5f8
 8001324:	200001a8 	.word	0x200001a8
 8001328:	aaaaaaab 	.word	0xaaaaaaab
 800132c:	0800f3e8 	.word	0x0800f3e8
 8001330:	20003510 	.word	0x20003510
 8001334:	200011a8 	.word	0x200011a8
 8001338:	0800d634 	.word	0x0800d634

0800133c <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001344:	2101      	movs	r1, #1
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <Si468x_firmware_load_flash+0x120>)
 8001348:	f002 fb5a 	bl	8003a00 <send_debug_msg>
	Si468x_load_init();
 800134c:	f7ff ff58 	bl	8001200 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001352:	2205      	movs	r2, #5
 8001354:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001358:	2200      	movs	r2, #0
 800135a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 800135e:	2200      	movs	r2, #0
 8001360:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 800136e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001378:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001382:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0e1b      	lsrs	r3, r3, #24
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 800138c:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800138e:	2100      	movs	r1, #0
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <Si468x_firmware_load_flash+0x128>)
 8001392:	f002 fb35 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 8001396:	4b32      	ldr	r3, [pc, #200]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	2210      	movs	r2, #16
 800139c:	4932      	ldr	r1, [pc, #200]	; (8001468 <Si468x_firmware_load_flash+0x12c>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f00b ffdc 	bl	800d35c <itoa>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fb29 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	2210      	movs	r2, #16
 80013b4:	492c      	ldr	r1, [pc, #176]	; (8001468 <Si468x_firmware_load_flash+0x12c>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00b ffd0 	bl	800d35c <itoa>
 80013bc:	4603      	mov	r3, r0
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fb1d 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 80013c8:	799b      	ldrb	r3, [r3, #6]
 80013ca:	2210      	movs	r2, #16
 80013cc:	4926      	ldr	r1, [pc, #152]	; (8001468 <Si468x_firmware_load_flash+0x12c>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00b ffc4 	bl	800d35c <itoa>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fb11 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 80013e0:	79db      	ldrb	r3, [r3, #7]
 80013e2:	2210      	movs	r2, #16
 80013e4:	4920      	ldr	r1, [pc, #128]	; (8001468 <Si468x_firmware_load_flash+0x12c>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00b ffb8 	bl	800d35c <itoa>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fb05 	bl	8003a00 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 80013fe:	2200      	movs	r2, #0
 8001400:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 800140a:	2200      	movs	r2, #0
 800140c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800140e:	4914      	ldr	r1, [pc, #80]	; (8001460 <Si468x_firmware_load_flash+0x124>)
 8001410:	200c      	movs	r0, #12
 8001412:	f000 f92d 	bl	8001670 <Si468x_write_command>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <Si468x_firmware_load_flash+0x130>)
 800141c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f005 fffe 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001424:	4912      	ldr	r1, [pc, #72]	; (8001470 <Si468x_firmware_load_flash+0x134>)
 8001426:	2005      	movs	r0, #5
 8001428:	f000 f944 	bl	80016b4 <Si468x_read_reply>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <Si468x_firmware_load_flash+0x130>)
 8001432:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <Si468x_firmware_load_flash+0x134>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001440:	2101      	movs	r1, #1
 8001442:	480c      	ldr	r0, [pc, #48]	; (8001474 <Si468x_firmware_load_flash+0x138>)
 8001444:	f002 fadc 	bl	8003a00 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001448:	e003      	b.n	8001452 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800144a:	2101      	movs	r1, #1
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <Si468x_firmware_load_flash+0x13c>)
 800144e:	f002 fad7 	bl	8003a00 <send_debug_msg>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	0800d654 	.word	0x0800d654
 8001460:	200001a8 	.word	0x200001a8
 8001464:	0800d690 	.word	0x0800d690
 8001468:	200034d0 	.word	0x200034d0
 800146c:	20003510 	.word	0x20003510
 8001470:	200011a8 	.word	0x200011a8
 8001474:	0800d6a4 	.word	0x0800d6a4
 8001478:	0800d6b4 	.word	0x0800d6b4

0800147c <Si468x_boot>:

void Si468x_boot()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001480:	2101      	movs	r1, #1
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <Si468x_boot+0x60>)
 8001484:	f002 fabc 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <Si468x_boot+0x64>)
 800148a:	2207      	movs	r2, #7
 800148c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <Si468x_boot+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001494:	4912      	ldr	r1, [pc, #72]	; (80014e0 <Si468x_boot+0x64>)
 8001496:	2002      	movs	r0, #2
 8001498:	f000 f8ea 	bl	8001670 <Si468x_write_command>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <Si468x_boot+0x68>)
 80014a2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f005 ffbb 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014aa:	490f      	ldr	r1, [pc, #60]	; (80014e8 <Si468x_boot+0x6c>)
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f901 	bl	80016b4 <Si468x_read_reply>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <Si468x_boot+0x68>)
 80014b8:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <Si468x_boot+0x6c>)
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014c2:	2bc0      	cmp	r3, #192	; 0xc0
 80014c4:	d104      	bne.n	80014d0 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014c6:	2101      	movs	r1, #1
 80014c8:	4808      	ldr	r0, [pc, #32]	; (80014ec <Si468x_boot+0x70>)
 80014ca:	f002 fa99 	bl	8003a00 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014ce:	e003      	b.n	80014d8 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014d0:	2101      	movs	r1, #1
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <Si468x_boot+0x74>)
 80014d4:	f002 fa94 	bl	8003a00 <send_debug_msg>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800d6d0 	.word	0x0800d6d0
 80014e0:	200001a8 	.word	0x200001a8
 80014e4:	20003510 	.word	0x20003510
 80014e8:	200011a8 	.word	0x200011a8
 80014ec:	0800d70c 	.word	0x0800d70c
 80014f0:	0800d728 	.word	0x0800d728

080014f4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80014fe:	1df9      	adds	r1, r7, #7
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	2201      	movs	r2, #1
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <Si468x_write_single_byte+0x20>)
 8001506:	f009 ff3c 	bl	800b382 <HAL_SPI_Transmit>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20006efc 	.word	0x20006efc

08001518 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001522:	1df9      	adds	r1, r7, #7
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <Si468x_read_single_byte+0x20>)
 800152a:	f00a f866 	bl	800b5fa <HAL_SPI_Receive>
	return data_buffer;
 800152e:	79fb      	ldrb	r3, [r7, #7]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20006efc 	.word	0x20006efc

0800153c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	81fb      	strh	r3, [r7, #14]
 800154a:	e01f      	b.n	800158c <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800154c:	4916      	ldr	r1, [pc, #88]	; (80015a8 <Si468x_wait_for_CTS+0x6c>)
 800154e:	2001      	movs	r0, #1
 8001550:	f000 f8b0 	bl	80016b4 <Si468x_read_reply>
		if(rd_reply.cts)
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <Si468x_wait_for_CTS+0x70>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00e      	beq.n	8001580 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <Si468x_wait_for_CTS+0x70>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001570:	2101      	movs	r1, #1
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <Si468x_wait_for_CTS+0x74>)
 8001574:	f002 fa44 	bl	8003a00 <send_debug_msg>
				return COMMAND_ERROR;
 8001578:	2320      	movs	r3, #32
 800157a:	e010      	b.n	800159e <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 800157c:	2300      	movs	r3, #0
 800157e:	e00e      	b.n	800159e <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f005 ff4d 	bl	8007420 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	3301      	adds	r3, #1
 800158a:	81fb      	strh	r3, [r7, #14]
 800158c:	89fa      	ldrh	r2, [r7, #14]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3db      	bcc.n	800154c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001594:	2101      	movs	r1, #1
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <Si468x_wait_for_CTS+0x78>)
 8001598:	f002 fa32 	bl	8003a00 <send_debug_msg>
	return TIMEOUT;
 800159c:	2308      	movs	r3, #8
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200011a8 	.word	0x200011a8
 80015ac:	200035fc 	.word	0x200035fc
 80015b0:	0800d73c 	.word	0x0800d73c
 80015b4:	0800d764 	.word	0x0800d764

080015b8 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <Si468x_write_multiple+0x4c>)
 80015ce:	f006 fd2b 	bl	8008028 <HAL_GPIO_WritePin>
	while(len--)
 80015d2:	e009      	b.n	80015e8 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	81fa      	strh	r2, [r7, #14]
 80015da:	461a      	mov	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff86 	bl	80014f4 <Si468x_write_single_byte>
	while(len--)
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	80fa      	strh	r2, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80015f2:	2201      	movs	r2, #1
 80015f4:	2110      	movs	r1, #16
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <Si468x_write_multiple+0x4c>)
 80015f8:	f006 fd16 	bl	8008028 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40020800 	.word	0x40020800

08001608 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001618:	2201      	movs	r2, #1
 800161a:	2110      	movs	r1, #16
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <Si468x_read_multiple+0x64>)
 800161e:	f006 fd03 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001622:	2003      	movs	r0, #3
 8001624:	f005 fefc 	bl	8007420 <HAL_Delay>
	CS_PIN_LOW;
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <Si468x_read_multiple+0x64>)
 800162e:	f006 fcfb 	bl	8008028 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ff5e 	bl	80014f4 <Si468x_write_single_byte>
	while(len--)
 8001638:	e009      	b.n	800164e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	81fa      	strh	r2, [r7, #14]
 8001640:	461a      	mov	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	189c      	adds	r4, r3, r2
 8001646:	f7ff ff67 	bl	8001518 <Si468x_read_single_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	80fa      	strh	r2, [r7, #6]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001658:	2201      	movs	r2, #1
 800165a:	2110      	movs	r1, #16
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <Si468x_read_multiple+0x64>)
 800165e:	f006 fce3 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	40020800 	.word	0x40020800

08001670 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800167c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001680:	f7ff ff5c 	bl	800153c <Si468x_wait_for_CTS>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <Si468x_write_command+0x24>
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b20      	cmp	r3, #32
 8001692:	d10a      	bne.n	80016aa <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff8d 	bl	80015b8 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800169e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016a2:	f7ff ff4b 	bl	800153c <Si468x_wait_for_CTS>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	6839      	ldr	r1, [r7, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff9f 	bl	8001608 <Si468x_read_multiple>
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <Si468x_read_reply+0x28>)
 80016cc:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <Si468x_read_reply+0x2c>)
 80016d0:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200011a8 	.word	0x200011a8
 80016e0:	200035fc 	.word	0x200035fc

080016e4 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80016e8:	2101      	movs	r1, #1
 80016ea:	4833      	ldr	r0, [pc, #204]	; (80017b8 <Si468x_get_sys_state+0xd4>)
 80016ec:	f002 f988 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <Si468x_get_sys_state+0xd8>)
 80016f2:	2209      	movs	r2, #9
 80016f4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <Si468x_get_sys_state+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80016fc:	492f      	ldr	r1, [pc, #188]	; (80017bc <Si468x_get_sys_state+0xd8>)
 80016fe:	2002      	movs	r0, #2
 8001700:	f7ff ffb6 	bl	8001670 <Si468x_write_command>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <Si468x_get_sys_state+0xdc>)
 800170a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f005 fe87 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001712:	492c      	ldr	r1, [pc, #176]	; (80017c4 <Si468x_get_sys_state+0xe0>)
 8001714:	2005      	movs	r0, #5
 8001716:	f7ff ffcd 	bl	80016b4 <Si468x_read_reply>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <Si468x_get_sys_state+0xdc>)
 8001720:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001722:	2100      	movs	r1, #0
 8001724:	4828      	ldr	r0, [pc, #160]	; (80017c8 <Si468x_get_sys_state+0xe4>)
 8001726:	f002 f96b 	bl	8003a00 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <Si468x_get_sys_state+0xe0>)
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	2b07      	cmp	r3, #7
 8001730:	d83a      	bhi.n	80017a8 <Si468x_get_sys_state+0xc4>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <Si468x_get_sys_state+0x54>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	08001759 	.word	0x08001759
 800173c:	08001763 	.word	0x08001763
 8001740:	0800176d 	.word	0x0800176d
 8001744:	08001777 	.word	0x08001777
 8001748:	08001781 	.word	0x08001781
 800174c:	0800178b 	.word	0x0800178b
 8001750:	08001795 	.word	0x08001795
 8001754:	0800179f 	.word	0x0800179f
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001758:	2101      	movs	r1, #1
 800175a:	481c      	ldr	r0, [pc, #112]	; (80017cc <Si468x_get_sys_state+0xe8>)
 800175c:	f002 f950 	bl	8003a00 <send_debug_msg>
			break;
 8001760:	e027      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001762:	2101      	movs	r1, #1
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <Si468x_get_sys_state+0xec>)
 8001766:	f002 f94b 	bl	8003a00 <send_debug_msg>
			break;
 800176a:	e022      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800176c:	2101      	movs	r1, #1
 800176e:	4819      	ldr	r0, [pc, #100]	; (80017d4 <Si468x_get_sys_state+0xf0>)
 8001770:	f002 f946 	bl	8003a00 <send_debug_msg>
			break;
 8001774:	e01d      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001776:	2101      	movs	r1, #1
 8001778:	4817      	ldr	r0, [pc, #92]	; (80017d8 <Si468x_get_sys_state+0xf4>)
 800177a:	f002 f941 	bl	8003a00 <send_debug_msg>
			break;
 800177e:	e018      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 8001780:	2101      	movs	r1, #1
 8001782:	4816      	ldr	r0, [pc, #88]	; (80017dc <Si468x_get_sys_state+0xf8>)
 8001784:	f002 f93c 	bl	8003a00 <send_debug_msg>
			break;
 8001788:	e013      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 800178a:	2101      	movs	r1, #1
 800178c:	4814      	ldr	r0, [pc, #80]	; (80017e0 <Si468x_get_sys_state+0xfc>)
 800178e:	f002 f937 	bl	8003a00 <send_debug_msg>
			break;
 8001792:	e00e      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001794:	2101      	movs	r1, #1
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <Si468x_get_sys_state+0x100>)
 8001798:	f002 f932 	bl	8003a00 <send_debug_msg>
			break;
 800179c:	e009      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 800179e:	2101      	movs	r1, #1
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <Si468x_get_sys_state+0x104>)
 80017a2:	f002 f92d 	bl	8003a00 <send_debug_msg>
			break;
 80017a6:	e004      	b.n	80017b2 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4810      	ldr	r0, [pc, #64]	; (80017ec <Si468x_get_sys_state+0x108>)
 80017ac:	f002 f928 	bl	8003a00 <send_debug_msg>
			break;
 80017b0:	bf00      	nop
	}
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800d774 	.word	0x0800d774
 80017bc:	200001a8 	.word	0x200001a8
 80017c0:	20003510 	.word	0x20003510
 80017c4:	200011a8 	.word	0x200011a8
 80017c8:	0800d7b0 	.word	0x0800d7b0
 80017cc:	0800d7bc 	.word	0x0800d7bc
 80017d0:	0800d7d4 	.word	0x0800d7d4
 80017d4:	0800d7ec 	.word	0x0800d7ec
 80017d8:	0800d804 	.word	0x0800d804
 80017dc:	0800d82c 	.word	0x0800d82c
 80017e0:	0800d848 	.word	0x0800d848
 80017e4:	0800d860 	.word	0x0800d860
 80017e8:	0800d87c 	.word	0x0800d87c
 80017ec:	0800d894 	.word	0x0800d894

080017f0 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 80017f6:	2101      	movs	r1, #1
 80017f8:	482d      	ldr	r0, [pc, #180]	; (80018b0 <Si468x_get_part_info+0xc0>)
 80017fa:	f002 f901 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <Si468x_get_part_info+0xc4>)
 8001800:	2208      	movs	r2, #8
 8001802:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <Si468x_get_part_info+0xc4>)
 8001806:	2200      	movs	r2, #0
 8001808:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800180a:	492a      	ldr	r1, [pc, #168]	; (80018b4 <Si468x_get_part_info+0xc4>)
 800180c:	2002      	movs	r0, #2
 800180e:	f7ff ff2f 	bl	8001670 <Si468x_write_command>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <Si468x_get_part_info+0xc8>)
 8001818:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f005 fe00 	bl	8007420 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fe67 	bl	80014f4 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001826:	4925      	ldr	r1, [pc, #148]	; (80018bc <Si468x_get_part_info+0xcc>)
 8001828:	200a      	movs	r0, #10
 800182a:	f7ff ff43 	bl	80016b4 <Si468x_read_reply>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <Si468x_get_part_info+0xc8>)
 8001834:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001836:	2100      	movs	r1, #0
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <Si468x_get_part_info+0xd0>)
 800183a:	f002 f8e1 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <Si468x_get_part_info+0xcc>)
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	220a      	movs	r2, #10
 8001844:	491f      	ldr	r1, [pc, #124]	; (80018c4 <Si468x_get_part_info+0xd4>)
 8001846:	4618      	mov	r0, r3
 8001848:	f00b fd88 	bl	800d35c <itoa>
 800184c:	4603      	mov	r3, r0
 800184e:	2101      	movs	r1, #1
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f8d5 	bl	8003a00 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001856:	2100      	movs	r1, #0
 8001858:	481b      	ldr	r0, [pc, #108]	; (80018c8 <Si468x_get_part_info+0xd8>)
 800185a:	f002 f8d1 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <Si468x_get_part_info+0xcc>)
 8001860:	795b      	ldrb	r3, [r3, #5]
 8001862:	220a      	movs	r2, #10
 8001864:	4917      	ldr	r1, [pc, #92]	; (80018c4 <Si468x_get_part_info+0xd4>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00b fd78 	bl	800d35c <itoa>
 800186c:	4603      	mov	r3, r0
 800186e:	2101      	movs	r1, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f8c5 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001876:	2100      	movs	r1, #0
 8001878:	4814      	ldr	r0, [pc, #80]	; (80018cc <Si468x_get_part_info+0xdc>)
 800187a:	f002 f8c1 	bl	8003a00 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <Si468x_get_part_info+0xcc>)
 8001880:	7a5b      	ldrb	r3, [r3, #9]
 8001882:	b29b      	uxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <Si468x_get_part_info+0xcc>)
 800188a:	7a1b      	ldrb	r3, [r3, #8]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4413      	add	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	220a      	movs	r2, #10
 8001896:	490b      	ldr	r1, [pc, #44]	; (80018c4 <Si468x_get_part_info+0xd4>)
 8001898:	4618      	mov	r0, r3
 800189a:	f00b fd5f 	bl	800d35c <itoa>
 800189e:	4603      	mov	r3, r0
 80018a0:	2101      	movs	r1, #1
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 f8ac 	bl	8003a00 <send_debug_msg>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800d8a8 	.word	0x0800d8a8
 80018b4:	200001a8 	.word	0x200001a8
 80018b8:	20003510 	.word	0x20003510
 80018bc:	200011a8 	.word	0x200011a8
 80018c0:	0800d8e4 	.word	0x0800d8e4
 80018c4:	200034d0 	.word	0x200034d0
 80018c8:	0800d8f4 	.word	0x0800d8f4
 80018cc:	0800d900 	.word	0x0800d900

080018d0 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	460a      	mov	r2, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 80018e0:	2101      	movs	r1, #1
 80018e2:	4832      	ldr	r0, [pc, #200]	; (80019ac <Si468x_set_property+0xdc>)
 80018e4:	f002 f88c 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4831      	ldr	r0, [pc, #196]	; (80019b0 <Si468x_set_property+0xe0>)
 80018ec:	f002 f888 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	2210      	movs	r2, #16
 80018f4:	492f      	ldr	r1, [pc, #188]	; (80019b4 <Si468x_set_property+0xe4>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00b fd30 	bl	800d35c <itoa>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f002 f87d 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001906:	2100      	movs	r1, #0
 8001908:	482b      	ldr	r0, [pc, #172]	; (80019b8 <Si468x_set_property+0xe8>)
 800190a:	f002 f879 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	2210      	movs	r2, #16
 8001912:	4928      	ldr	r1, [pc, #160]	; (80019b4 <Si468x_set_property+0xe4>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00b fd21 	bl	800d35c <itoa>
 800191a:	4603      	mov	r3, r0
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f002 f86e 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <Si468x_set_property+0xec>)
 8001926:	2213      	movs	r2, #19
 8001928:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <Si468x_set_property+0xec>)
 800192c:	2200      	movs	r2, #0
 800192e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <Si468x_set_property+0xec>)
 8001936:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <Si468x_set_property+0xec>)
 8001942:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <Si468x_set_property+0xec>)
 800194a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <Si468x_set_property+0xec>)
 8001956:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <Si468x_set_property+0xec>)
 800195a:	2006      	movs	r0, #6
 800195c:	f7ff fe88 	bl	8001670 <Si468x_write_command>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <Si468x_set_property+0xf0>)
 8001966:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001968:	2001      	movs	r0, #1
 800196a:	f005 fd59 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800196e:	4915      	ldr	r1, [pc, #84]	; (80019c4 <Si468x_set_property+0xf4>)
 8001970:	2005      	movs	r0, #5
 8001972:	f7ff fe9f 	bl	80016b4 <Si468x_read_reply>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <Si468x_set_property+0xf0>)
 800197c:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f825 	bl	80019d0 <Si468x_get_property>
 8001986:	4603      	mov	r3, r0
 8001988:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	d104      	bne.n	800199c <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 8001992:	2101      	movs	r1, #1
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <Si468x_set_property+0xf8>)
 8001996:	f002 f833 	bl	8003a00 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 800199a:	e003      	b.n	80019a4 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 800199c:	2101      	movs	r1, #1
 800199e:	480b      	ldr	r0, [pc, #44]	; (80019cc <Si468x_set_property+0xfc>)
 80019a0:	f002 f82e 	bl	8003a00 <send_debug_msg>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	0800d910 	.word	0x0800d910
 80019b0:	0800d950 	.word	0x0800d950
 80019b4:	200034d0 	.word	0x200034d0
 80019b8:	0800d960 	.word	0x0800d960
 80019bc:	200001a8 	.word	0x200001a8
 80019c0:	20003510 	.word	0x20003510
 80019c4:	200011a8 	.word	0x200011a8
 80019c8:	0800d97c 	.word	0x0800d97c
 80019cc:	0800d998 	.word	0x0800d998

080019d0 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019da:	2101      	movs	r1, #1
 80019dc:	482b      	ldr	r0, [pc, #172]	; (8001a8c <Si468x_get_property+0xbc>)
 80019de:	f002 f80f 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019e2:	2100      	movs	r1, #0
 80019e4:	482a      	ldr	r0, [pc, #168]	; (8001a90 <Si468x_get_property+0xc0>)
 80019e6:	f002 f80b 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	2210      	movs	r2, #16
 80019ee:	4929      	ldr	r1, [pc, #164]	; (8001a94 <Si468x_get_property+0xc4>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00b fcb3 	bl	800d35c <itoa>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 f800 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <Si468x_get_property+0xc8>)
 8001a02:	2214      	movs	r2, #20
 8001a04:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <Si468x_get_property+0xc8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <Si468x_get_property+0xc8>)
 8001a12:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <Si468x_get_property+0xc8>)
 8001a1e:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a20:	491d      	ldr	r1, [pc, #116]	; (8001a98 <Si468x_get_property+0xc8>)
 8001a22:	2004      	movs	r0, #4
 8001a24:	f7ff fe24 	bl	8001670 <Si468x_write_command>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <Si468x_get_property+0xcc>)
 8001a2e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f005 fcf5 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a36:	491a      	ldr	r1, [pc, #104]	; (8001aa0 <Si468x_get_property+0xd0>)
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff fe3b 	bl	80016b4 <Si468x_read_reply>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <Si468x_get_property+0xcc>)
 8001a44:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a46:	2100      	movs	r1, #0
 8001a48:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <Si468x_get_property+0xd4>)
 8001a4a:	f001 ffd9 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <Si468x_get_property+0xd0>)
 8001a50:	795b      	ldrb	r3, [r3, #5]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <Si468x_get_property+0xd0>)
 8001a56:	7912      	ldrb	r2, [r2, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	490d      	ldr	r1, [pc, #52]	; (8001a94 <Si468x_get_property+0xc4>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00b fc7c 	bl	800d35c <itoa>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 ffc9 	bl	8003a00 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <Si468x_get_property+0xd0>)
 8001a70:	795b      	ldrb	r3, [r3, #5]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <Si468x_get_property+0xd0>)
 8001a7a:	791b      	ldrb	r3, [r3, #4]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800d9b0 	.word	0x0800d9b0
 8001a90:	0800d950 	.word	0x0800d950
 8001a94:	200034d0 	.word	0x200034d0
 8001a98:	200001a8 	.word	0x200001a8
 8001a9c:	20003510 	.word	0x20003510
 8001aa0:	200011a8 	.word	0x200011a8
 8001aa4:	0800d9ec 	.word	0x0800d9ec

08001aa8 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t ant_cap)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4858      	ldr	r0, [pc, #352]	; (8001c1c <Si468x_dab_tune_freq+0x174>)
 8001abc:	f001 ffa0 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4857      	ldr	r0, [pc, #348]	; (8001c20 <Si468x_dab_tune_freq+0x178>)
 8001ac4:	f001 ff9c 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <Si468x_dab_tune_freq+0x17c>)
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	4955      	ldr	r1, [pc, #340]	; (8001c28 <Si468x_dab_tune_freq+0x180>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00b fc41 	bl	800d35c <itoa>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 ff8e 	bl	8003a00 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4851      	ldr	r0, [pc, #324]	; (8001c2c <Si468x_dab_tune_freq+0x184>)
 8001ae8:	f001 ff8a 	bl	8003a00 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001aee:	22b0      	movs	r2, #176	; 0xb0
 8001af0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001af8:	4a4d      	ldr	r2, [pc, #308]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	70da      	strb	r2, [r3, #3]

	switch(ant_cap)
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d012      	beq.n	8001b30 <Si468x_dab_tune_freq+0x88>
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d117      	bne.n	8001b3e <Si468x_dab_tune_freq+0x96>
	{
		case USE_ANT_CAP:
			//use ANT_CAP value from table of best ANTCAP values
			dab_spi_tx_buffer[4] = ant_cap_values[channel] & 0xFF;	//antcap [7:0]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <Si468x_dab_tune_freq+0x18c>)
 8001b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b1a:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap_values[channel] >> 8;	//antcap [15:8]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <Si468x_dab_tune_freq+0x18c>)
 8001b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b2c:	715a      	strb	r2, [r3, #5]
			break;
 8001b2e:	e011      	b.n	8001b54 <Si468x_dab_tune_freq+0xac>
		case NOT_USE_ANT_CAP:
			//use algorithm of automatic setting ant_cap value based on tuning values written to Si4684
			dab_spi_tx_buffer[4] = 0x00;	//antcap [7:0]
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = 0x00;	//antcap [15:8]
 8001b36:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	715a      	strb	r2, [r3, #5]
			break;
 8001b3c:	e00a      	b.n	8001b54 <Si468x_dab_tune_freq+0xac>
		default:
			//use ant_cap value as argument of this function
			dab_spi_tx_buffer[4] = ant_cap & 0xFF;	//antcap [7:0]
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b44:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap >> 8;	//antcap [15:8]
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b50:	715a      	strb	r2, [r3, #5]
			break;
 8001b52:	bf00      	nop
	}

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b54:	4936      	ldr	r1, [pc, #216]	; (8001c30 <Si468x_dab_tune_freq+0x188>)
 8001b56:	2006      	movs	r0, #6
 8001b58:	f7ff fd8a 	bl	8001670 <Si468x_write_command>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <Si468x_dab_tune_freq+0x190>)
 8001b62:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b64:	4935      	ldr	r1, [pc, #212]	; (8001c3c <Si468x_dab_tune_freq+0x194>)
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff fda4 	bl	80016b4 <Si468x_read_reply>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <Si468x_dab_tune_freq+0x190>)
 8001b72:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <Si468x_dab_tune_freq+0x198>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <Si468x_dab_tune_freq+0xe2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b82:	2101      	movs	r1, #1
 8001b84:	482f      	ldr	r0, [pc, #188]	; (8001c44 <Si468x_dab_tune_freq+0x19c>)
 8001b86:	f001 ff3b 	bl	8003a00 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	e03a      	b.n	8001c06 <Si468x_dab_tune_freq+0x15e>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b90:	492a      	ldr	r1, [pc, #168]	; (8001c3c <Si468x_dab_tune_freq+0x194>)
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fd8e 	bl	80016b4 <Si468x_read_reply>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <Si468x_dab_tune_freq+0x190>)
 8001b9e:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <Si468x_dab_tune_freq+0x198>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01c      	beq.n	8001be8 <Si468x_dab_tune_freq+0x140>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4825      	ldr	r0, [pc, #148]	; (8001c48 <Si468x_dab_tune_freq+0x1a0>)
 8001bb2:	f001 ff25 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	220a      	movs	r2, #10
 8001bba:	491b      	ldr	r1, [pc, #108]	; (8001c28 <Si468x_dab_tune_freq+0x180>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00b fbcd 	bl	800d35c <itoa>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 ff1a 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	481f      	ldr	r0, [pc, #124]	; (8001c4c <Si468x_dab_tune_freq+0x1a4>)
 8001bd0:	f001 ff16 	bl	8003a00 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <Si468x_dab_tune_freq+0x1a8>)
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <Si468x_dab_tune_freq+0x17c>)
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <Si468x_dab_tune_freq+0x1a8>)
 8001be4:	6093      	str	r3, [r2, #8]
			break;
 8001be6:	e014      	b.n	8001c12 <Si468x_dab_tune_freq+0x16a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d103      	bne.n	8001bfa <Si468x_dab_tune_freq+0x152>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4817      	ldr	r0, [pc, #92]	; (8001c54 <Si468x_dab_tune_freq+0x1ac>)
 8001bf6:	f001 ff03 	bl	8003a00 <send_debug_msg>
		}
		HAL_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f005 fc10 	bl	8007420 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	3301      	adds	r3, #1
 8001c04:	81fb      	strh	r3, [r7, #14]
 8001c06:	89fb      	ldrh	r3, [r7, #14]
 8001c08:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d9bf      	bls.n	8001b90 <Si468x_dab_tune_freq+0xe8>
	}
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0800daa4 	.word	0x0800daa4
 8001c20:	0800dae0 	.word	0x0800dae0
 8001c24:	20003514 	.word	0x20003514
 8001c28:	200034d0 	.word	0x200034d0
 8001c2c:	0800da60 	.word	0x0800da60
 8001c30:	200001a8 	.word	0x200001a8
 8001c34:	08010a8c 	.word	0x08010a8c
 8001c38:	20003510 	.word	0x20003510
 8001c3c:	200011a8 	.word	0x200011a8
 8001c40:	200035fc 	.word	0x200035fc
 8001c44:	0800d6a4 	.word	0x0800d6a4
 8001c48:	0800daec 	.word	0x0800daec
 8001c4c:	0800db08 	.word	0x0800db08
 8001c50:	20004bc4 	.word	0x20004bc4
 8001c54:	0800db10 	.word	0x0800db10

08001c58 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <Si468x_dab_digrad_status+0x9c>)
 8001c62:	22b2      	movs	r2, #178	; 0xb2
 8001c64:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <Si468x_dab_digrad_status+0x9c>)
 8001c68:	221a      	movs	r2, #26
 8001c6a:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c6c:	4921      	ldr	r1, [pc, #132]	; (8001cf4 <Si468x_dab_digrad_status+0x9c>)
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7ff fcfe 	bl	8001670 <Si468x_write_command>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <Si468x_dab_digrad_status+0xa0>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f005 fbcf 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c82:	491e      	ldr	r1, [pc, #120]	; (8001cfc <Si468x_dab_digrad_status+0xa4>)
 8001c84:	2028      	movs	r0, #40	; 0x28
 8001c86:	f7ff fd15 	bl	80016b4 <Si468x_read_reply>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <Si468x_dab_digrad_status+0xa0>)
 8001c90:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <Si468x_dab_digrad_status+0xa8>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d019      	beq.n	8001cd4 <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001ca0:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <Si468x_dab_digrad_status+0xac>)
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <Si468x_dab_digrad_status+0xa4>)
 8001ca4:	4615      	mov	r5, r2
 8001ca6:	1d1c      	adds	r4, r3, #4
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb4:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <Si468x_dab_digrad_status+0xac>)
 8001cba:	78db      	ldrb	r3, [r3, #3]
 8001cbc:	2b14      	cmp	r3, #20
 8001cbe:	d902      	bls.n	8001cc6 <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <Si468x_dab_digrad_status+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <Si468x_dab_digrad_status+0xac>)
 8001cc8:	795b      	ldrb	r3, [r3, #5]
 8001cca:	2b36      	cmp	r3, #54	; 0x36
 8001ccc:	d902      	bls.n	8001cd4 <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <Si468x_dab_digrad_status+0xac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <Si468x_dab_digrad_status+0xac>)
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4615      	mov	r5, r2
 8001cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ce8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	200001a8 	.word	0x200001a8
 8001cf8:	20003510 	.word	0x20003510
 8001cfc:	200011a8 	.word	0x200011a8
 8001d00:	200035fc 	.word	0x200035fc
 8001d04:	200035d4 	.word	0x200035d4

08001d08 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001d0e:	2300      	movs	r3, #0
 8001d10:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001d12:	2300      	movs	r3, #0
 8001d14:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001d16:	2300      	movs	r3, #0
 8001d18:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001d1e:	4ba2      	ldr	r3, [pc, #648]	; (8001fa8 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001d24:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d2a:	499f      	ldr	r1, [pc, #636]	; (8001fa8 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f7ff fc9f 	bl	8001670 <Si468x_write_command>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d38:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f005 fb70 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d40:	499b      	ldr	r1, [pc, #620]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d46:	f7ff fcb5 	bl	80016b4 <Si468x_read_reply>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b97      	ldr	r3, [pc, #604]	; (8001fac <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d50:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d52:	2101      	movs	r1, #1
 8001d54:	4897      	ldr	r0, [pc, #604]	; (8001fb4 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d56:	f001 fe53 	bl	8003a00 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4894      	ldr	r0, [pc, #592]	; (8001fbc <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d6c:	f001 fe48 	bl	8003a00 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d70:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b8e      	ldr	r3, [pc, #568]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d78:	795b      	ldrb	r3, [r3, #5]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d84:	4b8a      	ldr	r3, [pc, #552]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d86:	7a1b      	ldrb	r3, [r3, #8]
 8001d88:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	773b      	strb	r3, [r7, #28]
 8001d8e:	e250      	b.n	8002232 <Si468x_dab_get_digital_service_list+0x52a>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001d90:	7f3b      	ldrb	r3, [r7, #28]
 8001d92:	4a8b      	ldr	r2, [pc, #556]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d94:	7892      	ldrb	r2, [r2, #2]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a89      	ldr	r2, [pc, #548]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d9a:	6892      	ldr	r2, [r2, #8]
 8001d9c:	4989      	ldr	r1, [pc, #548]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d9e:	2034      	movs	r0, #52	; 0x34
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	440b      	add	r3, r1
 8001da6:	3324      	adds	r3, #36	; 0x24
 8001da8:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001daa:	7f3b      	ldrb	r3, [r7, #28]
 8001dac:	4a84      	ldr	r2, [pc, #528]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dae:	7892      	ldrb	r2, [r2, #2]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a83      	ldr	r2, [pc, #524]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001db4:	7b10      	ldrb	r0, [r2, #12]
 8001db6:	4a83      	ldr	r2, [pc, #524]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001db8:	2134      	movs	r1, #52	; 0x34
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3328      	adds	r3, #40	; 0x28
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001dc6:	7fba      	ldrb	r2, [r7, #30]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	f103 0210 	add.w	r2, r3, #16
 8001dd4:	7f7b      	ldrb	r3, [r7, #29]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ddc:	5cd2      	ldrb	r2, [r2, r3]
 8001dde:	7f3b      	ldrb	r3, [r7, #28]
 8001de0:	4977      	ldr	r1, [pc, #476]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001de2:	7889      	ldrb	r1, [r1, #2]
 8001de4:	440b      	add	r3, r1
 8001de6:	f002 0201 	and.w	r2, r2, #1
 8001dea:	b2d0      	uxtb	r0, r2
 8001dec:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dee:	2134      	movs	r1, #52	; 0x34
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	3314      	adds	r3, #20
 8001df8:	4602      	mov	r2, r0
 8001dfa:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001dfc:	7fba      	ldrb	r2, [r7, #30]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	f103 0211 	add.w	r2, r3, #17
 8001e0a:	7f7b      	ldrb	r3, [r7, #29]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e12:	5cd2      	ldrb	r2, [r2, r3]
 8001e14:	7f3b      	ldrb	r3, [r7, #28]
 8001e16:	496a      	ldr	r1, [pc, #424]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e18:	7889      	ldrb	r1, [r1, #2]
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f002 020f 	and.w	r2, r2, #15
 8001e20:	b2d0      	uxtb	r0, r2
 8001e22:	4a68      	ldr	r2, [pc, #416]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e24:	2134      	movs	r1, #52	; 0x34
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3329      	adds	r3, #41	; 0x29
 8001e2e:	4602      	mov	r2, r0
 8001e30:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e32:	7f3b      	ldrb	r3, [r7, #28]
 8001e34:	4a62      	ldr	r2, [pc, #392]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e36:	7892      	ldrb	r2, [r2, #2]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a62      	ldr	r2, [pc, #392]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e3c:	2134      	movs	r1, #52	; 0x34
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3314      	adds	r3, #20
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d017      	beq.n	8001e7c <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e4c:	7fbb      	ldrb	r3, [r7, #30]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e52:	7f3b      	ldrb	r3, [r7, #28]
 8001e54:	4a5a      	ldr	r2, [pc, #360]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e56:	7892      	ldrb	r2, [r2, #2]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e5c:	2134      	movs	r1, #52	; 0x34
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3329      	adds	r3, #41	; 0x29
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	7f7b      	ldrb	r3, [r7, #29]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e6e:	7f3b      	ldrb	r3, [r7, #28]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e74:	7ffb      	ldrb	r3, [r7, #31]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]
			continue;
 8001e7a:	e1d7      	b.n	800222c <Si468x_dab_get_digital_service_list+0x524>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e7c:	7fba      	ldrb	r2, [r7, #30]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f103 0210 	add.w	r2, r3, #16
 8001e8a:	7f7b      	ldrb	r3, [r7, #29]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	105b      	asrs	r3, r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	7f3b      	ldrb	r3, [r7, #28]
 8001e9a:	4949      	ldr	r1, [pc, #292]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e9c:	7889      	ldrb	r1, [r1, #2]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f002 021f 	and.w	r2, r2, #31
 8001ea4:	b2d0      	uxtb	r0, r2
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ea8:	2134      	movs	r1, #52	; 0x34
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3315      	adds	r3, #21
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001eb6:	7f3b      	ldrb	r3, [r7, #28]
 8001eb8:	4a41      	ldr	r2, [pc, #260]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001eba:	7892      	ldrb	r2, [r2, #2]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a41      	ldr	r2, [pc, #260]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ec0:	2134      	movs	r1, #52	; 0x34
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3314      	adds	r3, #20
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <Si468x_dab_get_digital_service_list+0x1ce>
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d079      	beq.n	8001fc8 <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001ed4:	e0ee      	b.n	80020b4 <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001ed6:	7fba      	ldrb	r2, [r7, #30]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	f103 020c 	add.w	r2, r3, #12
 8001ee4:	7f7b      	ldrb	r3, [r7, #29]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	7fba      	ldrb	r2, [r7, #30]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	f103 020d 	add.w	r2, r3, #13
 8001efe:	7f7b      	ldrb	r3, [r7, #29]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f0e:	4419      	add	r1, r3
 8001f10:	7f3b      	ldrb	r3, [r7, #28]
 8001f12:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f14:	7892      	ldrb	r2, [r2, #2]
 8001f16:	4413      	add	r3, r2
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f1c:	2134      	movs	r1, #52	; 0x34
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3318      	adds	r3, #24
 8001f26:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001f28:	7fba      	ldrb	r2, [r7, #30]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	f103 020d 	add.w	r2, r3, #13
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f3e:	5cd2      	ldrb	r2, [r2, r3]
 8001f40:	7f3b      	ldrb	r3, [r7, #28]
 8001f42:	491f      	ldr	r1, [pc, #124]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f44:	7889      	ldrb	r1, [r1, #2]
 8001f46:	440b      	add	r3, r1
 8001f48:	0912      	lsrs	r2, r2, #4
 8001f4a:	b2d0      	uxtb	r0, r2
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f4e:	2134      	movs	r1, #52	; 0x34
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	331c      	adds	r3, #28
 8001f58:	4602      	mov	r2, r0
 8001f5a:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f5c:	7f3b      	ldrb	r3, [r7, #28]
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f60:	7892      	ldrb	r2, [r2, #2]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f66:	2134      	movs	r1, #52	; 0x34
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	331c      	adds	r3, #28
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	031b      	lsls	r3, r3, #12
 8001f74:	4618      	mov	r0, r3
 8001f76:	7f3b      	ldrb	r3, [r7, #28]
 8001f78:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f7a:	7892      	ldrb	r2, [r2, #2]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f80:	2134      	movs	r1, #52	; 0x34
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3318      	adds	r3, #24
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	7f3b      	ldrb	r3, [r7, #28]
 8001f8e:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f90:	7889      	ldrb	r1, [r1, #2]
 8001f92:	440b      	add	r3, r1
 8001f94:	4402      	add	r2, r0
 8001f96:	490b      	ldr	r1, [pc, #44]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f98:	2034      	movs	r0, #52	; 0x34
 8001f9a:	fb00 f303 	mul.w	r3, r0, r3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3320      	adds	r3, #32
 8001fa2:	601a      	str	r2, [r3, #0]
				break;
 8001fa4:	e086      	b.n	80020b4 <Si468x_dab_get_digital_service_list+0x3ac>
 8001fa6:	bf00      	nop
 8001fa8:	200001a8 	.word	0x200001a8
 8001fac:	20003510 	.word	0x20003510
 8001fb0:	200011a8 	.word	0x200011a8
 8001fb4:	0800db70 	.word	0x0800db70
 8001fb8:	200035fc 	.word	0x200035fc
 8001fbc:	0800d6a4 	.word	0x0800d6a4
 8001fc0:	20004bc4 	.word	0x20004bc4
 8001fc4:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001fc8:	7fba      	ldrb	r2, [r7, #30]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	f103 020c 	add.w	r2, r3, #12
 8001fd6:	7f7b      	ldrb	r3, [r7, #29]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	4aa0      	ldr	r2, [pc, #640]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	7fba      	ldrb	r2, [r7, #30]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f103 020d 	add.w	r2, r3, #13
 8001ff0:	7f7b      	ldrb	r3, [r7, #29]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a9a      	ldr	r2, [pc, #616]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	4419      	add	r1, r3
 8001ffe:	7fba      	ldrb	r2, [r7, #30]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	f103 020e 	add.w	r2, r3, #14
 800200c:	7f7b      	ldrb	r3, [r7, #29]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	4a93      	ldr	r2, [pc, #588]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800201c:	4419      	add	r1, r3
 800201e:	7f3b      	ldrb	r3, [r7, #28]
 8002020:	4a90      	ldr	r2, [pc, #576]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002022:	7892      	ldrb	r2, [r2, #2]
 8002024:	4413      	add	r3, r2
 8002026:	4608      	mov	r0, r1
 8002028:	4a8f      	ldr	r2, [pc, #572]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 800202a:	2134      	movs	r1, #52	; 0x34
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3318      	adds	r3, #24
 8002034:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002036:	7fba      	ldrb	r2, [r7, #30]
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	f103 020e 	add.w	r2, r3, #14
 8002044:	7f7b      	ldrb	r3, [r7, #29]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	4a85      	ldr	r2, [pc, #532]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 800204c:	5cd2      	ldrb	r2, [r2, r3]
 800204e:	7f3b      	ldrb	r3, [r7, #28]
 8002050:	4984      	ldr	r1, [pc, #528]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002052:	7889      	ldrb	r1, [r1, #2]
 8002054:	440b      	add	r3, r1
 8002056:	0912      	lsrs	r2, r2, #4
 8002058:	b2d0      	uxtb	r0, r2
 800205a:	4a83      	ldr	r2, [pc, #524]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 800205c:	2134      	movs	r1, #52	; 0x34
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	331c      	adds	r3, #28
 8002066:	4602      	mov	r2, r0
 8002068:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800206a:	7f3b      	ldrb	r3, [r7, #28]
 800206c:	4a7d      	ldr	r2, [pc, #500]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 800206e:	7892      	ldrb	r2, [r2, #2]
 8002070:	4413      	add	r3, r2
 8002072:	4a7d      	ldr	r2, [pc, #500]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 8002074:	2134      	movs	r1, #52	; 0x34
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	331c      	adds	r3, #28
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	051b      	lsls	r3, r3, #20
 8002082:	4618      	mov	r0, r3
 8002084:	7f3b      	ldrb	r3, [r7, #28]
 8002086:	4a77      	ldr	r2, [pc, #476]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002088:	7892      	ldrb	r2, [r2, #2]
 800208a:	4413      	add	r3, r2
 800208c:	4a76      	ldr	r2, [pc, #472]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 800208e:	2134      	movs	r1, #52	; 0x34
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3318      	adds	r3, #24
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	7f3b      	ldrb	r3, [r7, #28]
 800209c:	4971      	ldr	r1, [pc, #452]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 800209e:	7889      	ldrb	r1, [r1, #2]
 80020a0:	440b      	add	r3, r1
 80020a2:	4402      	add	r2, r0
 80020a4:	4970      	ldr	r1, [pc, #448]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 80020a6:	2034      	movs	r0, #52	; 0x34
 80020a8:	fb00 f303 	mul.w	r3, r0, r3
 80020ac:	440b      	add	r3, r1
 80020ae:	3320      	adds	r3, #32
 80020b0:	601a      	str	r2, [r3, #0]
				break;
 80020b2:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 80020b4:	7fba      	ldrb	r2, [r7, #30]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	f103 0214 	add.w	r2, r3, #20
 80020c2:	7f7b      	ldrb	r3, [r7, #29]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	4a65      	ldr	r2, [pc, #404]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d03f      	beq.n	8002150 <Si468x_dab_get_digital_service_list+0x448>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	76fb      	strb	r3, [r7, #27]
 80020d4:	e038      	b.n	8002148 <Si468x_dab_get_digital_service_list+0x440>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020d6:	7efb      	ldrb	r3, [r7, #27]
 80020d8:	f103 0114 	add.w	r1, r3, #20
 80020dc:	7fba      	ldrb	r2, [r7, #30]
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	18ca      	adds	r2, r1, r3
 80020e8:	7f7b      	ldrb	r3, [r7, #29]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	18d1      	adds	r1, r2, r3
 80020ee:	7f3b      	ldrb	r3, [r7, #28]
 80020f0:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 80020f2:	7892      	ldrb	r2, [r2, #2]
 80020f4:	441a      	add	r2, r3
 80020f6:	7efb      	ldrb	r3, [r7, #27]
 80020f8:	4859      	ldr	r0, [pc, #356]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 80020fa:	5c44      	ldrb	r4, [r0, r1]
 80020fc:	495a      	ldr	r1, [pc, #360]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 80020fe:	2034      	movs	r0, #52	; 0x34
 8002100:	fb00 f202 	mul.w	r2, r0, r2
 8002104:	440a      	add	r2, r1
 8002106:	4413      	add	r3, r2
 8002108:	4622      	mov	r2, r4
 800210a:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 800210c:	7f3b      	ldrb	r3, [r7, #28]
 800210e:	4a55      	ldr	r2, [pc, #340]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002110:	7892      	ldrb	r2, [r2, #2]
 8002112:	441a      	add	r2, r3
 8002114:	7efb      	ldrb	r3, [r7, #27]
 8002116:	4954      	ldr	r1, [pc, #336]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 8002118:	2034      	movs	r0, #52	; 0x34
 800211a:	fb00 f202 	mul.w	r2, r0, r2
 800211e:	440a      	add	r2, r1
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b86      	cmp	r3, #134	; 0x86
 8002126:	d10c      	bne.n	8002142 <Si468x_dab_get_digital_service_list+0x43a>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 8002128:	7f3b      	ldrb	r3, [r7, #28]
 800212a:	4a4e      	ldr	r2, [pc, #312]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 800212c:	7892      	ldrb	r2, [r2, #2]
 800212e:	441a      	add	r2, r3
 8002130:	7efb      	ldrb	r3, [r7, #27]
 8002132:	494d      	ldr	r1, [pc, #308]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 8002134:	2034      	movs	r0, #52	; 0x34
 8002136:	fb00 f202 	mul.w	r2, r0, r2
 800213a:	440a      	add	r2, r1
 800213c:	4413      	add	r3, r2
 800213e:	226f      	movs	r2, #111	; 0x6f
 8002140:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002142:	7efb      	ldrb	r3, [r7, #27]
 8002144:	3301      	adds	r3, #1
 8002146:	76fb      	strb	r3, [r7, #27]
 8002148:	7efb      	ldrb	r3, [r7, #27]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	d9c3      	bls.n	80020d6 <Si468x_dab_get_digital_service_list+0x3ce>
 800214e:	e026      	b.n	800219e <Si468x_dab_get_digital_service_list+0x496>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <Si468x_dab_get_digital_service_list+0x564>)
 8002152:	463c      	mov	r4, r7
 8002154:	461d      	mov	r5, r3
 8002156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215a:	682b      	ldr	r3, [r5, #0]
 800215c:	7023      	strb	r3, [r4, #0]
 800215e:	f107 0311 	add.w	r3, r7, #17
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002168:	2300      	movs	r3, #0
 800216a:	76bb      	strb	r3, [r7, #26]
 800216c:	e014      	b.n	8002198 <Si468x_dab_get_digital_service_list+0x490>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 800216e:	7eb9      	ldrb	r1, [r7, #26]
 8002170:	7f3b      	ldrb	r3, [r7, #28]
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002174:	7892      	ldrb	r2, [r2, #2]
 8002176:	441a      	add	r2, r3
 8002178:	7ebb      	ldrb	r3, [r7, #26]
 800217a:	3120      	adds	r1, #32
 800217c:	4439      	add	r1, r7
 800217e:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8002182:	4939      	ldr	r1, [pc, #228]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 8002184:	2034      	movs	r0, #52	; 0x34
 8002186:	fb00 f202 	mul.w	r2, r0, r2
 800218a:	440a      	add	r2, r1
 800218c:	4413      	add	r3, r2
 800218e:	4622      	mov	r2, r4
 8002190:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002192:	7ebb      	ldrb	r3, [r7, #26]
 8002194:	3301      	adds	r3, #1
 8002196:	76bb      	strb	r3, [r7, #26]
 8002198:	7ebb      	ldrb	r3, [r7, #26]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	d9e7      	bls.n	800216e <Si468x_dab_get_digital_service_list+0x466>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 800219e:	2300      	movs	r3, #0
 80021a0:	767b      	strb	r3, [r7, #25]
 80021a2:	e032      	b.n	800220a <Si468x_dab_get_digital_service_list+0x502>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80021a4:	7f3b      	ldrb	r3, [r7, #28]
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 80021a8:	7892      	ldrb	r2, [r2, #2]
 80021aa:	441a      	add	r2, r3
 80021ac:	7e7b      	ldrb	r3, [r7, #25]
 80021ae:	492e      	ldr	r1, [pc, #184]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 80021b0:	201a      	movs	r0, #26
 80021b2:	fb00 f202 	mul.w	r2, r0, r2
 80021b6:	4413      	add	r3, r2
 80021b8:	3314      	adds	r3, #20
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	440b      	add	r3, r1
 80021be:	2200      	movs	r2, #0
 80021c0:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80021c2:	7fba      	ldrb	r2, [r7, #30]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021d0:	7f7b      	ldrb	r3, [r7, #29]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	4a22      	ldr	r2, [pc, #136]	; (8002260 <Si468x_dab_get_digital_service_list+0x558>)
 80021d8:	5cd1      	ldrb	r1, [r2, r3]
 80021da:	7f3b      	ldrb	r3, [r7, #28]
 80021dc:	4a21      	ldr	r2, [pc, #132]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 80021de:	7892      	ldrb	r2, [r2, #2]
 80021e0:	441a      	add	r2, r3
 80021e2:	7e7b      	ldrb	r3, [r7, #25]
 80021e4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021e8:	b2cc      	uxtb	r4, r1
 80021ea:	491f      	ldr	r1, [pc, #124]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 80021ec:	201a      	movs	r0, #26
 80021ee:	fb00 f202 	mul.w	r2, r0, r2
 80021f2:	4413      	add	r3, r2
 80021f4:	3314      	adds	r3, #20
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	4622      	mov	r2, r4
 80021fc:	709a      	strb	r2, [r3, #2]
			components_count++;
 80021fe:	7f7b      	ldrb	r3, [r7, #29]
 8002200:	3301      	adds	r3, #1
 8002202:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 8002204:	7e7b      	ldrb	r3, [r7, #25]
 8002206:	3301      	adds	r3, #1
 8002208:	767b      	strb	r3, [r7, #25]
 800220a:	7f3b      	ldrb	r3, [r7, #28]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 800220e:	7892      	ldrb	r2, [r2, #2]
 8002210:	4413      	add	r3, r2
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <Si468x_dab_get_digital_service_list+0x560>)
 8002214:	2134      	movs	r1, #52	; 0x34
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3329      	adds	r3, #41	; 0x29
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	7e7a      	ldrb	r2, [r7, #25]
 8002222:	429a      	cmp	r2, r3
 8002224:	d3be      	bcc.n	80021a4 <Si468x_dab_get_digital_service_list+0x49c>
		}
		services_count++;
 8002226:	7fbb      	ldrb	r3, [r7, #30]
 8002228:	3301      	adds	r3, #1
 800222a:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 800222c:	7f3b      	ldrb	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	773b      	strb	r3, [r7, #28]
 8002232:	7f3a      	ldrb	r2, [r7, #28]
 8002234:	7ffb      	ldrb	r3, [r7, #31]
 8002236:	429a      	cmp	r2, r3
 8002238:	f4ff adaa 	bcc.w	8001d90 <Si468x_dab_get_digital_service_list+0x88>
	}

	dab_management.total_services += number_of_services;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	7ffb      	ldrb	r3, [r7, #31]
 8002242:	4413      	add	r3, r2
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002248:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 800224c:	789a      	ldrb	r2, [r3, #2]
 800224e:	7ffb      	ldrb	r3, [r7, #31]
 8002250:	4413      	add	r3, r2
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <Si468x_dab_get_digital_service_list+0x55c>)
 8002256:	709a      	strb	r2, [r3, #2]
}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bdb0      	pop	{r4, r5, r7, pc}
 8002260:	200011a8 	.word	0x200011a8
 8002264:	20004bc4 	.word	0x20004bc4
 8002268:	20003774 	.word	0x20003774
 800226c:	0800dbac 	.word	0x0800dbac

08002270 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800227a:	2101      	movs	r1, #1
 800227c:	482d      	ldr	r0, [pc, #180]	; (8002334 <Si468x_dab_start_digital_service+0xc4>)
 800227e:	f001 fbbf 	bl	8003a00 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 8002284:	2281      	movs	r2, #129	; 0x81
 8002286:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 800228a:	2200      	movs	r2, #0
 800228c:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 8002290:	2200      	movs	r2, #0
 8002292:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 8002296:	2200      	movs	r2, #0
 8002298:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022a0:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022aa:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022b4:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0e1b      	lsrs	r3, r3, #24
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022be:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022c6:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022d0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022da:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	0e1b      	lsrs	r3, r3, #24
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022e4:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80022e6:	4914      	ldr	r1, [pc, #80]	; (8002338 <Si468x_dab_start_digital_service+0xc8>)
 80022e8:	200c      	movs	r0, #12
 80022ea:	f7ff f9c1 	bl	8001670 <Si468x_write_command>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <Si468x_dab_start_digital_service+0xcc>)
 80022f4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f005 f892 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80022fc:	4910      	ldr	r1, [pc, #64]	; (8002340 <Si468x_dab_start_digital_service+0xd0>)
 80022fe:	2005      	movs	r0, #5
 8002300:	f7ff f9d8 	bl	80016b4 <Si468x_read_reply>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <Si468x_dab_start_digital_service+0xcc>)
 800230a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <Si468x_dab_start_digital_service+0xd4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800231a:	2101      	movs	r1, #1
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <Si468x_dab_start_digital_service+0xd8>)
 800231e:	f001 fb6f 	bl	8003a00 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8002322:	e003      	b.n	800232c <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002324:	2101      	movs	r1, #1
 8002326:	4809      	ldr	r0, [pc, #36]	; (800234c <Si468x_dab_start_digital_service+0xdc>)
 8002328:	f001 fb6a 	bl	8003a00 <send_debug_msg>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800dbc0 	.word	0x0800dbc0
 8002338:	200001a8 	.word	0x200001a8
 800233c:	20003510 	.word	0x20003510
 8002340:	200011a8 	.word	0x200011a8
 8002344:	200035fc 	.word	0x200035fc
 8002348:	0800d6a4 	.word	0x0800d6a4
 800234c:	0800dbfc 	.word	0x0800dbfc

08002350 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800235a:	2101      	movs	r1, #1
 800235c:	484a      	ldr	r0, [pc, #296]	; (8002488 <Si468x_dab_get_ensemble_info+0x138>)
 800235e:	f001 fb4f 	bl	8003a00 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <Si468x_dab_get_ensemble_info+0x13c>)
 8002364:	22b4      	movs	r2, #180	; 0xb4
 8002366:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <Si468x_dab_get_ensemble_info+0x13c>)
 800236a:	2200      	movs	r2, #0
 800236c:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800236e:	4947      	ldr	r1, [pc, #284]	; (800248c <Si468x_dab_get_ensemble_info+0x13c>)
 8002370:	2002      	movs	r0, #2
 8002372:	f7ff f97d 	bl	8001670 <Si468x_write_command>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4b45      	ldr	r3, [pc, #276]	; (8002490 <Si468x_dab_get_ensemble_info+0x140>)
 800237c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800237e:	2002      	movs	r0, #2
 8002380:	f005 f84e 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002384:	4943      	ldr	r1, [pc, #268]	; (8002494 <Si468x_dab_get_ensemble_info+0x144>)
 8002386:	2015      	movs	r0, #21
 8002388:	f7ff f994 	bl	80016b4 <Si468x_read_reply>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <Si468x_dab_get_ensemble_info+0x140>)
 8002392:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002394:	e012      	b.n	80023bc <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002396:	493d      	ldr	r1, [pc, #244]	; (800248c <Si468x_dab_get_ensemble_info+0x13c>)
 8002398:	2002      	movs	r0, #2
 800239a:	f7ff f969 	bl	8001670 <Si468x_write_command>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <Si468x_dab_get_ensemble_info+0x140>)
 80023a4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f005 f83a 	bl	8007420 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <Si468x_dab_get_ensemble_info+0x144>)
 80023ae:	2015      	movs	r0, #21
 80023b0:	f7ff f980 	bl	80016b4 <Si468x_read_reply>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <Si468x_dab_get_ensemble_info+0x140>)
 80023ba:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <Si468x_dab_get_ensemble_info+0x144>)
 80023be:	799b      	ldrb	r3, [r3, #6]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0e8      	beq.n	8002396 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <Si468x_dab_get_ensemble_info+0x148>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023d2:	2101      	movs	r1, #1
 80023d4:	4831      	ldr	r0, [pc, #196]	; (800249c <Si468x_dab_get_ensemble_info+0x14c>)
 80023d6:	f001 fb13 	bl	8003a00 <send_debug_msg>
		return 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	e050      	b.n	8002480 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <Si468x_dab_get_ensemble_info+0x144>)
 80023e0:	795b      	ldrb	r3, [r3, #5]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <Si468x_dab_get_ensemble_info+0x144>)
 80023e6:	7912      	ldrb	r2, [r2, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d041      	beq.n	8002476 <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80023f2:	2101      	movs	r1, #1
 80023f4:	482a      	ldr	r0, [pc, #168]	; (80024a0 <Si468x_dab_get_ensemble_info+0x150>)
 80023f6:	f001 fb03 	bl	8003a00 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	b291      	uxth	r1, r2
 8002402:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <Si468x_dab_get_ensemble_info+0x158>)
 8002404:	015b      	lsls	r3, r3, #5
 8002406:	4413      	add	r3, r2
 8002408:	460a      	mov	r2, r1
 800240a:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	4618      	mov	r0, r3
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	4924      	ldr	r1, [pc, #144]	; (80024a8 <Si468x_dab_get_ensemble_info+0x158>)
 8002418:	0143      	lsls	r3, r0, #5
 800241a:	440b      	add	r3, r1
 800241c:	3318      	adds	r3, #24
 800241e:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	4618      	mov	r0, r3
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 8002428:	7b19      	ldrb	r1, [r3, #12]
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <Si468x_dab_get_ensemble_info+0x158>)
 800242c:	0143      	lsls	r3, r0, #5
 800242e:	4413      	add	r3, r2
 8002430:	331c      	adds	r3, #28
 8002432:	460a      	mov	r2, r1
 8002434:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	e011      	b.n	8002460 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	1d9a      	adds	r2, r3, #6
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	461c      	mov	r4, r3
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4912      	ldr	r1, [pc, #72]	; (8002494 <Si468x_dab_get_ensemble_info+0x144>)
 800244a:	5c88      	ldrb	r0, [r1, r2]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <Si468x_dab_get_ensemble_info+0x158>)
 800244e:	0162      	lsls	r2, r4, #5
 8002450:	440a      	add	r2, r1
 8002452:	4413      	add	r3, r2
 8002454:	3302      	adds	r3, #2
 8002456:	4602      	mov	r2, r0
 8002458:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	3301      	adds	r3, #1
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	d9ea      	bls.n	800243c <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	3301      	adds	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <Si468x_dab_get_ensemble_info+0x154>)
 8002470:	705a      	strb	r2, [r3, #1]
			return 1;
 8002472:	2301      	movs	r3, #1
 8002474:	e004      	b.n	8002480 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002476:	2101      	movs	r1, #1
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <Si468x_dab_get_ensemble_info+0x15c>)
 800247a:	f001 fac1 	bl	8003a00 <send_debug_msg>
			return 0;
 800247e:	2300      	movs	r3, #0
		}
	}
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	0800dc1c 	.word	0x0800dc1c
 800248c:	200001a8 	.word	0x200001a8
 8002490:	20003510 	.word	0x20003510
 8002494:	200011a8 	.word	0x200011a8
 8002498:	200035fc 	.word	0x200035fc
 800249c:	0800d6a4 	.word	0x0800d6a4
 80024a0:	0800dc58 	.word	0x0800dc58
 80024a4:	20004bc4 	.word	0x20004bc4
 80024a8:	20003634 	.word	0x20003634
 80024ac:	0800dc68 	.word	0x0800dc68

080024b0 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b099      	sub	sp, #100	; 0x64
 80024b4:	af0a      	add	r7, sp, #40	; 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 80024b6:	2101      	movs	r1, #1
 80024b8:	4887      	ldr	r0, [pc, #540]	; (80026d8 <Si468x_dab_full_scan+0x228>)
 80024ba:	f001 faa1 	bl	8003a00 <send_debug_msg>
	dab_management.total_services = 0;
 80024be:	4b87      	ldr	r3, [pc, #540]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 80024c4:	4b85      	ldr	r3, [pc, #532]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 80024ca:	4b84      	ldr	r3, [pc, #528]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t fic_q_timeout = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t _scan_cancel_flag = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024e8:	e09e      	b.n	8002628 <Si468x_dab_full_scan+0x178>
	{
		_touch_coordinates = Touch_read();
 80024ea:	f004 fbf5 	bl	8006cd8 <Touch_read>
 80024ee:	4603      	mov	r3, r0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80024f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d90c      	bls.n	8002512 <Si468x_dab_full_scan+0x62>
 80024f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024fa:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80024fe:	d808      	bhi.n	8002512 <Si468x_dab_full_scan+0x62>
 8002500:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002502:	2bc3      	cmp	r3, #195	; 0xc3
 8002504:	d905      	bls.n	8002512 <Si468x_dab_full_scan+0x62>
 8002506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002508:	2bea      	cmp	r3, #234	; 0xea
 800250a:	d802      	bhi.n	8002512 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		if(_scan_cancel_flag)
 8002512:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 808e 	bne.w	8002638 <Si468x_dab_full_scan+0x188>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 800251c:	2306      	movs	r3, #6
 800251e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002522:	2396      	movs	r3, #150	; 0x96
 8002524:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		Si468x_dab_tune_freq(freq_index, USE_ANT_CAP);
 8002528:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff faba 	bl	8001aa8 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002534:	463b      	mov	r3, r7
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fb8e 	bl	8001c58 <Si468x_dab_digrad_status>
			valid_timeout--;
 800253c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002540:	3b01      	subs	r3, #1
 8002542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(!valid_timeout)
 8002546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 800254e:	2101      	movs	r1, #1
 8002550:	4863      	ldr	r0, [pc, #396]	; (80026e0 <Si468x_dab_full_scan+0x230>)
 8002552:	f001 fa55 	bl	8003a00 <send_debug_msg>
				break;
 8002556:	e010      	b.n	800257a <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002558:	2032      	movs	r0, #50	; 0x32
 800255a:	f004 ff61 	bl	8007420 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 800255e:	4b61      	ldr	r3, [pc, #388]	; (80026e4 <Si468x_dab_full_scan+0x234>)
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0e3      	beq.n	8002534 <Si468x_dab_full_scan+0x84>
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <Si468x_dab_full_scan+0x234>)
 800256e:	785b      	ldrb	r3, [r3, #1]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0dc      	beq.n	8002534 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800257a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800257e:	2b00      	cmp	r3, #0
 8002580:	d018      	beq.n	80025b4 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002582:	463b      	mov	r3, r7
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb67 	bl	8001c58 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800258a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800258e:	3b01      	subs	r3, #1
 8002590:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(!fic_q_timeout)
 8002594:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 800259c:	2101      	movs	r1, #1
 800259e:	4850      	ldr	r0, [pc, #320]	; (80026e0 <Si468x_dab_full_scan+0x230>)
 80025a0:	f001 fa2e 	bl	8003a00 <send_debug_msg>
					break;
 80025a4:	e006      	b.n	80025b4 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80025a6:	2032      	movs	r0, #50	; 0x32
 80025a8:	f004 ff3a 	bl	8007420 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 80025ac:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <Si468x_dab_full_scan+0x234>)
 80025ae:	791b      	ldrb	r3, [r3, #4]
 80025b0:	2b31      	cmp	r3, #49	; 0x31
 80025b2:	d9e6      	bls.n	8002582 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 80025b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01d      	beq.n	80025f8 <Si468x_dab_full_scan+0x148>
 80025bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d019      	beq.n	80025f8 <Si468x_dab_full_scan+0x148>
		{
			do
			{
				Si468x_dab_get_event_status();
 80025c4:	f000 fb12 	bl	8002bec <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80025c8:	200a      	movs	r0, #10
 80025ca:	f004 ff29 	bl	8007420 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <Si468x_dab_full_scan+0x238>)
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f3      	beq.n	80025c4 <Si468x_dab_full_scan+0x114>
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <Si468x_dab_full_scan+0x238>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ec      	bne.n	80025c4 <Si468x_dab_full_scan+0x114>

			if(Si468x_dab_get_ensemble_info())
 80025ea:	f7ff feb1 	bl	8002350 <Si468x_dab_get_ensemble_info>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <Si468x_dab_full_scan+0x148>
			{
				Si468x_dab_get_digital_service_list();
 80025f4:	f7ff fb88 	bl	8001d08 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80025f8:	4e3a      	ldr	r6, [pc, #232]	; (80026e4 <Si468x_dab_full_scan+0x234>)
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 80025fc:	ac06      	add	r4, sp, #24
 80025fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002604:	466d      	mov	r5, sp
 8002606:	f106 0410 	add.w	r4, r6, #16
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002612:	e885 0003 	stmia.w	r5, {r0, r1}
 8002616:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800261a:	f002 f849 	bl	80046b0 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 800261e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002622:	3301      	adds	r3, #1
 8002624:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 800262a:	7b5b      	ldrb	r3, [r3, #13]
 800262c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002630:	429a      	cmp	r2, r3
 8002632:	f4ff af5a 	bcc.w	80024ea <Si468x_dab_full_scan+0x3a>
 8002636:	e000      	b.n	800263a <Si468x_dab_full_scan+0x18a>
			break;
 8002638:	bf00      	nop
	}

	if(_scan_cancel_flag)
 800263a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <Si468x_dab_full_scan+0x1a2>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 8002642:	2101      	movs	r1, #1
 8002644:	4829      	ldr	r0, [pc, #164]	; (80026ec <Si468x_dab_full_scan+0x23c>)
 8002646:	f001 f9db 	bl	8003a00 <send_debug_msg>
		restore_from_eeprom();
 800264a:	f000 fe37 	bl	80032bc <restore_from_eeprom>
		return 0;
 800264e:	2300      	movs	r3, #0
 8002650:	e1e9      	b.n	8002a26 <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 8002652:	f003 f889 	bl	8005768 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d013      	beq.n	8002686 <Si468x_dab_full_scan+0x1d6>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 8002660:	7819      	ldrb	r1, [r3, #0]
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <Si468x_dab_full_scan+0x240>)
 8002668:	4822      	ldr	r0, [pc, #136]	; (80026f4 <Si468x_dab_full_scan+0x244>)
 800266a:	f003 f8e1 	bl	8005830 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 8002670:	2200      	movs	r2, #0
 8002672:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 8002676:	2200      	movs	r2, #0
 8002678:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 800267a:	2201      	movs	r2, #1
 800267c:	491e      	ldr	r1, [pc, #120]	; (80026f8 <Si468x_dab_full_scan+0x248>)
 800267e:	f240 1007 	movw	r0, #263	; 0x107
 8002682:	f003 f849 	bl	8005718 <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002686:	2100      	movs	r1, #0
 8002688:	481c      	ldr	r0, [pc, #112]	; (80026fc <Si468x_dab_full_scan+0x24c>)
 800268a:	f001 f9b9 	bl	8003a00 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <Si468x_dab_full_scan+0x22c>)
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	220a      	movs	r2, #10
 8002694:	491a      	ldr	r1, [pc, #104]	; (8002700 <Si468x_dab_full_scan+0x250>)
 8002696:	4618      	mov	r0, r3
 8002698:	f00a fe60 	bl	800d35c <itoa>
 800269c:	4603      	mov	r3, r0
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 f9ad 	bl	8003a00 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80026a6:	2101      	movs	r1, #1
 80026a8:	4816      	ldr	r0, [pc, #88]	; (8002704 <Si468x_dab_full_scan+0x254>)
 80026aa:	f001 f9a9 	bl	8003a00 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80026ae:	2100      	movs	r1, #0
 80026b0:	4815      	ldr	r0, [pc, #84]	; (8002708 <Si468x_dab_full_scan+0x258>)
 80026b2:	f001 f9a5 	bl	8003a00 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80026b6:	2100      	movs	r1, #0
 80026b8:	4814      	ldr	r0, [pc, #80]	; (800270c <Si468x_dab_full_scan+0x25c>)
 80026ba:	f001 f9a1 	bl	8003a00 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80026be:	2100      	movs	r1, #0
 80026c0:	4813      	ldr	r0, [pc, #76]	; (8002710 <Si468x_dab_full_scan+0x260>)
 80026c2:	f001 f99d 	bl	8003a00 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80026c6:	2101      	movs	r1, #1
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <Si468x_dab_full_scan+0x264>)
 80026ca:	f001 f999 	bl	8003a00 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80026d4:	e07d      	b.n	80027d2 <Si468x_dab_full_scan+0x322>
 80026d6:	bf00      	nop
 80026d8:	0800dc7c 	.word	0x0800dc7c
 80026dc:	20004bc4 	.word	0x20004bc4
 80026e0:	0800dc68 	.word	0x0800dc68
 80026e4:	200035d4 	.word	0x200035d4
 80026e8:	20003600 	.word	0x20003600
 80026ec:	0800dcb8 	.word	0x0800dcb8
 80026f0:	20003634 	.word	0x20003634
 80026f4:	20003774 	.word	0x20003774
 80026f8:	20004bc8 	.word	0x20004bc8
 80026fc:	0800dccc 	.word	0x0800dccc
 8002700:	200034d0 	.word	0x200034d0
 8002704:	0800dce0 	.word	0x0800dce0
 8002708:	0800dd14 	.word	0x0800dd14
 800270c:	0800dd20 	.word	0x0800dd20
 8002710:	0800dd34 	.word	0x0800dd34
 8002714:	0800dd44 	.word	0x0800dd44
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8002718:	2100      	movs	r1, #0
 800271a:	48c5      	ldr	r0, [pc, #788]	; (8002a30 <Si468x_dab_full_scan+0x580>)
 800271c:	f001 f970 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002724:	3301      	adds	r3, #1
 8002726:	220a      	movs	r2, #10
 8002728:	49c2      	ldr	r1, [pc, #776]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 800272a:	4618      	mov	r0, r3
 800272c:	f00a fe16 	bl	800d35c <itoa>
 8002730:	4603      	mov	r3, r0
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f001 f963 	bl	8003a00 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 800273a:	2100      	movs	r1, #0
 800273c:	48be      	ldr	r0, [pc, #760]	; (8002a38 <Si468x_dab_full_scan+0x588>)
 800273e:	f001 f95f 	bl	8003a00 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8002742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	4abc      	ldr	r2, [pc, #752]	; (8002a3c <Si468x_dab_full_scan+0x58c>)
 800274a:	4413      	add	r3, r2
 800274c:	3302      	adds	r3, #2
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f001 f955 	bl	8003a00 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8002756:	2100      	movs	r1, #0
 8002758:	48b5      	ldr	r0, [pc, #724]	; (8002a30 <Si468x_dab_full_scan+0x580>)
 800275a:	f001 f951 	bl	8003a00 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800275e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002762:	4ab6      	ldr	r2, [pc, #728]	; (8002a3c <Si468x_dab_full_scan+0x58c>)
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	4413      	add	r3, r2
 8002768:	3318      	adds	r3, #24
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	220a      	movs	r2, #10
 800276e:	49b1      	ldr	r1, [pc, #708]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 8002770:	4618      	mov	r0, r3
 8002772:	f00a fdf3 	bl	800d35c <itoa>
 8002776:	4603      	mov	r3, r0
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f001 f940 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002780:	2100      	movs	r1, #0
 8002782:	48af      	ldr	r0, [pc, #700]	; (8002a40 <Si468x_dab_full_scan+0x590>)
 8002784:	f001 f93c 	bl	8003a00 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800278c:	4aab      	ldr	r2, [pc, #684]	; (8002a3c <Si468x_dab_full_scan+0x58c>)
 800278e:	015b      	lsls	r3, r3, #5
 8002790:	4413      	add	r3, r2
 8002792:	331c      	adds	r3, #28
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	4baa      	ldr	r3, [pc, #680]	; (8002a44 <Si468x_dab_full_scan+0x594>)
 800279a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f92d 	bl	8003a00 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80027a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027aa:	4aa4      	ldr	r2, [pc, #656]	; (8002a3c <Si468x_dab_full_scan+0x58c>)
 80027ac:	015b      	lsls	r3, r3, #5
 80027ae:	4413      	add	r3, r2
 80027b0:	331c      	adds	r3, #28
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b13      	cmp	r3, #19
 80027b6:	d803      	bhi.n	80027c0 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80027b8:	2100      	movs	r1, #0
 80027ba:	48a3      	ldr	r0, [pc, #652]	; (8002a48 <Si468x_dab_full_scan+0x598>)
 80027bc:	f001 f920 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80027c0:	2101      	movs	r1, #1
 80027c2:	48a2      	ldr	r0, [pc, #648]	; (8002a4c <Si468x_dab_full_scan+0x59c>)
 80027c4:	f001 f91c 	bl	8003a00 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80027c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027cc:	3301      	adds	r3, #1
 80027ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80027d2:	4b9f      	ldr	r3, [pc, #636]	; (8002a50 <Si468x_dab_full_scan+0x5a0>)
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80027da:	429a      	cmp	r2, r3
 80027dc:	d39c      	bcc.n	8002718 <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027de:	2101      	movs	r1, #1
 80027e0:	489c      	ldr	r0, [pc, #624]	; (8002a54 <Si468x_dab_full_scan+0x5a4>)
 80027e2:	f001 f90d 	bl	8003a00 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80027e6:	2100      	movs	r1, #0
 80027e8:	489b      	ldr	r0, [pc, #620]	; (8002a58 <Si468x_dab_full_scan+0x5a8>)
 80027ea:	f001 f909 	bl	8003a00 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80027ee:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <Si468x_dab_full_scan+0x5a0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	220a      	movs	r2, #10
 80027f4:	498f      	ldr	r1, [pc, #572]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00a fdb0 	bl	800d35c <itoa>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f001 f8fd 	bl	8003a00 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002806:	2101      	movs	r1, #1
 8002808:	4894      	ldr	r0, [pc, #592]	; (8002a5c <Si468x_dab_full_scan+0x5ac>)
 800280a:	f001 f8f9 	bl	8003a00 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 800280e:	2101      	movs	r1, #1
 8002810:	4893      	ldr	r0, [pc, #588]	; (8002a60 <Si468x_dab_full_scan+0x5b0>)
 8002812:	f001 f8f5 	bl	8003a00 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800281c:	e0f7      	b.n	8002a0e <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 800281e:	2100      	movs	r1, #0
 8002820:	4883      	ldr	r0, [pc, #524]	; (8002a30 <Si468x_dab_full_scan+0x580>)
 8002822:	f001 f8ed 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800282a:	3301      	adds	r3, #1
 800282c:	220a      	movs	r2, #10
 800282e:	4981      	ldr	r1, [pc, #516]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 8002830:	4618      	mov	r0, r3
 8002832:	f00a fd93 	bl	800d35c <itoa>
 8002836:	4603      	mov	r3, r0
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f001 f8e0 	bl	8003a00 <send_debug_msg>
			if((services_index + 1) < 10)
 8002840:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002844:	2b08      	cmp	r3, #8
 8002846:	d803      	bhi.n	8002850 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002848:	2100      	movs	r1, #0
 800284a:	487f      	ldr	r0, [pc, #508]	; (8002a48 <Si468x_dab_full_scan+0x598>)
 800284c:	f001 f8d8 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002850:	2100      	movs	r1, #0
 8002852:	4884      	ldr	r0, [pc, #528]	; (8002a64 <Si468x_dab_full_scan+0x5b4>)
 8002854:	f001 f8d4 	bl	8003a00 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002858:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800285c:	2234      	movs	r2, #52	; 0x34
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	4a81      	ldr	r2, [pc, #516]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 8002864:	4413      	add	r3, r2
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f8c9 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800286e:	2100      	movs	r1, #0
 8002870:	487e      	ldr	r0, [pc, #504]	; (8002a6c <Si468x_dab_full_scan+0x5bc>)
 8002872:	f001 f8c5 	bl	8003a00 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800287c:	e021      	b.n	80028c2 <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800287e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002882:	4a6e      	ldr	r2, [pc, #440]	; (8002a3c <Si468x_dab_full_scan+0x58c>)
 8002884:	015b      	lsls	r3, r3, #5
 8002886:	4413      	add	r3, r2
 8002888:	331c      	adds	r3, #28
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002890:	4975      	ldr	r1, [pc, #468]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 8002892:	2034      	movs	r0, #52	; 0x34
 8002894:	fb00 f303 	mul.w	r3, r0, r3
 8002898:	440b      	add	r3, r1
 800289a:	3328      	adds	r3, #40	; 0x28
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10a      	bne.n	80028b8 <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80028a2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80028a6:	015b      	lsls	r3, r3, #5
 80028a8:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <Si468x_dab_full_scan+0x58c>)
 80028aa:	4413      	add	r3, r2
 80028ac:	3302      	adds	r3, #2
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 f8a5 	bl	8003a00 <send_debug_msg>
					break;
 80028b6:	e00a      	b.n	80028ce <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80028b8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80028bc:	3301      	adds	r3, #1
 80028be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <Si468x_dab_full_scan+0x5a0>)
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3d7      	bcc.n	800287e <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80028ce:	2100      	movs	r1, #0
 80028d0:	4866      	ldr	r0, [pc, #408]	; (8002a6c <Si468x_dab_full_scan+0x5bc>)
 80028d2:	f001 f895 	bl	8003a00 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80028d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028da:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 80028dc:	2134      	movs	r1, #52	; 0x34
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3324      	adds	r3, #36	; 0x24
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	220a      	movs	r2, #10
 80028ea:	4952      	ldr	r1, [pc, #328]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f00a fd35 	bl	800d35c <itoa>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f882 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80028fc:	2100      	movs	r1, #0
 80028fe:	4850      	ldr	r0, [pc, #320]	; (8002a40 <Si468x_dab_full_scan+0x590>)
 8002900:	f001 f87e 	bl	8003a00 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8002904:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 800290a:	2134      	movs	r1, #52	; 0x34
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	3328      	adds	r3, #40	; 0x28
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <Si468x_dab_full_scan+0x594>)
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f001 f86d 	bl	8003a00 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8002926:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800292a:	4a4f      	ldr	r2, [pc, #316]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 800292c:	2134      	movs	r1, #52	; 0x34
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3328      	adds	r3, #40	; 0x28
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b13      	cmp	r3, #19
 800293a:	d803      	bhi.n	8002944 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800293c:	2100      	movs	r1, #0
 800293e:	4842      	ldr	r0, [pc, #264]	; (8002a48 <Si468x_dab_full_scan+0x598>)
 8002940:	f001 f85e 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002944:	2100      	movs	r1, #0
 8002946:	4847      	ldr	r0, [pc, #284]	; (8002a64 <Si468x_dab_full_scan+0x5b4>)
 8002948:	f001 f85a 	bl	8003a00 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 800294c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002950:	4a45      	ldr	r2, [pc, #276]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 8002952:	2134      	movs	r1, #52	; 0x34
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3315      	adds	r3, #21
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	220a      	movs	r2, #10
 8002960:	4934      	ldr	r1, [pc, #208]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 8002962:	4618      	mov	r0, r3
 8002964:	f00a fcfa 	bl	800d35c <itoa>
 8002968:	4603      	mov	r3, r0
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f001 f847 	bl	8003a00 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002972:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002976:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 8002978:	2134      	movs	r1, #52	; 0x34
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3315      	adds	r3, #21
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b09      	cmp	r3, #9
 8002986:	d803      	bhi.n	8002990 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002988:	2100      	movs	r1, #0
 800298a:	482f      	ldr	r0, [pc, #188]	; (8002a48 <Si468x_dab_full_scan+0x598>)
 800298c:	f001 f838 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002990:	2100      	movs	r1, #0
 8002992:	4837      	ldr	r0, [pc, #220]	; (8002a70 <Si468x_dab_full_scan+0x5c0>)
 8002994:	f001 f834 	bl	8003a00 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002998:	2100      	movs	r1, #0
 800299a:	4836      	ldr	r0, [pc, #216]	; (8002a74 <Si468x_dab_full_scan+0x5c4>)
 800299c:	f001 f830 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029a4:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 80029a6:	2134      	movs	r1, #52	; 0x34
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3320      	adds	r3, #32
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	491f      	ldr	r1, [pc, #124]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f00a fcd0 	bl	800d35c <itoa>
 80029bc:	4603      	mov	r3, r0
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 f81d 	bl	8003a00 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029c6:	2100      	movs	r1, #0
 80029c8:	4826      	ldr	r0, [pc, #152]	; (8002a64 <Si468x_dab_full_scan+0x5b4>)
 80029ca:	f001 f819 	bl	8003a00 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029ce:	2100      	movs	r1, #0
 80029d0:	4828      	ldr	r0, [pc, #160]	; (8002a74 <Si468x_dab_full_scan+0x5c4>)
 80029d2:	f001 f815 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029da:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <Si468x_dab_full_scan+0x5b8>)
 80029dc:	2134      	movs	r1, #52	; 0x34
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	332a      	adds	r3, #42	; 0x2a
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	4912      	ldr	r1, [pc, #72]	; (8002a34 <Si468x_dab_full_scan+0x584>)
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00a fcb5 	bl	800d35c <itoa>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f802 	bl	8003a00 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80029fc:	2101      	movs	r1, #1
 80029fe:	481e      	ldr	r0, [pc, #120]	; (8002a78 <Si468x_dab_full_scan+0x5c8>)
 8002a00:	f000 fffe 	bl	8003a00 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002a04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <Si468x_dab_full_scan+0x5a0>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002a16:	429a      	cmp	r2, r3
 8002a18:	f4ff af01 	bcc.w	800281e <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	480f      	ldr	r0, [pc, #60]	; (8002a5c <Si468x_dab_full_scan+0x5ac>)
 8002a20:	f000 ffee 	bl	8003a00 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002a24:	2301      	movs	r3, #1
	}
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	373c      	adds	r7, #60	; 0x3c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0800dd54 	.word	0x0800dd54
 8002a34:	200034d0 	.word	0x200034d0
 8002a38:	0800dd58 	.word	0x0800dd58
 8002a3c:	20003634 	.word	0x20003634
 8002a40:	0800dd64 	.word	0x0800dd64
 8002a44:	20000008 	.word	0x20000008
 8002a48:	0800dd6c 	.word	0x0800dd6c
 8002a4c:	0800dd70 	.word	0x0800dd70
 8002a50:	20004bc4 	.word	0x20004bc4
 8002a54:	0800dce0 	.word	0x0800dce0
 8002a58:	0800dd78 	.word	0x0800dd78
 8002a5c:	0800dd8c 	.word	0x0800dd8c
 8002a60:	0800ddf8 	.word	0x0800ddf8
 8002a64:	0800de64 	.word	0x0800de64
 8002a68:	20003774 	.word	0x20003774
 8002a6c:	0800de6c 	.word	0x0800de6c
 8002a70:	0800de70 	.word	0x0800de70
 8002a74:	0800de78 	.word	0x0800de78
 8002a78:	0800de7c 	.word	0x0800de7c

08002a7c <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002a84:	2101      	movs	r1, #1
 8002a86:	484d      	ldr	r0, [pc, #308]	; (8002bbc <Si468x_dab_get_audio_info+0x140>)
 8002a88:	f000 ffba 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <Si468x_dab_get_audio_info+0x144>)
 8002a8e:	22bd      	movs	r2, #189	; 0xbd
 8002a90:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002a92:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <Si468x_dab_get_audio_info+0x144>)
 8002a94:	2203      	movs	r2, #3
 8002a96:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002a98:	4949      	ldr	r1, [pc, #292]	; (8002bc0 <Si468x_dab_get_audio_info+0x144>)
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f7fe fde8 	bl	8001670 <Si468x_write_command>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <Si468x_dab_get_audio_info+0x148>)
 8002aa6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f004 fcb9 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002aae:	4946      	ldr	r1, [pc, #280]	; (8002bc8 <Si468x_dab_get_audio_info+0x14c>)
 8002ab0:	2014      	movs	r0, #20
 8002ab2:	f7fe fdff 	bl	80016b4 <Si468x_read_reply>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <Si468x_dab_get_audio_info+0x148>)
 8002abc:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <Si468x_dab_get_audio_info+0x14c>)
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002acc:	2100      	movs	r1, #0
 8002ace:	4840      	ldr	r0, [pc, #256]	; (8002bd0 <Si468x_dab_get_audio_info+0x154>)
 8002ad0:	f000 ff96 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002ad4:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	220a      	movs	r2, #10
 8002ada:	493e      	ldr	r1, [pc, #248]	; (8002bd4 <Si468x_dab_get_audio_info+0x158>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00a fc3d 	bl	800d35c <itoa>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ff8a 	bl	8003a00 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002aec:	2100      	movs	r1, #0
 8002aee:	483a      	ldr	r0, [pc, #232]	; (8002bd8 <Si468x_dab_get_audio_info+0x15c>)
 8002af0:	f000 ff86 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002af6:	885b      	ldrh	r3, [r3, #2]
 8002af8:	220a      	movs	r2, #10
 8002afa:	4936      	ldr	r1, [pc, #216]	; (8002bd4 <Si468x_dab_get_audio_info+0x158>)
 8002afc:	4618      	mov	r0, r3
 8002afe:	f00a fc2d 	bl	800d35c <itoa>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 ff7a 	bl	8003a00 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4833      	ldr	r0, [pc, #204]	; (8002bdc <Si468x_dab_get_audio_info+0x160>)
 8002b10:	f000 ff76 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002b16:	791b      	ldrb	r3, [r3, #4]
 8002b18:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	220a      	movs	r2, #10
 8002b20:	492c      	ldr	r1, [pc, #176]	; (8002bd4 <Si468x_dab_get_audio_info+0x158>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00a fc1a 	bl	800d35c <itoa>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 ff67 	bl	8003a00 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002b32:	2100      	movs	r1, #0
 8002b34:	482a      	ldr	r0, [pc, #168]	; (8002be0 <Si468x_dab_get_audio_info+0x164>)
 8002b36:	f000 ff63 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	220a      	movs	r2, #10
 8002b46:	4923      	ldr	r1, [pc, #140]	; (8002bd4 <Si468x_dab_get_audio_info+0x158>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00a fc07 	bl	800d35c <itoa>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 ff54 	bl	8003a00 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4822      	ldr	r0, [pc, #136]	; (8002be4 <Si468x_dab_get_audio_info+0x168>)
 8002b5c:	f000 ff50 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002b62:	791b      	ldrb	r3, [r3, #4]
 8002b64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	220a      	movs	r2, #10
 8002b6c:	4919      	ldr	r1, [pc, #100]	; (8002bd4 <Si468x_dab_get_audio_info+0x158>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00a fbf4 	bl	800d35c <itoa>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 ff41 	bl	8003a00 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4819      	ldr	r0, [pc, #100]	; (8002be8 <Si468x_dab_get_audio_info+0x16c>)
 8002b82:	f000 ff3d 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002b88:	791b      	ldrb	r3, [r3, #4]
 8002b8a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	220a      	movs	r2, #10
 8002b92:	4910      	ldr	r1, [pc, #64]	; (8002bd4 <Si468x_dab_get_audio_info+0x158>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f00a fbe1 	bl	800d35c <itoa>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff2e 	bl	8003a00 <send_debug_msg>

	return dab_audio_info;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <Si468x_dab_get_audio_info+0x150>)
 8002ba8:	461c      	mov	r4, r3
 8002baa:	4613      	mov	r3, r2
 8002bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	0800de88 	.word	0x0800de88
 8002bc0:	200001a8 	.word	0x200001a8
 8002bc4:	20003510 	.word	0x20003510
 8002bc8:	200011a8 	.word	0x200011a8
 8002bcc:	20003610 	.word	0x20003610
 8002bd0:	0800dec4 	.word	0x0800dec4
 8002bd4:	200034d0 	.word	0x200034d0
 8002bd8:	0800ded0 	.word	0x0800ded0
 8002bdc:	0800dee0 	.word	0x0800dee0
 8002be0:	0800def4 	.word	0x0800def4
 8002be4:	0800df00 	.word	0x0800df00
 8002be8:	0800df0c 	.word	0x0800df0c

08002bec <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4811      	ldr	r0, [pc, #68]	; (8002c38 <Si468x_dab_get_event_status+0x4c>)
 8002bf4:	f000 ff04 	bl	8003a00 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <Si468x_dab_get_event_status+0x50>)
 8002bfa:	22b3      	movs	r2, #179	; 0xb3
 8002bfc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <Si468x_dab_get_event_status+0x50>)
 8002c00:	2203      	movs	r2, #3
 8002c02:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002c04:	490d      	ldr	r1, [pc, #52]	; (8002c3c <Si468x_dab_get_event_status+0x50>)
 8002c06:	2002      	movs	r0, #2
 8002c08:	f7fe fd32 	bl	8001670 <Si468x_write_command>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <Si468x_dab_get_event_status+0x54>)
 8002c12:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f004 fc03 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002c1a:	490a      	ldr	r1, [pc, #40]	; (8002c44 <Si468x_dab_get_event_status+0x58>)
 8002c1c:	2009      	movs	r0, #9
 8002c1e:	f7fe fd49 	bl	80016b4 <Si468x_read_reply>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <Si468x_dab_get_event_status+0x54>)
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <Si468x_dab_get_event_status+0x58>)
 8002c2c:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <Si468x_dab_get_event_status+0x5c>)
 8002c30:	6013      	str	r3, [r2, #0]
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0800df1c 	.word	0x0800df1c
 8002c3c:	200001a8 	.word	0x200001a8
 8002c40:	20003510 	.word	0x20003510
 8002c44:	200011a8 	.word	0x200011a8
 8002c48:	20003600 	.word	0x20003600

08002c4c <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c58:	2101      	movs	r1, #1
 8002c5a:	484a      	ldr	r0, [pc, #296]	; (8002d84 <Si468x_dab_get_component_info+0x138>)
 8002c5c:	f000 fed0 	bl	8003a00 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c62:	22bb      	movs	r2, #187	; 0xbb
 8002c64:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c6c:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c72:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c7e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c88:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c92:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0e1b      	lsrs	r3, r3, #24
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002c9c:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	121b      	asrs	r3, r3, #8
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002cac:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	141b      	asrs	r3, r3, #16
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002cb6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	161b      	asrs	r3, r3, #24
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002cc0:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002cc2:	4931      	ldr	r1, [pc, #196]	; (8002d88 <Si468x_dab_get_component_info+0x13c>)
 8002cc4:	200c      	movs	r0, #12
 8002cc6:	f7fe fcd3 	bl	8001670 <Si468x_write_command>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <Si468x_dab_get_component_info+0x140>)
 8002cd0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002cd2:	2005      	movs	r0, #5
 8002cd4:	f004 fba4 	bl	8007420 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002cd8:	492d      	ldr	r1, [pc, #180]	; (8002d90 <Si468x_dab_get_component_info+0x144>)
 8002cda:	201a      	movs	r0, #26
 8002cdc:	f7fe fcea 	bl	80016b4 <Si468x_read_reply>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <Si468x_dab_get_component_info+0x140>)
 8002ce6:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <Si468x_dab_get_component_info+0x144>)
 8002cea:	799b      	ldrb	r3, [r3, #6]
 8002cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf0:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e00c      	b.n	8002d12 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	f103 0208 	add.w	r2, r3, #8
 8002cfe:	7ffb      	ldrb	r3, [r7, #31]
 8002d00:	4923      	ldr	r1, [pc, #140]	; (8002d90 <Si468x_dab_get_component_info+0x144>)
 8002d02:	5c8a      	ldrb	r2, [r1, r2]
 8002d04:	3320      	adds	r3, #32
 8002d06:	443b      	add	r3, r7
 8002d08:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d9ef      	bls.n	8002cf8 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <Si468x_dab_get_component_info+0x144>)
 8002d1a:	7e1b      	ldrb	r3, [r3, #24]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <Si468x_dab_get_component_info+0x144>)
 8002d20:	7e5b      	ldrb	r3, [r3, #25]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4819      	ldr	r0, [pc, #100]	; (8002d94 <Si468x_dab_get_component_info+0x148>)
 8002d30:	f000 fe66 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d34:	7fbb      	ldrb	r3, [r7, #30]
 8002d36:	220a      	movs	r2, #10
 8002d38:	4917      	ldr	r1, [pc, #92]	; (8002d98 <Si468x_dab_get_component_info+0x14c>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f00a fb0e 	bl	800d35c <itoa>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fe5b 	bl	8003a00 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4813      	ldr	r0, [pc, #76]	; (8002d9c <Si468x_dab_get_component_info+0x150>)
 8002d4e:	f000 fe57 	bl	8003a00 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe51 	bl	8003a00 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d5e:	2100      	movs	r1, #0
 8002d60:	480f      	ldr	r0, [pc, #60]	; (8002da0 <Si468x_dab_get_component_info+0x154>)
 8002d62:	f000 fe4d 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d66:	8bbb      	ldrh	r3, [r7, #28]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	490b      	ldr	r1, [pc, #44]	; (8002d98 <Si468x_dab_get_component_info+0x14c>)
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f00a faf5 	bl	800d35c <itoa>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fe42 	bl	8003a00 <send_debug_msg>

}
 8002d7c:	bf00      	nop
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0800df5c 	.word	0x0800df5c
 8002d88:	200001a8 	.word	0x200001a8
 8002d8c:	20003510 	.word	0x20003510
 8002d90:	200011a8 	.word	0x200011a8
 8002d94:	0800df90 	.word	0x0800df90
 8002d98:	200034d0 	.word	0x200034d0
 8002d9c:	0800df9c 	.word	0x0800df9c
 8002da0:	0800dfb0 	.word	0x0800dfb0

08002da4 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002da4:	b5b0      	push	{r4, r5, r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002daa:	49ab      	ldr	r1, [pc, #684]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002dac:	2005      	movs	r0, #5
 8002dae:	f7fe fc81 	bl	80016b4 <Si468x_read_reply>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	4ba9      	ldr	r3, [pc, #676]	; (800305c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002db8:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002dba:	4ba9      	ldr	r3, [pc, #676]	; (8003060 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8142 	beq.w	800304e <Si468x_dab_get_digital_service_data+0x2aa>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002dca:	4ba6      	ldr	r3, [pc, #664]	; (8003064 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dcc:	2284      	movs	r2, #132	; 0x84
 8002dce:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002dd0:	4ba4      	ldr	r3, [pc, #656]	; (8003064 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002dd6:	49a3      	ldr	r1, [pc, #652]	; (8003064 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f7fe fc49 	bl	8001670 <Si468x_write_command>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b9e      	ldr	r3, [pc, #632]	; (800305c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002de4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002de6:	2005      	movs	r0, #5
 8002de8:	f004 fb1a 	bl	8007420 <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002dec:	499a      	ldr	r1, [pc, #616]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002dee:	201e      	movs	r0, #30
 8002df0:	f7fe fc60 	bl	80016b4 <Si468x_read_reply>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b98      	ldr	r3, [pc, #608]	; (800305c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dfa:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002dfc:	4a9a      	ldr	r2, [pc, #616]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002dfe:	4b96      	ldr	r3, [pc, #600]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e00:	4615      	mov	r5, r2
 8002e02:	1d1c      	adds	r4, r3, #4
 8002e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4897      	ldr	r0, [pc, #604]	; (800306c <Si468x_dab_get_digital_service_data+0x2c8>)
 8002e10:	f000 fdf6 	bl	8003a00 <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002e14:	4b94      	ldr	r3, [pc, #592]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8115 	bne.w	800304e <Si468x_dab_get_digital_service_data+0x2aa>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002e24:	4b90      	ldr	r3, [pc, #576]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e26:	89db      	ldrh	r3, [r3, #14]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	498a      	ldr	r1, [pc, #552]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fc40 	bl	80016b4 <Si468x_read_reply>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e3a:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002e3c:	4b8a      	ldr	r3, [pc, #552]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e3e:	78db      	ldrb	r3, [r3, #3]
 8002e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b3c      	cmp	r3, #60	; 0x3c
 8002e48:	f040 80a7 	bne.w	8002f9a <Si468x_dab_get_digital_service_data+0x1f6>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4888      	ldr	r0, [pc, #544]	; (8003070 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002e50:	f000 fdd6 	bl	8003a00 <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8002e54:	4b80      	ldr	r3, [pc, #512]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e56:	7e1b      	ldrb	r3, [r3, #24]
 8002e58:	051a      	lsls	r2, r3, #20
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e5c:	7e5b      	ldrb	r3, [r3, #25]
 8002e5e:	031b      	lsls	r3, r3, #12
 8002e60:	441a      	add	r2, r3
 8002e62:	4b7d      	ldr	r3, [pc, #500]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e64:	7e9b      	ldrb	r3, [r3, #26]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	4413      	add	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8002e6c:	4b7a      	ldr	r3, [pc, #488]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e6e:	7edb      	ldrb	r3, [r3, #27]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <Si468x_dab_get_digital_service_data+0xd6>
 8002e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e78:	e000      	b.n	8002e7c <Si468x_dab_get_digital_service_data+0xd8>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4b76      	ldr	r3, [pc, #472]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e7e:	7f1b      	ldrb	r3, [r3, #28]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e90:	7f5b      	ldrb	r3, [r3, #29]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <Si468x_dab_get_digital_service_data+0xf8>
 8002e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9a:	e000      	b.n	8002e9e <Si468x_dab_get_digital_service_data+0xfa>
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002ea0:	7f9b      	ldrb	r3, [r3, #30]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	82fb      	strh	r3, [r7, #22]
 8002eac:	e006      	b.n	8002ebc <Si468x_dab_get_digital_service_data+0x118>
					{
						slideshow_data[i] = 0;
 8002eae:	8afb      	ldrh	r3, [r7, #22]
 8002eb0:	4a70      	ldr	r2, [pc, #448]	; (8003074 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002eb6:	8afb      	ldrh	r3, [r7, #22]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	82fb      	strh	r3, [r7, #22]
 8002ebc:	8afb      	ldrh	r3, [r7, #22]
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d3f4      	bcc.n	8002eae <Si468x_dab_get_digital_service_data+0x10a>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	82bb      	strh	r3, [r7, #20]
 8002ec8:	e00a      	b.n	8002ee0 <Si468x_dab_get_digital_service_data+0x13c>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002eca:	8abb      	ldrh	r3, [r7, #20]
 8002ecc:	f103 0218 	add.w	r2, r3, #24
 8002ed0:	8abb      	ldrh	r3, [r7, #20]
 8002ed2:	4961      	ldr	r1, [pc, #388]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002ed4:	5c89      	ldrb	r1, [r1, r2]
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ed8:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002eda:	8abb      	ldrh	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	82bb      	strh	r3, [r7, #20]
 8002ee0:	4b61      	ldr	r3, [pc, #388]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002ee2:	89db      	ldrh	r3, [r3, #14]
 8002ee4:	8aba      	ldrh	r2, [r7, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d3ef      	bcc.n	8002eca <Si468x_dab_get_digital_service_data+0x126>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	827b      	strh	r3, [r7, #18]
 8002eee:	e00f      	b.n	8002f10 <Si468x_dab_get_digital_service_data+0x16c>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	4a60      	ldr	r2, [pc, #384]	; (8003074 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	220a      	movs	r2, #10
 8002ef8:	495f      	ldr	r1, [pc, #380]	; (8003078 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00a fa2e 	bl	800d35c <itoa>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fd7b 	bl	8003a00 <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f0a:	8a7b      	ldrh	r3, [r7, #18]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	827b      	strh	r3, [r7, #18]
 8002f10:	4b55      	ldr	r3, [pc, #340]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002f12:	89db      	ldrh	r3, [r3, #14]
 8002f14:	8a7a      	ldrh	r2, [r7, #18]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d3ea      	bcc.n	8002ef0 <Si468x_dab_get_digital_service_data+0x14c>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4857      	ldr	r0, [pc, #348]	; (800307c <Si468x_dab_get_digital_service_data+0x2d8>)
 8002f1e:	f000 fd6f 	bl	8003a00 <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 8002f22:	2100      	movs	r1, #0
 8002f24:	4856      	ldr	r0, [pc, #344]	; (8003080 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002f26:	f000 fd6b 	bl	8003a00 <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	220a      	movs	r2, #10
 8002f2e:	4952      	ldr	r1, [pc, #328]	; (8003078 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f00a fa13 	bl	800d35c <itoa>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fd60 	bl	8003a00 <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8002f40:	2100      	movs	r1, #0
 8002f42:	4850      	ldr	r0, [pc, #320]	; (8003084 <Si468x_dab_get_digital_service_data+0x2e0>)
 8002f44:	f000 fd5c 	bl	8003a00 <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	220a      	movs	r2, #10
 8002f4c:	494a      	ldr	r1, [pc, #296]	; (8003078 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f00a fa04 	bl	800d35c <itoa>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fd51 	bl	8003a00 <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4849      	ldr	r0, [pc, #292]	; (8003088 <Si468x_dab_get_digital_service_data+0x2e4>)
 8002f62:	f000 fd4d 	bl	8003a00 <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 8002f66:	797b      	ldrb	r3, [r7, #5]
 8002f68:	220a      	movs	r2, #10
 8002f6a:	4943      	ldr	r1, [pc, #268]	; (8003078 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00a f9f5 	bl	800d35c <itoa>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fd42 	bl	8003a00 <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4843      	ldr	r0, [pc, #268]	; (800308c <Si468x_dab_get_digital_service_data+0x2e8>)
 8002f80:	f000 fd3e 	bl	8003a00 <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	220a      	movs	r2, #10
 8002f88:	493b      	ldr	r1, [pc, #236]	; (8003078 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f00a f9e6 	bl	800d35c <itoa>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fd33 	bl	8003a00 <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002f9c:	78db      	ldrb	r3, [r3, #3]
 8002f9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d152      	bne.n	800304e <Si468x_dab_get_digital_service_data+0x2aa>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4839      	ldr	r0, [pc, #228]	; (8003090 <Si468x_dab_get_digital_service_data+0x2ec>)
 8002fac:	f000 fd28 	bl	8003a00 <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	747b      	strb	r3, [r7, #17]
 8002fb4:	e006      	b.n	8002fc4 <Si468x_dab_get_digital_service_data+0x220>
					{
						dls_label[i] = 0;
 8002fb6:	7c7b      	ldrb	r3, [r7, #17]
 8002fb8:	4a36      	ldr	r2, [pc, #216]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 8002fbe:	7c7b      	ldrb	r3, [r7, #17]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	747b      	strb	r3, [r7, #17]
 8002fc4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	daf4      	bge.n	8002fb6 <Si468x_dab_get_digital_service_data+0x212>
					}

					uint8_t label_pos = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e031      	b.n	800303a <Si468x_dab_get_digital_service_data+0x296>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	f103 021a 	add.w	r2, r3, #26
 8002fdc:	7c3b      	ldrb	r3, [r7, #16]
 8002fde:	491e      	ldr	r1, [pc, #120]	; (8003058 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002fe0:	5c89      	ldrb	r1, [r1, r2]
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fe4:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8002fe6:	7c3b      	ldrb	r3, [r7, #16]
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	2bc3      	cmp	r3, #195	; 0xc3
 8002fee:	d106      	bne.n	8002ffe <Si468x_dab_get_digital_service_data+0x25a>
						{
							dls_label[label_pos] = 111;//lub 243
 8002ff0:	7c3b      	ldrb	r3, [r7, #16]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002ff4:	216f      	movs	r1, #111	; 0x6f
 8002ff6:	54d1      	strb	r1, [r2, r3]
							i++;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 8002ffe:	7c3b      	ldrb	r3, [r7, #16]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	2bc4      	cmp	r3, #196	; 0xc4
 8003006:	d106      	bne.n	8003016 <Si468x_dab_get_digital_service_data+0x272>
						{
							dls_label[label_pos] = 99; //lub 230
 8003008:	7c3b      	ldrb	r3, [r7, #16]
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 800300c:	2163      	movs	r1, #99	; 0x63
 800300e:	54d1      	strb	r1, [r2, r3]
							i++;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	3301      	adds	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 8003016:	7c3b      	ldrb	r3, [r7, #16]
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	2bc5      	cmp	r3, #197	; 0xc5
 800301e:	d106      	bne.n	800302e <Si468x_dab_get_digital_service_data+0x28a>
						{
							dls_label[label_pos] = 108; //lub 179
 8003020:	7c3b      	ldrb	r3, [r7, #16]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 8003024:	216c      	movs	r1, #108	; 0x6c
 8003026:	54d1      	strb	r1, [r2, r3]
							i++;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	3301      	adds	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 800302e:	7c3b      	ldrb	r3, [r7, #16]
 8003030:	3301      	adds	r3, #1
 8003032:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	3301      	adds	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <Si468x_dab_get_digital_service_data+0x2c4>)
 8003040:	89db      	ldrh	r3, [r3, #14]
 8003042:	429a      	cmp	r2, r3
 8003044:	d3c7      	bcc.n	8002fd6 <Si468x_dab_get_digital_service_data+0x232>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 8003046:	2101      	movs	r1, #1
 8003048:	4812      	ldr	r0, [pc, #72]	; (8003094 <Si468x_dab_get_digital_service_data+0x2f0>)
 800304a:	f000 fcd9 	bl	8003a00 <send_debug_msg>
				}
			}
		}
	}
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bdb0      	pop	{r4, r5, r7, pc}
 8003056:	bf00      	nop
 8003058:	200011a8 	.word	0x200011a8
 800305c:	20003510 	.word	0x20003510
 8003060:	200035fc 	.word	0x200035fc
 8003064:	200001a8 	.word	0x200001a8
 8003068:	20003620 	.word	0x20003620
 800306c:	0800dfc4 	.word	0x0800dfc4
 8003070:	0800dff8 	.word	0x0800dff8
 8003074:	20004c58 	.word	0x20004c58
 8003078:	200034d0 	.word	0x200034d0
 800307c:	0800e00c 	.word	0x0800e00c
 8003080:	0800e010 	.word	0x0800e010
 8003084:	0800e01c 	.word	0x0800e01c
 8003088:	0800e02c 	.word	0x0800e02c
 800308c:	0800e03c 	.word	0x0800e03c
 8003090:	0800e050 	.word	0x0800e050
 8003094:	20004bd4 	.word	0x20004bd4

08003098 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <Si468x_dab_get_time+0x78>)
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02f      	beq.n	800310a <Si468x_dab_get_time+0x72>
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <Si468x_dab_get_time+0x78>)
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d028      	beq.n	800310a <Si468x_dab_get_time+0x72>
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <Si468x_dab_get_time+0x78>)
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	2b5a      	cmp	r3, #90	; 0x5a
 80030be:	d924      	bls.n	800310a <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <Si468x_dab_get_time+0x7c>)
 80030c2:	22bc      	movs	r2, #188	; 0xbc
 80030c4:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <Si468x_dab_get_time+0x7c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80030cc:	4911      	ldr	r1, [pc, #68]	; (8003114 <Si468x_dab_get_time+0x7c>)
 80030ce:	2002      	movs	r0, #2
 80030d0:	f7fe face 	bl	8001670 <Si468x_write_command>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <Si468x_dab_get_time+0x80>)
 80030da:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80030dc:	2001      	movs	r0, #1
 80030de:	f004 f99f 	bl	8007420 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 80030e2:	490e      	ldr	r1, [pc, #56]	; (800311c <Si468x_dab_get_time+0x84>)
 80030e4:	200b      	movs	r0, #11
 80030e6:	f7fe fae5 	bl	80016b4 <Si468x_read_reply>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <Si468x_dab_get_time+0x80>)
 80030f0:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <Si468x_dab_get_time+0x88>)
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <Si468x_dab_get_time+0x84>)
 80030f6:	3304      	adds	r3, #4
 80030f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030fc:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <Si468x_dab_get_time+0x88>)
 8003102:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003106:	f002 fa2f 	bl	8005568 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200035d4 	.word	0x200035d4
 8003114:	200001a8 	.word	0x200001a8
 8003118:	20003510 	.word	0x20003510
 800311c:	200011a8 	.word	0x200011a8
 8003120:	20003608 	.word	0x20003608

08003124 <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	b29b      	uxth	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003138:	f7fe fbca 	bl	80018d0 <Si468x_set_property>
	dab_management.audio_volume = _volume;
 800313c:	79fa      	ldrb	r2, [r7, #7]
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <Si468x_set_audio_volume+0x5c>)
 8003140:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 8003142:	2100      	movs	r1, #0
 8003144:	480f      	ldr	r0, [pc, #60]	; (8003184 <Si468x_set_audio_volume+0x60>)
 8003146:	f000 fc5b 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <Si468x_set_audio_volume+0x5c>)
 800314c:	7b9b      	ldrb	r3, [r3, #14]
 800314e:	220a      	movs	r2, #10
 8003150:	490d      	ldr	r1, [pc, #52]	; (8003188 <Si468x_set_audio_volume+0x64>)
 8003152:	4618      	mov	r0, r3
 8003154:	f00a f902 	bl	800d35c <itoa>
 8003158:	4603      	mov	r3, r0
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fc4f 	bl	8003a00 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8003162:	2101      	movs	r1, #1
 8003164:	4809      	ldr	r0, [pc, #36]	; (800318c <Si468x_set_audio_volume+0x68>)
 8003166:	f000 fc4b 	bl	8003a00 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	2201      	movs	r2, #1
 800316e:	4619      	mov	r1, r3
 8003170:	200b      	movs	r0, #11
 8003172:	f002 fad1 	bl	8005718 <eeprom_write>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20004bc4 	.word	0x20004bc4
 8003184:	0800e0a4 	.word	0x0800e0a4
 8003188:	200034d0 	.word	0x200034d0
 800318c:	0800e0b0 	.word	0x0800e0b0

08003190 <play_station>:
}



void play_station(uint8_t station_id)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dab_management.actual_station = station_id;
 800319c:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <play_station+0x110>)
 800319e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031a2:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <play_station+0x110>)
 80031a6:	78da      	ldrb	r2, [r3, #3]
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <play_station+0x110>)
 80031aa:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80031ac:	2201      	movs	r2, #1
 80031ae:	493d      	ldr	r1, [pc, #244]	; (80032a4 <play_station+0x114>)
 80031b0:	f240 1007 	movw	r0, #263	; 0x107
 80031b4:	f002 fab0 	bl	8005718 <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 80031b8:	2101      	movs	r1, #1
 80031ba:	483b      	ldr	r0, [pc, #236]	; (80032a8 <play_station+0x118>)
 80031bc:	f000 fc20 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 80031c0:	2100      	movs	r1, #0
 80031c2:	483a      	ldr	r0, [pc, #232]	; (80032ac <play_station+0x11c>)
 80031c4:	f000 fc1c 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 80031c8:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <play_station+0x110>)
 80031ca:	78db      	ldrb	r3, [r3, #3]
 80031cc:	3301      	adds	r3, #1
 80031ce:	220a      	movs	r2, #10
 80031d0:	4937      	ldr	r1, [pc, #220]	; (80032b0 <play_station+0x120>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00a f8c2 	bl	800d35c <itoa>
 80031d8:	4603      	mov	r3, r0
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fc0f 	bl	8003a00 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 80031e2:	2100      	movs	r1, #0
 80031e4:	4833      	ldr	r0, [pc, #204]	; (80032b4 <play_station+0x124>)
 80031e6:	f000 fc0b 	bl	8003a00 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <play_station+0x110>)
 80031ec:	78db      	ldrb	r3, [r3, #3]
 80031ee:	461a      	mov	r2, r3
 80031f0:	2334      	movs	r3, #52	; 0x34
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	4a30      	ldr	r2, [pc, #192]	; (80032b8 <play_station+0x128>)
 80031f8:	4413      	add	r3, r2
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fbff 	bl	8003a00 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, USE_ANT_CAP); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <play_station+0x110>)
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	4619      	mov	r1, r3
 8003208:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <play_station+0x128>)
 800320a:	2334      	movs	r3, #52	; 0x34
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3328      	adds	r3, #40	; 0x28
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fc45 	bl	8001aa8 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <play_station+0x110>)
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	4619      	mov	r1, r3
 8003224:	4a24      	ldr	r2, [pc, #144]	; (80032b8 <play_station+0x128>)
 8003226:	2334      	movs	r3, #52	; 0x34
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3320      	adds	r3, #32
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <play_station+0x110>)
 8003234:	78db      	ldrb	r3, [r3, #3]
 8003236:	4618      	mov	r0, r3
 8003238:	491f      	ldr	r1, [pc, #124]	; (80032b8 <play_station+0x128>)
 800323a:	2334      	movs	r3, #52	; 0x34
 800323c:	fb00 f303 	mul.w	r3, r0, r3
 8003240:	440b      	add	r3, r1
 8003242:	332a      	adds	r3, #42	; 0x2a
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f7ff fcff 	bl	8002c4c <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <play_station+0x110>)
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	4619      	mov	r1, r3
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <play_station+0x128>)
 8003256:	2334      	movs	r3, #52	; 0x34
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3320      	adds	r3, #32
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <play_station+0x110>)
 8003264:	78db      	ldrb	r3, [r3, #3]
 8003266:	4618      	mov	r0, r3
 8003268:	4913      	ldr	r1, [pc, #76]	; (80032b8 <play_station+0x128>)
 800326a:	2334      	movs	r3, #52	; 0x34
 800326c:	fb00 f303 	mul.w	r3, r0, r3
 8003270:	440b      	add	r3, r1
 8003272:	332a      	adds	r3, #42	; 0x2a
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f7fe fff9 	bl	8002270 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 800327e:	463b      	mov	r3, r7
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fce9 	bl	8001c58 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8003286:	463b      	mov	r3, r7
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fbf7 	bl	8002a7c <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 800328e:	2103      	movs	r1, #3
 8003290:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8003294:	f7fe fb1c 	bl	80018d0 <Si468x_set_property>
}
 8003298:	bf00      	nop
 800329a:	3730      	adds	r7, #48	; 0x30
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20004bc4 	.word	0x20004bc4
 80032a4:	20004bc8 	.word	0x20004bc8
 80032a8:	0800e0c4 	.word	0x0800e0c4
 80032ac:	0800e0e8 	.word	0x0800e0e8
 80032b0:	200034d0 	.word	0x200034d0
 80032b4:	0800e0fc 	.word	0x0800e0fc
 80032b8:	20003774 	.word	0x20003774

080032bc <restore_from_eeprom>:

void restore_from_eeprom()
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b094      	sub	sp, #80	; 0x50
 80032c0:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 80032c2:	2101      	movs	r1, #1
 80032c4:	48a7      	ldr	r0, [pc, #668]	; (8003564 <restore_from_eeprom+0x2a8>)
 80032c6:	f000 fb9b 	bl	8003a00 <send_debug_msg>

	//restore frequency table

	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 80032ca:	2201      	movs	r2, #1
 80032cc:	49a6      	ldr	r1, [pc, #664]	; (8003568 <restore_from_eeprom+0x2ac>)
 80032ce:	203f      	movs	r0, #63	; 0x3f
 80032d0:	f002 fa04 	bl	80056dc <eeprom_read>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80032da:	e016      	b.n	800330a <restore_from_eeprom+0x4e>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 80032dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80032e0:	3302      	adds	r3, #2
 80032e2:	015b      	lsls	r3, r3, #5
 80032e4:	4618      	mov	r0, r3
 80032e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4a9f      	ldr	r2, [pc, #636]	; (800356c <restore_from_eeprom+0x2b0>)
 80032f0:	4413      	add	r3, r2
 80032f2:	2220      	movs	r2, #32
 80032f4:	4619      	mov	r1, r3
 80032f6:	f002 f9f1 	bl	80056dc <eeprom_read>
		HAL_Delay(5);
 80032fa:	2005      	movs	r0, #5
 80032fc:	f004 f890 	bl	8007420 <HAL_Delay>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 8003300:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003304:	3301      	adds	r3, #1
 8003306:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800330a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800330e:	2b05      	cmp	r3, #5
 8003310:	d9e4      	bls.n	80032dc <restore_from_eeprom+0x20>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 8003312:	2100      	movs	r1, #0
 8003314:	4896      	ldr	r0, [pc, #600]	; (8003570 <restore_from_eeprom+0x2b4>)
 8003316:	f000 fb73 	bl	8003a00 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 800331a:	4b96      	ldr	r3, [pc, #600]	; (8003574 <restore_from_eeprom+0x2b8>)
 800331c:	7b5b      	ldrb	r3, [r3, #13]
 800331e:	220a      	movs	r2, #10
 8003320:	4995      	ldr	r1, [pc, #596]	; (8003578 <restore_from_eeprom+0x2bc>)
 8003322:	4618      	mov	r0, r3
 8003324:	f00a f81a 	bl	800d35c <itoa>
 8003328:	4603      	mov	r3, r0
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fb67 	bl	8003a00 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003332:	2101      	movs	r1, #1
 8003334:	4891      	ldr	r0, [pc, #580]	; (800357c <restore_from_eeprom+0x2c0>)
 8003336:	f000 fb63 	bl	8003a00 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333e:	e022      	b.n	8003386 <restore_from_eeprom+0xca>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003340:	220a      	movs	r2, #10
 8003342:	498d      	ldr	r1, [pc, #564]	; (8003578 <restore_from_eeprom+0x2bc>)
 8003344:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003346:	f00a f809 	bl	800d35c <itoa>
 800334a:	4603      	mov	r3, r0
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb56 	bl	8003a00 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003354:	2100      	movs	r1, #0
 8003356:	488a      	ldr	r0, [pc, #552]	; (8003580 <restore_from_eeprom+0x2c4>)
 8003358:	f000 fb52 	bl	8003a00 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 800335c:	4a83      	ldr	r2, [pc, #524]	; (800356c <restore_from_eeprom+0x2b0>)
 800335e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003364:	220a      	movs	r2, #10
 8003366:	4984      	ldr	r1, [pc, #528]	; (8003578 <restore_from_eeprom+0x2bc>)
 8003368:	4618      	mov	r0, r3
 800336a:	f009 fff7 	bl	800d35c <itoa>
 800336e:	4603      	mov	r3, r0
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb44 	bl	8003a00 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003378:	2101      	movs	r1, #1
 800337a:	4882      	ldr	r0, [pc, #520]	; (8003584 <restore_from_eeprom+0x2c8>)
 800337c:	f000 fb40 	bl	8003a00 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003382:	3301      	adds	r3, #1
 8003384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003386:	4b7b      	ldr	r3, [pc, #492]	; (8003574 <restore_from_eeprom+0x2b8>)
 8003388:	7b5b      	ldrb	r3, [r3, #13]
 800338a:	461a      	mov	r2, r3
 800338c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338e:	4293      	cmp	r3, r2
 8003390:	dbd6      	blt.n	8003340 <restore_from_eeprom+0x84>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 8003392:	2201      	movs	r2, #1
 8003394:	497c      	ldr	r1, [pc, #496]	; (8003588 <restore_from_eeprom+0x2cc>)
 8003396:	f240 1005 	movw	r0, #261	; 0x105
 800339a:	f002 f99f 	bl	80056dc <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 800339e:	2201      	movs	r2, #1
 80033a0:	4974      	ldr	r1, [pc, #464]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033a2:	f44f 7083 	mov.w	r0, #262	; 0x106
 80033a6:	f002 f999 	bl	80056dc <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 80033aa:	4b72      	ldr	r3, [pc, #456]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2bff      	cmp	r3, #255	; 0xff
 80033b0:	f000 82c2 	beq.w	8003938 <restore_from_eeprom+0x67c>
 80033b4:	4b6f      	ldr	r3, [pc, #444]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	2bff      	cmp	r3, #255	; 0xff
 80033ba:	f000 82bd 	beq.w	8003938 <restore_from_eeprom+0x67c>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 80033be:	2204      	movs	r2, #4
 80033c0:	4972      	ldr	r1, [pc, #456]	; (800358c <restore_from_eeprom+0x2d0>)
 80033c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033c6:	f002 f989 	bl	80056dc <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 80033ca:	2201      	movs	r2, #1
 80033cc:	4970      	ldr	r1, [pc, #448]	; (8003590 <restore_from_eeprom+0x2d4>)
 80033ce:	f44f 7082 	mov.w	r0, #260	; 0x104
 80033d2:	f002 f983 	bl	80056dc <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80033d6:	2201      	movs	r2, #1
 80033d8:	496e      	ldr	r1, [pc, #440]	; (8003594 <restore_from_eeprom+0x2d8>)
 80033da:	f240 1007 	movw	r0, #263	; 0x107
 80033de:	f002 f97d 	bl	80056dc <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 80033e2:	4b64      	ldr	r3, [pc, #400]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033e4:	791b      	ldrb	r3, [r3, #4]
 80033e6:	2bff      	cmp	r3, #255	; 0xff
 80033e8:	d102      	bne.n	80033f0 <restore_from_eeprom+0x134>
		{
			dab_management.last_station_index = 0;
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 80033f0:	4b60      	ldr	r3, [pc, #384]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033f2:	791a      	ldrb	r2, [r3, #4]
 80033f4:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <restore_from_eeprom+0x2b8>)
 80033f6:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80033fe:	e012      	b.n	8003426 <restore_from_eeprom+0x16a>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 8003400:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003404:	330a      	adds	r3, #10
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	4618      	mov	r0, r3
 800340a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	4a61      	ldr	r2, [pc, #388]	; (8003598 <restore_from_eeprom+0x2dc>)
 8003412:	4413      	add	r3, r2
 8003414:	2220      	movs	r2, #32
 8003416:	4619      	mov	r1, r3
 8003418:	f002 f960 	bl	80056dc <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800341c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003420:	3301      	adds	r3, #1
 8003422:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <restore_from_eeprom+0x2b8>)
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800342e:	429a      	cmp	r2, r3
 8003430:	d3e6      	bcc.n	8003400 <restore_from_eeprom+0x144>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
			}
		}
		if(PAGE_SIZE == 32)
		{
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003438:	e026      	b.n	8003488 <restore_from_eeprom+0x1cc>
			{
				uint8_t temp [64];
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2, &temp[0], 32);
 800343a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800343e:	330f      	adds	r3, #15
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	4618      	mov	r0, r3
 8003444:	463b      	mov	r3, r7
 8003446:	2220      	movs	r2, #32
 8003448:	4619      	mov	r1, r3
 800344a:	f002 f947 	bl	80056dc <eeprom_read>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 800344e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003452:	330f      	adds	r3, #15
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	3320      	adds	r3, #32
 8003458:	4618      	mov	r0, r3
 800345a:	463b      	mov	r3, r7
 800345c:	3320      	adds	r3, #32
 800345e:	2214      	movs	r2, #20
 8003460:	4619      	mov	r1, r3
 8003462:	f002 f93b 	bl	80056dc <eeprom_read>
				memcpy(&services_list[i], &temp, sizeof(dab_service_t));
 8003466:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800346a:	2234      	movs	r2, #52	; 0x34
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	4a4a      	ldr	r2, [pc, #296]	; (800359c <restore_from_eeprom+0x2e0>)
 8003472:	4413      	add	r3, r2
 8003474:	4639      	mov	r1, r7
 8003476:	2234      	movs	r2, #52	; 0x34
 8003478:	4618      	mov	r0, r3
 800347a:	f009 ffdf 	bl	800d43c <memcpy>
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 800347e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003482:	3301      	adds	r3, #1
 8003484:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003488:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <restore_from_eeprom+0x2b8>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8003490:	429a      	cmp	r2, r3
 8003492:	d3d2      	bcc.n	800343a <restore_from_eeprom+0x17e>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 8003494:	2100      	movs	r1, #0
 8003496:	4836      	ldr	r0, [pc, #216]	; (8003570 <restore_from_eeprom+0x2b4>)
 8003498:	f000 fab2 	bl	8003a00 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <restore_from_eeprom+0x2b8>)
 800349e:	7b5b      	ldrb	r3, [r3, #13]
 80034a0:	220a      	movs	r2, #10
 80034a2:	4935      	ldr	r1, [pc, #212]	; (8003578 <restore_from_eeprom+0x2bc>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f009 ff59 	bl	800d35c <itoa>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 faa6 	bl	8003a00 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 80034b4:	2101      	movs	r1, #1
 80034b6:	4831      	ldr	r0, [pc, #196]	; (800357c <restore_from_eeprom+0x2c0>)
 80034b8:	f000 faa2 	bl	8003a00 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
 80034c0:	e022      	b.n	8003508 <restore_from_eeprom+0x24c>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80034c2:	220a      	movs	r2, #10
 80034c4:	492c      	ldr	r1, [pc, #176]	; (8003578 <restore_from_eeprom+0x2bc>)
 80034c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80034c8:	f009 ff48 	bl	800d35c <itoa>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa95 	bl	8003a00 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 80034d6:	2100      	movs	r1, #0
 80034d8:	4829      	ldr	r0, [pc, #164]	; (8003580 <restore_from_eeprom+0x2c4>)
 80034da:	f000 fa91 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 80034de:	4a23      	ldr	r2, [pc, #140]	; (800356c <restore_from_eeprom+0x2b0>)
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	220a      	movs	r2, #10
 80034e8:	4923      	ldr	r1, [pc, #140]	; (8003578 <restore_from_eeprom+0x2bc>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f009 ff36 	bl	800d35c <itoa>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa83 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 80034fa:	2101      	movs	r1, #1
 80034fc:	4821      	ldr	r0, [pc, #132]	; (8003584 <restore_from_eeprom+0x2c8>)
 80034fe:	f000 fa7f 	bl	8003a00 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003504:	3301      	adds	r3, #1
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <restore_from_eeprom+0x2b8>)
 800350a:	7b5b      	ldrb	r3, [r3, #13]
 800350c:	461a      	mov	r2, r3
 800350e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003510:	4293      	cmp	r3, r2
 8003512:	dbd6      	blt.n	80034c2 <restore_from_eeprom+0x206>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8003514:	2100      	movs	r1, #0
 8003516:	4822      	ldr	r0, [pc, #136]	; (80035a0 <restore_from_eeprom+0x2e4>)
 8003518:	f000 fa72 	bl	8003a00 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <restore_from_eeprom+0x2b8>)
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	220a      	movs	r2, #10
 8003522:	4915      	ldr	r1, [pc, #84]	; (8003578 <restore_from_eeprom+0x2bc>)
 8003524:	4618      	mov	r0, r3
 8003526:	f009 ff19 	bl	800d35c <itoa>
 800352a:	4603      	mov	r3, r0
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fa66 	bl	8003a00 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003534:	2101      	movs	r1, #1
 8003536:	481b      	ldr	r0, [pc, #108]	; (80035a4 <restore_from_eeprom+0x2e8>)
 8003538:	f000 fa62 	bl	8003a00 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 800353c:	2100      	movs	r1, #0
 800353e:	481a      	ldr	r0, [pc, #104]	; (80035a8 <restore_from_eeprom+0x2ec>)
 8003540:	f000 fa5e 	bl	8003a00 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8003544:	2100      	movs	r1, #0
 8003546:	4819      	ldr	r0, [pc, #100]	; (80035ac <restore_from_eeprom+0x2f0>)
 8003548:	f000 fa5a 	bl	8003a00 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 800354c:	2100      	movs	r1, #0
 800354e:	4818      	ldr	r0, [pc, #96]	; (80035b0 <restore_from_eeprom+0x2f4>)
 8003550:	f000 fa56 	bl	8003a00 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003554:	2101      	movs	r1, #1
 8003556:	4817      	ldr	r0, [pc, #92]	; (80035b4 <restore_from_eeprom+0x2f8>)
 8003558:	f000 fa52 	bl	8003a00 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003562:	e086      	b.n	8003672 <restore_from_eeprom+0x3b6>
 8003564:	0800e104 	.word	0x0800e104
 8003568:	20004bd1 	.word	0x20004bd1
 800356c:	20003514 	.word	0x20003514
 8003570:	0800da3c 	.word	0x0800da3c
 8003574:	20004bc4 	.word	0x20004bc4
 8003578:	200034d0 	.word	0x200034d0
 800357c:	0800da44 	.word	0x0800da44
 8003580:	0800da5c 	.word	0x0800da5c
 8003584:	0800da60 	.word	0x0800da60
 8003588:	20004bc5 	.word	0x20004bc5
 800358c:	20004bcc 	.word	0x20004bcc
 8003590:	20004bd0 	.word	0x20004bd0
 8003594:	20004bc8 	.word	0x20004bc8
 8003598:	20003634 	.word	0x20003634
 800359c:	20003774 	.word	0x20003774
 80035a0:	0800dccc 	.word	0x0800dccc
 80035a4:	0800dce0 	.word	0x0800dce0
 80035a8:	0800dd14 	.word	0x0800dd14
 80035ac:	0800dd20 	.word	0x0800dd20
 80035b0:	0800dd34 	.word	0x0800dd34
 80035b4:	0800dd44 	.word	0x0800dd44
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80035b8:	2100      	movs	r1, #0
 80035ba:	48cc      	ldr	r0, [pc, #816]	; (80038ec <restore_from_eeprom+0x630>)
 80035bc:	f000 fa20 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80035c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80035c4:	3301      	adds	r3, #1
 80035c6:	220a      	movs	r2, #10
 80035c8:	49c9      	ldr	r1, [pc, #804]	; (80038f0 <restore_from_eeprom+0x634>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f009 fec6 	bl	800d35c <itoa>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fa13 	bl	8003a00 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80035da:	2100      	movs	r1, #0
 80035dc:	48c5      	ldr	r0, [pc, #788]	; (80038f4 <restore_from_eeprom+0x638>)
 80035de:	f000 fa0f 	bl	8003a00 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80035e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	4ac3      	ldr	r2, [pc, #780]	; (80038f8 <restore_from_eeprom+0x63c>)
 80035ea:	4413      	add	r3, r2
 80035ec:	3302      	adds	r3, #2
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fa05 	bl	8003a00 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 80035f6:	2100      	movs	r1, #0
 80035f8:	48bc      	ldr	r0, [pc, #752]	; (80038ec <restore_from_eeprom+0x630>)
 80035fa:	f000 fa01 	bl	8003a00 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80035fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003602:	4abd      	ldr	r2, [pc, #756]	; (80038f8 <restore_from_eeprom+0x63c>)
 8003604:	015b      	lsls	r3, r3, #5
 8003606:	4413      	add	r3, r2
 8003608:	3318      	adds	r3, #24
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	220a      	movs	r2, #10
 800360e:	49b8      	ldr	r1, [pc, #736]	; (80038f0 <restore_from_eeprom+0x634>)
 8003610:	4618      	mov	r0, r3
 8003612:	f009 fea3 	bl	800d35c <itoa>
 8003616:	4603      	mov	r3, r0
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f9f0 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003620:	2100      	movs	r1, #0
 8003622:	48b6      	ldr	r0, [pc, #728]	; (80038fc <restore_from_eeprom+0x640>)
 8003624:	f000 f9ec 	bl	8003a00 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8003628:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800362c:	4ab2      	ldr	r2, [pc, #712]	; (80038f8 <restore_from_eeprom+0x63c>)
 800362e:	015b      	lsls	r3, r3, #5
 8003630:	4413      	add	r3, r2
 8003632:	331c      	adds	r3, #28
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4bb1      	ldr	r3, [pc, #708]	; (8003900 <restore_from_eeprom+0x644>)
 800363a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f9dd 	bl	8003a00 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8003646:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800364a:	4aab      	ldr	r2, [pc, #684]	; (80038f8 <restore_from_eeprom+0x63c>)
 800364c:	015b      	lsls	r3, r3, #5
 800364e:	4413      	add	r3, r2
 8003650:	331c      	adds	r3, #28
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b13      	cmp	r3, #19
 8003656:	d803      	bhi.n	8003660 <restore_from_eeprom+0x3a4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003658:	2100      	movs	r1, #0
 800365a:	48aa      	ldr	r0, [pc, #680]	; (8003904 <restore_from_eeprom+0x648>)
 800365c:	f000 f9d0 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8003660:	2101      	movs	r1, #1
 8003662:	48a9      	ldr	r0, [pc, #676]	; (8003908 <restore_from_eeprom+0x64c>)
 8003664:	f000 f9cc 	bl	8003a00 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003668:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800366c:	3301      	adds	r3, #1
 800366e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003672:	4ba6      	ldr	r3, [pc, #664]	; (800390c <restore_from_eeprom+0x650>)
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800367a:	429a      	cmp	r2, r3
 800367c:	d39c      	bcc.n	80035b8 <restore_from_eeprom+0x2fc>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800367e:	2101      	movs	r1, #1
 8003680:	48a3      	ldr	r0, [pc, #652]	; (8003910 <restore_from_eeprom+0x654>)
 8003682:	f000 f9bd 	bl	8003a00 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003686:	2100      	movs	r1, #0
 8003688:	48a2      	ldr	r0, [pc, #648]	; (8003914 <restore_from_eeprom+0x658>)
 800368a:	f000 f9b9 	bl	8003a00 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 800368e:	4b9f      	ldr	r3, [pc, #636]	; (800390c <restore_from_eeprom+0x650>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	220a      	movs	r2, #10
 8003694:	4996      	ldr	r1, [pc, #600]	; (80038f0 <restore_from_eeprom+0x634>)
 8003696:	4618      	mov	r0, r3
 8003698:	f009 fe60 	bl	800d35c <itoa>
 800369c:	4603      	mov	r3, r0
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f9ad 	bl	8003a00 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80036a6:	2101      	movs	r1, #1
 80036a8:	489b      	ldr	r0, [pc, #620]	; (8003918 <restore_from_eeprom+0x65c>)
 80036aa:	f000 f9a9 	bl	8003a00 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80036ae:	2101      	movs	r1, #1
 80036b0:	489a      	ldr	r0, [pc, #616]	; (800391c <restore_from_eeprom+0x660>)
 80036b2:	f000 f9a5 	bl	8003a00 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80036bc:	e0f7      	b.n	80038ae <restore_from_eeprom+0x5f2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80036be:	2100      	movs	r1, #0
 80036c0:	488a      	ldr	r0, [pc, #552]	; (80038ec <restore_from_eeprom+0x630>)
 80036c2:	f000 f99d 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80036c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036ca:	3301      	adds	r3, #1
 80036cc:	220a      	movs	r2, #10
 80036ce:	4988      	ldr	r1, [pc, #544]	; (80038f0 <restore_from_eeprom+0x634>)
 80036d0:	4618      	mov	r0, r3
 80036d2:	f009 fe43 	bl	800d35c <itoa>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f990 	bl	8003a00 <send_debug_msg>
			if((services_index +1) < 10)
 80036e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d803      	bhi.n	80036f0 <restore_from_eeprom+0x434>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80036e8:	2100      	movs	r1, #0
 80036ea:	4886      	ldr	r0, [pc, #536]	; (8003904 <restore_from_eeprom+0x648>)
 80036ec:	f000 f988 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80036f0:	2100      	movs	r1, #0
 80036f2:	488b      	ldr	r0, [pc, #556]	; (8003920 <restore_from_eeprom+0x664>)
 80036f4:	f000 f984 	bl	8003a00 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80036f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036fc:	2234      	movs	r2, #52	; 0x34
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a88      	ldr	r2, [pc, #544]	; (8003924 <restore_from_eeprom+0x668>)
 8003704:	4413      	add	r3, r2
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f979 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800370e:	2100      	movs	r1, #0
 8003710:	4885      	ldr	r0, [pc, #532]	; (8003928 <restore_from_eeprom+0x66c>)
 8003712:	f000 f975 	bl	8003a00 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800371c:	e021      	b.n	8003762 <restore_from_eeprom+0x4a6>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800371e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003722:	4a75      	ldr	r2, [pc, #468]	; (80038f8 <restore_from_eeprom+0x63c>)
 8003724:	015b      	lsls	r3, r3, #5
 8003726:	4413      	add	r3, r2
 8003728:	331c      	adds	r3, #28
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003730:	497c      	ldr	r1, [pc, #496]	; (8003924 <restore_from_eeprom+0x668>)
 8003732:	2034      	movs	r0, #52	; 0x34
 8003734:	fb00 f303 	mul.w	r3, r0, r3
 8003738:	440b      	add	r3, r1
 800373a:	3328      	adds	r3, #40	; 0x28
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d10a      	bne.n	8003758 <restore_from_eeprom+0x49c>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8003742:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	4a6b      	ldr	r2, [pc, #428]	; (80038f8 <restore_from_eeprom+0x63c>)
 800374a:	4413      	add	r3, r2
 800374c:	3302      	adds	r3, #2
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f955 	bl	8003a00 <send_debug_msg>
					break;
 8003756:	e00a      	b.n	800376e <restore_from_eeprom+0x4b2>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003758:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800375c:	3301      	adds	r3, #1
 800375e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003762:	4b6a      	ldr	r3, [pc, #424]	; (800390c <restore_from_eeprom+0x650>)
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800376a:	429a      	cmp	r2, r3
 800376c:	d3d7      	bcc.n	800371e <restore_from_eeprom+0x462>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800376e:	2100      	movs	r1, #0
 8003770:	486d      	ldr	r0, [pc, #436]	; (8003928 <restore_from_eeprom+0x66c>)
 8003772:	f000 f945 	bl	8003a00 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003776:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800377a:	4a6a      	ldr	r2, [pc, #424]	; (8003924 <restore_from_eeprom+0x668>)
 800377c:	2134      	movs	r1, #52	; 0x34
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	220a      	movs	r2, #10
 800378a:	4959      	ldr	r1, [pc, #356]	; (80038f0 <restore_from_eeprom+0x634>)
 800378c:	4618      	mov	r0, r3
 800378e:	f009 fde5 	bl	800d35c <itoa>
 8003792:	4603      	mov	r3, r0
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f932 	bl	8003a00 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800379c:	2100      	movs	r1, #0
 800379e:	4857      	ldr	r0, [pc, #348]	; (80038fc <restore_from_eeprom+0x640>)
 80037a0:	f000 f92e 	bl	8003a00 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80037a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037a8:	4a5e      	ldr	r2, [pc, #376]	; (8003924 <restore_from_eeprom+0x668>)
 80037aa:	2134      	movs	r1, #52	; 0x34
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3328      	adds	r3, #40	; 0x28
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b51      	ldr	r3, [pc, #324]	; (8003900 <restore_from_eeprom+0x644>)
 80037ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f91d 	bl	8003a00 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80037c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037ca:	4a56      	ldr	r2, [pc, #344]	; (8003924 <restore_from_eeprom+0x668>)
 80037cc:	2134      	movs	r1, #52	; 0x34
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b13      	cmp	r3, #19
 80037da:	d803      	bhi.n	80037e4 <restore_from_eeprom+0x528>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80037dc:	2100      	movs	r1, #0
 80037de:	4849      	ldr	r0, [pc, #292]	; (8003904 <restore_from_eeprom+0x648>)
 80037e0:	f000 f90e 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80037e4:	2100      	movs	r1, #0
 80037e6:	484e      	ldr	r0, [pc, #312]	; (8003920 <restore_from_eeprom+0x664>)
 80037e8:	f000 f90a 	bl	8003a00 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 80037ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037f0:	4a4c      	ldr	r2, [pc, #304]	; (8003924 <restore_from_eeprom+0x668>)
 80037f2:	2134      	movs	r1, #52	; 0x34
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3315      	adds	r3, #21
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	220a      	movs	r2, #10
 8003800:	493b      	ldr	r1, [pc, #236]	; (80038f0 <restore_from_eeprom+0x634>)
 8003802:	4618      	mov	r0, r3
 8003804:	f009 fdaa 	bl	800d35c <itoa>
 8003808:	4603      	mov	r3, r0
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f8f7 	bl	8003a00 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8003812:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003816:	4a43      	ldr	r2, [pc, #268]	; (8003924 <restore_from_eeprom+0x668>)
 8003818:	2134      	movs	r1, #52	; 0x34
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3315      	adds	r3, #21
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b09      	cmp	r3, #9
 8003826:	d803      	bhi.n	8003830 <restore_from_eeprom+0x574>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003828:	2100      	movs	r1, #0
 800382a:	4836      	ldr	r0, [pc, #216]	; (8003904 <restore_from_eeprom+0x648>)
 800382c:	f000 f8e8 	bl	8003a00 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8003830:	2100      	movs	r1, #0
 8003832:	483e      	ldr	r0, [pc, #248]	; (800392c <restore_from_eeprom+0x670>)
 8003834:	f000 f8e4 	bl	8003a00 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003838:	2100      	movs	r1, #0
 800383a:	483d      	ldr	r0, [pc, #244]	; (8003930 <restore_from_eeprom+0x674>)
 800383c:	f000 f8e0 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003840:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003844:	4a37      	ldr	r2, [pc, #220]	; (8003924 <restore_from_eeprom+0x668>)
 8003846:	2134      	movs	r1, #52	; 0x34
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3320      	adds	r3, #32
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2210      	movs	r2, #16
 8003854:	4926      	ldr	r1, [pc, #152]	; (80038f0 <restore_from_eeprom+0x634>)
 8003856:	4618      	mov	r0, r3
 8003858:	f009 fd80 	bl	800d35c <itoa>
 800385c:	4603      	mov	r3, r0
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f8cd 	bl	8003a00 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003866:	2100      	movs	r1, #0
 8003868:	482d      	ldr	r0, [pc, #180]	; (8003920 <restore_from_eeprom+0x664>)
 800386a:	f000 f8c9 	bl	8003a00 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800386e:	2100      	movs	r1, #0
 8003870:	482f      	ldr	r0, [pc, #188]	; (8003930 <restore_from_eeprom+0x674>)
 8003872:	f000 f8c5 	bl	8003a00 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003876:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800387a:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <restore_from_eeprom+0x668>)
 800387c:	2134      	movs	r1, #52	; 0x34
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	332a      	adds	r3, #42	; 0x2a
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2210      	movs	r2, #16
 800388a:	4919      	ldr	r1, [pc, #100]	; (80038f0 <restore_from_eeprom+0x634>)
 800388c:	4618      	mov	r0, r3
 800388e:	f009 fd65 	bl	800d35c <itoa>
 8003892:	4603      	mov	r3, r0
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f8b2 	bl	8003a00 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 800389c:	2101      	movs	r1, #1
 800389e:	4825      	ldr	r0, [pc, #148]	; (8003934 <restore_from_eeprom+0x678>)
 80038a0:	f000 f8ae 	bl	8003a00 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80038a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80038a8:	3301      	adds	r3, #1
 80038aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <restore_from_eeprom+0x650>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80038b6:	429a      	cmp	r2, r3
 80038b8:	f4ff af01 	bcc.w	80036be <restore_from_eeprom+0x402>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80038bc:	2101      	movs	r1, #1
 80038be:	4816      	ldr	r0, [pc, #88]	; (8003918 <restore_from_eeprom+0x65c>)
 80038c0:	f000 f89e 	bl	8003a00 <send_debug_msg>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, USE_ANT_CAP);
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <restore_from_eeprom+0x650>)
 80038c6:	791b      	ldrb	r3, [r3, #4]
 80038c8:	4619      	mov	r1, r3
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <restore_from_eeprom+0x668>)
 80038cc:	2334      	movs	r3, #52	; 0x34
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3328      	adds	r3, #40	; 0x28
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe f8e4 	bl	8001aa8 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <restore_from_eeprom+0x650>)
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fc53 	bl	8003190 <play_station>
 80038ea:	e038      	b.n	800395e <restore_from_eeprom+0x6a2>
 80038ec:	0800dd54 	.word	0x0800dd54
 80038f0:	200034d0 	.word	0x200034d0
 80038f4:	0800dd58 	.word	0x0800dd58
 80038f8:	20003634 	.word	0x20003634
 80038fc:	0800dd64 	.word	0x0800dd64
 8003900:	20000008 	.word	0x20000008
 8003904:	0800dd6c 	.word	0x0800dd6c
 8003908:	0800dd70 	.word	0x0800dd70
 800390c:	20004bc4 	.word	0x20004bc4
 8003910:	0800dce0 	.word	0x0800dce0
 8003914:	0800dd78 	.word	0x0800dd78
 8003918:	0800dd8c 	.word	0x0800dd8c
 800391c:	0800ddf8 	.word	0x0800ddf8
 8003920:	0800de64 	.word	0x0800de64
 8003924:	20003774 	.word	0x20003774
 8003928:	0800de6c 	.word	0x0800de6c
 800392c:	0800de70 	.word	0x0800de70
 8003930:	0800de78 	.word	0x0800de78
 8003934:	0800de7c 	.word	0x0800de7c

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 8003938:	2101      	movs	r1, #1
 800393a:	4816      	ldr	r0, [pc, #88]	; (8003994 <restore_from_eeprom+0x6d8>)
 800393c:	f000 f860 	bl	8003a00 <send_debug_msg>
		dab_management.actual_freq = 0;
 8003940:	4b15      	ldr	r3, [pc, #84]	; (8003998 <restore_from_eeprom+0x6dc>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <restore_from_eeprom+0x6dc>)
 8003948:	2200      	movs	r2, #0
 800394a:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <restore_from_eeprom+0x6dc>)
 800394e:	2200      	movs	r2, #0
 8003950:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <restore_from_eeprom+0x6dc>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <restore_from_eeprom+0x6dc>)
 800395a:	2200      	movs	r2, #0
 800395c:	70da      	strb	r2, [r3, #3]
	}
	//restore volume level
	eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 800395e:	2201      	movs	r2, #1
 8003960:	490e      	ldr	r1, [pc, #56]	; (800399c <restore_from_eeprom+0x6e0>)
 8003962:	200b      	movs	r0, #11
 8003964:	f001 feba 	bl	80056dc <eeprom_read>
	if(dab_management.audio_volume > 63)
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <restore_from_eeprom+0x6dc>)
 800396a:	7b9b      	ldrb	r3, [r3, #14]
 800396c:	2b3f      	cmp	r3, #63	; 0x3f
 800396e:	d907      	bls.n	8003980 <restore_from_eeprom+0x6c4>
	{
		dab_management.audio_volume = 63;
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <restore_from_eeprom+0x6dc>)
 8003972:	223f      	movs	r2, #63	; 0x3f
 8003974:	739a      	strb	r2, [r3, #14]
		eeprom_write(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003976:	2201      	movs	r2, #1
 8003978:	4908      	ldr	r1, [pc, #32]	; (800399c <restore_from_eeprom+0x6e0>)
 800397a:	200b      	movs	r0, #11
 800397c:	f001 fecc 	bl	8005718 <eeprom_write>
	}
	Si468x_set_audio_volume(dab_management.audio_volume);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <restore_from_eeprom+0x6dc>)
 8003982:	7b9b      	ldrb	r3, [r3, #14]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fbcd 	bl	8003124 <Si468x_set_audio_volume>
}
 800398a:	bf00      	nop
 800398c:	3750      	adds	r7, #80	; 0x50
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	0800e140 	.word	0x0800e140
 8003998:	20004bc4 	.word	0x20004bc4
 800399c:	20004bd2 	.word	0x20004bd2

080039a0 <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
	return services_list;
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <get_dab_service_list+0x10>)
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20003774 	.word	0x20003774

080039b4 <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
	return ensembles_list;
 80039b8:	4b02      	ldr	r3, [pc, #8]	; (80039c4 <get_dab_ensemble_list+0x10>)
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20003634 	.word	0x20003634

080039c8 <get_dab_management>:

dab_management_t get_dab_management()
{
 80039c8:	b490      	push	{r4, r7}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	return dab_management;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <get_dab_management+0x20>)
 80039d4:	461c      	mov	r4, r3
 80039d6:	4613      	mov	r3, r2
 80039d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc90      	pop	{r4, r7}
 80039e6:	4770      	bx	lr
 80039e8:	20004bc4 	.word	0x20004bc4

080039ec <get_dls_label>:

char* get_dls_label()
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	return dls_label;
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <get_dls_label+0x10>)
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	20004bd4 	.word	0x20004bd4

08003a00 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc fbe5 	bl	80001dc <strlen>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	2364      	movs	r3, #100	; 0x64
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	480a      	ldr	r0, [pc, #40]	; (8003a48 <send_debug_msg+0x48>)
 8003a20:	f009 f90f 	bl	800cc42 <HAL_UART_Transmit>

	if(is_crlf)
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8003a2a:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003a2e:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003a30:	f107 010c 	add.w	r1, r7, #12
 8003a34:	2364      	movs	r3, #100	; 0x64
 8003a36:	2202      	movs	r2, #2
 8003a38:	4803      	ldr	r0, [pc, #12]	; (8003a48 <send_debug_msg+0x48>)
 8003a3a:	f009 f902 	bl	800cc42 <HAL_UART_Transmit>
	}
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20007190 	.word	0x20007190

08003a4c <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003a52:	2000      	movs	r0, #0
 8003a54:	f7fc ff32 	bl	80008bc <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8003a58:	2311      	movs	r3, #17
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003a60:	2211      	movs	r2, #17
 8003a62:	2100      	movs	r1, #0
 8003a64:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003a68:	f7fc ffb3 	bl	80009d2 <ILI9341_Draw_Line>
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <Display_booting_screen>:

void Display_booting_screen()
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f7fc ff1e 	bl	80008bc <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003a80:	2302      	movs	r3, #2
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <Display_booting_screen+0xc4>)
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8e:	2128      	movs	r1, #40	; 0x28
 8003a90:	205f      	movs	r0, #95	; 0x5f
 8003a92:	f7fd f81f 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003a96:	2302      	movs	r3, #2
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <Display_booting_screen+0xc8>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa4:	213c      	movs	r1, #60	; 0x3c
 8003aa6:	2046      	movs	r0, #70	; 0x46
 8003aa8:	f7fd f814 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003aac:	2302      	movs	r3, #2
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <Display_booting_screen+0xcc>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aba:	2150      	movs	r1, #80	; 0x50
 8003abc:	2082      	movs	r0, #130	; 0x82
 8003abe:	f7fd f809 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <Display_booting_screen+0xd0>)
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad0:	2164      	movs	r1, #100	; 0x64
 8003ad2:	2064      	movs	r0, #100	; 0x64
 8003ad4:	f7fc fffe 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003ad8:	2302      	movs	r3, #2
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <Display_booting_screen+0xd4>)
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae6:	2178      	movs	r1, #120	; 0x78
 8003ae8:	205a      	movs	r0, #90	; 0x5a
 8003aea:	f7fc fff3 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003aee:	2302      	movs	r3, #2
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <Display_booting_screen+0xd8>)
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003afc:	218c      	movs	r1, #140	; 0x8c
 8003afe:	2032      	movs	r0, #50	; 0x32
 8003b00:	f7fc ffe8 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003b04:	2302      	movs	r3, #2
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <Display_booting_screen+0xdc>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b12:	21a0      	movs	r1, #160	; 0xa0
 8003b14:	205a      	movs	r0, #90	; 0x5a
 8003b16:	f7fc ffdd 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <Display_booting_screen+0xe0>)
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b28:	21b4      	movs	r1, #180	; 0xb4
 8003b2a:	2078      	movs	r0, #120	; 0x78
 8003b2c:	f7fc ffd2 	bl	8000ad4 <ILI9341_Draw_String>
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	0800e274 	.word	0x0800e274
 8003b3c:	0800e284 	.word	0x0800e284
 8003b40:	0800e29c 	.word	0x0800e29c
 8003b44:	0800e2a4 	.word	0x0800e2a4
 8003b48:	0800e2b4 	.word	0x0800e2b4
 8003b4c:	0800e2c8 	.word	0x0800e2c8
 8003b50:	0800e2e4 	.word	0x0800e2e4
 8003b54:	0800e2f8 	.word	0x0800e2f8

08003b58 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8003b5e:	f7ff ff75 	bl	8003a4c <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2);
 8003b62:	2302      	movs	r3, #2
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <Display_main_screen_background+0x110>)
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b70:	2101      	movs	r1, #1
 8003b72:	2005      	movs	r0, #5
 8003b74:	f7fc ffae 	bl	8000ad4 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003b78:	2328      	movs	r3, #40	; 0x28
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	238c      	movs	r3, #140	; 0x8c
 8003b7e:	2214      	movs	r2, #20
 8003b80:	2105      	movs	r1, #5
 8003b82:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b86:	f7fc ff03 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003b8a:	2341      	movs	r3, #65	; 0x41
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	238c      	movs	r3, #140	; 0x8c
 8003b90:	222d      	movs	r2, #45	; 0x2d
 8003b92:	2105      	movs	r1, #5
 8003b94:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b98:	f7fc fefa 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003b9c:	235a      	movs	r3, #90	; 0x5a
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	238c      	movs	r3, #140	; 0x8c
 8003ba2:	2246      	movs	r2, #70	; 0x46
 8003ba4:	2105      	movs	r1, #5
 8003ba6:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003baa:	f7fc fef1 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003bae:	2373      	movs	r3, #115	; 0x73
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	238c      	movs	r3, #140	; 0x8c
 8003bb4:	225f      	movs	r2, #95	; 0x5f
 8003bb6:	2105      	movs	r1, #5
 8003bb8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003bbc:	f7fc fee8 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003bc0:	238c      	movs	r3, #140	; 0x8c
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	238c      	movs	r3, #140	; 0x8c
 8003bc6:	2278      	movs	r2, #120	; 0x78
 8003bc8:	2105      	movs	r1, #5
 8003bca:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003bce:	f7fc fedf 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003bd2:	23a5      	movs	r3, #165	; 0xa5
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	238c      	movs	r3, #140	; 0x8c
 8003bd8:	2291      	movs	r2, #145	; 0x91
 8003bda:	2105      	movs	r1, #5
 8003bdc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003be0:	f7fc fed6 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003be4:	23be      	movs	r3, #190	; 0xbe
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	238c      	movs	r3, #140	; 0x8c
 8003bea:	22aa      	movs	r2, #170	; 0xaa
 8003bec:	2105      	movs	r1, #5
 8003bee:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003bf2:	f7fc fecd 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003bf6:	23be      	movs	r3, #190	; 0xbe
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	f240 133b 	movw	r3, #315	; 0x13b
 8003bfe:	2214      	movs	r2, #20
 8003c00:	2191      	movs	r1, #145	; 0x91
 8003c02:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003c06:	f7fc fec3 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003c0a:	23eb      	movs	r3, #235	; 0xeb
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	239d      	movs	r3, #157	; 0x9d
 8003c10:	22c3      	movs	r2, #195	; 0xc3
 8003c12:	2105      	movs	r1, #5
 8003c14:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003c18:	f7fc feba 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003c1c:	23eb      	movs	r3, #235	; 0xeb
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f240 133b 	movw	r3, #315	; 0x13b
 8003c24:	22c3      	movs	r2, #195	; 0xc3
 8003c26:	21a3      	movs	r1, #163	; 0xa3
 8003c28:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003c2c:	f7fc feb0 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003c30:	2302      	movs	r3, #2
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <Display_main_screen_background+0x114>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c40:	21cf      	movs	r1, #207	; 0xcf
 8003c42:	2032      	movs	r0, #50	; 0x32
 8003c44:	f7fc ff46 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003c48:	2302      	movs	r3, #2
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <Display_main_screen_background+0x118>)
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c58:	21cf      	movs	r1, #207	; 0xcf
 8003c5a:	20c0      	movs	r0, #192	; 0xc0
 8003c5c:	f7fc ff3a 	bl	8000ad4 <ILI9341_Draw_String>
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	0800e304 	.word	0x0800e304
 8003c6c:	0800e314 	.word	0x0800e314
 8003c70:	0800e320 	.word	0x0800e320

08003c74 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003c74:	b082      	sub	sp, #8
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af02      	add	r7, sp, #8
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
 8003c80:	f107 0118 	add.w	r1, r7, #24
 8003c84:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003c88:	7efb      	ldrb	r3, [r7, #27]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2334      	movs	r3, #52	; 0x34
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	461a      	mov	r2, r3
 8003c98:	2302      	movs	r3, #2
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	9200      	str	r2, [sp, #0]
 8003c9e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	2117      	movs	r1, #23
 8003ca8:	2008      	movs	r0, #8
 8003caa:	f7fc ff13 	bl	8000ad4 <ILI9341_Draw_String>
//
//	//BAr3
//	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);

	//Bar 4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003cae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cb0:	2b63      	cmp	r3, #99	; 0x63
 8003cb2:	d81e      	bhi.n	8003cf2 <Display_main_screen_data+0x7e>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <Display_main_screen_data+0x250>)
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc4:	217b      	movs	r1, #123	; 0x7b
 8003cc6:	2008      	movs	r0, #8
 8003cc8:	f7fc ff04 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003ccc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cce:	220a      	movs	r2, #10
 8003cd0:	497d      	ldr	r1, [pc, #500]	; (8003ec8 <Display_main_screen_data+0x254>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f009 fb42 	bl	800d35c <itoa>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2202      	movs	r2, #2
 8003cdc:	9201      	str	r2, [sp, #4]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce8:	217b      	movs	r1, #123	; 0x7b
 8003cea:	2011      	movs	r0, #17
 8003cec:	f7fc fef2 	bl	8000ad4 <ILI9341_Draw_String>
 8003cf0:	e011      	b.n	8003d16 <Display_main_screen_data+0xa2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	4974      	ldr	r1, [pc, #464]	; (8003ec8 <Display_main_screen_data+0x254>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f009 fb2f 	bl	800d35c <itoa>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2202      	movs	r2, #2
 8003d02:	9201      	str	r2, [sp, #4]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0e:	217b      	movs	r1, #123	; 0x7b
 8003d10:	2008      	movs	r0, #8
 8003d12:	f7fc fedf 	bl	8000ad4 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003d16:	2302      	movs	r3, #2
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ecc <Display_main_screen_data+0x258>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d26:	217b      	movs	r1, #123	; 0x7b
 8003d28:	2024      	movs	r0, #36	; 0x24
 8003d2a:	f7fc fed3 	bl	8000ad4 <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003d2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d30:	220a      	movs	r2, #10
 8003d32:	4965      	ldr	r1, [pc, #404]	; (8003ec8 <Display_main_screen_data+0x254>)
 8003d34:	4618      	mov	r0, r3
 8003d36:	f009 fb11 	bl	800d35c <itoa>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	9201      	str	r2, [sp, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d4a:	217b      	movs	r1, #123	; 0x7b
 8003d4c:	204e      	movs	r0, #78	; 0x4e
 8003d4e:	f7fc fec1 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003d52:	2302      	movs	r3, #2
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	4b5e      	ldr	r3, [pc, #376]	; (8003ed0 <Display_main_screen_data+0x25c>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d62:	217b      	movs	r1, #123	; 0x7b
 8003d64:	207a      	movs	r0, #122	; 0x7a
 8003d66:	f7fc feb5 	bl	8000ad4 <ILI9341_Draw_String>

	//Bar 5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	e022      	b.n	8003db6 <Display_main_screen_data+0x142>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	7f1a      	ldrb	r2, [r3, #28]
 8003d7a:	7efb      	ldrb	r3, [r7, #27]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	2334      	movs	r3, #52	; 0x34
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	440b      	add	r3, r1
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d10f      	bne.n	8003db0 <Display_main_screen_data+0x13c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	015b      	lsls	r3, r3, #5
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	3302      	adds	r3, #2
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	9201      	str	r2, [sp, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da8:	2194      	movs	r1, #148	; 0x94
 8003daa:	2008      	movs	r0, #8
 8003dac:	f7fc fe92 	bl	8000ad4 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	3301      	adds	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	7e7b      	ldrb	r3, [r7, #25]
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3d8      	bcc.n	8003d70 <Display_main_screen_data+0xfc>
		}
	}

	//Bar 6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003dbe:	7efb      	ldrb	r3, [r7, #27]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2334      	movs	r3, #52	; 0x34
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <Display_main_screen_data+0x260>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	220a      	movs	r2, #10
 8003dd8:	493b      	ldr	r1, [pc, #236]	; (8003ec8 <Display_main_screen_data+0x254>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f009 fabe 	bl	800d35c <itoa>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2202      	movs	r2, #2
 8003de4:	9201      	str	r2, [sp, #4]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df0:	21ad      	movs	r1, #173	; 0xad
 8003df2:	2008      	movs	r0, #8
 8003df4:	f7fc fe6e 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003df8:	2302      	movs	r3, #2
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <Display_main_screen_data+0x264>)
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e08:	21ad      	movs	r1, #173	; 0xad
 8003e0a:	201f      	movs	r0, #31
 8003e0c:	f7fc fe62 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003e10:	7efb      	ldrb	r3, [r7, #27]
 8003e12:	461a      	mov	r2, r3
 8003e14:	2334      	movs	r3, #52	; 0x34
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <Display_main_screen_data+0x260>)
 8003e22:	fba3 1302 	umull	r1, r3, r3, r2
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	220a      	movs	r2, #10
 8003e34:	4924      	ldr	r1, [pc, #144]	; (8003ec8 <Display_main_screen_data+0x254>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f009 fa90 	bl	800d35c <itoa>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2202      	movs	r2, #2
 8003e40:	9201      	str	r2, [sp, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4c:	21ad      	movs	r1, #173	; 0xad
 8003e4e:	2026      	movs	r0, #38	; 0x26
 8003e50:	f7fc fe40 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003e54:	2302      	movs	r3, #2
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <Display_main_screen_data+0x268>)
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e64:	21ad      	movs	r1, #173	; 0xad
 8003e66:	2041      	movs	r0, #65	; 0x41
 8003e68:	f7fc fe34 	bl	8000ad4 <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <Display_main_screen_data+0x26c>)
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7c:	21ad      	movs	r1, #173	; 0xad
 8003e7e:	205f      	movs	r0, #95	; 0x5f
 8003e80:	f7fc fe28 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003e84:	7efb      	ldrb	r3, [r7, #27]
 8003e86:	461a      	mov	r2, r3
 8003e88:	2334      	movs	r3, #52	; 0x34
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <Display_main_screen_data+0x270>)
 8003e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	9201      	str	r2, [sp, #4]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eac:	21ad      	movs	r1, #173	; 0xad
 8003eae:	2073      	movs	r0, #115	; 0x73
 8003eb0:	f7fc fe10 	bl	8000ad4 <ILI9341_Draw_String>

	//Station picture

}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ebe:	b002      	add	sp, #8
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	0800e330 	.word	0x0800e330
 8003ec8:	20006d8c 	.word	0x20006d8c
 8003ecc:	0800e334 	.word	0x0800e334
 8003ed0:	0800e33c 	.word	0x0800e33c
 8003ed4:	10624dd3 	.word	0x10624dd3
 8003ed8:	0800e340 	.word	0x0800e340
 8003edc:	0800e344 	.word	0x0800e344
 8003ee0:	0800e348 	.word	0x0800e348
 8003ee4:	200000ac 	.word	0x200000ac

08003ee8 <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003ef0:	4919      	ldr	r1, [pc, #100]	; (8003f58 <Display_main_screen_dls+0x70>)
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc f968 	bl	80001c8 <strcmp>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d027      	beq.n	8003f4e <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003efe:	2302      	movs	r3, #2
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <Display_main_screen_dls+0x74>)
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0e:	2130      	movs	r1, #48	; 0x30
 8003f10:	2008      	movs	r0, #8
 8003f12:	f7fc fddf 	bl	8000ad4 <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003f16:	2302      	movs	r3, #2
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f26:	2130      	movs	r1, #48	; 0x30
 8003f28:	2008      	movs	r0, #8
 8003f2a:	f7fc fdd3 	bl	8000ad4 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e009      	b.n	8003f48 <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	441a      	add	r2, r3
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	7811      	ldrb	r1, [r2, #0]
 8003f3e:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <Display_main_screen_dls+0x70>)
 8003f40:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3301      	adds	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d9f2      	bls.n	8003f34 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20006dcc 	.word	0x20006dcc
 8003f5c:	0800e34c 	.word	0x0800e34c

08003f60 <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003f66:	2302      	movs	r3, #2
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <Display_main_screen_empty+0xb4>)
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f76:	2117      	movs	r1, #23
 8003f78:	2008      	movs	r0, #8
 8003f7a:	f7fc fdab 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003f7e:	2302      	movs	r3, #2
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	4b25      	ldr	r3, [pc, #148]	; (8004018 <Display_main_screen_empty+0xb8>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8e:	2130      	movs	r1, #48	; 0x30
 8003f90:	2008      	movs	r0, #8
 8003f92:	f7fc fd9f 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003f96:	2302      	movs	r3, #2
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <Display_main_screen_empty+0xbc>)
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa6:	2149      	movs	r1, #73	; 0x49
 8003fa8:	2008      	movs	r0, #8
 8003faa:	f7fc fd93 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003fae:	2302      	movs	r3, #2
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <Display_main_screen_empty+0xc0>)
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fbe:	2162      	movs	r1, #98	; 0x62
 8003fc0:	2008      	movs	r0, #8
 8003fc2:	f7fc fd87 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <Display_main_screen_empty+0xc4>)
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd6:	217b      	movs	r1, #123	; 0x7b
 8003fd8:	2008      	movs	r0, #8
 8003fda:	f7fc fd7b 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <Display_main_screen_empty+0xc8>)
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	2194      	movs	r1, #148	; 0x94
 8003ff0:	2008      	movs	r0, #8
 8003ff2:	f7fc fd6f 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <Display_main_screen_empty+0xc8>)
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004006:	21ad      	movs	r1, #173	; 0xad
 8004008:	2008      	movs	r0, #8
 800400a:	f7fc fd63 	bl	8000ad4 <ILI9341_Draw_String>
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	0800e3cc 	.word	0x0800e3cc
 8004018:	0800e3e0 	.word	0x0800e3e0
 800401c:	0800e3f4 	.word	0x0800e3f4
 8004020:	0800e408 	.word	0x0800e408
 8004024:	0800e41c 	.word	0x0800e41c
 8004028:	0800e430 	.word	0x0800e430

0800402c <Display_stations_list_background>:


void Display_stations_list_background()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af02      	add	r7, sp, #8
	//clear screen
	Display_clear_screen();
 8004032:	f7ff fd0b 	bl	8003a4c <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2);
 8004036:	2302      	movs	r3, #2
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <Display_stations_list_background+0x174>)
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004044:	2101      	movs	r1, #1
 8004046:	2005      	movs	r0, #5
 8004048:	f7fc fd44 	bl	8000ad4 <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 800404c:	2332      	movs	r3, #50	; 0x32
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	f240 131d 	movw	r3, #285	; 0x11d
 8004054:	2214      	movs	r2, #20
 8004056:	2105      	movs	r1, #5
 8004058:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800405c:	f7fc fc98 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8004060:	2355      	movs	r3, #85	; 0x55
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	f240 131d 	movw	r3, #285	; 0x11d
 8004068:	2237      	movs	r2, #55	; 0x37
 800406a:	2105      	movs	r1, #5
 800406c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004070:	f7fc fc8e 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8004074:	2378      	movs	r3, #120	; 0x78
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f240 131d 	movw	r3, #285	; 0x11d
 800407c:	225a      	movs	r2, #90	; 0x5a
 800407e:	2105      	movs	r1, #5
 8004080:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004084:	f7fc fc84 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8004088:	239b      	movs	r3, #155	; 0x9b
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f240 131d 	movw	r3, #285	; 0x11d
 8004090:	227d      	movs	r2, #125	; 0x7d
 8004092:	2105      	movs	r1, #5
 8004094:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004098:	f7fc fc7a 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 800409c:	23be      	movs	r3, #190	; 0xbe
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	f240 131d 	movw	r3, #285	; 0x11d
 80040a4:	22a0      	movs	r2, #160	; 0xa0
 80040a6:	2105      	movs	r1, #5
 80040a8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80040ac:	f7fc fc70 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 80040b0:	2366      	movs	r3, #102	; 0x66
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	f240 133b 	movw	r3, #315	; 0x13b
 80040b8:	2214      	movs	r2, #20
 80040ba:	f44f 7191 	mov.w	r1, #290	; 0x122
 80040be:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80040c2:	f7fc fc65 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 80040c6:	2302      	movs	r3, #2
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <Display_stations_list_background+0x178>)
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d6:	2138      	movs	r1, #56	; 0x38
 80040d8:	f240 1027 	movw	r0, #295	; 0x127
 80040dc:	f7fc fcfa 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 80040e0:	2302      	movs	r3, #2
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <Display_stations_list_background+0x17c>)
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f0:	2138      	movs	r1, #56	; 0x38
 80040f2:	f44f 7097 	mov.w	r0, #302	; 0x12e
 80040f6:	f7fc fced 	bl	8000ad4 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 80040fa:	23be      	movs	r3, #190	; 0xbe
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f240 133b 	movw	r3, #315	; 0x13b
 8004102:	226c      	movs	r2, #108	; 0x6c
 8004104:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004108:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800410c:	f7fc fc40 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8004110:	2302      	movs	r3, #2
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <Display_stations_list_background+0x17c>)
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800411c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004120:	2192      	movs	r1, #146	; 0x92
 8004122:	f240 1027 	movw	r0, #295	; 0x127
 8004126:	f7fc fcd5 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 800412a:	2302      	movs	r3, #2
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <Display_stations_list_background+0x178>)
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800413a:	2192      	movs	r1, #146	; 0x92
 800413c:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8004140:	f7fc fcc8 	bl	8000ad4 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004144:	23eb      	movs	r3, #235	; 0xeb
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	239d      	movs	r3, #157	; 0x9d
 800414a:	22c3      	movs	r2, #195	; 0xc3
 800414c:	2105      	movs	r1, #5
 800414e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004152:	f7fc fc1d 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004156:	23eb      	movs	r3, #235	; 0xeb
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	f240 133b 	movw	r3, #315	; 0x13b
 800415e:	22c3      	movs	r2, #195	; 0xc3
 8004160:	21a3      	movs	r1, #163	; 0xa3
 8004162:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004166:	f7fc fc13 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 800416a:	2302      	movs	r3, #2
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <Display_stations_list_background+0x180>)
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800417a:	21cf      	movs	r1, #207	; 0xcf
 800417c:	2025      	movs	r0, #37	; 0x25
 800417e:	f7fc fca9 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8004182:	2302      	movs	r3, #2
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <Display_stations_list_background+0x184>)
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800418e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004192:	21cf      	movs	r1, #207	; 0xcf
 8004194:	20c3      	movs	r0, #195	; 0xc3
 8004196:	f7fc fc9d 	bl	8000ad4 <ILI9341_Draw_String>

}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	0800e444 	.word	0x0800e444
 80041a4:	0800e458 	.word	0x0800e458
 80041a8:	0800e45c 	.word	0x0800e45c
 80041ac:	0800e460 	.word	0x0800e460
 80041b0:	0800e46c 	.word	0x0800e46c

080041b4 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 80041b4:	b084      	sub	sp, #16
 80041b6:	b590      	push	{r4, r7, lr}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af02      	add	r7, sp, #8
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//check if stations list is not empty
	if(_dab_management.total_services)
 80041c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8133 	beq.w	8004436 <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e12a      	b.n	800442c <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 80041d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041da:	4619      	mov	r1, r3
 80041dc:	7bfa      	ldrb	r2, [r7, #15]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	4299      	cmp	r1, r3
 80041e4:	dc02      	bgt.n	80041ec <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	425b      	negs	r3, r3
 80041ea:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	dc30      	bgt.n	8004258 <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00da      	lsls	r2, r3, #3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	331c      	adds	r3, #28
 8004204:	4619      	mov	r1, r3
 8004206:	2302      	movs	r3, #2
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	4bac      	ldr	r3, [pc, #688]	; (80044bc <Display_stations_list_data+0x308>)
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004216:	2008      	movs	r0, #8
 8004218:	f7fc fc5c 	bl	8000ad4 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00da      	lsls	r2, r3, #3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	331c      	adds	r3, #28
 800422a:	461c      	mov	r4, r3
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	3301      	adds	r3, #1
 8004234:	220a      	movs	r2, #10
 8004236:	49a2      	ldr	r1, [pc, #648]	; (80044c0 <Display_stations_list_data+0x30c>)
 8004238:	4618      	mov	r0, r3
 800423a:	f009 f88f 	bl	800d35c <itoa>
 800423e:	4603      	mov	r3, r0
 8004240:	2202      	movs	r2, #2
 8004242:	9201      	str	r2, [sp, #4]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800424a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424e:	4621      	mov	r1, r4
 8004250:	2011      	movs	r0, #17
 8004252:	f7fc fc3f 	bl	8000ad4 <ILI9341_Draw_String>
 8004256:	e01c      	b.n	8004292 <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	00da      	lsls	r2, r3, #3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	331c      	adds	r3, #28
 8004266:	461c      	mov	r4, r3
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3301      	adds	r3, #1
 8004270:	220a      	movs	r2, #10
 8004272:	4993      	ldr	r1, [pc, #588]	; (80044c0 <Display_stations_list_data+0x30c>)
 8004274:	4618      	mov	r0, r3
 8004276:	f009 f871 	bl	800d35c <itoa>
 800427a:	4603      	mov	r3, r0
 800427c:	2202      	movs	r2, #2
 800427e:	9201      	str	r2, [sp, #4]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428a:	4621      	mov	r1, r4
 800428c:	2008      	movs	r0, #8
 800428e:	f7fc fc21 	bl	8000ad4 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	00da      	lsls	r2, r3, #3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	331c      	adds	r3, #28
 80042a0:	4619      	mov	r1, r3
 80042a2:	2302      	movs	r3, #2
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	4b87      	ldr	r3, [pc, #540]	; (80044c4 <Display_stations_list_data+0x310>)
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b2:	2018      	movs	r0, #24
 80042b4:	f7fc fc0e 	bl	8000ad4 <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00da      	lsls	r2, r3, #3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	331c      	adds	r3, #28
 80042c6:	4619      	mov	r1, r3
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	461a      	mov	r2, r3
 80042d0:	2334      	movs	r3, #52	; 0x34
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d8:	4413      	add	r3, r2
 80042da:	461a      	mov	r2, r3
 80042dc:	2302      	movs	r3, #2
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	9200      	str	r2, [sp, #0]
 80042e2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ea:	2022      	movs	r0, #34	; 0x22
 80042ec:	f7fc fbf2 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 80042f0:	7bfa      	ldrb	r2, [r7, #15]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00da      	lsls	r2, r3, #3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	331c      	adds	r3, #28
 80042fe:	4619      	mov	r1, r3
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4413      	add	r3, r2
 8004306:	461a      	mov	r2, r3
 8004308:	2334      	movs	r3, #52	; 0x34
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004310:	4413      	add	r3, r2
 8004312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004316:	461a      	mov	r2, r3
 8004318:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <Display_stations_list_data+0x314>)
 800431a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431e:	2202      	movs	r2, #2
 8004320:	9201      	str	r2, [sp, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800432c:	20ab      	movs	r0, #171	; 0xab
 800432e:	f7fc fbd1 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00da      	lsls	r2, r3, #3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	331c      	adds	r3, #28
 8004340:	461c      	mov	r4, r3
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	461a      	mov	r2, r3
 800434a:	2334      	movs	r3, #52	; 0x34
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004352:	4413      	add	r3, r2
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	4a5d      	ldr	r2, [pc, #372]	; (80044cc <Display_stations_list_data+0x318>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	220a      	movs	r2, #10
 8004360:	4957      	ldr	r1, [pc, #348]	; (80044c0 <Display_stations_list_data+0x30c>)
 8004362:	4618      	mov	r0, r3
 8004364:	f008 fffa 	bl	800d35c <itoa>
 8004368:	4603      	mov	r3, r0
 800436a:	2202      	movs	r2, #2
 800436c:	9201      	str	r2, [sp, #4]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004378:	4621      	mov	r1, r4
 800437a:	20ca      	movs	r0, #202	; 0xca
 800437c:	f7fc fbaa 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00da      	lsls	r2, r3, #3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	331c      	adds	r3, #28
 800438e:	4619      	mov	r1, r3
 8004390:	2302      	movs	r3, #2
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <Display_stations_list_data+0x310>)
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800439c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a0:	20e1      	movs	r0, #225	; 0xe1
 80043a2:	f7fc fb97 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00da      	lsls	r2, r3, #3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	331c      	adds	r3, #28
 80043b4:	461c      	mov	r4, r3
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	2334      	movs	r3, #52	; 0x34
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c6:	4413      	add	r3, r2
 80043c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ca:	4b40      	ldr	r3, [pc, #256]	; (80044cc <Display_stations_list_data+0x318>)
 80043cc:	fba3 1302 	umull	r1, r3, r3, r2
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	220a      	movs	r2, #10
 80043de:	4938      	ldr	r1, [pc, #224]	; (80044c0 <Display_stations_list_data+0x30c>)
 80043e0:	4618      	mov	r0, r3
 80043e2:	f008 ffbb 	bl	800d35c <itoa>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2202      	movs	r2, #2
 80043ea:	9201      	str	r2, [sp, #4]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f6:	4621      	mov	r1, r4
 80043f8:	20e8      	movs	r0, #232	; 0xe8
 80043fa:	f7fc fb6b 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00da      	lsls	r2, r3, #3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	331c      	adds	r3, #28
 800440c:	4619      	mov	r1, r3
 800440e:	2302      	movs	r3, #2
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <Display_stations_list_data+0x31c>)
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800441a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441e:	f240 1003 	movw	r0, #259	; 0x103
 8004422:	f7fc fb57 	bl	8000ad4 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	3301      	adds	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b04      	cmp	r3, #4
 8004430:	f67f aed1 	bls.w	80041d6 <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 8004434:	e03b      	b.n	80044ae <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 8004436:	2302      	movs	r3, #2
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <Display_stations_list_data+0x320>)
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004446:	211c      	movs	r1, #28
 8004448:	2008      	movs	r0, #8
 800444a:	f7fc fb43 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 800444e:	2302      	movs	r3, #2
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <Display_stations_list_data+0x324>)
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800445a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445e:	213f      	movs	r1, #63	; 0x3f
 8004460:	2008      	movs	r0, #8
 8004462:	f7fc fb37 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 8004466:	2302      	movs	r3, #2
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <Display_stations_list_data+0x328>)
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004476:	2162      	movs	r1, #98	; 0x62
 8004478:	2008      	movs	r0, #8
 800447a:	f7fc fb2b 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 800447e:	2302      	movs	r3, #2
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <Display_stations_list_data+0x32c>)
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800448a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800448e:	2185      	movs	r1, #133	; 0x85
 8004490:	2008      	movs	r0, #8
 8004492:	f7fc fb1f 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 8004496:	2302      	movs	r3, #2
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <Display_stations_list_data+0x330>)
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a6:	21a8      	movs	r1, #168	; 0xa8
 80044a8:	2008      	movs	r0, #8
 80044aa:	f7fc fb13 	bl	8000ad4 <ILI9341_Draw_String>
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80044b8:	b004      	add	sp, #16
 80044ba:	4770      	bx	lr
 80044bc:	0800e330 	.word	0x0800e330
 80044c0:	20006d8c 	.word	0x20006d8c
 80044c4:	0800e340 	.word	0x0800e340
 80044c8:	200000ac 	.word	0x200000ac
 80044cc:	10624dd3 	.word	0x10624dd3
 80044d0:	0800e344 	.word	0x0800e344
 80044d4:	0800e478 	.word	0x0800e478
 80044d8:	0800e490 	.word	0x0800e490
 80044dc:	0800e4a8 	.word	0x0800e4a8
 80044e0:	0800e4c0 	.word	0x0800e4c0
 80044e4:	0800e4dc 	.word	0x0800e4dc

080044e8 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 80044ee:	f7ff faad 	bl	8003a4c <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2);
 80044f2:	2302      	movs	r3, #2
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	4b64      	ldr	r3, [pc, #400]	; (8004688 <Display_scanning_screen_background+0x1a0>)
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004500:	2101      	movs	r1, #1
 8004502:	2005      	movs	r0, #5
 8004504:	f7fc fae6 	bl	8000ad4 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004508:	2328      	movs	r3, #40	; 0x28
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	f240 133b 	movw	r3, #315	; 0x13b
 8004510:	2214      	movs	r2, #20
 8004512:	2105      	movs	r1, #5
 8004514:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004518:	f7fc fa3a 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 800451c:	2302      	movs	r3, #2
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	4b5a      	ldr	r3, [pc, #360]	; (800468c <Display_scanning_screen_background+0x1a4>)
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452c:	2117      	movs	r1, #23
 800452e:	2050      	movs	r0, #80	; 0x50
 8004530:	f7fc fad0 	bl	8000ad4 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004534:	2341      	movs	r3, #65	; 0x41
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	f240 133b 	movw	r3, #315	; 0x13b
 800453c:	222d      	movs	r2, #45	; 0x2d
 800453e:	2105      	movs	r1, #5
 8004540:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004544:	f7fc fa24 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004548:	235a      	movs	r3, #90	; 0x5a
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f240 133b 	movw	r3, #315	; 0x13b
 8004550:	2246      	movs	r2, #70	; 0x46
 8004552:	2105      	movs	r1, #5
 8004554:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004558:	f7fc fa1a 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 800455c:	2302      	movs	r3, #2
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <Display_scanning_screen_background+0x1a8>)
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800456c:	2149      	movs	r1, #73	; 0x49
 800456e:	200a      	movs	r0, #10
 8004570:	f7fc fab0 	bl	8000ad4 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004574:	2373      	movs	r3, #115	; 0x73
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f240 133b 	movw	r3, #315	; 0x13b
 800457c:	225f      	movs	r2, #95	; 0x5f
 800457e:	2105      	movs	r1, #5
 8004580:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004584:	f7fc fa04 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8004588:	2302      	movs	r3, #2
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	4b41      	ldr	r3, [pc, #260]	; (8004694 <Display_scanning_screen_background+0x1ac>)
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004598:	2162      	movs	r1, #98	; 0x62
 800459a:	200a      	movs	r0, #10
 800459c:	f7fc fa9a 	bl	8000ad4 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80045a0:	238c      	movs	r3, #140	; 0x8c
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	f240 133b 	movw	r3, #315	; 0x13b
 80045a8:	2278      	movs	r2, #120	; 0x78
 80045aa:	2105      	movs	r1, #5
 80045ac:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045b0:	f7fc f9ee 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 80045b4:	2302      	movs	r3, #2
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	4b37      	ldr	r3, [pc, #220]	; (8004698 <Display_scanning_screen_background+0x1b0>)
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c4:	217b      	movs	r1, #123	; 0x7b
 80045c6:	200a      	movs	r0, #10
 80045c8:	f7fc fa84 	bl	8000ad4 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 80045cc:	23a5      	movs	r3, #165	; 0xa5
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	f240 133b 	movw	r3, #315	; 0x13b
 80045d4:	2291      	movs	r2, #145	; 0x91
 80045d6:	2105      	movs	r1, #5
 80045d8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045dc:	f7fc f9d8 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 80045e0:	2302      	movs	r3, #2
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <Display_scanning_screen_background+0x1b4>)
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f0:	2194      	movs	r1, #148	; 0x94
 80045f2:	200a      	movs	r0, #10
 80045f4:	f7fc fa6e 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 80045f8:	2302      	movs	r3, #2
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <Display_scanning_screen_background+0x1b8>)
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004608:	2194      	movs	r1, #148	; 0x94
 800460a:	2078      	movs	r0, #120	; 0x78
 800460c:	f7fc fa62 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8004610:	2302      	movs	r3, #2
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <Display_scanning_screen_background+0x1bc>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800461c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004620:	2194      	movs	r1, #148	; 0x94
 8004622:	209e      	movs	r0, #158	; 0x9e
 8004624:	f7fc fa56 	bl	8000ad4 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004628:	23be      	movs	r3, #190	; 0xbe
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f240 133b 	movw	r3, #315	; 0x13b
 8004630:	22aa      	movs	r2, #170	; 0xaa
 8004632:	2105      	movs	r1, #5
 8004634:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004638:	f7fc f9aa 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 800463c:	2302      	movs	r3, #2
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <Display_scanning_screen_background+0x1c0>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464c:	21ad      	movs	r1, #173	; 0xad
 800464e:	200a      	movs	r0, #10
 8004650:	f7fc fa40 	bl	8000ad4 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004654:	23eb      	movs	r3, #235	; 0xeb
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	f240 133b 	movw	r3, #315	; 0x13b
 800465c:	22c3      	movs	r2, #195	; 0xc3
 800465e:	2105      	movs	r1, #5
 8004660:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004664:	f7fc f994 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 8004668:	2302      	movs	r3, #2
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <Display_scanning_screen_background+0x1c4>)
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004678:	21cf      	movs	r1, #207	; 0xcf
 800467a:	2082      	movs	r0, #130	; 0x82
 800467c:	f7fc fa2a 	bl	8000ad4 <ILI9341_Draw_String>
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	0800e4f4 	.word	0x0800e4f4
 800468c:	0800e504 	.word	0x0800e504
 8004690:	0800e51c 	.word	0x0800e51c
 8004694:	0800e530 	.word	0x0800e530
 8004698:	0800e540 	.word	0x0800e540
 800469c:	0800e550 	.word	0x0800e550
 80046a0:	0800e340 	.word	0x0800e340
 80046a4:	0800e344 	.word	0x0800e344
 80046a8:	0800e55c 	.word	0x0800e55c
 80046ac:	0800e568 	.word	0x0800e568

080046b0 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 80046b0:	b084      	sub	sp, #16
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	f107 0c08 	add.w	ip, r7, #8
 80046bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 80046c0:	7d3b      	ldrb	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80046d4:	330a      	adds	r3, #10
 80046d6:	461a      	mov	r2, r3
 80046d8:	233c      	movs	r3, #60	; 0x3c
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	2232      	movs	r2, #50	; 0x32
 80046e0:	210a      	movs	r1, #10
 80046e2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80046e6:	f7fc f953 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 80046ea:	7d3b      	ldrb	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80046fe:	330a      	adds	r3, #10
 8004700:	4619      	mov	r1, r3
 8004702:	233c      	movs	r3, #60	; 0x3c
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	f44f 739b 	mov.w	r3, #310	; 0x136
 800470a:	2232      	movs	r2, #50	; 0x32
 800470c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004710:	f7fc f93e 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 8004714:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004718:	220a      	movs	r2, #10
 800471a:	4954      	ldr	r1, [pc, #336]	; (800486c <Display_scanning_screen_data+0x1bc>)
 800471c:	4618      	mov	r0, r3
 800471e:	f008 fe1d 	bl	800d35c <itoa>
 8004722:	4603      	mov	r3, r0
 8004724:	2202      	movs	r2, #2
 8004726:	9201      	str	r2, [sp, #4]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800472e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004732:	2149      	movs	r1, #73	; 0x49
 8004734:	2091      	movs	r0, #145	; 0x91
 8004736:	f7fc f9cd 	bl	8000ad4 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 800473a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800473e:	220a      	movs	r2, #10
 8004740:	494a      	ldr	r1, [pc, #296]	; (800486c <Display_scanning_screen_data+0x1bc>)
 8004742:	4618      	mov	r0, r3
 8004744:	f008 fe0a 	bl	800d35c <itoa>
 8004748:	4603      	mov	r3, r0
 800474a:	2202      	movs	r2, #2
 800474c:	9201      	str	r2, [sp, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004758:	2162      	movs	r1, #98	; 0x62
 800475a:	2087      	movs	r0, #135	; 0x87
 800475c:	f7fc f9ba 	bl	8000ad4 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 8004760:	7d3b      	ldrb	r3, [r7, #20]
 8004762:	3301      	adds	r3, #1
 8004764:	220a      	movs	r2, #10
 8004766:	4941      	ldr	r1, [pc, #260]	; (800486c <Display_scanning_screen_data+0x1bc>)
 8004768:	4618      	mov	r0, r3
 800476a:	f008 fdf7 	bl	800d35c <itoa>
 800476e:	4603      	mov	r3, r0
 8004770:	2202      	movs	r2, #2
 8004772:	9201      	str	r2, [sp, #4]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800477a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800477e:	217b      	movs	r1, #123	; 0x7b
 8004780:	2076      	movs	r0, #118	; 0x76
 8004782:	f7fc f9a7 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 8004786:	2302      	movs	r3, #2
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	4b39      	ldr	r3, [pc, #228]	; (8004870 <Display_scanning_screen_data+0x1c0>)
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004796:	217b      	movs	r1, #123	; 0x7b
 8004798:	2089      	movs	r0, #137	; 0x89
 800479a:	f7fc f99b 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 800479e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80047a2:	220a      	movs	r2, #10
 80047a4:	4931      	ldr	r1, [pc, #196]	; (800486c <Display_scanning_screen_data+0x1bc>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	f008 fdd8 	bl	800d35c <itoa>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2202      	movs	r2, #2
 80047b0:	9201      	str	r2, [sp, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047bc:	217b      	movs	r1, #123	; 0x7b
 80047be:	2093      	movs	r0, #147	; 0x93
 80047c0:	f7fc f988 	bl	8000ad4 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <Display_scanning_screen_data+0x1c4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	220a      	movs	r2, #10
 80047d0:	4926      	ldr	r1, [pc, #152]	; (800486c <Display_scanning_screen_data+0x1bc>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f008 fdc2 	bl	800d35c <itoa>
 80047d8:	4603      	mov	r3, r0
 80047da:	2202      	movs	r2, #2
 80047dc:	9201      	str	r2, [sp, #4]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e8:	2194      	movs	r1, #148	; 0x94
 80047ea:	205f      	movs	r0, #95	; 0x5f
 80047ec:	f7fc f972 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <Display_scanning_screen_data+0x1c4>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	220a      	movs	r2, #10
 8004806:	4919      	ldr	r1, [pc, #100]	; (800486c <Display_scanning_screen_data+0x1bc>)
 8004808:	4618      	mov	r0, r3
 800480a:	f008 fda7 	bl	800d35c <itoa>
 800480e:	4603      	mov	r3, r0
 8004810:	2202      	movs	r2, #2
 8004812:	9201      	str	r2, [sp, #4]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800481a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800481e:	2194      	movs	r1, #148	; 0x94
 8004820:	2081      	movs	r0, #129	; 0x81
 8004822:	f7fc f957 	bl	8000ad4 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 8004826:	2302      	movs	r3, #2
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <Display_scanning_screen_data+0x1c8>)
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004836:	21ad      	movs	r1, #173	; 0xad
 8004838:	2050      	movs	r0, #80	; 0x50
 800483a:	f7fc f94b 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 800483e:	7d3b      	ldrb	r3, [r7, #20]
 8004840:	461a      	mov	r2, r3
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <Display_scanning_screen_data+0x1cc>)
 8004844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004848:	2202      	movs	r2, #2
 800484a:	9201      	str	r2, [sp, #4]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004856:	21ad      	movs	r1, #173	; 0xad
 8004858:	2050      	movs	r0, #80	; 0x50
 800485a:	f7fc f93b 	bl	8000ad4 <ILI9341_Draw_String>
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004866:	b004      	add	sp, #16
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20006d8c 	.word	0x20006d8c
 8004870:	0800e458 	.word	0x0800e458
 8004874:	10624dd3 	.word	0x10624dd3
 8004878:	0800e570 	.word	0x0800e570
 800487c:	200000ac 	.word	0x200000ac

08004880 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004886:	2328      	movs	r3, #40	; 0x28
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	f240 133b 	movw	r3, #315	; 0x13b
 800488e:	2214      	movs	r2, #20
 8004890:	2105      	movs	r1, #5
 8004892:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004896:	f7fc f87b 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 800489a:	2302      	movs	r3, #2
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <Display_scanning_screen_complete+0x64>)
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048aa:	2117      	movs	r1, #23
 80048ac:	2050      	movs	r0, #80	; 0x50
 80048ae:	f7fc f911 	bl	8000ad4 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80048b2:	23eb      	movs	r3, #235	; 0xeb
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	f240 133b 	movw	r3, #315	; 0x13b
 80048ba:	22c3      	movs	r2, #195	; 0xc3
 80048bc:	2105      	movs	r1, #5
 80048be:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80048c2:	f7fc f865 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 80048c6:	2302      	movs	r3, #2
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <Display_scanning_screen_complete+0x68>)
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80048d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048d6:	21cf      	movs	r1, #207	; 0xcf
 80048d8:	2082      	movs	r0, #130	; 0x82
 80048da:	f7fc f8fb 	bl	8000ad4 <ILI9341_Draw_String>
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	0800e578 	.word	0x0800e578
 80048e8:	0800e590 	.word	0x0800e590

080048ec <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af02      	add	r7, sp, #8
	//Clear Screen
	Display_clear_screen();
 80048f2:	f7ff f8ab 	bl	8003a4c <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2);
 80048f6:	2302      	movs	r3, #2
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	4bb4      	ldr	r3, [pc, #720]	; (8004bcc <Display_dab_digrad_status_background+0x2e0>)
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004904:	2101      	movs	r1, #1
 8004906:	2005      	movs	r0, #5
 8004908:	f7fc f8e4 	bl	8000ad4 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 800490c:	2328      	movs	r3, #40	; 0x28
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2369      	movs	r3, #105	; 0x69
 8004912:	2214      	movs	r2, #20
 8004914:	2105      	movs	r1, #5
 8004916:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800491a:	f7fc f839 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 800491e:	2328      	movs	r3, #40	; 0x28
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	23d2      	movs	r3, #210	; 0xd2
 8004924:	2214      	movs	r2, #20
 8004926:	216e      	movs	r1, #110	; 0x6e
 8004928:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800492c:	f7fc f830 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 8004930:	2328      	movs	r3, #40	; 0x28
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	f240 133b 	movw	r3, #315	; 0x13b
 8004938:	2214      	movs	r2, #20
 800493a:	21d7      	movs	r1, #215	; 0xd7
 800493c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004940:	f7fc f826 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004944:	2341      	movs	r3, #65	; 0x41
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	f240 133b 	movw	r3, #315	; 0x13b
 800494c:	222d      	movs	r2, #45	; 0x2d
 800494e:	2105      	movs	r1, #5
 8004950:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004954:	f7fc f81c 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 8004958:	2302      	movs	r3, #2
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	4b9c      	ldr	r3, [pc, #624]	; (8004bd0 <Display_dab_digrad_status_background+0x2e4>)
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004968:	2130      	movs	r1, #48	; 0x30
 800496a:	200a      	movs	r0, #10
 800496c:	f7fc f8b2 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8004970:	2302      	movs	r3, #2
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	4b97      	ldr	r3, [pc, #604]	; (8004bd4 <Display_dab_digrad_status_background+0x2e8>)
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800497c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004980:	2130      	movs	r1, #48	; 0x30
 8004982:	205a      	movs	r0, #90	; 0x5a
 8004984:	f7fc f8a6 	bl	8000ad4 <ILI9341_Draw_String>

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004988:	235a      	movs	r3, #90	; 0x5a
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	f240 133b 	movw	r3, #315	; 0x13b
 8004990:	2246      	movs	r2, #70	; 0x46
 8004992:	2105      	movs	r1, #5
 8004994:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004998:	f7fb fffa 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 800499c:	2302      	movs	r3, #2
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	4b8d      	ldr	r3, [pc, #564]	; (8004bd8 <Display_dab_digrad_status_background+0x2ec>)
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ac:	2149      	movs	r1, #73	; 0x49
 80049ae:	200a      	movs	r0, #10
 80049b0:	f7fc f890 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80049b4:	2302      	movs	r3, #2
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <Display_dab_digrad_status_background+0x2f0>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049c4:	2149      	movs	r1, #73	; 0x49
 80049c6:	2069      	movs	r0, #105	; 0x69
 80049c8:	f7fc f884 	bl	8000ad4 <ILI9341_Draw_String>

	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80049cc:	2373      	movs	r3, #115	; 0x73
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	f240 133b 	movw	r3, #315	; 0x13b
 80049d4:	225f      	movs	r2, #95	; 0x5f
 80049d6:	2105      	movs	r1, #5
 80049d8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049dc:	f7fb ffd8 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80049e0:	2302      	movs	r3, #2
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	4b7e      	ldr	r3, [pc, #504]	; (8004be0 <Display_dab_digrad_status_background+0x2f4>)
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f0:	2162      	movs	r1, #98	; 0x62
 80049f2:	200a      	movs	r0, #10
 80049f4:	f7fc f86e 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80049f8:	2302      	movs	r3, #2
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <Display_dab_digrad_status_background+0x2f0>)
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a08:	2162      	movs	r1, #98	; 0x62
 8004a0a:	2069      	movs	r0, #105	; 0x69
 8004a0c:	f7fc f862 	bl	8000ad4 <ILI9341_Draw_String>

	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004a10:	238c      	movs	r3, #140	; 0x8c
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f240 133b 	movw	r3, #315	; 0x13b
 8004a18:	2278      	movs	r2, #120	; 0x78
 8004a1a:	2105      	movs	r1, #5
 8004a1c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004a20:	f7fb ffb6 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8004a24:	2302      	movs	r3, #2
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	4b6e      	ldr	r3, [pc, #440]	; (8004be4 <Display_dab_digrad_status_background+0x2f8>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a34:	217b      	movs	r1, #123	; 0x7b
 8004a36:	200a      	movs	r0, #10
 8004a38:	f7fc f84c 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	4b69      	ldr	r3, [pc, #420]	; (8004be8 <Display_dab_digrad_status_background+0x2fc>)
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a4c:	217b      	movs	r1, #123	; 0x7b
 8004a4e:	206e      	movs	r0, #110	; 0x6e
 8004a50:	f7fc f840 	bl	8000ad4 <ILI9341_Draw_String>

	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004a54:	23a5      	movs	r3, #165	; 0xa5
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	f240 133b 	movw	r3, #315	; 0x13b
 8004a5c:	2291      	movs	r2, #145	; 0x91
 8004a5e:	2105      	movs	r1, #5
 8004a60:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004a64:	f7fb ff94 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004a68:	2302      	movs	r3, #2
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <Display_dab_digrad_status_background+0x300>)
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a78:	2194      	movs	r1, #148	; 0x94
 8004a7a:	200a      	movs	r0, #10
 8004a7c:	f7fc f82a 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004a80:	2302      	movs	r3, #2
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	4b5a      	ldr	r3, [pc, #360]	; (8004bf0 <Display_dab_digrad_status_background+0x304>)
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a90:	2194      	movs	r1, #148	; 0x94
 8004a92:	2071      	movs	r0, #113	; 0x71
 8004a94:	f7fc f81e 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004a98:	2302      	movs	r3, #2
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	4b55      	ldr	r3, [pc, #340]	; (8004bf4 <Display_dab_digrad_status_background+0x308>)
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa8:	2194      	movs	r1, #148	; 0x94
 8004aaa:	2094      	movs	r0, #148	; 0x94
 8004aac:	f7fc f812 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <Display_dab_digrad_status_background+0x30c>)
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac0:	2194      	movs	r1, #148	; 0x94
 8004ac2:	20b7      	movs	r0, #183	; 0xb7
 8004ac4:	f7fc f806 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004ac8:	2302      	movs	r3, #2
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <Display_dab_digrad_status_background+0x310>)
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ad8:	2194      	movs	r1, #148	; 0x94
 8004ada:	20db      	movs	r0, #219	; 0xdb
 8004adc:	f7fb fffa 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	4b46      	ldr	r3, [pc, #280]	; (8004c00 <Display_dab_digrad_status_background+0x314>)
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af0:	2194      	movs	r1, #148	; 0x94
 8004af2:	f240 101b 	movw	r0, #283	; 0x11b
 8004af6:	f7fb ffed 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004afa:	2302      	movs	r3, #2
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <Display_dab_digrad_status_background+0x318>)
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b0a:	2194      	movs	r1, #148	; 0x94
 8004b0c:	f240 1025 	movw	r0, #293	; 0x125
 8004b10:	f7fb ffe0 	bl	8000ad4 <ILI9341_Draw_String>

	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004b14:	23be      	movs	r3, #190	; 0xbe
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	f240 133b 	movw	r3, #315	; 0x13b
 8004b1c:	22aa      	movs	r2, #170	; 0xaa
 8004b1e:	2105      	movs	r1, #5
 8004b20:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004b24:	f7fb ff34 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004b28:	2302      	movs	r3, #2
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <Display_dab_digrad_status_background+0x31c>)
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b38:	21ad      	movs	r1, #173	; 0xad
 8004b3a:	200a      	movs	r0, #10
 8004b3c:	f7fb ffca 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004b40:	2302      	movs	r3, #2
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <Display_dab_digrad_status_background+0x320>)
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b50:	21ad      	movs	r1, #173	; 0xad
 8004b52:	207d      	movs	r0, #125	; 0x7d
 8004b54:	f7fb ffbe 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004b58:	2302      	movs	r3, #2
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <Display_dab_digrad_status_background+0x324>)
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b68:	21ad      	movs	r1, #173	; 0xad
 8004b6a:	20b4      	movs	r0, #180	; 0xb4
 8004b6c:	f7fb ffb2 	bl	8000ad4 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004b70:	23eb      	movs	r3, #235	; 0xeb
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	239d      	movs	r3, #157	; 0x9d
 8004b76:	22c3      	movs	r2, #195	; 0xc3
 8004b78:	2105      	movs	r1, #5
 8004b7a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b7e:	f7fb ff07 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004b82:	23eb      	movs	r3, #235	; 0xeb
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	f240 133b 	movw	r3, #315	; 0x13b
 8004b8a:	22c3      	movs	r2, #195	; 0xc3
 8004b8c:	21a3      	movs	r1, #163	; 0xa3
 8004b8e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b92:	f7fb fefd 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004b96:	2302      	movs	r3, #2
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <Display_dab_digrad_status_background+0x328>)
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba6:	21cf      	movs	r1, #207	; 0xcf
 8004ba8:	2023      	movs	r0, #35	; 0x23
 8004baa:	f7fb ff93 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004bae:	2302      	movs	r3, #2
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <Display_dab_digrad_status_background+0x32c>)
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bbe:	21cf      	movs	r1, #207	; 0xcf
 8004bc0:	20cd      	movs	r0, #205	; 0xcd
 8004bc2:	f7fb ff87 	bl	8000ad4 <ILI9341_Draw_String>
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	0800e598 	.word	0x0800e598
 8004bd0:	0800e5ac 	.word	0x0800e5ac
 8004bd4:	0800e5b4 	.word	0x0800e5b4
 8004bd8:	0800e5bc 	.word	0x0800e5bc
 8004bdc:	0800e5c0 	.word	0x0800e5c0
 8004be0:	0800e5c4 	.word	0x0800e5c4
 8004be4:	0800e5c8 	.word	0x0800e5c8
 8004be8:	0800e5d0 	.word	0x0800e5d0
 8004bec:	0800e5d4 	.word	0x0800e5d4
 8004bf0:	0800e340 	.word	0x0800e340
 8004bf4:	0800e344 	.word	0x0800e344
 8004bf8:	0800e5e0 	.word	0x0800e5e0
 8004bfc:	0800e5e8 	.word	0x0800e5e8
 8004c00:	0800e458 	.word	0x0800e458
 8004c04:	0800e5f0 	.word	0x0800e5f0
 8004c08:	0800e5f4 	.word	0x0800e5f4
 8004c0c:	0800e600 	.word	0x0800e600
 8004c10:	0800e604 	.word	0x0800e604
 8004c14:	0800e320 	.word	0x0800e320
 8004c18:	0800e314 	.word	0x0800e314

08004c1c <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af02      	add	r7, sp, #8
 8004c24:	f107 0c18 	add.w	ip, r7, #24
 8004c28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c2e:	461a      	mov	r2, r3
 8004c30:	23fa      	movs	r3, #250	; 0xfa
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a30      	ldr	r2, [pc, #192]	; (8004cfc <Display_dab_digrad_status_data+0xe0>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4b2d      	ldr	r3, [pc, #180]	; (8004cfc <Display_dab_digrad_status_data+0xe0>)
 8004c48:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4c:	099b      	lsrs	r3, r3, #6
 8004c4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 8004c5a:	7e7b      	ldrb	r3, [r7, #25]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004c66:	2302      	movs	r3, #2
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <Display_dab_digrad_status_data+0xe4>)
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c72:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c76:	2117      	movs	r1, #23
 8004c78:	2023      	movs	r0, #35	; 0x23
 8004c7a:	f7fb ff2b 	bl	8000ad4 <ILI9341_Draw_String>
 8004c7e:	e00b      	b.n	8004c98 <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004c80:	2302      	movs	r3, #2
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <Display_dab_digrad_status_data+0xe4>)
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c8c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c90:	2117      	movs	r1, #23
 8004c92:	2023      	movs	r0, #35	; 0x23
 8004c94:	f7fb ff1e 	bl	8000ad4 <ILI9341_Draw_String>

	//ACQ
	if(digrad_status.acq)
 8004c98:	7e7b      	ldrb	r3, [r7, #25]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <Display_dab_digrad_status_data+0xe8>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cb0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cb4:	2117      	movs	r1, #23
 8004cb6:	2085      	movs	r0, #133	; 0x85
 8004cb8:	f7fb ff0c 	bl	8000ad4 <ILI9341_Draw_String>
 8004cbc:	e00b      	b.n	8004cd6 <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <Display_dab_digrad_status_data+0xe8>)
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004cce:	2117      	movs	r1, #23
 8004cd0:	2085      	movs	r0, #133	; 0x85
 8004cd2:	f7fb feff 	bl	8000ad4 <ILI9341_Draw_String>

	//FIC_ERROR
	if(digrad_status.fic_err)
 8004cd6:	7e7b      	ldrb	r3, [r7, #25]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d014      	beq.n	8004d0c <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <Display_dab_digrad_status_data+0xec>)
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004cf2:	2117      	movs	r1, #23
 8004cf4:	20e4      	movs	r0, #228	; 0xe4
 8004cf6:	f7fb feed 	bl	8000ad4 <ILI9341_Draw_String>
 8004cfa:	e013      	b.n	8004d24 <Display_dab_digrad_status_data+0x108>
 8004cfc:	10624dd3 	.word	0x10624dd3
 8004d00:	0800e608 	.word	0x0800e608
 8004d04:	0800e610 	.word	0x0800e610
 8004d08:	0800e618 	.word	0x0800e618
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	4bb6      	ldr	r3, [pc, #728]	; (8004fec <Display_dab_digrad_status_data+0x3d0>)
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d18:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004d1c:	2117      	movs	r1, #23
 8004d1e:	20e4      	movs	r0, #228	; 0xe4
 8004d20:	f7fb fed8 	bl	8000ad4 <ILI9341_Draw_String>

	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 8004d24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d28:	2b0d      	cmp	r3, #13
 8004d2a:	dc02      	bgt.n	8004d32 <Display_dab_digrad_status_data+0x116>
 8004d2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d30:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004d32:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d36:	2b1a      	cmp	r3, #26
 8004d38:	dc06      	bgt.n	8004d48 <Display_dab_digrad_status_data+0x12c>
 8004d3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d3e:	2b0d      	cmp	r3, #13
 8004d40:	dd02      	ble.n	8004d48 <Display_dab_digrad_status_data+0x12c>
 8004d42:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d46:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004d48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d4c:	2b27      	cmp	r3, #39	; 0x27
 8004d4e:	dc06      	bgt.n	8004d5e <Display_dab_digrad_status_data+0x142>
 8004d50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d54:	2b1a      	cmp	r3, #26
 8004d56:	dd02      	ble.n	8004d5e <Display_dab_digrad_status_data+0x142>
 8004d58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d5c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004d5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d62:	2b34      	cmp	r3, #52	; 0x34
 8004d64:	dc06      	bgt.n	8004d74 <Display_dab_digrad_status_data+0x158>
 8004d66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d6a:	2b27      	cmp	r3, #39	; 0x27
 8004d6c:	dd02      	ble.n	8004d74 <Display_dab_digrad_status_data+0x158>
 8004d6e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d72:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 8004d74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d78:	2b34      	cmp	r3, #52	; 0x34
 8004d7a:	dd02      	ble.n	8004d82 <Display_dab_digrad_status_data+0x166>
 8004d7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d80:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004d82:	2302      	movs	r3, #2
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	4b9a      	ldr	r3, [pc, #616]	; (8004ff0 <Display_dab_digrad_status_data+0x3d4>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d92:	2130      	movs	r1, #48	; 0x30
 8004d94:	2032      	movs	r0, #50	; 0x32
 8004d96:	f7fb fe9d 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004d9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d9e:	220a      	movs	r2, #10
 8004da0:	4994      	ldr	r1, [pc, #592]	; (8004ff4 <Display_dab_digrad_status_data+0x3d8>)
 8004da2:	4618      	mov	r0, r3
 8004da4:	f008 fada 	bl	800d35c <itoa>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2202      	movs	r2, #2
 8004dac:	9201      	str	r2, [sp, #4]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db8:	2130      	movs	r1, #48	; 0x30
 8004dba:	2032      	movs	r0, #50	; 0x32
 8004dbc:	f7fb fe8a 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004dc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	23b4      	movs	r3, #180	; 0xb4
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da00      	bge.n	8004dd2 <Display_dab_digrad_status_data+0x1b6>
 8004dd0:	333f      	adds	r3, #63	; 0x3f
 8004dd2:	119b      	asrs	r3, r3, #6
 8004dd4:	3382      	adds	r3, #130	; 0x82
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	233c      	movs	r3, #60	; 0x3c
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	2232      	movs	r2, #50	; 0x32
 8004de0:	2182      	movs	r1, #130	; 0x82
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7fb fdd4 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004de8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dec:	461a      	mov	r2, r3
 8004dee:	23b4      	movs	r3, #180	; 0xb4
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da00      	bge.n	8004dfa <Display_dab_digrad_status_data+0x1de>
 8004df8:	333f      	adds	r3, #63	; 0x3f
 8004dfa:	119b      	asrs	r3, r3, #6
 8004dfc:	3382      	adds	r3, #130	; 0x82
 8004dfe:	4619      	mov	r1, r3
 8004e00:	233c      	movs	r3, #60	; 0x3c
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004e08:	2232      	movs	r2, #50	; 0x32
 8004e0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e0e:	f7fb fdbf 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 8004e12:	7efb      	ldrb	r3, [r7, #27]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d802      	bhi.n	8004e1e <Display_dab_digrad_status_data+0x202>
 8004e18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e1c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004e1e:	7efb      	ldrb	r3, [r7, #27]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d805      	bhi.n	8004e30 <Display_dab_digrad_status_data+0x214>
 8004e24:	7efb      	ldrb	r3, [r7, #27]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d902      	bls.n	8004e30 <Display_dab_digrad_status_data+0x214>
 8004e2a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e2e:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004e30:	7efb      	ldrb	r3, [r7, #27]
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d805      	bhi.n	8004e42 <Display_dab_digrad_status_data+0x226>
 8004e36:	7efb      	ldrb	r3, [r7, #27]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d902      	bls.n	8004e42 <Display_dab_digrad_status_data+0x226>
 8004e3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e40:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004e42:	7efb      	ldrb	r3, [r7, #27]
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d805      	bhi.n	8004e54 <Display_dab_digrad_status_data+0x238>
 8004e48:	7efb      	ldrb	r3, [r7, #27]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d902      	bls.n	8004e54 <Display_dab_digrad_status_data+0x238>
 8004e4e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e52:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d902      	bls.n	8004e60 <Display_dab_digrad_status_data+0x244>
 8004e5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e5e:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004e60:	2302      	movs	r3, #2
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <Display_dab_digrad_status_data+0x3d4>)
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e70:	2149      	movs	r1, #73	; 0x49
 8004e72:	2032      	movs	r0, #50	; 0x32
 8004e74:	f7fb fe2e 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004e78:	7efb      	ldrb	r3, [r7, #27]
 8004e7a:	220a      	movs	r2, #10
 8004e7c:	495d      	ldr	r1, [pc, #372]	; (8004ff4 <Display_dab_digrad_status_data+0x3d8>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f008 fa6c 	bl	800d35c <itoa>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2202      	movs	r2, #2
 8004e88:	9201      	str	r2, [sp, #4]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e94:	2149      	movs	r1, #73	; 0x49
 8004e96:	2032      	movs	r0, #50	; 0x32
 8004e98:	f7fb fe1c 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004e9c:	7efb      	ldrb	r3, [r7, #27]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3382      	adds	r3, #130	; 0x82
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2355      	movs	r3, #85	; 0x55
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	224b      	movs	r2, #75	; 0x4b
 8004eb2:	2182      	movs	r1, #130	; 0x82
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7fb fd6b 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004eba:	7efb      	ldrb	r3, [r7, #27]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3382      	adds	r3, #130	; 0x82
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	2355      	movs	r3, #85	; 0x55
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004ed0:	224b      	movs	r2, #75	; 0x4b
 8004ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004ed6:	f7fb fd5b 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 8004eda:	7f7b      	ldrb	r3, [r7, #29]
 8004edc:	2b0b      	cmp	r3, #11
 8004ede:	d802      	bhi.n	8004ee6 <Display_dab_digrad_status_data+0x2ca>
 8004ee0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ee4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004ee6:	7f7b      	ldrb	r3, [r7, #29]
 8004ee8:	2b16      	cmp	r3, #22
 8004eea:	d805      	bhi.n	8004ef8 <Display_dab_digrad_status_data+0x2dc>
 8004eec:	7f7b      	ldrb	r3, [r7, #29]
 8004eee:	2b0b      	cmp	r3, #11
 8004ef0:	d902      	bls.n	8004ef8 <Display_dab_digrad_status_data+0x2dc>
 8004ef2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ef6:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004ef8:	7f7b      	ldrb	r3, [r7, #29]
 8004efa:	2b21      	cmp	r3, #33	; 0x21
 8004efc:	d805      	bhi.n	8004f0a <Display_dab_digrad_status_data+0x2ee>
 8004efe:	7f7b      	ldrb	r3, [r7, #29]
 8004f00:	2b16      	cmp	r3, #22
 8004f02:	d902      	bls.n	8004f0a <Display_dab_digrad_status_data+0x2ee>
 8004f04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f08:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004f0a:	7f7b      	ldrb	r3, [r7, #29]
 8004f0c:	2b2c      	cmp	r3, #44	; 0x2c
 8004f0e:	d805      	bhi.n	8004f1c <Display_dab_digrad_status_data+0x300>
 8004f10:	7f7b      	ldrb	r3, [r7, #29]
 8004f12:	2b21      	cmp	r3, #33	; 0x21
 8004f14:	d902      	bls.n	8004f1c <Display_dab_digrad_status_data+0x300>
 8004f16:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f1a:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 8004f1c:	7f7b      	ldrb	r3, [r7, #29]
 8004f1e:	2b2c      	cmp	r3, #44	; 0x2c
 8004f20:	d902      	bls.n	8004f28 <Display_dab_digrad_status_data+0x30c>
 8004f22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004f26:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004f28:	2302      	movs	r3, #2
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <Display_dab_digrad_status_data+0x3d4>)
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f38:	2162      	movs	r1, #98	; 0x62
 8004f3a:	2032      	movs	r0, #50	; 0x32
 8004f3c:	f7fb fdca 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004f40:	7f7b      	ldrb	r3, [r7, #29]
 8004f42:	220a      	movs	r2, #10
 8004f44:	492b      	ldr	r1, [pc, #172]	; (8004ff4 <Display_dab_digrad_status_data+0x3d8>)
 8004f46:	4618      	mov	r0, r3
 8004f48:	f008 fa08 	bl	800d35c <itoa>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2202      	movs	r2, #2
 8004f50:	9201      	str	r2, [sp, #4]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f5c:	2162      	movs	r1, #98	; 0x62
 8004f5e:	2032      	movs	r0, #50	; 0x32
 8004f60:	f7fb fdb8 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004f64:	7f7b      	ldrb	r3, [r7, #29]
 8004f66:	461a      	mov	r2, r3
 8004f68:	23b4      	movs	r3, #180	; 0xb4
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <Display_dab_digrad_status_data+0x3dc>)
 8004f70:	fb82 1203 	smull	r1, r2, r2, r3
 8004f74:	1112      	asrs	r2, r2, #4
 8004f76:	17db      	asrs	r3, r3, #31
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	3382      	adds	r3, #130	; 0x82
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	236e      	movs	r3, #110	; 0x6e
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	2264      	movs	r2, #100	; 0x64
 8004f86:	2182      	movs	r1, #130	; 0x82
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7fb fd01 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004f8e:	7f7b      	ldrb	r3, [r7, #29]
 8004f90:	461a      	mov	r2, r3
 8004f92:	23b4      	movs	r3, #180	; 0xb4
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <Display_dab_digrad_status_data+0x3dc>)
 8004f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8004f9e:	1112      	asrs	r2, r2, #4
 8004fa0:	17db      	asrs	r3, r3, #31
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	3382      	adds	r3, #130	; 0x82
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	236e      	movs	r3, #110	; 0x6e
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004fb0:	2264      	movs	r2, #100	; 0x64
 8004fb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004fb6:	f7fb fceb 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 8004fba:	7f3b      	ldrb	r3, [r7, #28]
 8004fbc:	2b14      	cmp	r3, #20
 8004fbe:	d802      	bhi.n	8004fc6 <Display_dab_digrad_status_data+0x3aa>
 8004fc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fc4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004fc6:	7f3b      	ldrb	r3, [r7, #28]
 8004fc8:	2b28      	cmp	r3, #40	; 0x28
 8004fca:	d805      	bhi.n	8004fd8 <Display_dab_digrad_status_data+0x3bc>
 8004fcc:	7f3b      	ldrb	r3, [r7, #28]
 8004fce:	2b14      	cmp	r3, #20
 8004fd0:	d902      	bls.n	8004fd8 <Display_dab_digrad_status_data+0x3bc>
 8004fd2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004fd6:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004fd8:	7f3b      	ldrb	r3, [r7, #28]
 8004fda:	2b3c      	cmp	r3, #60	; 0x3c
 8004fdc:	d80e      	bhi.n	8004ffc <Display_dab_digrad_status_data+0x3e0>
 8004fde:	7f3b      	ldrb	r3, [r7, #28]
 8004fe0:	2b28      	cmp	r3, #40	; 0x28
 8004fe2:	d90b      	bls.n	8004ffc <Display_dab_digrad_status_data+0x3e0>
 8004fe4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e007      	b.n	8004ffc <Display_dab_digrad_status_data+0x3e0>
 8004fec:	0800e618 	.word	0x0800e618
 8004ff0:	0800e624 	.word	0x0800e624
 8004ff4:	20006d8c 	.word	0x20006d8c
 8004ff8:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8004ffc:	7f3b      	ldrb	r3, [r7, #28]
 8004ffe:	2b50      	cmp	r3, #80	; 0x50
 8005000:	d805      	bhi.n	800500e <Display_dab_digrad_status_data+0x3f2>
 8005002:	7f3b      	ldrb	r3, [r7, #28]
 8005004:	2b3c      	cmp	r3, #60	; 0x3c
 8005006:	d902      	bls.n	800500e <Display_dab_digrad_status_data+0x3f2>
 8005008:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800500c:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 800500e:	7f3b      	ldrb	r3, [r7, #28]
 8005010:	2b50      	cmp	r3, #80	; 0x50
 8005012:	d902      	bls.n	800501a <Display_dab_digrad_status_data+0x3fe>
 8005014:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005018:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 800501a:	2302      	movs	r3, #2
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	4ba9      	ldr	r3, [pc, #676]	; (80052c4 <Display_dab_digrad_status_data+0x6a8>)
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800502a:	217b      	movs	r1, #123	; 0x7b
 800502c:	204b      	movs	r0, #75	; 0x4b
 800502e:	f7fb fd51 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8005032:	7f3b      	ldrb	r3, [r7, #28]
 8005034:	220a      	movs	r2, #10
 8005036:	49a4      	ldr	r1, [pc, #656]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 8005038:	4618      	mov	r0, r3
 800503a:	f008 f98f 	bl	800d35c <itoa>
 800503e:	4603      	mov	r3, r0
 8005040:	2202      	movs	r2, #2
 8005042:	9201      	str	r2, [sp, #4]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800504a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800504e:	217b      	movs	r1, #123	; 0x7b
 8005050:	204b      	movs	r0, #75	; 0x4b
 8005052:	f7fb fd3f 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8005056:	7f3b      	ldrb	r3, [r7, #28]
 8005058:	461a      	mov	r2, r3
 800505a:	23b4      	movs	r3, #180	; 0xb4
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	4a9a      	ldr	r2, [pc, #616]	; (80052cc <Display_dab_digrad_status_data+0x6b0>)
 8005062:	fb82 1203 	smull	r1, r2, r2, r3
 8005066:	1152      	asrs	r2, r2, #5
 8005068:	17db      	asrs	r3, r3, #31
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	3382      	adds	r3, #130	; 0x82
 800506e:	461a      	mov	r2, r3
 8005070:	2387      	movs	r3, #135	; 0x87
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4613      	mov	r3, r2
 8005076:	227d      	movs	r2, #125	; 0x7d
 8005078:	2182      	movs	r1, #130	; 0x82
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fb fc88 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8005080:	7f3b      	ldrb	r3, [r7, #28]
 8005082:	461a      	mov	r2, r3
 8005084:	23b4      	movs	r3, #180	; 0xb4
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	4a90      	ldr	r2, [pc, #576]	; (80052cc <Display_dab_digrad_status_data+0x6b0>)
 800508c:	fb82 1203 	smull	r1, r2, r2, r3
 8005090:	1152      	asrs	r2, r2, #5
 8005092:	17db      	asrs	r3, r3, #31
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	3382      	adds	r3, #130	; 0x82
 8005098:	4619      	mov	r1, r3
 800509a:	2387      	movs	r3, #135	; 0x87
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	f44f 739b 	mov.w	r3, #310	; 0x136
 80050a2:	227d      	movs	r2, #125	; 0x7d
 80050a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80050a8:	f7fb fc72 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	4a88      	ldr	r2, [pc, #544]	; (80052d0 <Display_dab_digrad_status_data+0x6b4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	220a      	movs	r2, #10
 80050b8:	4983      	ldr	r1, [pc, #524]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 80050ba:	4618      	mov	r0, r3
 80050bc:	f008 f94e 	bl	800d35c <itoa>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2202      	movs	r2, #2
 80050c4:	9201      	str	r2, [sp, #4]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d0:	2194      	movs	r1, #148	; 0x94
 80050d2:	205b      	movs	r0, #91	; 0x5b
 80050d4:	f7fb fcfe 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	4b7d      	ldr	r3, [pc, #500]	; (80052d0 <Display_dab_digrad_status_data+0x6b4>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	099b      	lsrs	r3, r3, #6
 80050e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	220a      	movs	r2, #10
 80050ee:	4976      	ldr	r1, [pc, #472]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 80050f0:	4618      	mov	r0, r3
 80050f2:	f008 f933 	bl	800d35c <itoa>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2202      	movs	r2, #2
 80050fa:	9201      	str	r2, [sp, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005106:	2194      	movs	r1, #148	; 0x94
 8005108:	2078      	movs	r0, #120	; 0x78
 800510a:	f7fb fce3 	bl	8000ad4 <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 800510e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005112:	2b09      	cmp	r3, #9
 8005114:	d821      	bhi.n	800515a <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 8005116:	2302      	movs	r3, #2
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <Display_dab_digrad_status_data+0x6b8>)
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005126:	2194      	movs	r1, #148	; 0x94
 8005128:	f44f 7084 	mov.w	r0, #264	; 0x108
 800512c:	f7fb fcd2 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005134:	220a      	movs	r2, #10
 8005136:	4964      	ldr	r1, [pc, #400]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 8005138:	4618      	mov	r0, r3
 800513a:	f008 f90f 	bl	800d35c <itoa>
 800513e:	4603      	mov	r3, r0
 8005140:	2202      	movs	r2, #2
 8005142:	9201      	str	r2, [sp, #4]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800514a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800514e:	2194      	movs	r1, #148	; 0x94
 8005150:	f240 1011 	movw	r0, #273	; 0x111
 8005154:	f7fb fcbe 	bl	8000ad4 <ILI9341_Draw_String>
 8005158:	e013      	b.n	8005182 <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 800515a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800515e:	220a      	movs	r2, #10
 8005160:	4959      	ldr	r1, [pc, #356]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 8005162:	4618      	mov	r0, r3
 8005164:	f008 f8fa 	bl	800d35c <itoa>
 8005168:	4603      	mov	r3, r0
 800516a:	2202      	movs	r2, #2
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005178:	2194      	movs	r1, #148	; 0x94
 800517a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800517e:	f7fb fca9 	bl	8000ad4 <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b09      	cmp	r3, #9
 8005186:	d81d      	bhi.n	80051c4 <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8005188:	2302      	movs	r3, #2
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <Display_dab_digrad_status_data+0x6bc>)
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005198:	21ad      	movs	r1, #173	; 0xad
 800519a:	204f      	movs	r0, #79	; 0x4f
 800519c:	f7fb fc9a 	bl	8000ad4 <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	220a      	movs	r2, #10
 80051a4:	4948      	ldr	r1, [pc, #288]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 80051a6:	4618      	mov	r0, r3
 80051a8:	f008 f8d8 	bl	800d35c <itoa>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2202      	movs	r2, #2
 80051b0:	9201      	str	r2, [sp, #4]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051bc:	21ad      	movs	r1, #173	; 0xad
 80051be:	2057      	movs	r0, #87	; 0x57
 80051c0:	f7fb fc88 	bl	8000ad4 <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b09      	cmp	r3, #9
 80051c8:	d911      	bls.n	80051ee <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	220a      	movs	r2, #10
 80051ce:	493e      	ldr	r1, [pc, #248]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 80051d0:	4618      	mov	r0, r3
 80051d2:	f008 f8c3 	bl	800d35c <itoa>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2202      	movs	r2, #2
 80051da:	9201      	str	r2, [sp, #4]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e6:	21ad      	movs	r1, #173	; 0xad
 80051e8:	204f      	movs	r0, #79	; 0x4f
 80051ea:	f7fb fc73 	bl	8000ad4 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 80051ee:	2302      	movs	r3, #2
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	4b3a      	ldr	r3, [pc, #232]	; (80052dc <Display_dab_digrad_status_data+0x6c0>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051fe:	21ad      	movs	r1, #173	; 0xad
 8005200:	205f      	movs	r0, #95	; 0x5f
 8005202:	f7fb fc67 	bl	8000ad4 <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 8005206:	88bb      	ldrh	r3, [r7, #4]
 8005208:	f240 22ee 	movw	r2, #750	; 0x2ee
 800520c:	4293      	cmp	r3, r2
 800520e:	d023      	beq.n	8005258 <Display_dab_digrad_status_data+0x63c>
 8005210:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005214:	4293      	cmp	r3, r2
 8005216:	dc2c      	bgt.n	8005272 <Display_dab_digrad_status_data+0x656>
 8005218:	2bfa      	cmp	r3, #250	; 0xfa
 800521a:	d003      	beq.n	8005224 <Display_dab_digrad_status_data+0x608>
 800521c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005220:	d00d      	beq.n	800523e <Display_dab_digrad_status_data+0x622>
 8005222:	e026      	b.n	8005272 <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8005224:	2302      	movs	r3, #2
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <Display_dab_digrad_status_data+0x6c4>)
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005234:	21ad      	movs	r1, #173	; 0xad
 8005236:	2067      	movs	r0, #103	; 0x67
 8005238:	f7fb fc4c 	bl	8000ad4 <ILI9341_Draw_String>
		break;
 800523c:	e026      	b.n	800528c <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 800523e:	2302      	movs	r3, #2
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <Display_dab_digrad_status_data+0x6c8>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	21ad      	movs	r1, #173	; 0xad
 8005250:	2067      	movs	r0, #103	; 0x67
 8005252:	f7fb fc3f 	bl	8000ad4 <ILI9341_Draw_String>
		break;
 8005256:	e019      	b.n	800528c <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8005258:	2302      	movs	r3, #2
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <Display_dab_digrad_status_data+0x6cc>)
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005268:	21ad      	movs	r1, #173	; 0xad
 800526a:	2067      	movs	r0, #103	; 0x67
 800526c:	f7fb fc32 	bl	8000ad4 <ILI9341_Draw_String>
		break;
 8005270:	e00c      	b.n	800528c <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8005272:	2302      	movs	r3, #2
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <Display_dab_digrad_status_data+0x6d0>)
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800527e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005282:	21ad      	movs	r1, #173	; 0xad
 8005284:	2067      	movs	r0, #103	; 0x67
 8005286:	f7fb fc25 	bl	8000ad4 <ILI9341_Draw_String>
		break;
 800528a:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 800528c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	220a      	movs	r2, #10
 8005296:	490c      	ldr	r1, [pc, #48]	; (80052c8 <Display_dab_digrad_status_data+0x6ac>)
 8005298:	4618      	mov	r0, r3
 800529a:	f008 f85f 	bl	800d35c <itoa>
 800529e:	4603      	mov	r3, r0
 80052a0:	2202      	movs	r2, #2
 80052a2:	9201      	str	r2, [sp, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80052aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ae:	21ad      	movs	r1, #173	; 0xad
 80052b0:	20d7      	movs	r0, #215	; 0xd7
 80052b2:	f7fb fc0f 	bl	8000ad4 <ILI9341_Draw_String>
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c0:	b004      	add	sp, #16
 80052c2:	4770      	bx	lr
 80052c4:	0800e624 	.word	0x0800e624
 80052c8:	20006d8c 	.word	0x20006d8c
 80052cc:	51eb851f 	.word	0x51eb851f
 80052d0:	10624dd3 	.word	0x10624dd3
 80052d4:	0800e628 	.word	0x0800e628
 80052d8:	0800e330 	.word	0x0800e330
 80052dc:	0800e340 	.word	0x0800e340
 80052e0:	0800e62c 	.word	0x0800e62c
 80052e4:	0800e630 	.word	0x0800e630
 80052e8:	0800e634 	.word	0x0800e634
 80052ec:	0800e638 	.word	0x0800e638

080052f0 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 80052f6:	f7fe fba9 	bl	8003a4c <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2);
 80052fa:	2302      	movs	r3, #2
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	4b6d      	ldr	r3, [pc, #436]	; (80054b4 <Display_settings_screen_background+0x1c4>)
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005308:	2101      	movs	r1, #1
 800530a:	2005      	movs	r0, #5
 800530c:	f7fb fbe2 	bl	8000ad4 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8005310:	2337      	movs	r3, #55	; 0x37
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	f240 133b 	movw	r3, #315	; 0x13b
 8005318:	2214      	movs	r2, #20
 800531a:	2105      	movs	r1, #5
 800531c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8005320:	f7fb fb36 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8005324:	2302      	movs	r3, #2
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	4b63      	ldr	r3, [pc, #396]	; (80054b8 <Display_settings_screen_background+0x1c8>)
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005334:	2116      	movs	r1, #22
 8005336:	2037      	movs	r0, #55	; 0x37
 8005338:	f7fb fbcc 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 800533c:	2302      	movs	r3, #2
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	4b5e      	ldr	r3, [pc, #376]	; (80054bc <Display_settings_screen_background+0x1cc>)
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800534c:	2116      	movs	r1, #22
 800534e:	20ce      	movs	r0, #206	; 0xce
 8005350:	f7fb fbc0 	bl	8000ad4 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8005354:	2364      	movs	r3, #100	; 0x64
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	239d      	movs	r3, #157	; 0x9d
 800535a:	223c      	movs	r2, #60	; 0x3c
 800535c:	2105      	movs	r1, #5
 800535e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005362:	f7fb fb15 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 8005366:	2364      	movs	r3, #100	; 0x64
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	f240 133b 	movw	r3, #315	; 0x13b
 800536e:	223c      	movs	r2, #60	; 0x3c
 8005370:	21a3      	movs	r1, #163	; 0xa3
 8005372:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005376:	f7fb fb0b 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 800537a:	2302      	movs	r3, #2
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	4b50      	ldr	r3, [pc, #320]	; (80054c0 <Display_settings_screen_background+0x1d0>)
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800538a:	2148      	movs	r1, #72	; 0x48
 800538c:	2036      	movs	r0, #54	; 0x36
 800538e:	f7fb fba1 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8005392:	2302      	movs	r3, #2
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <Display_settings_screen_background+0x1d4>)
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800539e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a2:	2148      	movs	r1, #72	; 0x48
 80053a4:	20d3      	movs	r0, #211	; 0xd3
 80053a6:	f7fb fb95 	bl	8000ad4 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 80053aa:	2391      	movs	r3, #145	; 0x91
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	239d      	movs	r3, #157	; 0x9d
 80053b0:	2269      	movs	r2, #105	; 0x69
 80053b2:	2105      	movs	r1, #5
 80053b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053b8:	f7fb faea 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 80053bc:	2391      	movs	r3, #145	; 0x91
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	f240 133b 	movw	r3, #315	; 0x13b
 80053c4:	2269      	movs	r2, #105	; 0x69
 80053c6:	21a3      	movs	r1, #163	; 0xa3
 80053c8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053cc:	f7fb fae0 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 80053d0:	2302      	movs	r3, #2
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	4b3c      	ldr	r3, [pc, #240]	; (80054c8 <Display_settings_screen_background+0x1d8>)
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053e0:	2175      	movs	r1, #117	; 0x75
 80053e2:	2023      	movs	r0, #35	; 0x23
 80053e4:	f7fb fb76 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 80053e8:	2302      	movs	r3, #2
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	4b37      	ldr	r3, [pc, #220]	; (80054cc <Display_settings_screen_background+0x1dc>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f8:	2175      	movs	r1, #117	; 0x75
 80053fa:	20c1      	movs	r0, #193	; 0xc1
 80053fc:	f7fb fb6a 	bl	8000ad4 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8005400:	23be      	movs	r3, #190	; 0xbe
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	239d      	movs	r3, #157	; 0x9d
 8005406:	2296      	movs	r2, #150	; 0x96
 8005408:	2105      	movs	r1, #5
 800540a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800540e:	f7fb fabf 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 8005412:	23be      	movs	r3, #190	; 0xbe
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f240 133b 	movw	r3, #315	; 0x13b
 800541a:	2296      	movs	r2, #150	; 0x96
 800541c:	21a3      	movs	r1, #163	; 0xa3
 800541e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005422:	f7fb fab5 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 8005426:	2302      	movs	r3, #2
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <Display_settings_screen_background+0x1e0>)
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005436:	21a2      	movs	r1, #162	; 0xa2
 8005438:	2020      	movs	r0, #32
 800543a:	f7fb fb4b 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 800543e:	2302      	movs	r3, #2
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <Display_settings_screen_background+0x1e4>)
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800544a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800544e:	21a2      	movs	r1, #162	; 0xa2
 8005450:	20a8      	movs	r0, #168	; 0xa8
 8005452:	f7fb fb3f 	bl	8000ad4 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8005456:	23eb      	movs	r3, #235	; 0xeb
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	239d      	movs	r3, #157	; 0x9d
 800545c:	22c3      	movs	r2, #195	; 0xc3
 800545e:	2105      	movs	r1, #5
 8005460:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005464:	f7fb fa94 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8005468:	23eb      	movs	r3, #235	; 0xeb
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f240 133b 	movw	r3, #315	; 0x13b
 8005470:	22c3      	movs	r2, #195	; 0xc3
 8005472:	21a3      	movs	r1, #163	; 0xa3
 8005474:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005478:	f7fb fa8a 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 800547c:	2302      	movs	r3, #2
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <Display_settings_screen_background+0x1e8>)
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800548c:	21cf      	movs	r1, #207	; 0xcf
 800548e:	2025      	movs	r0, #37	; 0x25
 8005490:	f7fb fb20 	bl	8000ad4 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8005494:	2302      	movs	r3, #2
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	4b10      	ldr	r3, [pc, #64]	; (80054dc <Display_settings_screen_background+0x1ec>)
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80054a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054a4:	21cf      	movs	r1, #207	; 0xcf
 80054a6:	20c3      	movs	r0, #195	; 0xc3
 80054a8:	f7fb fb14 	bl	8000ad4 <ILI9341_Draw_String>
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	0800e63c 	.word	0x0800e63c
 80054b8:	0800e64c 	.word	0x0800e64c
 80054bc:	0800e654 	.word	0x0800e654
 80054c0:	0800e660 	.word	0x0800e660
 80054c4:	0800e66c 	.word	0x0800e66c
 80054c8:	0800e678 	.word	0x0800e678
 80054cc:	0800e684 	.word	0x0800e684
 80054d0:	0800e690 	.word	0x0800e690
 80054d4:	0800e6a0 	.word	0x0800e6a0
 80054d8:	0800e46c 	.word	0x0800e46c
 80054dc:	0800e460 	.word	0x0800e460

080054e0 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	463c      	mov	r4, r7
 80054e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	461a      	mov	r2, r3
 80054f0:	238c      	movs	r3, #140	; 0x8c
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <Display_settings_screen_data+0x84>)
 80054f8:	fb82 1203 	smull	r1, r2, r2, r3
 80054fc:	441a      	add	r2, r3
 80054fe:	1152      	asrs	r2, r2, #5
 8005500:	17db      	asrs	r3, r3, #31
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	330c      	adds	r3, #12
 8005506:	4619      	mov	r1, r3
 8005508:	2332      	movs	r3, #50	; 0x32
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2398      	movs	r3, #152	; 0x98
 800550e:	2228      	movs	r2, #40	; 0x28
 8005510:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005514:	f7fb fa3c 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	461a      	mov	r2, r3
 800551c:	238c      	movs	r3, #140	; 0x8c
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <Display_settings_screen_data+0x84>)
 8005524:	fb82 1203 	smull	r1, r2, r2, r3
 8005528:	441a      	add	r2, r3
 800552a:	1152      	asrs	r2, r2, #5
 800552c:	17db      	asrs	r3, r3, #31
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	330c      	adds	r3, #12
 8005532:	461a      	mov	r2, r3
 8005534:	2332      	movs	r3, #50	; 0x32
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	2228      	movs	r2, #40	; 0x28
 800553c:	210c      	movs	r1, #12
 800553e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005542:	f7fb fa25 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 8005546:	2332      	movs	r3, #50	; 0x32
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	f44f 739a 	mov.w	r3, #308	; 0x134
 800554e:	2228      	movs	r2, #40	; 0x28
 8005550:	21a8      	movs	r1, #168	; 0xa8
 8005552:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005556:	f7fb fa1b 	bl	8000990 <ILI9341_Draw_Filled_Rectangle>
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bd90      	pop	{r4, r7, pc}
 8005562:	bf00      	nop
 8005564:	82082083 	.word	0x82082083

08005568 <Display_time>:

void Display_time(time_t time_val)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af02      	add	r7, sp, #8
 800556e:	463b      	mov	r3, r7
 8005570:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005574:	883b      	ldrh	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d076      	beq.n	8005668 <Display_time+0x100>
 800557a:	78bb      	ldrb	r3, [r7, #2]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d073      	beq.n	8005668 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8005580:	793b      	ldrb	r3, [r7, #4]
 8005582:	2b09      	cmp	r3, #9
 8005584:	d81e      	bhi.n	80055c4 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 8005586:	2302      	movs	r3, #2
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	4b39      	ldr	r3, [pc, #228]	; (8005670 <Display_time+0x108>)
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005594:	2101      	movs	r1, #1
 8005596:	f240 100f 	movw	r0, #271	; 0x10f
 800559a:	f7fb fa9b 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 800559e:	793b      	ldrb	r3, [r7, #4]
 80055a0:	220a      	movs	r2, #10
 80055a2:	4934      	ldr	r1, [pc, #208]	; (8005674 <Display_time+0x10c>)
 80055a4:	4618      	mov	r0, r3
 80055a6:	f007 fed9 	bl	800d35c <itoa>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2202      	movs	r2, #2
 80055ae:	9201      	str	r2, [sp, #4]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055b8:	2101      	movs	r1, #1
 80055ba:	f44f 708c 	mov.w	r0, #280	; 0x118
 80055be:	f7fb fa89 	bl	8000ad4 <ILI9341_Draw_String>
 80055c2:	e011      	b.n	80055e8 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80055c4:	793b      	ldrb	r3, [r7, #4]
 80055c6:	220a      	movs	r2, #10
 80055c8:	492a      	ldr	r1, [pc, #168]	; (8005674 <Display_time+0x10c>)
 80055ca:	4618      	mov	r0, r3
 80055cc:	f007 fec6 	bl	800d35c <itoa>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2202      	movs	r2, #2
 80055d4:	9201      	str	r2, [sp, #4]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055de:	2101      	movs	r1, #1
 80055e0:	f240 100f 	movw	r0, #271	; 0x10f
 80055e4:	f7fb fa76 	bl	8000ad4 <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80055e8:	2302      	movs	r3, #2
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	4b22      	ldr	r3, [pc, #136]	; (8005678 <Display_time+0x110>)
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	2300      	movs	r3, #0
 80055f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f6:	2101      	movs	r1, #1
 80055f8:	f240 101f 	movw	r0, #287	; 0x11f
 80055fc:	f7fb fa6a 	bl	8000ad4 <ILI9341_Draw_String>

		if(time_val.minute < 10)
 8005600:	797b      	ldrb	r3, [r7, #5]
 8005602:	2b09      	cmp	r3, #9
 8005604:	d81e      	bhi.n	8005644 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 8005606:	2302      	movs	r3, #2
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	4b19      	ldr	r3, [pc, #100]	; (8005670 <Display_time+0x108>)
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005614:	2101      	movs	r1, #1
 8005616:	f240 1027 	movw	r0, #295	; 0x127
 800561a:	f7fb fa5b 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 800561e:	797b      	ldrb	r3, [r7, #5]
 8005620:	220a      	movs	r2, #10
 8005622:	4914      	ldr	r1, [pc, #80]	; (8005674 <Display_time+0x10c>)
 8005624:	4618      	mov	r0, r3
 8005626:	f007 fe99 	bl	800d35c <itoa>
 800562a:	4603      	mov	r3, r0
 800562c:	2202      	movs	r2, #2
 800562e:	9201      	str	r2, [sp, #4]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	2300      	movs	r3, #0
 8005634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005638:	2101      	movs	r1, #1
 800563a:	f44f 7098 	mov.w	r0, #304	; 0x130
 800563e:	f7fb fa49 	bl	8000ad4 <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 8005642:	e011      	b.n	8005668 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005644:	797b      	ldrb	r3, [r7, #5]
 8005646:	220a      	movs	r2, #10
 8005648:	490a      	ldr	r1, [pc, #40]	; (8005674 <Display_time+0x10c>)
 800564a:	4618      	mov	r0, r3
 800564c:	f007 fe86 	bl	800d35c <itoa>
 8005650:	4603      	mov	r3, r0
 8005652:	2202      	movs	r2, #2
 8005654:	9201      	str	r2, [sp, #4]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2300      	movs	r3, #0
 800565a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565e:	2101      	movs	r1, #1
 8005660:	f240 1027 	movw	r0, #295	; 0x127
 8005664:	f7fb fa36 	bl	8000ad4 <ILI9341_Draw_String>
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	0800e628 	.word	0x0800e628
 8005674:	20006d8c 	.word	0x20006d8c
 8005678:	0800e6b4 	.word	0x0800e6b4

0800567c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <MX_DMA_Init+0x3c>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <MX_DMA_Init+0x3c>)
 800568c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005690:	6313      	str	r3, [r2, #48]	; 0x30
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <MX_DMA_Init+0x3c>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	200f      	movs	r0, #15
 80056a4:	f001 ffbb 	bl	800761e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80056a8:	200f      	movs	r0, #15
 80056aa:	f001 ffd4 	bl	8007656 <HAL_NVIC_EnableIRQ>

}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40023800 	.word	0x40023800

080056bc <eeprom_wait>:
//#define ADDR_SIZE 1	//for 24c08 1, for 24c256 2, because of bigger memory size - we must habe 2 bytes for memory Address

static uint32_t last_write;	//variable used to save time of last writing operation in eeprom_wait function

void eeprom_wait(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 80056c0:	bf00      	nop
 80056c2:	f001 fea1 	bl	8007408 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <eeprom_wait+0x1c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b14      	cmp	r3, #20
 80056d0:	d9f7      	bls.n	80056c2 <eeprom_wait+0x6>
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20006e50 	.word	0x20006e50

080056dc <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af04      	add	r7, sp, #16
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80056e8:	f7ff ffe8 	bl	80056bc <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80056f8:	9102      	str	r1, [sp, #8]
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2302      	movs	r3, #2
 8005702:	21a0      	movs	r1, #160	; 0xa0
 8005704:	4803      	ldr	r0, [pc, #12]	; (8005714 <eeprom_read+0x38>)
 8005706:	f002 fee7 	bl	80084d8 <HAL_I2C_Mem_Read>
 800570a:	4603      	mov	r3, r0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20006e54 	.word	0x20006e54

08005718 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af04      	add	r7, sp, #16
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8005724:	f7ff ffca 	bl	80056bc <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005734:	9102      	str	r1, [sp, #8]
 8005736:	9301      	str	r3, [sp, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2302      	movs	r3, #2
 800573e:	21a0      	movs	r1, #160	; 0xa0
 8005740:	4807      	ldr	r0, [pc, #28]	; (8005760 <eeprom_write+0x48>)
 8005742:	f002 fdcf 	bl	80082e4 <HAL_I2C_Mem_Write>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800574a:	f001 fe5d 	bl	8007408 <HAL_GetTick>
 800574e:	4603      	mov	r3, r0
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <eeprom_write+0x4c>)
 8005752:	6013      	str	r3, [r2, #0]

    return rc;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20006e54 	.word	0x20006e54
 8005764:	20006e50 	.word	0x20006e50

08005768 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 800576e:	2101      	movs	r1, #1
 8005770:	482d      	ldr	r0, [pc, #180]	; (8005828 <eeprom_clear_scanning_data+0xc0>)
 8005772:	f7fe f945 	bl	8003a00 <send_debug_msg>

	 uint8_t clear_page_sequence[PAGE_SIZE];

	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800577c:	e00b      	b.n	8005796 <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 800577e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005782:	3328      	adds	r3, #40	; 0x28
 8005784:	443b      	add	r3, r7
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	f803 2c24 	strb.w	r2, [r3, #-36]
	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 800578c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005790:	3301      	adds	r3, #1
 8005792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800579a:	2b1f      	cmp	r3, #31
 800579c:	d9ef      	bls.n	800577e <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	2220      	movs	r2, #32
 80057a2:	4619      	mov	r1, r3
 80057a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057a8:	f7ff ffb6 	bl	8005718 <eeprom_write>
	if(PAGE_SIZE == 32)
	{
		eeprom_write(PAGE_SIZE * (SCAN_RELATED_DATA_PAGE + 1), &clear_page_sequence, sizeof(clear_page_sequence));
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	2220      	movs	r2, #32
 80057b0:	4619      	mov	r1, r3
 80057b2:	f44f 7090 	mov.w	r0, #288	; 0x120
 80057b6:	f7ff ffaf 	bl	8005718 <eeprom_write>
	}

	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80057c0:	e00e      	b.n	80057e0 <eeprom_clear_scanning_data+0x78>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80057c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057c6:	330a      	adds	r3, #10
 80057c8:	015b      	lsls	r3, r3, #5
 80057ca:	4618      	mov	r0, r3
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	2220      	movs	r2, #32
 80057d0:	4619      	mov	r1, r3
 80057d2:	f7ff ffa1 	bl	8005718 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80057d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057da:	3301      	adds	r3, #1
 80057dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80057e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057e4:	2b09      	cmp	r3, #9
 80057e6:	d9ec      	bls.n	80057c2 <eeprom_clear_scanning_data+0x5a>
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
		}
	}
	if(PAGE_SIZE == 32)
	{
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80057ee:	e00e      	b.n	800580e <eeprom_clear_scanning_data+0xa6>
		{
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80057f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80057f4:	331e      	adds	r3, #30
 80057f6:	015b      	lsls	r3, r3, #5
 80057f8:	4618      	mov	r0, r3
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	2220      	movs	r2, #32
 80057fe:	4619      	mov	r1, r3
 8005800:	f7ff ff8a 	bl	8005718 <eeprom_write>
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 8005804:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005808:	3301      	adds	r3, #1
 800580a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800580e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005812:	2bc7      	cmp	r3, #199	; 0xc7
 8005814:	d9ec      	bls.n	80057f0 <eeprom_clear_scanning_data+0x88>
		}
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8005816:	2101      	movs	r1, #1
 8005818:	4804      	ldr	r0, [pc, #16]	; (800582c <eeprom_clear_scanning_data+0xc4>)
 800581a:	f7fe f8f1 	bl	8003a00 <send_debug_msg>
}
 800581e:	bf00      	nop
 8005820:	3728      	adds	r7, #40	; 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	0800e768 	.word	0x0800e768
 800582c:	0800e788 	.word	0x0800e788

08005830 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b096      	sub	sp, #88	; 0x58
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	460b      	mov	r3, r1
 800583e:	72fb      	strb	r3, [r7, #11]
 8005840:	4613      	mov	r3, r2
 8005842:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8005844:	2101      	movs	r1, #1
 8005846:	4835      	ldr	r0, [pc, #212]	; (800591c <eeprom_save_scanning_data+0xec>)
 8005848:	f7fe f8da 	bl	8003a00 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 800584c:	f107 030a 	add.w	r3, r7, #10
 8005850:	2201      	movs	r2, #1
 8005852:	4619      	mov	r1, r3
 8005854:	f240 1005 	movw	r0, #261	; 0x105
 8005858:	f7ff ff5e 	bl	8005718 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 800585c:	f107 030b 	add.w	r3, r7, #11
 8005860:	2201      	movs	r2, #1
 8005862:	4619      	mov	r1, r3
 8005864:	f44f 7083 	mov.w	r0, #262	; 0x106
 8005868:	f7ff ff56 	bl	8005718 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8005872:	e012      	b.n	800589a <eeprom_save_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8005874:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005878:	330a      	adds	r3, #10
 800587a:	015b      	lsls	r3, r3, #5
 800587c:	4618      	mov	r0, r3
 800587e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005882:	015b      	lsls	r3, r3, #5
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	4413      	add	r3, r2
 8005888:	2220      	movs	r2, #32
 800588a:	4619      	mov	r1, r3
 800588c:	f7ff ff44 	bl	8005718 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005890:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005894:	3301      	adds	r3, #1
 8005896:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800589a:	7abb      	ldrb	r3, [r7, #10]
 800589c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d3e7      	bcc.n	8005874 <eeprom_save_scanning_data+0x44>
	}
	if(PAGE_SIZE == 32)
	{
		uint8_t temp [64];

		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80058aa:	e029      	b.n	8005900 <eeprom_save_scanning_data+0xd0>
		{
			memcpy(&temp, &_services_list[services_index], sizeof(dab_service_t));
 80058ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b0:	2234      	movs	r2, #52	; 0x34
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	18d1      	adds	r1, r2, r3
 80058ba:	f107 0314 	add.w	r3, r7, #20
 80058be:	2234      	movs	r2, #52	; 0x34
 80058c0:	4618      	mov	r0, r3
 80058c2:	f007 fdbb 	bl	800d43c <memcpy>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2, &temp[0], 32);
 80058c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ca:	330f      	adds	r3, #15
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	4618      	mov	r0, r3
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	2220      	movs	r2, #32
 80058d6:	4619      	mov	r1, r3
 80058d8:	f7ff ff1e 	bl	8005718 <eeprom_write>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 80058dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058e0:	330f      	adds	r3, #15
 80058e2:	019b      	lsls	r3, r3, #6
 80058e4:	3320      	adds	r3, #32
 80058e6:	4618      	mov	r0, r3
 80058e8:	f107 0314 	add.w	r3, r7, #20
 80058ec:	3320      	adds	r3, #32
 80058ee:	2214      	movs	r2, #20
 80058f0:	4619      	mov	r1, r3
 80058f2:	f7ff ff11 	bl	8005718 <eeprom_write>
		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80058f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fa:	3301      	adds	r3, #1
 80058fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005900:	7afb      	ldrb	r3, [r7, #11]
 8005902:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005906:	429a      	cmp	r2, r3
 8005908:	d3d0      	bcc.n	80058ac <eeprom_save_scanning_data+0x7c>
		}
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 800590a:	2101      	movs	r1, #1
 800590c:	4804      	ldr	r0, [pc, #16]	; (8005920 <eeprom_save_scanning_data+0xf0>)
 800590e:	f7fe f877 	bl	8003a00 <send_debug_msg>
}
 8005912:	bf00      	nop
 8005914:	3758      	adds	r7, #88	; 0x58
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	0800e794 	.word	0x0800e794
 8005920:	0800e7b0 	.word	0x0800e7b0

08005924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592a:	f107 031c 	add.w	r3, r7, #28
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a6b      	ldr	r2, [pc, #428]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	4b69      	ldr	r3, [pc, #420]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	4b65      	ldr	r3, [pc, #404]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	4a64      	ldr	r2, [pc, #400]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6313      	str	r3, [r2, #48]	; 0x30
 8005966:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4a5d      	ldr	r2, [pc, #372]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	6313      	str	r3, [r2, #48]	; 0x30
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4b57      	ldr	r3, [pc, #348]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	4a56      	ldr	r2, [pc, #344]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	6313      	str	r3, [r2, #48]	; 0x30
 800599e:	4b54      	ldr	r3, [pc, #336]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	4a4f      	ldr	r2, [pc, #316]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059b4:	f043 0310 	orr.w	r3, r3, #16
 80059b8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ba:	4b4d      	ldr	r3, [pc, #308]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	4b49      	ldr	r3, [pc, #292]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	4a48      	ldr	r2, [pc, #288]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059d0:	f043 0308 	orr.w	r3, r3, #8
 80059d4:	6313      	str	r3, [r2, #48]	; 0x30
 80059d6:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <MX_GPIO_Init+0x1cc>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80059e2:	2200      	movs	r2, #0
 80059e4:	2130      	movs	r1, #48	; 0x30
 80059e6:	4843      	ldr	r0, [pc, #268]	; (8005af4 <MX_GPIO_Init+0x1d0>)
 80059e8:	f002 fb1e 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059f2:	4841      	ldr	r0, [pc, #260]	; (8005af8 <MX_GPIO_Init+0x1d4>)
 80059f4:	f002 fb18 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80059f8:	2200      	movs	r2, #0
 80059fa:	f24f 7180 	movw	r1, #63360	; 0xf780
 80059fe:	483f      	ldr	r0, [pc, #252]	; (8005afc <MX_GPIO_Init+0x1d8>)
 8005a00:	f002 fb12 	bl	8008028 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8005a04:	2200      	movs	r2, #0
 8005a06:	2128      	movs	r1, #40	; 0x28
 8005a08:	483d      	ldr	r0, [pc, #244]	; (8005b00 <MX_GPIO_Init+0x1dc>)
 8005a0a:	f002 fb0d 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8005a0e:	2310      	movs	r3, #16
 8005a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a12:	2300      	movs	r3, #0
 8005a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8005a1a:	f107 031c 	add.w	r3, r7, #28
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4838      	ldr	r0, [pc, #224]	; (8005b04 <MX_GPIO_Init+0x1e0>)
 8005a22:	f002 f94d 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8005a26:	2330      	movs	r3, #48	; 0x30
 8005a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a32:	2302      	movs	r3, #2
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a36:	f107 031c 	add.w	r3, r7, #28
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	482d      	ldr	r0, [pc, #180]	; (8005af4 <MX_GPIO_Init+0x1d0>)
 8005a3e:	f002 f93f 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8005a42:	2311      	movs	r3, #17
 8005a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a46:	2300      	movs	r3, #0
 8005a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a4e:	f107 031c 	add.w	r3, r7, #28
 8005a52:	4619      	mov	r1, r3
 8005a54:	482a      	ldr	r0, [pc, #168]	; (8005b00 <MX_GPIO_Init+0x1dc>)
 8005a56:	f002 f933 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8005a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a60:	2301      	movs	r3, #1
 8005a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8005a6c:	f107 031c 	add.w	r3, r7, #28
 8005a70:	4619      	mov	r1, r3
 8005a72:	4821      	ldr	r0, [pc, #132]	; (8005af8 <MX_GPIO_Init+0x1d4>)
 8005a74:	f002 f924 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8005a78:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8005a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a86:	2302      	movs	r3, #2
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a8a:	f107 031c 	add.w	r3, r7, #28
 8005a8e:	4619      	mov	r1, r3
 8005a90:	481a      	ldr	r0, [pc, #104]	; (8005afc <MX_GPIO_Init+0x1d8>)
 8005a92:	f002 f915 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005a96:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aa8:	f107 031c 	add.w	r3, r7, #28
 8005aac:	4619      	mov	r1, r3
 8005aae:	4813      	ldr	r0, [pc, #76]	; (8005afc <MX_GPIO_Init+0x1d8>)
 8005ab0:	f002 f906 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005ab4:	2340      	movs	r3, #64	; 0x40
 8005ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005ac0:	f107 031c 	add.w	r3, r7, #28
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	480d      	ldr	r0, [pc, #52]	; (8005afc <MX_GPIO_Init+0x1d8>)
 8005ac8:	f002 f8fa 	bl	8007cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8005acc:	2328      	movs	r3, #40	; 0x28
 8005ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005adc:	f107 031c 	add.w	r3, r7, #28
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4807      	ldr	r0, [pc, #28]	; (8005b00 <MX_GPIO_Init+0x1dc>)
 8005ae4:	f002 f8ec 	bl	8007cc0 <HAL_GPIO_Init>

}
 8005ae8:	bf00      	nop
 8005aea:	3730      	adds	r7, #48	; 0x30
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40020800 	.word	0x40020800
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40020c00 	.word	0x40020c00
 8005b00:	40020400 	.word	0x40020400
 8005b04:	40020000 	.word	0x40020000

08005b08 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b0e:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <MX_I2C1_Init+0x54>)
 8005b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b14:	4a12      	ldr	r2, [pc, #72]	; (8005b60 <MX_I2C1_Init+0x58>)
 8005b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b18:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b3e:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <MX_I2C1_Init+0x50>)
 8005b46:	f002 fa89 	bl	800805c <HAL_I2C_Init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b50:	f000 f982 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20006e54 	.word	0x20006e54
 8005b5c:	40005400 	.word	0x40005400
 8005b60:	000186a0 	.word	0x000186a0

08005b64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005b68:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <MX_I2C3_Init+0x54>)
 8005b6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b70:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <MX_I2C3_Init+0x58>)
 8005b72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005b7a:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005ba0:	4804      	ldr	r0, [pc, #16]	; (8005bb4 <MX_I2C3_Init+0x50>)
 8005ba2:	f002 fa5b 	bl	800805c <HAL_I2C_Init>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005bac:	f000 f954 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20006ea8 	.word	0x20006ea8
 8005bb8:	40005c00 	.word	0x40005c00
 8005bbc:	000186a0 	.word	0x000186a0

08005bc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc8:	f107 031c 	add.w	r3, r7, #28
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a4a      	ldr	r2, [pc, #296]	; (8005d08 <HAL_I2C_MspInit+0x148>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d12c      	bne.n	8005c3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	4b49      	ldr	r3, [pc, #292]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	4a48      	ldr	r2, [pc, #288]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf2:	4b46      	ldr	r3, [pc, #280]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005bfe:	23c0      	movs	r3, #192	; 0xc0
 8005c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c02:	2312      	movs	r3, #18
 8005c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c0e:	2304      	movs	r3, #4
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c12:	f107 031c 	add.w	r3, r7, #28
 8005c16:	4619      	mov	r1, r3
 8005c18:	483d      	ldr	r0, [pc, #244]	; (8005d10 <HAL_I2C_MspInit+0x150>)
 8005c1a:	f002 f851 	bl	8007cc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2e:	4b37      	ldr	r3, [pc, #220]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005c3a:	e060      	b.n	8005cfe <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <HAL_I2C_MspInit+0x154>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d15b      	bne.n	8005cfe <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	4a2f      	ldr	r2, [pc, #188]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c50:	f043 0304 	orr.w	r3, r3, #4
 8005c54:	6313      	str	r3, [r2, #48]	; 0x30
 8005c56:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	4b29      	ldr	r3, [pc, #164]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	6313      	str	r3, [r2, #48]	; 0x30
 8005c72:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c84:	2312      	movs	r3, #18
 8005c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005c90:	2304      	movs	r3, #4
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005c94:	f107 031c 	add.w	r3, r7, #28
 8005c98:	4619      	mov	r1, r3
 8005c9a:	481f      	ldr	r0, [pc, #124]	; (8005d18 <HAL_I2C_MspInit+0x158>)
 8005c9c:	f002 f810 	bl	8007cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ca6:	2312      	movs	r3, #18
 8005ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005cb6:	f107 031c 	add.w	r3, r7, #28
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4817      	ldr	r0, [pc, #92]	; (8005d1c <HAL_I2C_MspInit+0x15c>)
 8005cbe:	f001 ffff 	bl	8007cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005ccc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <HAL_I2C_MspInit+0x14c>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	2048      	movs	r0, #72	; 0x48
 8005ce4:	f001 fc9b 	bl	800761e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005ce8:	2048      	movs	r0, #72	; 0x48
 8005cea:	f001 fcb4 	bl	8007656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	2049      	movs	r0, #73	; 0x49
 8005cf4:	f001 fc93 	bl	800761e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005cf8:	2049      	movs	r0, #73	; 0x49
 8005cfa:	f001 fcac 	bl	8007656 <HAL_NVIC_EnableIRQ>
}
 8005cfe:	bf00      	nop
 8005d00:	3730      	adds	r7, #48	; 0x30
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40005400 	.word	0x40005400
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40020400 	.word	0x40020400
 8005d14:	40005c00 	.word	0x40005c00
 8005d18:	40020800 	.word	0x40020800
 8005d1c:	40020000 	.word	0x40020000

08005d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d24:	f001 fb0a 	bl	800733c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d28:	f000 f82c 	bl	8005d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d2c:	f7ff fdfa 	bl	8005924 <MX_GPIO_Init>
  MX_DMA_Init();
 8005d30:	f7ff fca4 	bl	800567c <MX_DMA_Init>
  MX_I2C1_Init();
 8005d34:	f7ff fee8 	bl	8005b08 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005d38:	f7ff ff14 	bl	8005b64 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005d3c:	f000 f892 	bl	8005e64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005d40:	f000 f8c6 	bl	8005ed0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005d44:	f000 fe84 	bl	8006a50 <MX_TIM3_Init>
  MX_UART5_Init();
 8005d48:	f001 f9da 	bl	8007100 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005d4c:	f001 fa02 	bl	8007154 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005d50:	f000 fed8 	bl	8006b04 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005d54:	f000 fefa 	bl	8006b4c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4808      	ldr	r0, [pc, #32]	; (8005d7c <main+0x5c>)
 8005d5c:	f7fd fe50 	bl	8003a00 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005d60:	4807      	ldr	r0, [pc, #28]	; (8005d80 <main+0x60>)
 8005d62:	f006 f98f 	bl	800c084 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005d66:	f7fa fbbf 	bl	80004e8 <ILI9341_Init>
  Display_booting_screen();
 8005d6a:	f7fd fe83 	bl	8003a74 <Display_booting_screen>

  //eeprom_show();

  //HAL_Delay(50000);

  Si468x_dab_init();
 8005d6e:	f7fb f97b 	bl	8001068 <Si468x_dab_init>
  restore_from_eeprom();
 8005d72:	f7fd faa3 	bl	80032bc <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005d76:	f000 f999 	bl	80060ac <state_machine>
 8005d7a:	e7fc      	b.n	8005d76 <main+0x56>
 8005d7c:	0800eb10 	.word	0x0800eb10
 8005d80:	20007100 	.word	0x20007100

08005d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b094      	sub	sp, #80	; 0x50
 8005d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d8a:	f107 0320 	add.w	r3, r7, #32
 8005d8e:	2230      	movs	r2, #48	; 0x30
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f007 fb26 	bl	800d3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d98:	f107 030c 	add.w	r3, r7, #12
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <SystemClock_Config+0xcc>)
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <SystemClock_Config+0xcc>)
 8005db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db6:	6413      	str	r3, [r2, #64]	; 0x40
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <SystemClock_Config+0xcc>)
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <SystemClock_Config+0xd0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a21      	ldr	r2, [pc, #132]	; (8005e54 <SystemClock_Config+0xd0>)
 8005dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b1f      	ldr	r3, [pc, #124]	; (8005e54 <SystemClock_Config+0xd0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dea:	2302      	movs	r3, #2
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005df4:	2304      	movs	r3, #4
 8005df6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8005df8:	23f0      	movs	r3, #240	; 0xf0
 8005dfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e00:	2304      	movs	r3, #4
 8005e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e04:	f107 0320 	add.w	r3, r7, #32
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f004 fd99 	bl	800a940 <HAL_RCC_OscConfig>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005e14:	f000 f820 	bl	8005e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e18:	230f      	movs	r3, #15
 8005e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e30:	f107 030c 	add.w	r3, r7, #12
 8005e34:	2105      	movs	r1, #5
 8005e36:	4618      	mov	r0, r3
 8005e38:	f004 fffa 	bl	800ae30 <HAL_RCC_ClockConfig>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005e42:	f000 f809 	bl	8005e58 <Error_Handler>
  }
}
 8005e46:	bf00      	nop
 8005e48:	3750      	adds	r7, #80	; 0x50
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40023800 	.word	0x40023800
 8005e54:	40007000 	.word	0x40007000

08005e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e5c:	b672      	cpsid	i
}
 8005e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e60:	e7fe      	b.n	8005e60 <Error_Handler+0x8>
	...

08005e64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005e68:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <MX_SPI1_Init+0x68>)
 8005e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e6e:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e98:	2220      	movs	r2, #32
 8005e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005eb0:	220a      	movs	r2, #10
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005eb4:	4804      	ldr	r0, [pc, #16]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005eb6:	f005 f9db 	bl	800b270 <HAL_SPI_Init>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ec0:	f7ff ffca 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20006efc 	.word	0x20006efc
 8005ecc:	40013000 	.word	0x40013000

08005ed0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005ed4:	4b17      	ldr	r3, [pc, #92]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <MX_SPI2_Init+0x68>)
 8005ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005eda:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005ee2:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ee8:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eee:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005efa:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f14:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005f1c:	220a      	movs	r2, #10
 8005f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005f20:	4804      	ldr	r0, [pc, #16]	; (8005f34 <MX_SPI2_Init+0x64>)
 8005f22:	f005 f9a5 	bl	800b270 <HAL_SPI_Init>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005f2c:	f7ff ff94 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005f30:	bf00      	nop
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20006f54 	.word	0x20006f54
 8005f38:	40003800 	.word	0x40003800

08005f3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	; 0x30
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f44:	f107 031c 	add.w	r3, r7, #28
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a4d      	ldr	r2, [pc, #308]	; (8006090 <HAL_SPI_MspInit+0x154>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d12c      	bne.n	8005fb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	4b4c      	ldr	r3, [pc, #304]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	4a4b      	ldr	r2, [pc, #300]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f6e:	4b49      	ldr	r3, [pc, #292]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	4b45      	ldr	r3, [pc, #276]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	4a44      	ldr	r2, [pc, #272]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8a:	4b42      	ldr	r3, [pc, #264]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005f96:	23e0      	movs	r3, #224	; 0xe0
 8005f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005fa6:	2305      	movs	r3, #5
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4839      	ldr	r0, [pc, #228]	; (8006098 <HAL_SPI_MspInit+0x15c>)
 8005fb2:	f001 fe85 	bl	8007cc0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005fb6:	e066      	b.n	8006086 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a37      	ldr	r2, [pc, #220]	; (800609c <HAL_SPI_MspInit+0x160>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d161      	bne.n	8006086 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	4b33      	ldr	r3, [pc, #204]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	4a32      	ldr	r2, [pc, #200]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a2b      	ldr	r2, [pc, #172]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b29      	ldr	r3, [pc, #164]	; (8006094 <HAL_SPI_MspInit+0x158>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8005ffa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006000:	2302      	movs	r3, #2
 8006002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006004:	2300      	movs	r3, #0
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006008:	2303      	movs	r3, #3
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800600c:	2305      	movs	r3, #5
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006010:	f107 031c 	add.w	r3, r7, #28
 8006014:	4619      	mov	r1, r3
 8006016:	4822      	ldr	r0, [pc, #136]	; (80060a0 <HAL_SPI_MspInit+0x164>)
 8006018:	f001 fe52 	bl	8007cc0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800601c:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 800601e:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <HAL_SPI_MspInit+0x16c>)
 8006020:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006022:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006030:	2200      	movs	r2, #0
 8006032:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006034:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800603a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800603c:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 800603e:	2200      	movs	r2, #0
 8006040:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006044:	2200      	movs	r2, #0
 8006046:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 800604a:	2200      	movs	r2, #0
 800604c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006050:	2200      	movs	r2, #0
 8006052:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006054:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006056:	2200      	movs	r2, #0
 8006058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800605a:	4812      	ldr	r0, [pc, #72]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 800605c:	f001 fb16 	bl	800768c <HAL_DMA_Init>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8006066:	f7ff fef7 	bl	8005e58 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a0d      	ldr	r2, [pc, #52]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 800606e:	649a      	str	r2, [r3, #72]	; 0x48
 8006070:	4a0c      	ldr	r2, [pc, #48]	; (80060a4 <HAL_SPI_MspInit+0x168>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006076:	2200      	movs	r2, #0
 8006078:	2100      	movs	r1, #0
 800607a:	2024      	movs	r0, #36	; 0x24
 800607c:	f001 facf 	bl	800761e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006080:	2024      	movs	r0, #36	; 0x24
 8006082:	f001 fae8 	bl	8007656 <HAL_NVIC_EnableIRQ>
}
 8006086:	bf00      	nop
 8006088:	3730      	adds	r7, #48	; 0x30
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40013000 	.word	0x40013000
 8006094:	40023800 	.word	0x40023800
 8006098:	40020000 	.word	0x40020000
 800609c:	40003800 	.word	0x40003800
 80060a0:	40020400 	.word	0x40020400
 80060a4:	20006fac 	.word	0x20006fac
 80060a8:	40026070 	.word	0x40026070

080060ac <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b097      	sub	sp, #92	; 0x5c
 80060b0:	af06      	add	r7, sp, #24
	if(state_change_done)
 80060b2:	4b64      	ldr	r3, [pc, #400]	; (8006244 <state_machine+0x198>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 80060ba:	f000 fe0d 	bl	8006cd8 <Touch_read>
 80060be:	4603      	mov	r3, r0
 80060c0:	4a61      	ldr	r2, [pc, #388]	; (8006248 <state_machine+0x19c>)
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e005      	b.n	80060d2 <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 80060c6:	4b60      	ldr	r3, [pc, #384]	; (8006248 <state_machine+0x19c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 80060cc:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <state_machine+0x19c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 80060d2:	4c5e      	ldr	r4, [pc, #376]	; (800624c <state_machine+0x1a0>)
 80060d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fd fc75 	bl	80039c8 <get_dab_management>
 80060de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 80060e8:	f7fd fc80 	bl	80039ec <get_dls_label>
 80060ec:	4603      	mov	r3, r0
 80060ee:	4a58      	ldr	r2, [pc, #352]	; (8006250 <state_machine+0x1a4>)
 80060f0:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 80060f2:	f7fc ffd1 	bl	8003098 <Si468x_dab_get_time>


	switch(system_state)
 80060f6:	4b57      	ldr	r3, [pc, #348]	; (8006254 <state_machine+0x1a8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	f200 83e0 	bhi.w	80068c0 <state_machine+0x814>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <state_machine+0x5c>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800611d 	.word	0x0800611d
 800610c:	0800626d 	.word	0x0800626d
 8006110:	080066d5 	.word	0x080066d5
 8006114:	08006605 	.word	0x08006605
 8006118:	08006749 	.word	0x08006749
	{
	case main_screen:

		if(!state_change_done)
 800611c:	4b49      	ldr	r3, [pc, #292]	; (8006244 <state_machine+0x198>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d14e      	bne.n	80061c2 <state_machine+0x116>
		{
			if(!dab_management_to_display.total_services)
 8006124:	4b49      	ldr	r3, [pc, #292]	; (800624c <state_machine+0x1a0>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <state_machine+0x88>
			{
				playing_state = not_playing;
 800612c:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <state_machine+0x1ac>)
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	e028      	b.n	8006186 <state_machine+0xda>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 8006134:	f7fd fc34 	bl	80039a0 <get_dab_service_list>
 8006138:	4603      	mov	r3, r0
 800613a:	4a48      	ldr	r2, [pc, #288]	; (800625c <state_machine+0x1b0>)
 800613c:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 800613e:	f7fd fc39 	bl	80039b4 <get_dab_ensemble_list>
 8006142:	4603      	mov	r3, r0
 8006144:	4a46      	ldr	r2, [pc, #280]	; (8006260 <state_machine+0x1b4>)
 8006146:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 8006148:	4b46      	ldr	r3, [pc, #280]	; (8006264 <state_machine+0x1b8>)
 800614a:	2232      	movs	r2, #50	; 0x32
 800614c:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 800614e:	e014      	b.n	800617a <state_machine+0xce>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 8006150:	4c45      	ldr	r4, [pc, #276]	; (8006268 <state_machine+0x1bc>)
 8006152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006156:	4618      	mov	r0, r3
 8006158:	f7fc fc90 	bl	8002a7c <Si468x_dab_get_audio_info>
 800615c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 8006166:	4b3f      	ldr	r3, [pc, #252]	; (8006264 <state_machine+0x1b8>)
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <state_machine+0x1b8>)
 8006170:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 8006172:	4b3c      	ldr	r3, [pc, #240]	; (8006264 <state_machine+0x1b8>)
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <state_machine+0xd8>
				while(!dab_audio_info_to_display.audio_sample_rate)
 800617a:	4b3b      	ldr	r3, [pc, #236]	; (8006268 <state_machine+0x1bc>)
 800617c:	885b      	ldrh	r3, [r3, #2]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0e6      	beq.n	8006150 <state_machine+0xa4>
 8006182:	e000      	b.n	8006186 <state_machine+0xda>
					{
						break;
 8006184:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 8006186:	f7fd fce7 	bl	8003b58 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 800618a:	4b34      	ldr	r3, [pc, #208]	; (800625c <state_machine+0x1b0>)
 800618c:	681e      	ldr	r6, [r3, #0]
 800618e:	4b34      	ldr	r3, [pc, #208]	; (8006260 <state_machine+0x1b4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	4c2d      	ldr	r4, [pc, #180]	; (800624c <state_machine+0x1a0>)
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <state_machine+0x1bc>)
 8006198:	ad02      	add	r5, sp, #8
 800619a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800619c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80061a0:	466a      	mov	r2, sp
 80061a2:	f104 0308 	add.w	r3, r4, #8
 80061a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80061ae:	e894 000c 	ldmia.w	r4, {r2, r3}
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7fd fd5d 	bl	8003c74 <Display_main_screen_data>
			state_change_done = 1;
 80061ba:	4b22      	ldr	r3, [pc, #136]	; (8006244 <state_machine+0x198>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e00d      	b.n	80061de <state_machine+0x132>
		}

		else
		{
			if(playing_state == playing)
 80061c2:	4b25      	ldr	r3, [pc, #148]	; (8006258 <state_machine+0x1ac>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d107      	bne.n	80061da <state_machine+0x12e>
			{
				Si468x_dab_get_digital_service_data();
 80061ca:	f7fc fdeb 	bl	8002da4 <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 80061ce:	4b20      	ldr	r3, [pc, #128]	; (8006250 <state_machine+0x1a4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fd fe88 	bl	8003ee8 <Display_main_screen_dls>
 80061d8:	e001      	b.n	80061de <state_machine+0x132>
			}
			else
			{
				Display_main_screen_empty();
 80061da:	f7fd fec1 	bl	8003f60 <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <state_machine+0x19c>)
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	d911      	bls.n	800620a <state_machine+0x15e>
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <state_machine+0x19c>)
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	2b9c      	cmp	r3, #156	; 0x9c
 80061ec:	d80d      	bhi.n	800620a <state_machine+0x15e>
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <state_machine+0x19c>)
 80061f0:	885b      	ldrh	r3, [r3, #2]
 80061f2:	2bc3      	cmp	r3, #195	; 0xc3
 80061f4:	d909      	bls.n	800620a <state_machine+0x15e>
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <state_machine+0x19c>)
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	2bea      	cmp	r3, #234	; 0xea
 80061fc:	d805      	bhi.n	800620a <state_machine+0x15e>
		{
			state_change_done = 0;
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <state_machine+0x198>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <state_machine+0x1a8>)
 8006206:	2204      	movs	r2, #4
 8006208:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <state_machine+0x19c>)
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	2ba3      	cmp	r3, #163	; 0xa3
 8006210:	f240 8358 	bls.w	80068c4 <state_machine+0x818>
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <state_machine+0x19c>)
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800621c:	f200 8352 	bhi.w	80068c4 <state_machine+0x818>
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <state_machine+0x19c>)
 8006222:	885b      	ldrh	r3, [r3, #2]
 8006224:	2bc3      	cmp	r3, #195	; 0xc3
 8006226:	f240 834d 	bls.w	80068c4 <state_machine+0x818>
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <state_machine+0x19c>)
 800622c:	885b      	ldrh	r3, [r3, #2]
 800622e:	2bea      	cmp	r3, #234	; 0xea
 8006230:	f200 8348 	bhi.w	80068c4 <state_machine+0x818>
		{
			state_change_done = 0;
 8006234:	4b03      	ldr	r3, [pc, #12]	; (8006244 <state_machine+0x198>)
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <state_machine+0x1a8>)
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006240:	e340      	b.n	80068c4 <state_machine+0x818>
 8006242:	bf00      	nop
 8006244:	2000700d 	.word	0x2000700d
 8006248:	20007014 	.word	0x20007014
 800624c:	20007040 	.word	0x20007040
 8006250:	20007068 	.word	0x20007068
 8006254:	2000700c 	.word	0x2000700c
 8006258:	20000150 	.word	0x20000150
 800625c:	20007050 	.word	0x20007050
 8006260:	20007054 	.word	0x20007054
 8006264:	2000706e 	.word	0x2000706e
 8006268:	20007058 	.word	0x20007058

	case services_list_screen:
		if(!state_change_done)
 800626c:	4b7d      	ldr	r3, [pc, #500]	; (8006464 <state_machine+0x3b8>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d114      	bne.n	800629e <state_machine+0x1f2>
		{
			services_list_to_display = get_dab_service_list();
 8006274:	f7fd fb94 	bl	80039a0 <get_dab_service_list>
 8006278:	4603      	mov	r3, r0
 800627a:	4a7b      	ldr	r2, [pc, #492]	; (8006468 <state_machine+0x3bc>)
 800627c:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 800627e:	f7fd fed5 	bl	800402c <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8006282:	4b7a      	ldr	r3, [pc, #488]	; (800646c <state_machine+0x3c0>)
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	4b78      	ldr	r3, [pc, #480]	; (8006468 <state_machine+0x3bc>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b79      	ldr	r3, [pc, #484]	; (8006470 <state_machine+0x3c4>)
 800628c:	9201      	str	r2, [sp, #4]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	9200      	str	r2, [sp, #0]
 8006292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006294:	f7fd ff8e 	bl	80041b4 <Display_stations_list_data>
			state_change_done = 1;
 8006298:	4b72      	ldr	r3, [pc, #456]	; (8006464 <state_machine+0x3b8>)
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800629e:	4b75      	ldr	r3, [pc, #468]	; (8006474 <state_machine+0x3c8>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d911      	bls.n	80062ca <state_machine+0x21e>
 80062a6:	4b73      	ldr	r3, [pc, #460]	; (8006474 <state_machine+0x3c8>)
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	2b9c      	cmp	r3, #156	; 0x9c
 80062ac:	d80d      	bhi.n	80062ca <state_machine+0x21e>
 80062ae:	4b71      	ldr	r3, [pc, #452]	; (8006474 <state_machine+0x3c8>)
 80062b0:	885b      	ldrh	r3, [r3, #2]
 80062b2:	2bc3      	cmp	r3, #195	; 0xc3
 80062b4:	d909      	bls.n	80062ca <state_machine+0x21e>
 80062b6:	4b6f      	ldr	r3, [pc, #444]	; (8006474 <state_machine+0x3c8>)
 80062b8:	885b      	ldrh	r3, [r3, #2]
 80062ba:	2bea      	cmp	r3, #234	; 0xea
 80062bc:	d805      	bhi.n	80062ca <state_machine+0x21e>
		{
			state_change_done = 0;
 80062be:	4b69      	ldr	r3, [pc, #420]	; (8006464 <state_machine+0x3b8>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 80062c4:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <state_machine+0x3cc>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80062ca:	4b6a      	ldr	r3, [pc, #424]	; (8006474 <state_machine+0x3c8>)
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	2ba3      	cmp	r3, #163	; 0xa3
 80062d0:	d912      	bls.n	80062f8 <state_machine+0x24c>
 80062d2:	4b68      	ldr	r3, [pc, #416]	; (8006474 <state_machine+0x3c8>)
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80062da:	d80d      	bhi.n	80062f8 <state_machine+0x24c>
 80062dc:	4b65      	ldr	r3, [pc, #404]	; (8006474 <state_machine+0x3c8>)
 80062de:	885b      	ldrh	r3, [r3, #2]
 80062e0:	2bc3      	cmp	r3, #195	; 0xc3
 80062e2:	d909      	bls.n	80062f8 <state_machine+0x24c>
 80062e4:	4b63      	ldr	r3, [pc, #396]	; (8006474 <state_machine+0x3c8>)
 80062e6:	885b      	ldrh	r3, [r3, #2]
 80062e8:	2bea      	cmp	r3, #234	; 0xea
 80062ea:	d805      	bhi.n	80062f8 <state_machine+0x24c>
		{
			state_change_done = 0;
 80062ec:	4b5d      	ldr	r3, [pc, #372]	; (8006464 <state_machine+0x3b8>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 80062f2:	4b61      	ldr	r3, [pc, #388]	; (8006478 <state_machine+0x3cc>)
 80062f4:	2203      	movs	r2, #3
 80062f6:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 80062f8:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <state_machine+0x3c8>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006300:	d930      	bls.n	8006364 <state_machine+0x2b8>
 8006302:	4b5c      	ldr	r3, [pc, #368]	; (8006474 <state_machine+0x3c8>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800630a:	d82b      	bhi.n	8006364 <state_machine+0x2b8>
 800630c:	4b59      	ldr	r3, [pc, #356]	; (8006474 <state_machine+0x3c8>)
 800630e:	885b      	ldrh	r3, [r3, #2]
 8006310:	2b14      	cmp	r3, #20
 8006312:	d927      	bls.n	8006364 <state_machine+0x2b8>
 8006314:	4b57      	ldr	r3, [pc, #348]	; (8006474 <state_machine+0x3c8>)
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	2b65      	cmp	r3, #101	; 0x65
 800631a:	d823      	bhi.n	8006364 <state_machine+0x2b8>
		{
			if(dab_management_to_display.total_services)
 800631c:	4b54      	ldr	r3, [pc, #336]	; (8006470 <state_machine+0x3c4>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01f      	beq.n	8006364 <state_machine+0x2b8>
			{
				srv_list_start_index--;
 8006324:	4b51      	ldr	r3, [pc, #324]	; (800646c <state_machine+0x3c0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3b01      	subs	r3, #1
 800632a:	4a50      	ldr	r2, [pc, #320]	; (800646c <state_machine+0x3c0>)
 800632c:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 800632e:	4b50      	ldr	r3, [pc, #320]	; (8006470 <state_machine+0x3c4>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	4b4d      	ldr	r3, [pc, #308]	; (800646c <state_machine+0x3c0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	db03      	blt.n	8006344 <state_machine+0x298>
 800633c:	4b4b      	ldr	r3, [pc, #300]	; (800646c <state_machine+0x3c0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da04      	bge.n	800634e <state_machine+0x2a2>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 8006344:	4b4a      	ldr	r3, [pc, #296]	; (8006470 <state_machine+0x3c4>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	4a48      	ldr	r2, [pc, #288]	; (800646c <state_machine+0x3c0>)
 800634c:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800634e:	4b47      	ldr	r3, [pc, #284]	; (800646c <state_machine+0x3c0>)
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	4b45      	ldr	r3, [pc, #276]	; (8006468 <state_machine+0x3bc>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b46      	ldr	r3, [pc, #280]	; (8006470 <state_machine+0x3c4>)
 8006358:	9201      	str	r2, [sp, #4]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	9200      	str	r2, [sp, #0]
 800635e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006360:	f7fd ff28 	bl	80041b4 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <state_machine+0x3c8>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800636c:	d92a      	bls.n	80063c4 <state_machine+0x318>
 800636e:	4b41      	ldr	r3, [pc, #260]	; (8006474 <state_machine+0x3c8>)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006376:	d825      	bhi.n	80063c4 <state_machine+0x318>
 8006378:	4b3e      	ldr	r3, [pc, #248]	; (8006474 <state_machine+0x3c8>)
 800637a:	885b      	ldrh	r3, [r3, #2]
 800637c:	2b6c      	cmp	r3, #108	; 0x6c
 800637e:	d921      	bls.n	80063c4 <state_machine+0x318>
 8006380:	4b3c      	ldr	r3, [pc, #240]	; (8006474 <state_machine+0x3c8>)
 8006382:	885b      	ldrh	r3, [r3, #2]
 8006384:	2bbd      	cmp	r3, #189	; 0xbd
 8006386:	d81d      	bhi.n	80063c4 <state_machine+0x318>
		{
			if(dab_management_to_display.total_services)
 8006388:	4b39      	ldr	r3, [pc, #228]	; (8006470 <state_machine+0x3c4>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d019      	beq.n	80063c4 <state_machine+0x318>
			{
				srv_list_start_index++;
 8006390:	4b36      	ldr	r3, [pc, #216]	; (800646c <state_machine+0x3c0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a35      	ldr	r2, [pc, #212]	; (800646c <state_machine+0x3c0>)
 8006398:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <state_machine+0x3c4>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	4b32      	ldr	r3, [pc, #200]	; (800646c <state_machine+0x3c0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	dc02      	bgt.n	80063ae <state_machine+0x302>
				{
					srv_list_start_index = 0;
 80063a8:	4b30      	ldr	r3, [pc, #192]	; (800646c <state_machine+0x3c0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80063ae:	4b2f      	ldr	r3, [pc, #188]	; (800646c <state_machine+0x3c0>)
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <state_machine+0x3bc>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4b2e      	ldr	r3, [pc, #184]	; (8006470 <state_machine+0x3c4>)
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	9200      	str	r2, [sp, #0]
 80063be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063c0:	f7fd fef8 	bl	80041b4 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 80063c4:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <state_machine+0x3c8>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	d91f      	bls.n	800640c <state_machine+0x360>
 80063cc:	4b29      	ldr	r3, [pc, #164]	; (8006474 <state_machine+0x3c8>)
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80063d4:	d81a      	bhi.n	800640c <state_machine+0x360>
 80063d6:	4b27      	ldr	r3, [pc, #156]	; (8006474 <state_machine+0x3c8>)
 80063d8:	885b      	ldrh	r3, [r3, #2]
 80063da:	2b14      	cmp	r3, #20
 80063dc:	d916      	bls.n	800640c <state_machine+0x360>
 80063de:	4b25      	ldr	r3, [pc, #148]	; (8006474 <state_machine+0x3c8>)
 80063e0:	885b      	ldrh	r3, [r3, #2]
 80063e2:	2b31      	cmp	r3, #49	; 0x31
 80063e4:	d812      	bhi.n	800640c <state_machine+0x360>
		{
			if(dab_management_to_display.total_services)
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <state_machine+0x3c4>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <state_machine+0x360>
			{
				state_change_done = 0;
 80063ee:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <state_machine+0x3b8>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <state_machine+0x3c0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fc fec8 	bl	8003190 <play_station>
				playing_state = playing;
 8006400:	4b1e      	ldr	r3, [pc, #120]	; (800647c <state_machine+0x3d0>)
 8006402:	2201      	movs	r2, #1
 8006404:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <state_machine+0x3cc>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <state_machine+0x3c8>)
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	2b05      	cmp	r3, #5
 8006412:	d943      	bls.n	800649c <state_machine+0x3f0>
 8006414:	4b17      	ldr	r3, [pc, #92]	; (8006474 <state_machine+0x3c8>)
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800641c:	d83e      	bhi.n	800649c <state_machine+0x3f0>
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <state_machine+0x3c8>)
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	2b37      	cmp	r3, #55	; 0x37
 8006424:	d93a      	bls.n	800649c <state_machine+0x3f0>
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <state_machine+0x3c8>)
 8006428:	885b      	ldrh	r3, [r3, #2]
 800642a:	2b54      	cmp	r3, #84	; 0x54
 800642c:	d836      	bhi.n	800649c <state_machine+0x3f0>
		{
			if(dab_management_to_display.total_services)
 800642e:	4b10      	ldr	r3, [pc, #64]	; (8006470 <state_machine+0x3c4>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d032      	beq.n	800649c <state_machine+0x3f0>
			{
				state_change_done = 0;
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <state_machine+0x3b8>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <state_machine+0x3c0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	4a0b      	ldr	r2, [pc, #44]	; (8006470 <state_machine+0x3c4>)
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	4293      	cmp	r3, r2
 8006448:	db1a      	blt.n	8006480 <state_machine+0x3d4>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 800644a:	4b08      	ldr	r3, [pc, #32]	; (800646c <state_machine+0x3c0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <state_machine+0x3c4>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	b2db      	uxtb	r3, r3
 8006458:	3301      	adds	r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	4618      	mov	r0, r3
 800645e:	f7fc fe97 	bl	8003190 <play_station>
 8006462:	e015      	b.n	8006490 <state_machine+0x3e4>
 8006464:	2000700d 	.word	0x2000700d
 8006468:	20007050 	.word	0x20007050
 800646c:	20007010 	.word	0x20007010
 8006470:	20007040 	.word	0x20007040
 8006474:	20007014 	.word	0x20007014
 8006478:	2000700c 	.word	0x2000700c
 800647c:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 8006480:	4b8d      	ldr	r3, [pc, #564]	; (80066b8 <state_machine+0x60c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	3301      	adds	r3, #1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4618      	mov	r0, r3
 800648c:	f7fc fe80 	bl	8003190 <play_station>
				}

				playing_state = playing;
 8006490:	4b8a      	ldr	r3, [pc, #552]	; (80066bc <state_machine+0x610>)
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006496:	4b8a      	ldr	r3, [pc, #552]	; (80066c0 <state_machine+0x614>)
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 800649c:	4b89      	ldr	r3, [pc, #548]	; (80066c4 <state_machine+0x618>)
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d935      	bls.n	8006510 <state_machine+0x464>
 80064a4:	4b87      	ldr	r3, [pc, #540]	; (80066c4 <state_machine+0x618>)
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80064ac:	d830      	bhi.n	8006510 <state_machine+0x464>
 80064ae:	4b85      	ldr	r3, [pc, #532]	; (80066c4 <state_machine+0x618>)
 80064b0:	885b      	ldrh	r3, [r3, #2]
 80064b2:	2b5a      	cmp	r3, #90	; 0x5a
 80064b4:	d92c      	bls.n	8006510 <state_machine+0x464>
 80064b6:	4b83      	ldr	r3, [pc, #524]	; (80066c4 <state_machine+0x618>)
 80064b8:	885b      	ldrh	r3, [r3, #2]
 80064ba:	2b77      	cmp	r3, #119	; 0x77
 80064bc:	d828      	bhi.n	8006510 <state_machine+0x464>
		{
			if(dab_management_to_display.total_services)
 80064be:	4b82      	ldr	r3, [pc, #520]	; (80066c8 <state_machine+0x61c>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d024      	beq.n	8006510 <state_machine+0x464>
			{
				state_change_done = 0;
 80064c6:	4b81      	ldr	r3, [pc, #516]	; (80066cc <state_machine+0x620>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 80064cc:	4b7a      	ldr	r3, [pc, #488]	; (80066b8 <state_machine+0x60c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3302      	adds	r3, #2
 80064d2:	4a7d      	ldr	r2, [pc, #500]	; (80066c8 <state_machine+0x61c>)
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	4293      	cmp	r3, r2
 80064d8:	db0c      	blt.n	80064f4 <state_machine+0x448>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 80064da:	4b77      	ldr	r3, [pc, #476]	; (80066b8 <state_machine+0x60c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	4b79      	ldr	r3, [pc, #484]	; (80066c8 <state_machine+0x61c>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	3302      	adds	r3, #2
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fc fe4f 	bl	8003190 <play_station>
 80064f2:	e007      	b.n	8006504 <state_machine+0x458>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 80064f4:	4b70      	ldr	r3, [pc, #448]	; (80066b8 <state_machine+0x60c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	3302      	adds	r3, #2
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fc fe46 	bl	8003190 <play_station>
				}

				playing_state = playing;
 8006504:	4b6d      	ldr	r3, [pc, #436]	; (80066bc <state_machine+0x610>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800650a:	4b6d      	ldr	r3, [pc, #436]	; (80066c0 <state_machine+0x614>)
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 8006510:	4b6c      	ldr	r3, [pc, #432]	; (80066c4 <state_machine+0x618>)
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	2b05      	cmp	r3, #5
 8006516:	d935      	bls.n	8006584 <state_machine+0x4d8>
 8006518:	4b6a      	ldr	r3, [pc, #424]	; (80066c4 <state_machine+0x618>)
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006520:	d830      	bhi.n	8006584 <state_machine+0x4d8>
 8006522:	4b68      	ldr	r3, [pc, #416]	; (80066c4 <state_machine+0x618>)
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	2b7d      	cmp	r3, #125	; 0x7d
 8006528:	d92c      	bls.n	8006584 <state_machine+0x4d8>
 800652a:	4b66      	ldr	r3, [pc, #408]	; (80066c4 <state_machine+0x618>)
 800652c:	885b      	ldrh	r3, [r3, #2]
 800652e:	2b9a      	cmp	r3, #154	; 0x9a
 8006530:	d828      	bhi.n	8006584 <state_machine+0x4d8>
		{
			if(dab_management_to_display.total_services)
 8006532:	4b65      	ldr	r3, [pc, #404]	; (80066c8 <state_machine+0x61c>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d024      	beq.n	8006584 <state_machine+0x4d8>
			{
				state_change_done = 0;
 800653a:	4b64      	ldr	r3, [pc, #400]	; (80066cc <state_machine+0x620>)
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 8006540:	4b5d      	ldr	r3, [pc, #372]	; (80066b8 <state_machine+0x60c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3303      	adds	r3, #3
 8006546:	4a60      	ldr	r2, [pc, #384]	; (80066c8 <state_machine+0x61c>)
 8006548:	7812      	ldrb	r2, [r2, #0]
 800654a:	4293      	cmp	r3, r2
 800654c:	db0c      	blt.n	8006568 <state_machine+0x4bc>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 800654e:	4b5a      	ldr	r3, [pc, #360]	; (80066b8 <state_machine+0x60c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	4b5c      	ldr	r3, [pc, #368]	; (80066c8 <state_machine+0x61c>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	3303      	adds	r3, #3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	4618      	mov	r0, r3
 8006562:	f7fc fe15 	bl	8003190 <play_station>
 8006566:	e007      	b.n	8006578 <state_machine+0x4cc>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 8006568:	4b53      	ldr	r3, [pc, #332]	; (80066b8 <state_machine+0x60c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	3303      	adds	r3, #3
 8006570:	b2db      	uxtb	r3, r3
 8006572:	4618      	mov	r0, r3
 8006574:	f7fc fe0c 	bl	8003190 <play_station>
				}

				playing_state = playing;
 8006578:	4b50      	ldr	r3, [pc, #320]	; (80066bc <state_machine+0x610>)
 800657a:	2201      	movs	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800657e:	4b50      	ldr	r3, [pc, #320]	; (80066c0 <state_machine+0x614>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 8006584:	4b4f      	ldr	r3, [pc, #316]	; (80066c4 <state_machine+0x618>)
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	2b05      	cmp	r3, #5
 800658a:	f240 819d 	bls.w	80068c8 <state_machine+0x81c>
 800658e:	4b4d      	ldr	r3, [pc, #308]	; (80066c4 <state_machine+0x618>)
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006596:	f200 8197 	bhi.w	80068c8 <state_machine+0x81c>
 800659a:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <state_machine+0x618>)
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	2ba0      	cmp	r3, #160	; 0xa0
 80065a0:	f240 8192 	bls.w	80068c8 <state_machine+0x81c>
 80065a4:	4b47      	ldr	r3, [pc, #284]	; (80066c4 <state_machine+0x618>)
 80065a6:	885b      	ldrh	r3, [r3, #2]
 80065a8:	2bbd      	cmp	r3, #189	; 0xbd
 80065aa:	f200 818d 	bhi.w	80068c8 <state_machine+0x81c>
		{
			if(dab_management_to_display.total_services)
 80065ae:	4b46      	ldr	r3, [pc, #280]	; (80066c8 <state_machine+0x61c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8188 	beq.w	80068c8 <state_machine+0x81c>
			{
				state_change_done = 0;
 80065b8:	4b44      	ldr	r3, [pc, #272]	; (80066cc <state_machine+0x620>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 80065be:	4b3e      	ldr	r3, [pc, #248]	; (80066b8 <state_machine+0x60c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <state_machine+0x61c>)
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	db0c      	blt.n	80065e6 <state_machine+0x53a>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 80065cc:	4b3a      	ldr	r3, [pc, #232]	; (80066b8 <state_machine+0x60c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b3d      	ldr	r3, [pc, #244]	; (80066c8 <state_machine+0x61c>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	3304      	adds	r3, #4
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fc fdd6 	bl	8003190 <play_station>
 80065e4:	e007      	b.n	80065f6 <state_machine+0x54a>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 80065e6:	4b34      	ldr	r3, [pc, #208]	; (80066b8 <state_machine+0x60c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	3304      	adds	r3, #4
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fc fdcd 	bl	8003190 <play_station>
				}

				playing_state = playing;
 80065f6:	4b31      	ldr	r3, [pc, #196]	; (80066bc <state_machine+0x610>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80065fc:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <state_machine+0x614>)
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8006602:	e161      	b.n	80068c8 <state_machine+0x81c>

	case signal_info:
		if(!state_change_done)
 8006604:	4b31      	ldr	r3, [pc, #196]	; (80066cc <state_machine+0x620>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <state_machine+0x56a>
		{
			Display_dab_digrad_status_background();
 800660c:	f7fe f96e 	bl	80048ec <Display_dab_digrad_status_background>
			state_change_done = 1;
 8006610:	4b2e      	ldr	r3, [pc, #184]	; (80066cc <state_machine+0x620>)
 8006612:	2201      	movs	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8006616:	4c2e      	ldr	r4, [pc, #184]	; (80066d0 <state_machine+0x624>)
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	4618      	mov	r0, r3
 800661e:	f7fb fb1b 	bl	8001c58 <Si468x_dab_digrad_status>
 8006622:	4625      	mov	r5, r4
 8006624:	f107 0408 	add.w	r4, r7, #8
 8006628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800662a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800662c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800662e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006630:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006634:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8006638:	4e25      	ldr	r6, [pc, #148]	; (80066d0 <state_machine+0x624>)
 800663a:	466d      	mov	r5, sp
 800663c:	f106 0410 	add.w	r4, r6, #16
 8006640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006648:	e885 0003 	stmia.w	r5, {r0, r1}
 800664c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006650:	f7fe fae4 	bl	8004c1c <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <state_machine+0x618>)
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	2b05      	cmp	r3, #5
 800665a:	d911      	bls.n	8006680 <state_machine+0x5d4>
 800665c:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <state_machine+0x618>)
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	2b9c      	cmp	r3, #156	; 0x9c
 8006662:	d80d      	bhi.n	8006680 <state_machine+0x5d4>
 8006664:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <state_machine+0x618>)
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2bc3      	cmp	r3, #195	; 0xc3
 800666a:	d909      	bls.n	8006680 <state_machine+0x5d4>
 800666c:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <state_machine+0x618>)
 800666e:	885b      	ldrh	r3, [r3, #2]
 8006670:	2bea      	cmp	r3, #234	; 0xea
 8006672:	d805      	bhi.n	8006680 <state_machine+0x5d4>
		{
			state_change_done = 0;
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <state_machine+0x620>)
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <state_machine+0x614>)
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <state_machine+0x618>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	2ba3      	cmp	r3, #163	; 0xa3
 8006686:	f240 8121 	bls.w	80068cc <state_machine+0x820>
 800668a:	4b0e      	ldr	r3, [pc, #56]	; (80066c4 <state_machine+0x618>)
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006692:	f200 811b 	bhi.w	80068cc <state_machine+0x820>
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <state_machine+0x618>)
 8006698:	885b      	ldrh	r3, [r3, #2]
 800669a:	2bc3      	cmp	r3, #195	; 0xc3
 800669c:	f240 8116 	bls.w	80068cc <state_machine+0x820>
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <state_machine+0x618>)
 80066a2:	885b      	ldrh	r3, [r3, #2]
 80066a4:	2bea      	cmp	r3, #234	; 0xea
 80066a6:	f200 8111 	bhi.w	80068cc <state_machine+0x820>
		{
			state_change_done = 0;
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <state_machine+0x620>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <state_machine+0x614>)
 80066b2:	2204      	movs	r2, #4
 80066b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80066b6:	e109      	b.n	80068cc <state_machine+0x820>
 80066b8:	20007010 	.word	0x20007010
 80066bc:	20000150 	.word	0x20000150
 80066c0:	2000700c 	.word	0x2000700c
 80066c4:	20007014 	.word	0x20007014
 80066c8:	20007040 	.word	0x20007040
 80066cc:	2000700d 	.word	0x2000700d
 80066d0:	20007018 	.word	0x20007018

	case scanning:
		if(!state_change_done)
 80066d4:	4b82      	ldr	r3, [pc, #520]	; (80068e0 <state_machine+0x834>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d116      	bne.n	800670a <state_machine+0x65e>
		{
			playing_state = not_playing;
 80066dc:	4b81      	ldr	r3, [pc, #516]	; (80068e4 <state_machine+0x838>)
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 80066e2:	f7fd ff01 	bl	80044e8 <Display_scanning_screen_background>
			state_change_done = 1;
 80066e6:	4b7e      	ldr	r3, [pc, #504]	; (80068e0 <state_machine+0x834>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 80066ec:	f7fb fee0 	bl	80024b0 <Si468x_dab_full_scan>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b7c      	ldr	r3, [pc, #496]	; (80068e8 <state_machine+0x83c>)
 80066f6:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 80066f8:	4b7b      	ldr	r3, [pc, #492]	; (80068e8 <state_machine+0x83c>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <state_machine+0x65e>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006700:	f7fe f8be 	bl	8004880 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8006704:	4b78      	ldr	r3, [pc, #480]	; (80068e8 <state_machine+0x83c>)
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800670a:	4b78      	ldr	r3, [pc, #480]	; (80068ec <state_machine+0x840>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	2b05      	cmp	r3, #5
 8006710:	f240 80de 	bls.w	80068d0 <state_machine+0x824>
 8006714:	4b75      	ldr	r3, [pc, #468]	; (80068ec <state_machine+0x840>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800671c:	f200 80d8 	bhi.w	80068d0 <state_machine+0x824>
 8006720:	4b72      	ldr	r3, [pc, #456]	; (80068ec <state_machine+0x840>)
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	2bc3      	cmp	r3, #195	; 0xc3
 8006726:	f240 80d3 	bls.w	80068d0 <state_machine+0x824>
 800672a:	4b70      	ldr	r3, [pc, #448]	; (80068ec <state_machine+0x840>)
 800672c:	885b      	ldrh	r3, [r3, #2]
 800672e:	2bea      	cmp	r3, #234	; 0xea
 8006730:	f200 80ce 	bhi.w	80068d0 <state_machine+0x824>
		{
			scan_cancel_flag = 1;
 8006734:	4b6e      	ldr	r3, [pc, #440]	; (80068f0 <state_machine+0x844>)
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 800673a:	4b69      	ldr	r3, [pc, #420]	; (80068e0 <state_machine+0x834>)
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006740:	4b6c      	ldr	r3, [pc, #432]	; (80068f4 <state_machine+0x848>)
 8006742:	2204      	movs	r2, #4
 8006744:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006746:	e0c3      	b.n	80068d0 <state_machine+0x824>

	case settings:
		if(!state_change_done)
 8006748:	4b65      	ldr	r3, [pc, #404]	; (80068e0 <state_machine+0x834>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <state_machine+0x6b4>
		{
			Display_settings_screen_background();
 8006750:	f7fe fdce 	bl	80052f0 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 8006754:	4b66      	ldr	r3, [pc, #408]	; (80068f0 <state_machine+0x844>)
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 800675a:	4b61      	ldr	r3, [pc, #388]	; (80068e0 <state_machine+0x834>)
 800675c:	2201      	movs	r2, #1
 800675e:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 8006760:	4b65      	ldr	r3, [pc, #404]	; (80068f8 <state_machine+0x84c>)
 8006762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006764:	f7fe febc 	bl	80054e0 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006768:	4b60      	ldr	r3, [pc, #384]	; (80068ec <state_machine+0x840>)
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	2ba3      	cmp	r3, #163	; 0xa3
 800676e:	d91e      	bls.n	80067ae <state_machine+0x702>
 8006770:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <state_machine+0x840>)
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006778:	d819      	bhi.n	80067ae <state_machine+0x702>
 800677a:	4b5c      	ldr	r3, [pc, #368]	; (80068ec <state_machine+0x840>)
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	2b3c      	cmp	r3, #60	; 0x3c
 8006780:	d915      	bls.n	80067ae <state_machine+0x702>
 8006782:	4b5a      	ldr	r3, [pc, #360]	; (80068ec <state_machine+0x840>)
 8006784:	885b      	ldrh	r3, [r3, #2]
 8006786:	2b63      	cmp	r3, #99	; 0x63
 8006788:	d811      	bhi.n	80067ae <state_machine+0x702>
		{
			dab_management_to_display.audio_volume += 2;
 800678a:	4b5b      	ldr	r3, [pc, #364]	; (80068f8 <state_machine+0x84c>)
 800678c:	7b9b      	ldrb	r3, [r3, #14]
 800678e:	3302      	adds	r3, #2
 8006790:	b2da      	uxtb	r2, r3
 8006792:	4b59      	ldr	r3, [pc, #356]	; (80068f8 <state_machine+0x84c>)
 8006794:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 8006796:	4b58      	ldr	r3, [pc, #352]	; (80068f8 <state_machine+0x84c>)
 8006798:	7b9b      	ldrb	r3, [r3, #14]
 800679a:	2b3f      	cmp	r3, #63	; 0x3f
 800679c:	d902      	bls.n	80067a4 <state_machine+0x6f8>
			{
				dab_management_to_display.audio_volume = 63;
 800679e:	4b56      	ldr	r3, [pc, #344]	; (80068f8 <state_machine+0x84c>)
 80067a0:	223f      	movs	r2, #63	; 0x3f
 80067a2:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80067a4:	4b54      	ldr	r3, [pc, #336]	; (80068f8 <state_machine+0x84c>)
 80067a6:	7b9b      	ldrb	r3, [r3, #14]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fc fcbb 	bl	8003124 <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80067ae:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <state_machine+0x840>)
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	d91d      	bls.n	80067f2 <state_machine+0x746>
 80067b6:	4b4d      	ldr	r3, [pc, #308]	; (80068ec <state_machine+0x840>)
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	2b9c      	cmp	r3, #156	; 0x9c
 80067bc:	d819      	bhi.n	80067f2 <state_machine+0x746>
 80067be:	4b4b      	ldr	r3, [pc, #300]	; (80068ec <state_machine+0x840>)
 80067c0:	885b      	ldrh	r3, [r3, #2]
 80067c2:	2b3c      	cmp	r3, #60	; 0x3c
 80067c4:	d915      	bls.n	80067f2 <state_machine+0x746>
 80067c6:	4b49      	ldr	r3, [pc, #292]	; (80068ec <state_machine+0x840>)
 80067c8:	885b      	ldrh	r3, [r3, #2]
 80067ca:	2b63      	cmp	r3, #99	; 0x63
 80067cc:	d811      	bhi.n	80067f2 <state_machine+0x746>
		{
			dab_management_to_display.audio_volume -= 2;
 80067ce:	4b4a      	ldr	r3, [pc, #296]	; (80068f8 <state_machine+0x84c>)
 80067d0:	7b9b      	ldrb	r3, [r3, #14]
 80067d2:	3b02      	subs	r3, #2
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	4b48      	ldr	r3, [pc, #288]	; (80068f8 <state_machine+0x84c>)
 80067d8:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 80067da:	4b47      	ldr	r3, [pc, #284]	; (80068f8 <state_machine+0x84c>)
 80067dc:	7b9b      	ldrb	r3, [r3, #14]
 80067de:	2b3f      	cmp	r3, #63	; 0x3f
 80067e0:	d902      	bls.n	80067e8 <state_machine+0x73c>
			{
				dab_management_to_display.audio_volume = 0;
 80067e2:	4b45      	ldr	r3, [pc, #276]	; (80068f8 <state_machine+0x84c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80067e8:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <state_machine+0x84c>)
 80067ea:	7b9b      	ldrb	r3, [r3, #14]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fc fc99 	bl	8003124 <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 80067f2:	4b3e      	ldr	r3, [pc, #248]	; (80068ec <state_machine+0x840>)
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	2ba3      	cmp	r3, #163	; 0xa3
 80067f8:	d907      	bls.n	800680a <state_machine+0x75e>
 80067fa:	4b3c      	ldr	r3, [pc, #240]	; (80068ec <state_machine+0x840>)
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006802:	d802      	bhi.n	800680a <state_machine+0x75e>
 8006804:	4b39      	ldr	r3, [pc, #228]	; (80068ec <state_machine+0x840>)
 8006806:	885b      	ldrh	r3, [r3, #2]
 8006808:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800680a:	4b38      	ldr	r3, [pc, #224]	; (80068ec <state_machine+0x840>)
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	2b05      	cmp	r3, #5
 8006810:	d906      	bls.n	8006820 <state_machine+0x774>
 8006812:	4b36      	ldr	r3, [pc, #216]	; (80068ec <state_machine+0x840>)
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	2b9c      	cmp	r3, #156	; 0x9c
 8006818:	d802      	bhi.n	8006820 <state_machine+0x774>
 800681a:	4b34      	ldr	r3, [pc, #208]	; (80068ec <state_machine+0x840>)
 800681c:	885b      	ldrh	r3, [r3, #2]
 800681e:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006820:	4b32      	ldr	r3, [pc, #200]	; (80068ec <state_machine+0x840>)
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	2b05      	cmp	r3, #5
 8006826:	d911      	bls.n	800684c <state_machine+0x7a0>
 8006828:	4b30      	ldr	r3, [pc, #192]	; (80068ec <state_machine+0x840>)
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	2b9c      	cmp	r3, #156	; 0x9c
 800682e:	d80d      	bhi.n	800684c <state_machine+0x7a0>
 8006830:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <state_machine+0x840>)
 8006832:	885b      	ldrh	r3, [r3, #2]
 8006834:	2b96      	cmp	r3, #150	; 0x96
 8006836:	d909      	bls.n	800684c <state_machine+0x7a0>
 8006838:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <state_machine+0x840>)
 800683a:	885b      	ldrh	r3, [r3, #2]
 800683c:	2bbd      	cmp	r3, #189	; 0xbd
 800683e:	d805      	bhi.n	800684c <state_machine+0x7a0>
		{
			state_change_done = 0;
 8006840:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <state_machine+0x834>)
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 8006846:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <state_machine+0x848>)
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 800684c:	4b27      	ldr	r3, [pc, #156]	; (80068ec <state_machine+0x840>)
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	2ba3      	cmp	r3, #163	; 0xa3
 8006852:	d907      	bls.n	8006864 <state_machine+0x7b8>
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <state_machine+0x840>)
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800685c:	d802      	bhi.n	8006864 <state_machine+0x7b8>
 800685e:	4b23      	ldr	r3, [pc, #140]	; (80068ec <state_machine+0x840>)
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006864:	4b21      	ldr	r3, [pc, #132]	; (80068ec <state_machine+0x840>)
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	2b05      	cmp	r3, #5
 800686a:	d911      	bls.n	8006890 <state_machine+0x7e4>
 800686c:	4b1f      	ldr	r3, [pc, #124]	; (80068ec <state_machine+0x840>)
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	2b9c      	cmp	r3, #156	; 0x9c
 8006872:	d80d      	bhi.n	8006890 <state_machine+0x7e4>
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <state_machine+0x840>)
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	2bc3      	cmp	r3, #195	; 0xc3
 800687a:	d909      	bls.n	8006890 <state_machine+0x7e4>
 800687c:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <state_machine+0x840>)
 800687e:	885b      	ldrh	r3, [r3, #2]
 8006880:	2bea      	cmp	r3, #234	; 0xea
 8006882:	d805      	bhi.n	8006890 <state_machine+0x7e4>
		{
			state_change_done = 0;
 8006884:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <state_machine+0x834>)
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <state_machine+0x848>)
 800688c:	2203      	movs	r2, #3
 800688e:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006890:	4b16      	ldr	r3, [pc, #88]	; (80068ec <state_machine+0x840>)
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	2ba3      	cmp	r3, #163	; 0xa3
 8006896:	d91d      	bls.n	80068d4 <state_machine+0x828>
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <state_machine+0x840>)
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80068a0:	d818      	bhi.n	80068d4 <state_machine+0x828>
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <state_machine+0x840>)
 80068a4:	885b      	ldrh	r3, [r3, #2]
 80068a6:	2bc3      	cmp	r3, #195	; 0xc3
 80068a8:	d914      	bls.n	80068d4 <state_machine+0x828>
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <state_machine+0x840>)
 80068ac:	885b      	ldrh	r3, [r3, #2]
 80068ae:	2bea      	cmp	r3, #234	; 0xea
 80068b0:	d810      	bhi.n	80068d4 <state_machine+0x828>
		{
			state_change_done = 0;
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <state_machine+0x834>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 80068b8:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <state_machine+0x848>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
		}


		break;
 80068be:	e009      	b.n	80068d4 <state_machine+0x828>

	default:
		break;
 80068c0:	bf00      	nop
 80068c2:	e008      	b.n	80068d6 <state_machine+0x82a>
		break;
 80068c4:	bf00      	nop
 80068c6:	e006      	b.n	80068d6 <state_machine+0x82a>
		break;
 80068c8:	bf00      	nop
 80068ca:	e004      	b.n	80068d6 <state_machine+0x82a>
		break;
 80068cc:	bf00      	nop
 80068ce:	e002      	b.n	80068d6 <state_machine+0x82a>
		break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <state_machine+0x82a>
		break;
 80068d4:	bf00      	nop
	}
}
 80068d6:	bf00      	nop
 80068d8:	3744      	adds	r7, #68	; 0x44
 80068da:	46bd      	mov	sp, r7
 80068dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000700d 	.word	0x2000700d
 80068e4:	20000150 	.word	0x20000150
 80068e8:	2000706d 	.word	0x2000706d
 80068ec:	20007014 	.word	0x20007014
 80068f0:	2000706c 	.word	0x2000706c
 80068f4:	2000700c 	.word	0x2000700c
 80068f8:	20007040 	.word	0x20007040

080068fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	4b10      	ldr	r3, [pc, #64]	; (8006948 <HAL_MspInit+0x4c>)
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	4a0f      	ldr	r2, [pc, #60]	; (8006948 <HAL_MspInit+0x4c>)
 800690c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006910:	6453      	str	r3, [r2, #68]	; 0x44
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <HAL_MspInit+0x4c>)
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_MspInit+0x4c>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	4a08      	ldr	r2, [pc, #32]	; (8006948 <HAL_MspInit+0x4c>)
 8006928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692c:	6413      	str	r3, [r2, #64]	; 0x40
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_MspInit+0x4c>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40023800 	.word	0x40023800

0800694c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006950:	e7fe      	b.n	8006950 <NMI_Handler+0x4>

08006952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006952:	b480      	push	{r7}
 8006954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006956:	e7fe      	b.n	8006956 <HardFault_Handler+0x4>

08006958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800695c:	e7fe      	b.n	800695c <MemManage_Handler+0x4>

0800695e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800695e:	b480      	push	{r7}
 8006960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006962:	e7fe      	b.n	8006962 <BusFault_Handler+0x4>

08006964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006968:	e7fe      	b.n	8006968 <UsageFault_Handler+0x4>

0800696a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006986:	b480      	push	{r7}
 8006988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800698a:	bf00      	nop
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006998:	f000 fd22 	bl	80073e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}

080069a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80069a4:	4802      	ldr	r0, [pc, #8]	; (80069b0 <DMA1_Stream4_IRQHandler+0x10>)
 80069a6:	f000 ff41 	bl	800782c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20006fac 	.word	0x20006fac

080069b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80069b8:	4802      	ldr	r0, [pc, #8]	; (80069c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80069ba:	f005 fc22 	bl	800c202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200070b8 	.word	0x200070b8

080069c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80069cc:	4802      	ldr	r0, [pc, #8]	; (80069d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80069ce:	f005 fc18 	bl	800c202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20007100 	.word	0x20007100

080069dc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80069e0:	4802      	ldr	r0, [pc, #8]	; (80069ec <SPI2_IRQHandler+0x10>)
 80069e2:	f005 f8bd 	bl	800bb60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20006f54 	.word	0x20006f54

080069f0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80069f4:	4802      	ldr	r0, [pc, #8]	; (8006a00 <I2C3_EV_IRQHandler+0x10>)
 80069f6:	f001 ff95 	bl	8008924 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20006ea8 	.word	0x20006ea8

08006a04 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006a08:	4802      	ldr	r0, [pc, #8]	; (8006a14 <I2C3_ER_IRQHandler+0x10>)
 8006a0a:	f002 f8de 	bl	8008bca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20006ea8 	.word	0x20006ea8

08006a18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <SystemInit+0x20>)
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a36:	4a05      	ldr	r2, [pc, #20]	; (8006a4c <SystemInit+0x20>)
 8006a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a40:	bf00      	nop
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	e000ed00 	.word	0xe000ed00

08006a50 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a56:	f107 0320 	add.w	r3, r7, #32
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	60da      	str	r2, [r3, #12]
 8006a6c:	611a      	str	r2, [r3, #16]
 8006a6e:	615a      	str	r2, [r3, #20]
 8006a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a72:	4b22      	ldr	r3, [pc, #136]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a74:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <MX_TIM3_Init+0xb0>)
 8006a76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006a98:	4818      	ldr	r0, [pc, #96]	; (8006afc <MX_TIM3_Init+0xac>)
 8006a9a:	f005 fb63 	bl	800c164 <HAL_TIM_PWM_Init>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006aa4:	f7ff f9d8 	bl	8005e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ab0:	f107 0320 	add.w	r3, r7, #32
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4811      	ldr	r0, [pc, #68]	; (8006afc <MX_TIM3_Init+0xac>)
 8006ab8:	f005 ffe6 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006ac2:	f7ff f9c9 	bl	8005e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ac6:	2360      	movs	r3, #96	; 0x60
 8006ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	2208      	movs	r2, #8
 8006ada:	4619      	mov	r1, r3
 8006adc:	4807      	ldr	r0, [pc, #28]	; (8006afc <MX_TIM3_Init+0xac>)
 8006ade:	f005 fc99 	bl	800c414 <HAL_TIM_PWM_ConfigChannel>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006ae8:	f7ff f9b6 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006aec:	4803      	ldr	r0, [pc, #12]	; (8006afc <MX_TIM3_Init+0xac>)
 8006aee:	f000 f8b9 	bl	8006c64 <HAL_TIM_MspPostInit>

}
 8006af2:	bf00      	nop
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20007070 	.word	0x20007070
 8006b00:	40000400 	.word	0x40000400

08006b04 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006b08:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b0a:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <MX_TIM10_Init+0x44>)
 8006b0c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b10:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006b14:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b1e:	f240 2257 	movw	r2, #599	; 0x257
 8006b22:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006b30:	4804      	ldr	r0, [pc, #16]	; (8006b44 <MX_TIM10_Init+0x40>)
 8006b32:	f005 fa57 	bl	800bfe4 <HAL_TIM_Base_Init>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006b3c:	f7ff f98c 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200070b8 	.word	0x200070b8
 8006b48:	40014400 	.word	0x40014400

08006b4c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006b50:	4b0e      	ldr	r3, [pc, #56]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b52:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <MX_TIM11_Init+0x44>)
 8006b54:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b58:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006b5c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b66:	f240 5213 	movw	r2, #1299	; 0x513
 8006b6a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b6c:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006b78:	4804      	ldr	r0, [pc, #16]	; (8006b8c <MX_TIM11_Init+0x40>)
 8006b7a:	f005 fa33 	bl	800bfe4 <HAL_TIM_Base_Init>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8006b84:	f7ff f968 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006b88:	bf00      	nop
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20007100 	.word	0x20007100
 8006b90:	40014800 	.word	0x40014800

08006b94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0b      	ldr	r2, [pc, #44]	; (8006bd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10d      	bne.n	8006bc2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8006bb0:	f043 0302 	orr.w	r3, r3, #2
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb6:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40023800 	.word	0x40023800

08006bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1c      	ldr	r2, [pc, #112]	; (8006c58 <HAL_TIM_Base_MspInit+0x80>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d116      	bne.n	8006c18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <HAL_TIM_Base_MspInit+0x84>)
 8006bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	; (8006c5c <HAL_TIM_Base_MspInit+0x84>)
 8006bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bfa:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <HAL_TIM_Base_MspInit+0x84>)
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006c06:	2200      	movs	r2, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2019      	movs	r0, #25
 8006c0c:	f000 fd07 	bl	800761e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006c10:	2019      	movs	r0, #25
 8006c12:	f000 fd20 	bl	8007656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006c16:	e01a      	b.n	8006c4e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a10      	ldr	r2, [pc, #64]	; (8006c60 <HAL_TIM_Base_MspInit+0x88>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d115      	bne.n	8006c4e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <HAL_TIM_Base_MspInit+0x84>)
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	4a0c      	ldr	r2, [pc, #48]	; (8006c5c <HAL_TIM_Base_MspInit+0x84>)
 8006c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c30:	6453      	str	r3, [r2, #68]	; 0x44
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_TIM_Base_MspInit+0x84>)
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c3a:	60bb      	str	r3, [r7, #8]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2100      	movs	r1, #0
 8006c42:	201a      	movs	r0, #26
 8006c44:	f000 fceb 	bl	800761e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006c48:	201a      	movs	r0, #26
 8006c4a:	f000 fd04 	bl	8007656 <HAL_NVIC_EnableIRQ>
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40014800 	.word	0x40014800

08006c64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	609a      	str	r2, [r3, #8]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_TIM_MspPostInit+0x68>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d11e      	bne.n	8006cc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <HAL_TIM_MspPostInit+0x6c>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	4a10      	ldr	r2, [pc, #64]	; (8006cd0 <HAL_TIM_MspPostInit+0x6c>)
 8006c90:	f043 0304 	orr.w	r3, r3, #4
 8006c94:	6313      	str	r3, [r2, #48]	; 0x30
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <HAL_TIM_MspPostInit+0x6c>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8006ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ca6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <HAL_TIM_MspPostInit+0x70>)
 8006cc0:	f000 fffe 	bl	8007cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006cc4:	bf00      	nop
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40020800 	.word	0x40020800

08006cd8 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8006cde:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <Touch_read+0x98>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <Touch_read+0x98>)
 8006ce8:	7c1b      	ldrb	r3, [r3, #16]
 8006cea:	b25b      	sxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da2d      	bge.n	8006d4c <Touch_read+0x74>
	{
		xtemp = TP_Read_XOY(0xD0);
 8006cf0:	20d0      	movs	r0, #208	; 0xd0
 8006cf2:	f000 f8e5 	bl	8006ec0 <TP_Read_XOY>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <Touch_read+0x9c>)
 8006cfc:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8006cfe:	2090      	movs	r0, #144	; 0x90
 8006d00:	f000 f8de 	bl	8006ec0 <TP_Read_XOY>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <Touch_read+0xa0>)
 8006d0a:	801a      	strh	r2, [r3, #0]
			touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
			touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
		}
		else
		{
			touch_coordinates.x = 320 * (ytemp - 350) / (3900-350);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <Touch_read+0xa0>)
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	019b      	lsls	r3, r3, #6
 8006d1c:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <Touch_read+0xa4>)
 8006d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8006d22:	441a      	add	r2, r3
 8006d24:	12d2      	asrs	r2, r2, #11
 8006d26:	17db      	asrs	r3, r3, #31
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	803b      	strh	r3, [r7, #0]
			touch_coordinates.y = 230 * (xtemp - 240) / (3800-230);
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <Touch_read+0x9c>)
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	3bf0      	subs	r3, #240	; 0xf0
 8006d34:	22e6      	movs	r2, #230	; 0xe6
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <Touch_read+0xa8>)
 8006d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8006d40:	1252      	asrs	r2, r2, #9
 8006d42:	17db      	asrs	r3, r3, #31
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	807b      	strh	r3, [r7, #2]
 8006d4a:	e003      	b.n	8006d54 <Touch_read+0x7c>

	}

	else
	{
		touch_coordinates.x = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	88ba      	ldrh	r2, [r7, #4]
 8006d5c:	f362 030f 	bfi	r3, r2, #0, #16
 8006d60:	88fa      	ldrh	r2, [r7, #6]
 8006d62:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000158 	.word	0x20000158
 8006d74:	20007148 	.word	0x20007148
 8006d78:	2000714a 	.word	0x2000714a
 8006d7c:	93afcf8b 	.word	0x93afcf8b
 8006d80:	24b70025 	.word	0x24b70025

08006d84 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
 8006d96:	e021      	b.n	8006ddc <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8006d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da05      	bge.n	8006dac <TP_Write_Byte+0x28>
			T_DIN_ON;
 8006da0:	2201      	movs	r2, #1
 8006da2:	2120      	movs	r1, #32
 8006da4:	4811      	ldr	r0, [pc, #68]	; (8006dec <TP_Write_Byte+0x68>)
 8006da6:	f001 f93f 	bl	8008028 <HAL_GPIO_WritePin>
 8006daa:	e004      	b.n	8006db6 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8006dac:	2200      	movs	r2, #0
 8006dae:	2120      	movs	r1, #32
 8006db0:	480e      	ldr	r0, [pc, #56]	; (8006dec <TP_Write_Byte+0x68>)
 8006db2:	f001 f939 	bl	8008028 <HAL_GPIO_WritePin>

		num <<= 1;
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2108      	movs	r1, #8
 8006dc0:	480a      	ldr	r0, [pc, #40]	; (8006dec <TP_Write_Byte+0x68>)
 8006dc2:	f001 f931 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006dc6:	2001      	movs	r0, #1
 8006dc8:	f000 fb2a 	bl	8007420 <HAL_Delay>
		T_CLK_ON;
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2108      	movs	r1, #8
 8006dd0:	4806      	ldr	r0, [pc, #24]	; (8006dec <TP_Write_Byte+0x68>)
 8006dd2:	f001 f929 	bl	8008028 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	d9da      	bls.n	8006d98 <TP_Write_Byte+0x14>
	}
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40020400 	.word	0x40020400

08006df0 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8006e02:	2200      	movs	r2, #0
 8006e04:	2108      	movs	r1, #8
 8006e06:	482c      	ldr	r0, [pc, #176]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e08:	f001 f90e 	bl	8008028 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2120      	movs	r1, #32
 8006e10:	4829      	ldr	r0, [pc, #164]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e12:	f001 f909 	bl	8008028 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8006e16:	2200      	movs	r2, #0
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	4828      	ldr	r0, [pc, #160]	; (8006ebc <TP_Read_AD+0xcc>)
 8006e1c:	f001 f904 	bl	8008028 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff ffae 	bl	8006d84 <TP_Write_Byte>
	HAL_Delay(1);
 8006e28:	2001      	movs	r0, #1
 8006e2a:	f000 faf9 	bl	8007420 <HAL_Delay>
	T_CLK_OFF;
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2108      	movs	r1, #8
 8006e32:	4821      	ldr	r0, [pc, #132]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e34:	f001 f8f8 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f000 faf1 	bl	8007420 <HAL_Delay>
	T_CLK_ON;
 8006e3e:	2201      	movs	r2, #1
 8006e40:	2108      	movs	r1, #8
 8006e42:	481d      	ldr	r0, [pc, #116]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e44:	f001 f8f0 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006e48:	2001      	movs	r0, #1
 8006e4a:	f000 fae9 	bl	8007420 <HAL_Delay>
	T_CLK_OFF;
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2108      	movs	r1, #8
 8006e52:	4819      	ldr	r0, [pc, #100]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e54:	f001 f8e8 	bl	8008028 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
 8006e5c:	e01c      	b.n	8006e98 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8006e5e:	89bb      	ldrh	r3, [r7, #12]
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8006e64:	2200      	movs	r2, #0
 8006e66:	2108      	movs	r1, #8
 8006e68:	4813      	ldr	r0, [pc, #76]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e6a:	f001 f8dd 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006e6e:	2001      	movs	r0, #1
 8006e70:	f000 fad6 	bl	8007420 <HAL_Delay>
		T_CLK_ON;
 8006e74:	2201      	movs	r2, #1
 8006e76:	2108      	movs	r1, #8
 8006e78:	480f      	ldr	r0, [pc, #60]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e7a:	f001 f8d5 	bl	8008028 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8006e7e:	2110      	movs	r1, #16
 8006e80:	480d      	ldr	r0, [pc, #52]	; (8006eb8 <TP_Read_AD+0xc8>)
 8006e82:	f001 f8b9 	bl	8007ff8 <HAL_GPIO_ReadPin>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <TP_Read_AD+0xa2>
 8006e8c:	89bb      	ldrh	r3, [r7, #12]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	3301      	adds	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d9df      	bls.n	8006e5e <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8006e9e:	89bb      	ldrh	r3, [r7, #12]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	4804      	ldr	r0, [pc, #16]	; (8006ebc <TP_Read_AD+0xcc>)
 8006eaa:	f001 f8bd 	bl	8008028 <HAL_GPIO_WritePin>
	return(Num);
 8006eae:	89bb      	ldrh	r3, [r7, #12]

}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40020400 	.word	0x40020400
 8006ebc:	40020c00 	.word	0x40020c00

08006ec0 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ff8f 	bl	8006df0 <TP_Read_AD>
}
 8006ed2:	bf00      	nop
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <TP_Read_XY+0x3c>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff ffe8 	bl	8006ec0 <TP_Read_XOY>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8006ef4:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <TP_Read_XY+0x40>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ffe1 	bl	8006ec0 <TP_Read_XOY>
 8006efe:	4603      	mov	r3, r0
 8006f00:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	89fa      	ldrh	r2, [r7, #14]
 8006f06:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	89ba      	ldrh	r2, [r7, #12]
 8006f0c:	801a      	strh	r2, [r3, #0]
	return 1;
 8006f0e:	2301      	movs	r3, #1
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	2000017c 	.word	0x2000017c
 8006f1c:	2000017d 	.word	0x2000017d

08006f20 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006f2a:	f107 0212 	add.w	r2, r7, #18
 8006f2e:	f107 0314 	add.w	r3, r7, #20
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ffd1 	bl	8006edc <TP_Read_XY>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <TP_Read_XY2+0x28>
    	return(0);
 8006f44:	2300      	movs	r3, #0
 8006f46:	e049      	b.n	8006fdc <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8006f48:	f107 020e 	add.w	r2, r7, #14
 8006f4c:	f107 0310 	add.w	r3, r7, #16
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff ffc2 	bl	8006edc <TP_Read_XY>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <TP_Read_XY2+0x46>
    	return(0);
 8006f62:	2300      	movs	r3, #0
 8006f64:	e03a      	b.n	8006fdc <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8006f66:	8a3a      	ldrh	r2, [r7, #16]
 8006f68:	8abb      	ldrh	r3, [r7, #20]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d804      	bhi.n	8006f78 <TP_Read_XY2+0x58>
 8006f6e:	8a3b      	ldrh	r3, [r7, #16]
 8006f70:	3331      	adds	r3, #49	; 0x31
 8006f72:	8aba      	ldrh	r2, [r7, #20]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	da08      	bge.n	8006f8a <TP_Read_XY2+0x6a>
 8006f78:	8aba      	ldrh	r2, [r7, #20]
 8006f7a:	8a3b      	ldrh	r3, [r7, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d82c      	bhi.n	8006fda <TP_Read_XY2+0xba>
 8006f80:	8abb      	ldrh	r3, [r7, #20]
 8006f82:	3331      	adds	r3, #49	; 0x31
 8006f84:	8a3a      	ldrh	r2, [r7, #16]
 8006f86:	4293      	cmp	r3, r2
 8006f88:	db27      	blt.n	8006fda <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8006f8a:	89fa      	ldrh	r2, [r7, #14]
 8006f8c:	8a7b      	ldrh	r3, [r7, #18]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d804      	bhi.n	8006f9c <TP_Read_XY2+0x7c>
 8006f92:	89fb      	ldrh	r3, [r7, #14]
 8006f94:	3331      	adds	r3, #49	; 0x31
 8006f96:	8a7a      	ldrh	r2, [r7, #18]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	da08      	bge.n	8006fae <TP_Read_XY2+0x8e>
 8006f9c:	8a7a      	ldrh	r2, [r7, #18]
 8006f9e:	89fb      	ldrh	r3, [r7, #14]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d81a      	bhi.n	8006fda <TP_Read_XY2+0xba>
 8006fa4:	8a7b      	ldrh	r3, [r7, #18]
 8006fa6:	3331      	adds	r3, #49	; 0x31
 8006fa8:	89fa      	ldrh	r2, [r7, #14]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	db15      	blt.n	8006fda <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006fae:	8abb      	ldrh	r3, [r7, #20]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	8a3b      	ldrh	r3, [r7, #16]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	0fda      	lsrs	r2, r3, #31
 8006fb8:	4413      	add	r3, r2
 8006fba:	105b      	asrs	r3, r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8006fc2:	8a7b      	ldrh	r3, [r7, #18]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	89fb      	ldrh	r3, [r7, #14]
 8006fc8:	4413      	add	r3, r2
 8006fca:	0fda      	lsrs	r2, r3, #31
 8006fcc:	4413      	add	r3, r2
 8006fce:	105b      	asrs	r3, r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	801a      	strh	r2, [r3, #0]
        return 1;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8006fee:	2140      	movs	r1, #64	; 0x40
 8006ff0:	483f      	ldr	r0, [pc, #252]	; (80070f0 <TP_Scan+0x10c>)
 8006ff2:	f001 f801 	bl	8007ff8 <HAL_GPIO_ReadPin>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d155      	bne.n	80070a8 <TP_Scan+0xc4>
	{
		if(tp)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8007002:	493c      	ldr	r1, [pc, #240]	; (80070f4 <TP_Scan+0x110>)
 8007004:	483c      	ldr	r0, [pc, #240]	; (80070f8 <TP_Scan+0x114>)
 8007006:	f7ff ff8b 	bl	8006f20 <TP_Read_XY2>
 800700a:	e03c      	b.n	8007086 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 800700c:	4939      	ldr	r1, [pc, #228]	; (80070f4 <TP_Scan+0x110>)
 800700e:	483a      	ldr	r0, [pc, #232]	; (80070f8 <TP_Scan+0x114>)
 8007010:	f7ff ff86 	bl	8006f20 <TP_Read_XY2>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d035      	beq.n	8007086 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 800701a:	4b38      	ldr	r3, [pc, #224]	; (80070fc <TP_Scan+0x118>)
 800701c:	ed93 7a05 	vldr	s14, [r3, #20]
 8007020:	4b36      	ldr	r3, [pc, #216]	; (80070fc <TP_Scan+0x118>)
 8007022:	899b      	ldrh	r3, [r3, #12]
 8007024:	ee07 3a90 	vmov	s15, r3
 8007028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800702c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007030:	4b32      	ldr	r3, [pc, #200]	; (80070fc <TP_Scan+0x118>)
 8007032:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800703e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007046:	ee17 3a90 	vmov	r3, s15
 800704a:	b29a      	uxth	r2, r3
 800704c:	4b2b      	ldr	r3, [pc, #172]	; (80070fc <TP_Scan+0x118>)
 800704e:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8007050:	4b2a      	ldr	r3, [pc, #168]	; (80070fc <TP_Scan+0x118>)
 8007052:	ed93 7a06 	vldr	s14, [r3, #24]
 8007056:	4b29      	ldr	r3, [pc, #164]	; (80070fc <TP_Scan+0x118>)
 8007058:	89db      	ldrh	r3, [r3, #14]
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007066:	4b25      	ldr	r3, [pc, #148]	; (80070fc <TP_Scan+0x118>)
 8007068:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707c:	ee17 3a90 	vmov	r3, s15
 8007080:	b29a      	uxth	r2, r3
 8007082:	4b1e      	ldr	r3, [pc, #120]	; (80070fc <TP_Scan+0x118>)
 8007084:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8007086:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <TP_Scan+0x118>)
 8007088:	7c1b      	ldrb	r3, [r3, #16]
 800708a:	b25b      	sxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	db26      	blt.n	80070de <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8007090:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <TP_Scan+0x118>)
 8007092:	22c0      	movs	r2, #192	; 0xc0
 8007094:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8007096:	4b19      	ldr	r3, [pc, #100]	; (80070fc <TP_Scan+0x118>)
 8007098:	899a      	ldrh	r2, [r3, #12]
 800709a:	4b18      	ldr	r3, [pc, #96]	; (80070fc <TP_Scan+0x118>)
 800709c:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 800709e:	4b17      	ldr	r3, [pc, #92]	; (80070fc <TP_Scan+0x118>)
 80070a0:	89da      	ldrh	r2, [r3, #14]
 80070a2:	4b16      	ldr	r3, [pc, #88]	; (80070fc <TP_Scan+0x118>)
 80070a4:	815a      	strh	r2, [r3, #10]
 80070a6:	e01a      	b.n	80070de <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 80070a8:	4b14      	ldr	r3, [pc, #80]	; (80070fc <TP_Scan+0x118>)
 80070aa:	7c1b      	ldrb	r3, [r3, #16]
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da07      	bge.n	80070c2 <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <TP_Scan+0x118>)
 80070b4:	7c1b      	ldrb	r3, [r3, #16]
 80070b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <TP_Scan+0x118>)
 80070be:	741a      	strb	r2, [r3, #16]
 80070c0:	e00d      	b.n	80070de <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <TP_Scan+0x118>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <TP_Scan+0x118>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 80070ce:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <TP_Scan+0x118>)
 80070d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070d4:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <TP_Scan+0x118>)
 80070d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070dc:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <TP_Scan+0x118>)
 80070e0:	7c1b      	ldrb	r3, [r3, #16]
 80070e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070e6:	b2db      	uxtb	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40020c00 	.word	0x40020c00
 80070f4:	20000166 	.word	0x20000166
 80070f8:	20000164 	.word	0x20000164
 80070fc:	20000158 	.word	0x20000158

08007100 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <MX_UART5_Init+0x4c>)
 8007106:	4a12      	ldr	r2, [pc, #72]	; (8007150 <MX_UART5_Init+0x50>)
 8007108:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800710a:	4b10      	ldr	r3, [pc, #64]	; (800714c <MX_UART5_Init+0x4c>)
 800710c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007110:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007112:	4b0e      	ldr	r3, [pc, #56]	; (800714c <MX_UART5_Init+0x4c>)
 8007114:	2200      	movs	r2, #0
 8007116:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <MX_UART5_Init+0x4c>)
 800711a:	2200      	movs	r2, #0
 800711c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <MX_UART5_Init+0x4c>)
 8007120:	2200      	movs	r2, #0
 8007122:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <MX_UART5_Init+0x4c>)
 8007126:	220c      	movs	r2, #12
 8007128:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <MX_UART5_Init+0x4c>)
 800712c:	2200      	movs	r2, #0
 800712e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <MX_UART5_Init+0x4c>)
 8007132:	2200      	movs	r2, #0
 8007134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007136:	4805      	ldr	r0, [pc, #20]	; (800714c <MX_UART5_Init+0x4c>)
 8007138:	f005 fd36 	bl	800cba8 <HAL_UART_Init>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8007142:	f7fe fe89 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007146:	bf00      	nop
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	2000714c 	.word	0x2000714c
 8007150:	40005000 	.word	0x40005000

08007154 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007158:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 800715a:	4a12      	ldr	r2, [pc, #72]	; (80071a4 <MX_USART3_UART_Init+0x50>)
 800715c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 8007160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 8007168:	2200      	movs	r2, #0
 800716a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800716c:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 800716e:	2200      	movs	r2, #0
 8007170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 8007174:	2200      	movs	r2, #0
 8007176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 800717a:	220c      	movs	r2, #12
 800717c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800717e:	4b08      	ldr	r3, [pc, #32]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 8007180:	2200      	movs	r2, #0
 8007182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 8007186:	2200      	movs	r2, #0
 8007188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800718a:	4805      	ldr	r0, [pc, #20]	; (80071a0 <MX_USART3_UART_Init+0x4c>)
 800718c:	f005 fd0c 	bl	800cba8 <HAL_UART_Init>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007196:	f7fe fe5f 	bl	8005e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800719a:	bf00      	nop
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20007190 	.word	0x20007190
 80071a4:	40004800 	.word	0x40004800

080071a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08c      	sub	sp, #48	; 0x30
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b0:	f107 031c 	add.w	r3, r7, #28
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	609a      	str	r2, [r3, #8]
 80071bc:	60da      	str	r2, [r3, #12]
 80071be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a42      	ldr	r2, [pc, #264]	; (80072d0 <HAL_UART_MspInit+0x128>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d14b      	bne.n	8007262 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	4b41      	ldr	r3, [pc, #260]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	4a40      	ldr	r2, [pc, #256]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 80071d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071d8:	6413      	str	r3, [r2, #64]	; 0x40
 80071da:	4b3e      	ldr	r3, [pc, #248]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	4b3a      	ldr	r3, [pc, #232]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	4a39      	ldr	r2, [pc, #228]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 80071f0:	f043 0304 	orr.w	r3, r3, #4
 80071f4:	6313      	str	r3, [r2, #48]	; 0x30
 80071f6:	4b37      	ldr	r3, [pc, #220]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007202:	2300      	movs	r3, #0
 8007204:	613b      	str	r3, [r7, #16]
 8007206:	4b33      	ldr	r3, [pc, #204]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	4a32      	ldr	r2, [pc, #200]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	6313      	str	r3, [r2, #48]	; 0x30
 8007212:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800721e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007224:	2302      	movs	r3, #2
 8007226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007228:	2300      	movs	r3, #0
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722c:	2303      	movs	r3, #3
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007230:	2308      	movs	r3, #8
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007234:	f107 031c 	add.w	r3, r7, #28
 8007238:	4619      	mov	r1, r3
 800723a:	4827      	ldr	r0, [pc, #156]	; (80072d8 <HAL_UART_MspInit+0x130>)
 800723c:	f000 fd40 	bl	8007cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007240:	2304      	movs	r3, #4
 8007242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007244:	2302      	movs	r3, #2
 8007246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007248:	2300      	movs	r3, #0
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800724c:	2303      	movs	r3, #3
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007250:	2308      	movs	r3, #8
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007254:	f107 031c 	add.w	r3, r7, #28
 8007258:	4619      	mov	r1, r3
 800725a:	4820      	ldr	r0, [pc, #128]	; (80072dc <HAL_UART_MspInit+0x134>)
 800725c:	f000 fd30 	bl	8007cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007260:	e031      	b.n	80072c6 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <HAL_UART_MspInit+0x138>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d12c      	bne.n	80072c6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	4a17      	ldr	r2, [pc, #92]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 8007276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800727a:	6413      	str	r3, [r2, #64]	; 0x40
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007288:	2300      	movs	r3, #0
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 8007292:	f043 0302 	orr.w	r3, r3, #2
 8007296:	6313      	str	r3, [r2, #48]	; 0x30
 8007298:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <HAL_UART_MspInit+0x12c>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80072a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80072a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072aa:	2302      	movs	r3, #2
 80072ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b2:	2303      	movs	r3, #3
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80072b6:	2307      	movs	r3, #7
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072ba:	f107 031c 	add.w	r3, r7, #28
 80072be:	4619      	mov	r1, r3
 80072c0:	4808      	ldr	r0, [pc, #32]	; (80072e4 <HAL_UART_MspInit+0x13c>)
 80072c2:	f000 fcfd 	bl	8007cc0 <HAL_GPIO_Init>
}
 80072c6:	bf00      	nop
 80072c8:	3730      	adds	r7, #48	; 0x30
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40005000 	.word	0x40005000
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40020800 	.word	0x40020800
 80072dc:	40020c00 	.word	0x40020c00
 80072e0:	40004800 	.word	0x40004800
 80072e4:	40020400 	.word	0x40020400

080072e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80072e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80072ec:	480d      	ldr	r0, [pc, #52]	; (8007324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80072ee:	490e      	ldr	r1, [pc, #56]	; (8007328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80072f0:	4a0e      	ldr	r2, [pc, #56]	; (800732c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80072f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072f4:	e002      	b.n	80072fc <LoopCopyDataInit>

080072f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072fa:	3304      	adds	r3, #4

080072fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007300:	d3f9      	bcc.n	80072f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007302:	4a0b      	ldr	r2, [pc, #44]	; (8007330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007304:	4c0b      	ldr	r4, [pc, #44]	; (8007334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007308:	e001      	b.n	800730e <LoopFillZerobss>

0800730a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800730a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800730c:	3204      	adds	r2, #4

0800730e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800730e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007310:	d3fb      	bcc.n	800730a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007312:	f7ff fb8b 	bl	8006a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007316:	f006 f86d 	bl	800d3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800731a:	f7fe fd01 	bl	8005d20 <main>
  bx  lr    
 800731e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007328:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800732c:	08010b38 	.word	0x08010b38
  ldr r2, =_sbss
 8007330:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8007334:	200071d8 	.word	0x200071d8

08007338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007338:	e7fe      	b.n	8007338 <ADC_IRQHandler>
	...

0800733c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <HAL_Init+0x40>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0d      	ldr	r2, [pc, #52]	; (800737c <HAL_Init+0x40>)
 8007346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800734a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_Init+0x40>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_Init+0x40>)
 8007352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <HAL_Init+0x40>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a07      	ldr	r2, [pc, #28]	; (800737c <HAL_Init+0x40>)
 800735e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007364:	2003      	movs	r0, #3
 8007366:	f000 f94f 	bl	8007608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800736a:	200f      	movs	r0, #15
 800736c:	f000 f808 	bl	8007380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007370:	f7ff fac4 	bl	80068fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40023c00 	.word	0x40023c00

08007380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007388:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <HAL_InitTick+0x54>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_InitTick+0x58>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007396:	fbb3 f3f1 	udiv	r3, r3, r1
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 f967 	bl	8007672 <HAL_SYSTICK_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e00e      	b.n	80073cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b0f      	cmp	r3, #15
 80073b2:	d80a      	bhi.n	80073ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073b4:	2200      	movs	r2, #0
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	f000 f92f 	bl	800761e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073c0:	4a06      	ldr	r2, [pc, #24]	; (80073dc <HAL_InitTick+0x5c>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e000      	b.n	80073cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000154 	.word	0x20000154
 80073d8:	20000184 	.word	0x20000184
 80073dc:	20000180 	.word	0x20000180

080073e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_IncTick+0x20>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <HAL_IncTick+0x24>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4413      	add	r3, r2
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <HAL_IncTick+0x24>)
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000184 	.word	0x20000184
 8007404:	200071d4 	.word	0x200071d4

08007408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  return uwTick;
 800740c:	4b03      	ldr	r3, [pc, #12]	; (800741c <HAL_GetTick+0x14>)
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	200071d4 	.word	0x200071d4

08007420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007428:	f7ff ffee 	bl	8007408 <HAL_GetTick>
 800742c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d005      	beq.n	8007446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800743a:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <HAL_Delay+0x44>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007446:	bf00      	nop
 8007448:	f7ff ffde 	bl	8007408 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	429a      	cmp	r2, r3
 8007456:	d8f7      	bhi.n	8007448 <HAL_Delay+0x28>
  {
  }
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000184 	.word	0x20000184

08007468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007478:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <__NVIC_SetPriorityGrouping+0x44>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007484:	4013      	ands	r3, r2
 8007486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800749a:	4a04      	ldr	r2, [pc, #16]	; (80074ac <__NVIC_SetPriorityGrouping+0x44>)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	60d3      	str	r3, [r2, #12]
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	e000ed00 	.word	0xe000ed00

080074b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <__NVIC_GetPriorityGrouping+0x18>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	f003 0307 	and.w	r3, r3, #7
}
 80074be:	4618      	mov	r0, r3
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	e000ed00 	.word	0xe000ed00

080074cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	db0b      	blt.n	80074f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	f003 021f 	and.w	r2, r3, #31
 80074e4:	4907      	ldr	r1, [pc, #28]	; (8007504 <__NVIC_EnableIRQ+0x38>)
 80074e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2001      	movs	r0, #1
 80074ee:	fa00 f202 	lsl.w	r2, r0, r2
 80074f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	e000e100 	.word	0xe000e100

08007508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007518:	2b00      	cmp	r3, #0
 800751a:	db0a      	blt.n	8007532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	b2da      	uxtb	r2, r3
 8007520:	490c      	ldr	r1, [pc, #48]	; (8007554 <__NVIC_SetPriority+0x4c>)
 8007522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007526:	0112      	lsls	r2, r2, #4
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	440b      	add	r3, r1
 800752c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007530:	e00a      	b.n	8007548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	b2da      	uxtb	r2, r3
 8007536:	4908      	ldr	r1, [pc, #32]	; (8007558 <__NVIC_SetPriority+0x50>)
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	3b04      	subs	r3, #4
 8007540:	0112      	lsls	r2, r2, #4
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	440b      	add	r3, r1
 8007546:	761a      	strb	r2, [r3, #24]
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	e000e100 	.word	0xe000e100
 8007558:	e000ed00 	.word	0xe000ed00

0800755c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800755c:	b480      	push	{r7}
 800755e:	b089      	sub	sp, #36	; 0x24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f1c3 0307 	rsb	r3, r3, #7
 8007576:	2b04      	cmp	r3, #4
 8007578:	bf28      	it	cs
 800757a:	2304      	movcs	r3, #4
 800757c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3304      	adds	r3, #4
 8007582:	2b06      	cmp	r3, #6
 8007584:	d902      	bls.n	800758c <NVIC_EncodePriority+0x30>
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3b03      	subs	r3, #3
 800758a:	e000      	b.n	800758e <NVIC_EncodePriority+0x32>
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43da      	mvns	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	401a      	ands	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075a4:	f04f 31ff 	mov.w	r1, #4294967295
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	fa01 f303 	lsl.w	r3, r1, r3
 80075ae:	43d9      	mvns	r1, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b4:	4313      	orrs	r3, r2
         );
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3724      	adds	r7, #36	; 0x24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d4:	d301      	bcc.n	80075da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075d6:	2301      	movs	r3, #1
 80075d8:	e00f      	b.n	80075fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <SysTick_Config+0x40>)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3b01      	subs	r3, #1
 80075e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075e2:	210f      	movs	r1, #15
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	f7ff ff8e 	bl	8007508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <SysTick_Config+0x40>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075f2:	4b04      	ldr	r3, [pc, #16]	; (8007604 <SysTick_Config+0x40>)
 80075f4:	2207      	movs	r2, #7
 80075f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	e000e010 	.word	0xe000e010

08007608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ff29 	bl	8007468 <__NVIC_SetPriorityGrouping>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	4603      	mov	r3, r0
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007630:	f7ff ff3e 	bl	80074b0 <__NVIC_GetPriorityGrouping>
 8007634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	6978      	ldr	r0, [r7, #20]
 800763c:	f7ff ff8e 	bl	800755c <NVIC_EncodePriority>
 8007640:	4602      	mov	r2, r0
 8007642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff ff5d 	bl	8007508 <__NVIC_SetPriority>
}
 800764e:	bf00      	nop
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	4603      	mov	r3, r0
 800765e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff ff31 	bl	80074cc <__NVIC_EnableIRQ>
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ffa2 	bl	80075c4 <SysTick_Config>
 8007680:	4603      	mov	r3, r0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007698:	f7ff feb6 	bl	8007408 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e099      	b.n	80077dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076c8:	e00f      	b.n	80076ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076ca:	f7ff fe9d 	bl	8007408 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b05      	cmp	r3, #5
 80076d6:	d908      	bls.n	80076ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2203      	movs	r2, #3
 80076e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e078      	b.n	80077dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e8      	bne.n	80076ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4b38      	ldr	r3, [pc, #224]	; (80077e4 <HAL_DMA_Init+0x158>)
 8007704:	4013      	ands	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800772e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b04      	cmp	r3, #4
 8007742:	d107      	bne.n	8007754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	4313      	orrs	r3, r2
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	2b04      	cmp	r3, #4
 800777c:	d117      	bne.n	80077ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00e      	beq.n	80077ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fa19 	bl	8007bc8 <DMA_CheckFifoParam>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d008      	beq.n	80077ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2240      	movs	r2, #64	; 0x40
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80077aa:	2301      	movs	r3, #1
 80077ac:	e016      	b.n	80077dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9d0 	bl	8007b5c <DMA_CalcBaseAndBitshift>
 80077bc:	4603      	mov	r3, r0
 80077be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c4:	223f      	movs	r2, #63	; 0x3f
 80077c6:	409a      	lsls	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	f010803f 	.word	0xf010803f

080077e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d004      	beq.n	8007806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2280      	movs	r2, #128	; 0x80
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e00c      	b.n	8007820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2205      	movs	r2, #5
 800780a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0201 	bic.w	r2, r2, #1
 800781c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007838:	4b8e      	ldr	r3, [pc, #568]	; (8007a74 <HAL_DMA_IRQHandler+0x248>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a8e      	ldr	r2, [pc, #568]	; (8007a78 <HAL_DMA_IRQHandler+0x24c>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0a9b      	lsrs	r3, r3, #10
 8007844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007856:	2208      	movs	r2, #8
 8007858:	409a      	lsls	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4013      	ands	r3, r2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01a      	beq.n	8007898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d013      	beq.n	8007898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0204 	bic.w	r2, r2, #4
 800787e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007884:	2208      	movs	r2, #8
 8007886:	409a      	lsls	r2, r3
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007890:	f043 0201 	orr.w	r2, r3, #1
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789c:	2201      	movs	r2, #1
 800789e:	409a      	lsls	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d012      	beq.n	80078ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ba:	2201      	movs	r2, #1
 80078bc:	409a      	lsls	r2, r3
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f043 0202 	orr.w	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d2:	2204      	movs	r2, #4
 80078d4:	409a      	lsls	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4013      	ands	r3, r2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d012      	beq.n	8007904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f0:	2204      	movs	r2, #4
 80078f2:	409a      	lsls	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fc:	f043 0204 	orr.w	r2, r3, #4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007908:	2210      	movs	r2, #16
 800790a:	409a      	lsls	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4013      	ands	r3, r2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d043      	beq.n	800799c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d03c      	beq.n	800799c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	2210      	movs	r2, #16
 8007928:	409a      	lsls	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d018      	beq.n	800796e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d108      	bne.n	800795c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d024      	beq.n	800799c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
 800795a:	e01f      	b.n	800799c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01b      	beq.n	800799c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
 800796c:	e016      	b.n	800799c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d107      	bne.n	800798c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0208 	bic.w	r2, r2, #8
 800798a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a0:	2220      	movs	r2, #32
 80079a2:	409a      	lsls	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 808f 	beq.w	8007acc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8087 	beq.w	8007acc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c2:	2220      	movs	r2, #32
 80079c4:	409a      	lsls	r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d136      	bne.n	8007a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0216 	bic.w	r2, r2, #22
 80079e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <HAL_DMA_IRQHandler+0x1da>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0208 	bic.w	r2, r2, #8
 8007a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1a:	223f      	movs	r2, #63	; 0x3f
 8007a1c:	409a      	lsls	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d07e      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
        }
        return;
 8007a42:	e079      	b.n	8007b38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01d      	beq.n	8007a8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10d      	bne.n	8007a7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d031      	beq.n	8007acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
 8007a70:	e02c      	b.n	8007acc <HAL_DMA_IRQHandler+0x2a0>
 8007a72:	bf00      	nop
 8007a74:	20000154 	.word	0x20000154
 8007a78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d023      	beq.n	8007acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
 8007a8c:	e01e      	b.n	8007acc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10f      	bne.n	8007abc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0210 	bic.w	r2, r2, #16
 8007aaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d032      	beq.n	8007b3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d022      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d307      	bcc.n	8007b14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f2      	bne.n	8007af8 <HAL_DMA_IRQHandler+0x2cc>
 8007b12:	e000      	b.n	8007b16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	e000      	b.n	8007b3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007b38:	bf00      	nop
    }
  }
}
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b4e:	b2db      	uxtb	r3, r3
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	3b10      	subs	r3, #16
 8007b6c:	4a14      	ldr	r2, [pc, #80]	; (8007bc0 <DMA_CalcBaseAndBitshift+0x64>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b76:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <DMA_CalcBaseAndBitshift+0x68>)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d909      	bls.n	8007b9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	1d1a      	adds	r2, r3, #4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007b9c:	e007      	b.n	8007bae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	aaaaaaab 	.word	0xaaaaaaab
 8007bc4:	08010af8 	.word	0x08010af8

08007bc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d11f      	bne.n	8007c22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d856      	bhi.n	8007c96 <DMA_CheckFifoParam+0xce>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <DMA_CheckFifoParam+0x28>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c13 	.word	0x08007c13
 8007bf8:	08007c01 	.word	0x08007c01
 8007bfc:	08007c97 	.word	0x08007c97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d046      	beq.n	8007c9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c10:	e043      	b.n	8007c9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c1a:	d140      	bne.n	8007c9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c20:	e03d      	b.n	8007c9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2a:	d121      	bne.n	8007c70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d837      	bhi.n	8007ca2 <DMA_CheckFifoParam+0xda>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <DMA_CheckFifoParam+0x70>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c49 	.word	0x08007c49
 8007c3c:	08007c4f 	.word	0x08007c4f
 8007c40:	08007c49 	.word	0x08007c49
 8007c44:	08007c61 	.word	0x08007c61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4c:	e030      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d025      	beq.n	8007ca6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c5e:	e022      	b.n	8007ca6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c68:	d11f      	bne.n	8007caa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c6e:	e01c      	b.n	8007caa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d903      	bls.n	8007c7e <DMA_CheckFifoParam+0xb6>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d003      	beq.n	8007c84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c7c:	e018      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	73fb      	strb	r3, [r7, #15]
      break;
 8007c82:	e015      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00e      	beq.n	8007cae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	73fb      	strb	r3, [r7, #15]
      break;
 8007c94:	e00b      	b.n	8007cae <DMA_CheckFifoParam+0xe6>
      break;
 8007c96:	bf00      	nop
 8007c98:	e00a      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007c9a:	bf00      	nop
 8007c9c:	e008      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007c9e:	bf00      	nop
 8007ca0:	e006      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ca2:	bf00      	nop
 8007ca4:	e004      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ca6:	bf00      	nop
 8007ca8:	e002      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007caa:	bf00      	nop
 8007cac:	e000      	b.n	8007cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cae:	bf00      	nop
    }
  } 
  
  return status; 
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b089      	sub	sp, #36	; 0x24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	e16b      	b.n	8007fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007cdc:	2201      	movs	r2, #1
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4013      	ands	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	f040 815a 	bne.w	8007fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d005      	beq.n	8007d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d130      	bne.n	8007d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43db      	mvns	r3, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4013      	ands	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d48:	2201      	movs	r2, #1
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	43db      	mvns	r3, r3
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	4013      	ands	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	091b      	lsrs	r3, r3, #4
 8007d5e:	f003 0201 	and.w	r2, r3, #1
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d017      	beq.n	8007db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43db      	mvns	r3, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4013      	ands	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d123      	bne.n	8007e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	08da      	lsrs	r2, r3, #3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3208      	adds	r2, #8
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	220f      	movs	r2, #15
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	08da      	lsrs	r2, r3, #3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3208      	adds	r2, #8
 8007dfe:	69b9      	ldr	r1, [r7, #24]
 8007e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	2203      	movs	r2, #3
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	43db      	mvns	r3, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f003 0203 	and.w	r2, r3, #3
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 80b4 	beq.w	8007fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <HAL_GPIO_Init+0x30c>)
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	4a5f      	ldr	r2, [pc, #380]	; (8007fcc <HAL_GPIO_Init+0x30c>)
 8007e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e54:	6453      	str	r3, [r2, #68]	; 0x44
 8007e56:	4b5d      	ldr	r3, [pc, #372]	; (8007fcc <HAL_GPIO_Init+0x30c>)
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e62:	4a5b      	ldr	r2, [pc, #364]	; (8007fd0 <HAL_GPIO_Init+0x310>)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	089b      	lsrs	r3, r3, #2
 8007e68:	3302      	adds	r3, #2
 8007e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	220f      	movs	r2, #15
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	4013      	ands	r3, r2
 8007e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a52      	ldr	r2, [pc, #328]	; (8007fd4 <HAL_GPIO_Init+0x314>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d02b      	beq.n	8007ee6 <HAL_GPIO_Init+0x226>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a51      	ldr	r2, [pc, #324]	; (8007fd8 <HAL_GPIO_Init+0x318>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d025      	beq.n	8007ee2 <HAL_GPIO_Init+0x222>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a50      	ldr	r2, [pc, #320]	; (8007fdc <HAL_GPIO_Init+0x31c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01f      	beq.n	8007ede <HAL_GPIO_Init+0x21e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a4f      	ldr	r2, [pc, #316]	; (8007fe0 <HAL_GPIO_Init+0x320>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d019      	beq.n	8007eda <HAL_GPIO_Init+0x21a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a4e      	ldr	r2, [pc, #312]	; (8007fe4 <HAL_GPIO_Init+0x324>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <HAL_GPIO_Init+0x216>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a4d      	ldr	r2, [pc, #308]	; (8007fe8 <HAL_GPIO_Init+0x328>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00d      	beq.n	8007ed2 <HAL_GPIO_Init+0x212>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a4c      	ldr	r2, [pc, #304]	; (8007fec <HAL_GPIO_Init+0x32c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <HAL_GPIO_Init+0x20e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a4b      	ldr	r2, [pc, #300]	; (8007ff0 <HAL_GPIO_Init+0x330>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d101      	bne.n	8007eca <HAL_GPIO_Init+0x20a>
 8007ec6:	2307      	movs	r3, #7
 8007ec8:	e00e      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007eca:	2308      	movs	r3, #8
 8007ecc:	e00c      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007ece:	2306      	movs	r3, #6
 8007ed0:	e00a      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007ed2:	2305      	movs	r3, #5
 8007ed4:	e008      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	e006      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007eda:	2303      	movs	r3, #3
 8007edc:	e004      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e002      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <HAL_GPIO_Init+0x228>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	f002 0203 	and.w	r2, r2, #3
 8007eee:	0092      	lsls	r2, r2, #2
 8007ef0:	4093      	lsls	r3, r2
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ef8:	4935      	ldr	r1, [pc, #212]	; (8007fd0 <HAL_GPIO_Init+0x310>)
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	089b      	lsrs	r3, r3, #2
 8007efe:	3302      	adds	r3, #2
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f06:	4b3b      	ldr	r3, [pc, #236]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4013      	ands	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f2a:	4a32      	ldr	r2, [pc, #200]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f30:	4b30      	ldr	r3, [pc, #192]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	43db      	mvns	r3, r3
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f54:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f5a:	4b26      	ldr	r3, [pc, #152]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	43db      	mvns	r3, r3
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4013      	ands	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f7e:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4013      	ands	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007fa8:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <HAL_GPIO_Init+0x334>)
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	2b0f      	cmp	r3, #15
 8007fb8:	f67f ae90 	bls.w	8007cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	3724      	adds	r7, #36	; 0x24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	40013800 	.word	0x40013800
 8007fd4:	40020000 	.word	0x40020000
 8007fd8:	40020400 	.word	0x40020400
 8007fdc:	40020800 	.word	0x40020800
 8007fe0:	40020c00 	.word	0x40020c00
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	40021400 	.word	0x40021400
 8007fec:	40021800 	.word	0x40021800
 8007ff0:	40021c00 	.word	0x40021c00
 8007ff4:	40013c00 	.word	0x40013c00

08007ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e001      	b.n	800801a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
 8008034:	4613      	mov	r3, r2
 8008036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008038:	787b      	ldrb	r3, [r7, #1]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008044:	e003      	b.n	800804e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	041a      	lsls	r2, r3, #16
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
	...

0800805c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e12b      	b.n	80082c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d106      	bne.n	8008088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fd fd9c 	bl	8005bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	; 0x24
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80080c0:	f003 f8ae 	bl	800b220 <HAL_RCC_GetPCLK1Freq>
 80080c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4a81      	ldr	r2, [pc, #516]	; (80082d0 <HAL_I2C_Init+0x274>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d807      	bhi.n	80080e0 <HAL_I2C_Init+0x84>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a80      	ldr	r2, [pc, #512]	; (80082d4 <HAL_I2C_Init+0x278>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bf94      	ite	ls
 80080d8:	2301      	movls	r3, #1
 80080da:	2300      	movhi	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	e006      	b.n	80080ee <HAL_I2C_Init+0x92>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a7d      	ldr	r2, [pc, #500]	; (80082d8 <HAL_I2C_Init+0x27c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	bf94      	ite	ls
 80080e8:	2301      	movls	r3, #1
 80080ea:	2300      	movhi	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e0e7      	b.n	80082c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a78      	ldr	r2, [pc, #480]	; (80082dc <HAL_I2C_Init+0x280>)
 80080fa:	fba2 2303 	umull	r2, r3, r2, r3
 80080fe:	0c9b      	lsrs	r3, r3, #18
 8008100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4a6a      	ldr	r2, [pc, #424]	; (80082d0 <HAL_I2C_Init+0x274>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d802      	bhi.n	8008130 <HAL_I2C_Init+0xd4>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3301      	adds	r3, #1
 800812e:	e009      	b.n	8008144 <HAL_I2C_Init+0xe8>
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008136:	fb02 f303 	mul.w	r3, r2, r3
 800813a:	4a69      	ldr	r2, [pc, #420]	; (80082e0 <HAL_I2C_Init+0x284>)
 800813c:	fba2 2303 	umull	r2, r3, r2, r3
 8008140:	099b      	lsrs	r3, r3, #6
 8008142:	3301      	adds	r3, #1
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	430b      	orrs	r3, r1
 800814a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	495c      	ldr	r1, [pc, #368]	; (80082d0 <HAL_I2C_Init+0x274>)
 8008160:	428b      	cmp	r3, r1
 8008162:	d819      	bhi.n	8008198 <HAL_I2C_Init+0x13c>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	1e59      	subs	r1, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008172:	1c59      	adds	r1, r3, #1
 8008174:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008178:	400b      	ands	r3, r1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_I2C_Init+0x138>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1e59      	subs	r1, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	fbb1 f3f3 	udiv	r3, r1, r3
 800818c:	3301      	adds	r3, #1
 800818e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008192:	e051      	b.n	8008238 <HAL_I2C_Init+0x1dc>
 8008194:	2304      	movs	r3, #4
 8008196:	e04f      	b.n	8008238 <HAL_I2C_Init+0x1dc>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d111      	bne.n	80081c4 <HAL_I2C_Init+0x168>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	1e58      	subs	r0, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6859      	ldr	r1, [r3, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	440b      	add	r3, r1
 80081ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80081b2:	3301      	adds	r3, #1
 80081b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bf0c      	ite	eq
 80081bc:	2301      	moveq	r3, #1
 80081be:	2300      	movne	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	e012      	b.n	80081ea <HAL_I2C_Init+0x18e>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	1e58      	subs	r0, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6859      	ldr	r1, [r3, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	0099      	lsls	r1, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80081da:	3301      	adds	r3, #1
 80081dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_I2C_Init+0x196>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e022      	b.n	8008238 <HAL_I2C_Init+0x1dc>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10e      	bne.n	8008218 <HAL_I2C_Init+0x1bc>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	1e58      	subs	r0, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6859      	ldr	r1, [r3, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	440b      	add	r3, r1
 8008208:	fbb0 f3f3 	udiv	r3, r0, r3
 800820c:	3301      	adds	r3, #1
 800820e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008216:	e00f      	b.n	8008238 <HAL_I2C_Init+0x1dc>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	1e58      	subs	r0, r3, #1
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6859      	ldr	r1, [r3, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	0099      	lsls	r1, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	fbb0 f3f3 	udiv	r3, r0, r3
 800822e:	3301      	adds	r3, #1
 8008230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	6809      	ldr	r1, [r1, #0]
 800823c:	4313      	orrs	r3, r2
 800823e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69da      	ldr	r2, [r3, #28]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6911      	ldr	r1, [r2, #16]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	68d2      	ldr	r2, [r2, #12]
 8008272:	4311      	orrs	r1, r2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	430b      	orrs	r3, r1
 800827a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695a      	ldr	r2, [r3, #20]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	000186a0 	.word	0x000186a0
 80082d4:	001e847f 	.word	0x001e847f
 80082d8:	003d08ff 	.word	0x003d08ff
 80082dc:	431bde83 	.word	0x431bde83
 80082e0:	10624dd3 	.word	0x10624dd3

080082e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	4608      	mov	r0, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	461a      	mov	r2, r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	817b      	strh	r3, [r7, #10]
 80082f6:	460b      	mov	r3, r1
 80082f8:	813b      	strh	r3, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082fe:	f7ff f883 	bl	8007408 <HAL_GetTick>
 8008302:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b20      	cmp	r3, #32
 800830e:	f040 80d9 	bne.w	80084c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2319      	movs	r3, #25
 8008318:	2201      	movs	r2, #1
 800831a:	496d      	ldr	r1, [pc, #436]	; (80084d0 <HAL_I2C_Mem_Write+0x1ec>)
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f002 f8e5 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008328:	2302      	movs	r3, #2
 800832a:	e0cc      	b.n	80084c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_I2C_Mem_Write+0x56>
 8008336:	2302      	movs	r3, #2
 8008338:	e0c5      	b.n	80084c6 <HAL_I2C_Mem_Write+0x1e2>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b01      	cmp	r3, #1
 800834e:	d007      	beq.n	8008360 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800836e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2221      	movs	r2, #33	; 0x21
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2240      	movs	r2, #64	; 0x40
 800837c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a3a      	ldr	r2, [r7, #32]
 800838a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4a4d      	ldr	r2, [pc, #308]	; (80084d4 <HAL_I2C_Mem_Write+0x1f0>)
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083a2:	88f8      	ldrh	r0, [r7, #6]
 80083a4:	893a      	ldrh	r2, [r7, #8]
 80083a6:	8979      	ldrh	r1, [r7, #10]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4603      	mov	r3, r0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f001 fe74 	bl	800a0a0 <I2C_RequestMemoryWrite>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d052      	beq.n	8008464 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e081      	b.n	80084c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f002 f966 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00d      	beq.n	80083ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d107      	bne.n	80083ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e06b      	b.n	80084c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b04      	cmp	r3, #4
 800842a:	d11b      	bne.n	8008464 <HAL_I2C_Mem_Write+0x180>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008430:	2b00      	cmp	r3, #0
 8008432:	d017      	beq.n	8008464 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	781a      	ldrb	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1aa      	bne.n	80083c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f002 f952 	bl	800a71a <I2C_WaitOnBTFFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00d      	beq.n	8008498 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	2b04      	cmp	r3, #4
 8008482:	d107      	bne.n	8008494 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008492:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e016      	b.n	80084c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	e000      	b.n	80084c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80084c4:	2302      	movs	r3, #2
  }
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	00100002 	.word	0x00100002
 80084d4:	ffff0000 	.word	0xffff0000

080084d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08c      	sub	sp, #48	; 0x30
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	461a      	mov	r2, r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	817b      	strh	r3, [r7, #10]
 80084ea:	460b      	mov	r3, r1
 80084ec:	813b      	strh	r3, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084f2:	f7fe ff89 	bl	8007408 <HAL_GetTick>
 80084f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b20      	cmp	r3, #32
 8008502:	f040 8208 	bne.w	8008916 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	2319      	movs	r3, #25
 800850c:	2201      	movs	r2, #1
 800850e:	497b      	ldr	r1, [pc, #492]	; (80086fc <HAL_I2C_Mem_Read+0x224>)
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f001 ffeb 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800851c:	2302      	movs	r3, #2
 800851e:	e1fb      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_I2C_Mem_Read+0x56>
 800852a:	2302      	movs	r3, #2
 800852c:	e1f4      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b01      	cmp	r3, #1
 8008542:	d007      	beq.n	8008554 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2222      	movs	r2, #34	; 0x22
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2240      	movs	r2, #64	; 0x40
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800857e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a5b      	ldr	r2, [pc, #364]	; (8008700 <HAL_I2C_Mem_Read+0x228>)
 8008594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008596:	88f8      	ldrh	r0, [r7, #6]
 8008598:	893a      	ldrh	r2, [r7, #8]
 800859a:	8979      	ldrh	r1, [r7, #10]
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4603      	mov	r3, r0
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f001 fe10 	bl	800a1cc <I2C_RequestMemoryRead>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e1b0      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d113      	bne.n	80085e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085be:	2300      	movs	r3, #0
 80085c0:	623b      	str	r3, [r7, #32]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	623b      	str	r3, [r7, #32]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	623b      	str	r3, [r7, #32]
 80085d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	e184      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d11b      	bne.n	8008626 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085fe:	2300      	movs	r3, #0
 8008600:	61fb      	str	r3, [r7, #28]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e164      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862a:	2b02      	cmp	r3, #2
 800862c:	d11b      	bne.n	8008666 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800863c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800864c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800864e:	2300      	movs	r3, #0
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	61bb      	str	r3, [r7, #24]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	e144      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800867c:	e138      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	2b03      	cmp	r3, #3
 8008684:	f200 80f1 	bhi.w	800886a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868c:	2b01      	cmp	r3, #1
 800868e:	d123      	bne.n	80086d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f002 f8b3 	bl	800a800 <I2C_WaitOnRXNEFlagUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e139      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086d6:	e10b      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d14e      	bne.n	800877e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	2200      	movs	r2, #0
 80086e8:	4906      	ldr	r1, [pc, #24]	; (8008704 <HAL_I2C_Mem_Read+0x22c>)
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f001 fefe 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d008      	beq.n	8008708 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e10e      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
 80086fa:	bf00      	nop
 80086fc:	00100002 	.word	0x00100002
 8008700:	ffff0000 	.word	0xffff0000
 8008704:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008772:	b29b      	uxth	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800877c:	e0b8      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	2200      	movs	r2, #0
 8008786:	4966      	ldr	r1, [pc, #408]	; (8008920 <HAL_I2C_Mem_Read+0x448>)
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f001 feaf 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e0bf      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	2200      	movs	r2, #0
 80087e2:	494f      	ldr	r1, [pc, #316]	; (8008920 <HAL_I2C_Mem_Read+0x448>)
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f001 fe81 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e091      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691a      	ldr	r2, [r3, #16]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008852:	3b01      	subs	r3, #1
 8008854:	b29a      	uxth	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008868:	e042      	b.n	80088f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f001 ffc6 	bl	800a800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e04c      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889a:	3b01      	subs	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d118      	bne.n	80088f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f47f aec2 	bne.w	800867e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	e000      	b.n	8008918 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008916:	2302      	movs	r3, #2
  }
}
 8008918:	4618      	mov	r0, r3
 800891a:	3728      	adds	r7, #40	; 0x28
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	00010004 	.word	0x00010004

08008924 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008944:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b10      	cmp	r3, #16
 8008952:	d003      	beq.n	800895c <HAL_I2C_EV_IRQHandler+0x38>
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	2b40      	cmp	r3, #64	; 0x40
 8008958:	f040 80b1 	bne.w	8008abe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10d      	bne.n	8008992 <HAL_I2C_EV_IRQHandler+0x6e>
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800897c:	d003      	beq.n	8008986 <HAL_I2C_EV_IRQHandler+0x62>
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008984:	d101      	bne.n	800898a <HAL_I2C_EV_IRQHandler+0x66>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <HAL_I2C_EV_IRQHandler+0x68>
 800898a:	2300      	movs	r3, #0
 800898c:	2b01      	cmp	r3, #1
 800898e:	f000 8114 	beq.w	8008bba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_I2C_EV_IRQHandler+0x90>
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d006      	beq.n	80089b4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 ffaf 	bl	800a90a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fd5e 	bl	800946e <I2C_Master_SB>
 80089b2:	e083      	b.n	8008abc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 0308 	and.w	r3, r3, #8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d008      	beq.n	80089d0 <HAL_I2C_EV_IRQHandler+0xac>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fdd6 	bl	800957a <I2C_Master_ADD10>
 80089ce:	e075      	b.n	8008abc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d008      	beq.n	80089ec <HAL_I2C_EV_IRQHandler+0xc8>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fdf2 	bl	80095ce <I2C_Master_ADDR>
 80089ea:	e067      	b.n	8008abc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d036      	beq.n	8008a64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a04:	f000 80db 	beq.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00d      	beq.n	8008a2e <HAL_I2C_EV_IRQHandler+0x10a>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_I2C_EV_IRQHandler+0x10a>
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d103      	bne.n	8008a2e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f9d6 	bl	8008dd8 <I2C_MasterTransmit_TXE>
 8008a2c:	e046      	b.n	8008abc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80c2 	beq.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80bc 	beq.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b21      	cmp	r3, #33	; 0x21
 8008a4a:	d103      	bne.n	8008a54 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa5f 	bl	8008f10 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a52:	e0b4      	b.n	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	2b40      	cmp	r3, #64	; 0x40
 8008a58:	f040 80b1 	bne.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 facd 	bl	8008ffc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a62:	e0ac      	b.n	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a72:	f000 80a4 	beq.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00d      	beq.n	8008a9c <HAL_I2C_EV_IRQHandler+0x178>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <HAL_I2C_EV_IRQHandler+0x178>
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fb45 	bl	8009124 <I2C_MasterReceive_RXNE>
 8008a9a:	e00f      	b.n	8008abc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 808b 	beq.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8085 	beq.w	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fbf0 	bl	800929a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aba:	e080      	b.n	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
 8008abc:	e07f      	b.n	8008bbe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	e007      	b.n	8008ae0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <HAL_I2C_EV_IRQHandler+0x1ea>
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00c      	beq.n	8008b0e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008b04:	69b9      	ldr	r1, [r7, #24]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 ffb0 	bl	8009a6c <I2C_Slave_ADDR>
 8008b0c:	e05a      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_I2C_EV_IRQHandler+0x206>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 ffea 	bl	8009afc <I2C_Slave_STOPF>
 8008b28:	e04c      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b21      	cmp	r3, #33	; 0x21
 8008b2e:	d002      	beq.n	8008b36 <HAL_I2C_EV_IRQHandler+0x212>
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b29      	cmp	r3, #41	; 0x29
 8008b34:	d120      	bne.n	8008b78 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00d      	beq.n	8008b5c <HAL_I2C_EV_IRQHandler+0x238>
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <HAL_I2C_EV_IRQHandler+0x238>
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d103      	bne.n	8008b5c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fecb 	bl	80098f0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b5a:	e032      	b.n	8008bc2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f003 0304 	and.w	r3, r3, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d02d      	beq.n	8008bc2 <HAL_I2C_EV_IRQHandler+0x29e>
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d028      	beq.n	8008bc2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fefa 	bl	800996a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b76:	e024      	b.n	8008bc2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00d      	beq.n	8008b9e <HAL_I2C_EV_IRQHandler+0x27a>
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_I2C_EV_IRQHandler+0x27a>
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d103      	bne.n	8008b9e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 ff08 	bl	80099ac <I2C_SlaveReceive_RXNE>
 8008b9c:	e012      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 ff38 	bl	8009a28 <I2C_SlaveReceive_BTF>
 8008bb8:	e004      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8008bba:	bf00      	nop
 8008bbc:	e002      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008bc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b08a      	sub	sp, #40	; 0x28
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00d      	beq.n	8008c14 <HAL_I2C_ER_IRQHandler+0x4a>
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <HAL_I2C_ER_IRQHandler+0x70>
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d008      	beq.n	8008c3a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	f043 0302 	orr.w	r3, r3, #2
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008c38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d03e      	beq.n	8008cc2 <HAL_I2C_ER_IRQHandler+0xf8>
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d039      	beq.n	8008cc2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8008c4e:	7efb      	ldrb	r3, [r7, #27]
 8008c50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008c68:	7ebb      	ldrb	r3, [r7, #26]
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d112      	bne.n	8008c94 <HAL_I2C_ER_IRQHandler+0xca>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10f      	bne.n	8008c94 <HAL_I2C_ER_IRQHandler+0xca>
 8008c74:	7cfb      	ldrb	r3, [r7, #19]
 8008c76:	2b21      	cmp	r3, #33	; 0x21
 8008c78:	d008      	beq.n	8008c8c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008c7a:	7cfb      	ldrb	r3, [r7, #19]
 8008c7c:	2b29      	cmp	r3, #41	; 0x29
 8008c7e:	d005      	beq.n	8008c8c <HAL_I2C_ER_IRQHandler+0xc2>
 8008c80:	7cfb      	ldrb	r3, [r7, #19]
 8008c82:	2b28      	cmp	r3, #40	; 0x28
 8008c84:	d106      	bne.n	8008c94 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2b21      	cmp	r3, #33	; 0x21
 8008c8a:	d103      	bne.n	8008c94 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f865 	bl	8009d5c <I2C_Slave_AF>
 8008c92:	e016      	b.n	8008cc2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	f043 0304 	orr.w	r3, r3, #4
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008ca6:	7efb      	ldrb	r3, [r7, #27]
 8008ca8:	2b10      	cmp	r3, #16
 8008caa:	d002      	beq.n	8008cb2 <HAL_I2C_ER_IRQHandler+0xe8>
 8008cac:	7efb      	ldrb	r3, [r7, #27]
 8008cae:	2b40      	cmp	r3, #64	; 0x40
 8008cb0:	d107      	bne.n	8008cc2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00d      	beq.n	8008ce8 <HAL_I2C_ER_IRQHandler+0x11e>
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d008      	beq.n	8008ce8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	f043 0308 	orr.w	r3, r3, #8
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008ce6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 f89e 	bl	8009e3c <I2C_ITError>
  }
}
 8008d00:	bf00      	nop
 8008d02:	3728      	adds	r7, #40	; 0x28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
 8008d64:	4613      	mov	r3, r2
 8008d66:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d150      	bne.n	8008ea0 <I2C_MasterTransmit_TXE+0xc8>
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b21      	cmp	r3, #33	; 0x21
 8008e02:	d14d      	bne.n	8008ea0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d01d      	beq.n	8008e46 <I2C_MasterTransmit_TXE+0x6e>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d01a      	beq.n	8008e46 <I2C_MasterTransmit_TXE+0x6e>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e16:	d016      	beq.n	8008e46 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e26:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2211      	movs	r2, #17
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ff62 	bl	8008d08 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e44:	e060      	b.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e54:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e64:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d107      	bne.n	8008e90 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ff7d 	bl	8008d88 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e8e:	e03b      	b.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff ff35 	bl	8008d08 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e9e:	e033      	b.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2b21      	cmp	r3, #33	; 0x21
 8008ea4:	d005      	beq.n	8008eb2 <I2C_MasterTransmit_TXE+0xda>
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b40      	cmp	r3, #64	; 0x40
 8008eaa:	d12d      	bne.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b22      	cmp	r3, #34	; 0x22
 8008eb0:	d12a      	bne.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d108      	bne.n	8008ece <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008ecc:	e01c      	b.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	d103      	bne.n	8008ee2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f88e 	bl	8008ffc <I2C_MemoryTransmit_TXE_BTF>
}
 8008ee0:	e012      	b.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	781a      	ldrb	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f06:	e7ff      	b.n	8008f08 <I2C_MasterTransmit_TXE+0x130>
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b21      	cmp	r3, #33	; 0x21
 8008f28:	d164      	bne.n	8008ff4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d012      	beq.n	8008f5a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008f58:	e04c      	b.n	8008ff4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b08      	cmp	r3, #8
 8008f5e:	d01d      	beq.n	8008f9c <I2C_MasterTransmit_BTF+0x8c>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d01a      	beq.n	8008f9c <I2C_MasterTransmit_BTF+0x8c>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f6c:	d016      	beq.n	8008f9c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f7c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2211      	movs	r2, #17
 8008f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff feb7 	bl	8008d08 <HAL_I2C_MasterTxCpltCallback>
}
 8008f9a:	e02b      	b.n	8008ff4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008faa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	d107      	bne.n	8008fe6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff fed2 	bl	8008d88 <HAL_I2C_MemTxCpltCallback>
}
 8008fe4:	e006      	b.n	8008ff4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff fe8a 	bl	8008d08 <HAL_I2C_MasterTxCpltCallback>
}
 8008ff4:	bf00      	nop
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009010:	2b00      	cmp	r3, #0
 8009012:	d11d      	bne.n	8009050 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d10b      	bne.n	8009034 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009020:	b2da      	uxtb	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902c:	1c9a      	adds	r2, r3, #2
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009032:	e073      	b.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009038:	b29b      	uxth	r3, r3
 800903a:	121b      	asrs	r3, r3, #8
 800903c:	b2da      	uxtb	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800904e:	e065      	b.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	2b01      	cmp	r3, #1
 8009056:	d10b      	bne.n	8009070 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905c:	b2da      	uxtb	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800906e:	e055      	b.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009074:	2b02      	cmp	r3, #2
 8009076:	d151      	bne.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	2b22      	cmp	r3, #34	; 0x22
 800907c:	d10d      	bne.n	800909a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800908c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009098:	e040      	b.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d015      	beq.n	80090d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	2b21      	cmp	r3, #33	; 0x21
 80090a8:	d112      	bne.n	80090d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80090ce:	e025      	b.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d120      	bne.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b21      	cmp	r3, #33	; 0x21
 80090de:	d11d      	bne.n	800911c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff fe36 	bl	8008d88 <HAL_I2C_MemTxCpltCallback>
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b22      	cmp	r3, #34	; 0x22
 8009136:	f040 80ac 	bne.w	8009292 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913e:	b29b      	uxth	r3, r3
 8009140:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b03      	cmp	r3, #3
 8009146:	d921      	bls.n	800918c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691a      	ldr	r2, [r3, #16]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b03      	cmp	r3, #3
 8009176:	f040 808c 	bne.w	8009292 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009188:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800918a:	e082      	b.n	8009292 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	2b02      	cmp	r3, #2
 8009192:	d075      	beq.n	8009280 <I2C_MasterReceive_RXNE+0x15c>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d002      	beq.n	80091a0 <I2C_MasterReceive_RXNE+0x7c>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d16f      	bne.n	8009280 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 fafb 	bl	800a79c <I2C_WaitOnSTOPRequestThroughIT>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d142      	bne.n	8009232 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691a      	ldr	r2, [r3, #16]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b40      	cmp	r3, #64	; 0x40
 8009204:	d10a      	bne.n	800921c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff fdc1 	bl	8008d9c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800921a:	e03a      	b.n	8009292 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2212      	movs	r2, #18
 8009228:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fd76 	bl	8008d1c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009230:	e02f      	b.n	8009292 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009240:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	b2d2      	uxtb	r2, r2
 800924e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff fd99 	bl	8008db0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800927e:	e008      	b.n	8009292 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800928e:	605a      	str	r2, [r3, #4]
}
 8009290:	e7ff      	b.n	8009292 <I2C_MasterReceive_RXNE+0x16e>
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d11b      	bne.n	80092ea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092c0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80092e8:	e0bd      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d129      	bne.n	8009348 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009302:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d00a      	beq.n	8009320 <I2C_MasterReceive_BTF+0x86>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d007      	beq.n	8009320 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009346:	e08e      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934c:	b29b      	uxth	r3, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d176      	bne.n	8009440 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d002      	beq.n	800935e <I2C_MasterReceive_BTF+0xc4>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b10      	cmp	r3, #16
 800935c:	d108      	bne.n	8009370 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e019      	b.n	80093a4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b04      	cmp	r3, #4
 8009374:	d002      	beq.n	800937c <I2C_MasterReceive_BTF+0xe2>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d108      	bne.n	800938e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	e00a      	b.n	80093a4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b10      	cmp	r3, #16
 8009392:	d007      	beq.n	80093a4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	b2d2      	uxtb	r2, r2
 80093d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80093fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	d10a      	bne.n	800942a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fcba 	bl	8008d9c <HAL_I2C_MemRxCpltCallback>
}
 8009428:	e01d      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2212      	movs	r2, #18
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fc6f 	bl	8008d1c <HAL_I2C_MasterRxCpltCallback>
}
 800943e:	e012      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691a      	ldr	r2, [r3, #16]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d117      	bne.n	80094b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009486:	2b00      	cmp	r3, #0
 8009488:	d109      	bne.n	800949e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948e:	b2db      	uxtb	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800949a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800949c:	e067      	b.n	800956e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	611a      	str	r2, [r3, #16]
}
 80094b0:	e05d      	b.n	800956e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ba:	d133      	bne.n	8009524 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b21      	cmp	r3, #33	; 0x21
 80094c6:	d109      	bne.n	80094dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80094d8:	611a      	str	r2, [r3, #16]
 80094da:	e008      	b.n	80094ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f043 0301 	orr.w	r3, r3, #1
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <I2C_Master_SB+0x92>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d108      	bne.n	8009512 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	2b00      	cmp	r3, #0
 8009506:	d032      	beq.n	800956e <I2C_Master_SB+0x100>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950e:	2b00      	cmp	r3, #0
 8009510:	d02d      	beq.n	800956e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009520:	605a      	str	r2, [r3, #4]
}
 8009522:	e024      	b.n	800956e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10e      	bne.n	800954a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009530:	b29b      	uxth	r3, r3
 8009532:	11db      	asrs	r3, r3, #7
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0306 	and.w	r3, r3, #6
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f063 030f 	orn	r3, r3, #15
 8009540:	b2da      	uxtb	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	611a      	str	r2, [r3, #16]
}
 8009548:	e011      	b.n	800956e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954e:	2b01      	cmp	r3, #1
 8009550:	d10d      	bne.n	800956e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009556:	b29b      	uxth	r3, r3
 8009558:	11db      	asrs	r3, r3, #7
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0306 	and.w	r3, r3, #6
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f063 030e 	orn	r3, r3, #14
 8009566:	b2da      	uxtb	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	611a      	str	r2, [r3, #16]
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <I2C_Master_ADD10+0x26>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959c:	2b00      	cmp	r3, #0
 800959e:	d108      	bne.n	80095b2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <I2C_Master_ADD10+0x48>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095c0:	605a      	str	r2, [r3, #4]
  }
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b091      	sub	sp, #68	; 0x44
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b22      	cmp	r3, #34	; 0x22
 80095f6:	f040 8169 	bne.w	80098cc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10f      	bne.n	8009622 <I2C_Master_ADDR+0x54>
 8009602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d10b      	bne.n	8009622 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800960a:	2300      	movs	r3, #0
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	633b      	str	r3, [r7, #48]	; 0x30
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	633b      	str	r3, [r7, #48]	; 0x30
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	e160      	b.n	80098e4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009626:	2b00      	cmp	r3, #0
 8009628:	d11d      	bne.n	8009666 <I2C_Master_ADDR+0x98>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009632:	d118      	bne.n	8009666 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009634:	2300      	movs	r3, #0
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009658:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	651a      	str	r2, [r3, #80]	; 0x50
 8009664:	e13e      	b.n	80098e4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d113      	bne.n	8009698 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009670:	2300      	movs	r3, #0
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	e115      	b.n	80098c4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b01      	cmp	r3, #1
 80096a0:	f040 808a 	bne.w	80097b8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096aa:	d137      	bne.n	800971c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ca:	d113      	bne.n	80096f4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096da:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096dc:	2300      	movs	r3, #0
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	e0e7      	b.n	80098c4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096f4:	2300      	movs	r3, #0
 80096f6:	623b      	str	r3, [r7, #32]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	623b      	str	r3, [r7, #32]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	623b      	str	r3, [r7, #32]
 8009708:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	e0d3      	b.n	80098c4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	2b08      	cmp	r3, #8
 8009720:	d02e      	beq.n	8009780 <I2C_Master_ADDR+0x1b2>
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	2b20      	cmp	r3, #32
 8009726:	d02b      	beq.n	8009780 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972a:	2b12      	cmp	r3, #18
 800972c:	d102      	bne.n	8009734 <I2C_Master_ADDR+0x166>
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	2b01      	cmp	r3, #1
 8009732:	d125      	bne.n	8009780 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	2b04      	cmp	r3, #4
 8009738:	d00e      	beq.n	8009758 <I2C_Master_ADDR+0x18a>
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	2b02      	cmp	r3, #2
 800973e:	d00b      	beq.n	8009758 <I2C_Master_ADDR+0x18a>
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	2b10      	cmp	r3, #16
 8009744:	d008      	beq.n	8009758 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	e007      	b.n	8009768 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009766:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	e0a1      	b.n	80098c4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800978e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009790:	2300      	movs	r3, #0
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	61bb      	str	r3, [r7, #24]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	61bb      	str	r3, [r7, #24]
 80097a4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	e085      	b.n	80098c4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d14d      	bne.n	800985e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d016      	beq.n	80097f6 <I2C_Master_ADDR+0x228>
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d013      	beq.n	80097f6 <I2C_Master_ADDR+0x228>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	2b10      	cmp	r3, #16
 80097d2:	d010      	beq.n	80097f6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097e2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e007      	b.n	8009806 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009804:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009814:	d117      	bne.n	8009846 <I2C_Master_ADDR+0x278>
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800981c:	d00b      	beq.n	8009836 <I2C_Master_ADDR+0x268>
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	2b01      	cmp	r3, #1
 8009822:	d008      	beq.n	8009836 <I2C_Master_ADDR+0x268>
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	2b08      	cmp	r3, #8
 8009828:	d005      	beq.n	8009836 <I2C_Master_ADDR+0x268>
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	2b10      	cmp	r3, #16
 800982e:	d002      	beq.n	8009836 <I2C_Master_ADDR+0x268>
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	2b20      	cmp	r3, #32
 8009834:	d107      	bne.n	8009846 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009844:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	e032      	b.n	80098c4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800986c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800987c:	d117      	bne.n	80098ae <I2C_Master_ADDR+0x2e0>
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009884:	d00b      	beq.n	800989e <I2C_Master_ADDR+0x2d0>
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	2b01      	cmp	r3, #1
 800988a:	d008      	beq.n	800989e <I2C_Master_ADDR+0x2d0>
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	2b08      	cmp	r3, #8
 8009890:	d005      	beq.n	800989e <I2C_Master_ADDR+0x2d0>
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	2b10      	cmp	r3, #16
 8009896:	d002      	beq.n	800989e <I2C_Master_ADDR+0x2d0>
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	2b20      	cmp	r3, #32
 800989c:	d107      	bne.n	80098ae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	613b      	str	r3, [r7, #16]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80098ca:	e00b      	b.n	80098e4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	e7ff      	b.n	80098e4 <I2C_Master_ADDR+0x316>
 80098e4:	bf00      	nop
 80098e6:	3744      	adds	r7, #68	; 0x44
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d02b      	beq.n	8009962 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009924:	b29b      	uxth	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009932:	b29b      	uxth	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d114      	bne.n	8009962 <I2C_SlaveTransmit_TXE+0x72>
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	2b29      	cmp	r3, #41	; 0x29
 800993c:	d111      	bne.n	8009962 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800994c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2221      	movs	r2, #33	; 0x21
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2228      	movs	r2, #40	; 0x28
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7ff f9e7 	bl	8008d30 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d011      	beq.n	80099a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	781a      	ldrb	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009996:	b29b      	uxth	r3, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	b29a      	uxth	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d02c      	beq.n	8009a20 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	b2d2      	uxtb	r2, r2
 80099d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d114      	bne.n	8009a20 <I2C_SlaveReceive_RXNE+0x74>
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	2b2a      	cmp	r3, #42	; 0x2a
 80099fa:	d111      	bne.n	8009a20 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2222      	movs	r2, #34	; 0x22
 8009a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2228      	movs	r2, #40	; 0x28
 8009a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff f992 	bl	8008d44 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d012      	beq.n	8009a60 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	691a      	ldr	r2, [r3, #16]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a86:	2b28      	cmp	r3, #40	; 0x28
 8009a88:	d125      	bne.n	8009ad6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	81bb      	strh	r3, [r7, #12]
 8009ab8:	e002      	b.n	8009ac0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009ac8:	89ba      	ldrh	r2, [r7, #12]
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff f942 	bl	8008d58 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ad4:	e00e      	b.n	8009af4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60bb      	str	r3, [r7, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	60bb      	str	r3, [r7, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60bb      	str	r3, [r7, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	60bb      	str	r3, [r7, #8]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b58:	d172      	bne.n	8009c40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b22      	cmp	r3, #34	; 0x22
 8009b5e:	d002      	beq.n	8009b66 <I2C_Slave_STOPF+0x6a>
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	2b2a      	cmp	r3, #42	; 0x2a
 8009b64:	d135      	bne.n	8009bd2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d005      	beq.n	8009b8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f043 0204 	orr.w	r2, r3, #4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd ffce 	bl	8007b40 <HAL_DMA_GetState>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d049      	beq.n	8009c3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	4a69      	ldr	r2, [pc, #420]	; (8009d54 <I2C_Slave_STOPF+0x258>)
 8009bb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fd fe16 	bl	80077e8 <HAL_DMA_Abort_IT>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d03d      	beq.n	8009c3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009bd0:	e035      	b.n	8009c3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d005      	beq.n	8009bf6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bee:	f043 0204 	orr.w	r2, r3, #4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fd ff98 	bl	8007b40 <HAL_DMA_GetState>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d014      	beq.n	8009c40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1a:	4a4e      	ldr	r2, [pc, #312]	; (8009d54 <I2C_Slave_STOPF+0x258>)
 8009c1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fd fde0 	bl	80077e8 <HAL_DMA_Abort_IT>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	e000      	b.n	8009c40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009c3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d03e      	beq.n	8009cc8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d112      	bne.n	8009c7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691a      	ldr	r2, [r3, #16]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b40      	cmp	r3, #64	; 0x40
 8009c8a:	d112      	bne.n	8009cb2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691a      	ldr	r2, [r3, #16]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	f043 0204 	orr.w	r2, r3, #4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f8b3 	bl	8009e3c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009cd6:	e039      	b.n	8009d4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b2a      	cmp	r3, #42	; 0x2a
 8009cdc:	d109      	bne.n	8009cf2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2228      	movs	r2, #40	; 0x28
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff f829 	bl	8008d44 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b28      	cmp	r3, #40	; 0x28
 8009cfc:	d111      	bne.n	8009d22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <I2C_Slave_STOPF+0x25c>)
 8009d02:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff f82a 	bl	8008d74 <HAL_I2C_ListenCpltCallback>
}
 8009d20:	e014      	b.n	8009d4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d26:	2b22      	cmp	r3, #34	; 0x22
 8009d28:	d002      	beq.n	8009d30 <I2C_Slave_STOPF+0x234>
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b22      	cmp	r3, #34	; 0x22
 8009d2e:	d10d      	bne.n	8009d4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7fe fffc 	bl	8008d44 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d4c:	bf00      	nop
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	0800a39d 	.word	0x0800a39d
 8009d58:	ffff0000 	.word	0xffff0000

08009d5c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d70:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b08      	cmp	r3, #8
 8009d76:	d002      	beq.n	8009d7e <I2C_Slave_AF+0x22>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d129      	bne.n	8009dd2 <I2C_Slave_AF+0x76>
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2b28      	cmp	r3, #40	; 0x28
 8009d82:	d126      	bne.n	8009dd2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a2c      	ldr	r2, [pc, #176]	; (8009e38 <I2C_Slave_AF+0xdc>)
 8009d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d98:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009da2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009db2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7fe ffd2 	bl	8008d74 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009dd0:	e02e      	b.n	8009e30 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	2b21      	cmp	r3, #33	; 0x21
 8009dd6:	d126      	bne.n	8009e26 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a17      	ldr	r2, [pc, #92]	; (8009e38 <I2C_Slave_AF+0xdc>)
 8009ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2221      	movs	r2, #33	; 0x21
 8009de2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2220      	movs	r2, #32
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e02:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e0c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e1c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fe ff86 	bl	8008d30 <HAL_I2C_SlaveTxCpltCallback>
}
 8009e24:	e004      	b.n	8009e30 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e2e:	615a      	str	r2, [r3, #20]
}
 8009e30:	bf00      	nop
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	ffff0000 	.word	0xffff0000

08009e3c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	2b10      	cmp	r3, #16
 8009e58:	d002      	beq.n	8009e60 <I2C_ITError+0x24>
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b40      	cmp	r3, #64	; 0x40
 8009e5e:	d10a      	bne.n	8009e76 <I2C_ITError+0x3a>
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	2b22      	cmp	r3, #34	; 0x22
 8009e64:	d107      	bne.n	8009e76 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e7c:	2b28      	cmp	r3, #40	; 0x28
 8009e7e:	d107      	bne.n	8009e90 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2228      	movs	r2, #40	; 0x28
 8009e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e8e:	e015      	b.n	8009ebc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e9e:	d00a      	beq.n	8009eb6 <I2C_ITError+0x7a>
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	2b60      	cmp	r3, #96	; 0x60
 8009ea4:	d007      	beq.n	8009eb6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eca:	d162      	bne.n	8009f92 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d020      	beq.n	8009f2c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eee:	4a6a      	ldr	r2, [pc, #424]	; (800a098 <I2C_ITError+0x25c>)
 8009ef0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd fc76 	bl	80077e8 <HAL_DMA_Abort_IT>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 8089 	beq.w	800a016 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0201 	bic.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f26:	4610      	mov	r0, r2
 8009f28:	4798      	blx	r3
 8009f2a:	e074      	b.n	800a016 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f30:	4a59      	ldr	r2, [pc, #356]	; (800a098 <I2C_ITError+0x25c>)
 8009f32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fd fc55 	bl	80077e8 <HAL_DMA_Abort_IT>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d068      	beq.n	800a016 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	d10b      	bne.n	8009f6a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	b2d2      	uxtb	r2, r2
 8009f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
 8009f90:	e041      	b.n	800a016 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b60      	cmp	r3, #96	; 0x60
 8009f9c:	d125      	bne.n	8009fea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb6:	2b40      	cmp	r3, #64	; 0x40
 8009fb8:	d10b      	bne.n	8009fd2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	b2d2      	uxtb	r2, r2
 8009fc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0201 	bic.w	r2, r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fe feee 	bl	8008dc4 <HAL_I2C_AbortCpltCallback>
 8009fe8:	e015      	b.n	800a016 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff4:	2b40      	cmp	r3, #64	; 0x40
 8009ff6:	d10b      	bne.n	800a010 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	691a      	ldr	r2, [r3, #16]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7fe fecd 	bl	8008db0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10e      	bne.n	800a044 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a036:	2b00      	cmp	r3, #0
 800a038:	d104      	bne.n	800a044 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a052:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b04      	cmp	r3, #4
 800a066:	d113      	bne.n	800a090 <I2C_ITError+0x254>
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b28      	cmp	r3, #40	; 0x28
 800a06c:	d110      	bne.n	800a090 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <I2C_ITError+0x260>)
 800a072:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2220      	movs	r2, #32
 800a07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fe fe72 	bl	8008d74 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a090:	bf00      	nop
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	0800a39d 	.word	0x0800a39d
 800a09c:	ffff0000 	.word	0xffff0000

0800a0a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	817b      	strh	r3, [r7, #10]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	813b      	strh	r3, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fa08 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00d      	beq.n	800a0fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f0:	d103      	bne.n	800a0fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e05f      	b.n	800a1be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0fe:	897b      	ldrh	r3, [r7, #10]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	461a      	mov	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a10c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	6a3a      	ldr	r2, [r7, #32]
 800a112:	492d      	ldr	r1, [pc, #180]	; (800a1c8 <I2C_RequestMemoryWrite+0x128>)
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fa40 	bl	800a59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e04c      	b.n	800a1be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	617b      	str	r3, [r7, #20]
 800a138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13c:	6a39      	ldr	r1, [r7, #32]
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 faaa 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00d      	beq.n	800a166 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d107      	bne.n	800a162 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e02b      	b.n	800a1be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a166:	88fb      	ldrh	r3, [r7, #6]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d105      	bne.n	800a178 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a16c:	893b      	ldrh	r3, [r7, #8]
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	611a      	str	r2, [r3, #16]
 800a176:	e021      	b.n	800a1bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a178:	893b      	ldrh	r3, [r7, #8]
 800a17a:	0a1b      	lsrs	r3, r3, #8
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a188:	6a39      	ldr	r1, [r7, #32]
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f000 fa84 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00d      	beq.n	800a1b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d107      	bne.n	800a1ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e005      	b.n	800a1be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b2:	893b      	ldrh	r3, [r7, #8]
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	00010002 	.word	0x00010002

0800a1cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af02      	add	r7, sp, #8
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4603      	mov	r3, r0
 800a1dc:	817b      	strh	r3, [r7, #10]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	813b      	strh	r3, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f96a 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00d      	beq.n	800a23a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22c:	d103      	bne.n	800a236 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e0aa      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a23a:	897b      	ldrh	r3, [r7, #10]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	6a3a      	ldr	r2, [r7, #32]
 800a24e:	4952      	ldr	r1, [pc, #328]	; (800a398 <I2C_RequestMemoryRead+0x1cc>)
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f9a2 	bl	800a59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e097      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a278:	6a39      	ldr	r1, [r7, #32]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 fa0c 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d107      	bne.n	800a29e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a29c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e076      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2a2:	88fb      	ldrh	r3, [r7, #6]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d105      	bne.n	800a2b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	611a      	str	r2, [r3, #16]
 800a2b2:	e021      	b.n	800a2f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2b4:	893b      	ldrh	r3, [r7, #8]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c4:	6a39      	ldr	r1, [r7, #32]
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 f9e6 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00d      	beq.n	800a2ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d107      	bne.n	800a2ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e050      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fa:	6a39      	ldr	r1, [r7, #32]
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f9cb 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00d      	beq.n	800a324 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d107      	bne.n	800a320 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a31e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e035      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a332:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f8d3 	bl	800a4ec <I2C_WaitOnFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a35a:	d103      	bne.n	800a364 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e013      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a368:	897b      	ldrh	r3, [r7, #10]
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f043 0301 	orr.w	r3, r3, #1
 800a370:	b2da      	uxtb	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	6a3a      	ldr	r2, [r7, #32]
 800a37c:	4906      	ldr	r1, [pc, #24]	; (800a398 <I2C_RequestMemoryRead+0x1cc>)
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f90b 	bl	800a59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	00010002 	.word	0x00010002

0800a39c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a3b6:	4b4b      	ldr	r3, [pc, #300]	; (800a4e4 <I2C_DMAAbort+0x148>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	08db      	lsrs	r3, r3, #3
 800a3bc:	4a4a      	ldr	r2, [pc, #296]	; (800a4e8 <I2C_DMAAbort+0x14c>)
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	0a1a      	lsrs	r2, r3, #8
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	00da      	lsls	r2, r3, #3
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d106      	bne.n	800a3e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	f043 0220 	orr.w	r2, r3, #32
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a3e2:	e00a      	b.n	800a3fa <I2C_DMAAbort+0x5e>
    }
    count--;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f8:	d0ea      	beq.n	800a3d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a406:	2200      	movs	r2, #0
 800a408:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a416:	2200      	movs	r2, #0
 800a418:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a428:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2200      	movs	r2, #0
 800a42e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a434:	2b00      	cmp	r3, #0
 800a436:	d003      	beq.n	800a440 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	2200      	movs	r2, #0
 800a43e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	2200      	movs	r2, #0
 800a44e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 0201 	bic.w	r2, r2, #1
 800a45e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b60      	cmp	r3, #96	; 0x60
 800a46a:	d10e      	bne.n	800a48a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2220      	movs	r2, #32
 800a470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	2200      	movs	r2, #0
 800a480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a482:	6978      	ldr	r0, [r7, #20]
 800a484:	f7fe fc9e 	bl	8008dc4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a488:	e027      	b.n	800a4da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a48a:	7cfb      	ldrb	r3, [r7, #19]
 800a48c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a490:	2b28      	cmp	r3, #40	; 0x28
 800a492:	d117      	bne.n	800a4c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f042 0201 	orr.w	r2, r2, #1
 800a4a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2228      	movs	r2, #40	; 0x28
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a4c2:	e007      	b.n	800a4d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f7fe fc6b 	bl	8008db0 <HAL_I2C_ErrorCallback>
}
 800a4da:	bf00      	nop
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000154 	.word	0x20000154
 800a4e8:	14f8b589 	.word	0x14f8b589

0800a4ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4fc:	e025      	b.n	800a54a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a504:	d021      	beq.n	800a54a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a506:	f7fc ff7f 	bl	8007408 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d302      	bcc.n	800a51c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d116      	bne.n	800a54a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	f043 0220 	orr.w	r2, r3, #32
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e023      	b.n	800a592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	0c1b      	lsrs	r3, r3, #16
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b01      	cmp	r3, #1
 800a552:	d10d      	bne.n	800a570 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	43da      	mvns	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4013      	ands	r3, r2
 800a560:	b29b      	uxth	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	bf0c      	ite	eq
 800a566:	2301      	moveq	r3, #1
 800a568:	2300      	movne	r3, #0
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	e00c      	b.n	800a58a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	43da      	mvns	r2, r3
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	4013      	ands	r3, r2
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bf0c      	ite	eq
 800a582:	2301      	moveq	r3, #1
 800a584:	2300      	movne	r3, #0
 800a586:	b2db      	uxtb	r3, r3
 800a588:	461a      	mov	r2, r3
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d0b6      	beq.n	800a4fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5a8:	e051      	b.n	800a64e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b8:	d123      	bne.n	800a602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	f043 0204 	orr.w	r2, r3, #4
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e046      	b.n	800a690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a608:	d021      	beq.n	800a64e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a60a:	f7fc fefd 	bl	8007408 <HAL_GetTick>
 800a60e:	4602      	mov	r2, r0
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d116      	bne.n	800a64e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2220      	movs	r2, #32
 800a62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	f043 0220 	orr.w	r2, r3, #32
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e020      	b.n	800a690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	0c1b      	lsrs	r3, r3, #16
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b01      	cmp	r3, #1
 800a656:	d10c      	bne.n	800a672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	43da      	mvns	r2, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4013      	ands	r3, r2
 800a664:	b29b      	uxth	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	bf14      	ite	ne
 800a66a:	2301      	movne	r3, #1
 800a66c:	2300      	moveq	r3, #0
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	e00b      	b.n	800a68a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	43da      	mvns	r2, r3
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	4013      	ands	r3, r2
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	bf14      	ite	ne
 800a684:	2301      	movne	r3, #1
 800a686:	2300      	moveq	r3, #0
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d18d      	bne.n	800a5aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6a4:	e02d      	b.n	800a702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 f900 	bl	800a8ac <I2C_IsAcknowledgeFailed>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e02d      	b.n	800a712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6bc:	d021      	beq.n	800a702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6be:	f7fc fea3 	bl	8007408 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d302      	bcc.n	800a6d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d116      	bne.n	800a702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ee:	f043 0220 	orr.w	r2, r3, #32
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e007      	b.n	800a712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70c:	2b80      	cmp	r3, #128	; 0x80
 800a70e:	d1ca      	bne.n	800a6a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a726:	e02d      	b.n	800a784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 f8bf 	bl	800a8ac <I2C_IsAcknowledgeFailed>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e02d      	b.n	800a794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73e:	d021      	beq.n	800a784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a740:	f7fc fe62 	bl	8007408 <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d302      	bcc.n	800a756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d116      	bne.n	800a784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2220      	movs	r2, #32
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	f043 0220 	orr.w	r2, r3, #32
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e007      	b.n	800a794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d1ca      	bne.n	800a728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a7a8:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	08db      	lsrs	r3, r3, #3
 800a7ae:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b4:	0a1a      	lsrs	r2, r3, #8
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d107      	bne.n	800a7da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ce:	f043 0220 	orr.w	r2, r3, #32
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e008      	b.n	800a7ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e8:	d0e9      	beq.n	800a7be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	20000154 	.word	0x20000154
 800a7fc:	14f8b589 	.word	0x14f8b589

0800a800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a80c:	e042      	b.n	800a894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	f003 0310 	and.w	r3, r3, #16
 800a818:	2b10      	cmp	r3, #16
 800a81a:	d119      	bne.n	800a850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f06f 0210 	mvn.w	r2, #16
 800a824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2220      	movs	r2, #32
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e029      	b.n	800a8a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a850:	f7fc fdda 	bl	8007408 <HAL_GetTick>
 800a854:	4602      	mov	r2, r0
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d302      	bcc.n	800a866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d116      	bne.n	800a894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2220      	movs	r2, #32
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a880:	f043 0220 	orr.w	r2, r3, #32
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e007      	b.n	800a8a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	d1b5      	bne.n	800a80e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c2:	d11b      	bne.n	800a8fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e8:	f043 0204 	orr.w	r2, r3, #4
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e000      	b.n	800a8fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a916:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a91a:	d103      	bne.n	800a924 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a922:	e007      	b.n	800a934 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a92c:	d102      	bne.n	800a934 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2208      	movs	r2, #8
 800a932:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e267      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d075      	beq.n	800aa4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a95e:	4b88      	ldr	r3, [pc, #544]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 030c 	and.w	r3, r3, #12
 800a966:	2b04      	cmp	r3, #4
 800a968:	d00c      	beq.n	800a984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a96a:	4b85      	ldr	r3, [pc, #532]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a972:	2b08      	cmp	r3, #8
 800a974:	d112      	bne.n	800a99c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a976:	4b82      	ldr	r3, [pc, #520]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a97e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a982:	d10b      	bne.n	800a99c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a984:	4b7e      	ldr	r3, [pc, #504]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d05b      	beq.n	800aa48 <HAL_RCC_OscConfig+0x108>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d157      	bne.n	800aa48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e242      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a4:	d106      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x74>
 800a9a6:	4b76      	ldr	r3, [pc, #472]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a75      	ldr	r2, [pc, #468]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	e01d      	b.n	800a9f0 <HAL_RCC_OscConfig+0xb0>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9bc:	d10c      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x98>
 800a9be:	4b70      	ldr	r3, [pc, #448]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a6f      	ldr	r2, [pc, #444]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	4b6d      	ldr	r3, [pc, #436]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a6c      	ldr	r2, [pc, #432]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	e00b      	b.n	800a9f0 <HAL_RCC_OscConfig+0xb0>
 800a9d8:	4b69      	ldr	r3, [pc, #420]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a68      	ldr	r2, [pc, #416]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	4b66      	ldr	r3, [pc, #408]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a65      	ldr	r2, [pc, #404]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800a9ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d013      	beq.n	800aa20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9f8:	f7fc fd06 	bl	8007408 <HAL_GetTick>
 800a9fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9fe:	e008      	b.n	800aa12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa00:	f7fc fd02 	bl	8007408 <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b64      	cmp	r3, #100	; 0x64
 800aa0c:	d901      	bls.n	800aa12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e207      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa12:	4b5b      	ldr	r3, [pc, #364]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0f0      	beq.n	800aa00 <HAL_RCC_OscConfig+0xc0>
 800aa1e:	e014      	b.n	800aa4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa20:	f7fc fcf2 	bl	8007408 <HAL_GetTick>
 800aa24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa26:	e008      	b.n	800aa3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa28:	f7fc fcee 	bl	8007408 <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	2b64      	cmp	r3, #100	; 0x64
 800aa34:	d901      	bls.n	800aa3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e1f3      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa3a:	4b51      	ldr	r3, [pc, #324]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1f0      	bne.n	800aa28 <HAL_RCC_OscConfig+0xe8>
 800aa46:	e000      	b.n	800aa4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0302 	and.w	r3, r3, #2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d063      	beq.n	800ab1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa56:	4b4a      	ldr	r3, [pc, #296]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 030c 	and.w	r3, r3, #12
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00b      	beq.n	800aa7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa62:	4b47      	ldr	r3, [pc, #284]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	d11c      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa6e:	4b44      	ldr	r3, [pc, #272]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d116      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa7a:	4b41      	ldr	r3, [pc, #260]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <HAL_RCC_OscConfig+0x152>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d001      	beq.n	800aa92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e1c7      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa92:	4b3b      	ldr	r3, [pc, #236]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4937      	ldr	r1, [pc, #220]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aaa6:	e03a      	b.n	800ab1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d020      	beq.n	800aaf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aab0:	4b34      	ldr	r3, [pc, #208]	; (800ab84 <HAL_RCC_OscConfig+0x244>)
 800aab2:	2201      	movs	r2, #1
 800aab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab6:	f7fc fca7 	bl	8007408 <HAL_GetTick>
 800aaba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aabc:	e008      	b.n	800aad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aabe:	f7fc fca3 	bl	8007408 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e1a8      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aad0:	4b2b      	ldr	r3, [pc, #172]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aadc:	4b28      	ldr	r3, [pc, #160]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	00db      	lsls	r3, r3, #3
 800aaea:	4925      	ldr	r1, [pc, #148]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	600b      	str	r3, [r1, #0]
 800aaf0:	e015      	b.n	800ab1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaf2:	4b24      	ldr	r3, [pc, #144]	; (800ab84 <HAL_RCC_OscConfig+0x244>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf8:	f7fc fc86 	bl	8007408 <HAL_GetTick>
 800aafc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab00:	f7fc fc82 	bl	8007408 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e187      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab12:	4b1b      	ldr	r3, [pc, #108]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1f0      	bne.n	800ab00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0308 	and.w	r3, r3, #8
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d036      	beq.n	800ab98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d016      	beq.n	800ab60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab32:	4b15      	ldr	r3, [pc, #84]	; (800ab88 <HAL_RCC_OscConfig+0x248>)
 800ab34:	2201      	movs	r2, #1
 800ab36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab38:	f7fc fc66 	bl	8007408 <HAL_GetTick>
 800ab3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab3e:	e008      	b.n	800ab52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab40:	f7fc fc62 	bl	8007408 <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e167      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab52:	4b0b      	ldr	r3, [pc, #44]	; (800ab80 <HAL_RCC_OscConfig+0x240>)
 800ab54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0f0      	beq.n	800ab40 <HAL_RCC_OscConfig+0x200>
 800ab5e:	e01b      	b.n	800ab98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab60:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <HAL_RCC_OscConfig+0x248>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab66:	f7fc fc4f 	bl	8007408 <HAL_GetTick>
 800ab6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab6c:	e00e      	b.n	800ab8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab6e:	f7fc fc4b 	bl	8007408 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d907      	bls.n	800ab8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e150      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
 800ab80:	40023800 	.word	0x40023800
 800ab84:	42470000 	.word	0x42470000
 800ab88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab8c:	4b88      	ldr	r3, [pc, #544]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ab8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1ea      	bne.n	800ab6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 8097 	beq.w	800acd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aba6:	2300      	movs	r3, #0
 800aba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800abaa:	4b81      	ldr	r3, [pc, #516]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10f      	bne.n	800abd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abb6:	2300      	movs	r3, #0
 800abb8:	60bb      	str	r3, [r7, #8]
 800abba:	4b7d      	ldr	r3, [pc, #500]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	4a7c      	ldr	r2, [pc, #496]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800abc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc4:	6413      	str	r3, [r2, #64]	; 0x40
 800abc6:	4b7a      	ldr	r3, [pc, #488]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abce:	60bb      	str	r3, [r7, #8]
 800abd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abd2:	2301      	movs	r3, #1
 800abd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abd6:	4b77      	ldr	r3, [pc, #476]	; (800adb4 <HAL_RCC_OscConfig+0x474>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d118      	bne.n	800ac14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abe2:	4b74      	ldr	r3, [pc, #464]	; (800adb4 <HAL_RCC_OscConfig+0x474>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a73      	ldr	r2, [pc, #460]	; (800adb4 <HAL_RCC_OscConfig+0x474>)
 800abe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abee:	f7fc fc0b 	bl	8007408 <HAL_GetTick>
 800abf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abf4:	e008      	b.n	800ac08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abf6:	f7fc fc07 	bl	8007408 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d901      	bls.n	800ac08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e10c      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac08:	4b6a      	ldr	r3, [pc, #424]	; (800adb4 <HAL_RCC_OscConfig+0x474>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0f0      	beq.n	800abf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d106      	bne.n	800ac2a <HAL_RCC_OscConfig+0x2ea>
 800ac1c:	4b64      	ldr	r3, [pc, #400]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac20:	4a63      	ldr	r2, [pc, #396]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac22:	f043 0301 	orr.w	r3, r3, #1
 800ac26:	6713      	str	r3, [r2, #112]	; 0x70
 800ac28:	e01c      	b.n	800ac64 <HAL_RCC_OscConfig+0x324>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	2b05      	cmp	r3, #5
 800ac30:	d10c      	bne.n	800ac4c <HAL_RCC_OscConfig+0x30c>
 800ac32:	4b5f      	ldr	r3, [pc, #380]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	4a5e      	ldr	r2, [pc, #376]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac38:	f043 0304 	orr.w	r3, r3, #4
 800ac3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ac3e:	4b5c      	ldr	r3, [pc, #368]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac42:	4a5b      	ldr	r2, [pc, #364]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	6713      	str	r3, [r2, #112]	; 0x70
 800ac4a:	e00b      	b.n	800ac64 <HAL_RCC_OscConfig+0x324>
 800ac4c:	4b58      	ldr	r3, [pc, #352]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac50:	4a57      	ldr	r2, [pc, #348]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	6713      	str	r3, [r2, #112]	; 0x70
 800ac58:	4b55      	ldr	r3, [pc, #340]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5c:	4a54      	ldr	r2, [pc, #336]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac5e:	f023 0304 	bic.w	r3, r3, #4
 800ac62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d015      	beq.n	800ac98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac6c:	f7fc fbcc 	bl	8007408 <HAL_GetTick>
 800ac70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac72:	e00a      	b.n	800ac8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac74:	f7fc fbc8 	bl	8007408 <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e0cb      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac8a:	4b49      	ldr	r3, [pc, #292]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0ee      	beq.n	800ac74 <HAL_RCC_OscConfig+0x334>
 800ac96:	e014      	b.n	800acc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac98:	f7fc fbb6 	bl	8007408 <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac9e:	e00a      	b.n	800acb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aca0:	f7fc fbb2 	bl	8007408 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800acae:	4293      	cmp	r3, r2
 800acb0:	d901      	bls.n	800acb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800acb2:	2303      	movs	r3, #3
 800acb4:	e0b5      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800acb6:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800acb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acba:	f003 0302 	and.w	r3, r3, #2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1ee      	bne.n	800aca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d105      	bne.n	800acd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acc8:	4b39      	ldr	r3, [pc, #228]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800acca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800accc:	4a38      	ldr	r2, [pc, #224]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800acce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 80a1 	beq.w	800ae20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800acde:	4b34      	ldr	r3, [pc, #208]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f003 030c 	and.w	r3, r3, #12
 800ace6:	2b08      	cmp	r3, #8
 800ace8:	d05c      	beq.n	800ada4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d141      	bne.n	800ad76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acf2:	4b31      	ldr	r3, [pc, #196]	; (800adb8 <HAL_RCC_OscConfig+0x478>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acf8:	f7fc fb86 	bl	8007408 <HAL_GetTick>
 800acfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acfe:	e008      	b.n	800ad12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad00:	f7fc fb82 	bl	8007408 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e087      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad12:	4b27      	ldr	r3, [pc, #156]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1f0      	bne.n	800ad00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69da      	ldr	r2, [r3, #28]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	431a      	orrs	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	019b      	lsls	r3, r3, #6
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad34:	085b      	lsrs	r3, r3, #1
 800ad36:	3b01      	subs	r3, #1
 800ad38:	041b      	lsls	r3, r3, #16
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	061b      	lsls	r3, r3, #24
 800ad42:	491b      	ldr	r1, [pc, #108]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ad44:	4313      	orrs	r3, r2
 800ad46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad48:	4b1b      	ldr	r3, [pc, #108]	; (800adb8 <HAL_RCC_OscConfig+0x478>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad4e:	f7fc fb5b 	bl	8007408 <HAL_GetTick>
 800ad52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad54:	e008      	b.n	800ad68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad56:	f7fc fb57 	bl	8007408 <HAL_GetTick>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d901      	bls.n	800ad68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e05c      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad68:	4b11      	ldr	r3, [pc, #68]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0f0      	beq.n	800ad56 <HAL_RCC_OscConfig+0x416>
 800ad74:	e054      	b.n	800ae20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad76:	4b10      	ldr	r3, [pc, #64]	; (800adb8 <HAL_RCC_OscConfig+0x478>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad7c:	f7fc fb44 	bl	8007408 <HAL_GetTick>
 800ad80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad84:	f7fc fb40 	bl	8007408 <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e045      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad96:	4b06      	ldr	r3, [pc, #24]	; (800adb0 <HAL_RCC_OscConfig+0x470>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f0      	bne.n	800ad84 <HAL_RCC_OscConfig+0x444>
 800ada2:	e03d      	b.n	800ae20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d107      	bne.n	800adbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e038      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
 800adb0:	40023800 	.word	0x40023800
 800adb4:	40007000 	.word	0x40007000
 800adb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800adbc:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <HAL_RCC_OscConfig+0x4ec>)
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d028      	beq.n	800ae1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800add4:	429a      	cmp	r2, r3
 800add6:	d121      	bne.n	800ae1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d11a      	bne.n	800ae1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800adec:	4013      	ands	r3, r2
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800adf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d111      	bne.n	800ae1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	3b01      	subs	r3, #1
 800ae06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d107      	bne.n	800ae1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d001      	beq.n	800ae20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e000      	b.n	800ae22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	40023800 	.word	0x40023800

0800ae30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e0cc      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae44:	4b68      	ldr	r3, [pc, #416]	; (800afe8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0307 	and.w	r3, r3, #7
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d90c      	bls.n	800ae6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae52:	4b65      	ldr	r3, [pc, #404]	; (800afe8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	b2d2      	uxtb	r2, r2
 800ae58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae5a:	4b63      	ldr	r3, [pc, #396]	; (800afe8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d001      	beq.n	800ae6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e0b8      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0302 	and.w	r3, r3, #2
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d020      	beq.n	800aeba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae84:	4b59      	ldr	r3, [pc, #356]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	4a58      	ldr	r2, [pc, #352]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800ae8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0308 	and.w	r3, r3, #8
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d005      	beq.n	800aea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae9c:	4b53      	ldr	r3, [pc, #332]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	4a52      	ldr	r2, [pc, #328]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800aea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aea8:	4b50      	ldr	r3, [pc, #320]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	494d      	ldr	r1, [pc, #308]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d044      	beq.n	800af50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d107      	bne.n	800aede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aece:	4b47      	ldr	r3, [pc, #284]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d119      	bne.n	800af0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e07f      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d003      	beq.n	800aeee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d107      	bne.n	800aefe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aeee:	4b3f      	ldr	r3, [pc, #252]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d109      	bne.n	800af0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e06f      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aefe:	4b3b      	ldr	r3, [pc, #236]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e067      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af0e:	4b37      	ldr	r3, [pc, #220]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f023 0203 	bic.w	r2, r3, #3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	4934      	ldr	r1, [pc, #208]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af20:	f7fc fa72 	bl	8007408 <HAL_GetTick>
 800af24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af26:	e00a      	b.n	800af3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af28:	f7fc fa6e 	bl	8007408 <HAL_GetTick>
 800af2c:	4602      	mov	r2, r0
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	f241 3288 	movw	r2, #5000	; 0x1388
 800af36:	4293      	cmp	r3, r2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e04f      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af3e:	4b2b      	ldr	r3, [pc, #172]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f003 020c 	and.w	r2, r3, #12
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d1eb      	bne.n	800af28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af50:	4b25      	ldr	r3, [pc, #148]	; (800afe8 <HAL_RCC_ClockConfig+0x1b8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d20c      	bcs.n	800af78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af5e:	4b22      	ldr	r3, [pc, #136]	; (800afe8 <HAL_RCC_ClockConfig+0x1b8>)
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	b2d2      	uxtb	r2, r2
 800af64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af66:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <HAL_RCC_ClockConfig+0x1b8>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d001      	beq.n	800af78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	e032      	b.n	800afde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d008      	beq.n	800af96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af84:	4b19      	ldr	r3, [pc, #100]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	4916      	ldr	r1, [pc, #88]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800af92:	4313      	orrs	r3, r2
 800af94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0308 	and.w	r3, r3, #8
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d009      	beq.n	800afb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800afa2:	4b12      	ldr	r3, [pc, #72]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	00db      	lsls	r3, r3, #3
 800afb0:	490e      	ldr	r1, [pc, #56]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800afb2:	4313      	orrs	r3, r2
 800afb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800afb6:	f000 f821 	bl	800affc <HAL_RCC_GetSysClockFreq>
 800afba:	4602      	mov	r2, r0
 800afbc:	4b0b      	ldr	r3, [pc, #44]	; (800afec <HAL_RCC_ClockConfig+0x1bc>)
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	091b      	lsrs	r3, r3, #4
 800afc2:	f003 030f 	and.w	r3, r3, #15
 800afc6:	490a      	ldr	r1, [pc, #40]	; (800aff0 <HAL_RCC_ClockConfig+0x1c0>)
 800afc8:	5ccb      	ldrb	r3, [r1, r3]
 800afca:	fa22 f303 	lsr.w	r3, r2, r3
 800afce:	4a09      	ldr	r2, [pc, #36]	; (800aff4 <HAL_RCC_ClockConfig+0x1c4>)
 800afd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800afd2:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <HAL_RCC_ClockConfig+0x1c8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fc f9d2 	bl	8007380 <HAL_InitTick>

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	40023c00 	.word	0x40023c00
 800afec:	40023800 	.word	0x40023800
 800aff0:	08010ae0 	.word	0x08010ae0
 800aff4:	20000154 	.word	0x20000154
 800aff8:	20000180 	.word	0x20000180

0800affc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800affc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b000:	b094      	sub	sp, #80	; 0x50
 800b002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	647b      	str	r3, [r7, #68]	; 0x44
 800b008:	2300      	movs	r3, #0
 800b00a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b00c:	2300      	movs	r3, #0
 800b00e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b014:	4b79      	ldr	r3, [pc, #484]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f003 030c 	and.w	r3, r3, #12
 800b01c:	2b08      	cmp	r3, #8
 800b01e:	d00d      	beq.n	800b03c <HAL_RCC_GetSysClockFreq+0x40>
 800b020:	2b08      	cmp	r3, #8
 800b022:	f200 80e1 	bhi.w	800b1e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <HAL_RCC_GetSysClockFreq+0x34>
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d003      	beq.n	800b036 <HAL_RCC_GetSysClockFreq+0x3a>
 800b02e:	e0db      	b.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b030:	4b73      	ldr	r3, [pc, #460]	; (800b200 <HAL_RCC_GetSysClockFreq+0x204>)
 800b032:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b034:	e0db      	b.n	800b1ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b036:	4b73      	ldr	r3, [pc, #460]	; (800b204 <HAL_RCC_GetSysClockFreq+0x208>)
 800b038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b03a:	e0d8      	b.n	800b1ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b03c:	4b6f      	ldr	r3, [pc, #444]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b044:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b046:	4b6d      	ldr	r3, [pc, #436]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d063      	beq.n	800b11a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b052:	4b6a      	ldr	r3, [pc, #424]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	099b      	lsrs	r3, r3, #6
 800b058:	2200      	movs	r2, #0
 800b05a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b05c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b064:	633b      	str	r3, [r7, #48]	; 0x30
 800b066:	2300      	movs	r3, #0
 800b068:	637b      	str	r3, [r7, #52]	; 0x34
 800b06a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b06e:	4622      	mov	r2, r4
 800b070:	462b      	mov	r3, r5
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f04f 0100 	mov.w	r1, #0
 800b07a:	0159      	lsls	r1, r3, #5
 800b07c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b080:	0150      	lsls	r0, r2, #5
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4621      	mov	r1, r4
 800b088:	1a51      	subs	r1, r2, r1
 800b08a:	6139      	str	r1, [r7, #16]
 800b08c:	4629      	mov	r1, r5
 800b08e:	eb63 0301 	sbc.w	r3, r3, r1
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	f04f 0200 	mov.w	r2, #0
 800b098:	f04f 0300 	mov.w	r3, #0
 800b09c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b0a0:	4659      	mov	r1, fp
 800b0a2:	018b      	lsls	r3, r1, #6
 800b0a4:	4651      	mov	r1, sl
 800b0a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b0aa:	4651      	mov	r1, sl
 800b0ac:	018a      	lsls	r2, r1, #6
 800b0ae:	4651      	mov	r1, sl
 800b0b0:	ebb2 0801 	subs.w	r8, r2, r1
 800b0b4:	4659      	mov	r1, fp
 800b0b6:	eb63 0901 	sbc.w	r9, r3, r1
 800b0ba:	f04f 0200 	mov.w	r2, #0
 800b0be:	f04f 0300 	mov.w	r3, #0
 800b0c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b0c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b0ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b0ce:	4690      	mov	r8, r2
 800b0d0:	4699      	mov	r9, r3
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	eb18 0303 	adds.w	r3, r8, r3
 800b0d8:	60bb      	str	r3, [r7, #8]
 800b0da:	462b      	mov	r3, r5
 800b0dc:	eb49 0303 	adc.w	r3, r9, r3
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	024b      	lsls	r3, r1, #9
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	024a      	lsls	r2, r1, #9
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4619      	mov	r1, r3
 800b100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b102:	2200      	movs	r2, #0
 800b104:	62bb      	str	r3, [r7, #40]	; 0x28
 800b106:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b10c:	f7f5 f86e 	bl	80001ec <__aeabi_uldivmod>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4613      	mov	r3, r2
 800b116:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b118:	e058      	b.n	800b1cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b11a:	4b38      	ldr	r3, [pc, #224]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	099b      	lsrs	r3, r3, #6
 800b120:	2200      	movs	r2, #0
 800b122:	4618      	mov	r0, r3
 800b124:	4611      	mov	r1, r2
 800b126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b12a:	623b      	str	r3, [r7, #32]
 800b12c:	2300      	movs	r3, #0
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
 800b130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	f04f 0000 	mov.w	r0, #0
 800b13c:	f04f 0100 	mov.w	r1, #0
 800b140:	0159      	lsls	r1, r3, #5
 800b142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b146:	0150      	lsls	r0, r2, #5
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4641      	mov	r1, r8
 800b14e:	ebb2 0a01 	subs.w	sl, r2, r1
 800b152:	4649      	mov	r1, r9
 800b154:	eb63 0b01 	sbc.w	fp, r3, r1
 800b158:	f04f 0200 	mov.w	r2, #0
 800b15c:	f04f 0300 	mov.w	r3, #0
 800b160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b16c:	ebb2 040a 	subs.w	r4, r2, sl
 800b170:	eb63 050b 	sbc.w	r5, r3, fp
 800b174:	f04f 0200 	mov.w	r2, #0
 800b178:	f04f 0300 	mov.w	r3, #0
 800b17c:	00eb      	lsls	r3, r5, #3
 800b17e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b182:	00e2      	lsls	r2, r4, #3
 800b184:	4614      	mov	r4, r2
 800b186:	461d      	mov	r5, r3
 800b188:	4643      	mov	r3, r8
 800b18a:	18e3      	adds	r3, r4, r3
 800b18c:	603b      	str	r3, [r7, #0]
 800b18e:	464b      	mov	r3, r9
 800b190:	eb45 0303 	adc.w	r3, r5, r3
 800b194:	607b      	str	r3, [r7, #4]
 800b196:	f04f 0200 	mov.w	r2, #0
 800b19a:	f04f 0300 	mov.w	r3, #0
 800b19e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	028b      	lsls	r3, r1, #10
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	028a      	lsls	r2, r1, #10
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	61fa      	str	r2, [r7, #28]
 800b1bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1c0:	f7f5 f814 	bl	80001ec <__aeabi_uldivmod>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b1cc:	4b0b      	ldr	r3, [pc, #44]	; (800b1fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	0c1b      	lsrs	r3, r3, #16
 800b1d2:	f003 0303 	and.w	r3, r3, #3
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b1dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1e6:	e002      	b.n	800b1ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3750      	adds	r7, #80	; 0x50
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1fa:	bf00      	nop
 800b1fc:	40023800 	.word	0x40023800
 800b200:	00f42400 	.word	0x00f42400
 800b204:	007a1200 	.word	0x007a1200

0800b208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b20c:	4b03      	ldr	r3, [pc, #12]	; (800b21c <HAL_RCC_GetHCLKFreq+0x14>)
 800b20e:	681b      	ldr	r3, [r3, #0]
}
 800b210:	4618      	mov	r0, r3
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20000154 	.word	0x20000154

0800b220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b224:	f7ff fff0 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800b228:	4602      	mov	r2, r0
 800b22a:	4b05      	ldr	r3, [pc, #20]	; (800b240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	0a9b      	lsrs	r3, r3, #10
 800b230:	f003 0307 	and.w	r3, r3, #7
 800b234:	4903      	ldr	r1, [pc, #12]	; (800b244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b236:	5ccb      	ldrb	r3, [r1, r3]
 800b238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	40023800 	.word	0x40023800
 800b244:	08010af0 	.word	0x08010af0

0800b248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b24c:	f7ff ffdc 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800b250:	4602      	mov	r2, r0
 800b252:	4b05      	ldr	r3, [pc, #20]	; (800b268 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	0b5b      	lsrs	r3, r3, #13
 800b258:	f003 0307 	and.w	r3, r3, #7
 800b25c:	4903      	ldr	r1, [pc, #12]	; (800b26c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b25e:	5ccb      	ldrb	r3, [r1, r3]
 800b260:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b264:	4618      	mov	r0, r3
 800b266:	bd80      	pop	{r7, pc}
 800b268:	40023800 	.word	0x40023800
 800b26c:	08010af0 	.word	0x08010af0

0800b270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e07b      	b.n	800b37a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	d108      	bne.n	800b29c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b292:	d009      	beq.n	800b2a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	61da      	str	r2, [r3, #28]
 800b29a:	e005      	b.n	800b2a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fa fe3a 	bl	8005f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	f003 0302 	and.w	r3, r3, #2
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0301 	and.w	r3, r3, #1
 800b30e:	431a      	orrs	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b322:	431a      	orrs	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32c:	ea42 0103 	orr.w	r1, r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b334:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	0c1b      	lsrs	r3, r3, #16
 800b346:	f003 0104 	and.w	r1, r3, #4
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	f003 0210 	and.w	r2, r3, #16
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	430a      	orrs	r2, r1
 800b358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	69da      	ldr	r2, [r3, #28]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b088      	sub	sp, #32
 800b386:	af00      	add	r7, sp, #0
 800b388:	60f8      	str	r0, [r7, #12]
 800b38a:	60b9      	str	r1, [r7, #8]
 800b38c:	603b      	str	r3, [r7, #0]
 800b38e:	4613      	mov	r3, r2
 800b390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_SPI_Transmit+0x22>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e126      	b.n	800b5f2 <HAL_SPI_Transmit+0x270>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ac:	f7fc f82c 	bl	8007408 <HAL_GetTick>
 800b3b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b3b2:	88fb      	ldrh	r3, [r7, #6]
 800b3b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d002      	beq.n	800b3c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3c6:	e10b      	b.n	800b5e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <HAL_SPI_Transmit+0x52>
 800b3ce:	88fb      	ldrh	r3, [r7, #6]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d102      	bne.n	800b3da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3d8:	e102      	b.n	800b5e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2203      	movs	r2, #3
 800b3de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	88fa      	ldrh	r2, [r7, #6]
 800b3f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	88fa      	ldrh	r2, [r7, #6]
 800b3f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b420:	d10f      	bne.n	800b442 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	d007      	beq.n	800b460 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b45e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b468:	d14b      	bne.n	800b502 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <HAL_SPI_Transmit+0xf6>
 800b472:	8afb      	ldrh	r3, [r7, #22]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d13e      	bne.n	800b4f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47c:	881a      	ldrh	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	1c9a      	adds	r2, r3, #2
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b492:	b29b      	uxth	r3, r3
 800b494:	3b01      	subs	r3, #1
 800b496:	b29a      	uxth	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b49c:	e02b      	b.n	800b4f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d112      	bne.n	800b4d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	881a      	ldrh	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4bc:	1c9a      	adds	r2, r3, #2
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	86da      	strh	r2, [r3, #54]	; 0x36
 800b4d0:	e011      	b.n	800b4f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4d2:	f7fb ff99 	bl	8007408 <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d803      	bhi.n	800b4ea <HAL_SPI_Transmit+0x168>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e8:	d102      	bne.n	800b4f0 <HAL_SPI_Transmit+0x16e>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b4f4:	e074      	b.n	800b5e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1ce      	bne.n	800b49e <HAL_SPI_Transmit+0x11c>
 800b500:	e04c      	b.n	800b59c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <HAL_SPI_Transmit+0x18e>
 800b50a:	8afb      	ldrh	r3, [r7, #22]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d140      	bne.n	800b592 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	330c      	adds	r3, #12
 800b51a:	7812      	ldrb	r2, [r2, #0]
 800b51c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b536:	e02c      	b.n	800b592 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b02      	cmp	r3, #2
 800b544:	d113      	bne.n	800b56e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	330c      	adds	r3, #12
 800b550:	7812      	ldrb	r2, [r2, #0]
 800b552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	1c5a      	adds	r2, r3, #1
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b562:	b29b      	uxth	r3, r3
 800b564:	3b01      	subs	r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b56c:	e011      	b.n	800b592 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b56e:	f7fb ff4b 	bl	8007408 <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d803      	bhi.n	800b586 <HAL_SPI_Transmit+0x204>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b584:	d102      	bne.n	800b58c <HAL_SPI_Transmit+0x20a>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d102      	bne.n	800b592 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b590:	e026      	b.n	800b5e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b596:	b29b      	uxth	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1cd      	bne.n	800b538 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 fcdd 	bl	800bf60 <SPI_EndRxTxTransaction>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	613b      	str	r3, [r7, #16]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	77fb      	strb	r3, [r7, #31]
 800b5dc:	e000      	b.n	800b5e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b5de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b5f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3720      	adds	r7, #32
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b088      	sub	sp, #32
 800b5fe:	af02      	add	r7, sp, #8
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	603b      	str	r3, [r7, #0]
 800b606:	4613      	mov	r3, r2
 800b608:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b616:	d112      	bne.n	800b63e <HAL_SPI_Receive+0x44>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10e      	bne.n	800b63e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2204      	movs	r2, #4
 800b624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b628:	88fa      	ldrh	r2, [r7, #6]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	4613      	mov	r3, r2
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f8f1 	bl	800b81c <HAL_SPI_TransmitReceive>
 800b63a:	4603      	mov	r3, r0
 800b63c:	e0ea      	b.n	800b814 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b644:	2b01      	cmp	r3, #1
 800b646:	d101      	bne.n	800b64c <HAL_SPI_Receive+0x52>
 800b648:	2302      	movs	r3, #2
 800b64a:	e0e3      	b.n	800b814 <HAL_SPI_Receive+0x21a>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b654:	f7fb fed8 	bl	8007408 <HAL_GetTick>
 800b658:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b01      	cmp	r3, #1
 800b664:	d002      	beq.n	800b66c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b666:	2302      	movs	r3, #2
 800b668:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b66a:	e0ca      	b.n	800b802 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <HAL_SPI_Receive+0x7e>
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b67c:	e0c1      	b.n	800b802 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2204      	movs	r2, #4
 800b682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	88fa      	ldrh	r2, [r7, #6]
 800b696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	88fa      	ldrh	r2, [r7, #6]
 800b69c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6c4:	d10f      	bne.n	800b6e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b40      	cmp	r3, #64	; 0x40
 800b6f2:	d007      	beq.n	800b704 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b702:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d162      	bne.n	800b7d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b70c:	e02e      	b.n	800b76c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d115      	bne.n	800b748 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f103 020c 	add.w	r2, r3, #12
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b728:	7812      	ldrb	r2, [r2, #0]
 800b72a:	b2d2      	uxtb	r2, r2
 800b72c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	b29a      	uxth	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b746:	e011      	b.n	800b76c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b748:	f7fb fe5e 	bl	8007408 <HAL_GetTick>
 800b74c:	4602      	mov	r2, r0
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	429a      	cmp	r2, r3
 800b756:	d803      	bhi.n	800b760 <HAL_SPI_Receive+0x166>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75e:	d102      	bne.n	800b766 <HAL_SPI_Receive+0x16c>
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d102      	bne.n	800b76c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b76a:	e04a      	b.n	800b802 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b770:	b29b      	uxth	r3, r3
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1cb      	bne.n	800b70e <HAL_SPI_Receive+0x114>
 800b776:	e031      	b.n	800b7dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	2b01      	cmp	r3, #1
 800b784:	d113      	bne.n	800b7ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b790:	b292      	uxth	r2, r2
 800b792:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b798:	1c9a      	adds	r2, r3, #2
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7ac:	e011      	b.n	800b7d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7ae:	f7fb fe2b 	bl	8007408 <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d803      	bhi.n	800b7c6 <HAL_SPI_Receive+0x1cc>
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c4:	d102      	bne.n	800b7cc <HAL_SPI_Receive+0x1d2>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7d0:	e017      	b.n	800b802 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1cd      	bne.n	800b778 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 fb57 	bl	800be94 <SPI_EndRxTransaction>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	75fb      	strb	r3, [r7, #23]
 800b7fe:	e000      	b.n	800b802 <HAL_SPI_Receive+0x208>
  }

error :
 800b800:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b812:	7dfb      	ldrb	r3, [r7, #23]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08c      	sub	sp, #48	; 0x30
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b82a:	2301      	movs	r3, #1
 800b82c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d101      	bne.n	800b842 <HAL_SPI_TransmitReceive+0x26>
 800b83e:	2302      	movs	r3, #2
 800b840:	e18a      	b.n	800bb58 <HAL_SPI_TransmitReceive+0x33c>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b84a:	f7fb fddd 	bl	8007408 <HAL_GetTick>
 800b84e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b860:	887b      	ldrh	r3, [r7, #2]
 800b862:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d00f      	beq.n	800b88c <HAL_SPI_TransmitReceive+0x70>
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b872:	d107      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x68>
 800b87c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b880:	2b04      	cmp	r3, #4
 800b882:	d003      	beq.n	800b88c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b884:	2302      	movs	r3, #2
 800b886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b88a:	e15b      	b.n	800bb44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d005      	beq.n	800b89e <HAL_SPI_TransmitReceive+0x82>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <HAL_SPI_TransmitReceive+0x82>
 800b898:	887b      	ldrh	r3, [r7, #2]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d103      	bne.n	800b8a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8a4:	e14e      	b.n	800bb44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	d003      	beq.n	800b8ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2205      	movs	r2, #5
 800b8b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	887a      	ldrh	r2, [r7, #2]
 800b8ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	887a      	ldrh	r2, [r7, #2]
 800b8d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	887a      	ldrh	r2, [r7, #2]
 800b8dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	887a      	ldrh	r2, [r7, #2]
 800b8e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fa:	2b40      	cmp	r3, #64	; 0x40
 800b8fc:	d007      	beq.n	800b90e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b90c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b916:	d178      	bne.n	800ba0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <HAL_SPI_TransmitReceive+0x10a>
 800b920:	8b7b      	ldrh	r3, [r7, #26]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d166      	bne.n	800b9f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	881a      	ldrh	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b936:	1c9a      	adds	r2, r3, #2
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b940:	b29b      	uxth	r3, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	b29a      	uxth	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b94a:	e053      	b.n	800b9f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b02      	cmp	r3, #2
 800b958:	d11b      	bne.n	800b992 <HAL_SPI_TransmitReceive+0x176>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b95e:	b29b      	uxth	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	d016      	beq.n	800b992 <HAL_SPI_TransmitReceive+0x176>
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	2b01      	cmp	r3, #1
 800b968:	d113      	bne.n	800b992 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96e:	881a      	ldrh	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	1c9a      	adds	r2, r3, #2
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d119      	bne.n	800b9d4 <HAL_SPI_TransmitReceive+0x1b8>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d014      	beq.n	800b9d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68da      	ldr	r2, [r3, #12]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b4:	b292      	uxth	r2, r2
 800b9b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9bc:	1c9a      	adds	r2, r3, #2
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b9d4:	f7fb fd18 	bl	8007408 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d807      	bhi.n	800b9f4 <HAL_SPI_TransmitReceive+0x1d8>
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d003      	beq.n	800b9f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9f2:	e0a7      	b.n	800bb44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1a6      	bne.n	800b94c <HAL_SPI_TransmitReceive+0x130>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1a1      	bne.n	800b94c <HAL_SPI_TransmitReceive+0x130>
 800ba08:	e07c      	b.n	800bb04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <HAL_SPI_TransmitReceive+0x1fc>
 800ba12:	8b7b      	ldrh	r3, [r7, #26]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d16b      	bne.n	800baf0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	330c      	adds	r3, #12
 800ba22:	7812      	ldrb	r2, [r2, #0]
 800ba24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba3e:	e057      	b.n	800baf0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d11c      	bne.n	800ba88 <HAL_SPI_TransmitReceive+0x26c>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d017      	beq.n	800ba88 <HAL_SPI_TransmitReceive+0x26c>
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d114      	bne.n	800ba88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	330c      	adds	r3, #12
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d119      	bne.n	800baca <HAL_SPI_TransmitReceive+0x2ae>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d014      	beq.n	800baca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68da      	ldr	r2, [r3, #12]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bac6:	2301      	movs	r3, #1
 800bac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800baca:	f7fb fc9d 	bl	8007408 <HAL_GetTick>
 800bace:	4602      	mov	r2, r0
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d803      	bhi.n	800bae2 <HAL_SPI_TransmitReceive+0x2c6>
 800bada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae0:	d102      	bne.n	800bae8 <HAL_SPI_TransmitReceive+0x2cc>
 800bae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800baee:	e029      	b.n	800bb44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1a2      	bne.n	800ba40 <HAL_SPI_TransmitReceive+0x224>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d19d      	bne.n	800ba40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 fa29 	bl	800bf60 <SPI_EndRxTxTransaction>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d006      	beq.n	800bb22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bb20:	e010      	b.n	800bb44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10b      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	e000      	b.n	800bb44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3730      	adds	r7, #48	; 0x30
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10e      	bne.n	800bba0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d009      	beq.n	800bba0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d004      	beq.n	800bba0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	4798      	blx	r3
    return;
 800bb9e:	e0ce      	b.n	800bd3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d009      	beq.n	800bbbe <HAL_SPI_IRQHandler+0x5e>
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	4798      	blx	r3
    return;
 800bbbc:	e0bf      	b.n	800bd3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	f003 0320 	and.w	r3, r3, #32
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10a      	bne.n	800bbde <HAL_SPI_IRQHandler+0x7e>
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d105      	bne.n	800bbde <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 80b0 	beq.w	800bd3e <HAL_SPI_IRQHandler+0x1de>
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	f003 0320 	and.w	r3, r3, #32
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 80aa 	beq.w	800bd3e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d023      	beq.n	800bc3c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d011      	beq.n	800bc24 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc04:	f043 0204 	orr.w	r2, r3, #4
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	e00b      	b.n	800bc3c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc24:	2300      	movs	r3, #0
 800bc26:	613b      	str	r3, [r7, #16]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	613b      	str	r3, [r7, #16]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	613b      	str	r3, [r7, #16]
 800bc38:	693b      	ldr	r3, [r7, #16]
        return;
 800bc3a:	e080      	b.n	800bd3e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d014      	beq.n	800bc70 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4a:	f043 0201 	orr.w	r2, r3, #1
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00c      	beq.n	800bc94 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7e:	f043 0208 	orr.w	r2, r3, #8
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc86:	2300      	movs	r3, #0
 800bc88:	60bb      	str	r3, [r7, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	60bb      	str	r3, [r7, #8]
 800bc92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d04f      	beq.n	800bd3c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bcaa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	f003 0302 	and.w	r3, r3, #2
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d104      	bne.n	800bcc8 <HAL_SPI_IRQHandler+0x168>
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d034      	beq.n	800bd32 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0203 	bic.w	r2, r2, #3
 800bcd6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d011      	beq.n	800bd04 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bce4:	4a17      	ldr	r2, [pc, #92]	; (800bd44 <HAL_SPI_IRQHandler+0x1e4>)
 800bce6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fb fd7b 	bl	80077e8 <HAL_DMA_Abort_IT>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d016      	beq.n	800bd3a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd10:	4a0c      	ldr	r2, [pc, #48]	; (800bd44 <HAL_SPI_IRQHandler+0x1e4>)
 800bd12:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fb fd65 	bl	80077e8 <HAL_DMA_Abort_IT>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bd30:	e003      	b.n	800bd3a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f808 	bl	800bd48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bd38:	e000      	b.n	800bd3c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800bd3a:	bf00      	nop
    return;
 800bd3c:	bf00      	nop
  }
}
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	0800bd5d 	.word	0x0800bd5d

0800bd48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff ffe6 	bl	800bd48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	603b      	str	r3, [r7, #0]
 800bd90:	4613      	mov	r3, r2
 800bd92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd94:	f7fb fb38 	bl	8007408 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	1a9b      	subs	r3, r3, r2
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4413      	add	r3, r2
 800bda2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bda4:	f7fb fb30 	bl	8007408 <HAL_GetTick>
 800bda8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bdaa:	4b39      	ldr	r3, [pc, #228]	; (800be90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	015b      	lsls	r3, r3, #5
 800bdb0:	0d1b      	lsrs	r3, r3, #20
 800bdb2:	69fa      	ldr	r2, [r7, #28]
 800bdb4:	fb02 f303 	mul.w	r3, r2, r3
 800bdb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdba:	e054      	b.n	800be66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc2:	d050      	beq.n	800be66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bdc4:	f7fb fb20 	bl	8007408 <HAL_GetTick>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	69fa      	ldr	r2, [r7, #28]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d902      	bls.n	800bdda <SPI_WaitFlagStateUntilTimeout+0x56>
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d13d      	bne.n	800be56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685a      	ldr	r2, [r3, #4]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bde8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdf2:	d111      	bne.n	800be18 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdfc:	d004      	beq.n	800be08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be06:	d107      	bne.n	800be18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be20:	d10f      	bne.n	800be42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e017      	b.n	800be86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	3b01      	subs	r3, #1
 800be64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689a      	ldr	r2, [r3, #8]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	4013      	ands	r3, r2
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	429a      	cmp	r2, r3
 800be74:	bf0c      	ite	eq
 800be76:	2301      	moveq	r3, #1
 800be78:	2300      	movne	r3, #0
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	461a      	mov	r2, r3
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	429a      	cmp	r2, r3
 800be82:	d19b      	bne.n	800bdbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3720      	adds	r7, #32
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000154 	.word	0x20000154

0800be94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af02      	add	r7, sp, #8
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bea8:	d111      	bne.n	800bece <SPI_EndRxTransaction+0x3a>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beb2:	d004      	beq.n	800bebe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bebc:	d107      	bne.n	800bece <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800becc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bed6:	d12a      	bne.n	800bf2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bee0:	d012      	beq.n	800bf08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2200      	movs	r2, #0
 800beea:	2180      	movs	r1, #128	; 0x80
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff ff49 	bl	800bd84 <SPI_WaitFlagStateUntilTimeout>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d02d      	beq.n	800bf54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befc:	f043 0220 	orr.w	r2, r3, #32
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e026      	b.n	800bf56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2101      	movs	r1, #1
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff ff36 	bl	800bd84 <SPI_WaitFlagStateUntilTimeout>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d01a      	beq.n	800bf54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf22:	f043 0220 	orr.w	r2, r3, #32
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e013      	b.n	800bf56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	2200      	movs	r2, #0
 800bf36:	2101      	movs	r1, #1
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f7ff ff23 	bl	800bd84 <SPI_WaitFlagStateUntilTimeout>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d007      	beq.n	800bf54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf48:	f043 0220 	orr.w	r2, r3, #32
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e000      	b.n	800bf56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af02      	add	r7, sp, #8
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bf6c:	4b1b      	ldr	r3, [pc, #108]	; (800bfdc <SPI_EndRxTxTransaction+0x7c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a1b      	ldr	r2, [pc, #108]	; (800bfe0 <SPI_EndRxTxTransaction+0x80>)
 800bf72:	fba2 2303 	umull	r2, r3, r2, r3
 800bf76:	0d5b      	lsrs	r3, r3, #21
 800bf78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf7c:	fb02 f303 	mul.w	r3, r2, r3
 800bf80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf8a:	d112      	bne.n	800bfb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2200      	movs	r2, #0
 800bf94:	2180      	movs	r1, #128	; 0x80
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f7ff fef4 	bl	800bd84 <SPI_WaitFlagStateUntilTimeout>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d016      	beq.n	800bfd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa6:	f043 0220 	orr.w	r2, r3, #32
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e00f      	b.n	800bfd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc8:	2b80      	cmp	r3, #128	; 0x80
 800bfca:	d0f2      	beq.n	800bfb2 <SPI_EndRxTxTransaction+0x52>
 800bfcc:	e000      	b.n	800bfd0 <SPI_EndRxTxTransaction+0x70>
        break;
 800bfce:	bf00      	nop
  }

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3718      	adds	r7, #24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20000154 	.word	0x20000154
 800bfe0:	165e9f81 	.word	0x165e9f81

0800bfe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e041      	b.n	800c07a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7fa fde4 	bl	8006bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3304      	adds	r3, #4
 800c020:	4619      	mov	r1, r3
 800c022:	4610      	mov	r0, r2
 800c024:	f000 fae0 	bl	800c5e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b01      	cmp	r3, #1
 800c096:	d001      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e04e      	b.n	800c13a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68da      	ldr	r2, [r3, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0201 	orr.w	r2, r2, #1
 800c0b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a23      	ldr	r2, [pc, #140]	; (800c148 <HAL_TIM_Base_Start_IT+0xc4>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d022      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0c6:	d01d      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a1f      	ldr	r2, [pc, #124]	; (800c14c <HAL_TIM_Base_Start_IT+0xc8>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d018      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a1e      	ldr	r2, [pc, #120]	; (800c150 <HAL_TIM_Base_Start_IT+0xcc>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d013      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a1c      	ldr	r2, [pc, #112]	; (800c154 <HAL_TIM_Base_Start_IT+0xd0>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00e      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a1b      	ldr	r2, [pc, #108]	; (800c158 <HAL_TIM_Base_Start_IT+0xd4>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d009      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a19      	ldr	r2, [pc, #100]	; (800c15c <HAL_TIM_Base_Start_IT+0xd8>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d004      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x80>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a18      	ldr	r2, [pc, #96]	; (800c160 <HAL_TIM_Base_Start_IT+0xdc>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d111      	bne.n	800c128 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f003 0307 	and.w	r3, r3, #7
 800c10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b06      	cmp	r3, #6
 800c114:	d010      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f042 0201 	orr.w	r2, r2, #1
 800c124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c126:	e007      	b.n	800c138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f042 0201 	orr.w	r2, r2, #1
 800c136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	40010000 	.word	0x40010000
 800c14c:	40000400 	.word	0x40000400
 800c150:	40000800 	.word	0x40000800
 800c154:	40000c00 	.word	0x40000c00
 800c158:	40010400 	.word	0x40010400
 800c15c:	40014000 	.word	0x40014000
 800c160:	40001800 	.word	0x40001800

0800c164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e041      	b.n	800c1fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d106      	bne.n	800c190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7fa fd02 	bl	8006b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2202      	movs	r2, #2
 800c194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f000 fa20 	bl	800c5e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	f003 0302 	and.w	r3, r3, #2
 800c214:	2b02      	cmp	r3, #2
 800c216:	d122      	bne.n	800c25e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b02      	cmp	r3, #2
 800c224:	d11b      	bne.n	800c25e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f06f 0202 	mvn.w	r2, #2
 800c22e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f9b1 	bl	800c5ac <HAL_TIM_IC_CaptureCallback>
 800c24a:	e005      	b.n	800c258 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f9a3 	bl	800c598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f9b4 	bl	800c5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f003 0304 	and.w	r3, r3, #4
 800c268:	2b04      	cmp	r3, #4
 800c26a:	d122      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b04      	cmp	r3, #4
 800c278:	d11b      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f06f 0204 	mvn.w	r2, #4
 800c282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f987 	bl	800c5ac <HAL_TIM_IC_CaptureCallback>
 800c29e:	e005      	b.n	800c2ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f979 	bl	800c598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f98a 	bl	800c5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d122      	bne.n	800c306 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f003 0308 	and.w	r3, r3, #8
 800c2ca:	2b08      	cmp	r3, #8
 800c2cc:	d11b      	bne.n	800c306 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f06f 0208 	mvn.w	r2, #8
 800c2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2204      	movs	r2, #4
 800c2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	f003 0303 	and.w	r3, r3, #3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f95d 	bl	800c5ac <HAL_TIM_IC_CaptureCallback>
 800c2f2:	e005      	b.n	800c300 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f94f 	bl	800c598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f960 	bl	800c5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	f003 0310 	and.w	r3, r3, #16
 800c310:	2b10      	cmp	r3, #16
 800c312:	d122      	bne.n	800c35a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b10      	cmp	r3, #16
 800c320:	d11b      	bne.n	800c35a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f06f 0210 	mvn.w	r2, #16
 800c32a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2208      	movs	r2, #8
 800c330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f933 	bl	800c5ac <HAL_TIM_IC_CaptureCallback>
 800c346:	e005      	b.n	800c354 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f925 	bl	800c598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f936 	bl	800c5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b01      	cmp	r3, #1
 800c366:	d10e      	bne.n	800c386 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	2b01      	cmp	r3, #1
 800c374:	d107      	bne.n	800c386 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f06f 0201 	mvn.w	r2, #1
 800c37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7fa fb49 	bl	8006a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c390:	2b80      	cmp	r3, #128	; 0x80
 800c392:	d10e      	bne.n	800c3b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c39e:	2b80      	cmp	r3, #128	; 0x80
 800c3a0:	d107      	bne.n	800c3b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fbf1 	bl	800cb94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3bc:	2b40      	cmp	r3, #64	; 0x40
 800c3be:	d10e      	bne.n	800c3de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ca:	2b40      	cmp	r3, #64	; 0x40
 800c3cc:	d107      	bne.n	800c3de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f8fb 	bl	800c5d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	f003 0320 	and.w	r3, r3, #32
 800c3e8:	2b20      	cmp	r3, #32
 800c3ea:	d10e      	bne.n	800c40a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b20      	cmp	r3, #32
 800c3f8:	d107      	bne.n	800c40a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f06f 0220 	mvn.w	r2, #32
 800c402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fbbb 	bl	800cb80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c40a:	bf00      	nop
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c420:	2300      	movs	r3, #0
 800c422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d101      	bne.n	800c432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c42e:	2302      	movs	r3, #2
 800c430:	e0ae      	b.n	800c590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b0c      	cmp	r3, #12
 800c43e:	f200 809f 	bhi.w	800c580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c47d 	.word	0x0800c47d
 800c44c:	0800c581 	.word	0x0800c581
 800c450:	0800c581 	.word	0x0800c581
 800c454:	0800c581 	.word	0x0800c581
 800c458:	0800c4bd 	.word	0x0800c4bd
 800c45c:	0800c581 	.word	0x0800c581
 800c460:	0800c581 	.word	0x0800c581
 800c464:	0800c581 	.word	0x0800c581
 800c468:	0800c4ff 	.word	0x0800c4ff
 800c46c:	0800c581 	.word	0x0800c581
 800c470:	0800c581 	.word	0x0800c581
 800c474:	0800c581 	.word	0x0800c581
 800c478:	0800c53f 	.word	0x0800c53f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68b9      	ldr	r1, [r7, #8]
 800c482:	4618      	mov	r0, r3
 800c484:	f000 f950 	bl	800c728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f042 0208 	orr.w	r2, r2, #8
 800c496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	699a      	ldr	r2, [r3, #24]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 0204 	bic.w	r2, r2, #4
 800c4a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6999      	ldr	r1, [r3, #24]
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	691a      	ldr	r2, [r3, #16]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	619a      	str	r2, [r3, #24]
      break;
 800c4ba:	e064      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68b9      	ldr	r1, [r7, #8]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 f9a0 	bl	800c808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	699a      	ldr	r2, [r3, #24]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	699a      	ldr	r2, [r3, #24]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6999      	ldr	r1, [r3, #24]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	021a      	lsls	r2, r3, #8
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	619a      	str	r2, [r3, #24]
      break;
 800c4fc:	e043      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68b9      	ldr	r1, [r7, #8]
 800c504:	4618      	mov	r0, r3
 800c506:	f000 f9f5 	bl	800c8f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	69da      	ldr	r2, [r3, #28]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f042 0208 	orr.w	r2, r2, #8
 800c518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69da      	ldr	r2, [r3, #28]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f022 0204 	bic.w	r2, r2, #4
 800c528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69d9      	ldr	r1, [r3, #28]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	691a      	ldr	r2, [r3, #16]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	61da      	str	r2, [r3, #28]
      break;
 800c53c:	e023      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68b9      	ldr	r1, [r7, #8]
 800c544:	4618      	mov	r0, r3
 800c546:	f000 fa49 	bl	800c9dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69da      	ldr	r2, [r3, #28]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	69d9      	ldr	r1, [r3, #28]
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	021a      	lsls	r2, r3, #8
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	430a      	orrs	r2, r1
 800c57c:	61da      	str	r2, [r3, #28]
      break;
 800c57e:	e002      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	75fb      	strb	r3, [r7, #23]
      break;
 800c584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5b4:	bf00      	nop
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a40      	ldr	r2, [pc, #256]	; (800c6fc <TIM_Base_SetConfig+0x114>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d013      	beq.n	800c628 <TIM_Base_SetConfig+0x40>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c606:	d00f      	beq.n	800c628 <TIM_Base_SetConfig+0x40>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a3d      	ldr	r2, [pc, #244]	; (800c700 <TIM_Base_SetConfig+0x118>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d00b      	beq.n	800c628 <TIM_Base_SetConfig+0x40>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a3c      	ldr	r2, [pc, #240]	; (800c704 <TIM_Base_SetConfig+0x11c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d007      	beq.n	800c628 <TIM_Base_SetConfig+0x40>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a3b      	ldr	r2, [pc, #236]	; (800c708 <TIM_Base_SetConfig+0x120>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d003      	beq.n	800c628 <TIM_Base_SetConfig+0x40>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a3a      	ldr	r2, [pc, #232]	; (800c70c <TIM_Base_SetConfig+0x124>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d108      	bne.n	800c63a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c62e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4313      	orrs	r3, r2
 800c638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a2f      	ldr	r2, [pc, #188]	; (800c6fc <TIM_Base_SetConfig+0x114>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d02b      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c648:	d027      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a2c      	ldr	r2, [pc, #176]	; (800c700 <TIM_Base_SetConfig+0x118>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d023      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a2b      	ldr	r2, [pc, #172]	; (800c704 <TIM_Base_SetConfig+0x11c>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d01f      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a2a      	ldr	r2, [pc, #168]	; (800c708 <TIM_Base_SetConfig+0x120>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d01b      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a29      	ldr	r2, [pc, #164]	; (800c70c <TIM_Base_SetConfig+0x124>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d017      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a28      	ldr	r2, [pc, #160]	; (800c710 <TIM_Base_SetConfig+0x128>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d013      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a27      	ldr	r2, [pc, #156]	; (800c714 <TIM_Base_SetConfig+0x12c>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d00f      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a26      	ldr	r2, [pc, #152]	; (800c718 <TIM_Base_SetConfig+0x130>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d00b      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a25      	ldr	r2, [pc, #148]	; (800c71c <TIM_Base_SetConfig+0x134>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d007      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a24      	ldr	r2, [pc, #144]	; (800c720 <TIM_Base_SetConfig+0x138>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d003      	beq.n	800c69a <TIM_Base_SetConfig+0xb2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a23      	ldr	r2, [pc, #140]	; (800c724 <TIM_Base_SetConfig+0x13c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d108      	bne.n	800c6ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	695b      	ldr	r3, [r3, #20]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	689a      	ldr	r2, [r3, #8]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a0a      	ldr	r2, [pc, #40]	; (800c6fc <TIM_Base_SetConfig+0x114>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d003      	beq.n	800c6e0 <TIM_Base_SetConfig+0xf8>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a0c      	ldr	r2, [pc, #48]	; (800c70c <TIM_Base_SetConfig+0x124>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d103      	bne.n	800c6e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	691a      	ldr	r2, [r3, #16]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	615a      	str	r2, [r3, #20]
}
 800c6ee:	bf00      	nop
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	40010000 	.word	0x40010000
 800c700:	40000400 	.word	0x40000400
 800c704:	40000800 	.word	0x40000800
 800c708:	40000c00 	.word	0x40000c00
 800c70c:	40010400 	.word	0x40010400
 800c710:	40014000 	.word	0x40014000
 800c714:	40014400 	.word	0x40014400
 800c718:	40014800 	.word	0x40014800
 800c71c:	40001800 	.word	0x40001800
 800c720:	40001c00 	.word	0x40001c00
 800c724:	40002000 	.word	0x40002000

0800c728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a1b      	ldr	r3, [r3, #32]
 800c736:	f023 0201 	bic.w	r2, r3, #1
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f023 0303 	bic.w	r3, r3, #3
 800c75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4313      	orrs	r3, r2
 800c768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f023 0302 	bic.w	r3, r3, #2
 800c770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	4313      	orrs	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a20      	ldr	r2, [pc, #128]	; (800c800 <TIM_OC1_SetConfig+0xd8>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d003      	beq.n	800c78c <TIM_OC1_SetConfig+0x64>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a1f      	ldr	r2, [pc, #124]	; (800c804 <TIM_OC1_SetConfig+0xdc>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d10c      	bne.n	800c7a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	f023 0308 	bic.w	r3, r3, #8
 800c792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f023 0304 	bic.w	r3, r3, #4
 800c7a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a15      	ldr	r2, [pc, #84]	; (800c800 <TIM_OC1_SetConfig+0xd8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d003      	beq.n	800c7b6 <TIM_OC1_SetConfig+0x8e>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a14      	ldr	r2, [pc, #80]	; (800c804 <TIM_OC1_SetConfig+0xdc>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d111      	bne.n	800c7da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	621a      	str	r2, [r3, #32]
}
 800c7f4:	bf00      	nop
 800c7f6:	371c      	adds	r7, #28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	40010000 	.word	0x40010000
 800c804:	40010400 	.word	0x40010400

0800c808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a1b      	ldr	r3, [r3, #32]
 800c816:	f023 0210 	bic.w	r2, r3, #16
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c83e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	021b      	lsls	r3, r3, #8
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	4313      	orrs	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	f023 0320 	bic.w	r3, r3, #32
 800c852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	011b      	lsls	r3, r3, #4
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a22      	ldr	r2, [pc, #136]	; (800c8ec <TIM_OC2_SetConfig+0xe4>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d003      	beq.n	800c870 <TIM_OC2_SetConfig+0x68>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a21      	ldr	r2, [pc, #132]	; (800c8f0 <TIM_OC2_SetConfig+0xe8>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10d      	bne.n	800c88c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	4313      	orrs	r3, r2
 800c882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c88a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a17      	ldr	r2, [pc, #92]	; (800c8ec <TIM_OC2_SetConfig+0xe4>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d003      	beq.n	800c89c <TIM_OC2_SetConfig+0x94>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a16      	ldr	r2, [pc, #88]	; (800c8f0 <TIM_OC2_SetConfig+0xe8>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d113      	bne.n	800c8c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	693a      	ldr	r2, [r7, #16]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	697a      	ldr	r2, [r7, #20]
 800c8dc:	621a      	str	r2, [r3, #32]
}
 800c8de:	bf00      	nop
 800c8e0:	371c      	adds	r7, #28
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	40010000 	.word	0x40010000
 800c8f0:	40010400 	.word	0x40010400

0800c8f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	69db      	ldr	r3, [r3, #28]
 800c91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f023 0303 	bic.w	r3, r3, #3
 800c92a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	4313      	orrs	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c93c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	4313      	orrs	r3, r2
 800c948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a21      	ldr	r2, [pc, #132]	; (800c9d4 <TIM_OC3_SetConfig+0xe0>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d003      	beq.n	800c95a <TIM_OC3_SetConfig+0x66>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a20      	ldr	r2, [pc, #128]	; (800c9d8 <TIM_OC3_SetConfig+0xe4>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d10d      	bne.n	800c976 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	021b      	lsls	r3, r3, #8
 800c968:	697a      	ldr	r2, [r7, #20]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a16      	ldr	r2, [pc, #88]	; (800c9d4 <TIM_OC3_SetConfig+0xe0>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d003      	beq.n	800c986 <TIM_OC3_SetConfig+0x92>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a15      	ldr	r2, [pc, #84]	; (800c9d8 <TIM_OC3_SetConfig+0xe4>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d113      	bne.n	800c9ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	621a      	str	r2, [r3, #32]
}
 800c9c8:	bf00      	nop
 800c9ca:	371c      	adds	r7, #28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr
 800c9d4:	40010000 	.word	0x40010000
 800c9d8:	40010400 	.word	0x40010400

0800c9dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a1b      	ldr	r3, [r3, #32]
 800c9f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	021b      	lsls	r3, r3, #8
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	031b      	lsls	r3, r3, #12
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a12      	ldr	r2, [pc, #72]	; (800ca80 <TIM_OC4_SetConfig+0xa4>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d003      	beq.n	800ca44 <TIM_OC4_SetConfig+0x68>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a11      	ldr	r2, [pc, #68]	; (800ca84 <TIM_OC4_SetConfig+0xa8>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d109      	bne.n	800ca58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	019b      	lsls	r3, r3, #6
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	693a      	ldr	r2, [r7, #16]
 800ca70:	621a      	str	r2, [r3, #32]
}
 800ca72:	bf00      	nop
 800ca74:	371c      	adds	r7, #28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	40010000 	.word	0x40010000
 800ca84:	40010400 	.word	0x40010400

0800ca88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d101      	bne.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e05a      	b.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2202      	movs	r2, #2
 800caac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	4313      	orrs	r3, r2
 800cad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a21      	ldr	r2, [pc, #132]	; (800cb64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d022      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caec:	d01d      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a1d      	ldr	r2, [pc, #116]	; (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d018      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a1b      	ldr	r2, [pc, #108]	; (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d013      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a1a      	ldr	r2, [pc, #104]	; (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d00e      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a18      	ldr	r2, [pc, #96]	; (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d009      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a17      	ldr	r2, [pc, #92]	; (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d004      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d10c      	bne.n	800cb44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	40010000 	.word	0x40010000
 800cb68:	40000400 	.word	0x40000400
 800cb6c:	40000800 	.word	0x40000800
 800cb70:	40000c00 	.word	0x40000c00
 800cb74:	40010400 	.word	0x40010400
 800cb78:	40014000 	.word	0x40014000
 800cb7c:	40001800 	.word	0x40001800

0800cb80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e03f      	b.n	800cc3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7fa faea 	bl	80071a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2224      	movs	r2, #36	; 0x24
 800cbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f929 	bl	800ce44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	691a      	ldr	r2, [r3, #16]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	695a      	ldr	r2, [r3, #20]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68da      	ldr	r2, [r3, #12]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2220      	movs	r2, #32
 800cc34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b08a      	sub	sp, #40	; 0x28
 800cc46:	af02      	add	r7, sp, #8
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	603b      	str	r3, [r7, #0]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc52:	2300      	movs	r3, #0
 800cc54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b20      	cmp	r3, #32
 800cc60:	d17c      	bne.n	800cd5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <HAL_UART_Transmit+0x2c>
 800cc68:	88fb      	ldrh	r3, [r7, #6]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d101      	bne.n	800cc72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e075      	b.n	800cd5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d101      	bne.n	800cc80 <HAL_UART_Transmit+0x3e>
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e06e      	b.n	800cd5e <HAL_UART_Transmit+0x11c>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2221      	movs	r2, #33	; 0x21
 800cc92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc96:	f7fa fbb7 	bl	8007408 <HAL_GetTick>
 800cc9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	88fa      	ldrh	r2, [r7, #6]
 800cca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	88fa      	ldrh	r2, [r7, #6]
 800cca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccb0:	d108      	bne.n	800ccc4 <HAL_UART_Transmit+0x82>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d104      	bne.n	800ccc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	61bb      	str	r3, [r7, #24]
 800ccc2:	e003      	b.n	800cccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ccd4:	e02a      	b.n	800cd2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2180      	movs	r1, #128	; 0x80
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f000 f840 	bl	800cd66 <UART_WaitOnFlagUntilTimeout>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e036      	b.n	800cd5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10b      	bne.n	800cd0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	881b      	ldrh	r3, [r3, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	3302      	adds	r3, #2
 800cd0a:	61bb      	str	r3, [r7, #24]
 800cd0c:	e007      	b.n	800cd1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	781a      	ldrb	r2, [r3, #0]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	3b01      	subs	r3, #1
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1cf      	bne.n	800ccd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	2140      	movs	r1, #64	; 0x40
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 f810 	bl	800cd66 <UART_WaitOnFlagUntilTimeout>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e006      	b.n	800cd5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e000      	b.n	800cd5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cd5c:	2302      	movs	r3, #2
  }
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b090      	sub	sp, #64	; 0x40
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	60b9      	str	r1, [r7, #8]
 800cd70:	603b      	str	r3, [r7, #0]
 800cd72:	4613      	mov	r3, r2
 800cd74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd76:	e050      	b.n	800ce1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7e:	d04c      	beq.n	800ce1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d007      	beq.n	800cd96 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd86:	f7fa fb3f 	bl	8007408 <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d241      	bcs.n	800ce1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	330c      	adds	r3, #12
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	e853 3f00 	ldrex	r3, [r3]
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cdac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	330c      	adds	r3, #12
 800cdb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdb6:	637a      	str	r2, [r7, #52]	; 0x34
 800cdb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdbe:	e841 2300 	strex	r3, r2, [r1]
 800cdc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1e5      	bne.n	800cd96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3314      	adds	r3, #20
 800cdd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	e853 3f00 	ldrex	r3, [r3]
 800cdd8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	f023 0301 	bic.w	r3, r3, #1
 800cde0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3314      	adds	r3, #20
 800cde8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdea:	623a      	str	r2, [r7, #32]
 800cdec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdee:	69f9      	ldr	r1, [r7, #28]
 800cdf0:	6a3a      	ldr	r2, [r7, #32]
 800cdf2:	e841 2300 	strex	r3, r2, [r1]
 800cdf6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1e5      	bne.n	800cdca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2220      	movs	r2, #32
 800ce02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e00f      	b.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	4013      	ands	r3, r2
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	bf0c      	ite	eq
 800ce2a:	2301      	moveq	r3, #1
 800ce2c:	2300      	movne	r3, #0
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	461a      	mov	r2, r3
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d09f      	beq.n	800cd78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3740      	adds	r7, #64	; 0x40
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
	...

0800ce44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce48:	b0c0      	sub	sp, #256	; 0x100
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce60:	68d9      	ldr	r1, [r3, #12]
 800ce62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	ea40 0301 	orr.w	r3, r0, r1
 800ce6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	431a      	orrs	r2, r3
 800ce84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce9c:	f021 010c 	bic.w	r1, r1, #12
 800cea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ceaa:	430b      	orrs	r3, r1
 800ceac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ceae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ceba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cebe:	6999      	ldr	r1, [r3, #24]
 800cec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	ea40 0301 	orr.w	r3, r0, r1
 800ceca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	4b8f      	ldr	r3, [pc, #572]	; (800d110 <UART_SetConfig+0x2cc>)
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d005      	beq.n	800cee4 <UART_SetConfig+0xa0>
 800ced8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	4b8d      	ldr	r3, [pc, #564]	; (800d114 <UART_SetConfig+0x2d0>)
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d104      	bne.n	800ceee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cee4:	f7fe f9b0 	bl	800b248 <HAL_RCC_GetPCLK2Freq>
 800cee8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ceec:	e003      	b.n	800cef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ceee:	f7fe f997 	bl	800b220 <HAL_RCC_GetPCLK1Freq>
 800cef2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cefa:	69db      	ldr	r3, [r3, #28]
 800cefc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf00:	f040 810c 	bne.w	800d11c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cf0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cf12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cf16:	4622      	mov	r2, r4
 800cf18:	462b      	mov	r3, r5
 800cf1a:	1891      	adds	r1, r2, r2
 800cf1c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cf1e:	415b      	adcs	r3, r3
 800cf20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cf26:	4621      	mov	r1, r4
 800cf28:	eb12 0801 	adds.w	r8, r2, r1
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	eb43 0901 	adc.w	r9, r3, r1
 800cf32:	f04f 0200 	mov.w	r2, #0
 800cf36:	f04f 0300 	mov.w	r3, #0
 800cf3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf46:	4690      	mov	r8, r2
 800cf48:	4699      	mov	r9, r3
 800cf4a:	4623      	mov	r3, r4
 800cf4c:	eb18 0303 	adds.w	r3, r8, r3
 800cf50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf54:	462b      	mov	r3, r5
 800cf56:	eb49 0303 	adc.w	r3, r9, r3
 800cf5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf72:	460b      	mov	r3, r1
 800cf74:	18db      	adds	r3, r3, r3
 800cf76:	653b      	str	r3, [r7, #80]	; 0x50
 800cf78:	4613      	mov	r3, r2
 800cf7a:	eb42 0303 	adc.w	r3, r2, r3
 800cf7e:	657b      	str	r3, [r7, #84]	; 0x54
 800cf80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf88:	f7f3 f930 	bl	80001ec <__aeabi_uldivmod>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4b61      	ldr	r3, [pc, #388]	; (800d118 <UART_SetConfig+0x2d4>)
 800cf92:	fba3 2302 	umull	r2, r3, r3, r2
 800cf96:	095b      	lsrs	r3, r3, #5
 800cf98:	011c      	lsls	r4, r3, #4
 800cf9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cfa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cfac:	4642      	mov	r2, r8
 800cfae:	464b      	mov	r3, r9
 800cfb0:	1891      	adds	r1, r2, r2
 800cfb2:	64b9      	str	r1, [r7, #72]	; 0x48
 800cfb4:	415b      	adcs	r3, r3
 800cfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cfbc:	4641      	mov	r1, r8
 800cfbe:	eb12 0a01 	adds.w	sl, r2, r1
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	eb43 0b01 	adc.w	fp, r3, r1
 800cfc8:	f04f 0200 	mov.w	r2, #0
 800cfcc:	f04f 0300 	mov.w	r3, #0
 800cfd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfdc:	4692      	mov	sl, r2
 800cfde:	469b      	mov	fp, r3
 800cfe0:	4643      	mov	r3, r8
 800cfe2:	eb1a 0303 	adds.w	r3, sl, r3
 800cfe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfea:	464b      	mov	r3, r9
 800cfec:	eb4b 0303 	adc.w	r3, fp, r3
 800cff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d000:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d008:	460b      	mov	r3, r1
 800d00a:	18db      	adds	r3, r3, r3
 800d00c:	643b      	str	r3, [r7, #64]	; 0x40
 800d00e:	4613      	mov	r3, r2
 800d010:	eb42 0303 	adc.w	r3, r2, r3
 800d014:	647b      	str	r3, [r7, #68]	; 0x44
 800d016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d01a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d01e:	f7f3 f8e5 	bl	80001ec <__aeabi_uldivmod>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4611      	mov	r1, r2
 800d028:	4b3b      	ldr	r3, [pc, #236]	; (800d118 <UART_SetConfig+0x2d4>)
 800d02a:	fba3 2301 	umull	r2, r3, r3, r1
 800d02e:	095b      	lsrs	r3, r3, #5
 800d030:	2264      	movs	r2, #100	; 0x64
 800d032:	fb02 f303 	mul.w	r3, r2, r3
 800d036:	1acb      	subs	r3, r1, r3
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d03e:	4b36      	ldr	r3, [pc, #216]	; (800d118 <UART_SetConfig+0x2d4>)
 800d040:	fba3 2302 	umull	r2, r3, r3, r2
 800d044:	095b      	lsrs	r3, r3, #5
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d04c:	441c      	add	r4, r3
 800d04e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d052:	2200      	movs	r2, #0
 800d054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d058:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d05c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d060:	4642      	mov	r2, r8
 800d062:	464b      	mov	r3, r9
 800d064:	1891      	adds	r1, r2, r2
 800d066:	63b9      	str	r1, [r7, #56]	; 0x38
 800d068:	415b      	adcs	r3, r3
 800d06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d06c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d070:	4641      	mov	r1, r8
 800d072:	1851      	adds	r1, r2, r1
 800d074:	6339      	str	r1, [r7, #48]	; 0x30
 800d076:	4649      	mov	r1, r9
 800d078:	414b      	adcs	r3, r1
 800d07a:	637b      	str	r3, [r7, #52]	; 0x34
 800d07c:	f04f 0200 	mov.w	r2, #0
 800d080:	f04f 0300 	mov.w	r3, #0
 800d084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d088:	4659      	mov	r1, fp
 800d08a:	00cb      	lsls	r3, r1, #3
 800d08c:	4651      	mov	r1, sl
 800d08e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d092:	4651      	mov	r1, sl
 800d094:	00ca      	lsls	r2, r1, #3
 800d096:	4610      	mov	r0, r2
 800d098:	4619      	mov	r1, r3
 800d09a:	4603      	mov	r3, r0
 800d09c:	4642      	mov	r2, r8
 800d09e:	189b      	adds	r3, r3, r2
 800d0a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d0a4:	464b      	mov	r3, r9
 800d0a6:	460a      	mov	r2, r1
 800d0a8:	eb42 0303 	adc.w	r3, r2, r3
 800d0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d0bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d0c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	18db      	adds	r3, r3, r3
 800d0c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	eb42 0303 	adc.w	r3, r2, r3
 800d0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d0da:	f7f3 f887 	bl	80001ec <__aeabi_uldivmod>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4b0d      	ldr	r3, [pc, #52]	; (800d118 <UART_SetConfig+0x2d4>)
 800d0e4:	fba3 1302 	umull	r1, r3, r3, r2
 800d0e8:	095b      	lsrs	r3, r3, #5
 800d0ea:	2164      	movs	r1, #100	; 0x64
 800d0ec:	fb01 f303 	mul.w	r3, r1, r3
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	3332      	adds	r3, #50	; 0x32
 800d0f6:	4a08      	ldr	r2, [pc, #32]	; (800d118 <UART_SetConfig+0x2d4>)
 800d0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0fc:	095b      	lsrs	r3, r3, #5
 800d0fe:	f003 0207 	and.w	r2, r3, #7
 800d102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4422      	add	r2, r4
 800d10a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d10c:	e106      	b.n	800d31c <UART_SetConfig+0x4d8>
 800d10e:	bf00      	nop
 800d110:	40011000 	.word	0x40011000
 800d114:	40011400 	.word	0x40011400
 800d118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d11c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d120:	2200      	movs	r2, #0
 800d122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d126:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d12a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d12e:	4642      	mov	r2, r8
 800d130:	464b      	mov	r3, r9
 800d132:	1891      	adds	r1, r2, r2
 800d134:	6239      	str	r1, [r7, #32]
 800d136:	415b      	adcs	r3, r3
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
 800d13a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d13e:	4641      	mov	r1, r8
 800d140:	1854      	adds	r4, r2, r1
 800d142:	4649      	mov	r1, r9
 800d144:	eb43 0501 	adc.w	r5, r3, r1
 800d148:	f04f 0200 	mov.w	r2, #0
 800d14c:	f04f 0300 	mov.w	r3, #0
 800d150:	00eb      	lsls	r3, r5, #3
 800d152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d156:	00e2      	lsls	r2, r4, #3
 800d158:	4614      	mov	r4, r2
 800d15a:	461d      	mov	r5, r3
 800d15c:	4643      	mov	r3, r8
 800d15e:	18e3      	adds	r3, r4, r3
 800d160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d164:	464b      	mov	r3, r9
 800d166:	eb45 0303 	adc.w	r3, r5, r3
 800d16a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d17a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d17e:	f04f 0200 	mov.w	r2, #0
 800d182:	f04f 0300 	mov.w	r3, #0
 800d186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d18a:	4629      	mov	r1, r5
 800d18c:	008b      	lsls	r3, r1, #2
 800d18e:	4621      	mov	r1, r4
 800d190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d194:	4621      	mov	r1, r4
 800d196:	008a      	lsls	r2, r1, #2
 800d198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d19c:	f7f3 f826 	bl	80001ec <__aeabi_uldivmod>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4b60      	ldr	r3, [pc, #384]	; (800d328 <UART_SetConfig+0x4e4>)
 800d1a6:	fba3 2302 	umull	r2, r3, r3, r2
 800d1aa:	095b      	lsrs	r3, r3, #5
 800d1ac:	011c      	lsls	r4, r3, #4
 800d1ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d1b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d1bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	464b      	mov	r3, r9
 800d1c4:	1891      	adds	r1, r2, r2
 800d1c6:	61b9      	str	r1, [r7, #24]
 800d1c8:	415b      	adcs	r3, r3
 800d1ca:	61fb      	str	r3, [r7, #28]
 800d1cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1d0:	4641      	mov	r1, r8
 800d1d2:	1851      	adds	r1, r2, r1
 800d1d4:	6139      	str	r1, [r7, #16]
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	414b      	adcs	r3, r1
 800d1da:	617b      	str	r3, [r7, #20]
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	f04f 0300 	mov.w	r3, #0
 800d1e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1e8:	4659      	mov	r1, fp
 800d1ea:	00cb      	lsls	r3, r1, #3
 800d1ec:	4651      	mov	r1, sl
 800d1ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1f2:	4651      	mov	r1, sl
 800d1f4:	00ca      	lsls	r2, r1, #3
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	4642      	mov	r2, r8
 800d1fe:	189b      	adds	r3, r3, r2
 800d200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d204:	464b      	mov	r3, r9
 800d206:	460a      	mov	r2, r1
 800d208:	eb42 0303 	adc.w	r3, r2, r3
 800d20c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	67bb      	str	r3, [r7, #120]	; 0x78
 800d21a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d21c:	f04f 0200 	mov.w	r2, #0
 800d220:	f04f 0300 	mov.w	r3, #0
 800d224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d228:	4649      	mov	r1, r9
 800d22a:	008b      	lsls	r3, r1, #2
 800d22c:	4641      	mov	r1, r8
 800d22e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d232:	4641      	mov	r1, r8
 800d234:	008a      	lsls	r2, r1, #2
 800d236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d23a:	f7f2 ffd7 	bl	80001ec <__aeabi_uldivmod>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	4611      	mov	r1, r2
 800d244:	4b38      	ldr	r3, [pc, #224]	; (800d328 <UART_SetConfig+0x4e4>)
 800d246:	fba3 2301 	umull	r2, r3, r3, r1
 800d24a:	095b      	lsrs	r3, r3, #5
 800d24c:	2264      	movs	r2, #100	; 0x64
 800d24e:	fb02 f303 	mul.w	r3, r2, r3
 800d252:	1acb      	subs	r3, r1, r3
 800d254:	011b      	lsls	r3, r3, #4
 800d256:	3332      	adds	r3, #50	; 0x32
 800d258:	4a33      	ldr	r2, [pc, #204]	; (800d328 <UART_SetConfig+0x4e4>)
 800d25a:	fba2 2303 	umull	r2, r3, r2, r3
 800d25e:	095b      	lsrs	r3, r3, #5
 800d260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d264:	441c      	add	r4, r3
 800d266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d26a:	2200      	movs	r2, #0
 800d26c:	673b      	str	r3, [r7, #112]	; 0x70
 800d26e:	677a      	str	r2, [r7, #116]	; 0x74
 800d270:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d274:	4642      	mov	r2, r8
 800d276:	464b      	mov	r3, r9
 800d278:	1891      	adds	r1, r2, r2
 800d27a:	60b9      	str	r1, [r7, #8]
 800d27c:	415b      	adcs	r3, r3
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d284:	4641      	mov	r1, r8
 800d286:	1851      	adds	r1, r2, r1
 800d288:	6039      	str	r1, [r7, #0]
 800d28a:	4649      	mov	r1, r9
 800d28c:	414b      	adcs	r3, r1
 800d28e:	607b      	str	r3, [r7, #4]
 800d290:	f04f 0200 	mov.w	r2, #0
 800d294:	f04f 0300 	mov.w	r3, #0
 800d298:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d29c:	4659      	mov	r1, fp
 800d29e:	00cb      	lsls	r3, r1, #3
 800d2a0:	4651      	mov	r1, sl
 800d2a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2a6:	4651      	mov	r1, sl
 800d2a8:	00ca      	lsls	r2, r1, #3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	4642      	mov	r2, r8
 800d2b2:	189b      	adds	r3, r3, r2
 800d2b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2b6:	464b      	mov	r3, r9
 800d2b8:	460a      	mov	r2, r1
 800d2ba:	eb42 0303 	adc.w	r3, r2, r3
 800d2be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	663b      	str	r3, [r7, #96]	; 0x60
 800d2ca:	667a      	str	r2, [r7, #100]	; 0x64
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d2d8:	4649      	mov	r1, r9
 800d2da:	008b      	lsls	r3, r1, #2
 800d2dc:	4641      	mov	r1, r8
 800d2de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2e2:	4641      	mov	r1, r8
 800d2e4:	008a      	lsls	r2, r1, #2
 800d2e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2ea:	f7f2 ff7f 	bl	80001ec <__aeabi_uldivmod>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4b0d      	ldr	r3, [pc, #52]	; (800d328 <UART_SetConfig+0x4e4>)
 800d2f4:	fba3 1302 	umull	r1, r3, r3, r2
 800d2f8:	095b      	lsrs	r3, r3, #5
 800d2fa:	2164      	movs	r1, #100	; 0x64
 800d2fc:	fb01 f303 	mul.w	r3, r1, r3
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	011b      	lsls	r3, r3, #4
 800d304:	3332      	adds	r3, #50	; 0x32
 800d306:	4a08      	ldr	r2, [pc, #32]	; (800d328 <UART_SetConfig+0x4e4>)
 800d308:	fba2 2303 	umull	r2, r3, r2, r3
 800d30c:	095b      	lsrs	r3, r3, #5
 800d30e:	f003 020f 	and.w	r2, r3, #15
 800d312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4422      	add	r2, r4
 800d31a:	609a      	str	r2, [r3, #8]
}
 800d31c:	bf00      	nop
 800d31e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d322:	46bd      	mov	sp, r7
 800d324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d328:	51eb851f 	.word	0x51eb851f

0800d32c <__itoa>:
 800d32c:	1e93      	subs	r3, r2, #2
 800d32e:	2b22      	cmp	r3, #34	; 0x22
 800d330:	b510      	push	{r4, lr}
 800d332:	460c      	mov	r4, r1
 800d334:	d904      	bls.n	800d340 <__itoa+0x14>
 800d336:	2300      	movs	r3, #0
 800d338:	700b      	strb	r3, [r1, #0]
 800d33a:	461c      	mov	r4, r3
 800d33c:	4620      	mov	r0, r4
 800d33e:	bd10      	pop	{r4, pc}
 800d340:	2a0a      	cmp	r2, #10
 800d342:	d109      	bne.n	800d358 <__itoa+0x2c>
 800d344:	2800      	cmp	r0, #0
 800d346:	da07      	bge.n	800d358 <__itoa+0x2c>
 800d348:	232d      	movs	r3, #45	; 0x2d
 800d34a:	700b      	strb	r3, [r1, #0]
 800d34c:	4240      	negs	r0, r0
 800d34e:	2101      	movs	r1, #1
 800d350:	4421      	add	r1, r4
 800d352:	f000 f805 	bl	800d360 <__utoa>
 800d356:	e7f1      	b.n	800d33c <__itoa+0x10>
 800d358:	2100      	movs	r1, #0
 800d35a:	e7f9      	b.n	800d350 <__itoa+0x24>

0800d35c <itoa>:
 800d35c:	f7ff bfe6 	b.w	800d32c <__itoa>

0800d360 <__utoa>:
 800d360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d362:	4c1f      	ldr	r4, [pc, #124]	; (800d3e0 <__utoa+0x80>)
 800d364:	b08b      	sub	sp, #44	; 0x2c
 800d366:	4605      	mov	r5, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	466e      	mov	r6, sp
 800d36c:	f104 0c20 	add.w	ip, r4, #32
 800d370:	6820      	ldr	r0, [r4, #0]
 800d372:	6861      	ldr	r1, [r4, #4]
 800d374:	4637      	mov	r7, r6
 800d376:	c703      	stmia	r7!, {r0, r1}
 800d378:	3408      	adds	r4, #8
 800d37a:	4564      	cmp	r4, ip
 800d37c:	463e      	mov	r6, r7
 800d37e:	d1f7      	bne.n	800d370 <__utoa+0x10>
 800d380:	7921      	ldrb	r1, [r4, #4]
 800d382:	7139      	strb	r1, [r7, #4]
 800d384:	1e91      	subs	r1, r2, #2
 800d386:	6820      	ldr	r0, [r4, #0]
 800d388:	6038      	str	r0, [r7, #0]
 800d38a:	2922      	cmp	r1, #34	; 0x22
 800d38c:	f04f 0100 	mov.w	r1, #0
 800d390:	d904      	bls.n	800d39c <__utoa+0x3c>
 800d392:	7019      	strb	r1, [r3, #0]
 800d394:	460b      	mov	r3, r1
 800d396:	4618      	mov	r0, r3
 800d398:	b00b      	add	sp, #44	; 0x2c
 800d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39c:	1e58      	subs	r0, r3, #1
 800d39e:	4684      	mov	ip, r0
 800d3a0:	fbb5 f7f2 	udiv	r7, r5, r2
 800d3a4:	fb02 5617 	mls	r6, r2, r7, r5
 800d3a8:	3628      	adds	r6, #40	; 0x28
 800d3aa:	446e      	add	r6, sp
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d3b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d3b6:	462e      	mov	r6, r5
 800d3b8:	42b2      	cmp	r2, r6
 800d3ba:	f101 0101 	add.w	r1, r1, #1
 800d3be:	463d      	mov	r5, r7
 800d3c0:	d9ee      	bls.n	800d3a0 <__utoa+0x40>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	545a      	strb	r2, [r3, r1]
 800d3c6:	1919      	adds	r1, r3, r4
 800d3c8:	1aa5      	subs	r5, r4, r2
 800d3ca:	42aa      	cmp	r2, r5
 800d3cc:	dae3      	bge.n	800d396 <__utoa+0x36>
 800d3ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d3d2:	780e      	ldrb	r6, [r1, #0]
 800d3d4:	7006      	strb	r6, [r0, #0]
 800d3d6:	3201      	adds	r2, #1
 800d3d8:	f801 5901 	strb.w	r5, [r1], #-1
 800d3dc:	e7f4      	b.n	800d3c8 <__utoa+0x68>
 800d3de:	bf00      	nop
 800d3e0:	08010b00 	.word	0x08010b00

0800d3e4 <memset>:
 800d3e4:	4402      	add	r2, r0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d100      	bne.n	800d3ee <memset+0xa>
 800d3ec:	4770      	bx	lr
 800d3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d3f2:	e7f9      	b.n	800d3e8 <memset+0x4>

0800d3f4 <__libc_init_array>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	4d0d      	ldr	r5, [pc, #52]	; (800d42c <__libc_init_array+0x38>)
 800d3f8:	4c0d      	ldr	r4, [pc, #52]	; (800d430 <__libc_init_array+0x3c>)
 800d3fa:	1b64      	subs	r4, r4, r5
 800d3fc:	10a4      	asrs	r4, r4, #2
 800d3fe:	2600      	movs	r6, #0
 800d400:	42a6      	cmp	r6, r4
 800d402:	d109      	bne.n	800d418 <__libc_init_array+0x24>
 800d404:	4d0b      	ldr	r5, [pc, #44]	; (800d434 <__libc_init_array+0x40>)
 800d406:	4c0c      	ldr	r4, [pc, #48]	; (800d438 <__libc_init_array+0x44>)
 800d408:	f000 f826 	bl	800d458 <_init>
 800d40c:	1b64      	subs	r4, r4, r5
 800d40e:	10a4      	asrs	r4, r4, #2
 800d410:	2600      	movs	r6, #0
 800d412:	42a6      	cmp	r6, r4
 800d414:	d105      	bne.n	800d422 <__libc_init_array+0x2e>
 800d416:	bd70      	pop	{r4, r5, r6, pc}
 800d418:	f855 3b04 	ldr.w	r3, [r5], #4
 800d41c:	4798      	blx	r3
 800d41e:	3601      	adds	r6, #1
 800d420:	e7ee      	b.n	800d400 <__libc_init_array+0xc>
 800d422:	f855 3b04 	ldr.w	r3, [r5], #4
 800d426:	4798      	blx	r3
 800d428:	3601      	adds	r6, #1
 800d42a:	e7f2      	b.n	800d412 <__libc_init_array+0x1e>
 800d42c:	08010b30 	.word	0x08010b30
 800d430:	08010b30 	.word	0x08010b30
 800d434:	08010b30 	.word	0x08010b30
 800d438:	08010b34 	.word	0x08010b34

0800d43c <memcpy>:
 800d43c:	440a      	add	r2, r1
 800d43e:	4291      	cmp	r1, r2
 800d440:	f100 33ff 	add.w	r3, r0, #4294967295
 800d444:	d100      	bne.n	800d448 <memcpy+0xc>
 800d446:	4770      	bx	lr
 800d448:	b510      	push	{r4, lr}
 800d44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d452:	4291      	cmp	r1, r2
 800d454:	d1f9      	bne.n	800d44a <memcpy+0xe>
 800d456:	bd10      	pop	{r4, pc}

0800d458 <_init>:
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	bf00      	nop
 800d45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45e:	bc08      	pop	{r3}
 800d460:	469e      	mov	lr, r3
 800d462:	4770      	bx	lr

0800d464 <_fini>:
 800d464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d466:	bf00      	nop
 800d468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46a:	bc08      	pop	{r3}
 800d46c:	469e      	mov	lr, r3
 800d46e:	4770      	bx	lr
