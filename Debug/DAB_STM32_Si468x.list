
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a54c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db8  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d48c  0800d48c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d48c  0800d48c  0001d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d494  0800d494  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d494  0800d494  0001d494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d498  0800d498  0001d498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800d49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          000027f8  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200028d8  200028d8  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001801b  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003601  00000000  00000000  0003812b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ec3  00000000  00000000  0003de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa24  00000000  00000000  00061d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d240c  00000000  00000000  0007c757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eb63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054a8  00000000  00000000  0014ebb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a6bc 	.word	0x0800a6bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e4 	.word	0x200000e4
 80001c4:	0800a6bc 	.word	0x0800a6bc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f007 ff76 	bl	80085ea <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200026b4 	.word	0x200026b4

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f005 fc0c 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f004 fe05 	bl	800532c <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f005 fc03 	bl	8005f34 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f005 fbfd 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f004 fdf6 	bl	800532c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f005 fbf1 	bl	8005f34 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f005 fb96 	bl	8005f34 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f005 fb90 	bl	8005f34 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f005 fb86 	bl	8005f34 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f005 faf8 	bl	8005f34 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f005 faef 	bl	8005f34 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000fc 	.word	0x200000fc

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f005 f95e 	bl	8005f34 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f005 f958 	bl	8005f34 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f005 f94f 	bl	8005f34 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f005 f8b5 	bl	8005f34 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f005 f88b 	bl	8005f34 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f005 f882 	bl	8005f34 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f005 f836 	bl	8005f34 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f005 f82d 	bl	8005f34 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f004 ffe1 	bl	8005f34 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f004 ffd8 	bl	8005f34 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800b4d8 	.word	0x0800b4d8
 8001010:	0800b7b0 	.word	0x0800b7b0

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f004 ff88 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f004 ff82 	bl	8005f34 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f004 ff76 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f004 ff70 	bl	8005f34 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_init>:
uint8_t actual_freq_id = 0;							//frequency table index of the frequency to which the Si468x is currently tuned in kHz

uint8_t actual_station = 0;

void Si468x_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	4834      	ldr	r0, [pc, #208]	; (8001134 <Si468x_init+0xd8>)
 8001064:	f002 f814 	bl	8003090 <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f868 	bl	800113c <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f882 	bl	8001174 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f904 	bl	800127c <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f974 	bl	8001364 <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa12 	bl	80014a4 <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbca 	bl	8001818 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb42 	bl	800170c <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc33 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc2d 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc27 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc22 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc1d 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc17 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc11 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fc0c 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fc07 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fc02 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fbfd 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbf7 	bl	80018f8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbf2 	bl	80018f8 <Si468x_set_property>

	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
 8001114:	f000 fcdc 	bl	8001ad0 <Si468x_dab_get_freq_list>

	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001118:	f000 faf8 	bl	800170c <Si468x_get_sys_state>

	Display_clear_screen();
 800111c:	f001 ffde 	bl	80030dc <Display_clear_screen>
	Display_dab_digrad_status_background();
 8001120:	f001 fff0 	bl	8003104 <Display_dab_digrad_status_background>

	HAL_TIM_Base_Start_IT(&htim10);	//enable this timer = enable continuously show signal info
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <Si468x_init+0xdc>)
 8001126:	f008 f8ed 	bl	8009304 <HAL_TIM_Base_Start_IT>

	Si468x_dab_full_scan();
 800112a:	f001 fa6b 	bl	8002604 <Si468x_dab_full_scan>
//			Si468x_dab_start_digital_service(services_list[i].service_id, services_list[i].components[0].subchannel_id);
//			break;
//		}
//	}

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800a828 	.word	0x0800a828
 8001138:	200027b4 	.word	0x200027b4

0800113c <Si468x_reset>:

void Si468x_reset()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001140:	2101      	movs	r1, #1
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <Si468x_reset+0x30>)
 8001144:	f001 ffa4 	bl	8003090 <send_debug_msg>
	RESET_PIN_LOW;
 8001148:	2200      	movs	r2, #0
 800114a:	2120      	movs	r1, #32
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <Si468x_reset+0x34>)
 800114e:	f004 fef1 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001152:	2064      	movs	r0, #100	; 0x64
 8001154:	f004 f8ea 	bl	800532c <HAL_Delay>
	RESET_PIN_HIGH;
 8001158:	2201      	movs	r2, #1
 800115a:	2120      	movs	r1, #32
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <Si468x_reset+0x34>)
 800115e:	f004 fee9 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001162:	20c8      	movs	r0, #200	; 0xc8
 8001164:	f004 f8e2 	bl	800532c <HAL_Delay>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800a878 	.word	0x0800a878
 8001170:	40020800 	.word	0x40020800

08001174 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001178:	2101      	movs	r1, #1
 800117a:	4826      	ldr	r0, [pc, #152]	; (8001214 <Si468x_power_up+0xa0>)
 800117c:	f001 ff88 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <Si468x_power_up+0xa4>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <Si468x_power_up+0xa4>)
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <Si468x_power_up+0xa4>)
 800118e:	2217      	movs	r2, #23
 8001190:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <Si468x_power_up+0xa4>)
 8001194:	2250      	movs	r2, #80	; 0x50
 8001196:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <Si468x_power_up+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <Si468x_power_up+0xa4>)
 80011a0:	22f8      	movs	r2, #248	; 0xf8
 80011a2:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <Si468x_power_up+0xa4>)
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <Si468x_power_up+0xa4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <Si468x_power_up+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <Si468x_power_up+0xa4>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <Si468x_power_up+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <Si468x_power_up+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <Si468x_power_up+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <Si468x_power_up+0xa4>)
 80011d0:	2228      	movs	r2, #40	; 0x28
 80011d2:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <Si468x_power_up+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <Si468x_power_up+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011e0:	490d      	ldr	r1, [pc, #52]	; (8001218 <Si468x_power_up+0xa4>)
 80011e2:	2010      	movs	r0, #16
 80011e4:	f000 fa58 	bl	8001698 <Si468x_write_command>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <Si468x_power_up+0xa8>)
 80011ee:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f004 f89b 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011f6:	490a      	ldr	r1, [pc, #40]	; (8001220 <Si468x_power_up+0xac>)
 80011f8:	2005      	movs	r0, #5
 80011fa:	f000 fa6f 	bl	80016dc <Si468x_read_reply>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <Si468x_power_up+0xa8>)
 8001204:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 8001206:	2101      	movs	r1, #1
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <Si468x_power_up+0xb0>)
 800120a:	f001 ff41 	bl	8003090 <send_debug_msg>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800a88c 	.word	0x0800a88c
 8001218:	20000100 	.word	0x20000100
 800121c:	20001940 	.word	0x20001940
 8001220:	20001100 	.word	0x20001100
 8001224:	0800a8c8 	.word	0x0800a8c8

08001228 <Si468x_load_init>:

void Si468x_load_init()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 800122c:	2101      	movs	r1, #1
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <Si468x_load_init+0x44>)
 8001230:	f001 ff2e 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <Si468x_load_init+0x48>)
 8001236:	2206      	movs	r2, #6
 8001238:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <Si468x_load_init+0x48>)
 800123c:	2200      	movs	r2, #0
 800123e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001240:	490b      	ldr	r1, [pc, #44]	; (8001270 <Si468x_load_init+0x48>)
 8001242:	2002      	movs	r0, #2
 8001244:	f000 fa28 	bl	8001698 <Si468x_write_command>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <Si468x_load_init+0x4c>)
 800124e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f004 f86b 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <Si468x_load_init+0x50>)
 8001258:	2005      	movs	r0, #5
 800125a:	f000 fa3f 	bl	80016dc <Si468x_read_reply>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <Si468x_load_init+0x4c>)
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0800a8e8 	.word	0x0800a8e8
 8001270:	20000100 	.word	0x20000100
 8001274:	20001940 	.word	0x20001940
 8001278:	20001100 	.word	0x20001100

0800127c <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 8001282:	2101      	movs	r1, #1
 8001284:	4830      	ldr	r0, [pc, #192]	; (8001348 <Si468x_bootloader_load_host+0xcc>)
 8001286:	f001 ff03 	bl	8003090 <send_debug_msg>
	Si468x_load_init();
 800128a:	f7ff ffcd 	bl	8001228 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 800128e:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001292:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <Si468x_bootloader_load_host+0xd0>)
 8001296:	2204      	movs	r2, #4
 8001298:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <Si468x_bootloader_load_host+0xd0>)
 800129c:	2200      	movs	r2, #0
 800129e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <Si468x_bootloader_load_host+0xd0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <Si468x_bootloader_load_host+0xd0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	e03e      	b.n	8001330 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	e014      	b.n	80012e2 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012b8:	88ba      	ldrh	r2, [r7, #4]
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	4924      	ldr	r1, [pc, #144]	; (8001350 <Si468x_bootloader_load_host+0xd4>)
 80012be:	fba1 1303 	umull	r1, r3, r1, r3
 80012c2:	085b      	lsrs	r3, r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	441a      	add	r2, r3
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	491f      	ldr	r1, [pc, #124]	; (8001354 <Si468x_bootloader_load_host+0xd8>)
 80012d6:	5c89      	ldrb	r1, [r1, r2]
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <Si468x_bootloader_load_host+0xd0>)
 80012da:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	3301      	adds	r3, #1
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <Si468x_bootloader_load_host+0xd4>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	88ba      	ldrh	r2, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3e1      	bcc.n	80012b8 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <Si468x_bootloader_load_host+0xd4>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3304      	adds	r3, #4
 8001302:	b29b      	uxth	r3, r3
 8001304:	4911      	ldr	r1, [pc, #68]	; (800134c <Si468x_bootloader_load_host+0xd0>)
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f9c6 	bl	8001698 <Si468x_write_command>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <Si468x_bootloader_load_host+0xdc>)
 8001312:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f004 f809 	bl	800532c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800131a:	4910      	ldr	r1, [pc, #64]	; (800135c <Si468x_bootloader_load_host+0xe0>)
 800131c:	2005      	movs	r0, #5
 800131e:	f000 f9dd 	bl	80016dc <Si468x_read_reply>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <Si468x_bootloader_load_host+0xdc>)
 8001328:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	3301      	adds	r3, #1
 800132e:	80fb      	strh	r3, [r7, #6]
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d9bd      	bls.n	80012b2 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 8001336:	2101      	movs	r1, #1
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <Si468x_bootloader_load_host+0xe4>)
 800133a:	f001 fea9 	bl	8003090 <send_debug_msg>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0800a900 	.word	0x0800a900
 800134c:	20000100 	.word	0x20000100
 8001350:	aaaaaaab 	.word	0xaaaaaaab
 8001354:	0800bda0 	.word	0x0800bda0
 8001358:	20001940 	.word	0x20001940
 800135c:	20001100 	.word	0x20001100
 8001360:	0800a93c 	.word	0x0800a93c

08001364 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 800136c:	2101      	movs	r1, #1
 800136e:	4845      	ldr	r0, [pc, #276]	; (8001484 <Si468x_firmware_load_flash+0x120>)
 8001370:	f001 fe8e 	bl	8003090 <send_debug_msg>
	Si468x_load_init();
 8001374:	f7ff ff58 	bl	8001228 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 800137a:	2205      	movs	r2, #5
 800137c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001380:	2200      	movs	r2, #0
 8001382:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001386:	2200      	movs	r2, #0
 8001388:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 800138c:	2200      	movs	r2, #0
 800138e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001396:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 80013a0:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 80013aa:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	0e1b      	lsrs	r3, r3, #24
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 80013b4:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4834      	ldr	r0, [pc, #208]	; (800148c <Si468x_firmware_load_flash+0x128>)
 80013ba:	f001 fe69 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 80013c0:	791b      	ldrb	r3, [r3, #4]
 80013c2:	2210      	movs	r2, #16
 80013c4:	4932      	ldr	r1, [pc, #200]	; (8001490 <Si468x_firmware_load_flash+0x12c>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f009 f92c 	bl	800a624 <itoa>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fe5d 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 80013d8:	795b      	ldrb	r3, [r3, #5]
 80013da:	2210      	movs	r2, #16
 80013dc:	492c      	ldr	r1, [pc, #176]	; (8001490 <Si468x_firmware_load_flash+0x12c>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f009 f920 	bl	800a624 <itoa>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fe51 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 80013f0:	799b      	ldrb	r3, [r3, #6]
 80013f2:	2210      	movs	r2, #16
 80013f4:	4926      	ldr	r1, [pc, #152]	; (8001490 <Si468x_firmware_load_flash+0x12c>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f009 f914 	bl	800a624 <itoa>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fe45 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001408:	79db      	ldrb	r3, [r3, #7]
 800140a:	2210      	movs	r2, #16
 800140c:	4920      	ldr	r1, [pc, #128]	; (8001490 <Si468x_firmware_load_flash+0x12c>)
 800140e:	4618      	mov	r0, r3
 8001410:	f009 f908 	bl	800a624 <itoa>
 8001414:	4603      	mov	r3, r0
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fe39 	bl	8003090 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001420:	2200      	movs	r2, #0
 8001422:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001426:	2200      	movs	r2, #0
 8001428:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 800142c:	2200      	movs	r2, #0
 800142e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001436:	4914      	ldr	r1, [pc, #80]	; (8001488 <Si468x_firmware_load_flash+0x124>)
 8001438:	200c      	movs	r0, #12
 800143a:	f000 f92d 	bl	8001698 <Si468x_write_command>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <Si468x_firmware_load_flash+0x130>)
 8001444:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f003 ff70 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800144c:	4912      	ldr	r1, [pc, #72]	; (8001498 <Si468x_firmware_load_flash+0x134>)
 800144e:	2005      	movs	r0, #5
 8001450:	f000 f944 	bl	80016dc <Si468x_read_reply>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <Si468x_firmware_load_flash+0x130>)
 800145a:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <Si468x_firmware_load_flash+0x134>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001468:	2101      	movs	r1, #1
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <Si468x_firmware_load_flash+0x138>)
 800146c:	f001 fe10 	bl	8003090 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001470:	e003      	b.n	800147a <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001472:	2101      	movs	r1, #1
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <Si468x_firmware_load_flash+0x13c>)
 8001476:	f001 fe0b 	bl	8003090 <send_debug_msg>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	0800a95c 	.word	0x0800a95c
 8001488:	20000100 	.word	0x20000100
 800148c:	0800a998 	.word	0x0800a998
 8001490:	20001900 	.word	0x20001900
 8001494:	20001940 	.word	0x20001940
 8001498:	20001100 	.word	0x20001100
 800149c:	0800a9ac 	.word	0x0800a9ac
 80014a0:	0800a9bc 	.word	0x0800a9bc

080014a4 <Si468x_boot>:

void Si468x_boot()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014a8:	2101      	movs	r1, #1
 80014aa:	4816      	ldr	r0, [pc, #88]	; (8001504 <Si468x_boot+0x60>)
 80014ac:	f001 fdf0 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <Si468x_boot+0x64>)
 80014b2:	2207      	movs	r2, #7
 80014b4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <Si468x_boot+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014bc:	4912      	ldr	r1, [pc, #72]	; (8001508 <Si468x_boot+0x64>)
 80014be:	2002      	movs	r0, #2
 80014c0:	f000 f8ea 	bl	8001698 <Si468x_write_command>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <Si468x_boot+0x68>)
 80014ca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f003 ff2d 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014d2:	490f      	ldr	r1, [pc, #60]	; (8001510 <Si468x_boot+0x6c>)
 80014d4:	2005      	movs	r0, #5
 80014d6:	f000 f901 	bl	80016dc <Si468x_read_reply>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <Si468x_boot+0x68>)
 80014e0:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <Si468x_boot+0x6c>)
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ea:	2bc0      	cmp	r3, #192	; 0xc0
 80014ec:	d104      	bne.n	80014f8 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014ee:	2101      	movs	r1, #1
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <Si468x_boot+0x70>)
 80014f2:	f001 fdcd 	bl	8003090 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014f6:	e003      	b.n	8001500 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014f8:	2101      	movs	r1, #1
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <Si468x_boot+0x74>)
 80014fc:	f001 fdc8 	bl	8003090 <send_debug_msg>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	0800a9d8 	.word	0x0800a9d8
 8001508:	20000100 	.word	0x20000100
 800150c:	20001940 	.word	0x20001940
 8001510:	20001100 	.word	0x20001100
 8001514:	0800aa14 	.word	0x0800aa14
 8001518:	0800aa30 	.word	0x0800aa30

0800151c <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 8001526:	1df9      	adds	r1, r7, #7
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	2201      	movs	r2, #1
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <Si468x_write_single_byte+0x20>)
 800152e:	f007 f85c 	bl	80085ea <HAL_SPI_Transmit>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000265c 	.word	0x2000265c

08001540 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800154a:	1df9      	adds	r1, r7, #7
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	2201      	movs	r2, #1
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <Si468x_read_single_byte+0x20>)
 8001552:	f007 f986 	bl	8008862 <HAL_SPI_Receive>
	return data_buffer;
 8001556:	79fb      	ldrb	r3, [r7, #7]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000265c 	.word	0x2000265c

08001564 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	81fb      	strh	r3, [r7, #14]
 8001572:	e01f      	b.n	80015b4 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <Si468x_wait_for_CTS+0x6c>)
 8001576:	2001      	movs	r0, #1
 8001578:	f000 f8b0 	bl	80016dc <Si468x_read_reply>
		if(rd_reply.cts)
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <Si468x_wait_for_CTS+0x70>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00e      	beq.n	80015a8 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <Si468x_wait_for_CTS+0x70>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001598:	2101      	movs	r1, #1
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <Si468x_wait_for_CTS+0x74>)
 800159c:	f001 fd78 	bl	8003090 <send_debug_msg>
				return COMMAND_ERROR;
 80015a0:	2320      	movs	r3, #32
 80015a2:	e010      	b.n	80015c6 <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e00e      	b.n	80015c6 <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f003 febf 	bl	800532c <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	3301      	adds	r3, #1
 80015b2:	81fb      	strh	r3, [r7, #14]
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3db      	bcc.n	8001574 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015bc:	2101      	movs	r1, #1
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <Si468x_wait_for_CTS+0x78>)
 80015c0:	f001 fd66 	bl	8003090 <send_debug_msg>
	return TIMEOUT;
 80015c4:	2308      	movs	r3, #8
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20001100 	.word	0x20001100
 80015d4:	20001a30 	.word	0x20001a30
 80015d8:	0800aa44 	.word	0x0800aa44
 80015dc:	0800aa6c 	.word	0x0800aa6c

080015e0 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015f0:	2200      	movs	r2, #0
 80015f2:	2110      	movs	r1, #16
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <Si468x_write_multiple+0x4c>)
 80015f6:	f004 fc9d 	bl	8005f34 <HAL_GPIO_WritePin>
	while(len--)
 80015fa:	e009      	b.n	8001610 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	81fa      	strh	r2, [r7, #14]
 8001602:	461a      	mov	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff86 	bl	800151c <Si468x_write_single_byte>
	while(len--)
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	80fa      	strh	r2, [r7, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 800161a:	2201      	movs	r2, #1
 800161c:	2110      	movs	r1, #16
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <Si468x_write_multiple+0x4c>)
 8001620:	f004 fc88 	bl	8005f34 <HAL_GPIO_WritePin>
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020800 	.word	0x40020800

08001630 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001640:	2201      	movs	r2, #1
 8001642:	2110      	movs	r1, #16
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <Si468x_read_multiple+0x64>)
 8001646:	f004 fc75 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800164a:	2003      	movs	r0, #3
 800164c:	f003 fe6e 	bl	800532c <HAL_Delay>
	CS_PIN_LOW;
 8001650:	2200      	movs	r2, #0
 8001652:	2110      	movs	r1, #16
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <Si468x_read_multiple+0x64>)
 8001656:	f004 fc6d 	bl	8005f34 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff ff5e 	bl	800151c <Si468x_write_single_byte>
	while(len--)
 8001660:	e009      	b.n	8001676 <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	81fa      	strh	r2, [r7, #14]
 8001668:	461a      	mov	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	189c      	adds	r4, r3, r2
 800166e:	f7ff ff67 	bl	8001540 <Si468x_read_single_byte>
 8001672:	4603      	mov	r3, r0
 8001674:	7023      	strb	r3, [r4, #0]
	while(len--)
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	80fa      	strh	r2, [r7, #6]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001680:	2201      	movs	r2, #1
 8001682:	2110      	movs	r1, #16
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <Si468x_read_multiple+0x64>)
 8001686:	f004 fc55 	bl	8005f34 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	40020800 	.word	0x40020800

08001698 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a8:	f7ff ff5c 	bl	8001564 <Si468x_wait_for_CTS>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <Si468x_write_command+0x24>
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d10a      	bne.n	80016d2 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff8d 	bl	80015e0 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ca:	f7ff ff4b 	bl	8001564 <Si468x_wait_for_CTS>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff9f 	bl	8001630 <Si468x_read_multiple>
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <Si468x_read_reply+0x28>)
 80016f4:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <Si468x_read_reply+0x2c>)
 80016f8:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20001100 	.word	0x20001100
 8001708:	20001a30 	.word	0x20001a30

0800170c <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001710:	2101      	movs	r1, #1
 8001712:	4833      	ldr	r0, [pc, #204]	; (80017e0 <Si468x_get_sys_state+0xd4>)
 8001714:	f001 fcbc 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <Si468x_get_sys_state+0xd8>)
 800171a:	2209      	movs	r2, #9
 800171c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <Si468x_get_sys_state+0xd8>)
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001724:	492f      	ldr	r1, [pc, #188]	; (80017e4 <Si468x_get_sys_state+0xd8>)
 8001726:	2002      	movs	r0, #2
 8001728:	f7ff ffb6 	bl	8001698 <Si468x_write_command>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <Si468x_get_sys_state+0xdc>)
 8001732:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001734:	2001      	movs	r0, #1
 8001736:	f003 fdf9 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800173a:	492c      	ldr	r1, [pc, #176]	; (80017ec <Si468x_get_sys_state+0xe0>)
 800173c:	2005      	movs	r0, #5
 800173e:	f7ff ffcd 	bl	80016dc <Si468x_read_reply>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <Si468x_get_sys_state+0xdc>)
 8001748:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800174a:	2100      	movs	r1, #0
 800174c:	4828      	ldr	r0, [pc, #160]	; (80017f0 <Si468x_get_sys_state+0xe4>)
 800174e:	f001 fc9f 	bl	8003090 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <Si468x_get_sys_state+0xe0>)
 8001754:	791b      	ldrb	r3, [r3, #4]
 8001756:	2b07      	cmp	r3, #7
 8001758:	d83a      	bhi.n	80017d0 <Si468x_get_sys_state+0xc4>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <Si468x_get_sys_state+0x54>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001781 	.word	0x08001781
 8001764:	0800178b 	.word	0x0800178b
 8001768:	08001795 	.word	0x08001795
 800176c:	0800179f 	.word	0x0800179f
 8001770:	080017a9 	.word	0x080017a9
 8001774:	080017b3 	.word	0x080017b3
 8001778:	080017bd 	.word	0x080017bd
 800177c:	080017c7 	.word	0x080017c7
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001780:	2101      	movs	r1, #1
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <Si468x_get_sys_state+0xe8>)
 8001784:	f001 fc84 	bl	8003090 <send_debug_msg>
			break;
 8001788:	e027      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800178a:	2101      	movs	r1, #1
 800178c:	481a      	ldr	r0, [pc, #104]	; (80017f8 <Si468x_get_sys_state+0xec>)
 800178e:	f001 fc7f 	bl	8003090 <send_debug_msg>
			break;
 8001792:	e022      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001794:	2101      	movs	r1, #1
 8001796:	4819      	ldr	r0, [pc, #100]	; (80017fc <Si468x_get_sys_state+0xf0>)
 8001798:	f001 fc7a 	bl	8003090 <send_debug_msg>
			break;
 800179c:	e01d      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 800179e:	2101      	movs	r1, #1
 80017a0:	4817      	ldr	r0, [pc, #92]	; (8001800 <Si468x_get_sys_state+0xf4>)
 80017a2:	f001 fc75 	bl	8003090 <send_debug_msg>
			break;
 80017a6:	e018      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4816      	ldr	r0, [pc, #88]	; (8001804 <Si468x_get_sys_state+0xf8>)
 80017ac:	f001 fc70 	bl	8003090 <send_debug_msg>
			break;
 80017b0:	e013      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017b2:	2101      	movs	r1, #1
 80017b4:	4814      	ldr	r0, [pc, #80]	; (8001808 <Si468x_get_sys_state+0xfc>)
 80017b6:	f001 fc6b 	bl	8003090 <send_debug_msg>
			break;
 80017ba:	e00e      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017bc:	2101      	movs	r1, #1
 80017be:	4813      	ldr	r0, [pc, #76]	; (800180c <Si468x_get_sys_state+0x100>)
 80017c0:	f001 fc66 	bl	8003090 <send_debug_msg>
			break;
 80017c4:	e009      	b.n	80017da <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017c6:	2101      	movs	r1, #1
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <Si468x_get_sys_state+0x104>)
 80017ca:	f001 fc61 	bl	8003090 <send_debug_msg>
			break;
 80017ce:	e004      	b.n	80017da <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017d0:	2101      	movs	r1, #1
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <Si468x_get_sys_state+0x108>)
 80017d4:	f001 fc5c 	bl	8003090 <send_debug_msg>
			break;
 80017d8:	bf00      	nop
	}
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800aa7c 	.word	0x0800aa7c
 80017e4:	20000100 	.word	0x20000100
 80017e8:	20001940 	.word	0x20001940
 80017ec:	20001100 	.word	0x20001100
 80017f0:	0800aab8 	.word	0x0800aab8
 80017f4:	0800aac4 	.word	0x0800aac4
 80017f8:	0800aadc 	.word	0x0800aadc
 80017fc:	0800aaf4 	.word	0x0800aaf4
 8001800:	0800ab0c 	.word	0x0800ab0c
 8001804:	0800ab34 	.word	0x0800ab34
 8001808:	0800ab50 	.word	0x0800ab50
 800180c:	0800ab68 	.word	0x0800ab68
 8001810:	0800ab84 	.word	0x0800ab84
 8001814:	0800ab9c 	.word	0x0800ab9c

08001818 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800181e:	2101      	movs	r1, #1
 8001820:	482d      	ldr	r0, [pc, #180]	; (80018d8 <Si468x_get_part_info+0xc0>)
 8001822:	f001 fc35 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <Si468x_get_part_info+0xc4>)
 8001828:	2208      	movs	r2, #8
 800182a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <Si468x_get_part_info+0xc4>)
 800182e:	2200      	movs	r2, #0
 8001830:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001832:	492a      	ldr	r1, [pc, #168]	; (80018dc <Si468x_get_part_info+0xc4>)
 8001834:	2002      	movs	r0, #2
 8001836:	f7ff ff2f 	bl	8001698 <Si468x_write_command>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <Si468x_get_part_info+0xc8>)
 8001840:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001842:	2001      	movs	r0, #1
 8001844:	f003 fd72 	bl	800532c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fe67 	bl	800151c <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800184e:	4925      	ldr	r1, [pc, #148]	; (80018e4 <Si468x_get_part_info+0xcc>)
 8001850:	200a      	movs	r0, #10
 8001852:	f7ff ff43 	bl	80016dc <Si468x_read_reply>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <Si468x_get_part_info+0xc8>)
 800185c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800185e:	2100      	movs	r1, #0
 8001860:	4821      	ldr	r0, [pc, #132]	; (80018e8 <Si468x_get_part_info+0xd0>)
 8001862:	f001 fc15 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <Si468x_get_part_info+0xcc>)
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	220a      	movs	r2, #10
 800186c:	491f      	ldr	r1, [pc, #124]	; (80018ec <Si468x_get_part_info+0xd4>)
 800186e:	4618      	mov	r0, r3
 8001870:	f008 fed8 	bl	800a624 <itoa>
 8001874:	4603      	mov	r3, r0
 8001876:	2101      	movs	r1, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f001 fc09 	bl	8003090 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 800187e:	2100      	movs	r1, #0
 8001880:	481b      	ldr	r0, [pc, #108]	; (80018f0 <Si468x_get_part_info+0xd8>)
 8001882:	f001 fc05 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <Si468x_get_part_info+0xcc>)
 8001888:	795b      	ldrb	r3, [r3, #5]
 800188a:	220a      	movs	r2, #10
 800188c:	4917      	ldr	r1, [pc, #92]	; (80018ec <Si468x_get_part_info+0xd4>)
 800188e:	4618      	mov	r0, r3
 8001890:	f008 fec8 	bl	800a624 <itoa>
 8001894:	4603      	mov	r3, r0
 8001896:	2101      	movs	r1, #1
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fbf9 	bl	8003090 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 800189e:	2100      	movs	r1, #0
 80018a0:	4814      	ldr	r0, [pc, #80]	; (80018f4 <Si468x_get_part_info+0xdc>)
 80018a2:	f001 fbf5 	bl	8003090 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <Si468x_get_part_info+0xcc>)
 80018a8:	7a5b      	ldrb	r3, [r3, #9]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <Si468x_get_part_info+0xcc>)
 80018b2:	7a1b      	ldrb	r3, [r3, #8]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	220a      	movs	r2, #10
 80018be:	490b      	ldr	r1, [pc, #44]	; (80018ec <Si468x_get_part_info+0xd4>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 feaf 	bl	800a624 <itoa>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2101      	movs	r1, #1
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fbe0 	bl	8003090 <send_debug_msg>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0800abb0 	.word	0x0800abb0
 80018dc:	20000100 	.word	0x20000100
 80018e0:	20001940 	.word	0x20001940
 80018e4:	20001100 	.word	0x20001100
 80018e8:	0800abec 	.word	0x0800abec
 80018ec:	20001900 	.word	0x20001900
 80018f0:	0800abfc 	.word	0x0800abfc
 80018f4:	0800ac08 	.word	0x0800ac08

080018f8 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	80fb      	strh	r3, [r7, #6]
 8001904:	4613      	mov	r3, r2
 8001906:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001908:	2101      	movs	r1, #1
 800190a:	4832      	ldr	r0, [pc, #200]	; (80019d4 <Si468x_set_property+0xdc>)
 800190c:	f001 fbc0 	bl	8003090 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001910:	2100      	movs	r1, #0
 8001912:	4831      	ldr	r0, [pc, #196]	; (80019d8 <Si468x_set_property+0xe0>)
 8001914:	f001 fbbc 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	2210      	movs	r2, #16
 800191c:	492f      	ldr	r1, [pc, #188]	; (80019dc <Si468x_set_property+0xe4>)
 800191e:	4618      	mov	r0, r3
 8001920:	f008 fe80 	bl	800a624 <itoa>
 8001924:	4603      	mov	r3, r0
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fbb1 	bl	8003090 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800192e:	2100      	movs	r1, #0
 8001930:	482b      	ldr	r0, [pc, #172]	; (80019e0 <Si468x_set_property+0xe8>)
 8001932:	f001 fbad 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	2210      	movs	r2, #16
 800193a:	4928      	ldr	r1, [pc, #160]	; (80019dc <Si468x_set_property+0xe4>)
 800193c:	4618      	mov	r0, r3
 800193e:	f008 fe71 	bl	800a624 <itoa>
 8001942:	4603      	mov	r3, r0
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fba2 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <Si468x_set_property+0xec>)
 800194e:	2213      	movs	r2, #19
 8001950:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <Si468x_set_property+0xec>)
 8001954:	2200      	movs	r2, #0
 8001956:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <Si468x_set_property+0xec>)
 800195e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <Si468x_set_property+0xec>)
 800196a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <Si468x_set_property+0xec>)
 8001972:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29b      	uxth	r3, r3
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <Si468x_set_property+0xec>)
 800197e:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001980:	4918      	ldr	r1, [pc, #96]	; (80019e4 <Si468x_set_property+0xec>)
 8001982:	2006      	movs	r0, #6
 8001984:	f7ff fe88 	bl	8001698 <Si468x_write_command>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <Si468x_set_property+0xf0>)
 800198e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f003 fccb 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001996:	4915      	ldr	r1, [pc, #84]	; (80019ec <Si468x_set_property+0xf4>)
 8001998:	2005      	movs	r0, #5
 800199a:	f7ff fe9f 	bl	80016dc <Si468x_read_reply>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <Si468x_set_property+0xf0>)
 80019a4:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f825 	bl	80019f8 <Si468x_get_property>
 80019ae:	4603      	mov	r3, r0
 80019b0:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019b2:	89fa      	ldrh	r2, [r7, #14]
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d104      	bne.n	80019c4 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019ba:	2101      	movs	r1, #1
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <Si468x_set_property+0xf8>)
 80019be:	f001 fb67 	bl	8003090 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019c2:	e003      	b.n	80019cc <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019c4:	2101      	movs	r1, #1
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <Si468x_set_property+0xfc>)
 80019c8:	f001 fb62 	bl	8003090 <send_debug_msg>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0800ac18 	.word	0x0800ac18
 80019d8:	0800ac58 	.word	0x0800ac58
 80019dc:	20001900 	.word	0x20001900
 80019e0:	0800ac68 	.word	0x0800ac68
 80019e4:	20000100 	.word	0x20000100
 80019e8:	20001940 	.word	0x20001940
 80019ec:	20001100 	.word	0x20001100
 80019f0:	0800ac84 	.word	0x0800ac84
 80019f4:	0800aca0 	.word	0x0800aca0

080019f8 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a02:	2101      	movs	r1, #1
 8001a04:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <Si468x_get_property+0xbc>)
 8001a06:	f001 fb43 	bl	8003090 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <Si468x_get_property+0xc0>)
 8001a0e:	f001 fb3f 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2210      	movs	r2, #16
 8001a16:	4929      	ldr	r1, [pc, #164]	; (8001abc <Si468x_get_property+0xc4>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f008 fe03 	bl	800a624 <itoa>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fb34 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <Si468x_get_property+0xc8>)
 8001a2a:	2214      	movs	r2, #20
 8001a2c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <Si468x_get_property+0xc8>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <Si468x_get_property+0xc8>)
 8001a3a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <Si468x_get_property+0xc8>)
 8001a46:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a48:	491d      	ldr	r1, [pc, #116]	; (8001ac0 <Si468x_get_property+0xc8>)
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f7ff fe24 	bl	8001698 <Si468x_write_command>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <Si468x_get_property+0xcc>)
 8001a56:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f003 fc67 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a5e:	491a      	ldr	r1, [pc, #104]	; (8001ac8 <Si468x_get_property+0xd0>)
 8001a60:	2006      	movs	r0, #6
 8001a62:	f7ff fe3b 	bl	80016dc <Si468x_read_reply>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <Si468x_get_property+0xcc>)
 8001a6c:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4816      	ldr	r0, [pc, #88]	; (8001acc <Si468x_get_property+0xd4>)
 8001a72:	f001 fb0d 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <Si468x_get_property+0xd0>)
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <Si468x_get_property+0xd0>)
 8001a7e:	7912      	ldrb	r2, [r2, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	2210      	movs	r2, #16
 8001a84:	490d      	ldr	r1, [pc, #52]	; (8001abc <Si468x_get_property+0xc4>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 fdcc 	bl	800a624 <itoa>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fafd 	bl	8003090 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <Si468x_get_property+0xd0>)
 8001a98:	795b      	ldrb	r3, [r3, #5]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <Si468x_get_property+0xd0>)
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0800acb8 	.word	0x0800acb8
 8001ab8:	0800ac58 	.word	0x0800ac58
 8001abc:	20001900 	.word	0x20001900
 8001ac0:	20000100 	.word	0x20000100
 8001ac4:	20001940 	.word	0x20001940
 8001ac8:	20001100 	.word	0x20001100
 8001acc:	0800acf4 	.word	0x0800acf4

08001ad0 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	485d      	ldr	r0, [pc, #372]	; (8001c50 <Si468x_dab_get_freq_list+0x180>)
 8001ada:	f001 fad9 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <Si468x_dab_get_freq_list+0x184>)
 8001ae0:	22b9      	movs	r2, #185	; 0xb9
 8001ae2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <Si468x_dab_get_freq_list+0x184>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001aea:	495a      	ldr	r1, [pc, #360]	; (8001c54 <Si468x_dab_get_freq_list+0x184>)
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff fdd3 	bl	8001698 <Si468x_write_command>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <Si468x_dab_get_freq_list+0x188>)
 8001af8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f003 fc16 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b00:	4956      	ldr	r1, [pc, #344]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001b02:	2005      	movs	r0, #5
 8001b04:	f7ff fdea 	bl	80016dc <Si468x_read_reply>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <Si468x_dab_get_freq_list+0x188>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <Si468x_dab_get_freq_list+0x190>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <Si468x_dab_get_freq_list+0x58>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4850      	ldr	r0, [pc, #320]	; (8001c64 <Si468x_dab_get_freq_list+0x194>)
 8001b22:	f001 fab5 	bl	8003090 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b26:	e08e      	b.n	8001c46 <Si468x_dab_get_freq_list+0x176>
		if(dab_spi_rx_buffer[4])
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001b2a:	791b      	ldrb	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8086 	beq.w	8001c3e <Si468x_dab_get_freq_list+0x16e>
			uint8_t read_offset = 2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	70fb      	strb	r3, [r7, #3]
			freq_cnt = dab_spi_rx_buffer[4];
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001b38:	791a      	ldrb	r2, [r3, #4]
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <Si468x_dab_get_freq_list+0x198>)
 8001b3c:	701a      	strb	r2, [r3, #0]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	484a      	ldr	r0, [pc, #296]	; (8001c6c <Si468x_dab_get_freq_list+0x19c>)
 8001b42:	f001 faa5 	bl	8003090 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b46:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <Si468x_dab_get_freq_list+0x198>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	220a      	movs	r2, #10
 8001b4c:	4948      	ldr	r1, [pc, #288]	; (8001c70 <Si468x_dab_get_freq_list+0x1a0>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f008 fd68 	bl	800a624 <itoa>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fa99 	bl	8003090 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4844      	ldr	r0, [pc, #272]	; (8001c74 <Si468x_dab_get_freq_list+0x1a4>)
 8001b62:	f001 fa95 	bl	8003090 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b66:	493d      	ldr	r1, [pc, #244]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f7ff fdb7 	bl	80016dc <Si468x_read_reply>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <Si468x_dab_get_freq_list+0x188>)
 8001b74:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <Si468x_dab_get_freq_list+0x198>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4935      	ldr	r1, [pc, #212]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fda7 	bl	80016dc <Si468x_read_reply>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <Si468x_dab_get_freq_list+0x188>)
 8001b94:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e049      	b.n	8001c30 <Si468x_dab_get_freq_list+0x160>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4a2d      	ldr	r2, [pc, #180]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	18ca      	adds	r2, r1, r3
 8001bbc:	78f9      	ldrb	r1, [r7, #3]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	4925      	ldr	r1, [pc, #148]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	441a      	add	r2, r3
 8001bce:	78f9      	ldrb	r1, [r7, #3]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	440b      	add	r3, r1
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	4920      	ldr	r1, [pc, #128]	; (8001c5c <Si468x_dab_get_freq_list+0x18c>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	4413      	add	r3, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <Si468x_dab_get_freq_list+0x1a8>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001bea:	220a      	movs	r2, #10
 8001bec:	4920      	ldr	r1, [pc, #128]	; (8001c70 <Si468x_dab_get_freq_list+0x1a0>)
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f008 fd18 	bl	800a624 <itoa>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fa49 	bl	8003090 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	481e      	ldr	r0, [pc, #120]	; (8001c7c <Si468x_dab_get_freq_list+0x1ac>)
 8001c02:	f001 fa45 	bl	8003090 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <Si468x_dab_get_freq_list+0x1a8>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	220a      	movs	r2, #10
 8001c10:	4917      	ldr	r1, [pc, #92]	; (8001c70 <Si468x_dab_get_freq_list+0x1a0>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 fd06 	bl	800a624 <itoa>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 fa37 	bl	8003090 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c22:	2101      	movs	r1, #1
 8001c24:	4816      	ldr	r0, [pc, #88]	; (8001c80 <Si468x_dab_get_freq_list+0x1b0>)
 8001c26:	f001 fa33 	bl	8003090 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <Si468x_dab_get_freq_list+0x198>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	dbaf      	blt.n	8001b9c <Si468x_dab_get_freq_list+0xcc>
}
 8001c3c:	e003      	b.n	8001c46 <Si468x_dab_get_freq_list+0x176>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4810      	ldr	r0, [pc, #64]	; (8001c84 <Si468x_dab_get_freq_list+0x1b4>)
 8001c42:	f001 fa25 	bl	8003090 <send_debug_msg>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	0800ad08 	.word	0x0800ad08
 8001c54:	20000100 	.word	0x20000100
 8001c58:	20001940 	.word	0x20001940
 8001c5c:	20001100 	.word	0x20001100
 8001c60:	20001a30 	.word	0x20001a30
 8001c64:	0800a9ac 	.word	0x0800a9ac
 8001c68:	20001a04 	.word	0x20001a04
 8001c6c:	0800ad44 	.word	0x0800ad44
 8001c70:	20001900 	.word	0x20001900
 8001c74:	0800ad4c 	.word	0x0800ad4c
 8001c78:	20001944 	.word	0x20001944
 8001c7c:	0800ad64 	.word	0x0800ad64
 8001c80:	0800ad68 	.word	0x0800ad68
 8001c84:	0800ad70 	.word	0x0800ad70

08001c88 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460a      	mov	r2, r1
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	4613      	mov	r3, r2
 8001c96:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4849      	ldr	r0, [pc, #292]	; (8001dc0 <Si468x_dab_tune_freq+0x138>)
 8001c9c:	f001 f9f8 	bl	8003090 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4848      	ldr	r0, [pc, #288]	; (8001dc4 <Si468x_dab_tune_freq+0x13c>)
 8001ca4:	f001 f9f4 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <Si468x_dab_tune_freq+0x140>)
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	220a      	movs	r2, #10
 8001cb2:	4946      	ldr	r1, [pc, #280]	; (8001dcc <Si468x_dab_tune_freq+0x144>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fcb5 	bl	800a624 <itoa>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 f9e6 	bl	8003090 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4842      	ldr	r0, [pc, #264]	; (8001dd0 <Si468x_dab_tune_freq+0x148>)
 8001cc8:	f001 f9e2 	bl	8003090 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001ccc:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001cce:	22b0      	movs	r2, #176	; 0xb0
 8001cd0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cd8:	4a3e      	ldr	r2, [pc, #248]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001ce4:	88bb      	ldrh	r3, [r7, #4]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001cea:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001cec:	88bb      	ldrh	r3, [r7, #4]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001cf6:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001cf8:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <Si468x_dab_tune_freq+0x14c>)
 8001cfa:	2006      	movs	r0, #6
 8001cfc:	f7ff fccc 	bl	8001698 <Si468x_write_command>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <Si468x_dab_tune_freq+0x150>)
 8001d06:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d08:	4934      	ldr	r1, [pc, #208]	; (8001ddc <Si468x_dab_tune_freq+0x154>)
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff fce6 	bl	80016dc <Si468x_read_reply>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <Si468x_dab_tune_freq+0x150>)
 8001d16:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <Si468x_dab_tune_freq+0x158>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d26:	2101      	movs	r1, #1
 8001d28:	482e      	ldr	r0, [pc, #184]	; (8001de4 <Si468x_dab_tune_freq+0x15c>)
 8001d2a:	f001 f9b1 	bl	8003090 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	81fb      	strh	r3, [r7, #14]
 8001d32:	e03a      	b.n	8001daa <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d34:	4929      	ldr	r1, [pc, #164]	; (8001ddc <Si468x_dab_tune_freq+0x154>)
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff fcd0 	bl	80016dc <Si468x_read_reply>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <Si468x_dab_tune_freq+0x150>)
 8001d42:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <Si468x_dab_tune_freq+0x158>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01c      	beq.n	8001d8c <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d52:	2100      	movs	r1, #0
 8001d54:	4824      	ldr	r0, [pc, #144]	; (8001de8 <Si468x_dab_tune_freq+0x160>)
 8001d56:	f001 f99b 	bl	8003090 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	220a      	movs	r2, #10
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <Si468x_dab_tune_freq+0x144>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f008 fc5f 	bl	800a624 <itoa>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 f990 	bl	8003090 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d70:	2101      	movs	r1, #1
 8001d72:	481e      	ldr	r0, [pc, #120]	; (8001dec <Si468x_dab_tune_freq+0x164>)
 8001d74:	f001 f98c 	bl	8003090 <send_debug_msg>
			actual_freq_id = channel;
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <Si468x_dab_tune_freq+0x168>)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <Si468x_dab_tune_freq+0x140>)
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <Si468x_dab_tune_freq+0x16c>)
 8001d88:	6013      	str	r3, [r2, #0]
			break;
 8001d8a:	e014      	b.n	8001db6 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
 8001d8e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d103      	bne.n	8001d9e <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001d96:	2101      	movs	r1, #1
 8001d98:	4817      	ldr	r0, [pc, #92]	; (8001df8 <Si468x_dab_tune_freq+0x170>)
 8001d9a:	f001 f979 	bl	8003090 <send_debug_msg>
		}
		HAL_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f003 fac4 	bl	800532c <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	3301      	adds	r3, #1
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	89fb      	ldrh	r3, [r7, #14]
 8001dac:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d9bf      	bls.n	8001d34 <Si468x_dab_tune_freq+0xac>
	}
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800ad8c 	.word	0x0800ad8c
 8001dc4:	0800adc8 	.word	0x0800adc8
 8001dc8:	20001944 	.word	0x20001944
 8001dcc:	20001900 	.word	0x20001900
 8001dd0:	0800ad68 	.word	0x0800ad68
 8001dd4:	20000100 	.word	0x20000100
 8001dd8:	20001940 	.word	0x20001940
 8001ddc:	20001100 	.word	0x20001100
 8001de0:	20001a30 	.word	0x20001a30
 8001de4:	0800a9ac 	.word	0x0800a9ac
 8001de8:	0800add4 	.word	0x0800add4
 8001dec:	0800adf0 	.word	0x0800adf0
 8001df0:	2000258c 	.word	0x2000258c
 8001df4:	20002588 	.word	0x20002588
 8001df8:	0800adf8 	.word	0x0800adf8

08001dfc <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af06      	add	r7, sp, #24
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <Si468x_dab_digrad_status+0x90>)
 8001e04:	22b2      	movs	r2, #178	; 0xb2
 8001e06:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <Si468x_dab_digrad_status+0x90>)
 8001e0a:	221a      	movs	r2, #26
 8001e0c:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e0e:	491f      	ldr	r1, [pc, #124]	; (8001e8c <Si468x_dab_digrad_status+0x90>)
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff fc41 	bl	8001698 <Si468x_write_command>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <Si468x_dab_digrad_status+0x94>)
 8001e1c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f003 fa84 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e24:	491b      	ldr	r1, [pc, #108]	; (8001e94 <Si468x_dab_digrad_status+0x98>)
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	f7ff fc58 	bl	80016dc <Si468x_read_reply>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <Si468x_dab_digrad_status+0x94>)
 8001e32:	701a      	strb	r2, [r3, #0]
	memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <Si468x_dab_digrad_status+0x9c>)
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <Si468x_dab_digrad_status+0x98>)
 8001e38:	4615      	mov	r5, r2
 8001e3a:	1d1c      	adds	r4, r3, #4
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e48:	e885 0003 	stmia.w	r5, {r0, r1}
	if(dab_digrad_status.snr > 20)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <Si468x_dab_digrad_status+0x9c>)
 8001e4e:	78db      	ldrb	r3, [r3, #3]
 8001e50:	2b14      	cmp	r3, #20
 8001e52:	d902      	bls.n	8001e5a <Si468x_dab_digrad_status+0x5e>
	{
		dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <Si468x_dab_digrad_status+0x9c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	70da      	strb	r2, [r3, #3]
	}
	if(dab_digrad_status.cnr > 54)
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <Si468x_dab_digrad_status+0x9c>)
 8001e5c:	795b      	ldrb	r3, [r3, #5]
 8001e5e:	2b36      	cmp	r3, #54	; 0x36
 8001e60:	d902      	bls.n	8001e68 <Si468x_dab_digrad_status+0x6c>
	{
		dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <Si468x_dab_digrad_status+0x9c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	715a      	strb	r2, [r3, #5]
	}
	Display_dab_digrad_status_data(dab_digrad_status);
 8001e68:	4e0b      	ldr	r6, [pc, #44]	; (8001e98 <Si468x_dab_digrad_status+0x9c>)
 8001e6a:	466d      	mov	r5, sp
 8001e6c:	f106 0410 	add.w	r4, r6, #16
 8001e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e80:	f001 fad6 	bl	8003430 <Display_dab_digrad_status_data>
}
 8001e84:	bf00      	nop
 8001e86:	3704      	adds	r7, #4
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	20000100 	.word	0x20000100
 8001e90:	20001940 	.word	0x20001940
 8001e94:	20001100 	.word	0x20001100
 8001e98:	20001a08 	.word	0x20001a08

08001e9c <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001eaa:	2300      	movs	r3, #0
 8001eac:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001eae:	2300      	movs	r3, #0
 8001eb0:	717b      	strb	r3, [r7, #5]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001eb2:	4ba2      	ldr	r3, [pc, #648]	; (800213c <Si468x_dab_get_digital_service_list+0x2a0>)
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001eb8:	4ba0      	ldr	r3, [pc, #640]	; (800213c <Si468x_dab_get_digital_service_list+0x2a0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001ebe:	499f      	ldr	r1, [pc, #636]	; (800213c <Si468x_dab_get_digital_service_list+0x2a0>)
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f7ff fbe9 	bl	8001698 <Si468x_write_command>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b9d      	ldr	r3, [pc, #628]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ecc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f003 fa2c 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001ed4:	499b      	ldr	r1, [pc, #620]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eda:	f7ff fbff 	bl	80016dc <Si468x_read_reply>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b97      	ldr	r3, [pc, #604]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ee4:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4897      	ldr	r0, [pc, #604]	; (8002148 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001eea:	f001 f8d1 	bl	8003090 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001eee:	4b97      	ldr	r3, [pc, #604]	; (800214c <Si468x_dab_get_digital_service_list+0x2b0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001efc:	2101      	movs	r1, #1
 8001efe:	4894      	ldr	r0, [pc, #592]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f00:	f001 f8c6 	bl	8003090 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f06:	791b      	ldrb	r3, [r3, #4]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b8e      	ldr	r3, [pc, #568]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	803b      	strh	r3, [r7, #0]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001f18:	4b8a      	ldr	r3, [pc, #552]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f1a:	7a1b      	ldrb	r3, [r3, #8]
 8001f1c:	71fb      	strb	r3, [r7, #7]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	713b      	strb	r3, [r7, #4]
 8001f22:	e21e      	b.n	8002362 <Si468x_dab_get_digital_service_list+0x4c6>
	{
		services_list[service_index + actual_services].freq = actual_freq;
 8001f24:	793b      	ldrb	r3, [r7, #4]
 8001f26:	4a8b      	ldr	r2, [pc, #556]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a8a      	ldr	r2, [pc, #552]	; (8002158 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	498a      	ldr	r1, [pc, #552]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f32:	2034      	movs	r0, #52	; 0x34
 8001f34:	fb00 f303 	mul.w	r3, r0, r3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	601a      	str	r2, [r3, #0]
		services_list[service_index + actual_services].freq_id = actual_freq_id;
 8001f3e:	793b      	ldrb	r3, [r7, #4]
 8001f40:	4a84      	ldr	r2, [pc, #528]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a86      	ldr	r2, [pc, #536]	; (8002160 <Si468x_dab_get_digital_service_list+0x2c4>)
 8001f48:	7810      	ldrb	r0, [r2, #0]
 8001f4a:	4a84      	ldr	r2, [pc, #528]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f4c:	2134      	movs	r1, #52	; 0x34
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	332c      	adds	r3, #44	; 0x2c
 8001f56:	4602      	mov	r2, r0
 8001f58:	701a      	strb	r2, [r3, #0]

		services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001f5a:	79ba      	ldrb	r2, [r7, #6]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	f103 0210 	add.w	r2, r3, #16
 8001f68:	797b      	ldrb	r3, [r7, #5]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a75      	ldr	r2, [pc, #468]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f70:	5cd2      	ldrb	r2, [r2, r3]
 8001f72:	793b      	ldrb	r3, [r7, #4]
 8001f74:	4977      	ldr	r1, [pc, #476]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f76:	7809      	ldrb	r1, [r1, #0]
 8001f78:	440b      	add	r3, r1
 8001f7a:	f002 0201 	and.w	r2, r2, #1
 8001f7e:	b2d0      	uxtb	r0, r2
 8001f80:	4a76      	ldr	r2, [pc, #472]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f82:	2134      	movs	r1, #52	; 0x34
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	701a      	strb	r2, [r3, #0]
		services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001f90:	79ba      	ldrb	r2, [r7, #6]
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	f103 0211 	add.w	r2, r3, #17
 8001f9e:	797b      	ldrb	r3, [r7, #5]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a67      	ldr	r2, [pc, #412]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001fa6:	5cd2      	ldrb	r2, [r2, r3]
 8001fa8:	793b      	ldrb	r3, [r7, #4]
 8001faa:	496a      	ldr	r1, [pc, #424]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fac:	7809      	ldrb	r1, [r1, #0]
 8001fae:	440b      	add	r3, r1
 8001fb0:	f002 020f 	and.w	r2, r2, #15
 8001fb4:	b2d0      	uxtb	r0, r2
 8001fb6:	4a69      	ldr	r2, [pc, #420]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fb8:	2134      	movs	r1, #52	; 0x34
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	332d      	adds	r3, #45	; 0x2d
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + actual_services].pd_flag)
 8001fc6:	793b      	ldrb	r3, [r7, #4]
 8001fc8:	4a62      	ldr	r2, [pc, #392]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a63      	ldr	r2, [pc, #396]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fd0:	2134      	movs	r1, #52	; 0x34
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3318      	adds	r3, #24
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d017      	beq.n	8002010 <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	71bb      	strb	r3, [r7, #6]
			components_count += services_list[service_index + actual_services].number_of_components;
 8001fe6:	793b      	ldrb	r3, [r7, #4]
 8001fe8:	4a5a      	ldr	r2, [pc, #360]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a5b      	ldr	r2, [pc, #364]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8001ff0:	2134      	movs	r1, #52	; 0x34
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	332d      	adds	r3, #45	; 0x2d
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	4413      	add	r3, r2
 8002000:	717b      	strb	r3, [r7, #5]
			service_index--;
 8002002:	793b      	ldrb	r3, [r7, #4]
 8002004:	3b01      	subs	r3, #1
 8002006:	713b      	strb	r3, [r7, #4]
			number_of_services--;
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	3b01      	subs	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
			continue;
 800200e:	e1a5      	b.n	800235c <Si468x_dab_get_digital_service_list+0x4c0>
		}

		services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8002010:	79ba      	ldrb	r2, [r7, #6]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	f103 0210 	add.w	r2, r3, #16
 800201e:	797b      	ldrb	r3, [r7, #5]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	4a47      	ldr	r2, [pc, #284]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	105b      	asrs	r3, r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	793b      	ldrb	r3, [r7, #4]
 800202e:	4949      	ldr	r1, [pc, #292]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002030:	7809      	ldrb	r1, [r1, #0]
 8002032:	440b      	add	r3, r1
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	b2d0      	uxtb	r0, r2
 800203a:	4a48      	ldr	r2, [pc, #288]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 800203c:	2134      	movs	r1, #52	; 0x34
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3319      	adds	r3, #25
 8002046:	4602      	mov	r2, r0
 8002048:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + actual_services].pd_flag)
 800204a:	793b      	ldrb	r3, [r7, #4]
 800204c:	4a41      	ldr	r2, [pc, #260]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	4a42      	ldr	r2, [pc, #264]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8002054:	2134      	movs	r1, #52	; 0x34
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3318      	adds	r3, #24
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <Si468x_dab_get_digital_service_list+0x1ce>
 8002064:	2b01      	cmp	r3, #1
 8002066:	d07d      	beq.n	8002164 <Si468x_dab_get_digital_service_list+0x2c8>
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
				break;

			default:
				break;
 8002068:	e0f2      	b.n	8002250 <Si468x_dab_get_digital_service_list+0x3b4>
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 800206a:	79ba      	ldrb	r2, [r7, #6]
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	f103 020c 	add.w	r2, r3, #12
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	4a31      	ldr	r2, [pc, #196]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	4619      	mov	r1, r3
 8002084:	79ba      	ldrb	r2, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f103 020d 	add.w	r2, r3, #13
 8002092:	797b      	ldrb	r3, [r7, #5]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020a2:	4419      	add	r1, r3
 80020a4:	793b      	ldrb	r3, [r7, #4]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4608      	mov	r0, r1
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 80020b0:	2134      	movs	r1, #52	; 0x34
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	331c      	adds	r3, #28
 80020ba:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80020bc:	79ba      	ldrb	r2, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f103 020d 	add.w	r2, r3, #13
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <Si468x_dab_get_digital_service_list+0x2a8>)
 80020d2:	5cd2      	ldrb	r2, [r2, r3]
 80020d4:	793b      	ldrb	r3, [r7, #4]
 80020d6:	491f      	ldr	r1, [pc, #124]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020d8:	7809      	ldrb	r1, [r1, #0]
 80020da:	440b      	add	r3, r1
 80020dc:	0912      	lsrs	r2, r2, #4
 80020de:	b2d0      	uxtb	r0, r2
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 80020e2:	2134      	movs	r1, #52	; 0x34
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3320      	adds	r3, #32
 80020ec:	4602      	mov	r2, r0
 80020ee:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 80020f0:	793b      	ldrb	r3, [r7, #4]
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 80020fa:	2134      	movs	r1, #52	; 0x34
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3320      	adds	r3, #32
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	031b      	lsls	r3, r3, #12
 8002108:	4618      	mov	r0, r3
 800210a:	793b      	ldrb	r3, [r7, #4]
 800210c:	4a11      	ldr	r2, [pc, #68]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 8002114:	2134      	movs	r1, #52	; 0x34
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	331c      	adds	r3, #28
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	793b      	ldrb	r3, [r7, #4]
 8002122:	490c      	ldr	r1, [pc, #48]	; (8002154 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002124:	7809      	ldrb	r1, [r1, #0]
 8002126:	440b      	add	r3, r1
 8002128:	4402      	add	r2, r0
 800212a:	490c      	ldr	r1, [pc, #48]	; (800215c <Si468x_dab_get_digital_service_list+0x2c0>)
 800212c:	2034      	movs	r0, #52	; 0x34
 800212e:	fb00 f303 	mul.w	r3, r0, r3
 8002132:	440b      	add	r3, r1
 8002134:	3324      	adds	r3, #36	; 0x24
 8002136:	601a      	str	r2, [r3, #0]
				break;
 8002138:	e08a      	b.n	8002250 <Si468x_dab_get_digital_service_list+0x3b4>
 800213a:	bf00      	nop
 800213c:	20000100 	.word	0x20000100
 8002140:	20001940 	.word	0x20001940
 8002144:	20001100 	.word	0x20001100
 8002148:	0800ae58 	.word	0x0800ae58
 800214c:	20001a30 	.word	0x20001a30
 8002150:	0800a9ac 	.word	0x0800a9ac
 8002154:	20002586 	.word	0x20002586
 8002158:	20002588 	.word	0x20002588
 800215c:	20001b5c 	.word	0x20001b5c
 8002160:	2000258c 	.word	0x2000258c
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	f103 020c 	add.w	r2, r3, #12
 8002172:	797b      	ldrb	r3, [r7, #5]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	4a85      	ldr	r2, [pc, #532]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f4>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	4619      	mov	r1, r3
 800217e:	79ba      	ldrb	r2, [r7, #6]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	f103 020d 	add.w	r2, r3, #13
 800218c:	797b      	ldrb	r3, [r7, #5]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	4a7f      	ldr	r2, [pc, #508]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	4419      	add	r1, r3
 800219a:	79ba      	ldrb	r2, [r7, #6]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	f103 020e 	add.w	r2, r3, #14
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	4a78      	ldr	r2, [pc, #480]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f4>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021b8:	4419      	add	r1, r3
 80021ba:	793b      	ldrb	r3, [r7, #4]
 80021bc:	4a75      	ldr	r2, [pc, #468]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	4608      	mov	r0, r1
 80021c4:	4a74      	ldr	r2, [pc, #464]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021c6:	2134      	movs	r1, #52	; 0x34
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	331c      	adds	r3, #28
 80021d0:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80021d2:	79ba      	ldrb	r2, [r7, #6]
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	f103 020e 	add.w	r2, r3, #14
 80021e0:	797b      	ldrb	r3, [r7, #5]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	4a6a      	ldr	r2, [pc, #424]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f4>)
 80021e8:	5cd2      	ldrb	r2, [r2, r3]
 80021ea:	793b      	ldrb	r3, [r7, #4]
 80021ec:	4969      	ldr	r1, [pc, #420]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021ee:	7809      	ldrb	r1, [r1, #0]
 80021f0:	440b      	add	r3, r1
 80021f2:	0912      	lsrs	r2, r2, #4
 80021f4:	b2d0      	uxtb	r0, r2
 80021f6:	4a68      	ldr	r2, [pc, #416]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021f8:	2134      	movs	r1, #52	; 0x34
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3320      	adds	r3, #32
 8002202:	4602      	mov	r2, r0
 8002204:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 8002206:	793b      	ldrb	r3, [r7, #4]
 8002208:	4a62      	ldr	r2, [pc, #392]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	4413      	add	r3, r2
 800220e:	4a62      	ldr	r2, [pc, #392]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002210:	2134      	movs	r1, #52	; 0x34
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3320      	adds	r3, #32
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	051b      	lsls	r3, r3, #20
 800221e:	4618      	mov	r0, r3
 8002220:	793b      	ldrb	r3, [r7, #4]
 8002222:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 800222a:	2134      	movs	r1, #52	; 0x34
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	331c      	adds	r3, #28
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	793b      	ldrb	r3, [r7, #4]
 8002238:	4956      	ldr	r1, [pc, #344]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 800223a:	7809      	ldrb	r1, [r1, #0]
 800223c:	440b      	add	r3, r1
 800223e:	4402      	add	r2, r0
 8002240:	4955      	ldr	r1, [pc, #340]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002242:	2034      	movs	r0, #52	; 0x34
 8002244:	fb00 f303 	mul.w	r3, r0, r3
 8002248:	440b      	add	r3, r1
 800224a:	3324      	adds	r3, #36	; 0x24
 800224c:	601a      	str	r2, [r3, #0]
				break;
 800224e:	bf00      	nop
		}

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002250:	2300      	movs	r3, #0
 8002252:	70fb      	strb	r3, [r7, #3]
 8002254:	e038      	b.n	80022c8 <Si468x_dab_get_digital_service_list+0x42c>
		{
			services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	f103 0114 	add.w	r1, r3, #20
 800225c:	79ba      	ldrb	r2, [r7, #6]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	18ca      	adds	r2, r1, r3
 8002268:	797b      	ldrb	r3, [r7, #5]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	18d1      	adds	r1, r2, r3
 800226e:	793b      	ldrb	r3, [r7, #4]
 8002270:	4a48      	ldr	r2, [pc, #288]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	441a      	add	r2, r3
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	4845      	ldr	r0, [pc, #276]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f4>)
 800227a:	5c44      	ldrb	r4, [r0, r1]
 800227c:	4946      	ldr	r1, [pc, #280]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 800227e:	2034      	movs	r0, #52	; 0x34
 8002280:	fb00 f202 	mul.w	r2, r0, r2
 8002284:	440a      	add	r2, r1
 8002286:	4413      	add	r3, r2
 8002288:	4622      	mov	r2, r4
 800228a:	701a      	strb	r2, [r3, #0]
			if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 800228c:	793b      	ldrb	r3, [r7, #4]
 800228e:	4a41      	ldr	r2, [pc, #260]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	441a      	add	r2, r3
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	4940      	ldr	r1, [pc, #256]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002298:	2034      	movs	r0, #52	; 0x34
 800229a:	fb00 f202 	mul.w	r2, r0, r2
 800229e:	440a      	add	r2, r1
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b86      	cmp	r3, #134	; 0x86
 80022a6:	d10c      	bne.n	80022c2 <Si468x_dab_get_digital_service_list+0x426>
			{
				services_list[service_index + actual_services].name[name_index] = 0x6F;
 80022a8:	793b      	ldrb	r3, [r7, #4]
 80022aa:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	441a      	add	r2, r3
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	4939      	ldr	r1, [pc, #228]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 80022b4:	2034      	movs	r0, #52	; 0x34
 80022b6:	fb00 f202 	mul.w	r2, r0, r2
 80022ba:	440a      	add	r2, r1
 80022bc:	4413      	add	r3, r2
 80022be:	226f      	movs	r2, #111	; 0x6f
 80022c0:	701a      	strb	r2, [r3, #0]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	3301      	adds	r3, #1
 80022c6:	70fb      	strb	r3, [r7, #3]
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	d9c3      	bls.n	8002256 <Si468x_dab_get_digital_service_list+0x3ba>
			}
		}

		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	70bb      	strb	r3, [r7, #2]
 80022d2:	e032      	b.n	800233a <Si468x_dab_get_digital_service_list+0x49e>
		{
			services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80022d4:	793b      	ldrb	r3, [r7, #4]
 80022d6:	4a2f      	ldr	r2, [pc, #188]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	441a      	add	r2, r3
 80022dc:	78bb      	ldrb	r3, [r7, #2]
 80022de:	492e      	ldr	r1, [pc, #184]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 80022e0:	201a      	movs	r0, #26
 80022e2:	fb00 f202 	mul.w	r2, r0, r2
 80022e6:	4413      	add	r3, r2
 80022e8:	3314      	adds	r3, #20
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	2200      	movs	r2, #0
 80022f0:	71da      	strb	r2, [r3, #7]
			services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80022f2:	79ba      	ldrb	r2, [r7, #6]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002300:	797b      	ldrb	r3, [r7, #5]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	4a22      	ldr	r2, [pc, #136]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002308:	5cd1      	ldrb	r1, [r2, r3]
 800230a:	793b      	ldrb	r3, [r7, #4]
 800230c:	4a21      	ldr	r2, [pc, #132]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	441a      	add	r2, r3
 8002312:	78bb      	ldrb	r3, [r7, #2]
 8002314:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002318:	b2cc      	uxtb	r4, r1
 800231a:	491f      	ldr	r1, [pc, #124]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 800231c:	201a      	movs	r0, #26
 800231e:	fb00 f202 	mul.w	r2, r0, r2
 8002322:	4413      	add	r3, r2
 8002324:	3314      	adds	r3, #20
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	440b      	add	r3, r1
 800232a:	4622      	mov	r2, r4
 800232c:	719a      	strb	r2, [r3, #6]
			components_count++;
 800232e:	797b      	ldrb	r3, [r7, #5]
 8002330:	3301      	adds	r3, #1
 8002332:	717b      	strb	r3, [r7, #5]
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002334:	78bb      	ldrb	r3, [r7, #2]
 8002336:	3301      	adds	r3, #1
 8002338:	70bb      	strb	r3, [r7, #2]
 800233a:	793b      	ldrb	r3, [r7, #4]
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 800233e:	7812      	ldrb	r2, [r2, #0]
 8002340:	4413      	add	r3, r2
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002344:	2134      	movs	r1, #52	; 0x34
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	332d      	adds	r3, #45	; 0x2d
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	78ba      	ldrb	r2, [r7, #2]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3be      	bcc.n	80022d4 <Si468x_dab_get_digital_service_list+0x438>
		}
		services_count++;
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	3301      	adds	r3, #1
 800235a:	71bb      	strb	r3, [r7, #6]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 800235c:	793b      	ldrb	r3, [r7, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	713b      	strb	r3, [r7, #4]
 8002362:	793a      	ldrb	r2, [r7, #4]
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	429a      	cmp	r2, r3
 8002368:	f4ff addc 	bcc.w	8001f24 <Si468x_dab_get_digital_service_list+0x88>
	}

	total_services += number_of_services;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <Si468x_dab_get_digital_service_list+0x500>)
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	4413      	add	r3, r2
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <Si468x_dab_get_digital_service_list+0x500>)
 8002378:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4413      	add	r3, r2
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002386:	701a      	strb	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	20001100 	.word	0x20001100
 8002394:	20002586 	.word	0x20002586
 8002398:	20001b5c 	.word	0x20001b5c
 800239c:	20002584 	.word	0x20002584

080023a0 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 80023aa:	2101      	movs	r1, #1
 80023ac:	482d      	ldr	r0, [pc, #180]	; (8002464 <Si468x_dab_start_digital_service+0xc4>)
 80023ae:	f000 fe6f 	bl	8003090 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023b4:	2281      	movs	r2, #129	; 0x81
 80023b6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023d0:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023da:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023e4:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0e1b      	lsrs	r3, r3, #24
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023ee:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 80023f6:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 8002400:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 800240a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	0e1b      	lsrs	r3, r3, #24
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 8002414:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002416:	4914      	ldr	r1, [pc, #80]	; (8002468 <Si468x_dab_start_digital_service+0xc8>)
 8002418:	200c      	movs	r0, #12
 800241a:	f7ff f93d 	bl	8001698 <Si468x_write_command>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <Si468x_dab_start_digital_service+0xcc>)
 8002424:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002426:	2001      	movs	r0, #1
 8002428:	f002 ff80 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800242c:	4910      	ldr	r1, [pc, #64]	; (8002470 <Si468x_dab_start_digital_service+0xd0>)
 800242e:	2005      	movs	r0, #5
 8002430:	f7ff f954 	bl	80016dc <Si468x_read_reply>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <Si468x_dab_start_digital_service+0xcc>)
 800243a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <Si468x_dab_start_digital_service+0xd4>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800244a:	2101      	movs	r1, #1
 800244c:	480a      	ldr	r0, [pc, #40]	; (8002478 <Si468x_dab_start_digital_service+0xd8>)
 800244e:	f000 fe1f 	bl	8003090 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8002452:	e003      	b.n	800245c <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002454:	2101      	movs	r1, #1
 8002456:	4809      	ldr	r0, [pc, #36]	; (800247c <Si468x_dab_start_digital_service+0xdc>)
 8002458:	f000 fe1a 	bl	8003090 <send_debug_msg>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	0800ae94 	.word	0x0800ae94
 8002468:	20000100 	.word	0x20000100
 800246c:	20001940 	.word	0x20001940
 8002470:	20001100 	.word	0x20001100
 8002474:	20001a30 	.word	0x20001a30
 8002478:	0800a9ac 	.word	0x0800a9ac
 800247c:	0800aed0 	.word	0x0800aed0

08002480 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800248a:	2101      	movs	r1, #1
 800248c:	4851      	ldr	r0, [pc, #324]	; (80025d4 <Si468x_dab_get_ensemble_info+0x154>)
 800248e:	f000 fdff 	bl	8003090 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <Si468x_dab_get_ensemble_info+0x158>)
 8002494:	22b4      	movs	r2, #180	; 0xb4
 8002496:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002498:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <Si468x_dab_get_ensemble_info+0x158>)
 800249a:	2200      	movs	r2, #0
 800249c:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800249e:	494e      	ldr	r1, [pc, #312]	; (80025d8 <Si468x_dab_get_ensemble_info+0x158>)
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7ff f8f9 	bl	8001698 <Si468x_write_command>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <Si468x_dab_get_ensemble_info+0x15c>)
 80024ac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80024ae:	2002      	movs	r0, #2
 80024b0:	f002 ff3c 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80024b4:	494a      	ldr	r1, [pc, #296]	; (80025e0 <Si468x_dab_get_ensemble_info+0x160>)
 80024b6:	2015      	movs	r0, #21
 80024b8:	f7ff f910 	bl	80016dc <Si468x_read_reply>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <Si468x_dab_get_ensemble_info+0x15c>)
 80024c2:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 80024c4:	e012      	b.n	80024ec <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80024c6:	4944      	ldr	r1, [pc, #272]	; (80025d8 <Si468x_dab_get_ensemble_info+0x158>)
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff f8e5 	bl	8001698 <Si468x_write_command>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b42      	ldr	r3, [pc, #264]	; (80025dc <Si468x_dab_get_ensemble_info+0x15c>)
 80024d4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80024d6:	2002      	movs	r0, #2
 80024d8:	f002 ff28 	bl	800532c <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80024dc:	4940      	ldr	r1, [pc, #256]	; (80025e0 <Si468x_dab_get_ensemble_info+0x160>)
 80024de:	2015      	movs	r0, #21
 80024e0:	f7ff f8fc 	bl	80016dc <Si468x_read_reply>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <Si468x_dab_get_ensemble_info+0x15c>)
 80024ea:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80024ec:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <Si468x_dab_get_ensemble_info+0x160>)
 80024ee:	799b      	ldrb	r3, [r3, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0e8      	beq.n	80024c6 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <Si468x_dab_get_ensemble_info+0x164>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002502:	2101      	movs	r1, #1
 8002504:	4838      	ldr	r0, [pc, #224]	; (80025e8 <Si468x_dab_get_ensemble_info+0x168>)
 8002506:	f000 fdc3 	bl	8003090 <send_debug_msg>
		return 0;
 800250a:	2300      	movs	r3, #0
 800250c:	e05d      	b.n	80025ca <Si468x_dab_get_ensemble_info+0x14a>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <Si468x_dab_get_ensemble_info+0x160>)
 8002510:	795b      	ldrb	r3, [r3, #5]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <Si468x_dab_get_ensemble_info+0x160>)
 8002516:	7912      	ldrb	r2, [r2, #4]
 8002518:	4413      	add	r3, r2
 800251a:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d04e      	beq.n	80025c0 <Si468x_dab_get_ensemble_info+0x140>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 8002522:	2101      	movs	r1, #1
 8002524:	4831      	ldr	r0, [pc, #196]	; (80025ec <Si468x_dab_get_ensemble_info+0x16c>)
 8002526:	f000 fdb3 	bl	8003090 <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <Si468x_dab_get_ensemble_info+0x170>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b298      	uxth	r0, r3
 8002534:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <Si468x_dab_get_ensemble_info+0x174>)
 8002536:	460b      	mov	r3, r1
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	1a5b      	subs	r3, r3, r1
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	4602      	mov	r2, r0
 8002542:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <Si468x_dab_get_ensemble_info+0x170>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <Si468x_dab_get_ensemble_info+0x178>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4929      	ldr	r1, [pc, #164]	; (80025f4 <Si468x_dab_get_ensemble_info+0x174>)
 8002550:	4603      	mov	r3, r0
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a1b      	subs	r3, r3, r0
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3314      	adds	r3, #20
 800255c:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <Si468x_dab_get_ensemble_info+0x170>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <Si468x_dab_get_ensemble_info+0x17c>)
 8002566:	7818      	ldrb	r0, [r3, #0]
 8002568:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <Si468x_dab_get_ensemble_info+0x174>)
 800256a:	460b      	mov	r3, r1
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	3318      	adds	r3, #24
 8002576:	4602      	mov	r2, r0
 8002578:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	71fb      	strb	r3, [r7, #7]
 800257e:	e014      	b.n	80025aa <Si468x_dab_get_ensemble_info+0x12a>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	3306      	adds	r3, #6
 8002584:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <Si468x_dab_get_ensemble_info+0x170>)
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	4610      	mov	r0, r2
 800258a:	79fa      	ldrb	r2, [r7, #7]
 800258c:	4914      	ldr	r1, [pc, #80]	; (80025e0 <Si468x_dab_get_ensemble_info+0x160>)
 800258e:	5ccc      	ldrb	r4, [r1, r3]
 8002590:	4918      	ldr	r1, [pc, #96]	; (80025f4 <Si468x_dab_get_ensemble_info+0x174>)
 8002592:	4603      	mov	r3, r0
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a1b      	subs	r3, r3, r0
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	4413      	add	r3, r2
 800259e:	3302      	adds	r3, #2
 80025a0:	4622      	mov	r2, r4
 80025a2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	3301      	adds	r3, #1
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d9e7      	bls.n	8002580 <Si468x_dab_get_ensemble_info+0x100>
			}

			total_ensembles++;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <Si468x_dab_get_ensemble_info+0x170>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <Si468x_dab_get_ensemble_info+0x170>)
 80025ba:	701a      	strb	r2, [r3, #0]
			return 1;
 80025bc:	2301      	movs	r3, #1
 80025be:	e004      	b.n	80025ca <Si468x_dab_get_ensemble_info+0x14a>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 80025c0:	2101      	movs	r1, #1
 80025c2:	480f      	ldr	r0, [pc, #60]	; (8002600 <Si468x_dab_get_ensemble_info+0x180>)
 80025c4:	f000 fd64 	bl	8003090 <send_debug_msg>
			return 0;
 80025c8:	2300      	movs	r3, #0
		}
	}
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	0800aef0 	.word	0x0800aef0
 80025d8:	20000100 	.word	0x20000100
 80025dc:	20001940 	.word	0x20001940
 80025e0:	20001100 	.word	0x20001100
 80025e4:	20001a30 	.word	0x20001a30
 80025e8:	0800a9ac 	.word	0x0800a9ac
 80025ec:	0800af2c 	.word	0x0800af2c
 80025f0:	20002585 	.word	0x20002585
 80025f4:	20001a44 	.word	0x20001a44
 80025f8:	20002588 	.word	0x20002588
 80025fc:	2000258c 	.word	0x2000258c
 8002600:	0800af3c 	.word	0x0800af3c

08002604 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 800260a:	2101      	movs	r1, #1
 800260c:	48ae      	ldr	r0, [pc, #696]	; (80028c8 <Si468x_dab_full_scan+0x2c4>)
 800260e:	f000 fd3f 	bl	8003090 <send_debug_msg>
	total_services = 0;
 8002612:	4bae      	ldr	r3, [pc, #696]	; (80028cc <Si468x_dab_full_scan+0x2c8>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 8002618:	4bad      	ldr	r3, [pc, #692]	; (80028d0 <Si468x_dab_full_scan+0x2cc>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 800261e:	4bad      	ldr	r3, [pc, #692]	; (80028d4 <Si468x_dab_full_scan+0x2d0>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]

	uint8_t valid_timeout = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	71fb      	strb	r3, [r7, #7]
	uint8_t fic_q_timeout = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	71bb      	strb	r3, [r7, #6]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 800262c:	2300      	movs	r3, #0
 800262e:	717b      	strb	r3, [r7, #5]
 8002630:	e060      	b.n	80026f4 <Si468x_dab_full_scan+0xf0>
	{
//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 8002632:	2304      	movs	r3, #4
 8002634:	71fb      	strb	r3, [r7, #7]
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002636:	2364      	movs	r3, #100	; 0x64
 8002638:	71bb      	strb	r3, [r7, #6]

		Si468x_dab_tune_freq(freq_index, 0);
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fb22 	bl	8001c88 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002644:	f7ff fbda 	bl	8001dfc <Si468x_dab_digrad_status>
			valid_timeout--;
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	3b01      	subs	r3, #1
 800264c:	71fb      	strb	r3, [r7, #7]
			if(!valid_timeout)
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <Si468x_dab_full_scan+0x5a>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002654:	2101      	movs	r1, #1
 8002656:	48a0      	ldr	r0, [pc, #640]	; (80028d8 <Si468x_dab_full_scan+0x2d4>)
 8002658:	f000 fd1a 	bl	8003090 <send_debug_msg>
				break;
 800265c:	e010      	b.n	8002680 <Si468x_dab_full_scan+0x7c>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800265e:	2032      	movs	r0, #50	; 0x32
 8002660:	f002 fe64 	bl	800532c <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002664:	4b9d      	ldr	r3, [pc, #628]	; (80028dc <Si468x_dab_full_scan+0x2d8>)
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0e8      	beq.n	8002644 <Si468x_dab_full_scan+0x40>
 8002672:	4b9a      	ldr	r3, [pc, #616]	; (80028dc <Si468x_dab_full_scan+0x2d8>)
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0e1      	beq.n	8002644 <Si468x_dab_full_scan+0x40>

		if(valid_timeout)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d013      	beq.n	80026ae <Si468x_dab_full_scan+0xaa>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002686:	f7ff fbb9 	bl	8001dfc <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	3b01      	subs	r3, #1
 800268e:	71bb      	strb	r3, [r7, #6]
				if(!fic_q_timeout)
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <Si468x_dab_full_scan+0x9c>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002696:	2101      	movs	r1, #1
 8002698:	488f      	ldr	r0, [pc, #572]	; (80028d8 <Si468x_dab_full_scan+0x2d4>)
 800269a:	f000 fcf9 	bl	8003090 <send_debug_msg>
					break;
 800269e:	e006      	b.n	80026ae <Si468x_dab_full_scan+0xaa>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80026a0:	2032      	movs	r0, #50	; 0x32
 80026a2:	f002 fe43 	bl	800532c <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 80026a6:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <Si468x_dab_full_scan+0x2d8>)
 80026a8:	791b      	ldrb	r3, [r3, #4]
 80026aa:	2b31      	cmp	r3, #49	; 0x31
 80026ac:	d9eb      	bls.n	8002686 <Si468x_dab_full_scan+0x82>
		}

		if(valid_timeout && fic_q_timeout)
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01c      	beq.n	80026ee <Si468x_dab_full_scan+0xea>
 80026b4:	79bb      	ldrb	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <Si468x_dab_full_scan+0xea>
		{
			do
			{
				Si468x_dab_get_event_status();
 80026ba:	f000 fb1f 	bl	8002cfc <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80026be:	200a      	movs	r0, #10
 80026c0:	f002 fe34 	bl	800532c <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <Si468x_dab_full_scan+0x2dc>)
 80026c6:	785b      	ldrb	r3, [r3, #1]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f3      	beq.n	80026ba <Si468x_dab_full_scan+0xb6>
 80026d2:	4b83      	ldr	r3, [pc, #524]	; (80028e0 <Si468x_dab_full_scan+0x2dc>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ec      	bne.n	80026ba <Si468x_dab_full_scan+0xb6>

			if(Si468x_dab_get_ensemble_info())
 80026e0:	f7ff fece 	bl	8002480 <Si468x_dab_get_ensemble_info>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <Si468x_dab_full_scan+0xea>
			{
				Si468x_dab_get_digital_service_list();
 80026ea:	f7ff fbd7 	bl	8001e9c <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 80026ee:	797b      	ldrb	r3, [r7, #5]
 80026f0:	3301      	adds	r3, #1
 80026f2:	717b      	strb	r3, [r7, #5]
 80026f4:	4b7b      	ldr	r3, [pc, #492]	; (80028e4 <Si468x_dab_full_scan+0x2e0>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	797a      	ldrb	r2, [r7, #5]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d399      	bcc.n	8002632 <Si468x_dab_full_scan+0x2e>
			}
		}
	}

	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80026fe:	2100      	movs	r1, #0
 8002700:	4879      	ldr	r0, [pc, #484]	; (80028e8 <Si468x_dab_full_scan+0x2e4>)
 8002702:	f000 fcc5 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <Si468x_dab_full_scan+0x2cc>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	220a      	movs	r2, #10
 800270c:	4977      	ldr	r1, [pc, #476]	; (80028ec <Si468x_dab_full_scan+0x2e8>)
 800270e:	4618      	mov	r0, r3
 8002710:	f007 ff88 	bl	800a624 <itoa>
 8002714:	4603      	mov	r3, r0
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fcb9 	bl	8003090 <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800271e:	2101      	movs	r1, #1
 8002720:	4873      	ldr	r0, [pc, #460]	; (80028f0 <Si468x_dab_full_scan+0x2ec>)
 8002722:	f000 fcb5 	bl	8003090 <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 8002726:	2100      	movs	r1, #0
 8002728:	4872      	ldr	r0, [pc, #456]	; (80028f4 <Si468x_dab_full_scan+0x2f0>)
 800272a:	f000 fcb1 	bl	8003090 <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800272e:	2100      	movs	r1, #0
 8002730:	4871      	ldr	r0, [pc, #452]	; (80028f8 <Si468x_dab_full_scan+0x2f4>)
 8002732:	f000 fcad 	bl	8003090 <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002736:	2100      	movs	r1, #0
 8002738:	4870      	ldr	r0, [pc, #448]	; (80028fc <Si468x_dab_full_scan+0x2f8>)
 800273a:	f000 fca9 	bl	8003090 <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 800273e:	2101      	movs	r1, #1
 8002740:	486f      	ldr	r0, [pc, #444]	; (8002900 <Si468x_dab_full_scan+0x2fc>)
 8002742:	f000 fca5 	bl	8003090 <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002746:	2300      	movs	r3, #0
 8002748:	713b      	strb	r3, [r7, #4]
 800274a:	e060      	b.n	800280e <Si468x_dab_full_scan+0x20a>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 800274c:	2100      	movs	r1, #0
 800274e:	486d      	ldr	r0, [pc, #436]	; (8002904 <Si468x_dab_full_scan+0x300>)
 8002750:	f000 fc9e 	bl	8003090 <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002754:	793b      	ldrb	r3, [r7, #4]
 8002756:	220a      	movs	r2, #10
 8002758:	4964      	ldr	r1, [pc, #400]	; (80028ec <Si468x_dab_full_scan+0x2e8>)
 800275a:	4618      	mov	r0, r3
 800275c:	f007 ff62 	bl	800a624 <itoa>
 8002760:	4603      	mov	r3, r0
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fc93 	bl	8003090 <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 800276a:	2100      	movs	r1, #0
 800276c:	4866      	ldr	r0, [pc, #408]	; (8002908 <Si468x_dab_full_scan+0x304>)
 800276e:	f000 fc8f 	bl	8003090 <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8002772:	793a      	ldrb	r2, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4a63      	ldr	r2, [pc, #396]	; (800290c <Si468x_dab_full_scan+0x308>)
 800277e:	4413      	add	r3, r2
 8002780:	3302      	adds	r3, #2
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fc83 	bl	8003090 <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 800278a:	2100      	movs	r1, #0
 800278c:	485d      	ldr	r0, [pc, #372]	; (8002904 <Si468x_dab_full_scan+0x300>)
 800278e:	f000 fc7f 	bl	8003090 <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002792:	793a      	ldrb	r2, [r7, #4]
 8002794:	495d      	ldr	r1, [pc, #372]	; (800290c <Si468x_dab_full_scan+0x308>)
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3314      	adds	r3, #20
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	220a      	movs	r2, #10
 80027a6:	4951      	ldr	r1, [pc, #324]	; (80028ec <Si468x_dab_full_scan+0x2e8>)
 80027a8:	4618      	mov	r0, r3
 80027aa:	f007 ff3b 	bl	800a624 <itoa>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fc6c 	bl	8003090 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80027b8:	2100      	movs	r1, #0
 80027ba:	4855      	ldr	r0, [pc, #340]	; (8002910 <Si468x_dab_full_scan+0x30c>)
 80027bc:	f000 fc68 	bl	8003090 <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80027c0:	793a      	ldrb	r2, [r7, #4]
 80027c2:	4952      	ldr	r1, [pc, #328]	; (800290c <Si468x_dab_full_scan+0x308>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3318      	adds	r3, #24
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <Si468x_dab_full_scan+0x310>)
 80027d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fc57 	bl	8003090 <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 80027e2:	793a      	ldrb	r2, [r7, #4]
 80027e4:	4949      	ldr	r1, [pc, #292]	; (800290c <Si468x_dab_full_scan+0x308>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3318      	adds	r3, #24
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b13      	cmp	r3, #19
 80027f6:	d803      	bhi.n	8002800 <Si468x_dab_full_scan+0x1fc>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80027f8:	2100      	movs	r1, #0
 80027fa:	4847      	ldr	r0, [pc, #284]	; (8002918 <Si468x_dab_full_scan+0x314>)
 80027fc:	f000 fc48 	bl	8003090 <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 8002800:	2101      	movs	r1, #1
 8002802:	4846      	ldr	r0, [pc, #280]	; (800291c <Si468x_dab_full_scan+0x318>)
 8002804:	f000 fc44 	bl	8003090 <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002808:	793b      	ldrb	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	713b      	strb	r3, [r7, #4]
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <Si468x_dab_full_scan+0x2cc>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	793a      	ldrb	r2, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d399      	bcc.n	800274c <Si468x_dab_full_scan+0x148>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002818:	2101      	movs	r1, #1
 800281a:	4835      	ldr	r0, [pc, #212]	; (80028f0 <Si468x_dab_full_scan+0x2ec>)
 800281c:	f000 fc38 	bl	8003090 <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 8002820:	2100      	movs	r1, #0
 8002822:	483f      	ldr	r0, [pc, #252]	; (8002920 <Si468x_dab_full_scan+0x31c>)
 8002824:	f000 fc34 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <Si468x_dab_full_scan+0x2c8>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	220a      	movs	r2, #10
 800282e:	492f      	ldr	r1, [pc, #188]	; (80028ec <Si468x_dab_full_scan+0x2e8>)
 8002830:	4618      	mov	r0, r3
 8002832:	f007 fef7 	bl	800a624 <itoa>
 8002836:	4603      	mov	r3, r0
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fc28 	bl	8003090 <send_debug_msg>

	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002840:	2101      	movs	r1, #1
 8002842:	4838      	ldr	r0, [pc, #224]	; (8002924 <Si468x_dab_full_scan+0x320>)
 8002844:	f000 fc24 	bl	8003090 <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8002848:	2101      	movs	r1, #1
 800284a:	4837      	ldr	r0, [pc, #220]	; (8002928 <Si468x_dab_full_scan+0x324>)
 800284c:	f000 fc20 	bl	8003090 <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002850:	2300      	movs	r3, #0
 8002852:	70fb      	strb	r3, [r7, #3]
 8002854:	e131      	b.n	8002aba <Si468x_dab_full_scan+0x4b6>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 8002856:	2100      	movs	r1, #0
 8002858:	482a      	ldr	r0, [pc, #168]	; (8002904 <Si468x_dab_full_scan+0x300>)
 800285a:	f000 fc19 	bl	8003090 <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	220a      	movs	r2, #10
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <Si468x_dab_full_scan+0x2e8>)
 8002864:	4618      	mov	r0, r3
 8002866:	f007 fedd 	bl	800a624 <itoa>
 800286a:	4603      	mov	r3, r0
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fc0e 	bl	8003090 <send_debug_msg>
		if(services_index < 10)
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	2b09      	cmp	r3, #9
 8002878:	d803      	bhi.n	8002882 <Si468x_dab_full_scan+0x27e>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 800287a:	2100      	movs	r1, #0
 800287c:	4826      	ldr	r0, [pc, #152]	; (8002918 <Si468x_dab_full_scan+0x314>)
 800287e:	f000 fc07 	bl	8003090 <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002882:	2100      	movs	r1, #0
 8002884:	4829      	ldr	r0, [pc, #164]	; (800292c <Si468x_dab_full_scan+0x328>)
 8002886:	f000 fc03 	bl	8003090 <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	4a28      	ldr	r2, [pc, #160]	; (8002930 <Si468x_dab_full_scan+0x32c>)
 800288e:	2134      	movs	r1, #52	; 0x34
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <Si468x_dab_full_scan+0x2ae>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	2234      	movs	r2, #52	; 0x34
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <Si468x_dab_full_scan+0x32c>)
 80028a6:	4413      	add	r3, r2
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fbf0 	bl	8003090 <send_debug_msg>
 80028b0:	e003      	b.n	80028ba <Si468x_dab_full_scan+0x2b6>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 80028b2:	2100      	movs	r1, #0
 80028b4:	481f      	ldr	r0, [pc, #124]	; (8002934 <Si468x_dab_full_scan+0x330>)
 80028b6:	f000 fbeb 	bl	8003090 <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 80028ba:	2100      	movs	r1, #0
 80028bc:	481e      	ldr	r0, [pc, #120]	; (8002938 <Si468x_dab_full_scan+0x334>)
 80028be:	f000 fbe7 	bl	8003090 <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	70bb      	strb	r3, [r7, #2]
 80028c6:	e05c      	b.n	8002982 <Si468x_dab_full_scan+0x37e>
 80028c8:	0800af50 	.word	0x0800af50
 80028cc:	20002584 	.word	0x20002584
 80028d0:	20002585 	.word	0x20002585
 80028d4:	20002586 	.word	0x20002586
 80028d8:	0800af3c 	.word	0x0800af3c
 80028dc:	20001a08 	.word	0x20001a08
 80028e0:	20001a34 	.word	0x20001a34
 80028e4:	20001a04 	.word	0x20001a04
 80028e8:	0800af8c 	.word	0x0800af8c
 80028ec:	20001900 	.word	0x20001900
 80028f0:	0800afa0 	.word	0x0800afa0
 80028f4:	0800afd4 	.word	0x0800afd4
 80028f8:	0800afe0 	.word	0x0800afe0
 80028fc:	0800aff4 	.word	0x0800aff4
 8002900:	0800b004 	.word	0x0800b004
 8002904:	0800b014 	.word	0x0800b014
 8002908:	0800b018 	.word	0x0800b018
 800290c:	20001a44 	.word	0x20001a44
 8002910:	0800b024 	.word	0x0800b024
 8002914:	20000008 	.word	0x20000008
 8002918:	0800b02c 	.word	0x0800b02c
 800291c:	0800b030 	.word	0x0800b030
 8002920:	0800b034 	.word	0x0800b034
 8002924:	0800b048 	.word	0x0800b048
 8002928:	0800b0b4 	.word	0x0800b0b4
 800292c:	0800b120 	.word	0x0800b120
 8002930:	20001b5c 	.word	0x20001b5c
 8002934:	0800b128 	.word	0x0800b128
 8002938:	0800b13c 	.word	0x0800b13c
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800293c:	78ba      	ldrb	r2, [r7, #2]
 800293e:	4966      	ldr	r1, [pc, #408]	; (8002ad8 <Si468x_dab_full_scan+0x4d4>)
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3318      	adds	r3, #24
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	4962      	ldr	r1, [pc, #392]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 8002952:	2034      	movs	r0, #52	; 0x34
 8002954:	fb00 f303 	mul.w	r3, r0, r3
 8002958:	440b      	add	r3, r1
 800295a:	332c      	adds	r3, #44	; 0x2c
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d10c      	bne.n	800297c <Si468x_dab_full_scan+0x378>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4a5a      	ldr	r2, [pc, #360]	; (8002ad8 <Si468x_dab_full_scan+0x4d4>)
 800296e:	4413      	add	r3, r2
 8002970:	3302      	adds	r3, #2
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fb8b 	bl	8003090 <send_debug_msg>
				break;
 800297a:	e007      	b.n	800298c <Si468x_dab_full_scan+0x388>
		for(uint8_t i = 0; i < total_ensembles; i++)
 800297c:	78bb      	ldrb	r3, [r7, #2]
 800297e:	3301      	adds	r3, #1
 8002980:	70bb      	strb	r3, [r7, #2]
 8002982:	4b57      	ldr	r3, [pc, #348]	; (8002ae0 <Si468x_dab_full_scan+0x4dc>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	78ba      	ldrb	r2, [r7, #2]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3d7      	bcc.n	800293c <Si468x_dab_full_scan+0x338>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 800298c:	2100      	movs	r1, #0
 800298e:	4855      	ldr	r0, [pc, #340]	; (8002ae4 <Si468x_dab_full_scan+0x4e0>)
 8002990:	f000 fb7e 	bl	8003090 <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	4a51      	ldr	r2, [pc, #324]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 8002998:	2134      	movs	r1, #52	; 0x34
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3328      	adds	r3, #40	; 0x28
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	220a      	movs	r2, #10
 80029a6:	4950      	ldr	r1, [pc, #320]	; (8002ae8 <Si468x_dab_full_scan+0x4e4>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f007 fe3b 	bl	800a624 <itoa>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fb6c 	bl	8003090 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80029b8:	2100      	movs	r1, #0
 80029ba:	484c      	ldr	r0, [pc, #304]	; (8002aec <Si468x_dab_full_scan+0x4e8>)
 80029bc:	f000 fb68 	bl	8003090 <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	4a46      	ldr	r2, [pc, #280]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 80029c4:	2134      	movs	r1, #52	; 0x34
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	332c      	adds	r3, #44	; 0x2c
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <Si468x_dab_full_scan+0x4ec>)
 80029d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fb58 	bl	8003090 <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	4a3e      	ldr	r2, [pc, #248]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 80029e4:	2134      	movs	r1, #52	; 0x34
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	332c      	adds	r3, #44	; 0x2c
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b13      	cmp	r3, #19
 80029f2:	d803      	bhi.n	80029fc <Si468x_dab_full_scan+0x3f8>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80029f4:	2100      	movs	r1, #0
 80029f6:	483f      	ldr	r0, [pc, #252]	; (8002af4 <Si468x_dab_full_scan+0x4f0>)
 80029f8:	f000 fb4a 	bl	8003090 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 80029fc:	2100      	movs	r1, #0
 80029fe:	483e      	ldr	r0, [pc, #248]	; (8002af8 <Si468x_dab_full_scan+0x4f4>)
 8002a00:	f000 fb46 	bl	8003090 <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	4a35      	ldr	r2, [pc, #212]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 8002a08:	2134      	movs	r1, #52	; 0x34
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3319      	adds	r3, #25
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	220a      	movs	r2, #10
 8002a16:	4934      	ldr	r1, [pc, #208]	; (8002ae8 <Si468x_dab_full_scan+0x4e4>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f007 fe03 	bl	800a624 <itoa>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fb34 	bl	8003090 <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 8002a2c:	2134      	movs	r1, #52	; 0x34
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3319      	adds	r3, #25
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d803      	bhi.n	8002a44 <Si468x_dab_full_scan+0x440>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	482d      	ldr	r0, [pc, #180]	; (8002af4 <Si468x_dab_full_scan+0x4f0>)
 8002a40:	f000 fb26 	bl	8003090 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a44:	2100      	movs	r1, #0
 8002a46:	482c      	ldr	r0, [pc, #176]	; (8002af8 <Si468x_dab_full_scan+0x4f4>)
 8002a48:	f000 fb22 	bl	8003090 <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	482b      	ldr	r0, [pc, #172]	; (8002afc <Si468x_dab_full_scan+0x4f8>)
 8002a50:	f000 fb1e 	bl	8003090 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 8002a58:	2134      	movs	r1, #52	; 0x34
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3324      	adds	r3, #36	; 0x24
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2210      	movs	r2, #16
 8002a66:	4920      	ldr	r1, [pc, #128]	; (8002ae8 <Si468x_dab_full_scan+0x4e4>)
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f007 fddb 	bl	800a624 <itoa>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fb0c 	bl	8003090 <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4821      	ldr	r0, [pc, #132]	; (8002b00 <Si468x_dab_full_scan+0x4fc>)
 8002a7c:	f000 fb08 	bl	8003090 <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a80:	2100      	movs	r1, #0
 8002a82:	481e      	ldr	r0, [pc, #120]	; (8002afc <Si468x_dab_full_scan+0x4f8>)
 8002a84:	f000 fb04 	bl	8003090 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	4a14      	ldr	r2, [pc, #80]	; (8002adc <Si468x_dab_full_scan+0x4d8>)
 8002a8c:	2134      	movs	r1, #52	; 0x34
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	332e      	adds	r3, #46	; 0x2e
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4913      	ldr	r1, [pc, #76]	; (8002ae8 <Si468x_dab_full_scan+0x4e4>)
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f007 fdc1 	bl	800a624 <itoa>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 faf2 	bl	8003090 <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 8002aac:	2101      	movs	r1, #1
 8002aae:	4815      	ldr	r0, [pc, #84]	; (8002b04 <Si468x_dab_full_scan+0x500>)
 8002ab0:	f000 faee 	bl	8003090 <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	70fb      	strb	r3, [r7, #3]
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <Si468x_dab_full_scan+0x504>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f4ff aec8 	bcc.w	8002856 <Si468x_dab_full_scan+0x252>
	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4810      	ldr	r0, [pc, #64]	; (8002b0c <Si468x_dab_full_scan+0x508>)
 8002aca:	f000 fae1 	bl	8003090 <send_debug_msg>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20001a44 	.word	0x20001a44
 8002adc:	20001b5c 	.word	0x20001b5c
 8002ae0:	20002585 	.word	0x20002585
 8002ae4:	0800b13c 	.word	0x0800b13c
 8002ae8:	20001900 	.word	0x20001900
 8002aec:	0800b024 	.word	0x0800b024
 8002af0:	20000008 	.word	0x20000008
 8002af4:	0800b02c 	.word	0x0800b02c
 8002af8:	0800b140 	.word	0x0800b140
 8002afc:	0800b148 	.word	0x0800b148
 8002b00:	0800b120 	.word	0x0800b120
 8002b04:	0800b14c 	.word	0x0800b14c
 8002b08:	20002584 	.word	0x20002584
 8002b0c:	0800b048 	.word	0x0800b048

08002b10 <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af06      	add	r7, sp, #24
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b16:	2101      	movs	r1, #1
 8002b18:	486c      	ldr	r0, [pc, #432]	; (8002ccc <Si468x_dab_get_audio_info+0x1bc>)
 8002b1a:	f000 fab9 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <Si468x_dab_get_audio_info+0x1c0>)
 8002b20:	22bd      	movs	r2, #189	; 0xbd
 8002b22:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <Si468x_dab_get_audio_info+0x1c0>)
 8002b26:	2203      	movs	r2, #3
 8002b28:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b2a:	4969      	ldr	r1, [pc, #420]	; (8002cd0 <Si468x_dab_get_audio_info+0x1c0>)
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f7fe fdb3 	bl	8001698 <Si468x_write_command>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c4>)
 8002b38:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f002 fbf6 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b40:	4965      	ldr	r1, [pc, #404]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b42:	2014      	movs	r0, #20
 8002b44:	f7fe fdca 	bl	80016dc <Si468x_read_reply>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c4>)
 8002b4e:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b52:	795b      	ldrb	r3, [r3, #5]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002b64:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b66:	79db      	ldrb	r3, [r3, #7]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b70:	799b      	ldrb	r3, [r3, #6]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b7a:	7a1b      	ldrb	r3, [r3, #8]
 8002b7c:	111b      	asrs	r3, r3, #4
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8002b86:	4b54      	ldr	r3, [pc, #336]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b88:	7a1b      	ldrb	r3, [r3, #8]
 8002b8a:	10db      	asrs	r3, r3, #3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002b96:	7a1b      	ldrb	r3, [r3, #8]
 8002b98:	109b      	asrs	r3, r3, #2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002ba4:	7a1b      	ldrb	r3, [r3, #8]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	703b      	strb	r3, [r7, #0]

	dab_digrad_status.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8002bac:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002bae:	7b1b      	ldrb	r3, [r3, #12]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002bb4:	7b5b      	ldrb	r3, [r3, #13]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	441a      	add	r2, r3
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002bbc:	7b9b      	ldrb	r3, [r3, #14]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	441a      	add	r2, r3
 8002bc2:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002bc4:	7bdb      	ldrb	r3, [r3, #15]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	4413      	add	r3, r2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <Si468x_dab_get_audio_info+0x1cc>)
 8002bce:	621a      	str	r2, [r3, #32]
	dab_digrad_status.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002bd2:	7c1b      	ldrb	r3, [r3, #16]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002bd8:	7c5b      	ldrb	r3, [r3, #17]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	441a      	add	r2, r3
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002be0:	7c9b      	ldrb	r3, [r3, #18]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	441a      	add	r2, r3
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <Si468x_dab_get_audio_info+0x1c8>)
 8002be8:	7cdb      	ldrb	r3, [r3, #19]
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	4413      	add	r3, r2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <Si468x_dab_get_audio_info+0x1cc>)
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

	Display_dab_digrad_status_data(dab_digrad_status);
 8002bf4:	4e39      	ldr	r6, [pc, #228]	; (8002cdc <Si468x_dab_get_audio_info+0x1cc>)
 8002bf6:	466d      	mov	r5, sp
 8002bf8:	f106 0410 	add.w	r4, r6, #16
 8002bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c0c:	f000 fc10 	bl	8003430 <Display_dab_digrad_status_data>

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002c10:	2100      	movs	r1, #0
 8002c12:	4833      	ldr	r0, [pc, #204]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d0>)
 8002c14:	f000 fa3c 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	220a      	movs	r2, #10
 8002c1c:	4931      	ldr	r1, [pc, #196]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d4>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f007 fd00 	bl	800a624 <itoa>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fa31 	bl	8003090 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002c2e:	2100      	movs	r1, #0
 8002c30:	482d      	ldr	r0, [pc, #180]	; (8002ce8 <Si468x_dab_get_audio_info+0x1d8>)
 8002c32:	f000 fa2d 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002c36:	88bb      	ldrh	r3, [r7, #4]
 8002c38:	220a      	movs	r2, #10
 8002c3a:	492a      	ldr	r1, [pc, #168]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d4>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f007 fcf1 	bl	800a624 <itoa>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fa22 	bl	8003090 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4827      	ldr	r0, [pc, #156]	; (8002cec <Si468x_dab_get_audio_info+0x1dc>)
 8002c50:	f000 fa1e 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	220a      	movs	r2, #10
 8002c58:	4922      	ldr	r1, [pc, #136]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d4>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f007 fce2 	bl	800a624 <itoa>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa13 	bl	8003090 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4820      	ldr	r0, [pc, #128]	; (8002cf0 <Si468x_dab_get_audio_info+0x1e0>)
 8002c6e:	f000 fa0f 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002c72:	78bb      	ldrb	r3, [r7, #2]
 8002c74:	220a      	movs	r2, #10
 8002c76:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d4>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f007 fcd3 	bl	800a624 <itoa>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa04 	bl	8003090 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	481a      	ldr	r0, [pc, #104]	; (8002cf4 <Si468x_dab_get_audio_info+0x1e4>)
 8002c8c:	f000 fa00 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	220a      	movs	r2, #10
 8002c94:	4913      	ldr	r1, [pc, #76]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d4>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f007 fcc4 	bl	800a624 <itoa>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f9f5 	bl	8003090 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <Si468x_dab_get_audio_info+0x1e8>)
 8002caa:	f000 f9f1 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002cae:	783b      	ldrb	r3, [r7, #0]
 8002cb0:	220a      	movs	r2, #10
 8002cb2:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d4>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f007 fcb5 	bl	800a624 <itoa>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f9e6 	bl	8003090 <send_debug_msg>

}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ccc:	0800b158 	.word	0x0800b158
 8002cd0:	20000100 	.word	0x20000100
 8002cd4:	20001940 	.word	0x20001940
 8002cd8:	20001100 	.word	0x20001100
 8002cdc:	20001a08 	.word	0x20001a08
 8002ce0:	0800b194 	.word	0x0800b194
 8002ce4:	20001900 	.word	0x20001900
 8002ce8:	0800b1a0 	.word	0x0800b1a0
 8002cec:	0800b1b0 	.word	0x0800b1b0
 8002cf0:	0800b1c4 	.word	0x0800b1c4
 8002cf4:	0800b1d0 	.word	0x0800b1d0
 8002cf8:	0800b1dc 	.word	0x0800b1dc

08002cfc <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002d00:	2101      	movs	r1, #1
 8002d02:	4811      	ldr	r0, [pc, #68]	; (8002d48 <Si468x_dab_get_event_status+0x4c>)
 8002d04:	f000 f9c4 	bl	8003090 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <Si468x_dab_get_event_status+0x50>)
 8002d0a:	22b3      	movs	r2, #179	; 0xb3
 8002d0c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <Si468x_dab_get_event_status+0x50>)
 8002d10:	2203      	movs	r2, #3
 8002d12:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002d14:	490d      	ldr	r1, [pc, #52]	; (8002d4c <Si468x_dab_get_event_status+0x50>)
 8002d16:	2002      	movs	r0, #2
 8002d18:	f7fe fcbe 	bl	8001698 <Si468x_write_command>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <Si468x_dab_get_event_status+0x54>)
 8002d22:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002d24:	2001      	movs	r0, #1
 8002d26:	f002 fb01 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002d2a:	490a      	ldr	r1, [pc, #40]	; (8002d54 <Si468x_dab_get_event_status+0x58>)
 8002d2c:	2009      	movs	r0, #9
 8002d2e:	f7fe fcd5 	bl	80016dc <Si468x_read_reply>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <Si468x_dab_get_event_status+0x54>)
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <Si468x_dab_get_event_status+0x58>)
 8002d3c:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002d3e:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <Si468x_dab_get_event_status+0x5c>)
 8002d40:	6013      	str	r3, [r2, #0]
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	0800b1ec 	.word	0x0800b1ec
 8002d4c:	20000100 	.word	0x20000100
 8002d50:	20001940 	.word	0x20001940
 8002d54:	20001100 	.word	0x20001100
 8002d58:	20001a34 	.word	0x20001a34

08002d5c <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002d68:	2101      	movs	r1, #1
 8002d6a:	484a      	ldr	r0, [pc, #296]	; (8002e94 <Si468x_dab_get_component_info+0x138>)
 8002d6c:	f000 f990 	bl	8003090 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002d70:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002d72:	22bb      	movs	r2, #187	; 0xbb
 8002d74:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002d76:	4b48      	ldr	r3, [pc, #288]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002d7c:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002d82:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002d8e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002d98:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002da2:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0e1b      	lsrs	r3, r3, #24
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002dac:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002dae:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	121b      	asrs	r3, r3, #8
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002dbc:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	141b      	asrs	r3, r3, #16
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002dc6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	161b      	asrs	r3, r3, #24
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002dd0:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002dd2:	4931      	ldr	r1, [pc, #196]	; (8002e98 <Si468x_dab_get_component_info+0x13c>)
 8002dd4:	200c      	movs	r0, #12
 8002dd6:	f7fe fc5f 	bl	8001698 <Si468x_write_command>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <Si468x_dab_get_component_info+0x140>)
 8002de0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002de2:	2005      	movs	r0, #5
 8002de4:	f002 faa2 	bl	800532c <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002de8:	492d      	ldr	r1, [pc, #180]	; (8002ea0 <Si468x_dab_get_component_info+0x144>)
 8002dea:	201a      	movs	r0, #26
 8002dec:	f7fe fc76 	bl	80016dc <Si468x_read_reply>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <Si468x_dab_get_component_info+0x140>)
 8002df6:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <Si468x_dab_get_component_info+0x144>)
 8002dfa:	799b      	ldrb	r3, [r3, #6]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e00:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e00c      	b.n	8002e22 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	f103 0208 	add.w	r2, r3, #8
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
 8002e10:	4923      	ldr	r1, [pc, #140]	; (8002ea0 <Si468x_dab_get_component_info+0x144>)
 8002e12:	5c8a      	ldrb	r2, [r1, r2]
 8002e14:	3320      	adds	r3, #32
 8002e16:	443b      	add	r3, r7
 8002e18:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002e1c:	7ffb      	ldrb	r3, [r7, #31]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d9ef      	bls.n	8002e08 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <Si468x_dab_get_component_info+0x144>)
 8002e2a:	7e1b      	ldrb	r3, [r3, #24]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <Si468x_dab_get_component_info+0x144>)
 8002e30:	7e5b      	ldrb	r3, [r3, #25]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4819      	ldr	r0, [pc, #100]	; (8002ea4 <Si468x_dab_get_component_info+0x148>)
 8002e40:	f000 f926 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002e44:	7fbb      	ldrb	r3, [r7, #30]
 8002e46:	220a      	movs	r2, #10
 8002e48:	4917      	ldr	r1, [pc, #92]	; (8002ea8 <Si468x_dab_get_component_info+0x14c>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 fbea 	bl	800a624 <itoa>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f91b 	bl	8003090 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4813      	ldr	r0, [pc, #76]	; (8002eac <Si468x_dab_get_component_info+0x150>)
 8002e5e:	f000 f917 	bl	8003090 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f911 	bl	8003090 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	480f      	ldr	r0, [pc, #60]	; (8002eb0 <Si468x_dab_get_component_info+0x154>)
 8002e72:	f000 f90d 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002e76:	8bbb      	ldrh	r3, [r7, #28]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	490b      	ldr	r1, [pc, #44]	; (8002ea8 <Si468x_dab_get_component_info+0x14c>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f007 fbd1 	bl	800a624 <itoa>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f902 	bl	8003090 <send_debug_msg>

}
 8002e8c:	bf00      	nop
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	0800b22c 	.word	0x0800b22c
 8002e98:	20000100 	.word	0x20000100
 8002e9c:	20001940 	.word	0x20001940
 8002ea0:	20001100 	.word	0x20001100
 8002ea4:	0800b260 	.word	0x0800b260
 8002ea8:	20001900 	.word	0x20001900
 8002eac:	0800b26c 	.word	0x0800b26c
 8002eb0:	0800b280 	.word	0x0800b280

08002eb4 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <Si468x_dab_get_time+0x78>)
 8002eba:	785b      	ldrb	r3, [r3, #1]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02f      	beq.n	8002f26 <Si468x_dab_get_time+0x72>
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <Si468x_dab_get_time+0x78>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d028      	beq.n	8002f26 <Si468x_dab_get_time+0x72>
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <Si468x_dab_get_time+0x78>)
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	2b5a      	cmp	r3, #90	; 0x5a
 8002eda:	d924      	bls.n	8002f26 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <Si468x_dab_get_time+0x7c>)
 8002ede:	22bc      	movs	r2, #188	; 0xbc
 8002ee0:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <Si468x_dab_get_time+0x7c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002ee8:	4911      	ldr	r1, [pc, #68]	; (8002f30 <Si468x_dab_get_time+0x7c>)
 8002eea:	2002      	movs	r0, #2
 8002eec:	f7fe fbd4 	bl	8001698 <Si468x_write_command>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <Si468x_dab_get_time+0x80>)
 8002ef6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f002 fa17 	bl	800532c <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002efe:	490e      	ldr	r1, [pc, #56]	; (8002f38 <Si468x_dab_get_time+0x84>)
 8002f00:	200b      	movs	r0, #11
 8002f02:	f7fe fbeb 	bl	80016dc <Si468x_read_reply>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <Si468x_dab_get_time+0x80>)
 8002f0c:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <Si468x_dab_get_time+0x88>)
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <Si468x_dab_get_time+0x84>)
 8002f12:	3304      	adds	r3, #4
 8002f14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f18:	e882 0003 	stmia.w	r2, {r0, r1}
		Display_time(time);
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <Si468x_dab_get_time+0x88>)
 8002f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f22:	f000 fdf7 	bl	8003b14 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20001a08 	.word	0x20001a08
 8002f30:	20000100 	.word	0x20000100
 8002f34:	20001940 	.word	0x20001940
 8002f38:	20001100 	.word	0x20001100
 8002f3c:	20001a3c 	.word	0x20001a3c

08002f40 <Si468x_play_station>:


void Si468x_play_station(uint8_t direction)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <Si468x_play_station+0x30>
	{
		actual_station++;
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <Si468x_play_station+0x134>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	3301      	adds	r3, #1
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b46      	ldr	r3, [pc, #280]	; (8003074 <Si468x_play_station+0x134>)
 8002f5a:	701a      	strb	r2, [r3, #0]
		if(actual_station == total_services)
 8002f5c:	4b45      	ldr	r3, [pc, #276]	; (8003074 <Si468x_play_station+0x134>)
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	4b45      	ldr	r3, [pc, #276]	; (8003078 <Si468x_play_station+0x138>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d109      	bne.n	8002f7c <Si468x_play_station+0x3c>
		{
		  actual_station = 0;
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <Si468x_play_station+0x134>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e005      	b.n	8002f7c <Si468x_play_station+0x3c>
		}
	}
	else
	{
		actual_station--;
 8002f70:	4b40      	ldr	r3, [pc, #256]	; (8003074 <Si468x_play_station+0x134>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <Si468x_play_station+0x134>)
 8002f7a:	701a      	strb	r2, [r3, #0]
		  actual_station = total_services;
		}
	}


	Display_show_next_station(services_list, actual_station, total_services);
 8002f7c:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <Si468x_play_station+0x134>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <Si468x_play_station+0x138>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	483c      	ldr	r0, [pc, #240]	; (800307c <Si468x_play_station+0x13c>)
 8002f8a:	f000 feb9 	bl	8003d00 <Display_show_next_station>

	send_debug_msg("---------------------------------", CRLF_SEND);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	483b      	ldr	r0, [pc, #236]	; (8003080 <Si468x_play_station+0x140>)
 8002f92:	f000 f87d 	bl	8003090 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002f96:	2100      	movs	r1, #0
 8002f98:	483a      	ldr	r0, [pc, #232]	; (8003084 <Si468x_play_station+0x144>)
 8002f9a:	f000 f879 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(actual_station, itoa_buffer, 10), CRLF_SEND);
 8002f9e:	4b35      	ldr	r3, [pc, #212]	; (8003074 <Si468x_play_station+0x134>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	220a      	movs	r2, #10
 8002fa4:	4938      	ldr	r1, [pc, #224]	; (8003088 <Si468x_play_station+0x148>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f007 fb3c 	bl	800a624 <itoa>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f86d 	bl	8003090 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4834      	ldr	r0, [pc, #208]	; (800308c <Si468x_play_station+0x14c>)
 8002fba:	f000 f869 	bl	8003090 <send_debug_msg>
	send_debug_msg(itoa(services_list[actual_station].name, itoa_buffer, 10), CRLF_SEND);
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <Si468x_play_station+0x134>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2334      	movs	r3, #52	; 0x34
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a2c      	ldr	r2, [pc, #176]	; (800307c <Si468x_play_station+0x13c>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	220a      	movs	r2, #10
 8002fd0:	492d      	ldr	r1, [pc, #180]	; (8003088 <Si468x_play_station+0x148>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f007 fb26 	bl	800a624 <itoa>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f857 	bl	8003090 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <Si468x_play_station+0x134>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4a24      	ldr	r2, [pc, #144]	; (800307c <Si468x_play_station+0x13c>)
 8002fea:	2334      	movs	r3, #52	; 0x34
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	332c      	adds	r3, #44	; 0x2c
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fe45 	bl	8001c88 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <Si468x_play_station+0x134>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <Si468x_play_station+0x13c>)
 8003006:	2334      	movs	r3, #52	; 0x34
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3324      	adds	r3, #36	; 0x24
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <Si468x_play_station+0x134>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	4918      	ldr	r1, [pc, #96]	; (800307c <Si468x_play_station+0x13c>)
 800301a:	2334      	movs	r3, #52	; 0x34
 800301c:	fb00 f303 	mul.w	r3, r0, r3
 8003020:	440b      	add	r3, r1
 8003022:	332e      	adds	r3, #46	; 0x2e
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7ff fe97 	bl	8002d5c <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <Si468x_play_station+0x134>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <Si468x_play_station+0x13c>)
 8003036:	2334      	movs	r3, #52	; 0x34
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <Si468x_play_station+0x134>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	490c      	ldr	r1, [pc, #48]	; (800307c <Si468x_play_station+0x13c>)
 800304a:	2334      	movs	r3, #52	; 0x34
 800304c:	fb00 f303 	mul.w	r3, r0, r3
 8003050:	440b      	add	r3, r1
 8003052:	332e      	adds	r3, #46	; 0x2e
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7ff f9a1 	bl	80023a0 <Si468x_dab_start_digital_service>

	Si468x_dab_digrad_status();
 800305e:	f7fe fecd 	bl	8001dfc <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8003062:	f7ff fd55 	bl	8002b10 <Si468x_dab_get_audio_info>

	Display_hide_next_station();
 8003066:	f000 fec3 	bl	8003df0 <Display_hide_next_station>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	2000258d 	.word	0x2000258d
 8003078:	20002584 	.word	0x20002584
 800307c:	20001b5c 	.word	0x20001b5c
 8003080:	0800b2d0 	.word	0x0800b2d0
 8003084:	0800b2f4 	.word	0x0800b2f4
 8003088:	20001900 	.word	0x20001900
 800308c:	0800b308 	.word	0x0800b308

08003090 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd f893 	bl	80001c8 <strlen>
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	2364      	movs	r3, #100	; 0x64
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	480a      	ldr	r0, [pc, #40]	; (80030d8 <send_debug_msg+0x48>)
 80030b0:	f006 ff07 	bl	8009ec2 <HAL_UART_Transmit>

	if(is_crlf)
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80030ba:	f640 230d 	movw	r3, #2573	; 0xa0d
 80030be:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80030c0:	f107 010c 	add.w	r1, r7, #12
 80030c4:	2364      	movs	r3, #100	; 0x64
 80030c6:	2202      	movs	r2, #2
 80030c8:	4803      	ldr	r0, [pc, #12]	; (80030d8 <send_debug_msg+0x48>)
 80030ca:	f006 fefa 	bl	8009ec2 <HAL_UART_Transmit>
	}
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20002890 	.word	0x20002890

080030dc <Display_clear_screen>:
char char_buffer[32];

uint8_t display_freeze = 0;

void Display_clear_screen()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fd fbe4 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80030e8:	2311      	movs	r3, #17
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030f0:	2211      	movs	r2, #17
 80030f2:	2100      	movs	r1, #0
 80030f4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80030f8:	f7fd fc65 	bl	80009c6 <ILI9341_Draw_Line>
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <Display_dab_digrad_status_background>:
	CS_OFF;
}


void Display_dab_digrad_status_background()
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af02      	add	r7, sp, #8
//	Display_clear_screen();

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 800310a:	2302      	movs	r3, #2
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	4bb4      	ldr	r3, [pc, #720]	; (80033e0 <Display_dab_digrad_status_background+0x2dc>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003118:	2101      	movs	r1, #1
 800311a:	2005      	movs	r0, #5
 800311c:	f7fd fcd4 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8003120:	2328      	movs	r3, #40	; 0x28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2369      	movs	r3, #105	; 0x69
 8003126:	2214      	movs	r2, #20
 8003128:	2105      	movs	r1, #5
 800312a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800312e:	f7fd fc29 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 8003132:	2328      	movs	r3, #40	; 0x28
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	23d2      	movs	r3, #210	; 0xd2
 8003138:	2214      	movs	r2, #20
 800313a:	216e      	movs	r1, #110	; 0x6e
 800313c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003140:	f7fd fc20 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 8003144:	2328      	movs	r3, #40	; 0x28
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	f240 133b 	movw	r3, #315	; 0x13b
 800314c:	2214      	movs	r2, #20
 800314e:	21d7      	movs	r1, #215	; 0xd7
 8003150:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003154:	f7fd fc16 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8003158:	2341      	movs	r3, #65	; 0x41
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	f240 133b 	movw	r3, #315	; 0x13b
 8003160:	222d      	movs	r2, #45	; 0x2d
 8003162:	2105      	movs	r1, #5
 8003164:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003168:	f7fd fc0c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 800316c:	2302      	movs	r3, #2
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <Display_dab_digrad_status_background+0x2e0>)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317c:	2130      	movs	r1, #48	; 0x30
 800317e:	200a      	movs	r0, #10
 8003180:	f7fd fca2 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8003184:	2302      	movs	r3, #2
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	4b97      	ldr	r3, [pc, #604]	; (80033e8 <Display_dab_digrad_status_background+0x2e4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003194:	2130      	movs	r1, #48	; 0x30
 8003196:	205a      	movs	r0, #90	; 0x5a
 8003198:	f7fd fc96 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 800319c:	235a      	movs	r3, #90	; 0x5a
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f240 133b 	movw	r3, #315	; 0x13b
 80031a4:	2246      	movs	r2, #70	; 0x46
 80031a6:	2105      	movs	r1, #5
 80031a8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031ac:	f7fd fbea 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 80031b0:	2302      	movs	r3, #2
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <Display_dab_digrad_status_background+0x2e8>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c0:	2149      	movs	r1, #73	; 0x49
 80031c2:	200a      	movs	r0, #10
 80031c4:	f7fd fc80 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80031c8:	2302      	movs	r3, #2
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <Display_dab_digrad_status_background+0x2ec>)
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d8:	2149      	movs	r1, #73	; 0x49
 80031da:	2069      	movs	r0, #105	; 0x69
 80031dc:	f7fd fc74 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80031e0:	2373      	movs	r3, #115	; 0x73
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f240 133b 	movw	r3, #315	; 0x13b
 80031e8:	225f      	movs	r2, #95	; 0x5f
 80031ea:	2105      	movs	r1, #5
 80031ec:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031f0:	f7fd fbc8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80031f4:	2302      	movs	r3, #2
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <Display_dab_digrad_status_background+0x2f0>)
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003204:	2162      	movs	r1, #98	; 0x62
 8003206:	200a      	movs	r0, #10
 8003208:	f7fd fc5e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 800320c:	2302      	movs	r3, #2
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <Display_dab_digrad_status_background+0x2ec>)
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321c:	2162      	movs	r1, #98	; 0x62
 800321e:	2069      	movs	r0, #105	; 0x69
 8003220:	f7fd fc52 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8003224:	238c      	movs	r3, #140	; 0x8c
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f240 133b 	movw	r3, #315	; 0x13b
 800322c:	2278      	movs	r2, #120	; 0x78
 800322e:	2105      	movs	r1, #5
 8003230:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003234:	f7fd fba6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8003238:	2302      	movs	r3, #2
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <Display_dab_digrad_status_background+0x2f4>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003248:	217b      	movs	r1, #123	; 0x7b
 800324a:	200a      	movs	r0, #10
 800324c:	f7fd fc3c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8003250:	2302      	movs	r3, #2
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	4b69      	ldr	r3, [pc, #420]	; (80033fc <Display_dab_digrad_status_background+0x2f8>)
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003260:	217b      	movs	r1, #123	; 0x7b
 8003262:	206e      	movs	r0, #110	; 0x6e
 8003264:	f7fd fc30 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8003268:	23a5      	movs	r3, #165	; 0xa5
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f240 133b 	movw	r3, #315	; 0x13b
 8003270:	2291      	movs	r2, #145	; 0x91
 8003272:	2105      	movs	r1, #5
 8003274:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003278:	f7fd fb84 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 800327c:	2302      	movs	r3, #2
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <Display_dab_digrad_status_background+0x2fc>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800328c:	2194      	movs	r1, #148	; 0x94
 800328e:	200a      	movs	r0, #10
 8003290:	f7fd fc1a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8003294:	2302      	movs	r3, #2
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <Display_dab_digrad_status_background+0x300>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a4:	2194      	movs	r1, #148	; 0x94
 80032a6:	2071      	movs	r0, #113	; 0x71
 80032a8:	f7fd fc0e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 80032ac:	2302      	movs	r3, #2
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <Display_dab_digrad_status_background+0x304>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032bc:	2194      	movs	r1, #148	; 0x94
 80032be:	2094      	movs	r0, #148	; 0x94
 80032c0:	f7fd fc02 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 80032c4:	2302      	movs	r3, #2
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <Display_dab_digrad_status_background+0x308>)
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032d4:	2194      	movs	r1, #148	; 0x94
 80032d6:	20b7      	movs	r0, #183	; 0xb7
 80032d8:	f7fd fbf6 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 80032dc:	2302      	movs	r3, #2
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	4b4b      	ldr	r3, [pc, #300]	; (8003410 <Display_dab_digrad_status_background+0x30c>)
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ec:	2194      	movs	r1, #148	; 0x94
 80032ee:	20db      	movs	r0, #219	; 0xdb
 80032f0:	f7fd fbea 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 80032f4:	2302      	movs	r3, #2
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <Display_dab_digrad_status_background+0x310>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003304:	2194      	movs	r1, #148	; 0x94
 8003306:	f240 101b 	movw	r0, #283	; 0x11b
 800330a:	f7fd fbdd 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 800330e:	2302      	movs	r3, #2
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <Display_dab_digrad_status_background+0x314>)
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800331a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800331e:	2194      	movs	r1, #148	; 0x94
 8003320:	f240 1025 	movw	r0, #293	; 0x125
 8003324:	f7fd fbd0 	bl	8000ac8 <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8003328:	23be      	movs	r3, #190	; 0xbe
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	f240 133b 	movw	r3, #315	; 0x13b
 8003330:	22aa      	movs	r2, #170	; 0xaa
 8003332:	2105      	movs	r1, #5
 8003334:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003338:	f7fd fb24 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 800333c:	2302      	movs	r3, #2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <Display_dab_digrad_status_background+0x318>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334c:	21ad      	movs	r1, #173	; 0xad
 800334e:	200a      	movs	r0, #10
 8003350:	f7fd fbba 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8003354:	2302      	movs	r3, #2
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <Display_dab_digrad_status_background+0x31c>)
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003364:	21ad      	movs	r1, #173	; 0xad
 8003366:	207d      	movs	r0, #125	; 0x7d
 8003368:	f7fd fbae 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 800336c:	2302      	movs	r3, #2
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <Display_dab_digrad_status_background+0x320>)
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800337c:	21ad      	movs	r1, #173	; 0xad
 800337e:	20b4      	movs	r0, #180	; 0xb4
 8003380:	f7fd fba2 	bl	8000ac8 <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003384:	23eb      	movs	r3, #235	; 0xeb
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	239d      	movs	r3, #157	; 0x9d
 800338a:	22c3      	movs	r2, #195	; 0xc3
 800338c:	2105      	movs	r1, #5
 800338e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003392:	f7fd faf7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003396:	23eb      	movs	r3, #235	; 0xeb
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f240 133b 	movw	r3, #315	; 0x13b
 800339e:	22c3      	movs	r2, #195	; 0xc3
 80033a0:	21a3      	movs	r1, #163	; 0xa3
 80033a2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80033a6:	f7fd faed 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(60, 207, WHITE, ORANGE, "MENU L", 2);
 80033aa:	2302      	movs	r3, #2
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <Display_dab_digrad_status_background+0x324>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ba:	21cf      	movs	r1, #207	; 0xcf
 80033bc:	203c      	movs	r0, #60	; 0x3c
 80033be:	f7fd fb83 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(217, 207, WHITE, ORANGE, "MENU R", 2);
 80033c2:	2302      	movs	r3, #2
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <Display_dab_digrad_status_background+0x328>)
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d2:	21cf      	movs	r1, #207	; 0xcf
 80033d4:	20d9      	movs	r0, #217	; 0xd9
 80033d6:	f7fd fb77 	bl	8000ac8 <ILI9341_Draw_String>
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	0800b360 	.word	0x0800b360
 80033e4:	0800b374 	.word	0x0800b374
 80033e8:	0800b37c 	.word	0x0800b37c
 80033ec:	0800b384 	.word	0x0800b384
 80033f0:	0800b388 	.word	0x0800b388
 80033f4:	0800b38c 	.word	0x0800b38c
 80033f8:	0800b390 	.word	0x0800b390
 80033fc:	0800b398 	.word	0x0800b398
 8003400:	0800b39c 	.word	0x0800b39c
 8003404:	0800b3a8 	.word	0x0800b3a8
 8003408:	0800b3ac 	.word	0x0800b3ac
 800340c:	0800b3b0 	.word	0x0800b3b0
 8003410:	0800b3b8 	.word	0x0800b3b8
 8003414:	0800b3c0 	.word	0x0800b3c0
 8003418:	0800b3c4 	.word	0x0800b3c4
 800341c:	0800b3c8 	.word	0x0800b3c8
 8003420:	0800b3d4 	.word	0x0800b3d4
 8003424:	0800b3d8 	.word	0x0800b3d8
 8003428:	0800b3dc 	.word	0x0800b3dc
 800342c:	0800b3e4 	.word	0x0800b3e4

08003430 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8003430:	b084      	sub	sp, #16
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af02      	add	r7, sp, #8
 8003438:	f107 0c18 	add.w	ip, r7, #24
 800343c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8003440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003442:	461a      	mov	r2, r3
 8003444:	23fa      	movs	r3, #250	; 0xfa
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a33      	ldr	r2, [pc, #204]	; (800351c <Display_dab_digrad_status_data+0xec>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <Display_dab_digrad_status_data+0xec>)
 800345c:	fba3 1302 	umull	r1, r3, r3, r2
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <Display_dab_digrad_status_data+0xf0>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 8331 	bne.w	8003ada <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 8003478:	7e7b      	ldrb	r3, [r7, #25]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8003484:	2302      	movs	r3, #2
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <Display_dab_digrad_status_data+0xf4>)
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003490:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003494:	2117      	movs	r1, #23
 8003496:	2023      	movs	r0, #35	; 0x23
 8003498:	f7fd fb16 	bl	8000ac8 <ILI9341_Draw_String>
 800349c:	e00b      	b.n	80034b6 <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 800349e:	2302      	movs	r3, #2
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <Display_dab_digrad_status_data+0xf4>)
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80034aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034ae:	2117      	movs	r1, #23
 80034b0:	2023      	movs	r0, #35	; 0x23
 80034b2:	f7fd fb09 	bl	8000ac8 <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 80034b6:	7e7b      	ldrb	r3, [r7, #25]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 80034c2:	2302      	movs	r3, #2
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <Display_dab_digrad_status_data+0xf8>)
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80034ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80034d2:	2117      	movs	r1, #23
 80034d4:	2085      	movs	r0, #133	; 0x85
 80034d6:	f7fd faf7 	bl	8000ac8 <ILI9341_Draw_String>
 80034da:	e00b      	b.n	80034f4 <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 80034dc:	2302      	movs	r3, #2
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <Display_dab_digrad_status_data+0xf8>)
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80034e8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034ec:	2117      	movs	r1, #23
 80034ee:	2085      	movs	r0, #133	; 0x85
 80034f0:	f7fd faea 	bl	8000ac8 <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 80034f4:	7e7b      	ldrb	r3, [r7, #25]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8003500:	2302      	movs	r3, #2
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <Display_dab_digrad_status_data+0xfc>)
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800350c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003510:	2117      	movs	r1, #23
 8003512:	20e4      	movs	r0, #228	; 0xe4
 8003514:	f7fd fad8 	bl	8000ac8 <ILI9341_Draw_String>
 8003518:	e016      	b.n	8003548 <Display_dab_digrad_status_data+0x118>
 800351a:	bf00      	nop
 800351c:	10624dd3 	.word	0x10624dd3
 8003520:	200025b0 	.word	0x200025b0
 8003524:	0800b3ec 	.word	0x0800b3ec
 8003528:	0800b3f4 	.word	0x0800b3f4
 800352c:	0800b3fc 	.word	0x0800b3fc
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8003530:	2302      	movs	r3, #2
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	4bb6      	ldr	r3, [pc, #728]	; (8003810 <Display_dab_digrad_status_data+0x3e0>)
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800353c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003540:	2117      	movs	r1, #23
 8003542:	20e4      	movs	r0, #228	; 0xe4
 8003544:	f7fd fac0 	bl	8000ac8 <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 8003548:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800354c:	2b0d      	cmp	r3, #13
 800354e:	dc02      	bgt.n	8003556 <Display_dab_digrad_status_data+0x126>
 8003550:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003554:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8003556:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800355a:	2b1a      	cmp	r3, #26
 800355c:	dc06      	bgt.n	800356c <Display_dab_digrad_status_data+0x13c>
 800355e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003562:	2b0d      	cmp	r3, #13
 8003564:	dd02      	ble.n	800356c <Display_dab_digrad_status_data+0x13c>
 8003566:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800356a:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 800356c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003570:	2b27      	cmp	r3, #39	; 0x27
 8003572:	dc06      	bgt.n	8003582 <Display_dab_digrad_status_data+0x152>
 8003574:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003578:	2b1a      	cmp	r3, #26
 800357a:	dd02      	ble.n	8003582 <Display_dab_digrad_status_data+0x152>
 800357c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003580:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8003582:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003586:	2b34      	cmp	r3, #52	; 0x34
 8003588:	dc06      	bgt.n	8003598 <Display_dab_digrad_status_data+0x168>
 800358a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800358e:	2b27      	cmp	r3, #39	; 0x27
 8003590:	dd02      	ble.n	8003598 <Display_dab_digrad_status_data+0x168>
 8003592:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003596:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 8003598:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800359c:	2b34      	cmp	r3, #52	; 0x34
 800359e:	dd02      	ble.n	80035a6 <Display_dab_digrad_status_data+0x176>
 80035a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035a4:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 80035a6:	2302      	movs	r3, #2
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	4b9a      	ldr	r3, [pc, #616]	; (8003814 <Display_dab_digrad_status_data+0x3e4>)
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80035b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b6:	2130      	movs	r1, #48	; 0x30
 80035b8:	2032      	movs	r0, #50	; 0x32
 80035ba:	f7fd fa85 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, char_buffer, 10), 2);
 80035be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80035c2:	220a      	movs	r2, #10
 80035c4:	4994      	ldr	r1, [pc, #592]	; (8003818 <Display_dab_digrad_status_data+0x3e8>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f007 f82c 	bl	800a624 <itoa>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2202      	movs	r2, #2
 80035d0:	9201      	str	r2, [sp, #4]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80035d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035dc:	2130      	movs	r1, #48	; 0x30
 80035de:	2032      	movs	r0, #50	; 0x32
 80035e0:	f7fd fa72 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 80035e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80035e8:	461a      	mov	r2, r3
 80035ea:	23b4      	movs	r3, #180	; 0xb4
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da00      	bge.n	80035f6 <Display_dab_digrad_status_data+0x1c6>
 80035f4:	333f      	adds	r3, #63	; 0x3f
 80035f6:	119b      	asrs	r3, r3, #6
 80035f8:	3382      	adds	r3, #130	; 0x82
 80035fa:	461a      	mov	r2, r3
 80035fc:	233c      	movs	r3, #60	; 0x3c
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	2232      	movs	r2, #50	; 0x32
 8003604:	2182      	movs	r1, #130	; 0x82
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f7fd f9bc 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 800360c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003610:	461a      	mov	r2, r3
 8003612:	23b4      	movs	r3, #180	; 0xb4
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	da00      	bge.n	800361e <Display_dab_digrad_status_data+0x1ee>
 800361c:	333f      	adds	r3, #63	; 0x3f
 800361e:	119b      	asrs	r3, r3, #6
 8003620:	3382      	adds	r3, #130	; 0x82
 8003622:	4619      	mov	r1, r3
 8003624:	233c      	movs	r3, #60	; 0x3c
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f44f 739b 	mov.w	r3, #310	; 0x136
 800362c:	2232      	movs	r2, #50	; 0x32
 800362e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003632:	f7fd f9a7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 8003636:	7efb      	ldrb	r3, [r7, #27]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d802      	bhi.n	8003642 <Display_dab_digrad_status_data+0x212>
 800363c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003640:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8003642:	7efb      	ldrb	r3, [r7, #27]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d805      	bhi.n	8003654 <Display_dab_digrad_status_data+0x224>
 8003648:	7efb      	ldrb	r3, [r7, #27]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d902      	bls.n	8003654 <Display_dab_digrad_status_data+0x224>
 800364e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003652:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8003654:	7efb      	ldrb	r3, [r7, #27]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d805      	bhi.n	8003666 <Display_dab_digrad_status_data+0x236>
 800365a:	7efb      	ldrb	r3, [r7, #27]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d902      	bls.n	8003666 <Display_dab_digrad_status_data+0x236>
 8003660:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003664:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8003666:	7efb      	ldrb	r3, [r7, #27]
 8003668:	2b10      	cmp	r3, #16
 800366a:	d805      	bhi.n	8003678 <Display_dab_digrad_status_data+0x248>
 800366c:	7efb      	ldrb	r3, [r7, #27]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d902      	bls.n	8003678 <Display_dab_digrad_status_data+0x248>
 8003672:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003676:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8003678:	7efb      	ldrb	r3, [r7, #27]
 800367a:	2b10      	cmp	r3, #16
 800367c:	d902      	bls.n	8003684 <Display_dab_digrad_status_data+0x254>
 800367e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003682:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8003684:	2302      	movs	r3, #2
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	4b62      	ldr	r3, [pc, #392]	; (8003814 <Display_dab_digrad_status_data+0x3e4>)
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003694:	2149      	movs	r1, #73	; 0x49
 8003696:	2032      	movs	r0, #50	; 0x32
 8003698:	f7fd fa16 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, char_buffer, 10), 2);
 800369c:	7efb      	ldrb	r3, [r7, #27]
 800369e:	220a      	movs	r2, #10
 80036a0:	495d      	ldr	r1, [pc, #372]	; (8003818 <Display_dab_digrad_status_data+0x3e8>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f006 ffbe 	bl	800a624 <itoa>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2202      	movs	r2, #2
 80036ac:	9201      	str	r2, [sp, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80036b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b8:	2149      	movs	r1, #73	; 0x49
 80036ba:	2032      	movs	r0, #50	; 0x32
 80036bc:	f7fd fa04 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 80036c0:	7efb      	ldrb	r3, [r7, #27]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	3382      	adds	r3, #130	; 0x82
 80036cc:	461a      	mov	r2, r3
 80036ce:	2355      	movs	r3, #85	; 0x55
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	224b      	movs	r2, #75	; 0x4b
 80036d6:	2182      	movs	r1, #130	; 0x82
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7fd f953 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 80036de:	7efb      	ldrb	r3, [r7, #27]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	3382      	adds	r3, #130	; 0x82
 80036ea:	4619      	mov	r1, r3
 80036ec:	2355      	movs	r3, #85	; 0x55
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80036f4:	224b      	movs	r2, #75	; 0x4b
 80036f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80036fa:	f7fd f943 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 80036fe:	7f7b      	ldrb	r3, [r7, #29]
 8003700:	2b0b      	cmp	r3, #11
 8003702:	d802      	bhi.n	800370a <Display_dab_digrad_status_data+0x2da>
 8003704:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003708:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 800370a:	7f7b      	ldrb	r3, [r7, #29]
 800370c:	2b16      	cmp	r3, #22
 800370e:	d805      	bhi.n	800371c <Display_dab_digrad_status_data+0x2ec>
 8003710:	7f7b      	ldrb	r3, [r7, #29]
 8003712:	2b0b      	cmp	r3, #11
 8003714:	d902      	bls.n	800371c <Display_dab_digrad_status_data+0x2ec>
 8003716:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800371a:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 800371c:	7f7b      	ldrb	r3, [r7, #29]
 800371e:	2b21      	cmp	r3, #33	; 0x21
 8003720:	d805      	bhi.n	800372e <Display_dab_digrad_status_data+0x2fe>
 8003722:	7f7b      	ldrb	r3, [r7, #29]
 8003724:	2b16      	cmp	r3, #22
 8003726:	d902      	bls.n	800372e <Display_dab_digrad_status_data+0x2fe>
 8003728:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800372c:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 800372e:	7f7b      	ldrb	r3, [r7, #29]
 8003730:	2b2c      	cmp	r3, #44	; 0x2c
 8003732:	d805      	bhi.n	8003740 <Display_dab_digrad_status_data+0x310>
 8003734:	7f7b      	ldrb	r3, [r7, #29]
 8003736:	2b21      	cmp	r3, #33	; 0x21
 8003738:	d902      	bls.n	8003740 <Display_dab_digrad_status_data+0x310>
 800373a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800373e:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 8003740:	7f7b      	ldrb	r3, [r7, #29]
 8003742:	2b2c      	cmp	r3, #44	; 0x2c
 8003744:	d902      	bls.n	800374c <Display_dab_digrad_status_data+0x31c>
 8003746:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800374a:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 800374c:	2302      	movs	r3, #2
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	4b30      	ldr	r3, [pc, #192]	; (8003814 <Display_dab_digrad_status_data+0x3e4>)
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800375c:	2162      	movs	r1, #98	; 0x62
 800375e:	2032      	movs	r0, #50	; 0x32
 8003760:	f7fd f9b2 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, char_buffer, 10), 2);
 8003764:	7f7b      	ldrb	r3, [r7, #29]
 8003766:	220a      	movs	r2, #10
 8003768:	492b      	ldr	r1, [pc, #172]	; (8003818 <Display_dab_digrad_status_data+0x3e8>)
 800376a:	4618      	mov	r0, r3
 800376c:	f006 ff5a 	bl	800a624 <itoa>
 8003770:	4603      	mov	r3, r0
 8003772:	2202      	movs	r2, #2
 8003774:	9201      	str	r2, [sp, #4]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800377c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003780:	2162      	movs	r1, #98	; 0x62
 8003782:	2032      	movs	r0, #50	; 0x32
 8003784:	f7fd f9a0 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8003788:	7f7b      	ldrb	r3, [r7, #29]
 800378a:	461a      	mov	r2, r3
 800378c:	23b4      	movs	r3, #180	; 0xb4
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	4a22      	ldr	r2, [pc, #136]	; (800381c <Display_dab_digrad_status_data+0x3ec>)
 8003794:	fb82 1203 	smull	r1, r2, r2, r3
 8003798:	1112      	asrs	r2, r2, #4
 800379a:	17db      	asrs	r3, r3, #31
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	3382      	adds	r3, #130	; 0x82
 80037a0:	461a      	mov	r2, r3
 80037a2:	236e      	movs	r3, #110	; 0x6e
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	2264      	movs	r2, #100	; 0x64
 80037aa:	2182      	movs	r1, #130	; 0x82
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7fd f8e9 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 80037b2:	7f7b      	ldrb	r3, [r7, #29]
 80037b4:	461a      	mov	r2, r3
 80037b6:	23b4      	movs	r3, #180	; 0xb4
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <Display_dab_digrad_status_data+0x3ec>)
 80037be:	fb82 1203 	smull	r1, r2, r2, r3
 80037c2:	1112      	asrs	r2, r2, #4
 80037c4:	17db      	asrs	r3, r3, #31
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	3382      	adds	r3, #130	; 0x82
 80037ca:	4619      	mov	r1, r3
 80037cc:	236e      	movs	r3, #110	; 0x6e
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80037d4:	2264      	movs	r2, #100	; 0x64
 80037d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80037da:	f7fd f8d3 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 80037de:	7f3b      	ldrb	r3, [r7, #28]
 80037e0:	2b14      	cmp	r3, #20
 80037e2:	d802      	bhi.n	80037ea <Display_dab_digrad_status_data+0x3ba>
 80037e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037e8:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 80037ea:	7f3b      	ldrb	r3, [r7, #28]
 80037ec:	2b28      	cmp	r3, #40	; 0x28
 80037ee:	d805      	bhi.n	80037fc <Display_dab_digrad_status_data+0x3cc>
 80037f0:	7f3b      	ldrb	r3, [r7, #28]
 80037f2:	2b14      	cmp	r3, #20
 80037f4:	d902      	bls.n	80037fc <Display_dab_digrad_status_data+0x3cc>
 80037f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037fa:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 80037fc:	7f3b      	ldrb	r3, [r7, #28]
 80037fe:	2b3c      	cmp	r3, #60	; 0x3c
 8003800:	d80e      	bhi.n	8003820 <Display_dab_digrad_status_data+0x3f0>
 8003802:	7f3b      	ldrb	r3, [r7, #28]
 8003804:	2b28      	cmp	r3, #40	; 0x28
 8003806:	d90b      	bls.n	8003820 <Display_dab_digrad_status_data+0x3f0>
 8003808:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e007      	b.n	8003820 <Display_dab_digrad_status_data+0x3f0>
 8003810:	0800b3fc 	.word	0x0800b3fc
 8003814:	0800b408 	.word	0x0800b408
 8003818:	20002590 	.word	0x20002590
 800381c:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8003820:	7f3b      	ldrb	r3, [r7, #28]
 8003822:	2b50      	cmp	r3, #80	; 0x50
 8003824:	d805      	bhi.n	8003832 <Display_dab_digrad_status_data+0x402>
 8003826:	7f3b      	ldrb	r3, [r7, #28]
 8003828:	2b3c      	cmp	r3, #60	; 0x3c
 800382a:	d902      	bls.n	8003832 <Display_dab_digrad_status_data+0x402>
 800382c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003830:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 8003832:	7f3b      	ldrb	r3, [r7, #28]
 8003834:	2b50      	cmp	r3, #80	; 0x50
 8003836:	d902      	bls.n	800383e <Display_dab_digrad_status_data+0x40e>
 8003838:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800383c:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 800383e:	2302      	movs	r3, #2
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	4ba9      	ldr	r3, [pc, #676]	; (8003ae8 <Display_dab_digrad_status_data+0x6b8>)
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800384a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384e:	217b      	movs	r1, #123	; 0x7b
 8003850:	204b      	movs	r0, #75	; 0x4b
 8003852:	f7fd f939 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, char_buffer, 10), 2);
 8003856:	7f3b      	ldrb	r3, [r7, #28]
 8003858:	220a      	movs	r2, #10
 800385a:	49a4      	ldr	r1, [pc, #656]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 800385c:	4618      	mov	r0, r3
 800385e:	f006 fee1 	bl	800a624 <itoa>
 8003862:	4603      	mov	r3, r0
 8003864:	2202      	movs	r2, #2
 8003866:	9201      	str	r2, [sp, #4]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800386e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003872:	217b      	movs	r1, #123	; 0x7b
 8003874:	204b      	movs	r0, #75	; 0x4b
 8003876:	f7fd f927 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 800387a:	7f3b      	ldrb	r3, [r7, #28]
 800387c:	461a      	mov	r2, r3
 800387e:	23b4      	movs	r3, #180	; 0xb4
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	4a9a      	ldr	r2, [pc, #616]	; (8003af0 <Display_dab_digrad_status_data+0x6c0>)
 8003886:	fb82 1203 	smull	r1, r2, r2, r3
 800388a:	1152      	asrs	r2, r2, #5
 800388c:	17db      	asrs	r3, r3, #31
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	3382      	adds	r3, #130	; 0x82
 8003892:	461a      	mov	r2, r3
 8003894:	2387      	movs	r3, #135	; 0x87
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	227d      	movs	r2, #125	; 0x7d
 800389c:	2182      	movs	r1, #130	; 0x82
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7fd f870 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 80038a4:	7f3b      	ldrb	r3, [r7, #28]
 80038a6:	461a      	mov	r2, r3
 80038a8:	23b4      	movs	r3, #180	; 0xb4
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	4a90      	ldr	r2, [pc, #576]	; (8003af0 <Display_dab_digrad_status_data+0x6c0>)
 80038b0:	fb82 1203 	smull	r1, r2, r2, r3
 80038b4:	1152      	asrs	r2, r2, #5
 80038b6:	17db      	asrs	r3, r3, #31
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	3382      	adds	r3, #130	; 0x82
 80038bc:	4619      	mov	r1, r3
 80038be:	2387      	movs	r3, #135	; 0x87
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f44f 739b 	mov.w	r3, #310	; 0x136
 80038c6:	227d      	movs	r2, #125	; 0x7d
 80038c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80038cc:	f7fd f85a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, char_buffer, 10), 2);
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	4a88      	ldr	r2, [pc, #544]	; (8003af4 <Display_dab_digrad_status_data+0x6c4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	099b      	lsrs	r3, r3, #6
 80038da:	220a      	movs	r2, #10
 80038dc:	4983      	ldr	r1, [pc, #524]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f006 fea0 	bl	800a624 <itoa>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2202      	movs	r2, #2
 80038e8:	9201      	str	r2, [sp, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f4:	2194      	movs	r1, #148	; 0x94
 80038f6:	205b      	movs	r0, #91	; 0x5b
 80038f8:	f7fd f8e6 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, char_buffer, 10), 2);
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <Display_dab_digrad_status_data+0x6c4>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	220a      	movs	r2, #10
 8003912:	4976      	ldr	r1, [pc, #472]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 8003914:	4618      	mov	r0, r3
 8003916:	f006 fe85 	bl	800a624 <itoa>
 800391a:	4603      	mov	r3, r0
 800391c:	2202      	movs	r2, #2
 800391e:	9201      	str	r2, [sp, #4]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392a:	2194      	movs	r1, #148	; 0x94
 800392c:	2078      	movs	r0, #120	; 0x78
 800392e:	f7fd f8cb 	bl	8000ac8 <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 8003932:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003936:	2b09      	cmp	r3, #9
 8003938:	d821      	bhi.n	800397e <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 800393a:	2302      	movs	r3, #2
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	4b6e      	ldr	r3, [pc, #440]	; (8003af8 <Display_dab_digrad_status_data+0x6c8>)
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394a:	2194      	movs	r1, #148	; 0x94
 800394c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8003950:	f7fd f8ba 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, char_buffer, 10), 2);
 8003954:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003958:	220a      	movs	r2, #10
 800395a:	4964      	ldr	r1, [pc, #400]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 800395c:	4618      	mov	r0, r3
 800395e:	f006 fe61 	bl	800a624 <itoa>
 8003962:	4603      	mov	r3, r0
 8003964:	2202      	movs	r2, #2
 8003966:	9201      	str	r2, [sp, #4]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800396e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003972:	2194      	movs	r1, #148	; 0x94
 8003974:	f240 1011 	movw	r0, #273	; 0x111
 8003978:	f7fd f8a6 	bl	8000ac8 <ILI9341_Draw_String>
 800397c:	e013      	b.n	80039a6 <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, char_buffer, 10), 2);
 800397e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003982:	220a      	movs	r2, #10
 8003984:	4959      	ldr	r1, [pc, #356]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 8003986:	4618      	mov	r0, r3
 8003988:	f006 fe4c 	bl	800a624 <itoa>
 800398c:	4603      	mov	r3, r0
 800398e:	2202      	movs	r2, #2
 8003990:	9201      	str	r2, [sp, #4]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399c:	2194      	movs	r1, #148	; 0x94
 800399e:	f44f 7084 	mov.w	r0, #264	; 0x108
 80039a2:	f7fd f891 	bl	8000ac8 <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d81d      	bhi.n	80039e8 <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 80039ac:	2302      	movs	r3, #2
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	4b52      	ldr	r3, [pc, #328]	; (8003afc <Display_dab_digrad_status_data+0x6cc>)
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039bc:	21ad      	movs	r1, #173	; 0xad
 80039be:	204f      	movs	r0, #79	; 0x4f
 80039c0:	f7fd f882 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, char_buffer, 10), 2);
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	220a      	movs	r2, #10
 80039c8:	4948      	ldr	r1, [pc, #288]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f006 fe2a 	bl	800a624 <itoa>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2202      	movs	r2, #2
 80039d4:	9201      	str	r2, [sp, #4]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e0:	21ad      	movs	r1, #173	; 0xad
 80039e2:	2057      	movs	r0, #87	; 0x57
 80039e4:	f7fd f870 	bl	8000ac8 <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d911      	bls.n	8003a12 <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, char_buffer, 10), 2);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	220a      	movs	r2, #10
 80039f2:	493e      	ldr	r1, [pc, #248]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f006 fe15 	bl	800a624 <itoa>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2202      	movs	r2, #2
 80039fe:	9201      	str	r2, [sp, #4]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0a:	21ad      	movs	r1, #173	; 0xad
 8003a0c:	204f      	movs	r0, #79	; 0x4f
 8003a0e:	f7fd f85b 	bl	8000ac8 <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 8003a12:	2302      	movs	r3, #2
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <Display_dab_digrad_status_data+0x6d0>)
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a22:	21ad      	movs	r1, #173	; 0xad
 8003a24:	205f      	movs	r0, #95	; 0x5f
 8003a26:	f7fd f84f 	bl	8000ac8 <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 8003a2a:	88bb      	ldrh	r3, [r7, #4]
 8003a2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d023      	beq.n	8003a7c <Display_dab_digrad_status_data+0x64c>
 8003a34:	f240 22ee 	movw	r2, #750	; 0x2ee
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	dc2c      	bgt.n	8003a96 <Display_dab_digrad_status_data+0x666>
 8003a3c:	2bfa      	cmp	r3, #250	; 0xfa
 8003a3e:	d003      	beq.n	8003a48 <Display_dab_digrad_status_data+0x618>
 8003a40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a44:	d00d      	beq.n	8003a62 <Display_dab_digrad_status_data+0x632>
 8003a46:	e026      	b.n	8003a96 <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8003a48:	2302      	movs	r3, #2
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <Display_dab_digrad_status_data+0x6d4>)
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a58:	21ad      	movs	r1, #173	; 0xad
 8003a5a:	2067      	movs	r0, #103	; 0x67
 8003a5c:	f7fd f834 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8003a60:	e026      	b.n	8003ab0 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8003a62:	2302      	movs	r3, #2
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <Display_dab_digrad_status_data+0x6d8>)
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a72:	21ad      	movs	r1, #173	; 0xad
 8003a74:	2067      	movs	r0, #103	; 0x67
 8003a76:	f7fd f827 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8003a7a:	e019      	b.n	8003ab0 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <Display_dab_digrad_status_data+0x6dc>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8c:	21ad      	movs	r1, #173	; 0xad
 8003a8e:	2067      	movs	r0, #103	; 0x67
 8003a90:	f7fd f81a 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8003a94:	e00c      	b.n	8003ab0 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8003a96:	2302      	movs	r3, #2
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <Display_dab_digrad_status_data+0x6e0>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa6:	21ad      	movs	r1, #173	; 0xad
 8003aa8:	2067      	movs	r0, #103	; 0x67
 8003aaa:	f7fd f80d 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8003aae:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), char_buffer, 10), 2);
 8003ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	220a      	movs	r2, #10
 8003aba:	490c      	ldr	r1, [pc, #48]	; (8003aec <Display_dab_digrad_status_data+0x6bc>)
 8003abc:	4618      	mov	r0, r3
 8003abe:	f006 fdb1 	bl	800a624 <itoa>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	9201      	str	r2, [sp, #4]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad2:	21ad      	movs	r1, #173	; 0xad
 8003ad4:	20d7      	movs	r0, #215	; 0xd7
 8003ad6:	f7fc fff7 	bl	8000ac8 <ILI9341_Draw_String>
	}
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ae4:	b004      	add	sp, #16
 8003ae6:	4770      	bx	lr
 8003ae8:	0800b408 	.word	0x0800b408
 8003aec:	20002590 	.word	0x20002590
 8003af0:	51eb851f 	.word	0x51eb851f
 8003af4:	10624dd3 	.word	0x10624dd3
 8003af8:	0800b40c 	.word	0x0800b40c
 8003afc:	0800b410 	.word	0x0800b410
 8003b00:	0800b3a8 	.word	0x0800b3a8
 8003b04:	0800b414 	.word	0x0800b414
 8003b08:	0800b418 	.word	0x0800b418
 8003b0c:	0800b41c 	.word	0x0800b41c
 8003b10:	0800b420 	.word	0x0800b420

08003b14 <Display_time>:

void Display_time(time_t time_val)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.hour < 10)
 8003b20:	793b      	ldrb	r3, [r7, #4]
 8003b22:	2b09      	cmp	r3, #9
 8003b24:	d81e      	bhi.n	8003b64 <Display_time+0x50>
	{
		ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 8003b26:	2302      	movs	r3, #2
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <Display_time+0xfc>)
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b34:	2101      	movs	r1, #1
 8003b36:	f240 100f 	movw	r0, #271	; 0x10f
 8003b3a:	f7fc ffc5 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, char_buffer, 10), 2);
 8003b3e:	793b      	ldrb	r3, [r7, #4]
 8003b40:	220a      	movs	r2, #10
 8003b42:	4934      	ldr	r1, [pc, #208]	; (8003c14 <Display_time+0x100>)
 8003b44:	4618      	mov	r0, r3
 8003b46:	f006 fd6d 	bl	800a624 <itoa>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	9201      	str	r2, [sp, #4]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b58:	2101      	movs	r1, #1
 8003b5a:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b5e:	f7fc ffb3 	bl	8000ac8 <ILI9341_Draw_String>
 8003b62:	e011      	b.n	8003b88 <Display_time+0x74>
	}
	else
	{
		ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, char_buffer, 10), 2);
 8003b64:	793b      	ldrb	r3, [r7, #4]
 8003b66:	220a      	movs	r2, #10
 8003b68:	492a      	ldr	r1, [pc, #168]	; (8003c14 <Display_time+0x100>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f006 fd5a 	bl	800a624 <itoa>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2202      	movs	r2, #2
 8003b74:	9201      	str	r2, [sp, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b7e:	2101      	movs	r1, #1
 8003b80:	f240 100f 	movw	r0, #271	; 0x10f
 8003b84:	f7fc ffa0 	bl	8000ac8 <ILI9341_Draw_String>
	}

	ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 8003b88:	2302      	movs	r3, #2
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <Display_time+0x104>)
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2300      	movs	r3, #0
 8003b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b96:	2101      	movs	r1, #1
 8003b98:	f240 101f 	movw	r0, #287	; 0x11f
 8003b9c:	f7fc ff94 	bl	8000ac8 <ILI9341_Draw_String>

	if(time_val.minute < 10)
 8003ba0:	797b      	ldrb	r3, [r7, #5]
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	d81e      	bhi.n	8003be4 <Display_time+0xd0>
	{
		ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <Display_time+0xfc>)
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	f240 1027 	movw	r0, #295	; 0x127
 8003bba:	f7fc ff85 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, char_buffer, 10), 2);
 8003bbe:	797b      	ldrb	r3, [r7, #5]
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	4914      	ldr	r1, [pc, #80]	; (8003c14 <Display_time+0x100>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f006 fd2d 	bl	800a624 <itoa>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2202      	movs	r2, #2
 8003bce:	9201      	str	r2, [sp, #4]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd8:	2101      	movs	r1, #1
 8003bda:	f44f 7098 	mov.w	r0, #304	; 0x130
 8003bde:	f7fc ff73 	bl	8000ac8 <ILI9341_Draw_String>
	{
		ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, char_buffer, 10), 2);
	}
	//date
	//todo
}
 8003be2:	e011      	b.n	8003c08 <Display_time+0xf4>
		ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, char_buffer, 10), 2);
 8003be4:	797b      	ldrb	r3, [r7, #5]
 8003be6:	220a      	movs	r2, #10
 8003be8:	490a      	ldr	r1, [pc, #40]	; (8003c14 <Display_time+0x100>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 fd1a 	bl	800a624 <itoa>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	9201      	str	r2, [sp, #4]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f240 1027 	movw	r0, #295	; 0x127
 8003c04:	f7fc ff60 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	0800b40c 	.word	0x0800b40c
 8003c14:	20002590 	.word	0x20002590
 8003c18:	0800b424 	.word	0x0800b424

08003c1c <Display_init_screen>:

void Display_init_screen()
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fc fe44 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003c28:	2302      	movs	r3, #2
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <Display_init_screen+0xc4>)
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2300      	movs	r3, #0
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	2128      	movs	r1, #40	; 0x28
 8003c38:	205f      	movs	r0, #95	; 0x5f
 8003c3a:	f7fc ff45 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003c3e:	2302      	movs	r3, #2
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <Display_init_screen+0xc8>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c4c:	213c      	movs	r1, #60	; 0x3c
 8003c4e:	2046      	movs	r0, #70	; 0x46
 8003c50:	f7fc ff3a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003c54:	2302      	movs	r3, #2
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <Display_init_screen+0xcc>)
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c62:	2150      	movs	r1, #80	; 0x50
 8003c64:	2082      	movs	r0, #130	; 0x82
 8003c66:	f7fc ff2f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <Display_init_screen+0xd0>)
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c78:	2164      	movs	r1, #100	; 0x64
 8003c7a:	2064      	movs	r0, #100	; 0x64
 8003c7c:	f7fc ff24 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003c80:	2302      	movs	r3, #2
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <Display_init_screen+0xd4>)
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c8e:	2178      	movs	r1, #120	; 0x78
 8003c90:	205a      	movs	r0, #90	; 0x5a
 8003c92:	f7fc ff19 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003c96:	2302      	movs	r3, #2
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <Display_init_screen+0xd8>)
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca4:	218c      	movs	r1, #140	; 0x8c
 8003ca6:	2032      	movs	r0, #50	; 0x32
 8003ca8:	f7fc ff0e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003cac:	2302      	movs	r3, #2
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <Display_init_screen+0xdc>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cba:	21a0      	movs	r1, #160	; 0xa0
 8003cbc:	205a      	movs	r0, #90	; 0x5a
 8003cbe:	f7fc ff03 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <Display_init_screen+0xe0>)
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd0:	21b4      	movs	r1, #180	; 0xb4
 8003cd2:	2078      	movs	r0, #120	; 0x78
 8003cd4:	f7fc fef8 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	0800b428 	.word	0x0800b428
 8003ce4:	0800b438 	.word	0x0800b438
 8003ce8:	0800b450 	.word	0x0800b450
 8003cec:	0800b458 	.word	0x0800b458
 8003cf0:	0800b468 	.word	0x0800b468
 8003cf4:	0800b47c 	.word	0x0800b47c
 8003cf8:	0800b498 	.word	0x0800b498
 8003cfc:	0800b4ac 	.word	0x0800b4ac

08003d00 <Display_show_next_station>:

void Display_show_next_station(dab_service_t _services_list[], uint8_t _actual_station, uint8_t _total_services)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	70bb      	strb	r3, [r7, #2]
	display_freeze = 1;
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <Display_show_next_station+0xdc>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]

	ILI9341_Draw_Filled_Rectangle(BLACK, 50, 90, 270, 150);
 8003d16:	2396      	movs	r3, #150	; 0x96
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003d1e:	225a      	movs	r2, #90	; 0x5a
 8003d20:	2132      	movs	r1, #50	; 0x32
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7fc fe2e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 95, WHITE, BLACK, "Number:", 2);
 8003d28:	2302      	movs	r3, #2
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <Display_show_next_station+0xe0>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d36:	215f      	movs	r1, #95	; 0x5f
 8003d38:	2037      	movs	r0, #55	; 0x37
 8003d3a:	f7fc fec5 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 95, WHITE, BLACK, itoa(_actual_station + 1, char_buffer, 10), 2);
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	3301      	adds	r3, #1
 8003d42:	220a      	movs	r2, #10
 8003d44:	4927      	ldr	r1, [pc, #156]	; (8003de4 <Display_show_next_station+0xe4>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f006 fc6c 	bl	800a624 <itoa>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2202      	movs	r2, #2
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2300      	movs	r3, #0
 8003d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5a:	215f      	movs	r1, #95	; 0x5f
 8003d5c:	2078      	movs	r0, #120	; 0x78
 8003d5e:	f7fc feb3 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(140, 95, WHITE, BLACK, "/", 2);
 8003d62:	2302      	movs	r3, #2
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <Display_show_next_station+0xe8>)
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d70:	215f      	movs	r1, #95	; 0x5f
 8003d72:	208c      	movs	r0, #140	; 0x8c
 8003d74:	f7fc fea8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 95, WHITE, BLACK, itoa(_total_services, char_buffer, 10), 2);
 8003d78:	78bb      	ldrb	r3, [r7, #2]
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	4919      	ldr	r1, [pc, #100]	; (8003de4 <Display_show_next_station+0xe4>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f006 fc50 	bl	800a624 <itoa>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2202      	movs	r2, #2
 8003d88:	9201      	str	r2, [sp, #4]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d92:	215f      	movs	r1, #95	; 0x5f
 8003d94:	2094      	movs	r0, #148	; 0x94
 8003d96:	f7fc fe97 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(55, 110, WHITE, BLACK, "Name:", 2);
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <Display_show_next_station+0xec>)
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da8:	216e      	movs	r1, #110	; 0x6e
 8003daa:	2037      	movs	r0, #55	; 0x37
 8003dac:	f7fc fe8c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 110, WHITE, BLACK, _services_list[_actual_station].name, 2);
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	2234      	movs	r2, #52	; 0x34
 8003db4:	fb02 f303 	mul.w	r3, r2, r3
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	9200      	str	r2, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dca:	216e      	movs	r1, #110	; 0x6e
 8003dcc:	2064      	movs	r0, #100	; 0x64
 8003dce:	f7fc fe7b 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200025b0 	.word	0x200025b0
 8003de0:	0800b4b8 	.word	0x0800b4b8
 8003de4:	20002590 	.word	0x20002590
 8003de8:	0800b3c0 	.word	0x0800b3c0
 8003dec:	0800b4c0 	.word	0x0800b4c0

08003df0 <Display_hide_next_station>:

void Display_hide_next_station()
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af02      	add	r7, sp, #8
	display_freeze = 0;
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <Display_hide_next_station+0x1b0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]

	ILI9341_Draw_Filled_Rectangle(BLACK, 50, 90, 270, 150);
 8003dfc:	2396      	movs	r3, #150	; 0x96
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003e04:	225a      	movs	r2, #90	; 0x5a
 8003e06:	2132      	movs	r1, #50	; 0x32
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fc fdbb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//wyswietlanie ponownie tylko tego, co wyskakujace okno zaslonilo

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8003e0e:	235a      	movs	r3, #90	; 0x5a
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	f240 133b 	movw	r3, #315	; 0x13b
 8003e16:	2246      	movs	r2, #70	; 0x46
 8003e18:	2105      	movs	r1, #5
 8003e1a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003e1e:	f7fc fdb1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8003e22:	2302      	movs	r3, #2
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <Display_hide_next_station+0x1b4>)
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e32:	2149      	movs	r1, #73	; 0x49
 8003e34:	200a      	movs	r0, #10
 8003e36:	f7fc fe47 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <Display_hide_next_station+0x1b8>)
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4a:	2149      	movs	r1, #73	; 0x49
 8003e4c:	2069      	movs	r0, #105	; 0x69
 8003e4e:	f7fc fe3b 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8003e52:	2373      	movs	r3, #115	; 0x73
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	f240 133b 	movw	r3, #315	; 0x13b
 8003e5a:	225f      	movs	r2, #95	; 0x5f
 8003e5c:	2105      	movs	r1, #5
 8003e5e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003e62:	f7fc fd8f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8003e66:	2302      	movs	r3, #2
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	4b50      	ldr	r3, [pc, #320]	; (8003fac <Display_hide_next_station+0x1bc>)
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e76:	2162      	movs	r1, #98	; 0x62
 8003e78:	200a      	movs	r0, #10
 8003e7a:	f7fc fe25 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8003e7e:	2302      	movs	r3, #2
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <Display_hide_next_station+0x1b8>)
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	2162      	movs	r1, #98	; 0x62
 8003e90:	2069      	movs	r0, #105	; 0x69
 8003e92:	f7fc fe19 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8003e96:	238c      	movs	r3, #140	; 0x8c
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f240 133b 	movw	r3, #315	; 0x13b
 8003e9e:	2278      	movs	r2, #120	; 0x78
 8003ea0:	2105      	movs	r1, #5
 8003ea2:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003ea6:	f7fc fd6d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8003eaa:	2302      	movs	r3, #2
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <Display_hide_next_station+0x1c0>)
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eba:	217b      	movs	r1, #123	; 0x7b
 8003ebc:	200a      	movs	r0, #10
 8003ebe:	f7fc fe03 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <Display_hide_next_station+0x1c4>)
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ed2:	217b      	movs	r1, #123	; 0x7b
 8003ed4:	206e      	movs	r0, #110	; 0x6e
 8003ed6:	f7fc fdf7 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8003eda:	23a5      	movs	r3, #165	; 0xa5
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	f240 133b 	movw	r3, #315	; 0x13b
 8003ee2:	2291      	movs	r2, #145	; 0x91
 8003ee4:	2105      	movs	r1, #5
 8003ee6:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003eea:	f7fc fd4b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8003eee:	2302      	movs	r3, #2
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <Display_hide_next_station+0x1c8>)
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efe:	2194      	movs	r1, #148	; 0x94
 8003f00:	200a      	movs	r0, #10
 8003f02:	f7fc fde1 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8003f06:	2302      	movs	r3, #2
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	4b2c      	ldr	r3, [pc, #176]	; (8003fbc <Display_hide_next_station+0x1cc>)
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f16:	2194      	movs	r1, #148	; 0x94
 8003f18:	2071      	movs	r0, #113	; 0x71
 8003f1a:	f7fc fdd5 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8003f1e:	2302      	movs	r3, #2
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <Display_hide_next_station+0x1d0>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	2194      	movs	r1, #148	; 0x94
 8003f30:	2094      	movs	r0, #148	; 0x94
 8003f32:	f7fc fdc9 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8003f36:	2302      	movs	r3, #2
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <Display_hide_next_station+0x1d4>)
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f46:	2194      	movs	r1, #148	; 0x94
 8003f48:	20b7      	movs	r0, #183	; 0xb7
 8003f4a:	f7fc fdbd 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8003f4e:	2302      	movs	r3, #2
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <Display_hide_next_station+0x1d8>)
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5e:	2194      	movs	r1, #148	; 0x94
 8003f60:	20db      	movs	r0, #219	; 0xdb
 8003f62:	f7fc fdb1 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8003f66:	2302      	movs	r3, #2
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <Display_hide_next_station+0x1dc>)
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f76:	2194      	movs	r1, #148	; 0x94
 8003f78:	f240 101b 	movw	r0, #283	; 0x11b
 8003f7c:	f7fc fda4 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8003f80:	2302      	movs	r3, #2
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <Display_hide_next_station+0x1e0>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f90:	2194      	movs	r1, #148	; 0x94
 8003f92:	f240 1025 	movw	r0, #293	; 0x125
 8003f96:	f7fc fd97 	bl	8000ac8 <ILI9341_Draw_String>

}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200025b0 	.word	0x200025b0
 8003fa4:	0800b384 	.word	0x0800b384
 8003fa8:	0800b388 	.word	0x0800b388
 8003fac:	0800b38c 	.word	0x0800b38c
 8003fb0:	0800b390 	.word	0x0800b390
 8003fb4:	0800b398 	.word	0x0800b398
 8003fb8:	0800b39c 	.word	0x0800b39c
 8003fbc:	0800b3a8 	.word	0x0800b3a8
 8003fc0:	0800b3ac 	.word	0x0800b3ac
 8003fc4:	0800b3b0 	.word	0x0800b3b0
 8003fc8:	0800b3b8 	.word	0x0800b3b8
 8003fcc:	0800b3c0 	.word	0x0800b3c0
 8003fd0:	0800b3c4 	.word	0x0800b3c4

08003fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <MX_DMA_Init+0x3c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <MX_DMA_Init+0x3c>)
 8003fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <MX_DMA_Init+0x3c>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	200f      	movs	r0, #15
 8003ffc:	f001 fa95 	bl	800552a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004000:	200f      	movs	r0, #15
 8004002:	f001 faae 	bl	8005562 <HAL_NVIC_EnableIRQ>

}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	; 0x30
 8004018:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a6b      	ldr	r2, [pc, #428]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b69      	ldr	r3, [pc, #420]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a64      	ldr	r2, [pc, #400]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b5b      	ldr	r3, [pc, #364]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b57      	ldr	r3, [pc, #348]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a56      	ldr	r2, [pc, #344]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b54      	ldr	r3, [pc, #336]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a4f      	ldr	r2, [pc, #316]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	4b49      	ldr	r3, [pc, #292]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
 80040c6:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <MX_GPIO_Init+0x1cc>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2130      	movs	r1, #48	; 0x30
 80040d6:	4843      	ldr	r0, [pc, #268]	; (80041e4 <MX_GPIO_Init+0x1d0>)
 80040d8:	f001 ff2c 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80040dc:	2200      	movs	r2, #0
 80040de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040e2:	4841      	ldr	r0, [pc, #260]	; (80041e8 <MX_GPIO_Init+0x1d4>)
 80040e4:	f001 ff26 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80040e8:	2200      	movs	r2, #0
 80040ea:	f24f 7180 	movw	r1, #63360	; 0xf780
 80040ee:	483f      	ldr	r0, [pc, #252]	; (80041ec <MX_GPIO_Init+0x1d8>)
 80040f0:	f001 ff20 	bl	8005f34 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2128      	movs	r1, #40	; 0x28
 80040f8:	483d      	ldr	r0, [pc, #244]	; (80041f0 <MX_GPIO_Init+0x1dc>)
 80040fa:	f001 ff1b 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80040fe:	2310      	movs	r3, #16
 8004100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 800410a:	f107 031c 	add.w	r3, r7, #28
 800410e:	4619      	mov	r1, r3
 8004110:	4838      	ldr	r0, [pc, #224]	; (80041f4 <MX_GPIO_Init+0x1e0>)
 8004112:	f001 fd5b 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8004116:	2330      	movs	r3, #48	; 0x30
 8004118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800411a:	2301      	movs	r3, #1
 800411c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004122:	2302      	movs	r3, #2
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	4619      	mov	r1, r3
 800412c:	482d      	ldr	r0, [pc, #180]	; (80041e4 <MX_GPIO_Init+0x1d0>)
 800412e:	f001 fd4d 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8004132:	2311      	movs	r3, #17
 8004134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800413e:	f107 031c 	add.w	r3, r7, #28
 8004142:	4619      	mov	r1, r3
 8004144:	482a      	ldr	r0, [pc, #168]	; (80041f0 <MX_GPIO_Init+0x1dc>)
 8004146:	f001 fd41 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800414a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800414e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004150:	2301      	movs	r3, #1
 8004152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004158:	2300      	movs	r3, #0
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800415c:	f107 031c 	add.w	r3, r7, #28
 8004160:	4619      	mov	r1, r3
 8004162:	4821      	ldr	r0, [pc, #132]	; (80041e8 <MX_GPIO_Init+0x1d4>)
 8004164:	f001 fd32 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8004168:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800416c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	2301      	movs	r3, #1
 8004170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004176:	2302      	movs	r3, #2
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417a:	f107 031c 	add.w	r3, r7, #28
 800417e:	4619      	mov	r1, r3
 8004180:	481a      	ldr	r0, [pc, #104]	; (80041ec <MX_GPIO_Init+0x1d8>)
 8004182:	f001 fd23 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8004186:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800418a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418c:	2301      	movs	r3, #1
 800418e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4619      	mov	r1, r3
 800419e:	4813      	ldr	r0, [pc, #76]	; (80041ec <MX_GPIO_Init+0x1d8>)
 80041a0:	f001 fd14 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80041a4:	2340      	movs	r3, #64	; 0x40
 80041a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041a8:	2300      	movs	r3, #0
 80041aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	4619      	mov	r1, r3
 80041b6:	480d      	ldr	r0, [pc, #52]	; (80041ec <MX_GPIO_Init+0x1d8>)
 80041b8:	f001 fd08 	bl	8005bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80041bc:	2328      	movs	r3, #40	; 0x28
 80041be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041c8:	2302      	movs	r3, #2
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041cc:	f107 031c 	add.w	r3, r7, #28
 80041d0:	4619      	mov	r1, r3
 80041d2:	4807      	ldr	r0, [pc, #28]	; (80041f0 <MX_GPIO_Init+0x1dc>)
 80041d4:	f001 fcfa 	bl	8005bcc <HAL_GPIO_Init>

}
 80041d8:	bf00      	nop
 80041da:	3730      	adds	r7, #48	; 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40020800 	.word	0x40020800
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40020000 	.word	0x40020000

080041f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <MX_I2C1_Init+0x50>)
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <MX_I2C1_Init+0x54>)
 8004200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <MX_I2C1_Init+0x50>)
 8004204:	4a12      	ldr	r2, [pc, #72]	; (8004250 <MX_I2C1_Init+0x58>)
 8004206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <MX_I2C1_Init+0x50>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <MX_I2C1_Init+0x50>)
 8004210:	2200      	movs	r2, #0
 8004212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <MX_I2C1_Init+0x50>)
 8004216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800421a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <MX_I2C1_Init+0x50>)
 800421e:	2200      	movs	r2, #0
 8004220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <MX_I2C1_Init+0x50>)
 8004224:	2200      	movs	r2, #0
 8004226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <MX_I2C1_Init+0x50>)
 800422a:	2200      	movs	r2, #0
 800422c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <MX_I2C1_Init+0x50>)
 8004230:	2200      	movs	r2, #0
 8004232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004234:	4804      	ldr	r0, [pc, #16]	; (8004248 <MX_I2C1_Init+0x50>)
 8004236:	f001 fe97 	bl	8005f68 <HAL_I2C_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004240:	f000 f992 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	200025b4 	.word	0x200025b4
 800424c:	40005400 	.word	0x40005400
 8004250:	000186a0 	.word	0x000186a0

08004254 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <MX_I2C3_Init+0x50>)
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <MX_I2C3_Init+0x54>)
 800425c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <MX_I2C3_Init+0x50>)
 8004260:	4a12      	ldr	r2, [pc, #72]	; (80042ac <MX_I2C3_Init+0x58>)
 8004262:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_I2C3_Init+0x50>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <MX_I2C3_Init+0x50>)
 800426c:	2200      	movs	r2, #0
 800426e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <MX_I2C3_Init+0x50>)
 8004272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004276:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <MX_I2C3_Init+0x50>)
 800427a:	2200      	movs	r2, #0
 800427c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <MX_I2C3_Init+0x50>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <MX_I2C3_Init+0x50>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <MX_I2C3_Init+0x50>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004290:	4804      	ldr	r0, [pc, #16]	; (80042a4 <MX_I2C3_Init+0x50>)
 8004292:	f001 fe69 	bl	8005f68 <HAL_I2C_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800429c:	f000 f964 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20002608 	.word	0x20002608
 80042a8:	40005c00 	.word	0x40005c00
 80042ac:	000186a0 	.word	0x000186a0

080042b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	; 0x30
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b8:	f107 031c 	add.w	r3, r7, #28
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a4a      	ldr	r2, [pc, #296]	; (80043f8 <HAL_I2C_MspInit+0x148>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d12c      	bne.n	800432c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	4b49      	ldr	r3, [pc, #292]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	4a48      	ldr	r2, [pc, #288]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	6313      	str	r3, [r2, #48]	; 0x30
 80042e2:	4b46      	ldr	r3, [pc, #280]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80042ee:	23c0      	movs	r3, #192	; 0xc0
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f2:	2312      	movs	r3, #18
 80042f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fa:	2303      	movs	r3, #3
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042fe:	2304      	movs	r3, #4
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004302:	f107 031c 	add.w	r3, r7, #28
 8004306:	4619      	mov	r1, r3
 8004308:	483d      	ldr	r0, [pc, #244]	; (8004400 <HAL_I2C_MspInit+0x150>)
 800430a:	f001 fc5f 	bl	8005bcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800432a:	e060      	b.n	80043ee <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_I2C_MspInit+0x154>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d15b      	bne.n	80043ee <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	6313      	str	r3, [r2, #48]	; 0x30
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a28      	ldr	r2, [pc, #160]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b26      	ldr	r3, [pc, #152]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 800436e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004374:	2312      	movs	r3, #18
 8004376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004380:	2304      	movs	r3, #4
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8004384:	f107 031c 	add.w	r3, r7, #28
 8004388:	4619      	mov	r1, r3
 800438a:	481f      	ldr	r0, [pc, #124]	; (8004408 <HAL_I2C_MspInit+0x158>)
 800438c:	f001 fc1e 	bl	8005bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8004390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004396:	2312      	movs	r3, #18
 8004398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	2303      	movs	r3, #3
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043a2:	2304      	movs	r3, #4
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80043a6:	f107 031c 	add.w	r3, r7, #28
 80043aa:	4619      	mov	r1, r3
 80043ac:	4817      	ldr	r0, [pc, #92]	; (800440c <HAL_I2C_MspInit+0x15c>)
 80043ae:	f001 fc0d 	bl	8005bcc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 80043bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_I2C_MspInit+0x14c>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2100      	movs	r1, #0
 80043d2:	2048      	movs	r0, #72	; 0x48
 80043d4:	f001 f8a9 	bl	800552a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80043d8:	2048      	movs	r0, #72	; 0x48
 80043da:	f001 f8c2 	bl	8005562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	2049      	movs	r0, #73	; 0x49
 80043e4:	f001 f8a1 	bl	800552a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80043e8:	2049      	movs	r0, #73	; 0x49
 80043ea:	f001 f8ba 	bl	8005562 <HAL_NVIC_EnableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3730      	adds	r7, #48	; 0x30
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40005400 	.word	0x40005400
 80043fc:	40023800 	.word	0x40023800
 8004400:	40020400 	.word	0x40020400
 8004404:	40005c00 	.word	0x40005c00
 8004408:	40020800 	.word	0x40020800
 800440c:	40020000 	.word	0x40020000

08004410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004414:	f000 ff18 	bl	8005248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004418:	f000 f83c 	bl	8004494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800441c:	f7ff fdfa 	bl	8004014 <MX_GPIO_Init>
  MX_DMA_Init();
 8004420:	f7ff fdd8 	bl	8003fd4 <MX_DMA_Init>
  MX_I2C1_Init();
 8004424:	f7ff fee8 	bl	80041f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004428:	f7ff ff14 	bl	8004254 <MX_I2C3_Init>
  MX_SPI1_Init();
 800442c:	f000 f8a2 	bl	8004574 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004430:	f000 f8d6 	bl	80045e0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004434:	f000 fa6c 	bl	8004910 <MX_TIM3_Init>
  MX_UART5_Init();
 8004438:	f000 fde8 	bl	800500c <MX_UART5_Init>
  MX_USART3_UART_Init();
 800443c:	f000 fe10 	bl	8005060 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8004440:	f000 fac0 	bl	80049c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004444:	f000 fae2 	bl	8004a0c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8004448:	2101      	movs	r1, #1
 800444a:	480f      	ldr	r0, [pc, #60]	; (8004488 <main+0x78>)
 800444c:	f7fe fe20 	bl	8003090 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8004450:	480e      	ldr	r0, [pc, #56]	; (800448c <main+0x7c>)
 8004452:	f004 ff57 	bl	8009304 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8004456:	f7fc f841 	bl	80004dc <ILI9341_Init>
  Display_init_screen();
 800445a:	f7ff fbdf 	bl	8003c1c <Display_init_screen>

  Si468x_init();
 800445e:	f7fc fdfd 	bl	800105c <Si468x_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Si468x_dab_digrad_status();
 8004462:	f7fd fccb 	bl	8001dfc <Si468x_dab_digrad_status>
	  Si468x_dab_get_time();
 8004466:	f7fe fd25 	bl	8002eb4 <Si468x_dab_get_time>
	  Touch_Read(0);
 800446a:	2000      	movs	r0, #0
 800446c:	f000 fb94 	bl	8004b98 <Touch_Read>

	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8004470:	2101      	movs	r1, #1
 8004472:	4807      	ldr	r0, [pc, #28]	; (8004490 <main+0x80>)
 8004474:	f001 fd46 	bl	8005f04 <HAL_GPIO_ReadPin>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f1      	bne.n	8004462 <main+0x52>
	  {
		  Si468x_play_station(1);
 800447e:	2001      	movs	r0, #1
 8004480:	f7fe fd5e 	bl	8002f40 <Si468x_play_station>
	  Si468x_dab_digrad_status();
 8004484:	e7ed      	b.n	8004462 <main+0x52>
 8004486:	bf00      	nop
 8004488:	0800b4c8 	.word	0x0800b4c8
 800448c:	200027fc 	.word	0x200027fc
 8004490:	40020400 	.word	0x40020400

08004494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b094      	sub	sp, #80	; 0x50
 8004498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800449a:	f107 0320 	add.w	r3, r7, #32
 800449e:	2230      	movs	r2, #48	; 0x30
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f006 f8c0 	bl	800a628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <SystemClock_Config+0xcc>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	4a27      	ldr	r2, [pc, #156]	; (8004560 <SystemClock_Config+0xcc>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6413      	str	r3, [r2, #64]	; 0x40
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <SystemClock_Config+0xcc>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d4:	2300      	movs	r3, #0
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <SystemClock_Config+0xd0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a21      	ldr	r2, [pc, #132]	; (8004564 <SystemClock_Config+0xd0>)
 80044de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <SystemClock_Config+0xd0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044fa:	2302      	movs	r3, #2
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004504:	2304      	movs	r3, #4
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8004508:	23f0      	movs	r3, #240	; 0xf0
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800450c:	2302      	movs	r3, #2
 800450e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004510:	2304      	movs	r3, #4
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004514:	f107 0320 	add.w	r3, r7, #32
 8004518:	4618      	mov	r0, r3
 800451a:	f003 fb45 	bl	8007ba8 <HAL_RCC_OscConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004524:	f000 f820 	bl	8004568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004528:	230f      	movs	r3, #15
 800452a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800452c:	2302      	movs	r3, #2
 800452e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800453a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	2105      	movs	r1, #5
 8004546:	4618      	mov	r0, r3
 8004548:	f003 fda6 	bl	8008098 <HAL_RCC_ClockConfig>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004552:	f000 f809 	bl	8004568 <Error_Handler>
  }
}
 8004556:	bf00      	nop
 8004558:	3750      	adds	r7, #80	; 0x50
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000

08004568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800456c:	b672      	cpsid	i
}
 800456e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004570:	e7fe      	b.n	8004570 <Error_Handler+0x8>
	...

08004574 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <MX_SPI1_Init+0x64>)
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <MX_SPI1_Init+0x68>)
 800457c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <MX_SPI1_Init+0x64>)
 8004580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <MX_SPI1_Init+0x64>)
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <MX_SPI1_Init+0x64>)
 800458e:	2200      	movs	r2, #0
 8004590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <MX_SPI1_Init+0x64>)
 8004594:	2200      	movs	r2, #0
 8004596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <MX_SPI1_Init+0x64>)
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045a8:	2220      	movs	r2, #32
 80045aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045c0:	220a      	movs	r2, #10
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045c4:	4804      	ldr	r0, [pc, #16]	; (80045d8 <MX_SPI1_Init+0x64>)
 80045c6:	f003 ff87 	bl	80084d8 <HAL_SPI_Init>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80045d0:	f7ff ffca 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2000265c 	.word	0x2000265c
 80045dc:	40013000 	.word	0x40013000

080045e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <MX_SPI2_Init+0x64>)
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <MX_SPI2_Init+0x68>)
 80045e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <MX_SPI2_Init+0x64>)
 80045ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <MX_SPI2_Init+0x64>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <MX_SPI2_Init+0x64>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <MX_SPI2_Init+0x64>)
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <MX_SPI2_Init+0x64>)
 8004606:	2200      	movs	r2, #0
 8004608:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <MX_SPI2_Init+0x64>)
 800460c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004610:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <MX_SPI2_Init+0x64>)
 8004614:	2200      	movs	r2, #0
 8004616:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <MX_SPI2_Init+0x64>)
 800461a:	2200      	movs	r2, #0
 800461c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <MX_SPI2_Init+0x64>)
 8004620:	2200      	movs	r2, #0
 8004622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <MX_SPI2_Init+0x64>)
 8004626:	2200      	movs	r2, #0
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <MX_SPI2_Init+0x64>)
 800462c:	220a      	movs	r2, #10
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004630:	4804      	ldr	r0, [pc, #16]	; (8004644 <MX_SPI2_Init+0x64>)
 8004632:	f003 ff51 	bl	80084d8 <HAL_SPI_Init>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800463c:	f7ff ff94 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200026b4 	.word	0x200026b4
 8004648:	40003800 	.word	0x40003800

0800464c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 031c 	add.w	r3, r7, #28
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a4d      	ldr	r2, [pc, #308]	; (80047a0 <HAL_SPI_MspInit+0x154>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12c      	bne.n	80046c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 8004678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800467c:	6453      	str	r3, [r2, #68]	; 0x44
 800467e:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 80046a6:	23e0      	movs	r3, #224	; 0xe0
 80046a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b2:	2303      	movs	r3, #3
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046b6:	2305      	movs	r3, #5
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ba:	f107 031c 	add.w	r3, r7, #28
 80046be:	4619      	mov	r1, r3
 80046c0:	4839      	ldr	r0, [pc, #228]	; (80047a8 <HAL_SPI_MspInit+0x15c>)
 80046c2:	f001 fa83 	bl	8005bcc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80046c6:	e066      	b.n	8004796 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a37      	ldr	r2, [pc, #220]	; (80047ac <HAL_SPI_MspInit+0x160>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d161      	bne.n	8004796 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a32      	ldr	r2, [pc, #200]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 80046dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b2c      	ldr	r3, [pc, #176]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a2b      	ldr	r2, [pc, #172]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <HAL_SPI_MspInit+0x158>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800470a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800470e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800471c:	2305      	movs	r3, #5
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004720:	f107 031c 	add.w	r3, r7, #28
 8004724:	4619      	mov	r1, r3
 8004726:	4822      	ldr	r0, [pc, #136]	; (80047b0 <HAL_SPI_MspInit+0x164>)
 8004728:	f001 fa50 	bl	8005bcc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 800472e:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <HAL_SPI_MspInit+0x16c>)
 8004730:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 800473a:	2240      	movs	r2, #64	; 0x40
 800473c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004740:	2200      	movs	r2, #0
 8004742:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800474a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 800474e:	2200      	movs	r2, #0
 8004750:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004754:	2200      	movs	r2, #0
 8004756:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004758:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004760:	2200      	movs	r2, #0
 8004762:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004766:	2200      	movs	r2, #0
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800476a:	4812      	ldr	r0, [pc, #72]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 800476c:	f000 ff14 	bl	8005598 <HAL_DMA_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8004776:	f7ff fef7 	bl	8004568 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 800477e:	649a      	str	r2, [r3, #72]	; 0x48
 8004780:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <HAL_SPI_MspInit+0x168>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2100      	movs	r1, #0
 800478a:	2024      	movs	r0, #36	; 0x24
 800478c:	f000 fecd 	bl	800552a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004790:	2024      	movs	r0, #36	; 0x24
 8004792:	f000 fee6 	bl	8005562 <HAL_NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	3730      	adds	r7, #48	; 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40013000 	.word	0x40013000
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40003800 	.word	0x40003800
 80047b0:	40020400 	.word	0x40020400
 80047b4:	2000270c 	.word	0x2000270c
 80047b8:	40026070 	.word	0x40026070

080047bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_MspInit+0x4c>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <HAL_MspInit+0x4c>)
 80047cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_MspInit+0x4c>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_MspInit+0x4c>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <HAL_MspInit+0x4c>)
 80047e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6413      	str	r3, [r2, #64]	; 0x40
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_MspInit+0x4c>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004810:	e7fe      	b.n	8004810 <NMI_Handler+0x4>

08004812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004812:	b480      	push	{r7}
 8004814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004816:	e7fe      	b.n	8004816 <HardFault_Handler+0x4>

08004818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800481c:	e7fe      	b.n	800481c <MemManage_Handler+0x4>

0800481e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004822:	e7fe      	b.n	8004822 <BusFault_Handler+0x4>

08004824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004828:	e7fe      	b.n	8004828 <UsageFault_Handler+0x4>

0800482a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800482a:	b480      	push	{r7}
 800482c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004858:	f000 fd48 	bl	80052ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800485c:	bf00      	nop
 800485e:	bd80      	pop	{r7, pc}

08004860 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004864:	4802      	ldr	r0, [pc, #8]	; (8004870 <DMA1_Stream4_IRQHandler+0x10>)
 8004866:	f000 ff67 	bl	8005738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	2000270c 	.word	0x2000270c

08004874 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004878:	4802      	ldr	r0, [pc, #8]	; (8004884 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800487a:	f004 fe02 	bl	8009482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200027b4 	.word	0x200027b4

08004888 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800488e:	f004 fdf8 	bl	8009482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200027fc 	.word	0x200027fc

0800489c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048a0:	4802      	ldr	r0, [pc, #8]	; (80048ac <SPI2_IRQHandler+0x10>)
 80048a2:	f004 fa91 	bl	8008dc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200026b4 	.word	0x200026b4

080048b0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80048b4:	4802      	ldr	r0, [pc, #8]	; (80048c0 <I2C3_EV_IRQHandler+0x10>)
 80048b6:	f001 fc9b 	bl	80061f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20002608 	.word	0x20002608

080048c4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80048c8:	4802      	ldr	r0, [pc, #8]	; (80048d4 <I2C3_ER_IRQHandler+0x10>)
 80048ca:	f001 fe02 	bl	80064d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20002608 	.word	0x20002608

080048d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <SystemInit+0x20>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <SystemInit+0x20>)
 80048f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004916:	f107 0320 	add.w	r3, r7, #32
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	615a      	str	r2, [r3, #20]
 8004930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <MX_TIM3_Init+0xac>)
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <MX_TIM3_Init+0xb0>)
 8004936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004938:	4b20      	ldr	r3, [pc, #128]	; (80049bc <MX_TIM3_Init+0xac>)
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800493e:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <MX_TIM3_Init+0xac>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004944:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <MX_TIM3_Init+0xac>)
 8004946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <MX_TIM3_Init+0xac>)
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004952:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <MX_TIM3_Init+0xac>)
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004958:	4818      	ldr	r0, [pc, #96]	; (80049bc <MX_TIM3_Init+0xac>)
 800495a:	f004 fd43 	bl	80093e4 <HAL_TIM_PWM_Init>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004964:	f7ff fe00 	bl	8004568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004968:	2300      	movs	r3, #0
 800496a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004970:	f107 0320 	add.w	r3, r7, #32
 8004974:	4619      	mov	r1, r3
 8004976:	4811      	ldr	r0, [pc, #68]	; (80049bc <MX_TIM3_Init+0xac>)
 8004978:	f005 f9c6 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004982:	f7ff fdf1 	bl	8004568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004986:	2360      	movs	r3, #96	; 0x60
 8004988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	2208      	movs	r2, #8
 800499a:	4619      	mov	r1, r3
 800499c:	4807      	ldr	r0, [pc, #28]	; (80049bc <MX_TIM3_Init+0xac>)
 800499e:	f004 fe79 	bl	8009694 <HAL_TIM_PWM_ConfigChannel>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80049a8:	f7ff fdde 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80049ac:	4803      	ldr	r0, [pc, #12]	; (80049bc <MX_TIM3_Init+0xac>)
 80049ae:	f000 f8b9 	bl	8004b24 <HAL_TIM_MspPostInit>

}
 80049b2:	bf00      	nop
 80049b4:	3728      	adds	r7, #40	; 0x28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	2000276c 	.word	0x2000276c
 80049c0:	40000400 	.word	0x40000400

080049c4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049ca:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <MX_TIM10_Init+0x44>)
 80049cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049d0:	f643 2297 	movw	r2, #14999	; 0x3a97
 80049d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049de:	f240 2257 	movw	r2, #599	; 0x257
 80049e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80049f0:	4804      	ldr	r0, [pc, #16]	; (8004a04 <MX_TIM10_Init+0x40>)
 80049f2:	f004 fc37 	bl	8009264 <HAL_TIM_Base_Init>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80049fc:	f7ff fdb4 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	200027b4 	.word	0x200027b4
 8004a08:	40014400 	.word	0x40014400

08004a0c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a12:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <MX_TIM11_Init+0x44>)
 8004a14:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a18:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004a1c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a26:	f240 5213 	movw	r2, #1299	; 0x513
 8004a2a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a2c:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004a38:	4804      	ldr	r0, [pc, #16]	; (8004a4c <MX_TIM11_Init+0x40>)
 8004a3a:	f004 fc13 	bl	8009264 <HAL_TIM_Base_Init>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004a44:	f7ff fd90 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200027fc 	.word	0x200027fc
 8004a50:	40014800 	.word	0x40014800

08004a54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <HAL_TIM_PWM_MspInit+0x3c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <HAL_TIM_PWM_MspInit+0x40>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <HAL_TIM_PWM_MspInit+0x40>)
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <HAL_TIM_PWM_MspInit+0x40>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40023800 	.word	0x40023800

08004a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <HAL_TIM_Base_MspInit+0x80>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d116      	bne.n	8004ad8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_TIM_Base_MspInit+0x84>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_TIM_Base_MspInit+0x84>)
 8004ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_TIM_Base_MspInit+0x84>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2100      	movs	r1, #0
 8004aca:	2019      	movs	r0, #25
 8004acc:	f000 fd2d 	bl	800552a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004ad0:	2019      	movs	r0, #25
 8004ad2:	f000 fd46 	bl	8005562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004ad6:	e01a      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <HAL_TIM_Base_MspInit+0x88>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d115      	bne.n	8004b0e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <HAL_TIM_Base_MspInit+0x84>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <HAL_TIM_Base_MspInit+0x84>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af0:	6453      	str	r3, [r2, #68]	; 0x44
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_TIM_Base_MspInit+0x84>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	201a      	movs	r0, #26
 8004b04:	f000 fd11 	bl	800552a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004b08:	201a      	movs	r0, #26
 8004b0a:	f000 fd2a 	bl	8005562 <HAL_NVIC_EnableIRQ>
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40014800 	.word	0x40014800

08004b24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2c:	f107 030c 	add.w	r3, r7, #12
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <HAL_TIM_MspPostInit+0x68>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d11e      	bne.n	8004b84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_TIM_MspPostInit+0x6c>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	4a10      	ldr	r2, [pc, #64]	; (8004b90 <HAL_TIM_MspPostInit+0x6c>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6313      	str	r3, [r2, #48]	; 0x30
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_TIM_MspPostInit+0x6c>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8004b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b74:	2302      	movs	r3, #2
 8004b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4805      	ldr	r0, [pc, #20]	; (8004b94 <HAL_TIM_MspPostInit+0x70>)
 8004b80:	f001 f824 	bl	8005bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004b84:	bf00      	nop
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40020800 	.word	0x40020800

08004b98 <Touch_Read>:
uint8_t state=0;

char touch_itoa_buffer[64];

void Touch_Read(uint8_t state)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
	tp_dev.scan(0);
 8004ba2:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <Touch_Read+0xdc>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8004baa:	4b32      	ldr	r3, [pc, #200]	; (8004c74 <Touch_Read+0xdc>)
 8004bac:	7c1b      	ldrb	r3, [r3, #16]
 8004bae:	b25b      	sxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da5a      	bge.n	8004c6a <Touch_Read+0xd2>
	{
		xtemp = TP_Read_XOY(0xD0);
 8004bb4:	20d0      	movs	r0, #208	; 0xd0
 8004bb6:	f000 f909 	bl	8004dcc <TP_Read_XOY>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <Touch_Read+0xe0>)
 8004bc0:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8004bc2:	2090      	movs	r0, #144	; 0x90
 8004bc4:	f000 f902 	bl	8004dcc <TP_Read_XOY>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <Touch_Read+0xe4>)
 8004bce:	801a      	strh	r2, [r3, #0]

		x_pixel_val = 320 - 320 * (ytemp - 350) / (3900-350);
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <Touch_Read+0xe4>)
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	019b      	lsls	r3, r3, #6
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <Touch_Read+0xe8>)
 8004be2:	fb82 1203 	smull	r1, r2, r2, r3
 8004be6:	441a      	add	r2, r3
 8004be8:	12d2      	asrs	r2, r2, #11
 8004bea:	17db      	asrs	r3, r3, #31
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <Touch_Read+0xec>)
 8004bf8:	801a      	strh	r2, [r3, #0]

		y_pixel_val = 240 - 230 * (xtemp - 240) / (3800-230);
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <Touch_Read+0xe0>)
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	3bf0      	subs	r3, #240	; 0xf0
 8004c00:	22e6      	movs	r2, #230	; 0xe6
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <Touch_Read+0xf0>)
 8004c08:	fb82 1203 	smull	r1, r2, r2, r3
 8004c0c:	1252      	asrs	r2, r2, #9
 8004c0e:	17db      	asrs	r3, r3, #31
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	33f0      	adds	r3, #240	; 0xf0
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <Touch_Read+0xf4>)
 8004c1a:	801a      	strh	r2, [r3, #0]
//		send_debug_msg("x: ", CRLF_NO_SEND);
//		send_debug_msg(itoa(x_pixel_val, touch_itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(", y: ", CRLF_NO_SEND);
//		send_debug_msg(itoa(y_pixel_val, touch_itoa_buffer, 10), CRLF_SEND);

		if(x_pixel_val > 5 && x_pixel_val < 157 && y_pixel_val > 195 && x_pixel_val < 235)
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <Touch_Read+0xec>)
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	d90e      	bls.n	8004c42 <Touch_Read+0xaa>
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <Touch_Read+0xec>)
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2b9c      	cmp	r3, #156	; 0x9c
 8004c2a:	d80a      	bhi.n	8004c42 <Touch_Read+0xaa>
 8004c2c:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <Touch_Read+0xf4>)
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	2bc3      	cmp	r3, #195	; 0xc3
 8004c32:	d906      	bls.n	8004c42 <Touch_Read+0xaa>
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <Touch_Read+0xec>)
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	2bea      	cmp	r3, #234	; 0xea
 8004c3a:	d802      	bhi.n	8004c42 <Touch_Read+0xaa>
		{
			Si468x_play_station(0);
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fe f97f 	bl	8002f40 <Si468x_play_station>
		}

		if(x_pixel_val > 162 && x_pixel_val < 315 && y_pixel_val > 195 && x_pixel_val < 235)
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <Touch_Read+0xec>)
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	2ba2      	cmp	r3, #162	; 0xa2
 8004c48:	d90f      	bls.n	8004c6a <Touch_Read+0xd2>
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <Touch_Read+0xec>)
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004c52:	d80a      	bhi.n	8004c6a <Touch_Read+0xd2>
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <Touch_Read+0xf4>)
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	2bc3      	cmp	r3, #195	; 0xc3
 8004c5a:	d906      	bls.n	8004c6a <Touch_Read+0xd2>
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <Touch_Read+0xec>)
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	2bea      	cmp	r3, #234	; 0xea
 8004c62:	d802      	bhi.n	8004c6a <Touch_Read+0xd2>
		{
			Si468x_play_station(1);
 8004c64:	2001      	movs	r0, #1
 8004c66:	f7fe f96b 	bl	8002f40 <Si468x_play_station>
		}
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200000b0 	.word	0x200000b0
 8004c78:	20002844 	.word	0x20002844
 8004c7c:	20002846 	.word	0x20002846
 8004c80:	93afcf8b 	.word	0x93afcf8b
 8004c84:	20002848 	.word	0x20002848
 8004c88:	24b70025 	.word	0x24b70025
 8004c8c:	2000284a 	.word	0x2000284a

08004c90 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
 8004ca2:	e021      	b.n	8004ce8 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8004ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da05      	bge.n	8004cb8 <TP_Write_Byte+0x28>
			T_DIN_ON;
 8004cac:	2201      	movs	r2, #1
 8004cae:	2120      	movs	r1, #32
 8004cb0:	4811      	ldr	r0, [pc, #68]	; (8004cf8 <TP_Write_Byte+0x68>)
 8004cb2:	f001 f93f 	bl	8005f34 <HAL_GPIO_WritePin>
 8004cb6:	e004      	b.n	8004cc2 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2120      	movs	r1, #32
 8004cbc:	480e      	ldr	r0, [pc, #56]	; (8004cf8 <TP_Write_Byte+0x68>)
 8004cbe:	f001 f939 	bl	8005f34 <HAL_GPIO_WritePin>

		num <<= 1;
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2108      	movs	r1, #8
 8004ccc:	480a      	ldr	r0, [pc, #40]	; (8004cf8 <TP_Write_Byte+0x68>)
 8004cce:	f001 f931 	bl	8005f34 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f000 fb2a 	bl	800532c <HAL_Delay>
		T_CLK_ON;
 8004cd8:	2201      	movs	r2, #1
 8004cda:	2108      	movs	r1, #8
 8004cdc:	4806      	ldr	r0, [pc, #24]	; (8004cf8 <TP_Write_Byte+0x68>)
 8004cde:	f001 f929 	bl	8005f34 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b07      	cmp	r3, #7
 8004cec:	d9da      	bls.n	8004ca4 <TP_Write_Byte+0x14>
	}
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40020400 	.word	0x40020400

08004cfc <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2108      	movs	r1, #8
 8004d12:	482c      	ldr	r0, [pc, #176]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d14:	f001 f90e 	bl	8005f34 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	4829      	ldr	r0, [pc, #164]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d1e:	f001 f909 	bl	8005f34 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8004d22:	2200      	movs	r2, #0
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	4828      	ldr	r0, [pc, #160]	; (8004dc8 <TP_Read_AD+0xcc>)
 8004d28:	f001 f904 	bl	8005f34 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ffae 	bl	8004c90 <TP_Write_Byte>
	HAL_Delay(1);
 8004d34:	2001      	movs	r0, #1
 8004d36:	f000 faf9 	bl	800532c <HAL_Delay>
	T_CLK_OFF;
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2108      	movs	r1, #8
 8004d3e:	4821      	ldr	r0, [pc, #132]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d40:	f001 f8f8 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004d44:	2001      	movs	r0, #1
 8004d46:	f000 faf1 	bl	800532c <HAL_Delay>
	T_CLK_ON;
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	481d      	ldr	r0, [pc, #116]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d50:	f001 f8f0 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004d54:	2001      	movs	r0, #1
 8004d56:	f000 fae9 	bl	800532c <HAL_Delay>
	T_CLK_OFF;
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2108      	movs	r1, #8
 8004d5e:	4819      	ldr	r0, [pc, #100]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d60:	f001 f8e8 	bl	8005f34 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]
 8004d68:	e01c      	b.n	8004da4 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8004d6a:	89bb      	ldrh	r3, [r7, #12]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8004d70:	2200      	movs	r2, #0
 8004d72:	2108      	movs	r1, #8
 8004d74:	4813      	ldr	r0, [pc, #76]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d76:	f001 f8dd 	bl	8005f34 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f000 fad6 	bl	800532c <HAL_Delay>
		T_CLK_ON;
 8004d80:	2201      	movs	r2, #1
 8004d82:	2108      	movs	r1, #8
 8004d84:	480f      	ldr	r0, [pc, #60]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d86:	f001 f8d5 	bl	8005f34 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <TP_Read_AD+0xc8>)
 8004d8e:	f001 f8b9 	bl	8005f04 <HAL_GPIO_ReadPin>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <TP_Read_AD+0xa2>
 8004d98:	89bb      	ldrh	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	3301      	adds	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	d9df      	bls.n	8004d6a <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8004daa:	89bb      	ldrh	r3, [r7, #12]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8004db0:	2201      	movs	r2, #1
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <TP_Read_AD+0xcc>)
 8004db6:	f001 f8bd 	bl	8005f34 <HAL_GPIO_WritePin>
	return(Num);
 8004dba:	89bb      	ldrh	r3, [r7, #12]

}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40020400 	.word	0x40020400
 8004dc8:	40020c00 	.word	0x40020c00

08004dcc <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ff8f 	bl	8004cfc <TP_Read_AD>
}
 8004dde:	bf00      	nop
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <TP_Read_XY+0x3c>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ffe8 	bl	8004dcc <TP_Read_XOY>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <TP_Read_XY+0x40>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ffe1 	bl	8004dcc <TP_Read_XOY>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	89fa      	ldrh	r2, [r7, #14]
 8004e12:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	89ba      	ldrh	r2, [r7, #12]
 8004e18:	801a      	strh	r2, [r3, #0]
	return 1;
 8004e1a:	2301      	movs	r3, #1
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	200000d4 	.word	0x200000d4
 8004e28:	200000d5 	.word	0x200000d5

08004e2c <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8004e36:	f107 0212 	add.w	r2, r7, #18
 8004e3a:	f107 0314 	add.w	r3, r7, #20
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff ffd1 	bl	8004de8 <TP_Read_XY>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <TP_Read_XY2+0x28>
    	return(0);
 8004e50:	2300      	movs	r3, #0
 8004e52:	e049      	b.n	8004ee8 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8004e54:	f107 020e 	add.w	r2, r7, #14
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ffc2 	bl	8004de8 <TP_Read_XY>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <TP_Read_XY2+0x46>
    	return(0);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e03a      	b.n	8004ee8 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8004e72:	8a3a      	ldrh	r2, [r7, #16]
 8004e74:	8abb      	ldrh	r3, [r7, #20]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d804      	bhi.n	8004e84 <TP_Read_XY2+0x58>
 8004e7a:	8a3b      	ldrh	r3, [r7, #16]
 8004e7c:	3331      	adds	r3, #49	; 0x31
 8004e7e:	8aba      	ldrh	r2, [r7, #20]
 8004e80:	4293      	cmp	r3, r2
 8004e82:	da08      	bge.n	8004e96 <TP_Read_XY2+0x6a>
 8004e84:	8aba      	ldrh	r2, [r7, #20]
 8004e86:	8a3b      	ldrh	r3, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d82c      	bhi.n	8004ee6 <TP_Read_XY2+0xba>
 8004e8c:	8abb      	ldrh	r3, [r7, #20]
 8004e8e:	3331      	adds	r3, #49	; 0x31
 8004e90:	8a3a      	ldrh	r2, [r7, #16]
 8004e92:	4293      	cmp	r3, r2
 8004e94:	db27      	blt.n	8004ee6 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8004e96:	89fa      	ldrh	r2, [r7, #14]
 8004e98:	8a7b      	ldrh	r3, [r7, #18]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d804      	bhi.n	8004ea8 <TP_Read_XY2+0x7c>
 8004e9e:	89fb      	ldrh	r3, [r7, #14]
 8004ea0:	3331      	adds	r3, #49	; 0x31
 8004ea2:	8a7a      	ldrh	r2, [r7, #18]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	da08      	bge.n	8004eba <TP_Read_XY2+0x8e>
 8004ea8:	8a7a      	ldrh	r2, [r7, #18]
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d81a      	bhi.n	8004ee6 <TP_Read_XY2+0xba>
 8004eb0:	8a7b      	ldrh	r3, [r7, #18]
 8004eb2:	3331      	adds	r3, #49	; 0x31
 8004eb4:	89fa      	ldrh	r2, [r7, #14]
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	db15      	blt.n	8004ee6 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8004eba:	8abb      	ldrh	r3, [r7, #20]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	8a3b      	ldrh	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	0fda      	lsrs	r2, r3, #31
 8004ec4:	4413      	add	r3, r2
 8004ec6:	105b      	asrs	r3, r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8004ece:	8a7b      	ldrh	r3, [r7, #18]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	0fda      	lsrs	r2, r3, #31
 8004ed8:	4413      	add	r3, r2
 8004eda:	105b      	asrs	r3, r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	801a      	strh	r2, [r3, #0]
        return 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	483f      	ldr	r0, [pc, #252]	; (8004ffc <TP_Scan+0x10c>)
 8004efe:	f001 f801 	bl	8005f04 <HAL_GPIO_ReadPin>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d155      	bne.n	8004fb4 <TP_Scan+0xc4>
	{
		if(tp)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8004f0e:	493c      	ldr	r1, [pc, #240]	; (8005000 <TP_Scan+0x110>)
 8004f10:	483c      	ldr	r0, [pc, #240]	; (8005004 <TP_Scan+0x114>)
 8004f12:	f7ff ff8b 	bl	8004e2c <TP_Read_XY2>
 8004f16:	e03c      	b.n	8004f92 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8004f18:	4939      	ldr	r1, [pc, #228]	; (8005000 <TP_Scan+0x110>)
 8004f1a:	483a      	ldr	r0, [pc, #232]	; (8005004 <TP_Scan+0x114>)
 8004f1c:	f7ff ff86 	bl	8004e2c <TP_Read_XY2>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d035      	beq.n	8004f92 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8004f26:	4b38      	ldr	r3, [pc, #224]	; (8005008 <TP_Scan+0x118>)
 8004f28:	ed93 7a05 	vldr	s14, [r3, #20]
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <TP_Scan+0x118>)
 8004f2e:	899b      	ldrh	r3, [r3, #12]
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <TP_Scan+0x118>)
 8004f3e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 3a90 	vmov	r3, s15
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <TP_Scan+0x118>)
 8004f5a:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <TP_Scan+0x118>)
 8004f5e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004f62:	4b29      	ldr	r3, [pc, #164]	; (8005008 <TP_Scan+0x118>)
 8004f64:	89db      	ldrh	r3, [r3, #14]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f72:	4b25      	ldr	r3, [pc, #148]	; (8005008 <TP_Scan+0x118>)
 8004f74:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f88:	ee17 3a90 	vmov	r3, s15
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <TP_Scan+0x118>)
 8004f90:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <TP_Scan+0x118>)
 8004f94:	7c1b      	ldrb	r3, [r3, #16]
 8004f96:	b25b      	sxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	db26      	blt.n	8004fea <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <TP_Scan+0x118>)
 8004f9e:	22c0      	movs	r2, #192	; 0xc0
 8004fa0:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <TP_Scan+0x118>)
 8004fa4:	899a      	ldrh	r2, [r3, #12]
 8004fa6:	4b18      	ldr	r3, [pc, #96]	; (8005008 <TP_Scan+0x118>)
 8004fa8:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8004faa:	4b17      	ldr	r3, [pc, #92]	; (8005008 <TP_Scan+0x118>)
 8004fac:	89da      	ldrh	r2, [r3, #14]
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <TP_Scan+0x118>)
 8004fb0:	815a      	strh	r2, [r3, #10]
 8004fb2:	e01a      	b.n	8004fea <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8004fb4:	4b14      	ldr	r3, [pc, #80]	; (8005008 <TP_Scan+0x118>)
 8004fb6:	7c1b      	ldrb	r3, [r3, #16]
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da07      	bge.n	8004fce <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <TP_Scan+0x118>)
 8004fc0:	7c1b      	ldrb	r3, [r3, #16]
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <TP_Scan+0x118>)
 8004fca:	741a      	strb	r2, [r3, #16]
 8004fcc:	e00d      	b.n	8004fea <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8004fce:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <TP_Scan+0x118>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <TP_Scan+0x118>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <TP_Scan+0x118>)
 8004fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe0:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <TP_Scan+0x118>)
 8004fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe8:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <TP_Scan+0x118>)
 8004fec:	7c1b      	ldrb	r3, [r3, #16]
 8004fee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ff2:	b2db      	uxtb	r3, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40020c00 	.word	0x40020c00
 8005000:	200000be 	.word	0x200000be
 8005004:	200000bc 	.word	0x200000bc
 8005008:	200000b0 	.word	0x200000b0

0800500c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <MX_UART5_Init+0x4c>)
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <MX_UART5_Init+0x50>)
 8005014:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <MX_UART5_Init+0x4c>)
 8005018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800501c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <MX_UART5_Init+0x4c>)
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <MX_UART5_Init+0x4c>)
 8005026:	2200      	movs	r2, #0
 8005028:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <MX_UART5_Init+0x4c>)
 800502c:	2200      	movs	r2, #0
 800502e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <MX_UART5_Init+0x4c>)
 8005032:	220c      	movs	r2, #12
 8005034:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <MX_UART5_Init+0x4c>)
 8005038:	2200      	movs	r2, #0
 800503a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <MX_UART5_Init+0x4c>)
 800503e:	2200      	movs	r2, #0
 8005040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005042:	4805      	ldr	r0, [pc, #20]	; (8005058 <MX_UART5_Init+0x4c>)
 8005044:	f004 fef0 	bl	8009e28 <HAL_UART_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800504e:	f7ff fa8b 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2000284c 	.word	0x2000284c
 800505c:	40005000 	.word	0x40005000

08005060 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <MX_USART3_UART_Init+0x50>)
 8005068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 800506c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005074:	2200      	movs	r2, #0
 8005076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 800507a:	2200      	movs	r2, #0
 800507c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005086:	220c      	movs	r2, #12
 8005088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005092:	2200      	movs	r2, #0
 8005094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005096:	4805      	ldr	r0, [pc, #20]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005098:	f004 fec6 	bl	8009e28 <HAL_UART_Init>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80050a2:	f7ff fa61 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20002890 	.word	0x20002890
 80050b0:	40004800 	.word	0x40004800

080050b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050bc:	f107 031c 	add.w	r3, r7, #28
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a42      	ldr	r2, [pc, #264]	; (80051dc <HAL_UART_MspInit+0x128>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d14b      	bne.n	800516e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	4a40      	ldr	r2, [pc, #256]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 80050e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050e4:	6413      	str	r3, [r2, #64]	; 0x40
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	4b3a      	ldr	r3, [pc, #232]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	6313      	str	r3, [r2, #48]	; 0x30
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	4a32      	ldr	r2, [pc, #200]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 8005118:	f043 0308 	orr.w	r3, r3, #8
 800511c:	6313      	str	r3, [r2, #48]	; 0x30
 800511e:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800512a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005130:	2302      	movs	r3, #2
 8005132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005138:	2303      	movs	r3, #3
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800513c:	2308      	movs	r3, #8
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005140:	f107 031c 	add.w	r3, r7, #28
 8005144:	4619      	mov	r1, r3
 8005146:	4827      	ldr	r0, [pc, #156]	; (80051e4 <HAL_UART_MspInit+0x130>)
 8005148:	f000 fd40 	bl	8005bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800514c:	2304      	movs	r3, #4
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005150:	2302      	movs	r3, #2
 8005152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005154:	2300      	movs	r3, #0
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	2303      	movs	r3, #3
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800515c:	2308      	movs	r3, #8
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005160:	f107 031c 	add.w	r3, r7, #28
 8005164:	4619      	mov	r1, r3
 8005166:	4820      	ldr	r0, [pc, #128]	; (80051e8 <HAL_UART_MspInit+0x134>)
 8005168:	f000 fd30 	bl	8005bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800516c:	e031      	b.n	80051d2 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_UART_MspInit+0x138>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d12c      	bne.n	80051d2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 8005182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005186:	6413      	str	r3, [r2, #64]	; 0x40
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 800519e:	f043 0302 	orr.w	r3, r3, #2
 80051a2:	6313      	str	r3, [r2, #48]	; 0x30
 80051a4:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <HAL_UART_MspInit+0x12c>)
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80051b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b6:	2302      	movs	r3, #2
 80051b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051be:	2303      	movs	r3, #3
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051c2:	2307      	movs	r3, #7
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c6:	f107 031c 	add.w	r3, r7, #28
 80051ca:	4619      	mov	r1, r3
 80051cc:	4808      	ldr	r0, [pc, #32]	; (80051f0 <HAL_UART_MspInit+0x13c>)
 80051ce:	f000 fcfd 	bl	8005bcc <HAL_GPIO_Init>
}
 80051d2:	bf00      	nop
 80051d4:	3730      	adds	r7, #48	; 0x30
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40005000 	.word	0x40005000
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40020800 	.word	0x40020800
 80051e8:	40020c00 	.word	0x40020c00
 80051ec:	40004800 	.word	0x40004800
 80051f0:	40020400 	.word	0x40020400

080051f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80051f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800522c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051f8:	480d      	ldr	r0, [pc, #52]	; (8005230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051fa:	490e      	ldr	r1, [pc, #56]	; (8005234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051fc:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005200:	e002      	b.n	8005208 <LoopCopyDataInit>

08005202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005206:	3304      	adds	r3, #4

08005208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800520a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800520c:	d3f9      	bcc.n	8005202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800520e:	4a0b      	ldr	r2, [pc, #44]	; (800523c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005210:	4c0b      	ldr	r4, [pc, #44]	; (8005240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005214:	e001      	b.n	800521a <LoopFillZerobss>

08005216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005218:	3204      	adds	r2, #4

0800521a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800521a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800521c:	d3fb      	bcc.n	8005216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800521e:	f7ff fb65 	bl	80048ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005222:	f005 f9c3 	bl	800a5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005226:	f7ff f8f3 	bl	8004410 <main>
  bx  lr    
 800522a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800522c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005234:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8005238:	0800d49c 	.word	0x0800d49c
  ldr r2, =_sbss
 800523c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8005240:	200028d8 	.word	0x200028d8

08005244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005244:	e7fe      	b.n	8005244 <ADC_IRQHandler>
	...

08005248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <HAL_Init+0x40>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0d      	ldr	r2, [pc, #52]	; (8005288 <HAL_Init+0x40>)
 8005252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <HAL_Init+0x40>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_Init+0x40>)
 800525e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005264:	4b08      	ldr	r3, [pc, #32]	; (8005288 <HAL_Init+0x40>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a07      	ldr	r2, [pc, #28]	; (8005288 <HAL_Init+0x40>)
 800526a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005270:	2003      	movs	r0, #3
 8005272:	f000 f94f 	bl	8005514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005276:	200f      	movs	r0, #15
 8005278:	f000 f808 	bl	800528c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800527c:	f7ff fa9e 	bl	80047bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023c00 	.word	0x40023c00

0800528c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005294:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <HAL_InitTick+0x54>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_InitTick+0x58>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f967 	bl	800557e <HAL_SYSTICK_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e00e      	b.n	80052d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b0f      	cmp	r3, #15
 80052be:	d80a      	bhi.n	80052d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052c0:	2200      	movs	r2, #0
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	f000 f92f 	bl	800552a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052cc:	4a06      	ldr	r2, [pc, #24]	; (80052e8 <HAL_InitTick+0x5c>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	200000ac 	.word	0x200000ac
 80052e4:	200000dc 	.word	0x200000dc
 80052e8:	200000d8 	.word	0x200000d8

080052ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_IncTick+0x20>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_IncTick+0x24>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4413      	add	r3, r2
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <HAL_IncTick+0x24>)
 80052fe:	6013      	str	r3, [r2, #0]
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	200000dc 	.word	0x200000dc
 8005310:	200028d4 	.word	0x200028d4

08005314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return uwTick;
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_GetTick+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	200028d4 	.word	0x200028d4

0800532c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005334:	f7ff ffee 	bl	8005314 <HAL_GetTick>
 8005338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d005      	beq.n	8005352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_Delay+0x44>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005352:	bf00      	nop
 8005354:	f7ff ffde 	bl	8005314 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	429a      	cmp	r2, r3
 8005362:	d8f7      	bhi.n	8005354 <HAL_Delay+0x28>
  {
  }
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	200000dc 	.word	0x200000dc

08005374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800539c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a6:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	60d3      	str	r3, [r2, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__NVIC_GetPriorityGrouping+0x18>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 0307 	and.w	r3, r3, #7
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db0b      	blt.n	8005402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f003 021f 	and.w	r2, r3, #31
 80053f0:	4907      	ldr	r1, [pc, #28]	; (8005410 <__NVIC_EnableIRQ+0x38>)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2001      	movs	r0, #1
 80053fa:	fa00 f202 	lsl.w	r2, r0, r2
 80053fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e100 	.word	0xe000e100

08005414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	2b00      	cmp	r3, #0
 8005426:	db0a      	blt.n	800543e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	490c      	ldr	r1, [pc, #48]	; (8005460 <__NVIC_SetPriority+0x4c>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	440b      	add	r3, r1
 8005438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800543c:	e00a      	b.n	8005454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4908      	ldr	r1, [pc, #32]	; (8005464 <__NVIC_SetPriority+0x50>)
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	3b04      	subs	r3, #4
 800544c:	0112      	lsls	r2, r2, #4
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	440b      	add	r3, r1
 8005452:	761a      	strb	r2, [r3, #24]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000e100 	.word	0xe000e100
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005468:	b480      	push	{r7}
 800546a:	b089      	sub	sp, #36	; 0x24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f1c3 0307 	rsb	r3, r3, #7
 8005482:	2b04      	cmp	r3, #4
 8005484:	bf28      	it	cs
 8005486:	2304      	movcs	r3, #4
 8005488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3304      	adds	r3, #4
 800548e:	2b06      	cmp	r3, #6
 8005490:	d902      	bls.n	8005498 <NVIC_EncodePriority+0x30>
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3b03      	subs	r3, #3
 8005496:	e000      	b.n	800549a <NVIC_EncodePriority+0x32>
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800549c:	f04f 32ff 	mov.w	r2, #4294967295
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	401a      	ands	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b0:	f04f 31ff 	mov.w	r1, #4294967295
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	43d9      	mvns	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c0:	4313      	orrs	r3, r2
         );
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	; 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054e0:	d301      	bcc.n	80054e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054e2:	2301      	movs	r3, #1
 80054e4:	e00f      	b.n	8005506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <SysTick_Config+0x40>)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ee:	210f      	movs	r1, #15
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	f7ff ff8e 	bl	8005414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <SysTick_Config+0x40>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <SysTick_Config+0x40>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010

08005514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff29 	bl	8005374 <__NVIC_SetPriorityGrouping>
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	4603      	mov	r3, r0
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800553c:	f7ff ff3e 	bl	80053bc <__NVIC_GetPriorityGrouping>
 8005540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f7ff ff8e 	bl	8005468 <NVIC_EncodePriority>
 800554c:	4602      	mov	r2, r0
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff5d 	bl	8005414 <__NVIC_SetPriority>
}
 800555a:	bf00      	nop
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	4603      	mov	r3, r0
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800556c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff31 	bl	80053d8 <__NVIC_EnableIRQ>
}
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff ffa2 	bl	80054d0 <SysTick_Config>
 800558c:	4603      	mov	r3, r0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055a4:	f7ff feb6 	bl	8005314 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e099      	b.n	80056e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d4:	e00f      	b.n	80055f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055d6:	f7ff fe9d 	bl	8005314 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d908      	bls.n	80055f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e078      	b.n	80056e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e8      	bne.n	80055d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <HAL_DMA_Init+0x158>)
 8005610:	4013      	ands	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b04      	cmp	r3, #4
 800564e:	d107      	bne.n	8005660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4313      	orrs	r3, r2
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b04      	cmp	r3, #4
 8005688:	d117      	bne.n	80056ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fa19 	bl	8005ad4 <DMA_CheckFifoParam>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056b6:	2301      	movs	r3, #1
 80056b8:	e016      	b.n	80056e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9d0 	bl	8005a68 <DMA_CalcBaseAndBitshift>
 80056c8:	4603      	mov	r3, r0
 80056ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	223f      	movs	r2, #63	; 0x3f
 80056d2:	409a      	lsls	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	f010803f 	.word	0xf010803f

080056f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d004      	beq.n	8005712 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2280      	movs	r2, #128	; 0x80
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e00c      	b.n	800572c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2205      	movs	r2, #5
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005744:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_DMA_IRQHandler+0x248>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a8e      	ldr	r2, [pc, #568]	; (8005984 <HAL_DMA_IRQHandler+0x24c>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0a9b      	lsrs	r3, r3, #10
 8005750:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	2208      	movs	r2, #8
 8005764:	409a      	lsls	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4013      	ands	r3, r2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d013      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0204 	bic.w	r2, r2, #4
 800578a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	2208      	movs	r2, #8
 8005792:	409a      	lsls	r2, r3
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	f043 0201 	orr.w	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a8:	2201      	movs	r2, #1
 80057aa:	409a      	lsls	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d012      	beq.n	80057da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	2201      	movs	r2, #1
 80057c8:	409a      	lsls	r2, r3
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	f043 0202 	orr.w	r2, r3, #2
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057de:	2204      	movs	r2, #4
 80057e0:	409a      	lsls	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	2204      	movs	r2, #4
 80057fe:	409a      	lsls	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005808:	f043 0204 	orr.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	2210      	movs	r2, #16
 8005816:	409a      	lsls	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d043      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d03c      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	2210      	movs	r2, #16
 8005834:	409a      	lsls	r2, r3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d018      	beq.n	800587a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d108      	bne.n	8005868 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d024      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
 8005866:	e01f      	b.n	80058a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	4798      	blx	r3
 8005878:	e016      	b.n	80058a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0208 	bic.w	r2, r2, #8
 8005896:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ac:	2220      	movs	r2, #32
 80058ae:	409a      	lsls	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 808f 	beq.w	80059d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8087 	beq.w	80059d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	2220      	movs	r2, #32
 80058d0:	409a      	lsls	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d136      	bne.n	8005950 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0216 	bic.w	r2, r2, #22
 80058f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005900:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <HAL_DMA_IRQHandler+0x1da>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0208 	bic.w	r2, r2, #8
 8005920:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005926:	223f      	movs	r2, #63	; 0x3f
 8005928:	409a      	lsls	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005942:	2b00      	cmp	r3, #0
 8005944:	d07e      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
        }
        return;
 800594e:	e079      	b.n	8005a44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01d      	beq.n	800599a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10d      	bne.n	8005988 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	2b00      	cmp	r3, #0
 8005972:	d031      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
 800597c:	e02c      	b.n	80059d8 <HAL_DMA_IRQHandler+0x2a0>
 800597e:	bf00      	nop
 8005980:	200000ac 	.word	0x200000ac
 8005984:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d023      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
 8005998:	e01e      	b.n	80059d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10f      	bne.n	80059c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0210 	bic.w	r2, r2, #16
 80059b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d032      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d022      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2205      	movs	r2, #5
 80059f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d307      	bcc.n	8005a20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f2      	bne.n	8005a04 <HAL_DMA_IRQHandler+0x2cc>
 8005a1e:	e000      	b.n	8005a22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
 8005a42:	e000      	b.n	8005a46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a44:	bf00      	nop
    }
  }
}
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a5a:	b2db      	uxtb	r3, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3b10      	subs	r3, #16
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <DMA_CalcBaseAndBitshift+0x64>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a82:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d909      	bls.n	8005aaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8005aa8:	e007      	b.n	8005aba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	aaaaaaab 	.word	0xaaaaaaab
 8005ad0:	0800d45c 	.word	0x0800d45c

08005ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11f      	bne.n	8005b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d856      	bhi.n	8005ba2 <DMA_CheckFifoParam+0xce>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <DMA_CheckFifoParam+0x28>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b0d 	.word	0x08005b0d
 8005b00:	08005b1f 	.word	0x08005b1f
 8005b04:	08005b0d 	.word	0x08005b0d
 8005b08:	08005ba3 	.word	0x08005ba3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d046      	beq.n	8005ba6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b1c:	e043      	b.n	8005ba6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b26:	d140      	bne.n	8005baa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2c:	e03d      	b.n	8005baa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b36:	d121      	bne.n	8005b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d837      	bhi.n	8005bae <DMA_CheckFifoParam+0xda>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <DMA_CheckFifoParam+0x70>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b5b 	.word	0x08005b5b
 8005b4c:	08005b55 	.word	0x08005b55
 8005b50:	08005b6d 	.word	0x08005b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	e030      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d025      	beq.n	8005bb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b6a:	e022      	b.n	8005bb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b74:	d11f      	bne.n	8005bb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b7a:	e01c      	b.n	8005bb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d903      	bls.n	8005b8a <DMA_CheckFifoParam+0xb6>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d003      	beq.n	8005b90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b88:	e018      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8e:	e015      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e00b      	b.n	8005bba <DMA_CheckFifoParam+0xe6>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e00a      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e008      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      break;
 8005baa:	bf00      	nop
 8005bac:	e006      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e004      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e002      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      break;   
 8005bb6:	bf00      	nop
 8005bb8:	e000      	b.n	8005bbc <DMA_CheckFifoParam+0xe8>
      break;
 8005bba:	bf00      	nop
    }
  } 
  
  return status; 
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop

08005bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	; 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	e16b      	b.n	8005ec0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005be8:	2201      	movs	r2, #1
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	f040 815a 	bne.w	8005eba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d005      	beq.n	8005c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d130      	bne.n	8005c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	2203      	movs	r2, #3
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c54:	2201      	movs	r2, #1
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 0201 	and.w	r2, r3, #1
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d017      	beq.n	8005cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	2203      	movs	r2, #3
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d123      	bne.n	8005d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	08da      	lsrs	r2, r3, #3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3208      	adds	r2, #8
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	220f      	movs	r2, #15
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	08da      	lsrs	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3208      	adds	r2, #8
 8005d0a:	69b9      	ldr	r1, [r7, #24]
 8005d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	43db      	mvns	r3, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4013      	ands	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 0203 	and.w	r2, r3, #3
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80b4 	beq.w	8005eba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	4b60      	ldr	r3, [pc, #384]	; (8005ed8 <HAL_GPIO_Init+0x30c>)
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	4a5f      	ldr	r2, [pc, #380]	; (8005ed8 <HAL_GPIO_Init+0x30c>)
 8005d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d60:	6453      	str	r3, [r2, #68]	; 0x44
 8005d62:	4b5d      	ldr	r3, [pc, #372]	; (8005ed8 <HAL_GPIO_Init+0x30c>)
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d6e:	4a5b      	ldr	r2, [pc, #364]	; (8005edc <HAL_GPIO_Init+0x310>)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	3302      	adds	r3, #2
 8005d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	220f      	movs	r2, #15
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a52      	ldr	r2, [pc, #328]	; (8005ee0 <HAL_GPIO_Init+0x314>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d02b      	beq.n	8005df2 <HAL_GPIO_Init+0x226>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a51      	ldr	r2, [pc, #324]	; (8005ee4 <HAL_GPIO_Init+0x318>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d025      	beq.n	8005dee <HAL_GPIO_Init+0x222>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a50      	ldr	r2, [pc, #320]	; (8005ee8 <HAL_GPIO_Init+0x31c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01f      	beq.n	8005dea <HAL_GPIO_Init+0x21e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a4f      	ldr	r2, [pc, #316]	; (8005eec <HAL_GPIO_Init+0x320>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d019      	beq.n	8005de6 <HAL_GPIO_Init+0x21a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a4e      	ldr	r2, [pc, #312]	; (8005ef0 <HAL_GPIO_Init+0x324>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <HAL_GPIO_Init+0x216>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a4d      	ldr	r2, [pc, #308]	; (8005ef4 <HAL_GPIO_Init+0x328>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00d      	beq.n	8005dde <HAL_GPIO_Init+0x212>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a4c      	ldr	r2, [pc, #304]	; (8005ef8 <HAL_GPIO_Init+0x32c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <HAL_GPIO_Init+0x20e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a4b      	ldr	r2, [pc, #300]	; (8005efc <HAL_GPIO_Init+0x330>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_GPIO_Init+0x20a>
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	e00e      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	e00c      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005dda:	2306      	movs	r3, #6
 8005ddc:	e00a      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005dde:	2305      	movs	r3, #5
 8005de0:	e008      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005de2:	2304      	movs	r3, #4
 8005de4:	e006      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005de6:	2303      	movs	r3, #3
 8005de8:	e004      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e002      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_GPIO_Init+0x228>
 8005df2:	2300      	movs	r3, #0
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	f002 0203 	and.w	r2, r2, #3
 8005dfa:	0092      	lsls	r2, r2, #2
 8005dfc:	4093      	lsls	r3, r2
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e04:	4935      	ldr	r1, [pc, #212]	; (8005edc <HAL_GPIO_Init+0x310>)
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	089b      	lsrs	r3, r3, #2
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e36:	4a32      	ldr	r2, [pc, #200]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e3c:	4b30      	ldr	r3, [pc, #192]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e60:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e8a:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005eb4:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <HAL_GPIO_Init+0x334>)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2b0f      	cmp	r3, #15
 8005ec4:	f67f ae90 	bls.w	8005be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	3724      	adds	r7, #36	; 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40013800 	.word	0x40013800
 8005ee0:	40020000 	.word	0x40020000
 8005ee4:	40020400 	.word	0x40020400
 8005ee8:	40020800 	.word	0x40020800
 8005eec:	40020c00 	.word	0x40020c00
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40021400 	.word	0x40021400
 8005ef8:	40021800 	.word	0x40021800
 8005efc:	40021c00 	.word	0x40021c00
 8005f00:	40013c00 	.word	0x40013c00

08005f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e001      	b.n	8005f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
 8005f40:	4613      	mov	r3, r2
 8005f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f44:	787b      	ldrb	r3, [r7, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f4a:	887a      	ldrh	r2, [r7, #2]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f50:	e003      	b.n	8005f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f52:	887b      	ldrh	r3, [r7, #2]
 8005f54:	041a      	lsls	r2, r3, #16
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	619a      	str	r2, [r3, #24]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e12b      	b.n	80061d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fe f98e 	bl	80042b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	; 0x24
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f002 fa5c 	bl	8008488 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4a81      	ldr	r2, [pc, #516]	; (80061dc <HAL_I2C_Init+0x274>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d807      	bhi.n	8005fec <HAL_I2C_Init+0x84>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a80      	ldr	r2, [pc, #512]	; (80061e0 <HAL_I2C_Init+0x278>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bf94      	ite	ls
 8005fe4:	2301      	movls	r3, #1
 8005fe6:	2300      	movhi	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	e006      	b.n	8005ffa <HAL_I2C_Init+0x92>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a7d      	ldr	r2, [pc, #500]	; (80061e4 <HAL_I2C_Init+0x27c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	bf94      	ite	ls
 8005ff4:	2301      	movls	r3, #1
 8005ff6:	2300      	movhi	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0e7      	b.n	80061d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4a78      	ldr	r2, [pc, #480]	; (80061e8 <HAL_I2C_Init+0x280>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	0c9b      	lsrs	r3, r3, #18
 800600c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a6a      	ldr	r2, [pc, #424]	; (80061dc <HAL_I2C_Init+0x274>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d802      	bhi.n	800603c <HAL_I2C_Init+0xd4>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3301      	adds	r3, #1
 800603a:	e009      	b.n	8006050 <HAL_I2C_Init+0xe8>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	4a69      	ldr	r2, [pc, #420]	; (80061ec <HAL_I2C_Init+0x284>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	099b      	lsrs	r3, r3, #6
 800604e:	3301      	adds	r3, #1
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	430b      	orrs	r3, r1
 8006056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	495c      	ldr	r1, [pc, #368]	; (80061dc <HAL_I2C_Init+0x274>)
 800606c:	428b      	cmp	r3, r1
 800606e:	d819      	bhi.n	80060a4 <HAL_I2C_Init+0x13c>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1e59      	subs	r1, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	fbb1 f3f3 	udiv	r3, r1, r3
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006084:	400b      	ands	r3, r1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_I2C_Init+0x138>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1e59      	subs	r1, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	fbb1 f3f3 	udiv	r3, r1, r3
 8006098:	3301      	adds	r3, #1
 800609a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800609e:	e051      	b.n	8006144 <HAL_I2C_Init+0x1dc>
 80060a0:	2304      	movs	r3, #4
 80060a2:	e04f      	b.n	8006144 <HAL_I2C_Init+0x1dc>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d111      	bne.n	80060d0 <HAL_I2C_Init+0x168>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1e58      	subs	r0, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	440b      	add	r3, r1
 80060ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e012      	b.n	80060f6 <HAL_I2C_Init+0x18e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1e58      	subs	r0, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	0099      	lsls	r1, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e6:	3301      	adds	r3, #1
 80060e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf0c      	ite	eq
 80060f0:	2301      	moveq	r3, #1
 80060f2:	2300      	movne	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Init+0x196>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e022      	b.n	8006144 <HAL_I2C_Init+0x1dc>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10e      	bne.n	8006124 <HAL_I2C_Init+0x1bc>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1e58      	subs	r0, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6859      	ldr	r1, [r3, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	440b      	add	r3, r1
 8006114:	fbb0 f3f3 	udiv	r3, r0, r3
 8006118:	3301      	adds	r3, #1
 800611a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006122:	e00f      	b.n	8006144 <HAL_I2C_Init+0x1dc>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1e58      	subs	r0, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6859      	ldr	r1, [r3, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	0099      	lsls	r1, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	fbb0 f3f3 	udiv	r3, r0, r3
 800613a:	3301      	adds	r3, #1
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	6809      	ldr	r1, [r1, #0]
 8006148:	4313      	orrs	r3, r2
 800614a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6911      	ldr	r1, [r2, #16]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68d2      	ldr	r2, [r2, #12]
 800617e:	4311      	orrs	r1, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	430b      	orrs	r3, r1
 8006186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	000186a0 	.word	0x000186a0
 80061e0:	001e847f 	.word	0x001e847f
 80061e4:	003d08ff 	.word	0x003d08ff
 80061e8:	431bde83 	.word	0x431bde83
 80061ec:	10624dd3 	.word	0x10624dd3

080061f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006210:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b10      	cmp	r3, #16
 800621e:	d003      	beq.n	8006228 <HAL_I2C_EV_IRQHandler+0x38>
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	f040 80c1 	bne.w	80063aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10d      	bne.n	800625e <HAL_I2C_EV_IRQHandler+0x6e>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006248:	d003      	beq.n	8006252 <HAL_I2C_EV_IRQHandler+0x62>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006250:	d101      	bne.n	8006256 <HAL_I2C_EV_IRQHandler+0x66>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <HAL_I2C_EV_IRQHandler+0x68>
 8006256:	2300      	movs	r3, #0
 8006258:	2b01      	cmp	r3, #1
 800625a:	f000 8132 	beq.w	80064c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00c      	beq.n	8006282 <HAL_I2C_EV_IRQHandler+0x92>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	0a5b      	lsrs	r3, r3, #9
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d006      	beq.n	8006282 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fc7b 	bl	8007b70 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fd83 	bl	8006d86 <I2C_Master_SB>
 8006280:	e092      	b.n	80063a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	0a5b      	lsrs	r3, r3, #9
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fdf9 	bl	8006e92 <I2C_Master_ADD10>
 80062a0:	e082      	b.n	80063a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0a5b      	lsrs	r3, r3, #9
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fe13 	bl	8006ee6 <I2C_Master_ADDR>
 80062c0:	e072      	b.n	80063a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d03b      	beq.n	8006346 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062dc:	f000 80f3 	beq.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	09db      	lsrs	r3, r3, #7
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <HAL_I2C_EV_IRQHandler+0x11c>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	0a9b      	lsrs	r3, r3, #10
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <HAL_I2C_EV_IRQHandler+0x11c>
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f9f3 	bl	80066f0 <I2C_MasterTransmit_TXE>
 800630a:	e04d      	b.n	80063a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80d6 	beq.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	0a5b      	lsrs	r3, r3, #9
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80cf 	beq.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b21      	cmp	r3, #33	; 0x21
 800632c:	d103      	bne.n	8006336 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa7a 	bl	8006828 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006334:	e0c7      	b.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	f040 80c4 	bne.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fae8 	bl	8006914 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006344:	e0bf      	b.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006354:	f000 80b7 	beq.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	099b      	lsrs	r3, r3, #6
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <HAL_I2C_EV_IRQHandler+0x194>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0a9b      	lsrs	r3, r3, #10
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <HAL_I2C_EV_IRQHandler+0x194>
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	089b      	lsrs	r3, r3, #2
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fb5d 	bl	8006a3c <I2C_MasterReceive_RXNE>
 8006382:	e011      	b.n	80063a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	089b      	lsrs	r3, r3, #2
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 809a 	beq.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	0a5b      	lsrs	r3, r3, #9
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8093 	beq.w	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fc06 	bl	8006bb2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063a6:	e08e      	b.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80063a8:	e08d      	b.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	e007      	b.n	80063cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <HAL_I2C_EV_IRQHandler+0x20e>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	0a5b      	lsrs	r3, r3, #9
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80063f4:	69b9      	ldr	r1, [r7, #24]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 ffc4 	bl	8007384 <I2C_Slave_ADDR>
 80063fc:	e066      	b.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <HAL_I2C_EV_IRQHandler+0x22e>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	0a5b      	lsrs	r3, r3, #9
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fffe 	bl	8007418 <I2C_Slave_STOPF>
 800641c:	e056      	b.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b21      	cmp	r3, #33	; 0x21
 8006422:	d002      	beq.n	800642a <HAL_I2C_EV_IRQHandler+0x23a>
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b29      	cmp	r3, #41	; 0x29
 8006428:	d125      	bne.n	8006476 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00f      	beq.n	8006456 <HAL_I2C_EV_IRQHandler+0x266>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	0a9b      	lsrs	r3, r3, #10
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_I2C_EV_IRQHandler+0x266>
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	089b      	lsrs	r3, r3, #2
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 feda 	bl	8007208 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006454:	e039      	b.n	80064ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d033      	beq.n	80064ca <HAL_I2C_EV_IRQHandler+0x2da>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	0a5b      	lsrs	r3, r3, #9
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02d      	beq.n	80064ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 ff07 	bl	8007282 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006474:	e029      	b.n	80064ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	099b      	lsrs	r3, r3, #6
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00f      	beq.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	0a9b      	lsrs	r3, r3, #10
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	089b      	lsrs	r3, r3, #2
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 ff12 	bl	80072c4 <I2C_SlaveReceive_RXNE>
 80064a0:	e014      	b.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	089b      	lsrs	r3, r3, #2
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	0a5b      	lsrs	r3, r3, #9
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 ff40 	bl	8007340 <I2C_SlaveReceive_BTF>
 80064c0:	e004      	b.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b08a      	sub	sp, #40	; 0x28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	0a1b      	lsrs	r3, r3, #8
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00e      	beq.n	8006520 <HAL_I2C_ER_IRQHandler+0x4e>
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800651e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	0a5b      	lsrs	r3, r3, #9
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00e      	beq.n	800654a <HAL_I2C_ER_IRQHandler+0x78>
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	f043 0302 	orr.w	r3, r3, #2
 800653e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006548:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	0a9b      	lsrs	r3, r3, #10
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d03f      	beq.n	80065d6 <HAL_I2C_ER_IRQHandler+0x104>
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d039      	beq.n	80065d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006562:	7efb      	ldrb	r3, [r7, #27]
 8006564:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006574:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800657c:	7ebb      	ldrb	r3, [r7, #26]
 800657e:	2b20      	cmp	r3, #32
 8006580:	d112      	bne.n	80065a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10f      	bne.n	80065a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006588:	7cfb      	ldrb	r3, [r7, #19]
 800658a:	2b21      	cmp	r3, #33	; 0x21
 800658c:	d008      	beq.n	80065a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800658e:	7cfb      	ldrb	r3, [r7, #19]
 8006590:	2b29      	cmp	r3, #41	; 0x29
 8006592:	d005      	beq.n	80065a0 <HAL_I2C_ER_IRQHandler+0xce>
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	2b28      	cmp	r3, #40	; 0x28
 8006598:	d106      	bne.n	80065a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b21      	cmp	r3, #33	; 0x21
 800659e:	d103      	bne.n	80065a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 f869 	bl	8007678 <I2C_Slave_AF>
 80065a6:	e016      	b.n	80065d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	f043 0304 	orr.w	r3, r3, #4
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065ba:	7efb      	ldrb	r3, [r7, #27]
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d002      	beq.n	80065c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80065c0:	7efb      	ldrb	r3, [r7, #27]
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d107      	bne.n	80065d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	0adb      	lsrs	r3, r3, #11
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00e      	beq.n	8006600 <HAL_I2C_ER_IRQHandler+0x12e>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	0a1b      	lsrs	r3, r3, #8
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	f043 0308 	orr.w	r3, r3, #8
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80065fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d008      	beq.n	8006618 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 f8a0 	bl	8007758 <I2C_ITError>
  }
}
 8006618:	bf00      	nop
 800661a:	3728      	adds	r7, #40	; 0x28
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
 800667c:	4613      	mov	r3, r2
 800667e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006706:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d150      	bne.n	80067b8 <I2C_MasterTransmit_TXE+0xc8>
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b21      	cmp	r3, #33	; 0x21
 800671a:	d14d      	bne.n	80067b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b08      	cmp	r3, #8
 8006720:	d01d      	beq.n	800675e <I2C_MasterTransmit_TXE+0x6e>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b20      	cmp	r3, #32
 8006726:	d01a      	beq.n	800675e <I2C_MasterTransmit_TXE+0x6e>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800672e:	d016      	beq.n	800675e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800673e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2211      	movs	r2, #17
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ff62 	bl	8006620 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800675c:	e060      	b.n	8006820 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800676c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d107      	bne.n	80067a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff7d 	bl	80066a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067a6:	e03b      	b.n	8006820 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff35 	bl	8006620 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067b6:	e033      	b.n	8006820 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	2b21      	cmp	r3, #33	; 0x21
 80067bc:	d005      	beq.n	80067ca <I2C_MasterTransmit_TXE+0xda>
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b40      	cmp	r3, #64	; 0x40
 80067c2:	d12d      	bne.n	8006820 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b22      	cmp	r3, #34	; 0x22
 80067c8:	d12a      	bne.n	8006820 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d108      	bne.n	80067e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80067e4:	e01c      	b.n	8006820 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d103      	bne.n	80067fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f88e 	bl	8006914 <I2C_MemoryTransmit_TXE_BTF>
}
 80067f8:	e012      	b.n	8006820 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800681e:	e7ff      	b.n	8006820 <I2C_MasterTransmit_TXE+0x130>
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b21      	cmp	r3, #33	; 0x21
 8006840:	d164      	bne.n	800690c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d012      	beq.n	8006872 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006870:	e04c      	b.n	800690c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d01d      	beq.n	80068b4 <I2C_MasterTransmit_BTF+0x8c>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b20      	cmp	r3, #32
 800687c:	d01a      	beq.n	80068b4 <I2C_MasterTransmit_BTF+0x8c>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006884:	d016      	beq.n	80068b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006894:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2211      	movs	r2, #17
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff feb7 	bl	8006620 <HAL_I2C_MasterTxCpltCallback>
}
 80068b2:	e02b      	b.n	800690c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d107      	bne.n	80068fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff fed2 	bl	80066a0 <HAL_I2C_MemTxCpltCallback>
}
 80068fc:	e006      	b.n	800690c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fe8a 	bl	8006620 <HAL_I2C_MasterTxCpltCallback>
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006922:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11d      	bne.n	8006968 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d10b      	bne.n	800694c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	1c9a      	adds	r2, r3, #2
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800694a:	e073      	b.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	b29b      	uxth	r3, r3
 8006952:	121b      	asrs	r3, r3, #8
 8006954:	b2da      	uxtb	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006966:	e065      	b.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10b      	bne.n	8006988 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006974:	b2da      	uxtb	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006986:	e055      	b.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698c:	2b02      	cmp	r3, #2
 800698e:	d151      	bne.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b22      	cmp	r3, #34	; 0x22
 8006994:	d10d      	bne.n	80069b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069b0:	e040      	b.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d015      	beq.n	80069e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b21      	cmp	r3, #33	; 0x21
 80069c0:	d112      	bne.n	80069e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069e6:	e025      	b.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d120      	bne.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b21      	cmp	r3, #33	; 0x21
 80069f6:	d11d      	bne.n	8006a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a06:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fe36 	bl	80066a0 <HAL_I2C_MemTxCpltCallback>
}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b22      	cmp	r3, #34	; 0x22
 8006a4e:	f040 80ac 	bne.w	8006baa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d921      	bls.n	8006aa4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	f040 808c 	bne.w	8006baa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006aa2:	e082      	b.n	8006baa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d075      	beq.n	8006b98 <I2C_MasterReceive_RXNE+0x15c>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d002      	beq.n	8006ab8 <I2C_MasterReceive_RXNE+0x7c>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d16f      	bne.n	8006b98 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f827 	bl	8007b0c <I2C_WaitOnSTOPRequestThroughIT>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d142      	bne.n	8006b4a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ae2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d10a      	bne.n	8006b34 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fdc1 	bl	80066b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b32:	e03a      	b.n	8006baa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2212      	movs	r2, #18
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fd76 	bl	8006634 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b48:	e02f      	b.n	8006baa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff fd99 	bl	80066c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b96:	e008      	b.n	8006baa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba6:	605a      	str	r2, [r3, #4]
}
 8006ba8:	e7ff      	b.n	8006baa <I2C_MasterReceive_RXNE+0x16e>
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d11b      	bne.n	8006c02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c00:	e0bd      	b.n	8006d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d129      	bne.n	8006c60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d00a      	beq.n	8006c38 <I2C_MasterReceive_BTF+0x86>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d007      	beq.n	8006c38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c5e:	e08e      	b.n	8006d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d176      	bne.n	8006d58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d002      	beq.n	8006c76 <I2C_MasterReceive_BTF+0xc4>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d108      	bne.n	8006c88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e019      	b.n	8006cbc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d002      	beq.n	8006c94 <I2C_MasterReceive_BTF+0xe2>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d108      	bne.n	8006ca6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e00a      	b.n	8006cbc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d007      	beq.n	8006cbc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d10a      	bne.n	8006d42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fcba 	bl	80066b4 <HAL_I2C_MemRxCpltCallback>
}
 8006d40:	e01d      	b.n	8006d7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2212      	movs	r2, #18
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff fc6f 	bl	8006634 <HAL_I2C_MasterRxCpltCallback>
}
 8006d56:	e012      	b.n	8006d7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d117      	bne.n	8006dca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006db2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006db4:	e067      	b.n	8006e86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	611a      	str	r2, [r3, #16]
}
 8006dc8:	e05d      	b.n	8006e86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dd2:	d133      	bne.n	8006e3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b21      	cmp	r3, #33	; 0x21
 8006dde:	d109      	bne.n	8006df4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006df0:	611a      	str	r2, [r3, #16]
 8006df2:	e008      	b.n	8006e06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <I2C_Master_SB+0x92>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d032      	beq.n	8006e86 <I2C_Master_SB+0x100>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02d      	beq.n	8006e86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e38:	605a      	str	r2, [r3, #4]
}
 8006e3a:	e024      	b.n	8006e86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10e      	bne.n	8006e62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	11db      	asrs	r3, r3, #7
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0306 	and.w	r3, r3, #6
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f063 030f 	orn	r3, r3, #15
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	611a      	str	r2, [r3, #16]
}
 8006e60:	e011      	b.n	8006e86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d10d      	bne.n	8006e86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	11db      	asrs	r3, r3, #7
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0306 	and.w	r3, r3, #6
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f063 030e 	orn	r3, r3, #14
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	611a      	str	r2, [r3, #16]
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <I2C_Master_ADD10+0x26>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d108      	bne.n	8006eca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <I2C_Master_ADD10+0x48>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed8:	605a      	str	r2, [r3, #4]
  }
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b091      	sub	sp, #68	; 0x44
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b22      	cmp	r3, #34	; 0x22
 8006f0e:	f040 8169 	bne.w	80071e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10f      	bne.n	8006f3a <I2C_Master_ADDR+0x54>
 8006f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d10b      	bne.n	8006f3a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f22:	2300      	movs	r3, #0
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	e160      	b.n	80071fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d11d      	bne.n	8006f7e <I2C_Master_ADDR+0x98>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f4a:	d118      	bne.n	8006f7e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f70:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8006f7c:	e13e      	b.n	80071fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d113      	bne.n	8006fb0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e115      	b.n	80071dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	f040 808a 	bne.w	80070d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fc2:	d137      	bne.n	8007034 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe2:	d113      	bne.n	800700c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	e0e7      	b.n	80071dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700c:	2300      	movs	r3, #0
 800700e:	623b      	str	r3, [r7, #32]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	623b      	str	r3, [r7, #32]
 8007020:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e0d3      	b.n	80071dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	2b08      	cmp	r3, #8
 8007038:	d02e      	beq.n	8007098 <I2C_Master_ADDR+0x1b2>
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	2b20      	cmp	r3, #32
 800703e:	d02b      	beq.n	8007098 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007042:	2b12      	cmp	r3, #18
 8007044:	d102      	bne.n	800704c <I2C_Master_ADDR+0x166>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	2b01      	cmp	r3, #1
 800704a:	d125      	bne.n	8007098 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	2b04      	cmp	r3, #4
 8007050:	d00e      	beq.n	8007070 <I2C_Master_ADDR+0x18a>
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	2b02      	cmp	r3, #2
 8007056:	d00b      	beq.n	8007070 <I2C_Master_ADDR+0x18a>
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	2b10      	cmp	r3, #16
 800705c:	d008      	beq.n	8007070 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e007      	b.n	8007080 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800707e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	e0a1      	b.n	80071dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	e085      	b.n	80071dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d14d      	bne.n	8007176 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d016      	beq.n	800710e <I2C_Master_ADDR+0x228>
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d013      	beq.n	800710e <I2C_Master_ADDR+0x228>
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d010      	beq.n	800710e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e007      	b.n	800711e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800711c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712c:	d117      	bne.n	800715e <I2C_Master_ADDR+0x278>
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007134:	d00b      	beq.n	800714e <I2C_Master_ADDR+0x268>
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	2b01      	cmp	r3, #1
 800713a:	d008      	beq.n	800714e <I2C_Master_ADDR+0x268>
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	2b08      	cmp	r3, #8
 8007140:	d005      	beq.n	800714e <I2C_Master_ADDR+0x268>
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2b10      	cmp	r3, #16
 8007146:	d002      	beq.n	800714e <I2C_Master_ADDR+0x268>
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	2b20      	cmp	r3, #32
 800714c:	d107      	bne.n	800715e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800715c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	e032      	b.n	80071dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007184:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007194:	d117      	bne.n	80071c6 <I2C_Master_ADDR+0x2e0>
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800719c:	d00b      	beq.n	80071b6 <I2C_Master_ADDR+0x2d0>
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d008      	beq.n	80071b6 <I2C_Master_ADDR+0x2d0>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d005      	beq.n	80071b6 <I2C_Master_ADDR+0x2d0>
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d002      	beq.n	80071b6 <I2C_Master_ADDR+0x2d0>
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d107      	bne.n	80071c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c6:	2300      	movs	r3, #0
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80071e2:	e00b      	b.n	80071fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
}
 80071fa:	e7ff      	b.n	80071fc <I2C_Master_ADDR+0x316>
 80071fc:	bf00      	nop
 80071fe:	3744      	adds	r7, #68	; 0x44
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007216:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d02b      	beq.n	800727a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d114      	bne.n	800727a <I2C_SlaveTransmit_TXE+0x72>
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b29      	cmp	r3, #41	; 0x29
 8007254:	d111      	bne.n	800727a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007264:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2221      	movs	r2, #33	; 0x21
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2228      	movs	r2, #40	; 0x28
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff f9e7 	bl	8006648 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d011      	beq.n	80072b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d02c      	beq.n	8007338 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d114      	bne.n	8007338 <I2C_SlaveReceive_RXNE+0x74>
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b2a      	cmp	r3, #42	; 0x2a
 8007312:	d111      	bne.n	8007338 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007322:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2222      	movs	r2, #34	; 0x22
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2228      	movs	r2, #40	; 0x28
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff f992 	bl	800665c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d012      	beq.n	8007378 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800739e:	2b28      	cmp	r3, #40	; 0x28
 80073a0:	d127      	bne.n	80073f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	089b      	lsrs	r3, r3, #2
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073be:	2301      	movs	r3, #1
 80073c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	81bb      	strh	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80073e4:	89ba      	ldrh	r2, [r7, #12]
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff f940 	bl	8006670 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80073f0:	e00e      	b.n	8007410 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007426:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007436:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	60bb      	str	r3, [r7, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007464:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007474:	d172      	bne.n	800755c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2b22      	cmp	r3, #34	; 0x22
 800747a:	d002      	beq.n	8007482 <I2C_Slave_STOPF+0x6a>
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b2a      	cmp	r3, #42	; 0x2a
 8007480:	d135      	bne.n	80074ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	f043 0204 	orr.w	r2, r3, #4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fac6 	bl	8005a4c <HAL_DMA_GetState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d049      	beq.n	800755a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	4a69      	ldr	r2, [pc, #420]	; (8007670 <I2C_Slave_STOPF+0x258>)
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe f90e 	bl	80056f4 <HAL_DMA_Abort_IT>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d03d      	beq.n	800755a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074ec:	e035      	b.n	800755a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fa90 	bl	8005a4c <HAL_DMA_GetState>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d014      	beq.n	800755c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007536:	4a4e      	ldr	r2, [pc, #312]	; (8007670 <I2C_Slave_STOPF+0x258>)
 8007538:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe f8d8 	bl	80056f4 <HAL_DMA_Abort_IT>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	e000      	b.n	800755c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800755a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d03e      	beq.n	80075e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b04      	cmp	r3, #4
 8007572:	d112      	bne.n	800759a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d112      	bne.n	80075ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8b3 	bl	8007758 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80075f2:	e039      	b.n	8007668 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b2a      	cmp	r3, #42	; 0x2a
 80075f8:	d109      	bne.n	800760e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2228      	movs	r2, #40	; 0x28
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff f827 	bl	800665c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b28      	cmp	r3, #40	; 0x28
 8007618:	d111      	bne.n	800763e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a15      	ldr	r2, [pc, #84]	; (8007674 <I2C_Slave_STOPF+0x25c>)
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff f828 	bl	800668c <HAL_I2C_ListenCpltCallback>
}
 800763c:	e014      	b.n	8007668 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	2b22      	cmp	r3, #34	; 0x22
 8007644:	d002      	beq.n	800764c <I2C_Slave_STOPF+0x234>
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	2b22      	cmp	r3, #34	; 0x22
 800764a:	d10d      	bne.n	8007668 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fe fffa 	bl	800665c <HAL_I2C_SlaveRxCpltCallback>
}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	080079bd 	.word	0x080079bd
 8007674:	ffff0000 	.word	0xffff0000

08007678 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b08      	cmp	r3, #8
 8007692:	d002      	beq.n	800769a <I2C_Slave_AF+0x22>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b20      	cmp	r3, #32
 8007698:	d129      	bne.n	80076ee <I2C_Slave_AF+0x76>
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b28      	cmp	r3, #40	; 0x28
 800769e:	d126      	bne.n	80076ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a2c      	ldr	r2, [pc, #176]	; (8007754 <I2C_Slave_AF+0xdc>)
 80076a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fe ffd0 	bl	800668c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80076ec:	e02e      	b.n	800774c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	2b21      	cmp	r3, #33	; 0x21
 80076f2:	d126      	bne.n	8007742 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a17      	ldr	r2, [pc, #92]	; (8007754 <I2C_Slave_AF+0xdc>)
 80076f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2221      	movs	r2, #33	; 0x21
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800771e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007728:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007738:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fe ff84 	bl	8006648 <HAL_I2C_SlaveTxCpltCallback>
}
 8007740:	e004      	b.n	800774c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800774a:	615a      	str	r2, [r3, #20]
}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	ffff0000 	.word	0xffff0000

08007758 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007766:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b10      	cmp	r3, #16
 8007774:	d002      	beq.n	800777c <I2C_ITError+0x24>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d10a      	bne.n	8007792 <I2C_ITError+0x3a>
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b22      	cmp	r3, #34	; 0x22
 8007780:	d107      	bne.n	8007792 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007790:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007798:	2b28      	cmp	r3, #40	; 0x28
 800779a:	d107      	bne.n	80077ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2228      	movs	r2, #40	; 0x28
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077aa:	e015      	b.n	80077d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ba:	d00a      	beq.n	80077d2 <I2C_ITError+0x7a>
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b60      	cmp	r3, #96	; 0x60
 80077c0:	d007      	beq.n	80077d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e6:	d162      	bne.n	80078ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d020      	beq.n	8007848 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	4a6a      	ldr	r2, [pc, #424]	; (80079b4 <I2C_ITError+0x25c>)
 800780c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd ff6e 	bl	80056f4 <HAL_DMA_Abort_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 8089 	beq.w	8007932 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0201 	bic.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007842:	4610      	mov	r0, r2
 8007844:	4798      	blx	r3
 8007846:	e074      	b.n	8007932 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	4a59      	ldr	r2, [pc, #356]	; (80079b4 <I2C_ITError+0x25c>)
 800784e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd ff4d 	bl	80056f4 <HAL_DMA_Abort_IT>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d068      	beq.n	8007932 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d10b      	bne.n	8007886 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0201 	bic.w	r2, r2, #1
 8007894:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	e041      	b.n	8007932 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b60      	cmp	r3, #96	; 0x60
 80078b8:	d125      	bne.n	8007906 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d10b      	bne.n	80078ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fe feec 	bl	80066dc <HAL_I2C_AbortCpltCallback>
 8007904:	e015      	b.n	8007932 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	d10b      	bne.n	800792c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7fe fecb 	bl	80066c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10e      	bne.n	8007960 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800796e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007976:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b04      	cmp	r3, #4
 8007982:	d113      	bne.n	80079ac <I2C_ITError+0x254>
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2b28      	cmp	r3, #40	; 0x28
 8007988:	d110      	bne.n	80079ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a0a      	ldr	r2, [pc, #40]	; (80079b8 <I2C_ITError+0x260>)
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fe fe70 	bl	800668c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079ac:	bf00      	nop
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	080079bd 	.word	0x080079bd
 80079b8:	ffff0000 	.word	0xffff0000

080079bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80079d6:	4b4b      	ldr	r3, [pc, #300]	; (8007b04 <I2C_DMAAbort+0x148>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	4a4a      	ldr	r2, [pc, #296]	; (8007b08 <I2C_DMAAbort+0x14c>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	0a1a      	lsrs	r2, r3, #8
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	00da      	lsls	r2, r3, #3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a02:	e00a      	b.n	8007a1a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d0ea      	beq.n	80079f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	2200      	movs	r2, #0
 8007a28:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2200      	movs	r2, #0
 8007a38:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a48:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b60      	cmp	r3, #96	; 0x60
 8007a8a:	d10e      	bne.n	8007aaa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aa2:	6978      	ldr	r0, [r7, #20]
 8007aa4:	f7fe fe1a 	bl	80066dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007aa8:	e027      	b.n	8007afa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007aaa:	7cfb      	ldrb	r3, [r7, #19]
 8007aac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ab0:	2b28      	cmp	r3, #40	; 0x28
 8007ab2:	d117      	bne.n	8007ae4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0201 	orr.w	r2, r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2228      	movs	r2, #40	; 0x28
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ae2:	e007      	b.n	8007af4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f7fe fde7 	bl	80066c8 <HAL_I2C_ErrorCallback>
}
 8007afa:	bf00      	nop
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200000ac 	.word	0x200000ac
 8007b08:	14f8b589 	.word	0x14f8b589

08007b0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b18:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	08db      	lsrs	r3, r3, #3
 8007b1e:	4a13      	ldr	r2, [pc, #76]	; (8007b6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b20:	fba2 2303 	umull	r2, r3, r2, r3
 8007b24:	0a1a      	lsrs	r2, r3, #8
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f043 0220 	orr.w	r2, r3, #32
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e008      	b.n	8007b5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b58:	d0e9      	beq.n	8007b2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	200000ac 	.word	0x200000ac
 8007b6c:	14f8b589 	.word	0x14f8b589

08007b70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b80:	d103      	bne.n	8007b8a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b88:	e007      	b.n	8007b9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b92:	d102      	bne.n	8007b9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2208      	movs	r2, #8
 8007b98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e267      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d075      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007bc6:	4b88      	ldr	r3, [pc, #544]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 030c 	and.w	r3, r3, #12
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d00c      	beq.n	8007bec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bd2:	4b85      	ldr	r3, [pc, #532]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d112      	bne.n	8007c04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bde:	4b82      	ldr	r3, [pc, #520]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bea:	d10b      	bne.n	8007c04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bec:	4b7e      	ldr	r3, [pc, #504]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d05b      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x108>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d157      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e242      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d106      	bne.n	8007c1c <HAL_RCC_OscConfig+0x74>
 8007c0e:	4b76      	ldr	r3, [pc, #472]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a75      	ldr	r2, [pc, #468]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e01d      	b.n	8007c58 <HAL_RCC_OscConfig+0xb0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c24:	d10c      	bne.n	8007c40 <HAL_RCC_OscConfig+0x98>
 8007c26:	4b70      	ldr	r3, [pc, #448]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a6f      	ldr	r2, [pc, #444]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4b6d      	ldr	r3, [pc, #436]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a6c      	ldr	r2, [pc, #432]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e00b      	b.n	8007c58 <HAL_RCC_OscConfig+0xb0>
 8007c40:	4b69      	ldr	r3, [pc, #420]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a68      	ldr	r2, [pc, #416]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	4b66      	ldr	r3, [pc, #408]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a65      	ldr	r2, [pc, #404]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d013      	beq.n	8007c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c60:	f7fd fb58 	bl	8005314 <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c68:	f7fd fb54 	bl	8005314 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b64      	cmp	r3, #100	; 0x64
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e207      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c7a:	4b5b      	ldr	r3, [pc, #364]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0f0      	beq.n	8007c68 <HAL_RCC_OscConfig+0xc0>
 8007c86:	e014      	b.n	8007cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c88:	f7fd fb44 	bl	8005314 <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c90:	f7fd fb40 	bl	8005314 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b64      	cmp	r3, #100	; 0x64
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e1f3      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ca2:	4b51      	ldr	r3, [pc, #324]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f0      	bne.n	8007c90 <HAL_RCC_OscConfig+0xe8>
 8007cae:	e000      	b.n	8007cb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d063      	beq.n	8007d86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cbe:	4b4a      	ldr	r3, [pc, #296]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00b      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cca:	4b47      	ldr	r3, [pc, #284]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d11c      	bne.n	8007d10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cd6:	4b44      	ldr	r3, [pc, #272]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d116      	bne.n	8007d10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ce2:	4b41      	ldr	r3, [pc, #260]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <HAL_RCC_OscConfig+0x152>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d001      	beq.n	8007cfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e1c7      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cfa:	4b3b      	ldr	r3, [pc, #236]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4937      	ldr	r1, [pc, #220]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d0e:	e03a      	b.n	8007d86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d020      	beq.n	8007d5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d18:	4b34      	ldr	r3, [pc, #208]	; (8007dec <HAL_RCC_OscConfig+0x244>)
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1e:	f7fd faf9 	bl	8005314 <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d26:	f7fd faf5 	bl	8005314 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e1a8      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d38:	4b2b      	ldr	r3, [pc, #172]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0f0      	beq.n	8007d26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d44:	4b28      	ldr	r3, [pc, #160]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4925      	ldr	r1, [pc, #148]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	600b      	str	r3, [r1, #0]
 8007d58:	e015      	b.n	8007d86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d5a:	4b24      	ldr	r3, [pc, #144]	; (8007dec <HAL_RCC_OscConfig+0x244>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d60:	f7fd fad8 	bl	8005314 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d68:	f7fd fad4 	bl	8005314 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e187      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d7a:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f0      	bne.n	8007d68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d036      	beq.n	8007e00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d016      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <HAL_RCC_OscConfig+0x248>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da0:	f7fd fab8 	bl	8005314 <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007da8:	f7fd fab4 	bl	8005314 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e167      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dba:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0f0      	beq.n	8007da8 <HAL_RCC_OscConfig+0x200>
 8007dc6:	e01b      	b.n	8007e00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <HAL_RCC_OscConfig+0x248>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dce:	f7fd faa1 	bl	8005314 <HAL_GetTick>
 8007dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dd4:	e00e      	b.n	8007df4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dd6:	f7fd fa9d 	bl	8005314 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d907      	bls.n	8007df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e150      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
 8007de8:	40023800 	.word	0x40023800
 8007dec:	42470000 	.word	0x42470000
 8007df0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007df4:	4b88      	ldr	r3, [pc, #544]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1ea      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8097 	beq.w	8007f3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e12:	4b81      	ldr	r3, [pc, #516]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10f      	bne.n	8007e3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60bb      	str	r3, [r7, #8]
 8007e22:	4b7d      	ldr	r3, [pc, #500]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	4a7c      	ldr	r2, [pc, #496]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e2e:	4b7a      	ldr	r3, [pc, #488]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3e:	4b77      	ldr	r3, [pc, #476]	; (800801c <HAL_RCC_OscConfig+0x474>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d118      	bne.n	8007e7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e4a:	4b74      	ldr	r3, [pc, #464]	; (800801c <HAL_RCC_OscConfig+0x474>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a73      	ldr	r2, [pc, #460]	; (800801c <HAL_RCC_OscConfig+0x474>)
 8007e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e56:	f7fd fa5d 	bl	8005314 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e5e:	f7fd fa59 	bl	8005314 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e10c      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e70:	4b6a      	ldr	r3, [pc, #424]	; (800801c <HAL_RCC_OscConfig+0x474>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d106      	bne.n	8007e92 <HAL_RCC_OscConfig+0x2ea>
 8007e84:	4b64      	ldr	r3, [pc, #400]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e88:	4a63      	ldr	r2, [pc, #396]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e8a:	f043 0301 	orr.w	r3, r3, #1
 8007e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e90:	e01c      	b.n	8007ecc <HAL_RCC_OscConfig+0x324>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	d10c      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x30c>
 8007e9a:	4b5f      	ldr	r3, [pc, #380]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9e:	4a5e      	ldr	r2, [pc, #376]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007ea0:	f043 0304 	orr.w	r3, r3, #4
 8007ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea6:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eaa:	4a5b      	ldr	r2, [pc, #364]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb2:	e00b      	b.n	8007ecc <HAL_RCC_OscConfig+0x324>
 8007eb4:	4b58      	ldr	r3, [pc, #352]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb8:	4a57      	ldr	r2, [pc, #348]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007eba:	f023 0301 	bic.w	r3, r3, #1
 8007ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec0:	4b55      	ldr	r3, [pc, #340]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec4:	4a54      	ldr	r2, [pc, #336]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007ec6:	f023 0304 	bic.w	r3, r3, #4
 8007eca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d015      	beq.n	8007f00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed4:	f7fd fa1e 	bl	8005314 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eda:	e00a      	b.n	8007ef2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007edc:	f7fd fa1a 	bl	8005314 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e0cb      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef2:	4b49      	ldr	r3, [pc, #292]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0ee      	beq.n	8007edc <HAL_RCC_OscConfig+0x334>
 8007efe:	e014      	b.n	8007f2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f00:	f7fd fa08 	bl	8005314 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f08:	f7fd fa04 	bl	8005314 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e0b5      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f1e:	4b3e      	ldr	r3, [pc, #248]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1ee      	bne.n	8007f08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d105      	bne.n	8007f3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f30:	4b39      	ldr	r3, [pc, #228]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	4a38      	ldr	r2, [pc, #224]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 80a1 	beq.w	8008088 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f46:	4b34      	ldr	r3, [pc, #208]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 030c 	and.w	r3, r3, #12
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d05c      	beq.n	800800c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d141      	bne.n	8007fde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <HAL_RCC_OscConfig+0x478>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f60:	f7fd f9d8 	bl	8005314 <HAL_GetTick>
 8007f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f68:	f7fd f9d4 	bl	8005314 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e087      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f7a:	4b27      	ldr	r3, [pc, #156]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f0      	bne.n	8007f68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69da      	ldr	r2, [r3, #28]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	019b      	lsls	r3, r3, #6
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	041b      	lsls	r3, r3, #16
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	061b      	lsls	r3, r3, #24
 8007faa:	491b      	ldr	r1, [pc, #108]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <HAL_RCC_OscConfig+0x478>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb6:	f7fd f9ad 	bl	8005314 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fbe:	f7fd f9a9 	bl	8005314 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e05c      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd0:	4b11      	ldr	r3, [pc, #68]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0f0      	beq.n	8007fbe <HAL_RCC_OscConfig+0x416>
 8007fdc:	e054      	b.n	8008088 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fde:	4b10      	ldr	r3, [pc, #64]	; (8008020 <HAL_RCC_OscConfig+0x478>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe4:	f7fd f996 	bl	8005314 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fec:	f7fd f992 	bl	8005314 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e045      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCC_OscConfig+0x470>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0x444>
 800800a:	e03d      	b.n	8008088 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d107      	bne.n	8008024 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e038      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
 8008018:	40023800 	.word	0x40023800
 800801c:	40007000 	.word	0x40007000
 8008020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008024:	4b1b      	ldr	r3, [pc, #108]	; (8008094 <HAL_RCC_OscConfig+0x4ec>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d028      	beq.n	8008084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800803c:	429a      	cmp	r2, r3
 800803e:	d121      	bne.n	8008084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d11a      	bne.n	8008084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008054:	4013      	ands	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800805a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800805c:	4293      	cmp	r3, r2
 800805e:	d111      	bne.n	8008084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	3b01      	subs	r3, #1
 800806e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008070:	429a      	cmp	r2, r3
 8008072:	d107      	bne.n	8008084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008080:	429a      	cmp	r2, r3
 8008082:	d001      	beq.n	8008088 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40023800 	.word	0x40023800

08008098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e0cc      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080ac:	4b68      	ldr	r3, [pc, #416]	; (8008250 <HAL_RCC_ClockConfig+0x1b8>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d90c      	bls.n	80080d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ba:	4b65      	ldr	r3, [pc, #404]	; (8008250 <HAL_RCC_ClockConfig+0x1b8>)
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c2:	4b63      	ldr	r3, [pc, #396]	; (8008250 <HAL_RCC_ClockConfig+0x1b8>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d001      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0b8      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d020      	beq.n	8008122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080ec:	4b59      	ldr	r3, [pc, #356]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	4a58      	ldr	r2, [pc, #352]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 80080f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008104:	4b53      	ldr	r3, [pc, #332]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4a52      	ldr	r2, [pc, #328]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 800810a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800810e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008110:	4b50      	ldr	r3, [pc, #320]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	494d      	ldr	r1, [pc, #308]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 800811e:	4313      	orrs	r3, r2
 8008120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d044      	beq.n	80081b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d107      	bne.n	8008146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008136:	4b47      	ldr	r3, [pc, #284]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d119      	bne.n	8008176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e07f      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d003      	beq.n	8008156 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008152:	2b03      	cmp	r3, #3
 8008154:	d107      	bne.n	8008166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008156:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e06f      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008166:	4b3b      	ldr	r3, [pc, #236]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e067      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008176:	4b37      	ldr	r3, [pc, #220]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f023 0203 	bic.w	r2, r3, #3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	4934      	ldr	r1, [pc, #208]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008184:	4313      	orrs	r3, r2
 8008186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008188:	f7fd f8c4 	bl	8005314 <HAL_GetTick>
 800818c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818e:	e00a      	b.n	80081a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008190:	f7fd f8c0 	bl	8005314 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f241 3288 	movw	r2, #5000	; 0x1388
 800819e:	4293      	cmp	r3, r2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e04f      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a6:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 020c 	and.w	r2, r3, #12
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d1eb      	bne.n	8008190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081b8:	4b25      	ldr	r3, [pc, #148]	; (8008250 <HAL_RCC_ClockConfig+0x1b8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d20c      	bcs.n	80081e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c6:	4b22      	ldr	r3, [pc, #136]	; (8008250 <HAL_RCC_ClockConfig+0x1b8>)
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ce:	4b20      	ldr	r3, [pc, #128]	; (8008250 <HAL_RCC_ClockConfig+0x1b8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d001      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e032      	b.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d008      	beq.n	80081fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081ec:	4b19      	ldr	r3, [pc, #100]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	4916      	ldr	r1, [pc, #88]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0308 	and.w	r3, r3, #8
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800820a:	4b12      	ldr	r3, [pc, #72]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	490e      	ldr	r1, [pc, #56]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 800821a:	4313      	orrs	r3, r2
 800821c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800821e:	f000 f821 	bl	8008264 <HAL_RCC_GetSysClockFreq>
 8008222:	4602      	mov	r2, r0
 8008224:	4b0b      	ldr	r3, [pc, #44]	; (8008254 <HAL_RCC_ClockConfig+0x1bc>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	091b      	lsrs	r3, r3, #4
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	490a      	ldr	r1, [pc, #40]	; (8008258 <HAL_RCC_ClockConfig+0x1c0>)
 8008230:	5ccb      	ldrb	r3, [r1, r3]
 8008232:	fa22 f303 	lsr.w	r3, r2, r3
 8008236:	4a09      	ldr	r2, [pc, #36]	; (800825c <HAL_RCC_ClockConfig+0x1c4>)
 8008238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <HAL_RCC_ClockConfig+0x1c8>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f7fd f824 	bl	800528c <HAL_InitTick>

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40023c00 	.word	0x40023c00
 8008254:	40023800 	.word	0x40023800
 8008258:	0800d444 	.word	0x0800d444
 800825c:	200000ac 	.word	0x200000ac
 8008260:	200000d8 	.word	0x200000d8

08008264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008268:	b094      	sub	sp, #80	; 0x50
 800826a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	647b      	str	r3, [r7, #68]	; 0x44
 8008270:	2300      	movs	r3, #0
 8008272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008274:	2300      	movs	r3, #0
 8008276:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800827c:	4b79      	ldr	r3, [pc, #484]	; (8008464 <HAL_RCC_GetSysClockFreq+0x200>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f003 030c 	and.w	r3, r3, #12
 8008284:	2b08      	cmp	r3, #8
 8008286:	d00d      	beq.n	80082a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008288:	2b08      	cmp	r3, #8
 800828a:	f200 80e1 	bhi.w	8008450 <HAL_RCC_GetSysClockFreq+0x1ec>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_RCC_GetSysClockFreq+0x34>
 8008292:	2b04      	cmp	r3, #4
 8008294:	d003      	beq.n	800829e <HAL_RCC_GetSysClockFreq+0x3a>
 8008296:	e0db      	b.n	8008450 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008298:	4b73      	ldr	r3, [pc, #460]	; (8008468 <HAL_RCC_GetSysClockFreq+0x204>)
 800829a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800829c:	e0db      	b.n	8008456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800829e:	4b73      	ldr	r3, [pc, #460]	; (800846c <HAL_RCC_GetSysClockFreq+0x208>)
 80082a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082a2:	e0d8      	b.n	8008456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082a4:	4b6f      	ldr	r3, [pc, #444]	; (8008464 <HAL_RCC_GetSysClockFreq+0x200>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082ae:	4b6d      	ldr	r3, [pc, #436]	; (8008464 <HAL_RCC_GetSysClockFreq+0x200>)
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d063      	beq.n	8008382 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082ba:	4b6a      	ldr	r3, [pc, #424]	; (8008464 <HAL_RCC_GetSysClockFreq+0x200>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	099b      	lsrs	r3, r3, #6
 80082c0:	2200      	movs	r2, #0
 80082c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80082c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082cc:	633b      	str	r3, [r7, #48]	; 0x30
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80082d6:	4622      	mov	r2, r4
 80082d8:	462b      	mov	r3, r5
 80082da:	f04f 0000 	mov.w	r0, #0
 80082de:	f04f 0100 	mov.w	r1, #0
 80082e2:	0159      	lsls	r1, r3, #5
 80082e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082e8:	0150      	lsls	r0, r2, #5
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4621      	mov	r1, r4
 80082f0:	1a51      	subs	r1, r2, r1
 80082f2:	6139      	str	r1, [r7, #16]
 80082f4:	4629      	mov	r1, r5
 80082f6:	eb63 0301 	sbc.w	r3, r3, r1
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008308:	4659      	mov	r1, fp
 800830a:	018b      	lsls	r3, r1, #6
 800830c:	4651      	mov	r1, sl
 800830e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008312:	4651      	mov	r1, sl
 8008314:	018a      	lsls	r2, r1, #6
 8008316:	4651      	mov	r1, sl
 8008318:	ebb2 0801 	subs.w	r8, r2, r1
 800831c:	4659      	mov	r1, fp
 800831e:	eb63 0901 	sbc.w	r9, r3, r1
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800832e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008336:	4690      	mov	r8, r2
 8008338:	4699      	mov	r9, r3
 800833a:	4623      	mov	r3, r4
 800833c:	eb18 0303 	adds.w	r3, r8, r3
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	462b      	mov	r3, r5
 8008344:	eb49 0303 	adc.w	r3, r9, r3
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008356:	4629      	mov	r1, r5
 8008358:	024b      	lsls	r3, r1, #9
 800835a:	4621      	mov	r1, r4
 800835c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008360:	4621      	mov	r1, r4
 8008362:	024a      	lsls	r2, r1, #9
 8008364:	4610      	mov	r0, r2
 8008366:	4619      	mov	r1, r3
 8008368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836a:	2200      	movs	r2, #0
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
 800836e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008374:	f7f7 ff30 	bl	80001d8 <__aeabi_uldivmod>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4613      	mov	r3, r2
 800837e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008380:	e058      	b.n	8008434 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008382:	4b38      	ldr	r3, [pc, #224]	; (8008464 <HAL_RCC_GetSysClockFreq+0x200>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	099b      	lsrs	r3, r3, #6
 8008388:	2200      	movs	r2, #0
 800838a:	4618      	mov	r0, r3
 800838c:	4611      	mov	r1, r2
 800838e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008392:	623b      	str	r3, [r7, #32]
 8008394:	2300      	movs	r3, #0
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
 8008398:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800839c:	4642      	mov	r2, r8
 800839e:	464b      	mov	r3, r9
 80083a0:	f04f 0000 	mov.w	r0, #0
 80083a4:	f04f 0100 	mov.w	r1, #0
 80083a8:	0159      	lsls	r1, r3, #5
 80083aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083ae:	0150      	lsls	r0, r2, #5
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4641      	mov	r1, r8
 80083b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80083ba:	4649      	mov	r1, r9
 80083bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80083cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80083d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80083d4:	ebb2 040a 	subs.w	r4, r2, sl
 80083d8:	eb63 050b 	sbc.w	r5, r3, fp
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	00eb      	lsls	r3, r5, #3
 80083e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ea:	00e2      	lsls	r2, r4, #3
 80083ec:	4614      	mov	r4, r2
 80083ee:	461d      	mov	r5, r3
 80083f0:	4643      	mov	r3, r8
 80083f2:	18e3      	adds	r3, r4, r3
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	464b      	mov	r3, r9
 80083f8:	eb45 0303 	adc.w	r3, r5, r3
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800840a:	4629      	mov	r1, r5
 800840c:	028b      	lsls	r3, r1, #10
 800840e:	4621      	mov	r1, r4
 8008410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008414:	4621      	mov	r1, r4
 8008416:	028a      	lsls	r2, r1, #10
 8008418:	4610      	mov	r0, r2
 800841a:	4619      	mov	r1, r3
 800841c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841e:	2200      	movs	r2, #0
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	61fa      	str	r2, [r7, #28]
 8008424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008428:	f7f7 fed6 	bl	80001d8 <__aeabi_uldivmod>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4613      	mov	r3, r2
 8008432:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <HAL_RCC_GetSysClockFreq+0x200>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	0c1b      	lsrs	r3, r3, #16
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	3301      	adds	r3, #1
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800844e:	e002      	b.n	8008456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <HAL_RCC_GetSysClockFreq+0x204>)
 8008452:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008458:	4618      	mov	r0, r3
 800845a:	3750      	adds	r7, #80	; 0x50
 800845c:	46bd      	mov	sp, r7
 800845e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008462:	bf00      	nop
 8008464:	40023800 	.word	0x40023800
 8008468:	00f42400 	.word	0x00f42400
 800846c:	007a1200 	.word	0x007a1200

08008470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008474:	4b03      	ldr	r3, [pc, #12]	; (8008484 <HAL_RCC_GetHCLKFreq+0x14>)
 8008476:	681b      	ldr	r3, [r3, #0]
}
 8008478:	4618      	mov	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200000ac 	.word	0x200000ac

08008488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800848c:	f7ff fff0 	bl	8008470 <HAL_RCC_GetHCLKFreq>
 8008490:	4602      	mov	r2, r0
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	0a9b      	lsrs	r3, r3, #10
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	4903      	ldr	r1, [pc, #12]	; (80084ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800849e:	5ccb      	ldrb	r3, [r1, r3]
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40023800 	.word	0x40023800
 80084ac:	0800d454 	.word	0x0800d454

080084b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084b4:	f7ff ffdc 	bl	8008470 <HAL_RCC_GetHCLKFreq>
 80084b8:	4602      	mov	r2, r0
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	0b5b      	lsrs	r3, r3, #13
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	4903      	ldr	r1, [pc, #12]	; (80084d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084c6:	5ccb      	ldrb	r3, [r1, r3]
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	40023800 	.word	0x40023800
 80084d4:	0800d454 	.word	0x0800d454

080084d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e07b      	b.n	80085e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d108      	bne.n	8008504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084fa:	d009      	beq.n	8008510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	61da      	str	r2, [r3, #28]
 8008502:	e005      	b.n	8008510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fc f88e 	bl	800464c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	ea42 0103 	orr.w	r1, r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	0c1b      	lsrs	r3, r3, #16
 80085ae:	f003 0104 	and.w	r1, r3, #4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	f003 0210 	and.w	r2, r3, #16
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_SPI_Transmit+0x22>
 8008608:	2302      	movs	r3, #2
 800860a:	e126      	b.n	800885a <HAL_SPI_Transmit+0x270>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008614:	f7fc fe7e 	bl	8005314 <HAL_GetTick>
 8008618:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d002      	beq.n	8008630 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800862a:	2302      	movs	r3, #2
 800862c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800862e:	e10b      	b.n	8008848 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <HAL_SPI_Transmit+0x52>
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008640:	e102      	b.n	8008848 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2203      	movs	r2, #3
 8008646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	88fa      	ldrh	r2, [r7, #6]
 8008660:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008688:	d10f      	bne.n	80086aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008698:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d007      	beq.n	80086c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d0:	d14b      	bne.n	800876a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HAL_SPI_Transmit+0xf6>
 80086da:	8afb      	ldrh	r3, [r7, #22]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d13e      	bne.n	800875e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	881a      	ldrh	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	1c9a      	adds	r2, r3, #2
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008704:	e02b      	b.n	800875e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 0302 	and.w	r3, r3, #2
 8008710:	2b02      	cmp	r3, #2
 8008712:	d112      	bne.n	800873a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	881a      	ldrh	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	1c9a      	adds	r2, r3, #2
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800872e:	b29b      	uxth	r3, r3
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	86da      	strh	r2, [r3, #54]	; 0x36
 8008738:	e011      	b.n	800875e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800873a:	f7fc fdeb 	bl	8005314 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d803      	bhi.n	8008752 <HAL_SPI_Transmit+0x168>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d102      	bne.n	8008758 <HAL_SPI_Transmit+0x16e>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800875c:	e074      	b.n	8008848 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1ce      	bne.n	8008706 <HAL_SPI_Transmit+0x11c>
 8008768:	e04c      	b.n	8008804 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_SPI_Transmit+0x18e>
 8008772:	8afb      	ldrh	r3, [r7, #22]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d140      	bne.n	80087fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008794:	b29b      	uxth	r3, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800879e:	e02c      	b.n	80087fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d113      	bne.n	80087d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80087d4:	e011      	b.n	80087fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087d6:	f7fc fd9d 	bl	8005314 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d803      	bhi.n	80087ee <HAL_SPI_Transmit+0x204>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d102      	bne.n	80087f4 <HAL_SPI_Transmit+0x20a>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087f8:	e026      	b.n	8008848 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1cd      	bne.n	80087a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fce9 	bl	80091e0 <SPI_EndRxTxTransaction>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	77fb      	strb	r3, [r7, #31]
 8008844:	e000      	b.n	8008848 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008846:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008858:	7ffb      	ldrb	r3, [r7, #31]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3720      	adds	r7, #32
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800887e:	d112      	bne.n	80088a6 <HAL_SPI_Receive+0x44>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10e      	bne.n	80088a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2204      	movs	r2, #4
 800888c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f8f1 	bl	8008a84 <HAL_SPI_TransmitReceive>
 80088a2:	4603      	mov	r3, r0
 80088a4:	e0ea      	b.n	8008a7c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_SPI_Receive+0x52>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e0e3      	b.n	8008a7c <HAL_SPI_Receive+0x21a>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088bc:	f7fc fd2a 	bl	8005314 <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d002      	beq.n	80088d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80088ce:	2302      	movs	r3, #2
 80088d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088d2:	e0ca      	b.n	8008a6a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <HAL_SPI_Receive+0x7e>
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088e4:	e0c1      	b.n	8008a6a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2204      	movs	r2, #4
 80088ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	88fa      	ldrh	r2, [r7, #6]
 80088fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892c:	d10f      	bne.n	800894e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800894c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008958:	2b40      	cmp	r3, #64	; 0x40
 800895a:	d007      	beq.n	800896c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d162      	bne.n	8008a3a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008974:	e02e      	b.n	80089d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b01      	cmp	r3, #1
 8008982:	d115      	bne.n	80089b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f103 020c 	add.w	r2, r3, #12
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089ae:	e011      	b.n	80089d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089b0:	f7fc fcb0 	bl	8005314 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d803      	bhi.n	80089c8 <HAL_SPI_Receive+0x166>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d102      	bne.n	80089ce <HAL_SPI_Receive+0x16c>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089d2:	e04a      	b.n	8008a6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1cb      	bne.n	8008976 <HAL_SPI_Receive+0x114>
 80089de:	e031      	b.n	8008a44 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d113      	bne.n	8008a16 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	b292      	uxth	r2, r2
 80089fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	1c9a      	adds	r2, r3, #2
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a14:	e011      	b.n	8008a3a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a16:	f7fc fc7d 	bl	8005314 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d803      	bhi.n	8008a2e <HAL_SPI_Receive+0x1cc>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d102      	bne.n	8008a34 <HAL_SPI_Receive+0x1d2>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a38:	e017      	b.n	8008a6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1cd      	bne.n	80089e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 fb63 	bl	8009114 <SPI_EndRxTransaction>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	e000      	b.n	8008a6a <HAL_SPI_Receive+0x208>
  }

error :
 8008a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08c      	sub	sp, #48	; 0x30
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a92:	2301      	movs	r3, #1
 8008a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d101      	bne.n	8008aaa <HAL_SPI_TransmitReceive+0x26>
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e18a      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x33c>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab2:	f7fc fc2f 	bl	8005314 <HAL_GetTick>
 8008ab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ac8:	887b      	ldrh	r3, [r7, #2]
 8008aca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d00f      	beq.n	8008af4 <HAL_SPI_TransmitReceive+0x70>
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ada:	d107      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d103      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x68>
 8008ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d003      	beq.n	8008af4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008aec:	2302      	movs	r3, #2
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008af2:	e15b      	b.n	8008dac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <HAL_SPI_TransmitReceive+0x82>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <HAL_SPI_TransmitReceive+0x82>
 8008b00:	887b      	ldrh	r3, [r7, #2]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b0c:	e14e      	b.n	8008dac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d003      	beq.n	8008b22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	887a      	ldrh	r2, [r7, #2]
 8008b32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	887a      	ldrh	r2, [r7, #2]
 8008b38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	887a      	ldrh	r2, [r7, #2]
 8008b44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	887a      	ldrh	r2, [r7, #2]
 8008b4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b40      	cmp	r3, #64	; 0x40
 8008b64:	d007      	beq.n	8008b76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b7e:	d178      	bne.n	8008c72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x10a>
 8008b88:	8b7b      	ldrh	r3, [r7, #26]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d166      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	881a      	ldrh	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9e:	1c9a      	adds	r2, r3, #2
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb2:	e053      	b.n	8008c5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d11b      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x176>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <HAL_SPI_TransmitReceive+0x176>
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d113      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	881a      	ldrh	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	1c9a      	adds	r2, r3, #2
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d119      	bne.n	8008c3c <HAL_SPI_TransmitReceive+0x1b8>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d014      	beq.n	8008c3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	1c9a      	adds	r2, r3, #2
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c3c:	f7fc fb6a 	bl	8005314 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d807      	bhi.n	8008c5c <HAL_SPI_TransmitReceive+0x1d8>
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d003      	beq.n	8008c5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c5a:	e0a7      	b.n	8008dac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1a6      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x130>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1a1      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x130>
 8008c70:	e07c      	b.n	8008d6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0x1fc>
 8008c7a:	8b7b      	ldrh	r3, [r7, #26]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d16b      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	7812      	ldrb	r2, [r2, #0]
 8008c8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca6:	e057      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d11c      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x26c>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_SPI_TransmitReceive+0x26c>
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d114      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d119      	bne.n	8008d32 <HAL_SPI_TransmitReceive+0x2ae>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d014      	beq.n	8008d32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d32:	f7fc faef 	bl	8005314 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d803      	bhi.n	8008d4a <HAL_SPI_TransmitReceive+0x2c6>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d102      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x2cc>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d56:	e029      	b.n	8008dac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1a2      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x224>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d19d      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fa35 	bl	80091e0 <SPI_EndRxTxTransaction>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2220      	movs	r2, #32
 8008d86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008d88:	e010      	b.n	8008dac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	e000      	b.n	8008dac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3730      	adds	r7, #48	; 0x30
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	099b      	lsrs	r3, r3, #6
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10f      	bne.n	8008e0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	099b      	lsrs	r3, r3, #6
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
    return;
 8008e0a:	e0d7      	b.n	8008fbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <HAL_SPI_IRQHandler+0x66>
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	09db      	lsrs	r3, r3, #7
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	4798      	blx	r3
    return;
 8008e2c:	e0c6      	b.n	8008fbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	095b      	lsrs	r3, r3, #5
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10c      	bne.n	8008e54 <HAL_SPI_IRQHandler+0x8c>
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	099b      	lsrs	r3, r3, #6
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	0a1b      	lsrs	r3, r3, #8
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80b4 	beq.w	8008fbc <HAL_SPI_IRQHandler+0x1f4>
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	095b      	lsrs	r3, r3, #5
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80ad 	beq.w	8008fbc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	099b      	lsrs	r3, r3, #6
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d023      	beq.n	8008eb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d011      	beq.n	8008e9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7e:	f043 0204 	orr.w	r2, r3, #4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	e00b      	b.n	8008eb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	613b      	str	r3, [r7, #16]
 8008eb2:	693b      	ldr	r3, [r7, #16]
        return;
 8008eb4:	e082      	b.n	8008fbc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	095b      	lsrs	r3, r3, #5
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d014      	beq.n	8008eec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec6:	f043 0201 	orr.w	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00c      	beq.n	8008f12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efc:	f043 0208 	orr.w	r2, r3, #8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f04:	2300      	movs	r3, #0
 8008f06:	60bb      	str	r3, [r7, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d04f      	beq.n	8008fba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <HAL_SPI_IRQHandler+0x17e>
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d034      	beq.n	8008fb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0203 	bic.w	r2, r2, #3
 8008f54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d011      	beq.n	8008f82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	4a18      	ldr	r2, [pc, #96]	; (8008fc4 <HAL_SPI_IRQHandler+0x1fc>)
 8008f64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fc fbc2 	bl	80056f4 <HAL_DMA_Abort_IT>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d016      	beq.n	8008fb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8e:	4a0d      	ldr	r2, [pc, #52]	; (8008fc4 <HAL_SPI_IRQHandler+0x1fc>)
 8008f90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fc fbac 	bl	80056f4 <HAL_DMA_Abort_IT>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008fae:	e003      	b.n	8008fb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f809 	bl	8008fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008fb6:	e000      	b.n	8008fba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008fb8:	bf00      	nop
    return;
 8008fba:	bf00      	nop
  }
}
 8008fbc:	3720      	adds	r7, #32
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	08008fdd 	.word	0x08008fdd

08008fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7ff ffe6 	bl	8008fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ffc:	bf00      	nop
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009014:	f7fc f97e 	bl	8005314 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4413      	add	r3, r2
 8009022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009024:	f7fc f976 	bl	8005314 <HAL_GetTick>
 8009028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800902a:	4b39      	ldr	r3, [pc, #228]	; (8009110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	015b      	lsls	r3, r3, #5
 8009030:	0d1b      	lsrs	r3, r3, #20
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	fb02 f303 	mul.w	r3, r2, r3
 8009038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800903a:	e054      	b.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d050      	beq.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009044:	f7fc f966 	bl	8005314 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	429a      	cmp	r2, r3
 8009052:	d902      	bls.n	800905a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d13d      	bne.n	80090d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009072:	d111      	bne.n	8009098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800907c:	d004      	beq.n	8009088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009086:	d107      	bne.n	8009098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a0:	d10f      	bne.n	80090c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e017      	b.n	8009106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4013      	ands	r3, r2
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	bf0c      	ite	eq
 80090f6:	2301      	moveq	r3, #1
 80090f8:	2300      	movne	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	429a      	cmp	r2, r3
 8009102:	d19b      	bne.n	800903c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200000ac 	.word	0x200000ac

08009114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009128:	d111      	bne.n	800914e <SPI_EndRxTransaction+0x3a>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009132:	d004      	beq.n	800913e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800913c:	d107      	bne.n	800914e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800914c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009156:	d12a      	bne.n	80091ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009160:	d012      	beq.n	8009188 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2200      	movs	r2, #0
 800916a:	2180      	movs	r1, #128	; 0x80
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ff49 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d02d      	beq.n	80091d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917c:	f043 0220 	orr.w	r2, r3, #32
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e026      	b.n	80091d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2200      	movs	r2, #0
 8009190:	2101      	movs	r1, #1
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff ff36 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01a      	beq.n	80091d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a2:	f043 0220 	orr.w	r2, r3, #32
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e013      	b.n	80091d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	2101      	movs	r1, #1
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff ff23 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c8:	f043 0220 	orr.w	r2, r3, #32
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e000      	b.n	80091d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091ec:	4b1b      	ldr	r3, [pc, #108]	; (800925c <SPI_EndRxTxTransaction+0x7c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <SPI_EndRxTxTransaction+0x80>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	0d5b      	lsrs	r3, r3, #21
 80091f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800920a:	d112      	bne.n	8009232 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	2180      	movs	r1, #128	; 0x80
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fef4 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009226:	f043 0220 	orr.w	r2, r3, #32
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e00f      	b.n	8009252 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	3b01      	subs	r3, #1
 800923c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d0f2      	beq.n	8009232 <SPI_EndRxTxTransaction+0x52>
 800924c:	e000      	b.n	8009250 <SPI_EndRxTxTransaction+0x70>
        break;
 800924e:	bf00      	nop
  }

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200000ac 	.word	0x200000ac
 8009260:	165e9f81 	.word	0x165e9f81

08009264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e041      	b.n	80092fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fb fc04 	bl	8004a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f000 fae0 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b01      	cmp	r3, #1
 8009316:	d001      	beq.n	800931c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e04e      	b.n	80093ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a23      	ldr	r2, [pc, #140]	; (80093c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d022      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009346:	d01d      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <HAL_TIM_Base_Start_IT+0xc8>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d018      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a1e      	ldr	r2, [pc, #120]	; (80093d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d013      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1c      	ldr	r2, [pc, #112]	; (80093d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00e      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1b      	ldr	r2, [pc, #108]	; (80093d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d009      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a19      	ldr	r2, [pc, #100]	; (80093dc <HAL_TIM_Base_Start_IT+0xd8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d004      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a18      	ldr	r2, [pc, #96]	; (80093e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d111      	bne.n	80093a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b06      	cmp	r3, #6
 8009394:	d010      	beq.n	80093b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0201 	orr.w	r2, r2, #1
 80093a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a6:	e007      	b.n	80093b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0201 	orr.w	r2, r2, #1
 80093b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40010400 	.word	0x40010400
 80093dc:	40014000 	.word	0x40014000
 80093e0:	40001800 	.word	0x40001800

080093e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e041      	b.n	800947a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fb fb22 	bl	8004a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f000 fa20 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b02      	cmp	r3, #2
 8009496:	d122      	bne.n	80094de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d11b      	bne.n	80094de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f06f 0202 	mvn.w	r2, #2
 80094ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f9b1 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 80094ca:	e005      	b.n	80094d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f9a3 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f9b4 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d122      	bne.n	8009532 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d11b      	bne.n	8009532 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f06f 0204 	mvn.w	r2, #4
 8009502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f987 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 800951e:	e005      	b.n	800952c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f979 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f98a 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f003 0308 	and.w	r3, r3, #8
 800953c:	2b08      	cmp	r3, #8
 800953e:	d122      	bne.n	8009586 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0308 	and.w	r3, r3, #8
 800954a:	2b08      	cmp	r3, #8
 800954c:	d11b      	bne.n	8009586 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f06f 0208 	mvn.w	r2, #8
 8009556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2204      	movs	r2, #4
 800955c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f95d 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 8009572:	e005      	b.n	8009580 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f94f 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f960 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	2b10      	cmp	r3, #16
 8009592:	d122      	bne.n	80095da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f003 0310 	and.w	r3, r3, #16
 800959e:	2b10      	cmp	r3, #16
 80095a0:	d11b      	bne.n	80095da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f06f 0210 	mvn.w	r2, #16
 80095aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2208      	movs	r2, #8
 80095b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f933 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 80095c6:	e005      	b.n	80095d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f925 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f936 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d10e      	bne.n	8009606 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d107      	bne.n	8009606 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f06f 0201 	mvn.w	r2, #1
 80095fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fb f969 	bl	80048d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009610:	2b80      	cmp	r3, #128	; 0x80
 8009612:	d10e      	bne.n	8009632 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961e:	2b80      	cmp	r3, #128	; 0x80
 8009620:	d107      	bne.n	8009632 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800962a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fbf1 	bl	8009e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d10e      	bne.n	800965e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b40      	cmp	r3, #64	; 0x40
 800964c:	d107      	bne.n	800965e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f8fb 	bl	8009854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b20      	cmp	r3, #32
 800966a:	d10e      	bne.n	800968a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b20      	cmp	r3, #32
 8009678:	d107      	bne.n	800968a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f06f 0220 	mvn.w	r2, #32
 8009682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fbbb 	bl	8009e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d101      	bne.n	80096b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096ae:	2302      	movs	r3, #2
 80096b0:	e0ae      	b.n	8009810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b0c      	cmp	r3, #12
 80096be:	f200 809f 	bhi.w	8009800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096c2:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096fd 	.word	0x080096fd
 80096cc:	08009801 	.word	0x08009801
 80096d0:	08009801 	.word	0x08009801
 80096d4:	08009801 	.word	0x08009801
 80096d8:	0800973d 	.word	0x0800973d
 80096dc:	08009801 	.word	0x08009801
 80096e0:	08009801 	.word	0x08009801
 80096e4:	08009801 	.word	0x08009801
 80096e8:	0800977f 	.word	0x0800977f
 80096ec:	08009801 	.word	0x08009801
 80096f0:	08009801 	.word	0x08009801
 80096f4:	08009801 	.word	0x08009801
 80096f8:	080097bf 	.word	0x080097bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f950 	bl	80099a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0208 	orr.w	r2, r2, #8
 8009716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 0204 	bic.w	r2, r2, #4
 8009726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6999      	ldr	r1, [r3, #24]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	691a      	ldr	r2, [r3, #16]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	619a      	str	r2, [r3, #24]
      break;
 800973a:	e064      	b.n	8009806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f9a0 	bl	8009a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6999      	ldr	r1, [r3, #24]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	021a      	lsls	r2, r3, #8
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	619a      	str	r2, [r3, #24]
      break;
 800977c:	e043      	b.n	8009806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f9f5 	bl	8009b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69da      	ldr	r2, [r3, #28]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f042 0208 	orr.w	r2, r2, #8
 8009798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0204 	bic.w	r2, r2, #4
 80097a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69d9      	ldr	r1, [r3, #28]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	691a      	ldr	r2, [r3, #16]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	61da      	str	r2, [r3, #28]
      break;
 80097bc:	e023      	b.n	8009806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 fa49 	bl	8009c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69da      	ldr	r2, [r3, #28]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69d9      	ldr	r1, [r3, #28]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	021a      	lsls	r2, r3, #8
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	61da      	str	r2, [r3, #28]
      break;
 80097fe:	e002      	b.n	8009806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]
      break;
 8009804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a40      	ldr	r2, [pc, #256]	; (800997c <TIM_Base_SetConfig+0x114>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d013      	beq.n	80098a8 <TIM_Base_SetConfig+0x40>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009886:	d00f      	beq.n	80098a8 <TIM_Base_SetConfig+0x40>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a3d      	ldr	r2, [pc, #244]	; (8009980 <TIM_Base_SetConfig+0x118>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00b      	beq.n	80098a8 <TIM_Base_SetConfig+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a3c      	ldr	r2, [pc, #240]	; (8009984 <TIM_Base_SetConfig+0x11c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d007      	beq.n	80098a8 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a3b      	ldr	r2, [pc, #236]	; (8009988 <TIM_Base_SetConfig+0x120>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d003      	beq.n	80098a8 <TIM_Base_SetConfig+0x40>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a3a      	ldr	r2, [pc, #232]	; (800998c <TIM_Base_SetConfig+0x124>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d108      	bne.n	80098ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a2f      	ldr	r2, [pc, #188]	; (800997c <TIM_Base_SetConfig+0x114>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d02b      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c8:	d027      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2c      	ldr	r2, [pc, #176]	; (8009980 <TIM_Base_SetConfig+0x118>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d023      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2b      	ldr	r2, [pc, #172]	; (8009984 <TIM_Base_SetConfig+0x11c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d01f      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2a      	ldr	r2, [pc, #168]	; (8009988 <TIM_Base_SetConfig+0x120>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01b      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a29      	ldr	r2, [pc, #164]	; (800998c <TIM_Base_SetConfig+0x124>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d017      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a28      	ldr	r2, [pc, #160]	; (8009990 <TIM_Base_SetConfig+0x128>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d013      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a27      	ldr	r2, [pc, #156]	; (8009994 <TIM_Base_SetConfig+0x12c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d00f      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a26      	ldr	r2, [pc, #152]	; (8009998 <TIM_Base_SetConfig+0x130>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00b      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a25      	ldr	r2, [pc, #148]	; (800999c <TIM_Base_SetConfig+0x134>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d007      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a24      	ldr	r2, [pc, #144]	; (80099a0 <TIM_Base_SetConfig+0x138>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d003      	beq.n	800991a <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a23      	ldr	r2, [pc, #140]	; (80099a4 <TIM_Base_SetConfig+0x13c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d108      	bne.n	800992c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a0a      	ldr	r2, [pc, #40]	; (800997c <TIM_Base_SetConfig+0x114>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d003      	beq.n	8009960 <TIM_Base_SetConfig+0xf8>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a0c      	ldr	r2, [pc, #48]	; (800998c <TIM_Base_SetConfig+0x124>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d103      	bne.n	8009968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	691a      	ldr	r2, [r3, #16]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	615a      	str	r2, [r3, #20]
}
 800996e:	bf00      	nop
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	40010000 	.word	0x40010000
 8009980:	40000400 	.word	0x40000400
 8009984:	40000800 	.word	0x40000800
 8009988:	40000c00 	.word	0x40000c00
 800998c:	40010400 	.word	0x40010400
 8009990:	40014000 	.word	0x40014000
 8009994:	40014400 	.word	0x40014400
 8009998:	40014800 	.word	0x40014800
 800999c:	40001800 	.word	0x40001800
 80099a0:	40001c00 	.word	0x40001c00
 80099a4:	40002000 	.word	0x40002000

080099a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	f023 0201 	bic.w	r2, r3, #1
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f023 0302 	bic.w	r3, r3, #2
 80099f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a20      	ldr	r2, [pc, #128]	; (8009a80 <TIM_OC1_SetConfig+0xd8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d003      	beq.n	8009a0c <TIM_OC1_SetConfig+0x64>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1f      	ldr	r2, [pc, #124]	; (8009a84 <TIM_OC1_SetConfig+0xdc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d10c      	bne.n	8009a26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f023 0308 	bic.w	r3, r3, #8
 8009a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f023 0304 	bic.w	r3, r3, #4
 8009a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a15      	ldr	r2, [pc, #84]	; (8009a80 <TIM_OC1_SetConfig+0xd8>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d003      	beq.n	8009a36 <TIM_OC1_SetConfig+0x8e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a14      	ldr	r2, [pc, #80]	; (8009a84 <TIM_OC1_SetConfig+0xdc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d111      	bne.n	8009a5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	621a      	str	r2, [r3, #32]
}
 8009a74:	bf00      	nop
 8009a76:	371c      	adds	r7, #28
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40010400 	.word	0x40010400

08009a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f023 0210 	bic.w	r2, r3, #16
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f023 0320 	bic.w	r3, r3, #32
 8009ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a22      	ldr	r2, [pc, #136]	; (8009b6c <TIM_OC2_SetConfig+0xe4>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d003      	beq.n	8009af0 <TIM_OC2_SetConfig+0x68>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a21      	ldr	r2, [pc, #132]	; (8009b70 <TIM_OC2_SetConfig+0xe8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d10d      	bne.n	8009b0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	011b      	lsls	r3, r3, #4
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <TIM_OC2_SetConfig+0xe4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d003      	beq.n	8009b1c <TIM_OC2_SetConfig+0x94>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <TIM_OC2_SetConfig+0xe8>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d113      	bne.n	8009b44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	621a      	str	r2, [r3, #32]
}
 8009b5e:	bf00      	nop
 8009b60:	371c      	adds	r7, #28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40010400 	.word	0x40010400

08009b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0303 	bic.w	r3, r3, #3
 8009baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a21      	ldr	r2, [pc, #132]	; (8009c54 <TIM_OC3_SetConfig+0xe0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d003      	beq.n	8009bda <TIM_OC3_SetConfig+0x66>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a20      	ldr	r2, [pc, #128]	; (8009c58 <TIM_OC3_SetConfig+0xe4>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d10d      	bne.n	8009bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a16      	ldr	r2, [pc, #88]	; (8009c54 <TIM_OC3_SetConfig+0xe0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d003      	beq.n	8009c06 <TIM_OC3_SetConfig+0x92>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a15      	ldr	r2, [pc, #84]	; (8009c58 <TIM_OC3_SetConfig+0xe4>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d113      	bne.n	8009c2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	621a      	str	r2, [r3, #32]
}
 8009c48:	bf00      	nop
 8009c4a:	371c      	adds	r7, #28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40010400 	.word	0x40010400

08009c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	031b      	lsls	r3, r3, #12
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <TIM_OC4_SetConfig+0xa4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d003      	beq.n	8009cc4 <TIM_OC4_SetConfig+0x68>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a11      	ldr	r2, [pc, #68]	; (8009d04 <TIM_OC4_SetConfig+0xa8>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d109      	bne.n	8009cd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	019b      	lsls	r3, r3, #6
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	621a      	str	r2, [r3, #32]
}
 8009cf2:	bf00      	nop
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40010400 	.word	0x40010400

08009d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e05a      	b.n	8009dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a21      	ldr	r2, [pc, #132]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d022      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6c:	d01d      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1d      	ldr	r2, [pc, #116]	; (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d018      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1b      	ldr	r2, [pc, #108]	; (8009dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d013      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a1a      	ldr	r2, [pc, #104]	; (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00e      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a18      	ldr	r2, [pc, #96]	; (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d009      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a15      	ldr	r2, [pc, #84]	; (8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d10c      	bne.n	8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40010000 	.word	0x40010000
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40000c00 	.word	0x40000c00
 8009df4:	40010400 	.word	0x40010400
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40001800 	.word	0x40001800

08009e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e03f      	b.n	8009eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fb f930 	bl	80050b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2224      	movs	r2, #36	; 0x24
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f929 	bl	800a0c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691a      	ldr	r2, [r3, #16]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	695a      	ldr	r2, [r3, #20]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68da      	ldr	r2, [r3, #12]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b08a      	sub	sp, #40	; 0x28
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	603b      	str	r3, [r7, #0]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d17c      	bne.n	8009fdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <HAL_UART_Transmit+0x2c>
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e075      	b.n	8009fde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d101      	bne.n	8009f00 <HAL_UART_Transmit+0x3e>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e06e      	b.n	8009fde <HAL_UART_Transmit+0x11c>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2221      	movs	r2, #33	; 0x21
 8009f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f16:	f7fb f9fd 	bl	8005314 <HAL_GetTick>
 8009f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	88fa      	ldrh	r2, [r7, #6]
 8009f20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	88fa      	ldrh	r2, [r7, #6]
 8009f26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f30:	d108      	bne.n	8009f44 <HAL_UART_Transmit+0x82>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d104      	bne.n	8009f44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	e003      	b.n	8009f4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f54:	e02a      	b.n	8009fac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2180      	movs	r1, #128	; 0x80
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 f840 	bl	8009fe6 <UART_WaitOnFlagUntilTimeout>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e036      	b.n	8009fde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10b      	bne.n	8009f8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	3302      	adds	r3, #2
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	e007      	b.n	8009f9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	781a      	ldrb	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1cf      	bne.n	8009f56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2140      	movs	r1, #64	; 0x40
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f810 	bl	8009fe6 <UART_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e006      	b.n	8009fde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e000      	b.n	8009fde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009fdc:	2302      	movs	r3, #2
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b090      	sub	sp, #64	; 0x40
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	603b      	str	r3, [r7, #0]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff6:	e050      	b.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d04c      	beq.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a002:	2b00      	cmp	r3, #0
 800a004:	d007      	beq.n	800a016 <UART_WaitOnFlagUntilTimeout+0x30>
 800a006:	f7fb f985 	bl	8005314 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a012:	429a      	cmp	r2, r3
 800a014:	d241      	bcs.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a02c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	330c      	adds	r3, #12
 800a034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a036:	637a      	str	r2, [r7, #52]	; 0x34
 800a038:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e5      	bne.n	800a016 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3314      	adds	r3, #20
 800a050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	613b      	str	r3, [r7, #16]
   return(result);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f023 0301 	bic.w	r3, r3, #1
 800a060:	63bb      	str	r3, [r7, #56]	; 0x38
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3314      	adds	r3, #20
 800a068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a06a:	623a      	str	r2, [r7, #32]
 800a06c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	69f9      	ldr	r1, [r7, #28]
 800a070:	6a3a      	ldr	r2, [r7, #32]
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	61bb      	str	r3, [r7, #24]
   return(result);
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e5      	bne.n	800a04a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2220      	movs	r2, #32
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2220      	movs	r2, #32
 800a08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e00f      	b.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	bf0c      	ite	eq
 800a0aa:	2301      	moveq	r3, #1
 800a0ac:	2300      	movne	r3, #0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d09f      	beq.n	8009ff8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3740      	adds	r7, #64	; 0x40
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c8:	b0c0      	sub	sp, #256	; 0x100
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e0:	68d9      	ldr	r1, [r3, #12]
 800a0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	ea40 0301 	orr.w	r3, r0, r1
 800a0ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	431a      	orrs	r2, r3
 800a104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a11c:	f021 010c 	bic.w	r1, r1, #12
 800a120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a12a:	430b      	orrs	r3, r1
 800a12c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13e:	6999      	ldr	r1, [r3, #24]
 800a140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	ea40 0301 	orr.w	r3, r0, r1
 800a14a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b8f      	ldr	r3, [pc, #572]	; (800a390 <UART_SetConfig+0x2cc>)
 800a154:	429a      	cmp	r2, r3
 800a156:	d005      	beq.n	800a164 <UART_SetConfig+0xa0>
 800a158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	4b8d      	ldr	r3, [pc, #564]	; (800a394 <UART_SetConfig+0x2d0>)
 800a160:	429a      	cmp	r2, r3
 800a162:	d104      	bne.n	800a16e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a164:	f7fe f9a4 	bl	80084b0 <HAL_RCC_GetPCLK2Freq>
 800a168:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a16c:	e003      	b.n	800a176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a16e:	f7fe f98b 	bl	8008488 <HAL_RCC_GetPCLK1Freq>
 800a172:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a180:	f040 810c 	bne.w	800a39c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a18e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	1891      	adds	r1, r2, r2
 800a19c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a19e:	415b      	adcs	r3, r3
 800a1a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	eb12 0801 	adds.w	r8, r2, r1
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	eb43 0901 	adc.w	r9, r3, r1
 800a1b2:	f04f 0200 	mov.w	r2, #0
 800a1b6:	f04f 0300 	mov.w	r3, #0
 800a1ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1c6:	4690      	mov	r8, r2
 800a1c8:	4699      	mov	r9, r3
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	eb18 0303 	adds.w	r3, r8, r3
 800a1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	eb49 0303 	adc.w	r3, r9, r3
 800a1da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a1ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	18db      	adds	r3, r3, r3
 800a1f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	eb42 0303 	adc.w	r3, r2, r3
 800a1fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a208:	f7f5 ffe6 	bl	80001d8 <__aeabi_uldivmod>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4b61      	ldr	r3, [pc, #388]	; (800a398 <UART_SetConfig+0x2d4>)
 800a212:	fba3 2302 	umull	r2, r3, r3, r2
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	011c      	lsls	r4, r3, #4
 800a21a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a224:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a22c:	4642      	mov	r2, r8
 800a22e:	464b      	mov	r3, r9
 800a230:	1891      	adds	r1, r2, r2
 800a232:	64b9      	str	r1, [r7, #72]	; 0x48
 800a234:	415b      	adcs	r3, r3
 800a236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a23c:	4641      	mov	r1, r8
 800a23e:	eb12 0a01 	adds.w	sl, r2, r1
 800a242:	4649      	mov	r1, r9
 800a244:	eb43 0b01 	adc.w	fp, r3, r1
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a25c:	4692      	mov	sl, r2
 800a25e:	469b      	mov	fp, r3
 800a260:	4643      	mov	r3, r8
 800a262:	eb1a 0303 	adds.w	r3, sl, r3
 800a266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a26a:	464b      	mov	r3, r9
 800a26c:	eb4b 0303 	adc.w	r3, fp, r3
 800a270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a288:	460b      	mov	r3, r1
 800a28a:	18db      	adds	r3, r3, r3
 800a28c:	643b      	str	r3, [r7, #64]	; 0x40
 800a28e:	4613      	mov	r3, r2
 800a290:	eb42 0303 	adc.w	r3, r2, r3
 800a294:	647b      	str	r3, [r7, #68]	; 0x44
 800a296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a29a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a29e:	f7f5 ff9b 	bl	80001d8 <__aeabi_uldivmod>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4b3b      	ldr	r3, [pc, #236]	; (800a398 <UART_SetConfig+0x2d4>)
 800a2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800a2ae:	095b      	lsrs	r3, r3, #5
 800a2b0:	2264      	movs	r2, #100	; 0x64
 800a2b2:	fb02 f303 	mul.w	r3, r2, r3
 800a2b6:	1acb      	subs	r3, r1, r3
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a2be:	4b36      	ldr	r3, [pc, #216]	; (800a398 <UART_SetConfig+0x2d4>)
 800a2c0:	fba3 2302 	umull	r2, r3, r3, r2
 800a2c4:	095b      	lsrs	r3, r3, #5
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2cc:	441c      	add	r4, r3
 800a2ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a2dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a2e0:	4642      	mov	r2, r8
 800a2e2:	464b      	mov	r3, r9
 800a2e4:	1891      	adds	r1, r2, r2
 800a2e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a2e8:	415b      	adcs	r3, r3
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	1851      	adds	r1, r2, r1
 800a2f4:	6339      	str	r1, [r7, #48]	; 0x30
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	414b      	adcs	r3, r1
 800a2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fc:	f04f 0200 	mov.w	r2, #0
 800a300:	f04f 0300 	mov.w	r3, #0
 800a304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a308:	4659      	mov	r1, fp
 800a30a:	00cb      	lsls	r3, r1, #3
 800a30c:	4651      	mov	r1, sl
 800a30e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a312:	4651      	mov	r1, sl
 800a314:	00ca      	lsls	r2, r1, #3
 800a316:	4610      	mov	r0, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	4603      	mov	r3, r0
 800a31c:	4642      	mov	r2, r8
 800a31e:	189b      	adds	r3, r3, r2
 800a320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a324:	464b      	mov	r3, r9
 800a326:	460a      	mov	r2, r1
 800a328:	eb42 0303 	adc.w	r3, r2, r3
 800a32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a33c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a344:	460b      	mov	r3, r1
 800a346:	18db      	adds	r3, r3, r3
 800a348:	62bb      	str	r3, [r7, #40]	; 0x28
 800a34a:	4613      	mov	r3, r2
 800a34c:	eb42 0303 	adc.w	r3, r2, r3
 800a350:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a35a:	f7f5 ff3d 	bl	80001d8 <__aeabi_uldivmod>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4b0d      	ldr	r3, [pc, #52]	; (800a398 <UART_SetConfig+0x2d4>)
 800a364:	fba3 1302 	umull	r1, r3, r3, r2
 800a368:	095b      	lsrs	r3, r3, #5
 800a36a:	2164      	movs	r1, #100	; 0x64
 800a36c:	fb01 f303 	mul.w	r3, r1, r3
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	3332      	adds	r3, #50	; 0x32
 800a376:	4a08      	ldr	r2, [pc, #32]	; (800a398 <UART_SetConfig+0x2d4>)
 800a378:	fba2 2303 	umull	r2, r3, r2, r3
 800a37c:	095b      	lsrs	r3, r3, #5
 800a37e:	f003 0207 	and.w	r2, r3, #7
 800a382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4422      	add	r2, r4
 800a38a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a38c:	e105      	b.n	800a59a <UART_SetConfig+0x4d6>
 800a38e:	bf00      	nop
 800a390:	40011000 	.word	0x40011000
 800a394:	40011400 	.word	0x40011400
 800a398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	464b      	mov	r3, r9
 800a3b2:	1891      	adds	r1, r2, r2
 800a3b4:	6239      	str	r1, [r7, #32]
 800a3b6:	415b      	adcs	r3, r3
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3be:	4641      	mov	r1, r8
 800a3c0:	1854      	adds	r4, r2, r1
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	eb43 0501 	adc.w	r5, r3, r1
 800a3c8:	f04f 0200 	mov.w	r2, #0
 800a3cc:	f04f 0300 	mov.w	r3, #0
 800a3d0:	00eb      	lsls	r3, r5, #3
 800a3d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3d6:	00e2      	lsls	r2, r4, #3
 800a3d8:	4614      	mov	r4, r2
 800a3da:	461d      	mov	r5, r3
 800a3dc:	4643      	mov	r3, r8
 800a3de:	18e3      	adds	r3, r4, r3
 800a3e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3e4:	464b      	mov	r3, r9
 800a3e6:	eb45 0303 	adc.w	r3, r5, r3
 800a3ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3fe:	f04f 0200 	mov.w	r2, #0
 800a402:	f04f 0300 	mov.w	r3, #0
 800a406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a40a:	4629      	mov	r1, r5
 800a40c:	008b      	lsls	r3, r1, #2
 800a40e:	4621      	mov	r1, r4
 800a410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a414:	4621      	mov	r1, r4
 800a416:	008a      	lsls	r2, r1, #2
 800a418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a41c:	f7f5 fedc 	bl	80001d8 <__aeabi_uldivmod>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4b60      	ldr	r3, [pc, #384]	; (800a5a8 <UART_SetConfig+0x4e4>)
 800a426:	fba3 2302 	umull	r2, r3, r3, r2
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	011c      	lsls	r4, r3, #4
 800a42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a432:	2200      	movs	r2, #0
 800a434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a43c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	1891      	adds	r1, r2, r2
 800a446:	61b9      	str	r1, [r7, #24]
 800a448:	415b      	adcs	r3, r3
 800a44a:	61fb      	str	r3, [r7, #28]
 800a44c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a450:	4641      	mov	r1, r8
 800a452:	1851      	adds	r1, r2, r1
 800a454:	6139      	str	r1, [r7, #16]
 800a456:	4649      	mov	r1, r9
 800a458:	414b      	adcs	r3, r1
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	f04f 0200 	mov.w	r2, #0
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a468:	4659      	mov	r1, fp
 800a46a:	00cb      	lsls	r3, r1, #3
 800a46c:	4651      	mov	r1, sl
 800a46e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a472:	4651      	mov	r1, sl
 800a474:	00ca      	lsls	r2, r1, #3
 800a476:	4610      	mov	r0, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	4642      	mov	r2, r8
 800a47e:	189b      	adds	r3, r3, r2
 800a480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a484:	464b      	mov	r3, r9
 800a486:	460a      	mov	r2, r1
 800a488:	eb42 0303 	adc.w	r3, r2, r3
 800a48c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	67bb      	str	r3, [r7, #120]	; 0x78
 800a49a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a49c:	f04f 0200 	mov.w	r2, #0
 800a4a0:	f04f 0300 	mov.w	r3, #0
 800a4a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	008b      	lsls	r3, r1, #2
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	008a      	lsls	r2, r1, #2
 800a4b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a4ba:	f7f5 fe8d 	bl	80001d8 <__aeabi_uldivmod>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4b39      	ldr	r3, [pc, #228]	; (800a5a8 <UART_SetConfig+0x4e4>)
 800a4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4c8:	095b      	lsrs	r3, r3, #5
 800a4ca:	2164      	movs	r1, #100	; 0x64
 800a4cc:	fb01 f303 	mul.w	r3, r1, r3
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	3332      	adds	r3, #50	; 0x32
 800a4d6:	4a34      	ldr	r2, [pc, #208]	; (800a5a8 <UART_SetConfig+0x4e4>)
 800a4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4e2:	441c      	add	r4, r3
 800a4e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	673b      	str	r3, [r7, #112]	; 0x70
 800a4ec:	677a      	str	r2, [r7, #116]	; 0x74
 800a4ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	1891      	adds	r1, r2, r2
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	415b      	adcs	r3, r3
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a502:	4641      	mov	r1, r8
 800a504:	1851      	adds	r1, r2, r1
 800a506:	6039      	str	r1, [r7, #0]
 800a508:	4649      	mov	r1, r9
 800a50a:	414b      	adcs	r3, r1
 800a50c:	607b      	str	r3, [r7, #4]
 800a50e:	f04f 0200 	mov.w	r2, #0
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a51a:	4659      	mov	r1, fp
 800a51c:	00cb      	lsls	r3, r1, #3
 800a51e:	4651      	mov	r1, sl
 800a520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a524:	4651      	mov	r1, sl
 800a526:	00ca      	lsls	r2, r1, #3
 800a528:	4610      	mov	r0, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	4603      	mov	r3, r0
 800a52e:	4642      	mov	r2, r8
 800a530:	189b      	adds	r3, r3, r2
 800a532:	66bb      	str	r3, [r7, #104]	; 0x68
 800a534:	464b      	mov	r3, r9
 800a536:	460a      	mov	r2, r1
 800a538:	eb42 0303 	adc.w	r3, r2, r3
 800a53c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	663b      	str	r3, [r7, #96]	; 0x60
 800a548:	667a      	str	r2, [r7, #100]	; 0x64
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a556:	4649      	mov	r1, r9
 800a558:	008b      	lsls	r3, r1, #2
 800a55a:	4641      	mov	r1, r8
 800a55c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a560:	4641      	mov	r1, r8
 800a562:	008a      	lsls	r2, r1, #2
 800a564:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a568:	f7f5 fe36 	bl	80001d8 <__aeabi_uldivmod>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4b0d      	ldr	r3, [pc, #52]	; (800a5a8 <UART_SetConfig+0x4e4>)
 800a572:	fba3 1302 	umull	r1, r3, r3, r2
 800a576:	095b      	lsrs	r3, r3, #5
 800a578:	2164      	movs	r1, #100	; 0x64
 800a57a:	fb01 f303 	mul.w	r3, r1, r3
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	011b      	lsls	r3, r3, #4
 800a582:	3332      	adds	r3, #50	; 0x32
 800a584:	4a08      	ldr	r2, [pc, #32]	; (800a5a8 <UART_SetConfig+0x4e4>)
 800a586:	fba2 2303 	umull	r2, r3, r2, r3
 800a58a:	095b      	lsrs	r3, r3, #5
 800a58c:	f003 020f 	and.w	r2, r3, #15
 800a590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4422      	add	r2, r4
 800a598:	609a      	str	r2, [r3, #8]
}
 800a59a:	bf00      	nop
 800a59c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5a6:	bf00      	nop
 800a5a8:	51eb851f 	.word	0x51eb851f

0800a5ac <__libc_init_array>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4d0d      	ldr	r5, [pc, #52]	; (800a5e4 <__libc_init_array+0x38>)
 800a5b0:	4c0d      	ldr	r4, [pc, #52]	; (800a5e8 <__libc_init_array+0x3c>)
 800a5b2:	1b64      	subs	r4, r4, r5
 800a5b4:	10a4      	asrs	r4, r4, #2
 800a5b6:	2600      	movs	r6, #0
 800a5b8:	42a6      	cmp	r6, r4
 800a5ba:	d109      	bne.n	800a5d0 <__libc_init_array+0x24>
 800a5bc:	4d0b      	ldr	r5, [pc, #44]	; (800a5ec <__libc_init_array+0x40>)
 800a5be:	4c0c      	ldr	r4, [pc, #48]	; (800a5f0 <__libc_init_array+0x44>)
 800a5c0:	f000 f87c 	bl	800a6bc <_init>
 800a5c4:	1b64      	subs	r4, r4, r5
 800a5c6:	10a4      	asrs	r4, r4, #2
 800a5c8:	2600      	movs	r6, #0
 800a5ca:	42a6      	cmp	r6, r4
 800a5cc:	d105      	bne.n	800a5da <__libc_init_array+0x2e>
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d4:	4798      	blx	r3
 800a5d6:	3601      	adds	r6, #1
 800a5d8:	e7ee      	b.n	800a5b8 <__libc_init_array+0xc>
 800a5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5de:	4798      	blx	r3
 800a5e0:	3601      	adds	r6, #1
 800a5e2:	e7f2      	b.n	800a5ca <__libc_init_array+0x1e>
 800a5e4:	0800d494 	.word	0x0800d494
 800a5e8:	0800d494 	.word	0x0800d494
 800a5ec:	0800d494 	.word	0x0800d494
 800a5f0:	0800d498 	.word	0x0800d498

0800a5f4 <__itoa>:
 800a5f4:	1e93      	subs	r3, r2, #2
 800a5f6:	2b22      	cmp	r3, #34	; 0x22
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	d904      	bls.n	800a608 <__itoa+0x14>
 800a5fe:	2300      	movs	r3, #0
 800a600:	700b      	strb	r3, [r1, #0]
 800a602:	461c      	mov	r4, r3
 800a604:	4620      	mov	r0, r4
 800a606:	bd10      	pop	{r4, pc}
 800a608:	2a0a      	cmp	r2, #10
 800a60a:	d109      	bne.n	800a620 <__itoa+0x2c>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	da07      	bge.n	800a620 <__itoa+0x2c>
 800a610:	232d      	movs	r3, #45	; 0x2d
 800a612:	700b      	strb	r3, [r1, #0]
 800a614:	4240      	negs	r0, r0
 800a616:	2101      	movs	r1, #1
 800a618:	4421      	add	r1, r4
 800a61a:	f000 f80d 	bl	800a638 <__utoa>
 800a61e:	e7f1      	b.n	800a604 <__itoa+0x10>
 800a620:	2100      	movs	r1, #0
 800a622:	e7f9      	b.n	800a618 <__itoa+0x24>

0800a624 <itoa>:
 800a624:	f7ff bfe6 	b.w	800a5f4 <__itoa>

0800a628 <memset>:
 800a628:	4402      	add	r2, r0
 800a62a:	4603      	mov	r3, r0
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d100      	bne.n	800a632 <memset+0xa>
 800a630:	4770      	bx	lr
 800a632:	f803 1b01 	strb.w	r1, [r3], #1
 800a636:	e7f9      	b.n	800a62c <memset+0x4>

0800a638 <__utoa>:
 800a638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63a:	4c1f      	ldr	r4, [pc, #124]	; (800a6b8 <__utoa+0x80>)
 800a63c:	b08b      	sub	sp, #44	; 0x2c
 800a63e:	4605      	mov	r5, r0
 800a640:	460b      	mov	r3, r1
 800a642:	466e      	mov	r6, sp
 800a644:	f104 0c20 	add.w	ip, r4, #32
 800a648:	6820      	ldr	r0, [r4, #0]
 800a64a:	6861      	ldr	r1, [r4, #4]
 800a64c:	4637      	mov	r7, r6
 800a64e:	c703      	stmia	r7!, {r0, r1}
 800a650:	3408      	adds	r4, #8
 800a652:	4564      	cmp	r4, ip
 800a654:	463e      	mov	r6, r7
 800a656:	d1f7      	bne.n	800a648 <__utoa+0x10>
 800a658:	7921      	ldrb	r1, [r4, #4]
 800a65a:	7139      	strb	r1, [r7, #4]
 800a65c:	1e91      	subs	r1, r2, #2
 800a65e:	6820      	ldr	r0, [r4, #0]
 800a660:	6038      	str	r0, [r7, #0]
 800a662:	2922      	cmp	r1, #34	; 0x22
 800a664:	f04f 0100 	mov.w	r1, #0
 800a668:	d904      	bls.n	800a674 <__utoa+0x3c>
 800a66a:	7019      	strb	r1, [r3, #0]
 800a66c:	460b      	mov	r3, r1
 800a66e:	4618      	mov	r0, r3
 800a670:	b00b      	add	sp, #44	; 0x2c
 800a672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a674:	1e58      	subs	r0, r3, #1
 800a676:	4684      	mov	ip, r0
 800a678:	fbb5 f7f2 	udiv	r7, r5, r2
 800a67c:	fb02 5617 	mls	r6, r2, r7, r5
 800a680:	3628      	adds	r6, #40	; 0x28
 800a682:	446e      	add	r6, sp
 800a684:	460c      	mov	r4, r1
 800a686:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a68a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a68e:	462e      	mov	r6, r5
 800a690:	42b2      	cmp	r2, r6
 800a692:	f101 0101 	add.w	r1, r1, #1
 800a696:	463d      	mov	r5, r7
 800a698:	d9ee      	bls.n	800a678 <__utoa+0x40>
 800a69a:	2200      	movs	r2, #0
 800a69c:	545a      	strb	r2, [r3, r1]
 800a69e:	1919      	adds	r1, r3, r4
 800a6a0:	1aa5      	subs	r5, r4, r2
 800a6a2:	42aa      	cmp	r2, r5
 800a6a4:	dae3      	bge.n	800a66e <__utoa+0x36>
 800a6a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a6aa:	780e      	ldrb	r6, [r1, #0]
 800a6ac:	7006      	strb	r6, [r0, #0]
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	f801 5901 	strb.w	r5, [r1], #-1
 800a6b4:	e7f4      	b.n	800a6a0 <__utoa+0x68>
 800a6b6:	bf00      	nop
 800a6b8:	0800d464 	.word	0x0800d464

0800a6bc <_init>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <_fini>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	bf00      	nop
 800a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ce:	bc08      	pop	{r3}
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	4770      	bx	lr
