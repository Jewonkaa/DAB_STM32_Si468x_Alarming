
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf8  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c81c  0800c81c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c824  0800c824  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c828  0800c828  0001c828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000027c8  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002884  20002884  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000175b9  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003415  00000000  00000000  000376a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236e8  00000000  00000000  0003d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a067  00000000  00000000  000608a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1822  00000000  00000000  0007a90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c131  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053d0  00000000  00000000  0014c184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b0c 	.word	0x08009b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08009b0c 	.word	0x08009b0c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f007 f99e 	bl	8007a3a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20002668 	.word	0x20002668

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f004 fe34 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f004 f82d 	bl	800477c <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f004 fe2b 	bl	8005384 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f004 fe25 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f004 f81e 	bl	800477c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f004 fe19 	bl	8005384 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f004 fdbe 	bl	8005384 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f004 fdb8 	bl	8005384 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f004 fdae 	bl	8005384 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f004 fd20 	bl	8005384 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f004 fd17 	bl	8005384 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	200000d8 	.word	0x200000d8

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f004 fb5a 	bl	8005384 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f004 fb54 	bl	8005384 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f004 fb4b 	bl	8005384 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f004 fab1 	bl	8005384 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f004 fa87 	bl	8005384 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f004 fa7e 	bl	8005384 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f004 fa32 	bl	8005384 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f004 fa29 	bl	8005384 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f004 f9dd 	bl	8005384 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f004 f9d4 	bl	8005384 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	0800a868 	.word	0x0800a868
 8001068:	0800ab40 	.word	0x0800ab40

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f004 f984 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f004 f97e 	bl	8005384 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f004 f972 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f004 f96c 	bl	8005384 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:
uint8_t actual_freq_id = 0;							//frequency table index of the frequency to which the Si468x is currently tuned in kHz

uint8_t actual_station = 0;

void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4832      	ldr	r0, [pc, #200]	; (8001184 <Si468x_init+0xd0>)
 80010bc:	f002 f908 	bl	80032d0 <send_debug_msg>
	Si468x_reset();
 80010c0:	f000 f862 	bl	8001188 <Si468x_reset>
	Si468x_power_up();
 80010c4:	f000 f87c 	bl	80011c0 <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010c8:	f000 f8fe 	bl	80012c8 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010cc:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d0:	f000 f96e 	bl	80013b0 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d4:	f000 fa0c 	bl	80014f0 <Si468x_boot>
	Si468x_get_part_info();
 80010d8:	f000 fbb6 	bl	8001848 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010dc:	f000 fb2e 	bl	800173c <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e0:	2101      	movs	r1, #1
 80010e2:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e6:	f000 fc1f 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ea:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010ee:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f2:	f000 fc19 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010fa:	f241 7011 	movw	r0, #5905	; 0x1711
 80010fe:	f000 fc13 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 8001102:	2107      	movs	r1, #7
 8001104:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001108:	f000 fc0e 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 800110c:	2130      	movs	r1, #48	; 0x30
 800110e:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001112:	f000 fc09 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 8001116:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800111a:	f24b 2002 	movw	r0, #45570	; 0xb202
 800111e:	f000 fc03 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 8001122:	f244 0105 	movw	r1, #16389	; 0x4005
 8001126:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 800112a:	f000 fbfd 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 800112e:	2101      	movs	r1, #1
 8001130:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001134:	f000 fbf8 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001138:	2101      	movs	r1, #1
 800113a:	f24b 3002 	movw	r0, #45826	; 0xb302
 800113e:	f000 fbf3 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 8001142:	2101      	movs	r1, #1
 8001144:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001148:	f000 fbee 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 800114c:	2105      	movs	r1, #5
 800114e:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001152:	f000 fbe9 	bl	8001928 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001156:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 800115a:	f24b 5003 	movw	r0, #46339	; 0xb503
 800115e:	f000 fbe3 	bl	8001928 <Si468x_set_property>
	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
 8001162:	f000 fccd 	bl	8001b00 <Si468x_dab_get_freq_list>

	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001166:	f000 fae9 	bl	800173c <Si468x_get_sys_state>

	Si468x_dab_full_scan();
 800116a:	f001 fa81 	bl	8002670 <Si468x_dab_full_scan>

	Si468x_dab_tune_freq(CH_11B);
 800116e:	201b      	movs	r0, #27
 8001170:	f000 fd9e 	bl	8001cb0 <Si468x_dab_tune_freq>
	HAL_Delay(1000);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f003 fb00 	bl	800477c <HAL_Delay>
	Si468x_dab_get_time();
 800117c:	f001 ff96 	bl	80030ac <Si468x_dab_get_time>
//			Si468x_dab_start_digital_service(services_list[i].service_id, services_list[i].components[0].subchannel_id);
//			break;
//		}
//	}

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08009c78 	.word	0x08009c78

08001188 <Si468x_reset>:

void Si468x_reset()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 800118c:	2101      	movs	r1, #1
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <Si468x_reset+0x30>)
 8001190:	f002 f89e 	bl	80032d0 <send_debug_msg>
	RESET_PIN_LOW;
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <Si468x_reset+0x34>)
 800119a:	f004 f8f3 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800119e:	2064      	movs	r0, #100	; 0x64
 80011a0:	f003 faec 	bl	800477c <HAL_Delay>
	RESET_PIN_HIGH;
 80011a4:	2201      	movs	r2, #1
 80011a6:	2120      	movs	r1, #32
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <Si468x_reset+0x34>)
 80011aa:	f004 f8eb 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011ae:	20c8      	movs	r0, #200	; 0xc8
 80011b0:	f003 fae4 	bl	800477c <HAL_Delay>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	08009cc8 	.word	0x08009cc8
 80011bc:	40020800 	.word	0x40020800

080011c0 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 80011c4:	2101      	movs	r1, #1
 80011c6:	4826      	ldr	r0, [pc, #152]	; (8001260 <Si468x_power_up+0xa0>)
 80011c8:	f002 f882 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <Si468x_power_up+0xa4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <Si468x_power_up+0xa4>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <Si468x_power_up+0xa4>)
 80011da:	2217      	movs	r2, #23
 80011dc:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <Si468x_power_up+0xa4>)
 80011e0:	2250      	movs	r2, #80	; 0x50
 80011e2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <Si468x_power_up+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <Si468x_power_up+0xa4>)
 80011ec:	22f8      	movs	r2, #248	; 0xf8
 80011ee:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <Si468x_power_up+0xa4>)
 80011f2:	2224      	movs	r2, #36	; 0x24
 80011f4:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <Si468x_power_up+0xa4>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <Si468x_power_up+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <Si468x_power_up+0xa4>)
 8001204:	2210      	movs	r2, #16
 8001206:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <Si468x_power_up+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <Si468x_power_up+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <Si468x_power_up+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <Si468x_power_up+0xa4>)
 800121c:	2228      	movs	r2, #40	; 0x28
 800121e:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <Si468x_power_up+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <Si468x_power_up+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 800122c:	490d      	ldr	r1, [pc, #52]	; (8001264 <Si468x_power_up+0xa4>)
 800122e:	2010      	movs	r0, #16
 8001230:	f000 fa52 	bl	80016d8 <Si468x_write_command>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <Si468x_power_up+0xa8>)
 800123a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f003 fa9d 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001242:	490a      	ldr	r1, [pc, #40]	; (800126c <Si468x_power_up+0xac>)
 8001244:	2005      	movs	r0, #5
 8001246:	f000 fa69 	bl	800171c <Si468x_read_reply>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <Si468x_power_up+0xa8>)
 8001250:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 8001252:	2101      	movs	r1, #1
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <Si468x_power_up+0xb0>)
 8001256:	f002 f83b 	bl	80032d0 <send_debug_msg>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08009cdc 	.word	0x08009cdc
 8001264:	200000dc 	.word	0x200000dc
 8001268:	2000191c 	.word	0x2000191c
 800126c:	200010dc 	.word	0x200010dc
 8001270:	08009d18 	.word	0x08009d18

08001274 <Si468x_load_init>:

void Si468x_load_init()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001278:	2101      	movs	r1, #1
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <Si468x_load_init+0x44>)
 800127c:	f002 f828 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <Si468x_load_init+0x48>)
 8001282:	2206      	movs	r2, #6
 8001284:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <Si468x_load_init+0x48>)
 8001288:	2200      	movs	r2, #0
 800128a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800128c:	490b      	ldr	r1, [pc, #44]	; (80012bc <Si468x_load_init+0x48>)
 800128e:	2002      	movs	r0, #2
 8001290:	f000 fa22 	bl	80016d8 <Si468x_write_command>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <Si468x_load_init+0x4c>)
 800129a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f003 fa6d 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <Si468x_load_init+0x50>)
 80012a4:	2005      	movs	r0, #5
 80012a6:	f000 fa39 	bl	800171c <Si468x_read_reply>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <Si468x_load_init+0x4c>)
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08009d38 	.word	0x08009d38
 80012bc:	200000dc 	.word	0x200000dc
 80012c0:	2000191c 	.word	0x2000191c
 80012c4:	200010dc 	.word	0x200010dc

080012c8 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 80012ce:	2101      	movs	r1, #1
 80012d0:	4830      	ldr	r0, [pc, #192]	; (8001394 <Si468x_bootloader_load_host+0xcc>)
 80012d2:	f001 fffd 	bl	80032d0 <send_debug_msg>
	Si468x_load_init();
 80012d6:	f7ff ffcd 	bl	8001274 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 80012da:	f241 63a4 	movw	r3, #5796	; 0x16a4
 80012de:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <Si468x_bootloader_load_host+0xd0>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <Si468x_bootloader_load_host+0xd0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <Si468x_bootloader_load_host+0xd0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <Si468x_bootloader_load_host+0xd0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	e03e      	b.n	800137c <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012fe:	2300      	movs	r3, #0
 8001300:	80bb      	strh	r3, [r7, #4]
 8001302:	e014      	b.n	800132e <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001304:	88ba      	ldrh	r2, [r7, #4]
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	4924      	ldr	r1, [pc, #144]	; (800139c <Si468x_bootloader_load_host+0xd4>)
 800130a:	fba1 1303 	umull	r1, r3, r1, r3
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	441a      	add	r2, r3
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	3304      	adds	r3, #4
 8001320:	491f      	ldr	r1, [pc, #124]	; (80013a0 <Si468x_bootloader_load_host+0xd8>)
 8001322:	5c89      	ldrb	r1, [r1, r2]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <Si468x_bootloader_load_host+0xd0>)
 8001326:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <Si468x_bootloader_load_host+0xd4>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	88ba      	ldrh	r2, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e1      	bcc.n	8001304 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <Si468x_bootloader_load_host+0xd4>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	085b      	lsrs	r3, r3, #1
 800134a:	b29b      	uxth	r3, r3
 800134c:	3304      	adds	r3, #4
 800134e:	b29b      	uxth	r3, r3
 8001350:	4911      	ldr	r1, [pc, #68]	; (8001398 <Si468x_bootloader_load_host+0xd0>)
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f9c0 	bl	80016d8 <Si468x_write_command>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <Si468x_bootloader_load_host+0xdc>)
 800135e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f003 fa0b 	bl	800477c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001366:	4910      	ldr	r1, [pc, #64]	; (80013a8 <Si468x_bootloader_load_host+0xe0>)
 8001368:	2005      	movs	r0, #5
 800136a:	f000 f9d7 	bl	800171c <Si468x_read_reply>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <Si468x_bootloader_load_host+0xdc>)
 8001374:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	3301      	adds	r3, #1
 800137a:	80fb      	strh	r3, [r7, #6]
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d9bd      	bls.n	80012fe <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 8001382:	2101      	movs	r1, #1
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <Si468x_bootloader_load_host+0xe4>)
 8001386:	f001 ffa3 	bl	80032d0 <send_debug_msg>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	08009d50 	.word	0x08009d50
 8001398:	200000dc 	.word	0x200000dc
 800139c:	aaaaaaab 	.word	0xaaaaaaab
 80013a0:	0800b130 	.word	0x0800b130
 80013a4:	2000191c 	.word	0x2000191c
 80013a8:	200010dc 	.word	0x200010dc
 80013ac:	08009d8c 	.word	0x08009d8c

080013b0 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 80013b8:	2101      	movs	r1, #1
 80013ba:	4845      	ldr	r0, [pc, #276]	; (80014d0 <Si468x_firmware_load_flash+0x120>)
 80013bc:	f001 ff88 	bl	80032d0 <send_debug_msg>
	Si468x_load_init();
 80013c0:	f7ff ff58 	bl	8001274 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013c6:	2205      	movs	r2, #5
 80013c8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 80013d0:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013d8:	2200      	movs	r2, #0
 80013da:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013e2:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013ec:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 80013f6:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0e1b      	lsrs	r3, r3, #24
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 8001400:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 8001402:	2100      	movs	r1, #0
 8001404:	4834      	ldr	r0, [pc, #208]	; (80014d8 <Si468x_firmware_load_flash+0x128>)
 8001406:	f001 ff63 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 800140a:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	2210      	movs	r2, #16
 8001410:	4932      	ldr	r1, [pc, #200]	; (80014dc <Si468x_firmware_load_flash+0x12c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f008 fb2e 	bl	8009a74 <itoa>
 8001418:	4603      	mov	r3, r0
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f001 ff57 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 8001422:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 8001424:	795b      	ldrb	r3, [r3, #5]
 8001426:	2210      	movs	r2, #16
 8001428:	492c      	ldr	r1, [pc, #176]	; (80014dc <Si468x_firmware_load_flash+0x12c>)
 800142a:	4618      	mov	r0, r3
 800142c:	f008 fb22 	bl	8009a74 <itoa>
 8001430:	4603      	mov	r3, r0
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f001 ff4b 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 800143c:	799b      	ldrb	r3, [r3, #6]
 800143e:	2210      	movs	r2, #16
 8001440:	4926      	ldr	r1, [pc, #152]	; (80014dc <Si468x_firmware_load_flash+0x12c>)
 8001442:	4618      	mov	r0, r3
 8001444:	f008 fb16 	bl	8009a74 <itoa>
 8001448:	4603      	mov	r3, r0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f001 ff3f 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 8001454:	79db      	ldrb	r3, [r3, #7]
 8001456:	2210      	movs	r2, #16
 8001458:	4920      	ldr	r1, [pc, #128]	; (80014dc <Si468x_firmware_load_flash+0x12c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f008 fb0a 	bl	8009a74 <itoa>
 8001460:	4603      	mov	r3, r0
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f001 ff33 	bl	80032d0 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 800146c:	2200      	movs	r2, #0
 800146e:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 8001472:	2200      	movs	r2, #0
 8001474:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 8001478:	2200      	movs	r2, #0
 800147a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 800147e:	2200      	movs	r2, #0
 8001480:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001482:	4914      	ldr	r1, [pc, #80]	; (80014d4 <Si468x_firmware_load_flash+0x124>)
 8001484:	200c      	movs	r0, #12
 8001486:	f000 f927 	bl	80016d8 <Si468x_write_command>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <Si468x_firmware_load_flash+0x130>)
 8001490:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f003 f972 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001498:	4912      	ldr	r1, [pc, #72]	; (80014e4 <Si468x_firmware_load_flash+0x134>)
 800149a:	2005      	movs	r0, #5
 800149c:	f000 f93e 	bl	800171c <Si468x_read_reply>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <Si468x_firmware_load_flash+0x130>)
 80014a6:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <Si468x_firmware_load_flash+0x134>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80014b4:	2101      	movs	r1, #1
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <Si468x_firmware_load_flash+0x138>)
 80014b8:	f001 ff0a 	bl	80032d0 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 80014bc:	e003      	b.n	80014c6 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 80014be:	2101      	movs	r1, #1
 80014c0:	480a      	ldr	r0, [pc, #40]	; (80014ec <Si468x_firmware_load_flash+0x13c>)
 80014c2:	f001 ff05 	bl	80032d0 <send_debug_msg>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08009dac 	.word	0x08009dac
 80014d4:	200000dc 	.word	0x200000dc
 80014d8:	08009de8 	.word	0x08009de8
 80014dc:	200018dc 	.word	0x200018dc
 80014e0:	2000191c 	.word	0x2000191c
 80014e4:	200010dc 	.word	0x200010dc
 80014e8:	08009dfc 	.word	0x08009dfc
 80014ec:	08009e0c 	.word	0x08009e0c

080014f0 <Si468x_boot>:

void Si468x_boot()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014f4:	2101      	movs	r1, #1
 80014f6:	4816      	ldr	r0, [pc, #88]	; (8001550 <Si468x_boot+0x60>)
 80014f8:	f001 feea 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <Si468x_boot+0x64>)
 80014fe:	2207      	movs	r2, #7
 8001500:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <Si468x_boot+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001508:	4912      	ldr	r1, [pc, #72]	; (8001554 <Si468x_boot+0x64>)
 800150a:	2002      	movs	r0, #2
 800150c:	f000 f8e4 	bl	80016d8 <Si468x_write_command>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Si468x_boot+0x68>)
 8001516:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001518:	2001      	movs	r0, #1
 800151a:	f003 f92f 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800151e:	490f      	ldr	r1, [pc, #60]	; (800155c <Si468x_boot+0x6c>)
 8001520:	2005      	movs	r0, #5
 8001522:	f000 f8fb 	bl	800171c <Si468x_read_reply>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <Si468x_boot+0x68>)
 800152c:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <Si468x_boot+0x6c>)
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001536:	2bc0      	cmp	r3, #192	; 0xc0
 8001538:	d104      	bne.n	8001544 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 800153a:	2101      	movs	r1, #1
 800153c:	4808      	ldr	r0, [pc, #32]	; (8001560 <Si468x_boot+0x70>)
 800153e:	f001 fec7 	bl	80032d0 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 8001542:	e003      	b.n	800154c <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001544:	2101      	movs	r1, #1
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <Si468x_boot+0x74>)
 8001548:	f001 fec2 	bl	80032d0 <send_debug_msg>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	08009e28 	.word	0x08009e28
 8001554:	200000dc 	.word	0x200000dc
 8001558:	2000191c 	.word	0x2000191c
 800155c:	200010dc 	.word	0x200010dc
 8001560:	08009e64 	.word	0x08009e64
 8001564:	08009e80 	.word	0x08009e80

08001568 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 8001572:	1df9      	adds	r1, r7, #7
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	2201      	movs	r2, #1
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <Si468x_write_single_byte+0x20>)
 800157a:	f006 fa5e 	bl	8007a3a <HAL_SPI_Transmit>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20002610 	.word	0x20002610

0800158c <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001596:	1df9      	adds	r1, r7, #7
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	2201      	movs	r2, #1
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <Si468x_read_single_byte+0x20>)
 800159e:	f006 fb88 	bl	8007cb2 <HAL_SPI_Receive>
	return data_buffer;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20002610 	.word	0x20002610

080015b0 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	81fb      	strh	r3, [r7, #14]
 80015c2:	e01c      	b.n	80015fe <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 80015c4:	f107 030d 	add.w	r3, r7, #13
 80015c8:	4619      	mov	r1, r3
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 f850 	bl	8001670 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da0c      	bge.n	80015f2 <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015e2:	2101      	movs	r1, #1
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <Si468x_wait_for_CTS+0x68>)
 80015e6:	f001 fe73 	bl	80032d0 <send_debug_msg>
				return COMMAND_ERROR;
 80015ea:	2320      	movs	r3, #32
 80015ec:	e010      	b.n	8001610 <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e00e      	b.n	8001610 <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f003 f8c2 	bl	800477c <HAL_Delay>
	for(i = 0; i < timeout; i++)
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	3301      	adds	r3, #1
 80015fc:	81fb      	strh	r3, [r7, #14]
 80015fe:	89fa      	ldrh	r2, [r7, #14]
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3de      	bcc.n	80015c4 <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001606:	2101      	movs	r1, #1
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <Si468x_wait_for_CTS+0x6c>)
 800160a:	f001 fe61 	bl	80032d0 <send_debug_msg>
	return TIMEOUT;
 800160e:	2308      	movs	r3, #8
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08009e94 	.word	0x08009e94
 800161c:	08009ebc 	.word	0x08009ebc

08001620 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <Si468x_write_multiple+0x4c>)
 8001636:	f003 fea5 	bl	8005384 <HAL_GPIO_WritePin>
	while(len--)
 800163a:	e009      	b.n	8001650 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	81fa      	strh	r2, [r7, #14]
 8001642:	461a      	mov	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff8c 	bl	8001568 <Si468x_write_single_byte>
	while(len--)
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	80fa      	strh	r2, [r7, #6]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 800165a:	2201      	movs	r2, #1
 800165c:	2110      	movs	r1, #16
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <Si468x_write_multiple+0x4c>)
 8001660:	f003 fe90 	bl	8005384 <HAL_GPIO_WritePin>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020800 	.word	0x40020800

08001670 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001680:	2201      	movs	r2, #1
 8001682:	2110      	movs	r1, #16
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <Si468x_read_multiple+0x64>)
 8001686:	f003 fe7d 	bl	8005384 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800168a:	2003      	movs	r0, #3
 800168c:	f003 f876 	bl	800477c <HAL_Delay>
	CS_PIN_LOW;
 8001690:	2200      	movs	r2, #0
 8001692:	2110      	movs	r1, #16
 8001694:	480f      	ldr	r0, [pc, #60]	; (80016d4 <Si468x_read_multiple+0x64>)
 8001696:	f003 fe75 	bl	8005384 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff ff64 	bl	8001568 <Si468x_write_single_byte>
	while(len--)
 80016a0:	e009      	b.n	80016b6 <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	81fa      	strh	r2, [r7, #14]
 80016a8:	461a      	mov	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	189c      	adds	r4, r3, r2
 80016ae:	f7ff ff6d 	bl	800158c <Si468x_read_single_byte>
 80016b2:	4603      	mov	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]
	while(len--)
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	80fa      	strh	r2, [r7, #6]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 80016c0:	2201      	movs	r2, #1
 80016c2:	2110      	movs	r1, #16
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <Si468x_read_multiple+0x64>)
 80016c6:	f003 fe5d 	bl	8005384 <HAL_GPIO_WritePin>
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40020800 	.word	0x40020800

080016d8 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e8:	f7ff ff62 	bl	80015b0 <Si468x_wait_for_CTS>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <Si468x_write_command+0x24>
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d10a      	bne.n	8001712 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff8d 	bl	8001620 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170a:	f7ff ff51 	bl	80015b0 <Si468x_wait_for_CTS>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff9f 	bl	8001670 <Si468x_read_multiple>
	return SUCCESS;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001740:	2101      	movs	r1, #1
 8001742:	4833      	ldr	r0, [pc, #204]	; (8001810 <Si468x_get_sys_state+0xd4>)
 8001744:	f001 fdc4 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <Si468x_get_sys_state+0xd8>)
 800174a:	2209      	movs	r2, #9
 800174c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <Si468x_get_sys_state+0xd8>)
 8001750:	2200      	movs	r2, #0
 8001752:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001754:	492f      	ldr	r1, [pc, #188]	; (8001814 <Si468x_get_sys_state+0xd8>)
 8001756:	2002      	movs	r0, #2
 8001758:	f7ff ffbe 	bl	80016d8 <Si468x_write_command>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <Si468x_get_sys_state+0xdc>)
 8001762:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f003 f809 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800176a:	492c      	ldr	r1, [pc, #176]	; (800181c <Si468x_get_sys_state+0xe0>)
 800176c:	2005      	movs	r0, #5
 800176e:	f7ff ffd5 	bl	800171c <Si468x_read_reply>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <Si468x_get_sys_state+0xdc>)
 8001778:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800177a:	2100      	movs	r1, #0
 800177c:	4828      	ldr	r0, [pc, #160]	; (8001820 <Si468x_get_sys_state+0xe4>)
 800177e:	f001 fda7 	bl	80032d0 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <Si468x_get_sys_state+0xe0>)
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d83a      	bhi.n	8001800 <Si468x_get_sys_state+0xc4>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <Si468x_get_sys_state+0x54>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017b1 	.word	0x080017b1
 8001794:	080017bb 	.word	0x080017bb
 8001798:	080017c5 	.word	0x080017c5
 800179c:	080017cf 	.word	0x080017cf
 80017a0:	080017d9 	.word	0x080017d9
 80017a4:	080017e3 	.word	0x080017e3
 80017a8:	080017ed 	.word	0x080017ed
 80017ac:	080017f7 	.word	0x080017f7
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 80017b0:	2101      	movs	r1, #1
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <Si468x_get_sys_state+0xe8>)
 80017b4:	f001 fd8c 	bl	80032d0 <send_debug_msg>
			break;
 80017b8:	e027      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 80017ba:	2101      	movs	r1, #1
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <Si468x_get_sys_state+0xec>)
 80017be:	f001 fd87 	bl	80032d0 <send_debug_msg>
			break;
 80017c2:	e022      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 80017c4:	2101      	movs	r1, #1
 80017c6:	4819      	ldr	r0, [pc, #100]	; (800182c <Si468x_get_sys_state+0xf0>)
 80017c8:	f001 fd82 	bl	80032d0 <send_debug_msg>
			break;
 80017cc:	e01d      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017ce:	2101      	movs	r1, #1
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <Si468x_get_sys_state+0xf4>)
 80017d2:	f001 fd7d 	bl	80032d0 <send_debug_msg>
			break;
 80017d6:	e018      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017d8:	2101      	movs	r1, #1
 80017da:	4816      	ldr	r0, [pc, #88]	; (8001834 <Si468x_get_sys_state+0xf8>)
 80017dc:	f001 fd78 	bl	80032d0 <send_debug_msg>
			break;
 80017e0:	e013      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017e2:	2101      	movs	r1, #1
 80017e4:	4814      	ldr	r0, [pc, #80]	; (8001838 <Si468x_get_sys_state+0xfc>)
 80017e6:	f001 fd73 	bl	80032d0 <send_debug_msg>
			break;
 80017ea:	e00e      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017ec:	2101      	movs	r1, #1
 80017ee:	4813      	ldr	r0, [pc, #76]	; (800183c <Si468x_get_sys_state+0x100>)
 80017f0:	f001 fd6e 	bl	80032d0 <send_debug_msg>
			break;
 80017f4:	e009      	b.n	800180a <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017f6:	2101      	movs	r1, #1
 80017f8:	4811      	ldr	r0, [pc, #68]	; (8001840 <Si468x_get_sys_state+0x104>)
 80017fa:	f001 fd69 	bl	80032d0 <send_debug_msg>
			break;
 80017fe:	e004      	b.n	800180a <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 8001800:	2101      	movs	r1, #1
 8001802:	4810      	ldr	r0, [pc, #64]	; (8001844 <Si468x_get_sys_state+0x108>)
 8001804:	f001 fd64 	bl	80032d0 <send_debug_msg>
			break;
 8001808:	bf00      	nop
	}
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	08009ecc 	.word	0x08009ecc
 8001814:	200000dc 	.word	0x200000dc
 8001818:	2000191c 	.word	0x2000191c
 800181c:	200010dc 	.word	0x200010dc
 8001820:	08009f08 	.word	0x08009f08
 8001824:	08009f14 	.word	0x08009f14
 8001828:	08009f2c 	.word	0x08009f2c
 800182c:	08009f44 	.word	0x08009f44
 8001830:	08009f5c 	.word	0x08009f5c
 8001834:	08009f84 	.word	0x08009f84
 8001838:	08009fa0 	.word	0x08009fa0
 800183c:	08009fb8 	.word	0x08009fb8
 8001840:	08009fd4 	.word	0x08009fd4
 8001844:	08009fec 	.word	0x08009fec

08001848 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800184e:	2101      	movs	r1, #1
 8001850:	482d      	ldr	r0, [pc, #180]	; (8001908 <Si468x_get_part_info+0xc0>)
 8001852:	f001 fd3d 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <Si468x_get_part_info+0xc4>)
 8001858:	2208      	movs	r2, #8
 800185a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <Si468x_get_part_info+0xc4>)
 800185e:	2200      	movs	r2, #0
 8001860:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001862:	492a      	ldr	r1, [pc, #168]	; (800190c <Si468x_get_part_info+0xc4>)
 8001864:	2002      	movs	r0, #2
 8001866:	f7ff ff37 	bl	80016d8 <Si468x_write_command>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <Si468x_get_part_info+0xc8>)
 8001870:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001872:	2001      	movs	r0, #1
 8001874:	f002 ff82 	bl	800477c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fe75 	bl	8001568 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800187e:	4925      	ldr	r1, [pc, #148]	; (8001914 <Si468x_get_part_info+0xcc>)
 8001880:	200a      	movs	r0, #10
 8001882:	f7ff ff4b 	bl	800171c <Si468x_read_reply>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <Si468x_get_part_info+0xc8>)
 800188c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800188e:	2100      	movs	r1, #0
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <Si468x_get_part_info+0xd0>)
 8001892:	f001 fd1d 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <Si468x_get_part_info+0xcc>)
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	220a      	movs	r2, #10
 800189c:	491f      	ldr	r1, [pc, #124]	; (800191c <Si468x_get_part_info+0xd4>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f008 f8e8 	bl	8009a74 <itoa>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fd11 	bl	80032d0 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 80018ae:	2100      	movs	r1, #0
 80018b0:	481b      	ldr	r0, [pc, #108]	; (8001920 <Si468x_get_part_info+0xd8>)
 80018b2:	f001 fd0d 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <Si468x_get_part_info+0xcc>)
 80018b8:	795b      	ldrb	r3, [r3, #5]
 80018ba:	220a      	movs	r2, #10
 80018bc:	4917      	ldr	r1, [pc, #92]	; (800191c <Si468x_get_part_info+0xd4>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f008 f8d8 	bl	8009a74 <itoa>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fd01 	bl	80032d0 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018ce:	2100      	movs	r1, #0
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <Si468x_get_part_info+0xdc>)
 80018d2:	f001 fcfd 	bl	80032d0 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <Si468x_get_part_info+0xcc>)
 80018d8:	7a5b      	ldrb	r3, [r3, #9]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <Si468x_get_part_info+0xcc>)
 80018e2:	7a1b      	ldrb	r3, [r3, #8]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	220a      	movs	r2, #10
 80018ee:	490b      	ldr	r1, [pc, #44]	; (800191c <Si468x_get_part_info+0xd4>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f008 f8bf 	bl	8009a74 <itoa>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fce8 	bl	80032d0 <send_debug_msg>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	0800a000 	.word	0x0800a000
 800190c:	200000dc 	.word	0x200000dc
 8001910:	2000191c 	.word	0x2000191c
 8001914:	200010dc 	.word	0x200010dc
 8001918:	0800a03c 	.word	0x0800a03c
 800191c:	200018dc 	.word	0x200018dc
 8001920:	0800a04c 	.word	0x0800a04c
 8001924:	0800a058 	.word	0x0800a058

08001928 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	80fb      	strh	r3, [r7, #6]
 8001934:	4613      	mov	r3, r2
 8001936:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001938:	2101      	movs	r1, #1
 800193a:	4832      	ldr	r0, [pc, #200]	; (8001a04 <Si468x_set_property+0xdc>)
 800193c:	f001 fcc8 	bl	80032d0 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001940:	2100      	movs	r1, #0
 8001942:	4831      	ldr	r0, [pc, #196]	; (8001a08 <Si468x_set_property+0xe0>)
 8001944:	f001 fcc4 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	2210      	movs	r2, #16
 800194c:	492f      	ldr	r1, [pc, #188]	; (8001a0c <Si468x_set_property+0xe4>)
 800194e:	4618      	mov	r0, r3
 8001950:	f008 f890 	bl	8009a74 <itoa>
 8001954:	4603      	mov	r3, r0
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fcb9 	bl	80032d0 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800195e:	2100      	movs	r1, #0
 8001960:	482b      	ldr	r0, [pc, #172]	; (8001a10 <Si468x_set_property+0xe8>)
 8001962:	f001 fcb5 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	2210      	movs	r2, #16
 800196a:	4928      	ldr	r1, [pc, #160]	; (8001a0c <Si468x_set_property+0xe4>)
 800196c:	4618      	mov	r0, r3
 800196e:	f008 f881 	bl	8009a74 <itoa>
 8001972:	4603      	mov	r3, r0
 8001974:	2101      	movs	r1, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fcaa 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <Si468x_set_property+0xec>)
 800197e:	2213      	movs	r2, #19
 8001980:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <Si468x_set_property+0xec>)
 8001984:	2200      	movs	r2, #0
 8001986:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <Si468x_set_property+0xec>)
 800198e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <Si468x_set_property+0xec>)
 800199a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <Si468x_set_property+0xec>)
 80019a2:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <Si468x_set_property+0xec>)
 80019ae:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 80019b0:	4918      	ldr	r1, [pc, #96]	; (8001a14 <Si468x_set_property+0xec>)
 80019b2:	2006      	movs	r0, #6
 80019b4:	f7ff fe90 	bl	80016d8 <Si468x_write_command>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <Si468x_set_property+0xf0>)
 80019be:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f002 fedb 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80019c6:	4915      	ldr	r1, [pc, #84]	; (8001a1c <Si468x_set_property+0xf4>)
 80019c8:	2005      	movs	r0, #5
 80019ca:	f7ff fea7 	bl	800171c <Si468x_read_reply>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <Si468x_set_property+0xf0>)
 80019d4:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f825 	bl	8001a28 <Si468x_get_property>
 80019de:	4603      	mov	r3, r0
 80019e0:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019e2:	89fa      	ldrh	r2, [r7, #14]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d104      	bne.n	80019f4 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019ea:	2101      	movs	r1, #1
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <Si468x_set_property+0xf8>)
 80019ee:	f001 fc6f 	bl	80032d0 <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 80019f2:	e003      	b.n	80019fc <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019f4:	2101      	movs	r1, #1
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <Si468x_set_property+0xfc>)
 80019f8:	f001 fc6a 	bl	80032d0 <send_debug_msg>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800a068 	.word	0x0800a068
 8001a08:	0800a0a8 	.word	0x0800a0a8
 8001a0c:	200018dc 	.word	0x200018dc
 8001a10:	0800a0b8 	.word	0x0800a0b8
 8001a14:	200000dc 	.word	0x200000dc
 8001a18:	2000191c 	.word	0x2000191c
 8001a1c:	200010dc 	.word	0x200010dc
 8001a20:	0800a0d4 	.word	0x0800a0d4
 8001a24:	0800a0f0 	.word	0x0800a0f0

08001a28 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a32:	2101      	movs	r1, #1
 8001a34:	482b      	ldr	r0, [pc, #172]	; (8001ae4 <Si468x_get_property+0xbc>)
 8001a36:	f001 fc4b 	bl	80032d0 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <Si468x_get_property+0xc0>)
 8001a3e:	f001 fc47 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2210      	movs	r2, #16
 8001a46:	4929      	ldr	r1, [pc, #164]	; (8001aec <Si468x_get_property+0xc4>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f008 f813 	bl	8009a74 <itoa>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fc3c 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <Si468x_get_property+0xc8>)
 8001a5a:	2214      	movs	r2, #20
 8001a5c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <Si468x_get_property+0xc8>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <Si468x_get_property+0xc8>)
 8001a6a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <Si468x_get_property+0xc8>)
 8001a76:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a78:	491d      	ldr	r1, [pc, #116]	; (8001af0 <Si468x_get_property+0xc8>)
 8001a7a:	2004      	movs	r0, #4
 8001a7c:	f7ff fe2c 	bl	80016d8 <Si468x_write_command>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <Si468x_get_property+0xcc>)
 8001a86:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f002 fe77 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a8e:	491a      	ldr	r1, [pc, #104]	; (8001af8 <Si468x_get_property+0xd0>)
 8001a90:	2006      	movs	r0, #6
 8001a92:	f7ff fe43 	bl	800171c <Si468x_read_reply>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <Si468x_get_property+0xcc>)
 8001a9c:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4816      	ldr	r0, [pc, #88]	; (8001afc <Si468x_get_property+0xd4>)
 8001aa2:	f001 fc15 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <Si468x_get_property+0xd0>)
 8001aa8:	795b      	ldrb	r3, [r3, #5]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <Si468x_get_property+0xd0>)
 8001aae:	7912      	ldrb	r2, [r2, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	490d      	ldr	r1, [pc, #52]	; (8001aec <Si468x_get_property+0xc4>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 ffdc 	bl	8009a74 <itoa>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fc05 	bl	80032d0 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <Si468x_get_property+0xd0>)
 8001ac8:	795b      	ldrb	r3, [r3, #5]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <Si468x_get_property+0xd0>)
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0800a108 	.word	0x0800a108
 8001ae8:	0800a0a8 	.word	0x0800a0a8
 8001aec:	200018dc 	.word	0x200018dc
 8001af0:	200000dc 	.word	0x200000dc
 8001af4:	2000191c 	.word	0x2000191c
 8001af8:	200010dc 	.word	0x200010dc
 8001afc:	0800a144 	.word	0x0800a144

08001b00 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001b06:	2101      	movs	r1, #1
 8001b08:	485c      	ldr	r0, [pc, #368]	; (8001c7c <Si468x_dab_get_freq_list+0x17c>)
 8001b0a:	f001 fbe1 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <Si468x_dab_get_freq_list+0x180>)
 8001b10:	22b9      	movs	r2, #185	; 0xb9
 8001b12:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001b14:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <Si468x_dab_get_freq_list+0x180>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001b1a:	4959      	ldr	r1, [pc, #356]	; (8001c80 <Si468x_dab_get_freq_list+0x180>)
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7ff fddb 	bl	80016d8 <Si468x_write_command>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <Si468x_dab_get_freq_list+0x184>)
 8001b28:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f002 fe26 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b30:	4955      	ldr	r1, [pc, #340]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001b32:	2005      	movs	r0, #5
 8001b34:	f7ff fdf2 	bl	800171c <Si468x_read_reply>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <Si468x_dab_get_freq_list+0x184>)
 8001b3e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	484f      	ldr	r0, [pc, #316]	; (8001c8c <Si468x_dab_get_freq_list+0x18c>)
 8001b50:	f001 fbbe 	bl	80032d0 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b54:	e08e      	b.n	8001c74 <Si468x_dab_get_freq_list+0x174>
		if(dab_spi_rx_buffer[4])
 8001b56:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8086 	beq.w	8001c6c <Si468x_dab_get_freq_list+0x16c>
			uint8_t read_offset = 2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	70fb      	strb	r3, [r7, #3]
			freq_cnt = dab_spi_rx_buffer[4];
 8001b64:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001b66:	791a      	ldrb	r2, [r3, #4]
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <Si468x_dab_get_freq_list+0x190>)
 8001b6a:	701a      	strb	r2, [r3, #0]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4849      	ldr	r0, [pc, #292]	; (8001c94 <Si468x_dab_get_freq_list+0x194>)
 8001b70:	f001 fbae 	bl	80032d0 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b74:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <Si468x_dab_get_freq_list+0x190>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	220a      	movs	r2, #10
 8001b7a:	4947      	ldr	r1, [pc, #284]	; (8001c98 <Si468x_dab_get_freq_list+0x198>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f007 ff79 	bl	8009a74 <itoa>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fba2 	bl	80032d0 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4843      	ldr	r0, [pc, #268]	; (8001c9c <Si468x_dab_get_freq_list+0x19c>)
 8001b90:	f001 fb9e 	bl	80032d0 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b94:	493c      	ldr	r1, [pc, #240]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001b96:	2003      	movs	r0, #3
 8001b98:	f7ff fdc0 	bl	800171c <Si468x_read_reply>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <Si468x_dab_get_freq_list+0x184>)
 8001ba2:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001ba4:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <Si468x_dab_get_freq_list+0x190>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	4413      	add	r3, r2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4934      	ldr	r1, [pc, #208]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fdb0 	bl	800171c <Si468x_read_reply>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <Si468x_dab_get_freq_list+0x184>)
 8001bc2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	e049      	b.n	8001c5e <Si468x_dab_get_freq_list+0x15e>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	18ca      	adds	r2, r1, r3
 8001bea:	78f9      	ldrb	r1, [r7, #3]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	440b      	add	r3, r1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	4924      	ldr	r1, [pc, #144]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	441a      	add	r2, r3
 8001bfc:	78f9      	ldrb	r1, [r7, #3]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	440b      	add	r3, r1
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	3303      	adds	r3, #3
 8001c06:	4920      	ldr	r1, [pc, #128]	; (8001c88 <Si468x_dab_get_freq_list+0x188>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <Si468x_dab_get_freq_list+0x1a0>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001c18:	220a      	movs	r2, #10
 8001c1a:	491f      	ldr	r1, [pc, #124]	; (8001c98 <Si468x_dab_get_freq_list+0x198>)
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f007 ff29 	bl	8009a74 <itoa>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fb52 	bl	80032d0 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	481d      	ldr	r0, [pc, #116]	; (8001ca4 <Si468x_dab_get_freq_list+0x1a4>)
 8001c30:	f001 fb4e 	bl	80032d0 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c34:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <Si468x_dab_get_freq_list+0x1a0>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	4916      	ldr	r1, [pc, #88]	; (8001c98 <Si468x_dab_get_freq_list+0x198>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f007 ff17 	bl	8009a74 <itoa>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fb40 	bl	80032d0 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c50:	2101      	movs	r1, #1
 8001c52:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <Si468x_dab_get_freq_list+0x1a8>)
 8001c54:	f001 fb3c 	bl	80032d0 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <Si468x_dab_get_freq_list+0x190>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4293      	cmp	r3, r2
 8001c68:	dbaf      	blt.n	8001bca <Si468x_dab_get_freq_list+0xca>
}
 8001c6a:	e003      	b.n	8001c74 <Si468x_dab_get_freq_list+0x174>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	480f      	ldr	r0, [pc, #60]	; (8001cac <Si468x_dab_get_freq_list+0x1ac>)
 8001c70:	f001 fb2e 	bl	80032d0 <send_debug_msg>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800a158 	.word	0x0800a158
 8001c80:	200000dc 	.word	0x200000dc
 8001c84:	2000191c 	.word	0x2000191c
 8001c88:	200010dc 	.word	0x200010dc
 8001c8c:	08009dfc 	.word	0x08009dfc
 8001c90:	200019e0 	.word	0x200019e0
 8001c94:	0800a194 	.word	0x0800a194
 8001c98:	200018dc 	.word	0x200018dc
 8001c9c:	0800a19c 	.word	0x0800a19c
 8001ca0:	20001920 	.word	0x20001920
 8001ca4:	0800a1b4 	.word	0x0800a1b4
 8001ca8:	0800a1b8 	.word	0x0800a1b8
 8001cac:	0800a1c0 	.word	0x0800a1c0

08001cb0 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4845      	ldr	r0, [pc, #276]	; (8001dd4 <Si468x_dab_tune_freq+0x124>)
 8001cbe:	f001 fb07 	bl	80032d0 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4844      	ldr	r0, [pc, #272]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001cc6:	f001 fb03 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a43      	ldr	r2, [pc, #268]	; (8001ddc <Si468x_dab_tune_freq+0x12c>)
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	220a      	movs	r2, #10
 8001cd4:	4942      	ldr	r1, [pc, #264]	; (8001de0 <Si468x_dab_tune_freq+0x130>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f007 fecc 	bl	8009a74 <itoa>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 faf5 	bl	80032d0 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	483e      	ldr	r0, [pc, #248]	; (8001de4 <Si468x_dab_tune_freq+0x134>)
 8001cea:	f001 faf1 	bl	80032d0 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001cf0:	22b0      	movs	r2, #176	; 0xb0
 8001cf2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cfa:	4a3b      	ldr	r2, [pc, #236]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001d12:	4935      	ldr	r1, [pc, #212]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001d14:	2006      	movs	r0, #6
 8001d16:	f7ff fcdf 	bl	80016d8 <Si468x_write_command>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <Si468x_dab_tune_freq+0x13c>)
 8001d20:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d22:	4933      	ldr	r1, [pc, #204]	; (8001df0 <Si468x_dab_tune_freq+0x140>)
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff fcf9 	bl	800171c <Si468x_read_reply>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <Si468x_dab_tune_freq+0x13c>)
 8001d30:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <Si468x_dab_tune_freq+0x140>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <Si468x_dab_tune_freq+0x96>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	482c      	ldr	r0, [pc, #176]	; (8001df4 <Si468x_dab_tune_freq+0x144>)
 8001d42:	f001 fac5 	bl	80032d0 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	81fb      	strh	r3, [r7, #14]
 8001d4a:	e039      	b.n	8001dc0 <Si468x_dab_tune_freq+0x110>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d4c:	4928      	ldr	r1, [pc, #160]	; (8001df0 <Si468x_dab_tune_freq+0x140>)
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff fce4 	bl	800171c <Si468x_read_reply>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <Si468x_dab_tune_freq+0x13c>)
 8001d5a:	701a      	strb	r2, [r3, #0]

		if(dab_spi_rx_buffer[0] & 0x01)
 8001d5c:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <Si468x_dab_tune_freq+0x140>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01c      	beq.n	8001da2 <Si468x_dab_tune_freq+0xf2>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4823      	ldr	r0, [pc, #140]	; (8001df8 <Si468x_dab_tune_freq+0x148>)
 8001d6c:	f001 fab0 	bl	80032d0 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	220a      	movs	r2, #10
 8001d74:	491a      	ldr	r1, [pc, #104]	; (8001de0 <Si468x_dab_tune_freq+0x130>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f007 fe7c 	bl	8009a74 <itoa>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f001 faa5 	bl	80032d0 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d86:	2101      	movs	r1, #1
 8001d88:	481c      	ldr	r0, [pc, #112]	; (8001dfc <Si468x_dab_tune_freq+0x14c>)
 8001d8a:	f001 faa1 	bl	80032d0 <send_debug_msg>
			actual_freq_id = channel;
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <Si468x_dab_tune_freq+0x150>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <Si468x_dab_tune_freq+0x12c>)
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <Si468x_dab_tune_freq+0x154>)
 8001d9e:	6013      	str	r3, [r2, #0]
			break;
 8001da0:	e014      	b.n	8001dcc <Si468x_dab_tune_freq+0x11c>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d103      	bne.n	8001db4 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001dac:	2101      	movs	r1, #1
 8001dae:	4816      	ldr	r0, [pc, #88]	; (8001e08 <Si468x_dab_tune_freq+0x158>)
 8001db0:	f001 fa8e 	bl	80032d0 <send_debug_msg>
		}
		HAL_Delay(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f002 fce1 	bl	800477c <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	81fb      	strh	r3, [r7, #14]
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
 8001dc2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d9c0      	bls.n	8001d4c <Si468x_dab_tune_freq+0x9c>
	}
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	0800a1dc 	.word	0x0800a1dc
 8001dd8:	0800a218 	.word	0x0800a218
 8001ddc:	20001920 	.word	0x20001920
 8001de0:	200018dc 	.word	0x200018dc
 8001de4:	0800a1b8 	.word	0x0800a1b8
 8001de8:	200000dc 	.word	0x200000dc
 8001dec:	2000191c 	.word	0x2000191c
 8001df0:	200010dc 	.word	0x200010dc
 8001df4:	08009dfc 	.word	0x08009dfc
 8001df8:	0800a224 	.word	0x0800a224
 8001dfc:	0800a240 	.word	0x0800a240
 8001e00:	20002544 	.word	0x20002544
 8001e04:	20002540 	.word	0x20002540
 8001e08:	0800a248 	.word	0x0800a248

08001e0c <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001e10:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <Si468x_dab_digrad_status+0x100>)
 8001e12:	22b2      	movs	r2, #178	; 0xb2
 8001e14:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <Si468x_dab_digrad_status+0x100>)
 8001e18:	221a      	movs	r2, #26
 8001e1a:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e1c:	493b      	ldr	r1, [pc, #236]	; (8001f0c <Si468x_dab_digrad_status+0x100>)
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f7ff fc5a 	bl	80016d8 <Si468x_write_command>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <Si468x_dab_digrad_status+0x104>)
 8001e2a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f002 fca5 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e32:	4938      	ldr	r1, [pc, #224]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e34:	2028      	movs	r0, #40	; 0x28
 8001e36:	f7ff fc71 	bl	800171c <Si468x_read_reply>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <Si468x_dab_digrad_status+0x104>)
 8001e40:	701a      	strb	r2, [r3, #0]
	sig_metrics.rssi = dab_spi_rx_buffer[6];
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e44:	799a      	ldrb	r2, [r3, #6]
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001e48:	701a      	strb	r2, [r3, #0]
	sig_metrics.snr = dab_spi_rx_buffer[7];
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e4c:	79da      	ldrb	r2, [r3, #7]
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001e50:	705a      	strb	r2, [r3, #1]
	sig_metrics.fic_bit_cnt = dab_spi_rx_buffer[32] + (dab_spi_rx_buffer[33] << 8) + (dab_spi_rx_buffer[34] << 16) + (dab_spi_rx_buffer[35] << 24);
 8001e52:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	441a      	add	r2, r3
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	441a      	add	r2, r3
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4413      	add	r3, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001e7c:	609a      	str	r2, [r3, #8]
	sig_metrics.fic_err_cnt = dab_spi_rx_buffer[36] + (dab_spi_rx_buffer[37] << 8) + (dab_spi_rx_buffer[38] << 16) + (dab_spi_rx_buffer[39] << 24);
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	441a      	add	r2, r3
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e92:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	441a      	add	r2, r3
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001e9c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4413      	add	r3, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001ea8:	60da      	str	r2, [r3, #12]
	sig_metrics.fic_q = dab_spi_rx_buffer[8];
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001eac:	7a1a      	ldrb	r2, [r3, #8]
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001eb0:	71da      	strb	r2, [r3, #7]

	if(dab_spi_rx_buffer[5] & 0x01)
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001eb4:	795b      	ldrb	r3, [r3, #5]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <Si468x_dab_digrad_status+0xba>
	{
		sig_metrics.valid = 1;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	711a      	strb	r2, [r3, #4]
 8001ec4:	e002      	b.n	8001ecc <Si468x_dab_digrad_status+0xc0>
	}
	else
	{
		sig_metrics.valid = 0;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	711a      	strb	r2, [r3, #4]
	}

	if(dab_spi_rx_buffer[5] & 0x04)
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001ece:	795b      	ldrb	r3, [r3, #5]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <Si468x_dab_digrad_status+0xd4>
	{
		sig_metrics.acq = 1;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	715a      	strb	r2, [r3, #5]
 8001ede:	e002      	b.n	8001ee6 <Si468x_dab_digrad_status+0xda>
	}
	else
	{
		sig_metrics.acq = 0;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	715a      	strb	r2, [r3, #5]
	}

	if(dab_spi_rx_buffer[4] & 0x04)
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <Si468x_dab_digrad_status+0x108>)
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <Si468x_dab_digrad_status+0xee>
	{
		sig_metrics.acq_int = 1;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	719a      	strb	r2, [r3, #6]
 8001ef8:	e002      	b.n	8001f00 <Si468x_dab_digrad_status+0xf4>
	}
	else
	{
		sig_metrics.acq_int = 0;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	719a      	strb	r2, [r3, #6]
	}

	DisplayDabStatus(sig_metrics);
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <Si468x_dab_digrad_status+0x10c>)
 8001f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f04:	f001 fb24 	bl	8003550 <DisplayDabStatus>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200000dc 	.word	0x200000dc
 8001f10:	2000191c 	.word	0x2000191c
 8001f14:	200010dc 	.word	0x200010dc
 8001f18:	200019e4 	.word	0x200019e4

08001f1c <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001f22:	2300      	movs	r3, #0
 8001f24:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001f26:	2300      	movs	r3, #0
 8001f28:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001f2e:	2300      	movs	r3, #0
 8001f30:	717b      	strb	r3, [r7, #5]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001f32:	4ba1      	ldr	r3, [pc, #644]	; (80021b8 <Si468x_dab_get_digital_service_list+0x29c>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001f38:	4b9f      	ldr	r3, [pc, #636]	; (80021b8 <Si468x_dab_get_digital_service_list+0x29c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001f3e:	499e      	ldr	r1, [pc, #632]	; (80021b8 <Si468x_dab_get_digital_service_list+0x29c>)
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7ff fbc9 	bl	80016d8 <Si468x_write_command>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b9c      	ldr	r3, [pc, #624]	; (80021bc <Si468x_dab_get_digital_service_list+0x2a0>)
 8001f4c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f002 fc14 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001f54:	499a      	ldr	r1, [pc, #616]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f5a:	f7ff fbdf 	bl	800171c <Si468x_read_reply>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b96      	ldr	r3, [pc, #600]	; (80021bc <Si468x_dab_get_digital_service_list+0x2a0>)
 8001f64:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001f66:	2101      	movs	r1, #1
 8001f68:	4896      	ldr	r0, [pc, #600]	; (80021c4 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f6a:	f001 f9b1 	bl	80032d0 <send_debug_msg>

	if(dab_spi_rx_buffer[0] & 0x40)
 8001f6e:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <Si468x_dab_get_digital_service_list+0x66>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4892      	ldr	r0, [pc, #584]	; (80021c8 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001f7e:	f001 f9a7 	bl	80032d0 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001f82:	4b8f      	ldr	r3, [pc, #572]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f84:	791b      	ldrb	r3, [r3, #4]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f8a:	795b      	ldrb	r3, [r3, #5]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	803b      	strh	r3, [r7, #0]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f98:	7a1b      	ldrb	r3, [r3, #8]
 8001f9a:	71fb      	strb	r3, [r7, #7]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	713b      	strb	r3, [r7, #4]
 8001fa0:	e21b      	b.n	80023da <Si468x_dab_get_digital_service_list+0x4be>
	{
		services_list[service_index + actual_services].freq = actual_freq;
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	4a89      	ldr	r2, [pc, #548]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a89      	ldr	r2, [pc, #548]	; (80021d0 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4989      	ldr	r1, [pc, #548]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fb0:	2034      	movs	r0, #52	; 0x34
 8001fb2:	fb00 f303 	mul.w	r3, r0, r3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3328      	adds	r3, #40	; 0x28
 8001fba:	601a      	str	r2, [r3, #0]
		services_list[service_index + actual_services].freq_id = actual_freq_id;
 8001fbc:	793b      	ldrb	r3, [r7, #4]
 8001fbe:	4a83      	ldr	r2, [pc, #524]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a84      	ldr	r2, [pc, #528]	; (80021d8 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001fc6:	7810      	ldrb	r0, [r2, #0]
 8001fc8:	4a82      	ldr	r2, [pc, #520]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fca:	2134      	movs	r1, #52	; 0x34
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	332c      	adds	r3, #44	; 0x2c
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	701a      	strb	r2, [r3, #0]

		services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001fd8:	79ba      	ldrb	r2, [r7, #6]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	f103 0210 	add.w	r2, r3, #16
 8001fe6:	797b      	ldrb	r3, [r7, #5]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	4a74      	ldr	r2, [pc, #464]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fee:	5cd2      	ldrb	r2, [r2, r3]
 8001ff0:	793b      	ldrb	r3, [r7, #4]
 8001ff2:	4976      	ldr	r1, [pc, #472]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8001ff4:	7809      	ldrb	r1, [r1, #0]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f002 0201 	and.w	r2, r2, #1
 8001ffc:	b2d0      	uxtb	r0, r2
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002000:	2134      	movs	r1, #52	; 0x34
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3318      	adds	r3, #24
 800200a:	4602      	mov	r2, r0
 800200c:	701a      	strb	r2, [r3, #0]
		services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 800200e:	79ba      	ldrb	r2, [r7, #6]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f103 0211 	add.w	r2, r3, #17
 800201c:	797b      	ldrb	r3, [r7, #5]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8002024:	5cd2      	ldrb	r2, [r2, r3]
 8002026:	793b      	ldrb	r3, [r7, #4]
 8002028:	4968      	ldr	r1, [pc, #416]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 800202a:	7809      	ldrb	r1, [r1, #0]
 800202c:	440b      	add	r3, r1
 800202e:	f002 020f 	and.w	r2, r2, #15
 8002032:	b2d0      	uxtb	r0, r2
 8002034:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002036:	2134      	movs	r1, #52	; 0x34
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	332d      	adds	r3, #45	; 0x2d
 8002040:	4602      	mov	r2, r0
 8002042:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + actual_services].pd_flag)
 8002044:	793b      	ldrb	r3, [r7, #4]
 8002046:	4a61      	ldr	r2, [pc, #388]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a61      	ldr	r2, [pc, #388]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 800204e:	2134      	movs	r1, #52	; 0x34
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3318      	adds	r3, #24
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d017      	beq.n	800208e <Si468x_dab_get_digital_service_list+0x172>
		{
			services_count++;
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	3301      	adds	r3, #1
 8002062:	71bb      	strb	r3, [r7, #6]
			components_count += services_list[service_index + actual_services].number_of_components;
 8002064:	793b      	ldrb	r3, [r7, #4]
 8002066:	4a59      	ldr	r2, [pc, #356]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a59      	ldr	r2, [pc, #356]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 800206e:	2134      	movs	r1, #52	; 0x34
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	332d      	adds	r3, #45	; 0x2d
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	797b      	ldrb	r3, [r7, #5]
 800207c:	4413      	add	r3, r2
 800207e:	717b      	strb	r3, [r7, #5]
			service_index--;
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	713b      	strb	r3, [r7, #4]
			number_of_services--;
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	3b01      	subs	r3, #1
 800208a:	71fb      	strb	r3, [r7, #7]
			continue;
 800208c:	e1a2      	b.n	80023d4 <Si468x_dab_get_digital_service_list+0x4b8>
		}

		services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 800208e:	79ba      	ldrb	r2, [r7, #6]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	f103 0210 	add.w	r2, r3, #16
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	4a47      	ldr	r2, [pc, #284]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	105b      	asrs	r3, r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	793b      	ldrb	r3, [r7, #4]
 80020ac:	4947      	ldr	r1, [pc, #284]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 80020ae:	7809      	ldrb	r1, [r1, #0]
 80020b0:	440b      	add	r3, r1
 80020b2:	f002 021f 	and.w	r2, r2, #31
 80020b6:	b2d0      	uxtb	r0, r2
 80020b8:	4a46      	ldr	r2, [pc, #280]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020ba:	2134      	movs	r1, #52	; 0x34
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3319      	adds	r3, #25
 80020c4:	4602      	mov	r2, r0
 80020c6:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + actual_services].pd_flag)
 80020c8:	793b      	ldrb	r3, [r7, #4]
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020d2:	2134      	movs	r1, #52	; 0x34
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3318      	adds	r3, #24
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <Si468x_dab_get_digital_service_list+0x1cc>
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d07a      	beq.n	80021dc <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
				break;

			default:
				break;
 80020e6:	e0ef      	b.n	80022c8 <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 80020e8:	79ba      	ldrb	r2, [r7, #6]
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	f103 020c 	add.w	r2, r3, #12
 80020f6:	797b      	ldrb	r3, [r7, #5]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	4a30      	ldr	r2, [pc, #192]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	4619      	mov	r1, r3
 8002102:	79ba      	ldrb	r2, [r7, #6]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	f103 020d 	add.w	r2, r3, #13
 8002110:	797b      	ldrb	r3, [r7, #5]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002120:	4419      	add	r1, r3
 8002122:	793b      	ldrb	r3, [r7, #4]
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8002126:	7812      	ldrb	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	4608      	mov	r0, r1
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 800212e:	2134      	movs	r1, #52	; 0x34
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	331c      	adds	r3, #28
 8002138:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 800213a:	79ba      	ldrb	r2, [r7, #6]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	f103 020d 	add.w	r2, r3, #13
 8002148:	797b      	ldrb	r3, [r7, #5]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2a4>)
 8002150:	5cd2      	ldrb	r2, [r2, r3]
 8002152:	793b      	ldrb	r3, [r7, #4]
 8002154:	491d      	ldr	r1, [pc, #116]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8002156:	7809      	ldrb	r1, [r1, #0]
 8002158:	440b      	add	r3, r1
 800215a:	0912      	lsrs	r2, r2, #4
 800215c:	b2d0      	uxtb	r0, r2
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002160:	2134      	movs	r1, #52	; 0x34
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3320      	adds	r3, #32
 800216a:	4602      	mov	r2, r0
 800216c:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 800216e:	793b      	ldrb	r3, [r7, #4]
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	4413      	add	r3, r2
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002178:	2134      	movs	r1, #52	; 0x34
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3320      	adds	r3, #32
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	031b      	lsls	r3, r3, #12
 8002186:	4618      	mov	r0, r3
 8002188:	793b      	ldrb	r3, [r7, #4]
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002192:	2134      	movs	r1, #52	; 0x34
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	331c      	adds	r3, #28
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	793b      	ldrb	r3, [r7, #4]
 80021a0:	490a      	ldr	r1, [pc, #40]	; (80021cc <Si468x_dab_get_digital_service_list+0x2b0>)
 80021a2:	7809      	ldrb	r1, [r1, #0]
 80021a4:	440b      	add	r3, r1
 80021a6:	4402      	add	r2, r0
 80021a8:	490a      	ldr	r1, [pc, #40]	; (80021d4 <Si468x_dab_get_digital_service_list+0x2b8>)
 80021aa:	2034      	movs	r0, #52	; 0x34
 80021ac:	fb00 f303 	mul.w	r3, r0, r3
 80021b0:	440b      	add	r3, r1
 80021b2:	3324      	adds	r3, #36	; 0x24
 80021b4:	601a      	str	r2, [r3, #0]
				break;
 80021b6:	e087      	b.n	80022c8 <Si468x_dab_get_digital_service_list+0x3ac>
 80021b8:	200000dc 	.word	0x200000dc
 80021bc:	2000191c 	.word	0x2000191c
 80021c0:	200010dc 	.word	0x200010dc
 80021c4:	0800a2a8 	.word	0x0800a2a8
 80021c8:	08009dfc 	.word	0x08009dfc
 80021cc:	2000253e 	.word	0x2000253e
 80021d0:	20002540 	.word	0x20002540
 80021d4:	20001b14 	.word	0x20001b14
 80021d8:	20002544 	.word	0x20002544
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 80021dc:	79ba      	ldrb	r2, [r7, #6]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f103 020c 	add.w	r2, r3, #12
 80021ea:	797b      	ldrb	r3, [r7, #5]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	4a85      	ldr	r2, [pc, #532]	; (8002408 <Si468x_dab_get_digital_service_list+0x4ec>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	4619      	mov	r1, r3
 80021f6:	79ba      	ldrb	r2, [r7, #6]
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	f103 020d 	add.w	r2, r3, #13
 8002204:	797b      	ldrb	r3, [r7, #5]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	4a7f      	ldr	r2, [pc, #508]	; (8002408 <Si468x_dab_get_digital_service_list+0x4ec>)
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4419      	add	r1, r3
 8002212:	79ba      	ldrb	r2, [r7, #6]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	f103 020e 	add.w	r2, r3, #14
 8002220:	797b      	ldrb	r3, [r7, #5]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	4a78      	ldr	r2, [pc, #480]	; (8002408 <Si468x_dab_get_digital_service_list+0x4ec>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002230:	4419      	add	r1, r3
 8002232:	793b      	ldrb	r3, [r7, #4]
 8002234:	4a75      	ldr	r2, [pc, #468]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	4413      	add	r3, r2
 800223a:	4608      	mov	r0, r1
 800223c:	4a74      	ldr	r2, [pc, #464]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 800223e:	2134      	movs	r1, #52	; 0x34
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	331c      	adds	r3, #28
 8002248:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 800224a:	79ba      	ldrb	r2, [r7, #6]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	f103 020e 	add.w	r2, r3, #14
 8002258:	797b      	ldrb	r3, [r7, #5]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <Si468x_dab_get_digital_service_list+0x4ec>)
 8002260:	5cd2      	ldrb	r2, [r2, r3]
 8002262:	793b      	ldrb	r3, [r7, #4]
 8002264:	4969      	ldr	r1, [pc, #420]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002266:	7809      	ldrb	r1, [r1, #0]
 8002268:	440b      	add	r3, r1
 800226a:	0912      	lsrs	r2, r2, #4
 800226c:	b2d0      	uxtb	r0, r2
 800226e:	4a68      	ldr	r2, [pc, #416]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002270:	2134      	movs	r1, #52	; 0x34
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3320      	adds	r3, #32
 800227a:	4602      	mov	r2, r0
 800227c:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 800227e:	793b      	ldrb	r3, [r7, #4]
 8002280:	4a62      	ldr	r2, [pc, #392]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	4413      	add	r3, r2
 8002286:	4a62      	ldr	r2, [pc, #392]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002288:	2134      	movs	r1, #52	; 0x34
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3320      	adds	r3, #32
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	051b      	lsls	r3, r3, #20
 8002296:	4618      	mov	r0, r3
 8002298:	793b      	ldrb	r3, [r7, #4]
 800229a:	4a5c      	ldr	r2, [pc, #368]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a5b      	ldr	r2, [pc, #364]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 80022a2:	2134      	movs	r1, #52	; 0x34
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	331c      	adds	r3, #28
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	4956      	ldr	r1, [pc, #344]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 80022b2:	7809      	ldrb	r1, [r1, #0]
 80022b4:	440b      	add	r3, r1
 80022b6:	4402      	add	r2, r0
 80022b8:	4955      	ldr	r1, [pc, #340]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 80022ba:	2034      	movs	r0, #52	; 0x34
 80022bc:	fb00 f303 	mul.w	r3, r0, r3
 80022c0:	440b      	add	r3, r1
 80022c2:	3324      	adds	r3, #36	; 0x24
 80022c4:	601a      	str	r2, [r3, #0]
				break;
 80022c6:	bf00      	nop
		}

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	70fb      	strb	r3, [r7, #3]
 80022cc:	e038      	b.n	8002340 <Si468x_dab_get_digital_service_list+0x424>
		{
			services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f103 0114 	add.w	r1, r3, #20
 80022d4:	79ba      	ldrb	r2, [r7, #6]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	18ca      	adds	r2, r1, r3
 80022e0:	797b      	ldrb	r3, [r7, #5]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	18d1      	adds	r1, r2, r3
 80022e6:	793b      	ldrb	r3, [r7, #4]
 80022e8:	4a48      	ldr	r2, [pc, #288]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	441a      	add	r2, r3
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	4845      	ldr	r0, [pc, #276]	; (8002408 <Si468x_dab_get_digital_service_list+0x4ec>)
 80022f2:	5c44      	ldrb	r4, [r0, r1]
 80022f4:	4946      	ldr	r1, [pc, #280]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 80022f6:	2034      	movs	r0, #52	; 0x34
 80022f8:	fb00 f202 	mul.w	r2, r0, r2
 80022fc:	440a      	add	r2, r1
 80022fe:	4413      	add	r3, r2
 8002300:	4622      	mov	r2, r4
 8002302:	701a      	strb	r2, [r3, #0]
			if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 8002304:	793b      	ldrb	r3, [r7, #4]
 8002306:	4a41      	ldr	r2, [pc, #260]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002308:	7812      	ldrb	r2, [r2, #0]
 800230a:	441a      	add	r2, r3
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	4940      	ldr	r1, [pc, #256]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002310:	2034      	movs	r0, #52	; 0x34
 8002312:	fb00 f202 	mul.w	r2, r0, r2
 8002316:	440a      	add	r2, r1
 8002318:	4413      	add	r3, r2
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b86      	cmp	r3, #134	; 0x86
 800231e:	d10c      	bne.n	800233a <Si468x_dab_get_digital_service_list+0x41e>
			{
				services_list[service_index + actual_services].name[name_index] = 0x6F;
 8002320:	793b      	ldrb	r3, [r7, #4]
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	441a      	add	r2, r3
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	4939      	ldr	r1, [pc, #228]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 800232c:	2034      	movs	r0, #52	; 0x34
 800232e:	fb00 f202 	mul.w	r2, r0, r2
 8002332:	440a      	add	r2, r1
 8002334:	4413      	add	r3, r2
 8002336:	226f      	movs	r2, #111	; 0x6f
 8002338:	701a      	strb	r2, [r3, #0]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	3301      	adds	r3, #1
 800233e:	70fb      	strb	r3, [r7, #3]
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d9c3      	bls.n	80022ce <Si468x_dab_get_digital_service_list+0x3b2>
			}
		}

		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002346:	2300      	movs	r3, #0
 8002348:	70bb      	strb	r3, [r7, #2]
 800234a:	e032      	b.n	80023b2 <Si468x_dab_get_digital_service_list+0x496>
		{
			services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 800234c:	793b      	ldrb	r3, [r7, #4]
 800234e:	4a2f      	ldr	r2, [pc, #188]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	441a      	add	r2, r3
 8002354:	78bb      	ldrb	r3, [r7, #2]
 8002356:	492e      	ldr	r1, [pc, #184]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002358:	201a      	movs	r0, #26
 800235a:	fb00 f202 	mul.w	r2, r0, r2
 800235e:	4413      	add	r3, r2
 8002360:	3314      	adds	r3, #20
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	440b      	add	r3, r1
 8002366:	2200      	movs	r2, #0
 8002368:	71da      	strb	r2, [r3, #7]
			services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 800236a:	79ba      	ldrb	r2, [r7, #6]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002378:	797b      	ldrb	r3, [r7, #5]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	4a22      	ldr	r2, [pc, #136]	; (8002408 <Si468x_dab_get_digital_service_list+0x4ec>)
 8002380:	5cd1      	ldrb	r1, [r2, r3]
 8002382:	793b      	ldrb	r3, [r7, #4]
 8002384:	4a21      	ldr	r2, [pc, #132]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	441a      	add	r2, r3
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002390:	b2cc      	uxtb	r4, r1
 8002392:	491f      	ldr	r1, [pc, #124]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002394:	201a      	movs	r0, #26
 8002396:	fb00 f202 	mul.w	r2, r0, r2
 800239a:	4413      	add	r3, r2
 800239c:	3314      	adds	r3, #20
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	440b      	add	r3, r1
 80023a2:	4622      	mov	r2, r4
 80023a4:	719a      	strb	r2, [r3, #6]
			components_count++;
 80023a6:	797b      	ldrb	r3, [r7, #5]
 80023a8:	3301      	adds	r3, #1
 80023aa:	717b      	strb	r3, [r7, #5]
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	3301      	adds	r3, #1
 80023b0:	70bb      	strb	r3, [r7, #2]
 80023b2:	793b      	ldrb	r3, [r7, #4]
 80023b4:	4a15      	ldr	r2, [pc, #84]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <Si468x_dab_get_digital_service_list+0x4f4>)
 80023bc:	2134      	movs	r1, #52	; 0x34
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	332d      	adds	r3, #45	; 0x2d
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	78ba      	ldrb	r2, [r7, #2]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3be      	bcc.n	800234c <Si468x_dab_get_digital_service_list+0x430>
		}
		services_count++;
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	3301      	adds	r3, #1
 80023d2:	71bb      	strb	r3, [r7, #6]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80023d4:	793b      	ldrb	r3, [r7, #4]
 80023d6:	3301      	adds	r3, #1
 80023d8:	713b      	strb	r3, [r7, #4]
 80023da:	793a      	ldrb	r2, [r7, #4]
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	429a      	cmp	r2, r3
 80023e0:	f4ff addf 	bcc.w	8001fa2 <Si468x_dab_get_digital_service_list+0x86>
	}

	total_services += number_of_services;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <Si468x_dab_get_digital_service_list+0x4f8>)
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	4413      	add	r3, r2
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <Si468x_dab_get_digital_service_list+0x4f8>)
 80023f0:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	4413      	add	r3, r2
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <Si468x_dab_get_digital_service_list+0x4f0>)
 80023fe:	701a      	strb	r2, [r3, #0]
//			send_debug_msg(itoa(services_list[i].components[j].tm_id, itoa_buffer, 10), CRLF_SEND);
//			send_debug_msg("Subchannel ID : 0x", CRLF_NO_SEND);
//			send_debug_msg(itoa(services_list[i].components[j].subchannel_id, itoa_buffer, 16), CRLF_SEND);
//		}
//	}
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	200010dc 	.word	0x200010dc
 800240c:	2000253e 	.word	0x2000253e
 8002410:	20001b14 	.word	0x20001b14
 8002414:	2000253c 	.word	0x2000253c

08002418 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8002422:	2101      	movs	r1, #1
 8002424:	482d      	ldr	r0, [pc, #180]	; (80024dc <Si468x_dab_start_digital_service+0xc4>)
 8002426:	f000 ff53 	bl	80032d0 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 800242c:	2281      	movs	r2, #129	; 0x81
 800242e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002432:	2200      	movs	r2, #0
 8002434:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002438:	2200      	movs	r2, #0
 800243a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 800243e:	2200      	movs	r2, #0
 8002440:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002448:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002452:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 800245c:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0e1b      	lsrs	r3, r3, #24
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002466:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 800246e:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002478:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002482:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	0e1b      	lsrs	r3, r3, #24
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 800248c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800248e:	4914      	ldr	r1, [pc, #80]	; (80024e0 <Si468x_dab_start_digital_service+0xc8>)
 8002490:	200c      	movs	r0, #12
 8002492:	f7ff f921 	bl	80016d8 <Si468x_write_command>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <Si468x_dab_start_digital_service+0xcc>)
 800249c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800249e:	2001      	movs	r0, #1
 80024a0:	f002 f96c 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80024a4:	4910      	ldr	r1, [pc, #64]	; (80024e8 <Si468x_dab_start_digital_service+0xd0>)
 80024a6:	2005      	movs	r0, #5
 80024a8:	f7ff f938 	bl	800171c <Si468x_read_reply>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <Si468x_dab_start_digital_service+0xcc>)
 80024b2:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <Si468x_dab_start_digital_service+0xd0>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <Si468x_dab_start_digital_service+0xb2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80024c0:	2101      	movs	r1, #1
 80024c2:	480a      	ldr	r0, [pc, #40]	; (80024ec <Si468x_dab_start_digital_service+0xd4>)
 80024c4:	f000 ff04 	bl	80032d0 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 80024c8:	e003      	b.n	80024d2 <Si468x_dab_start_digital_service+0xba>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80024ca:	2101      	movs	r1, #1
 80024cc:	4808      	ldr	r0, [pc, #32]	; (80024f0 <Si468x_dab_start_digital_service+0xd8>)
 80024ce:	f000 feff 	bl	80032d0 <send_debug_msg>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800a2e4 	.word	0x0800a2e4
 80024e0:	200000dc 	.word	0x200000dc
 80024e4:	2000191c 	.word	0x2000191c
 80024e8:	200010dc 	.word	0x200010dc
 80024ec:	08009dfc 	.word	0x08009dfc
 80024f0:	0800a320 	.word	0x0800a320

080024f4 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 80024fe:	2101      	movs	r1, #1
 8002500:	4850      	ldr	r0, [pc, #320]	; (8002644 <Si468x_dab_get_ensemble_info+0x150>)
 8002502:	f000 fee5 	bl	80032d0 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <Si468x_dab_get_ensemble_info+0x154>)
 8002508:	22b4      	movs	r2, #180	; 0xb4
 800250a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800250c:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <Si468x_dab_get_ensemble_info+0x154>)
 800250e:	2200      	movs	r2, #0
 8002510:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002512:	494d      	ldr	r1, [pc, #308]	; (8002648 <Si468x_dab_get_ensemble_info+0x154>)
 8002514:	2002      	movs	r0, #2
 8002516:	f7ff f8df 	bl	80016d8 <Si468x_write_command>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	4b4b      	ldr	r3, [pc, #300]	; (800264c <Si468x_dab_get_ensemble_info+0x158>)
 8002520:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8002522:	2002      	movs	r0, #2
 8002524:	f002 f92a 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002528:	4949      	ldr	r1, [pc, #292]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 800252a:	2015      	movs	r0, #21
 800252c:	f7ff f8f6 	bl	800171c <Si468x_read_reply>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	4b45      	ldr	r3, [pc, #276]	; (800264c <Si468x_dab_get_ensemble_info+0x158>)
 8002536:	701a      	strb	r2, [r3, #0]

	while(!dab_spi_rx_buffer[6])
 8002538:	e012      	b.n	8002560 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800253a:	4943      	ldr	r1, [pc, #268]	; (8002648 <Si468x_dab_get_ensemble_info+0x154>)
 800253c:	2002      	movs	r0, #2
 800253e:	f7ff f8cb 	bl	80016d8 <Si468x_write_command>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <Si468x_dab_get_ensemble_info+0x158>)
 8002548:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 800254a:	2002      	movs	r0, #2
 800254c:	f002 f916 	bl	800477c <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002550:	493f      	ldr	r1, [pc, #252]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 8002552:	2015      	movs	r0, #21
 8002554:	f7ff f8e2 	bl	800171c <Si468x_read_reply>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <Si468x_dab_get_ensemble_info+0x158>)
 800255e:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 8002562:	799b      	ldrb	r3, [r3, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0e8      	beq.n	800253a <Si468x_dab_get_ensemble_info+0x46>
	}

	if(dab_spi_rx_buffer[0] & 0x40)
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <Si468x_dab_get_ensemble_info+0x8c>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002574:	2101      	movs	r1, #1
 8002576:	4837      	ldr	r0, [pc, #220]	; (8002654 <Si468x_dab_get_ensemble_info+0x160>)
 8002578:	f000 feaa 	bl	80032d0 <send_debug_msg>
		return 0;
 800257c:	2300      	movs	r3, #0
 800257e:	e05d      	b.n	800263c <Si468x_dab_get_ensemble_info+0x148>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 8002582:	795b      	ldrb	r3, [r3, #5]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	4a32      	ldr	r2, [pc, #200]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 8002588:	7912      	ldrb	r2, [r2, #4]
 800258a:	4413      	add	r3, r2
 800258c:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d04e      	beq.n	8002632 <Si468x_dab_get_ensemble_info+0x13e>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 8002594:	2101      	movs	r1, #1
 8002596:	4830      	ldr	r0, [pc, #192]	; (8002658 <Si468x_dab_get_ensemble_info+0x164>)
 8002598:	f000 fe9a 	bl	80032d0 <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <Si468x_dab_get_ensemble_info+0x168>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b298      	uxth	r0, r3
 80025a6:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <Si468x_dab_get_ensemble_info+0x16c>)
 80025a8:	460b      	mov	r3, r1
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a5b      	subs	r3, r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	4602      	mov	r2, r0
 80025b4:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 80025b6:	4b29      	ldr	r3, [pc, #164]	; (800265c <Si468x_dab_get_ensemble_info+0x168>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <Si468x_dab_get_ensemble_info+0x170>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4927      	ldr	r1, [pc, #156]	; (8002660 <Si468x_dab_get_ensemble_info+0x16c>)
 80025c2:	4603      	mov	r3, r0
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	1a1b      	subs	r3, r3, r0
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3314      	adds	r3, #20
 80025ce:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <Si468x_dab_get_ensemble_info+0x168>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <Si468x_dab_get_ensemble_info+0x174>)
 80025d8:	7818      	ldrb	r0, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <Si468x_dab_get_ensemble_info+0x16c>)
 80025dc:	460b      	mov	r3, r1
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a5b      	subs	r3, r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3318      	adds	r3, #24
 80025e8:	4602      	mov	r2, r0
 80025ea:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	e014      	b.n	800261c <Si468x_dab_get_ensemble_info+0x128>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	3306      	adds	r3, #6
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <Si468x_dab_get_ensemble_info+0x168>)
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	4610      	mov	r0, r2
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	4914      	ldr	r1, [pc, #80]	; (8002650 <Si468x_dab_get_ensemble_info+0x15c>)
 8002600:	5ccc      	ldrb	r4, [r1, r3]
 8002602:	4917      	ldr	r1, [pc, #92]	; (8002660 <Si468x_dab_get_ensemble_info+0x16c>)
 8002604:	4603      	mov	r3, r0
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	4413      	add	r3, r2
 8002610:	3302      	adds	r3, #2
 8002612:	4622      	mov	r2, r4
 8002614:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	3301      	adds	r3, #1
 800261a:	71fb      	strb	r3, [r7, #7]
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	d9e7      	bls.n	80025f2 <Si468x_dab_get_ensemble_info+0xfe>
//			send_debug_msg(itoa(ensembles_list[total_ensembles].freq, itoa_buffer, 10), CRLF_NO_SEND);
//			send_debug_msg(" kHz", CRLF_SEND);
//			send_debug_msg("Channel: ", CRLF_NO_SEND);
//			send_debug_msg(dab_channels_names[ensembles_list[total_ensembles].freq_id], CRLF_SEND);

			total_ensembles++;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <Si468x_dab_get_ensemble_info+0x168>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <Si468x_dab_get_ensemble_info+0x168>)
 800262c:	701a      	strb	r2, [r3, #0]
			return 1;
 800262e:	2301      	movs	r3, #1
 8002630:	e004      	b.n	800263c <Si468x_dab_get_ensemble_info+0x148>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002632:	2101      	movs	r1, #1
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <Si468x_dab_get_ensemble_info+0x178>)
 8002636:	f000 fe4b 	bl	80032d0 <send_debug_msg>
			return 0;
 800263a:	2300      	movs	r3, #0
		}
	}
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	0800a340 	.word	0x0800a340
 8002648:	200000dc 	.word	0x200000dc
 800264c:	2000191c 	.word	0x2000191c
 8002650:	200010dc 	.word	0x200010dc
 8002654:	08009dfc 	.word	0x08009dfc
 8002658:	0800a37c 	.word	0x0800a37c
 800265c:	2000253d 	.word	0x2000253d
 8002660:	200019fc 	.word	0x200019fc
 8002664:	20002540 	.word	0x20002540
 8002668:	20002544 	.word	0x20002544
 800266c:	0800a38c 	.word	0x0800a38c

08002670 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 8002676:	2101      	movs	r1, #1
 8002678:	48b1      	ldr	r0, [pc, #708]	; (8002940 <Si468x_dab_full_scan+0x2d0>)
 800267a:	f000 fe29 	bl	80032d0 <send_debug_msg>
	total_services = 0;
 800267e:	4bb1      	ldr	r3, [pc, #708]	; (8002944 <Si468x_dab_full_scan+0x2d4>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 8002684:	4bb0      	ldr	r3, [pc, #704]	; (8002948 <Si468x_dab_full_scan+0x2d8>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 800268a:	4bb0      	ldr	r3, [pc, #704]	; (800294c <Si468x_dab_full_scan+0x2dc>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

	uint8_t valid_timeout = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	71fb      	strb	r3, [r7, #7]
	uint8_t fic_q_timeout = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	71bb      	strb	r3, [r7, #6]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002698:	2300      	movs	r3, #0
 800269a:	717b      	strb	r3, [r7, #5]
 800269c:	e065      	b.n	800276a <Si468x_dab_full_scan+0xfa>
	{
		sig_metrics.valid = 0;
 800269e:	4bac      	ldr	r3, [pc, #688]	; (8002950 <Si468x_dab_full_scan+0x2e0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	711a      	strb	r2, [r3, #4]
		sig_metrics.acq = 0;
 80026a4:	4baa      	ldr	r3, [pc, #680]	; (8002950 <Si468x_dab_full_scan+0x2e0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	715a      	strb	r2, [r3, #5]
		sig_metrics.fic_q = 0;
 80026aa:	4ba9      	ldr	r3, [pc, #676]	; (8002950 <Si468x_dab_full_scan+0x2e0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	71da      	strb	r2, [r3, #7]

		valid_timeout = VALID_TIMEOUT;
 80026b0:	2304      	movs	r3, #4
 80026b2:	71fb      	strb	r3, [r7, #7]
		fic_q_timeout = FIC_Q_TIMEOUT;
 80026b4:	2364      	movs	r3, #100	; 0x64
 80026b6:	71bb      	strb	r3, [r7, #6]

		Si468x_dab_tune_freq(freq_index);
 80026b8:	797b      	ldrb	r3, [r7, #5]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff faf8 	bl	8001cb0 <Si468x_dab_tune_freq>
		while(!sig_metrics.valid || !sig_metrics.acq /*|| sig_metrics.fic_q < 100*/)
 80026c0:	e00f      	b.n	80026e2 <Si468x_dab_full_scan+0x72>
		{
			Si468x_dab_digrad_status();
 80026c2:	f7ff fba3 	bl	8001e0c <Si468x_dab_digrad_status>
			valid_timeout--;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	71fb      	strb	r3, [r7, #7]
			if(!valid_timeout)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <Si468x_dab_full_scan+0x6c>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 80026d2:	2101      	movs	r1, #1
 80026d4:	489f      	ldr	r0, [pc, #636]	; (8002954 <Si468x_dab_full_scan+0x2e4>)
 80026d6:	f000 fdfb 	bl	80032d0 <send_debug_msg>
				break;
 80026da:	e00a      	b.n	80026f2 <Si468x_dab_full_scan+0x82>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80026dc:	2032      	movs	r0, #50	; 0x32
 80026de:	f002 f84d 	bl	800477c <HAL_Delay>
		while(!sig_metrics.valid || !sig_metrics.acq /*|| sig_metrics.fic_q < 100*/)
 80026e2:	4b9b      	ldr	r3, [pc, #620]	; (8002950 <Si468x_dab_full_scan+0x2e0>)
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0eb      	beq.n	80026c2 <Si468x_dab_full_scan+0x52>
 80026ea:	4b99      	ldr	r3, [pc, #612]	; (8002950 <Si468x_dab_full_scan+0x2e0>)
 80026ec:	795b      	ldrb	r3, [r3, #5]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0e7      	beq.n	80026c2 <Si468x_dab_full_scan+0x52>
		}
		if(valid_timeout)
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d014      	beq.n	8002722 <Si468x_dab_full_scan+0xb2>
		{
			while(sig_metrics.fic_q < 100)
 80026f8:	e00f      	b.n	800271a <Si468x_dab_full_scan+0xaa>
			{
				Si468x_dab_digrad_status();
 80026fa:	f7ff fb87 	bl	8001e0c <Si468x_dab_digrad_status>
				fic_q_timeout--;
 80026fe:	79bb      	ldrb	r3, [r7, #6]
 8002700:	3b01      	subs	r3, #1
 8002702:	71bb      	strb	r3, [r7, #6]
				if(!fic_q_timeout)
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <Si468x_dab_full_scan+0xa4>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 800270a:	2101      	movs	r1, #1
 800270c:	4891      	ldr	r0, [pc, #580]	; (8002954 <Si468x_dab_full_scan+0x2e4>)
 800270e:	f000 fddf 	bl	80032d0 <send_debug_msg>
					break;
 8002712:	e006      	b.n	8002722 <Si468x_dab_full_scan+0xb2>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002714:	2032      	movs	r0, #50	; 0x32
 8002716:	f002 f831 	bl	800477c <HAL_Delay>
			while(sig_metrics.fic_q < 100)
 800271a:	4b8d      	ldr	r3, [pc, #564]	; (8002950 <Si468x_dab_full_scan+0x2e0>)
 800271c:	79db      	ldrb	r3, [r3, #7]
 800271e:	2b63      	cmp	r3, #99	; 0x63
 8002720:	d9eb      	bls.n	80026fa <Si468x_dab_full_scan+0x8a>
			}
		}

		if(valid_timeout && fic_q_timeout)
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01d      	beq.n	8002764 <Si468x_dab_full_scan+0xf4>
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01a      	beq.n	8002764 <Si468x_dab_full_scan+0xf4>
		{
			while(!dab_events.srv_list || dab_events.srv_list_int)
 800272e:	e004      	b.n	800273a <Si468x_dab_full_scan+0xca>
			{
				Si468x_dab_get_event_status();
 8002730:	f000 fb16 	bl	8002d60 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 8002734:	200a      	movs	r0, #10
 8002736:	f002 f821 	bl	800477c <HAL_Delay>
			while(!dab_events.srv_list || dab_events.srv_list_int)
 800273a:	4b87      	ldr	r3, [pc, #540]	; (8002958 <Si468x_dab_full_scan+0x2e8>)
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f3      	beq.n	8002730 <Si468x_dab_full_scan+0xc0>
 8002748:	4b83      	ldr	r3, [pc, #524]	; (8002958 <Si468x_dab_full_scan+0x2e8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ec      	bne.n	8002730 <Si468x_dab_full_scan+0xc0>
			}

			if(Si468x_dab_get_ensemble_info())
 8002756:	f7ff fecd 	bl	80024f4 <Si468x_dab_get_ensemble_info>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <Si468x_dab_full_scan+0xf4>
			{
				Si468x_dab_get_digital_service_list();
 8002760:	f7ff fbdc 	bl	8001f1c <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002764:	797b      	ldrb	r3, [r7, #5]
 8002766:	3301      	adds	r3, #1
 8002768:	717b      	strb	r3, [r7, #5]
 800276a:	4b7c      	ldr	r3, [pc, #496]	; (800295c <Si468x_dab_full_scan+0x2ec>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	797a      	ldrb	r2, [r7, #5]
 8002770:	429a      	cmp	r2, r3
 8002772:	d394      	bcc.n	800269e <Si468x_dab_full_scan+0x2e>
			}
		}
	}

	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002774:	2100      	movs	r1, #0
 8002776:	487a      	ldr	r0, [pc, #488]	; (8002960 <Si468x_dab_full_scan+0x2f0>)
 8002778:	f000 fdaa 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800277c:	4b72      	ldr	r3, [pc, #456]	; (8002948 <Si468x_dab_full_scan+0x2d8>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	220a      	movs	r2, #10
 8002782:	4978      	ldr	r1, [pc, #480]	; (8002964 <Si468x_dab_full_scan+0x2f4>)
 8002784:	4618      	mov	r0, r3
 8002786:	f007 f975 	bl	8009a74 <itoa>
 800278a:	4603      	mov	r3, r0
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fd9e 	bl	80032d0 <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002794:	2101      	movs	r1, #1
 8002796:	4874      	ldr	r0, [pc, #464]	; (8002968 <Si468x_dab_full_scan+0x2f8>)
 8002798:	f000 fd9a 	bl	80032d0 <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 800279c:	2100      	movs	r1, #0
 800279e:	4873      	ldr	r0, [pc, #460]	; (800296c <Si468x_dab_full_scan+0x2fc>)
 80027a0:	f000 fd96 	bl	80032d0 <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80027a4:	2100      	movs	r1, #0
 80027a6:	4872      	ldr	r0, [pc, #456]	; (8002970 <Si468x_dab_full_scan+0x300>)
 80027a8:	f000 fd92 	bl	80032d0 <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80027ac:	2100      	movs	r1, #0
 80027ae:	4871      	ldr	r0, [pc, #452]	; (8002974 <Si468x_dab_full_scan+0x304>)
 80027b0:	f000 fd8e 	bl	80032d0 <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 80027b4:	2101      	movs	r1, #1
 80027b6:	4870      	ldr	r0, [pc, #448]	; (8002978 <Si468x_dab_full_scan+0x308>)
 80027b8:	f000 fd8a 	bl	80032d0 <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 80027bc:	2300      	movs	r3, #0
 80027be:	713b      	strb	r3, [r7, #4]
 80027c0:	e060      	b.n	8002884 <Si468x_dab_full_scan+0x214>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 80027c2:	2100      	movs	r1, #0
 80027c4:	486d      	ldr	r0, [pc, #436]	; (800297c <Si468x_dab_full_scan+0x30c>)
 80027c6:	f000 fd83 	bl	80032d0 <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 80027ca:	793b      	ldrb	r3, [r7, #4]
 80027cc:	220a      	movs	r2, #10
 80027ce:	4965      	ldr	r1, [pc, #404]	; (8002964 <Si468x_dab_full_scan+0x2f4>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f007 f94f 	bl	8009a74 <itoa>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fd78 	bl	80032d0 <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 80027e0:	2100      	movs	r1, #0
 80027e2:	4867      	ldr	r0, [pc, #412]	; (8002980 <Si468x_dab_full_scan+0x310>)
 80027e4:	f000 fd74 	bl	80032d0 <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80027e8:	793a      	ldrb	r2, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4a64      	ldr	r2, [pc, #400]	; (8002984 <Si468x_dab_full_scan+0x314>)
 80027f4:	4413      	add	r3, r2
 80027f6:	3302      	adds	r3, #2
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fd68 	bl	80032d0 <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 8002800:	2100      	movs	r1, #0
 8002802:	485e      	ldr	r0, [pc, #376]	; (800297c <Si468x_dab_full_scan+0x30c>)
 8002804:	f000 fd64 	bl	80032d0 <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002808:	793a      	ldrb	r2, [r7, #4]
 800280a:	495e      	ldr	r1, [pc, #376]	; (8002984 <Si468x_dab_full_scan+0x314>)
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3314      	adds	r3, #20
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	220a      	movs	r2, #10
 800281c:	4951      	ldr	r1, [pc, #324]	; (8002964 <Si468x_dab_full_scan+0x2f4>)
 800281e:	4618      	mov	r0, r3
 8002820:	f007 f928 	bl	8009a74 <itoa>
 8002824:	4603      	mov	r3, r0
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd51 	bl	80032d0 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800282e:	2100      	movs	r1, #0
 8002830:	4855      	ldr	r0, [pc, #340]	; (8002988 <Si468x_dab_full_scan+0x318>)
 8002832:	f000 fd4d 	bl	80032d0 <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002836:	793a      	ldrb	r2, [r7, #4]
 8002838:	4952      	ldr	r1, [pc, #328]	; (8002984 <Si468x_dab_full_scan+0x314>)
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3318      	adds	r3, #24
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b50      	ldr	r3, [pc, #320]	; (800298c <Si468x_dab_full_scan+0x31c>)
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd3c 	bl	80032d0 <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 8002858:	793a      	ldrb	r2, [r7, #4]
 800285a:	494a      	ldr	r1, [pc, #296]	; (8002984 <Si468x_dab_full_scan+0x314>)
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3318      	adds	r3, #24
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b13      	cmp	r3, #19
 800286c:	d803      	bhi.n	8002876 <Si468x_dab_full_scan+0x206>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 800286e:	2100      	movs	r1, #0
 8002870:	4847      	ldr	r0, [pc, #284]	; (8002990 <Si468x_dab_full_scan+0x320>)
 8002872:	f000 fd2d 	bl	80032d0 <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 8002876:	2101      	movs	r1, #1
 8002878:	4846      	ldr	r0, [pc, #280]	; (8002994 <Si468x_dab_full_scan+0x324>)
 800287a:	f000 fd29 	bl	80032d0 <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 800287e:	793b      	ldrb	r3, [r7, #4]
 8002880:	3301      	adds	r3, #1
 8002882:	713b      	strb	r3, [r7, #4]
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <Si468x_dab_full_scan+0x2d8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	793a      	ldrb	r2, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d399      	bcc.n	80027c2 <Si468x_dab_full_scan+0x152>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800288e:	2101      	movs	r1, #1
 8002890:	4835      	ldr	r0, [pc, #212]	; (8002968 <Si468x_dab_full_scan+0x2f8>)
 8002892:	f000 fd1d 	bl	80032d0 <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 8002896:	2100      	movs	r1, #0
 8002898:	483f      	ldr	r0, [pc, #252]	; (8002998 <Si468x_dab_full_scan+0x328>)
 800289a:	f000 fd19 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <Si468x_dab_full_scan+0x2d4>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	220a      	movs	r2, #10
 80028a4:	492f      	ldr	r1, [pc, #188]	; (8002964 <Si468x_dab_full_scan+0x2f4>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f007 f8e4 	bl	8009a74 <itoa>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fd0d 	bl	80032d0 <send_debug_msg>


	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80028b6:	2101      	movs	r1, #1
 80028b8:	4838      	ldr	r0, [pc, #224]	; (800299c <Si468x_dab_full_scan+0x32c>)
 80028ba:	f000 fd09 	bl	80032d0 <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80028be:	2101      	movs	r1, #1
 80028c0:	4837      	ldr	r0, [pc, #220]	; (80029a0 <Si468x_dab_full_scan+0x330>)
 80028c2:	f000 fd05 	bl	80032d0 <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	70fb      	strb	r3, [r7, #3]
 80028ca:	e132      	b.n	8002b32 <Si468x_dab_full_scan+0x4c2>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 80028cc:	2100      	movs	r1, #0
 80028ce:	482b      	ldr	r0, [pc, #172]	; (800297c <Si468x_dab_full_scan+0x30c>)
 80028d0:	f000 fcfe 	bl	80032d0 <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	220a      	movs	r2, #10
 80028d8:	4922      	ldr	r1, [pc, #136]	; (8002964 <Si468x_dab_full_scan+0x2f4>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f007 f8ca 	bl	8009a74 <itoa>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fcf3 	bl	80032d0 <send_debug_msg>
		if(services_index < 10)
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d803      	bhi.n	80028f8 <Si468x_dab_full_scan+0x288>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80028f0:	2100      	movs	r1, #0
 80028f2:	4827      	ldr	r0, [pc, #156]	; (8002990 <Si468x_dab_full_scan+0x320>)
 80028f4:	f000 fcec 	bl	80032d0 <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 80028f8:	2100      	movs	r1, #0
 80028fa:	482a      	ldr	r0, [pc, #168]	; (80029a4 <Si468x_dab_full_scan+0x334>)
 80028fc:	f000 fce8 	bl	80032d0 <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <Si468x_dab_full_scan+0x338>)
 8002904:	2134      	movs	r1, #52	; 0x34
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <Si468x_dab_full_scan+0x2b8>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	2234      	movs	r2, #52	; 0x34
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <Si468x_dab_full_scan+0x338>)
 800291c:	4413      	add	r3, r2
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fcd5 	bl	80032d0 <send_debug_msg>
 8002926:	e003      	b.n	8002930 <Si468x_dab_full_scan+0x2c0>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 8002928:	2100      	movs	r1, #0
 800292a:	4820      	ldr	r0, [pc, #128]	; (80029ac <Si468x_dab_full_scan+0x33c>)
 800292c:	f000 fcd0 	bl	80032d0 <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002930:	2100      	movs	r1, #0
 8002932:	481f      	ldr	r0, [pc, #124]	; (80029b0 <Si468x_dab_full_scan+0x340>)
 8002934:	f000 fccc 	bl	80032d0 <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	70bb      	strb	r3, [r7, #2]
 800293c:	e05d      	b.n	80029fa <Si468x_dab_full_scan+0x38a>
 800293e:	bf00      	nop
 8002940:	0800a3a0 	.word	0x0800a3a0
 8002944:	2000253c 	.word	0x2000253c
 8002948:	2000253d 	.word	0x2000253d
 800294c:	2000253e 	.word	0x2000253e
 8002950:	200019e4 	.word	0x200019e4
 8002954:	0800a38c 	.word	0x0800a38c
 8002958:	200019f4 	.word	0x200019f4
 800295c:	200019e0 	.word	0x200019e0
 8002960:	0800a3dc 	.word	0x0800a3dc
 8002964:	200018dc 	.word	0x200018dc
 8002968:	0800a3f0 	.word	0x0800a3f0
 800296c:	0800a424 	.word	0x0800a424
 8002970:	0800a430 	.word	0x0800a430
 8002974:	0800a444 	.word	0x0800a444
 8002978:	0800a454 	.word	0x0800a454
 800297c:	0800a464 	.word	0x0800a464
 8002980:	0800a468 	.word	0x0800a468
 8002984:	200019fc 	.word	0x200019fc
 8002988:	0800a474 	.word	0x0800a474
 800298c:	20000008 	.word	0x20000008
 8002990:	0800a47c 	.word	0x0800a47c
 8002994:	0800a480 	.word	0x0800a480
 8002998:	0800a484 	.word	0x0800a484
 800299c:	0800a498 	.word	0x0800a498
 80029a0:	0800a504 	.word	0x0800a504
 80029a4:	0800a570 	.word	0x0800a570
 80029a8:	20001b14 	.word	0x20001b14
 80029ac:	0800a578 	.word	0x0800a578
 80029b0:	0800a58c 	.word	0x0800a58c
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80029b4:	78ba      	ldrb	r2, [r7, #2]
 80029b6:	4966      	ldr	r1, [pc, #408]	; (8002b50 <Si468x_dab_full_scan+0x4e0>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3318      	adds	r3, #24
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	4962      	ldr	r1, [pc, #392]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 80029ca:	2034      	movs	r0, #52	; 0x34
 80029cc:	fb00 f303 	mul.w	r3, r0, r3
 80029d0:	440b      	add	r3, r1
 80029d2:	332c      	adds	r3, #44	; 0x2c
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d10c      	bne.n	80029f4 <Si468x_dab_full_scan+0x384>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80029da:	78ba      	ldrb	r2, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <Si468x_dab_full_scan+0x4e0>)
 80029e6:	4413      	add	r3, r2
 80029e8:	3302      	adds	r3, #2
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fc6f 	bl	80032d0 <send_debug_msg>
				break;
 80029f2:	e007      	b.n	8002a04 <Si468x_dab_full_scan+0x394>
		for(uint8_t i = 0; i < total_ensembles; i++)
 80029f4:	78bb      	ldrb	r3, [r7, #2]
 80029f6:	3301      	adds	r3, #1
 80029f8:	70bb      	strb	r3, [r7, #2]
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <Si468x_dab_full_scan+0x4e8>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	78ba      	ldrb	r2, [r7, #2]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3d7      	bcc.n	80029b4 <Si468x_dab_full_scan+0x344>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002a04:	2100      	movs	r1, #0
 8002a06:	4855      	ldr	r0, [pc, #340]	; (8002b5c <Si468x_dab_full_scan+0x4ec>)
 8002a08:	f000 fc62 	bl	80032d0 <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002a10:	2134      	movs	r1, #52	; 0x34
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3328      	adds	r3, #40	; 0x28
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	220a      	movs	r2, #10
 8002a1e:	4950      	ldr	r1, [pc, #320]	; (8002b60 <Si468x_dab_full_scan+0x4f0>)
 8002a20:	4618      	mov	r0, r3
 8002a22:	f007 f827 	bl	8009a74 <itoa>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fc50 	bl	80032d0 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002a30:	2100      	movs	r1, #0
 8002a32:	484c      	ldr	r0, [pc, #304]	; (8002b64 <Si468x_dab_full_scan+0x4f4>)
 8002a34:	f000 fc4c 	bl	80032d0 <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	4a46      	ldr	r2, [pc, #280]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002a3c:	2134      	movs	r1, #52	; 0x34
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	332c      	adds	r3, #44	; 0x2c
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <Si468x_dab_full_scan+0x4f8>)
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fc3c 	bl	80032d0 <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002a5c:	2134      	movs	r1, #52	; 0x34
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	332c      	adds	r3, #44	; 0x2c
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b13      	cmp	r3, #19
 8002a6a:	d803      	bhi.n	8002a74 <Si468x_dab_full_scan+0x404>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	483f      	ldr	r0, [pc, #252]	; (8002b6c <Si468x_dab_full_scan+0x4fc>)
 8002a70:	f000 fc2e 	bl	80032d0 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a74:	2100      	movs	r1, #0
 8002a76:	483e      	ldr	r0, [pc, #248]	; (8002b70 <Si468x_dab_full_scan+0x500>)
 8002a78:	f000 fc2a 	bl	80032d0 <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002a80:	2134      	movs	r1, #52	; 0x34
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3319      	adds	r3, #25
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	220a      	movs	r2, #10
 8002a8e:	4934      	ldr	r1, [pc, #208]	; (8002b60 <Si468x_dab_full_scan+0x4f0>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f006 ffef 	bl	8009a74 <itoa>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fc18 	bl	80032d0 <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002aa4:	2134      	movs	r1, #52	; 0x34
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3319      	adds	r3, #25
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d803      	bhi.n	8002abc <Si468x_dab_full_scan+0x44c>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	482d      	ldr	r0, [pc, #180]	; (8002b6c <Si468x_dab_full_scan+0x4fc>)
 8002ab8:	f000 fc0a 	bl	80032d0 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002abc:	2100      	movs	r1, #0
 8002abe:	482c      	ldr	r0, [pc, #176]	; (8002b70 <Si468x_dab_full_scan+0x500>)
 8002ac0:	f000 fc06 	bl	80032d0 <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	482b      	ldr	r0, [pc, #172]	; (8002b74 <Si468x_dab_full_scan+0x504>)
 8002ac8:	f000 fc02 	bl	80032d0 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002ad0:	2134      	movs	r1, #52	; 0x34
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3324      	adds	r3, #36	; 0x24
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2210      	movs	r2, #16
 8002ade:	4920      	ldr	r1, [pc, #128]	; (8002b60 <Si468x_dab_full_scan+0x4f0>)
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f006 ffc7 	bl	8009a74 <itoa>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fbf0 	bl	80032d0 <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002af0:	2100      	movs	r1, #0
 8002af2:	4821      	ldr	r0, [pc, #132]	; (8002b78 <Si468x_dab_full_scan+0x508>)
 8002af4:	f000 fbec 	bl	80032d0 <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002af8:	2100      	movs	r1, #0
 8002afa:	481e      	ldr	r0, [pc, #120]	; (8002b74 <Si468x_dab_full_scan+0x504>)
 8002afc:	f000 fbe8 	bl	80032d0 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <Si468x_dab_full_scan+0x4e4>)
 8002b04:	2134      	movs	r1, #52	; 0x34
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	332e      	adds	r3, #46	; 0x2e
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	4913      	ldr	r1, [pc, #76]	; (8002b60 <Si468x_dab_full_scan+0x4f0>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f006 ffad 	bl	8009a74 <itoa>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fbd6 	bl	80032d0 <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 8002b24:	2101      	movs	r1, #1
 8002b26:	4815      	ldr	r0, [pc, #84]	; (8002b7c <Si468x_dab_full_scan+0x50c>)
 8002b28:	f000 fbd2 	bl	80032d0 <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	70fb      	strb	r3, [r7, #3]
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <Si468x_dab_full_scan+0x510>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f4ff aec7 	bcc.w	80028cc <Si468x_dab_full_scan+0x25c>

	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <Si468x_dab_full_scan+0x514>)
 8002b42:	f000 fbc5 	bl	80032d0 <send_debug_msg>

}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200019fc 	.word	0x200019fc
 8002b54:	20001b14 	.word	0x20001b14
 8002b58:	2000253d 	.word	0x2000253d
 8002b5c:	0800a58c 	.word	0x0800a58c
 8002b60:	200018dc 	.word	0x200018dc
 8002b64:	0800a474 	.word	0x0800a474
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	0800a47c 	.word	0x0800a47c
 8002b70:	0800a590 	.word	0x0800a590
 8002b74:	0800a598 	.word	0x0800a598
 8002b78:	0800a570 	.word	0x0800a570
 8002b7c:	0800a59c 	.word	0x0800a59c
 8002b80:	2000253c 	.word	0x2000253c
 8002b84:	0800a498 	.word	0x0800a498

08002b88 <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4867      	ldr	r0, [pc, #412]	; (8002d30 <Si468x_dab_get_audio_info+0x1a8>)
 8002b92:	f000 fb9d 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b96:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <Si468x_dab_get_audio_info+0x1ac>)
 8002b98:	22bd      	movs	r2, #189	; 0xbd
 8002b9a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b9c:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <Si468x_dab_get_audio_info+0x1ac>)
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002ba2:	4964      	ldr	r1, [pc, #400]	; (8002d34 <Si468x_dab_get_audio_info+0x1ac>)
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f7fe fd97 	bl	80016d8 <Si468x_write_command>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <Si468x_dab_get_audio_info+0x1b0>)
 8002bb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f001 fde2 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002bb8:	4960      	ldr	r1, [pc, #384]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002bba:	2014      	movs	r0, #20
 8002bbc:	f7fe fdae 	bl	800171c <Si468x_read_reply>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <Si468x_dab_get_audio_info+0x1b0>)
 8002bc6:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002bc8:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002bca:	795b      	ldrb	r3, [r3, #5]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002bdc:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002bde:	79db      	ldrb	r3, [r3, #7]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002be8:	799b      	ldrb	r3, [r3, #6]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002bf0:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002bf2:	7a1b      	ldrb	r3, [r3, #8]
 8002bf4:	111b      	asrs	r3, r3, #4
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8002bfe:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c00:	7a1b      	ldrb	r3, [r3, #8]
 8002c02:	10db      	asrs	r3, r3, #3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c0e:	7a1b      	ldrb	r3, [r3, #8]
 8002c10:	109b      	asrs	r3, r3, #2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c1c:	7a1b      	ldrb	r3, [r3, #8]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	703b      	strb	r3, [r7, #0]

	sig_metrics.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8002c24:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c26:	7b1b      	ldrb	r3, [r3, #12]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c2c:	7b5b      	ldrb	r3, [r3, #13]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	441a      	add	r2, r3
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c34:	7b9b      	ldrb	r3, [r3, #14]
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	441a      	add	r2, r3
 8002c3a:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c3c:	7bdb      	ldrb	r3, [r3, #15]
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	4413      	add	r3, r2
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <Si468x_dab_get_audio_info+0x1b8>)
 8002c46:	609a      	str	r2, [r3, #8]
	sig_metrics.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8002c48:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c4a:	7c1b      	ldrb	r3, [r3, #16]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c50:	7c5b      	ldrb	r3, [r3, #17]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	441a      	add	r2, r3
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c58:	7c9b      	ldrb	r3, [r3, #18]
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	441a      	add	r2, r3
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <Si468x_dab_get_audio_info+0x1b4>)
 8002c60:	7cdb      	ldrb	r3, [r3, #19]
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	4413      	add	r3, r2
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <Si468x_dab_get_audio_info+0x1b8>)
 8002c6a:	60da      	str	r2, [r3, #12]

	DisplayDabStatus(sig_metrics);
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <Si468x_dab_get_audio_info+0x1b8>)
 8002c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c70:	f000 fc6e 	bl	8003550 <DisplayDabStatus>

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002c74:	2100      	movs	r1, #0
 8002c76:	4833      	ldr	r0, [pc, #204]	; (8002d44 <Si468x_dab_get_audio_info+0x1bc>)
 8002c78:	f000 fb2a 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	220a      	movs	r2, #10
 8002c80:	4931      	ldr	r1, [pc, #196]	; (8002d48 <Si468x_dab_get_audio_info+0x1c0>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f006 fef6 	bl	8009a74 <itoa>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fb1f 	bl	80032d0 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002c92:	2100      	movs	r1, #0
 8002c94:	482d      	ldr	r0, [pc, #180]	; (8002d4c <Si468x_dab_get_audio_info+0x1c4>)
 8002c96:	f000 fb1b 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	220a      	movs	r2, #10
 8002c9e:	492a      	ldr	r1, [pc, #168]	; (8002d48 <Si468x_dab_get_audio_info+0x1c0>)
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f006 fee7 	bl	8009a74 <itoa>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fb10 	bl	80032d0 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4827      	ldr	r0, [pc, #156]	; (8002d50 <Si468x_dab_get_audio_info+0x1c8>)
 8002cb4:	f000 fb0c 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	220a      	movs	r2, #10
 8002cbc:	4922      	ldr	r1, [pc, #136]	; (8002d48 <Si468x_dab_get_audio_info+0x1c0>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f006 fed8 	bl	8009a74 <itoa>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fb01 	bl	80032d0 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4820      	ldr	r0, [pc, #128]	; (8002d54 <Si468x_dab_get_audio_info+0x1cc>)
 8002cd2:	f000 fafd 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002cd6:	78bb      	ldrb	r3, [r7, #2]
 8002cd8:	220a      	movs	r2, #10
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <Si468x_dab_get_audio_info+0x1c0>)
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f006 fec9 	bl	8009a74 <itoa>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 faf2 	bl	80032d0 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002cec:	2100      	movs	r1, #0
 8002cee:	481a      	ldr	r0, [pc, #104]	; (8002d58 <Si468x_dab_get_audio_info+0x1d0>)
 8002cf0:	f000 faee 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	220a      	movs	r2, #10
 8002cf8:	4913      	ldr	r1, [pc, #76]	; (8002d48 <Si468x_dab_get_audio_info+0x1c0>)
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f006 feba 	bl	8009a74 <itoa>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fae3 	bl	80032d0 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4813      	ldr	r0, [pc, #76]	; (8002d5c <Si468x_dab_get_audio_info+0x1d4>)
 8002d0e:	f000 fadf 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002d12:	783b      	ldrb	r3, [r7, #0]
 8002d14:	220a      	movs	r2, #10
 8002d16:	490c      	ldr	r1, [pc, #48]	; (8002d48 <Si468x_dab_get_audio_info+0x1c0>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f006 feab 	bl	8009a74 <itoa>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fad4 	bl	80032d0 <send_debug_msg>

}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	0800a5a8 	.word	0x0800a5a8
 8002d34:	200000dc 	.word	0x200000dc
 8002d38:	2000191c 	.word	0x2000191c
 8002d3c:	200010dc 	.word	0x200010dc
 8002d40:	200019e4 	.word	0x200019e4
 8002d44:	0800a5e4 	.word	0x0800a5e4
 8002d48:	200018dc 	.word	0x200018dc
 8002d4c:	0800a5f0 	.word	0x0800a5f0
 8002d50:	0800a600 	.word	0x0800a600
 8002d54:	0800a614 	.word	0x0800a614
 8002d58:	0800a620 	.word	0x0800a620
 8002d5c:	0800a62c 	.word	0x0800a62c

08002d60 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002d64:	2101      	movs	r1, #1
 8002d66:	486d      	ldr	r0, [pc, #436]	; (8002f1c <Si468x_dab_get_event_status+0x1bc>)
 8002d68:	f000 fab2 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002d6c:	4b6c      	ldr	r3, [pc, #432]	; (8002f20 <Si468x_dab_get_event_status+0x1c0>)
 8002d6e:	22b3      	movs	r2, #179	; 0xb3
 8002d70:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002d72:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <Si468x_dab_get_event_status+0x1c0>)
 8002d74:	2203      	movs	r2, #3
 8002d76:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002d78:	4969      	ldr	r1, [pc, #420]	; (8002f20 <Si468x_dab_get_event_status+0x1c0>)
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7fe fcac 	bl	80016d8 <Si468x_write_command>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <Si468x_dab_get_event_status+0x1c4>)
 8002d86:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f001 fcf7 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002d8e:	4966      	ldr	r1, [pc, #408]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002d90:	2009      	movs	r0, #9
 8002d92:	f7fe fcc3 	bl	800171c <Si468x_read_reply>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <Si468x_dab_get_event_status+0x1c4>)
 8002d9c:	701a      	strb	r2, [r3, #0]

	dab_events.recfg_int = (dab_spi_rx_buffer[4] & 0x80 >> 7);
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002da0:	791b      	ldrb	r3, [r3, #4]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	b2d9      	uxtb	r1, r3
 8002da8:	4a60      	ldr	r2, [pc, #384]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002daa:	7813      	ldrb	r3, [r2, #0]
 8002dac:	f361 0300 	bfi	r3, r1, #0, #1
 8002db0:	7013      	strb	r3, [r2, #0]
	dab_events.recfg_wrn_int = (dab_spi_rx_buffer[4] & 0x40 >> 6);
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002db4:	791b      	ldrb	r3, [r3, #4]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	b2d9      	uxtb	r1, r3
 8002dbc:	4a5b      	ldr	r2, [pc, #364]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002dbe:	7813      	ldrb	r3, [r2, #0]
 8002dc0:	f361 0341 	bfi	r3, r1, #1, #1
 8002dc4:	7013      	strb	r3, [r2, #0]
	dab_events.audio_int = (dab_spi_rx_buffer[4] & 0x20 >> 5);
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	b2d9      	uxtb	r1, r3
 8002dd0:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002dd2:	7813      	ldrb	r3, [r2, #0]
 8002dd4:	f361 0382 	bfi	r3, r1, #2, #1
 8002dd8:	7013      	strb	r3, [r2, #0]
	dab_events.anno_int = (dab_spi_rx_buffer[4] & 0x10 >> 4);
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002ddc:	791b      	ldrb	r3, [r3, #4]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002de6:	7813      	ldrb	r3, [r2, #0]
 8002de8:	f361 03c3 	bfi	r3, r1, #3, #1
 8002dec:	7013      	strb	r3, [r2, #0]
	dab_events.oe_serv_int = (dab_spi_rx_buffer[4] & 0x08 >> 3);
 8002dee:	4b4e      	ldr	r3, [pc, #312]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	b2d9      	uxtb	r1, r3
 8002df8:	4a4c      	ldr	r2, [pc, #304]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002dfa:	7813      	ldrb	r3, [r2, #0]
 8002dfc:	f361 1304 	bfi	r3, r1, #4, #1
 8002e00:	7013      	strb	r3, [r2, #0]
	dab_events.serv_link_int = (dab_spi_rx_buffer[4] & 0x04 >> 2);
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	b2d9      	uxtb	r1, r3
 8002e0c:	4a47      	ldr	r2, [pc, #284]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e0e:	7813      	ldrb	r3, [r2, #0]
 8002e10:	f361 1345 	bfi	r3, r1, #5, #1
 8002e14:	7013      	strb	r3, [r2, #0]
	dab_events.freq_info_int = (dab_spi_rx_buffer[4] & 0x02 >> 1);
 8002e16:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	b2d9      	uxtb	r1, r3
 8002e20:	4a42      	ldr	r2, [pc, #264]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e22:	7813      	ldrb	r3, [r2, #0]
 8002e24:	f361 1386 	bfi	r3, r1, #6, #1
 8002e28:	7013      	strb	r3, [r2, #0]
	dab_events.srv_list_int = (dab_spi_rx_buffer[4] & 0x01);
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e2c:	791b      	ldrb	r3, [r3, #4]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	b2d9      	uxtb	r1, r3
 8002e34:	4a3d      	ldr	r2, [pc, #244]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e36:	7813      	ldrb	r3, [r2, #0]
 8002e38:	f361 13c7 	bfi	r3, r1, #7, #1
 8002e3c:	7013      	strb	r3, [r2, #0]

	dab_events.audio = (dab_spi_rx_buffer[5] & 0x20 >> 5);
 8002e3e:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	b2d9      	uxtb	r1, r3
 8002e48:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e4a:	7853      	ldrb	r3, [r2, #1]
 8002e4c:	f361 0382 	bfi	r3, r1, #2, #1
 8002e50:	7053      	strb	r3, [r2, #1]
	dab_events.anno = (dab_spi_rx_buffer[5] & 0x10 >> 4);
 8002e52:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e54:	795b      	ldrb	r3, [r3, #5]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	b2d9      	uxtb	r1, r3
 8002e5c:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e5e:	7853      	ldrb	r3, [r2, #1]
 8002e60:	f361 03c3 	bfi	r3, r1, #3, #1
 8002e64:	7053      	strb	r3, [r2, #1]
	dab_events.oe_serv = (dab_spi_rx_buffer[5] & 0x08 >> 3);
 8002e66:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e68:	795b      	ldrb	r3, [r3, #5]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	b2d9      	uxtb	r1, r3
 8002e70:	4a2e      	ldr	r2, [pc, #184]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e72:	7853      	ldrb	r3, [r2, #1]
 8002e74:	f361 1304 	bfi	r3, r1, #4, #1
 8002e78:	7053      	strb	r3, [r2, #1]
	dab_events.serv_link = (dab_spi_rx_buffer[5] & 0x04 >> 2);
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e7c:	795b      	ldrb	r3, [r3, #5]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	b2d9      	uxtb	r1, r3
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e86:	7853      	ldrb	r3, [r2, #1]
 8002e88:	f361 1345 	bfi	r3, r1, #5, #1
 8002e8c:	7053      	strb	r3, [r2, #1]
	dab_events.freq_info = (dab_spi_rx_buffer[5] & 0x02 >> 1);
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002e90:	795b      	ldrb	r3, [r3, #5]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	b2d9      	uxtb	r1, r3
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002e9a:	7853      	ldrb	r3, [r2, #1]
 8002e9c:	f361 1386 	bfi	r3, r1, #6, #1
 8002ea0:	7053      	strb	r3, [r2, #1]
	dab_events.srv_list = (dab_spi_rx_buffer[5] & 0x01);
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002ea4:	795b      	ldrb	r3, [r3, #5]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	b2d9      	uxtb	r1, r3
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002eae:	7853      	ldrb	r3, [r2, #1]
 8002eb0:	f361 13c7 	bfi	r3, r1, #7, #1
 8002eb4:	7053      	strb	r3, [r2, #1]

	dab_events.srv_list_ver_lo = dab_spi_rx_buffer[6];
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002eb8:	799a      	ldrb	r2, [r3, #6]
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002ebc:	709a      	strb	r2, [r3, #2]
	dab_events.srv_list_ver_hi = dab_spi_rx_buffer[7];
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002ec0:	79da      	ldrb	r2, [r3, #7]
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002ec4:	70da      	strb	r2, [r3, #3]

	dab_events.mute_eng = (dab_spi_rx_buffer[8] & 0x08 >> 3);
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002ec8:	7a1b      	ldrb	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002ed2:	7913      	ldrb	r3, [r2, #4]
 8002ed4:	f361 1304 	bfi	r3, r1, #4, #1
 8002ed8:	7113      	strb	r3, [r2, #4]
	dab_events.sm_eng = (dab_spi_rx_buffer[8] & 0x04 >> 2);
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002edc:	7a1b      	ldrb	r3, [r3, #8]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	b2d9      	uxtb	r1, r3
 8002ee4:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002ee6:	7913      	ldrb	r3, [r2, #4]
 8002ee8:	f361 1345 	bfi	r3, r1, #5, #1
 8002eec:	7113      	strb	r3, [r2, #4]
	dab_events.blk_error = (dab_spi_rx_buffer[8] & 0x02 >> 1);
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002ef0:	7a1b      	ldrb	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	b2d9      	uxtb	r1, r3
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002efa:	7913      	ldrb	r3, [r2, #4]
 8002efc:	f361 1386 	bfi	r3, r1, #6, #1
 8002f00:	7113      	strb	r3, [r2, #4]
	dab_events.blk_loss = (dab_spi_rx_buffer[8] & 0x01);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <Si468x_dab_get_event_status+0x1c8>)
 8002f04:	7a1b      	ldrb	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b2d9      	uxtb	r1, r3
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <Si468x_dab_get_event_status+0x1cc>)
 8002f0e:	7913      	ldrb	r3, [r2, #4]
 8002f10:	f361 13c7 	bfi	r3, r1, #7, #1
 8002f14:	7113      	strb	r3, [r2, #4]
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0800a63c 	.word	0x0800a63c
 8002f20:	200000dc 	.word	0x200000dc
 8002f24:	2000191c 	.word	0x2000191c
 8002f28:	200010dc 	.word	0x200010dc
 8002f2c:	200019f4 	.word	0x200019f4

08002f30 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4852      	ldr	r0, [pc, #328]	; (8003088 <Si468x_dab_get_component_info+0x158>)
 8002f40:	f000 f9c6 	bl	80032d0 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002f44:	4b51      	ldr	r3, [pc, #324]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f46:	22bb      	movs	r2, #187	; 0xbb
 8002f48:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002f4a:	4b50      	ldr	r3, [pc, #320]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002f50:	4b4e      	ldr	r3, [pc, #312]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002f56:	4b4d      	ldr	r3, [pc, #308]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b4a      	ldr	r3, [pc, #296]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f62:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f6c:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b45      	ldr	r3, [pc, #276]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f76:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0e1b      	lsrs	r3, r3, #24
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f80:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002f82:	4a42      	ldr	r2, [pc, #264]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	121b      	asrs	r3, r3, #8
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f90:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	141b      	asrs	r3, r3, #16
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b3c      	ldr	r3, [pc, #240]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002f9a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	161b      	asrs	r3, r3, #24
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002fa4:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002fa6:	4939      	ldr	r1, [pc, #228]	; (800308c <Si468x_dab_get_component_info+0x15c>)
 8002fa8:	200c      	movs	r0, #12
 8002faa:	f7fe fb95 	bl	80016d8 <Si468x_write_command>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <Si468x_dab_get_component_info+0x160>)
 8002fb4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002fb6:	2005      	movs	r0, #5
 8002fb8:	f001 fbe0 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002fbc:	4935      	ldr	r1, [pc, #212]	; (8003094 <Si468x_dab_get_component_info+0x164>)
 8002fbe:	201a      	movs	r0, #26
 8002fc0:	f7fe fbac 	bl	800171c <Si468x_read_reply>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <Si468x_dab_get_component_info+0x160>)
 8002fca:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002fcc:	4b31      	ldr	r3, [pc, #196]	; (8003094 <Si468x_dab_get_component_info+0x164>)
 8002fce:	799b      	ldrb	r3, [r3, #6]
 8002fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd4:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e00c      	b.n	8002ff6 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	f103 0208 	add.w	r2, r3, #8
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
 8002fe4:	492b      	ldr	r1, [pc, #172]	; (8003094 <Si468x_dab_get_component_info+0x164>)
 8002fe6:	5c8a      	ldrb	r2, [r1, r2]
 8002fe8:	3320      	adds	r3, #32
 8002fea:	443b      	add	r3, r7
 8002fec:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d9ef      	bls.n	8002fdc <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <Si468x_dab_get_component_info+0x164>)
 8002ffe:	7e1b      	ldrb	r3, [r3, #24]
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <Si468x_dab_get_component_info+0x164>)
 8003004:	7e5b      	ldrb	r3, [r3, #25]
 8003006:	b29b      	uxth	r3, r3
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	b29b      	uxth	r3, r3
 800300c:	4413      	add	r3, r2
 800300e:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Global ID: ", CRLF_NO_SEND);
 8003010:	2100      	movs	r1, #0
 8003012:	4821      	ldr	r0, [pc, #132]	; (8003098 <Si468x_dab_get_component_info+0x168>)
 8003014:	f000 f95c 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(global_id, itoa_buffer, 10), CRLF_SEND);
 8003018:	7efb      	ldrb	r3, [r7, #27]
 800301a:	220a      	movs	r2, #10
 800301c:	491f      	ldr	r1, [pc, #124]	; (800309c <Si468x_dab_get_component_info+0x16c>)
 800301e:	4618      	mov	r0, r3
 8003020:	f006 fd28 	bl	8009a74 <itoa>
 8003024:	4603      	mov	r3, r0
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f951 	bl	80032d0 <send_debug_msg>

	send_debug_msg("Language: ", CRLF_NO_SEND);
 800302e:	2100      	movs	r1, #0
 8003030:	481b      	ldr	r0, [pc, #108]	; (80030a0 <Si468x_dab_get_component_info+0x170>)
 8003032:	f000 f94d 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8003036:	7fbb      	ldrb	r3, [r7, #30]
 8003038:	220a      	movs	r2, #10
 800303a:	4918      	ldr	r1, [pc, #96]	; (800309c <Si468x_dab_get_component_info+0x16c>)
 800303c:	4618      	mov	r0, r3
 800303e:	f006 fd19 	bl	8009a74 <itoa>
 8003042:	4603      	mov	r3, r0
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f942 	bl	80032d0 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 800304c:	2100      	movs	r1, #0
 800304e:	4815      	ldr	r0, [pc, #84]	; (80030a4 <Si468x_dab_get_component_info+0x174>)
 8003050:	f000 f93e 	bl	80032d0 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f938 	bl	80032d0 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8003060:	2100      	movs	r1, #0
 8003062:	4811      	ldr	r0, [pc, #68]	; (80030a8 <Si468x_dab_get_component_info+0x178>)
 8003064:	f000 f934 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(global_id, itoa_buffer, 2), CRLF_SEND);
 8003068:	7efb      	ldrb	r3, [r7, #27]
 800306a:	2202      	movs	r2, #2
 800306c:	490b      	ldr	r1, [pc, #44]	; (800309c <Si468x_dab_get_component_info+0x16c>)
 800306e:	4618      	mov	r0, r3
 8003070:	f006 fd00 	bl	8009a74 <itoa>
 8003074:	4603      	mov	r3, r0
 8003076:	2101      	movs	r1, #1
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f929 	bl	80032d0 <send_debug_msg>

}
 800307e:	bf00      	nop
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	0800a67c 	.word	0x0800a67c
 800308c:	200000dc 	.word	0x200000dc
 8003090:	2000191c 	.word	0x2000191c
 8003094:	200010dc 	.word	0x200010dc
 8003098:	0800a6b0 	.word	0x0800a6b0
 800309c:	200018dc 	.word	0x200018dc
 80030a0:	0800a6bc 	.word	0x0800a6bc
 80030a4:	0800a6c8 	.word	0x0800a6c8
 80030a8:	0800a6dc 	.word	0x0800a6dc

080030ac <Si468x_dab_get_time>:

		DisplayDabStatus(sig_metrics);
}

void Si468x_dab_get_time()
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
	uint16_t year;
	uint8_t months, days, hours, minutes, seconds;

	send_debug_msg("--------------Getting time from Si468x-------------------", CRLF_SEND);
 80030b2:	2101      	movs	r1, #1
 80030b4:	4845      	ldr	r0, [pc, #276]	; (80031cc <Si468x_dab_get_time+0x120>)
 80030b6:	f000 f90b 	bl	80032d0 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 80030ba:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <Si468x_dab_get_time+0x124>)
 80030bc:	22bc      	movs	r2, #188	; 0xbc
 80030be:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 80030c0:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <Si468x_dab_get_time+0x124>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80030c6:	4942      	ldr	r1, [pc, #264]	; (80031d0 <Si468x_dab_get_time+0x124>)
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7fe fb05 	bl	80016d8 <Si468x_write_command>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <Si468x_dab_get_time+0x128>)
 80030d4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f001 fb50 	bl	800477c <HAL_Delay>
	status = Si468x_read_reply(11, dab_spi_rx_buffer);
 80030dc:	493e      	ldr	r1, [pc, #248]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 80030de:	200b      	movs	r0, #11
 80030e0:	f7fe fb1c 	bl	800171c <Si468x_read_reply>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <Si468x_dab_get_time+0x128>)
 80030ea:	701a      	strb	r2, [r3, #0]

	year = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 80030ee:	795b      	ldrb	r3, [r3, #5]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 80030f8:	791b      	ldrb	r3, [r3, #4]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	80fb      	strh	r3, [r7, #6]
	months = dab_spi_rx_buffer[6];
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 8003102:	799b      	ldrb	r3, [r3, #6]
 8003104:	717b      	strb	r3, [r7, #5]
	days = dab_spi_rx_buffer[7];
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 8003108:	79db      	ldrb	r3, [r3, #7]
 800310a:	713b      	strb	r3, [r7, #4]
	hours = dab_spi_rx_buffer[8];
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 800310e:	7a1b      	ldrb	r3, [r3, #8]
 8003110:	70fb      	strb	r3, [r7, #3]
	minutes = dab_spi_rx_buffer[9];
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 8003114:	7a5b      	ldrb	r3, [r3, #9]
 8003116:	70bb      	strb	r3, [r7, #2]
	seconds = dab_spi_rx_buffer[10];
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <Si468x_dab_get_time+0x12c>)
 800311a:	7a9b      	ldrb	r3, [r3, #10]
 800311c:	707b      	strb	r3, [r7, #1]

	send_debug_msg(itoa(hours, itoa_buffer, 10), CRLF_NO_SEND);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	220a      	movs	r2, #10
 8003122:	492e      	ldr	r1, [pc, #184]	; (80031dc <Si468x_dab_get_time+0x130>)
 8003124:	4618      	mov	r0, r3
 8003126:	f006 fca5 	bl	8009a74 <itoa>
 800312a:	4603      	mov	r3, r0
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f8ce 	bl	80032d0 <send_debug_msg>
	send_debug_msg(":", CRLF_NO_SEND);
 8003134:	2100      	movs	r1, #0
 8003136:	482a      	ldr	r0, [pc, #168]	; (80031e0 <Si468x_dab_get_time+0x134>)
 8003138:	f000 f8ca 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(minutes, itoa_buffer, 10), CRLF_NO_SEND);
 800313c:	78bb      	ldrb	r3, [r7, #2]
 800313e:	220a      	movs	r2, #10
 8003140:	4926      	ldr	r1, [pc, #152]	; (80031dc <Si468x_dab_get_time+0x130>)
 8003142:	4618      	mov	r0, r3
 8003144:	f006 fc96 	bl	8009a74 <itoa>
 8003148:	4603      	mov	r3, r0
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f8bf 	bl	80032d0 <send_debug_msg>
	send_debug_msg(":", CRLF_NO_SEND);
 8003152:	2100      	movs	r1, #0
 8003154:	4822      	ldr	r0, [pc, #136]	; (80031e0 <Si468x_dab_get_time+0x134>)
 8003156:	f000 f8bb 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(seconds, itoa_buffer, 10), CRLF_SEND);
 800315a:	787b      	ldrb	r3, [r7, #1]
 800315c:	220a      	movs	r2, #10
 800315e:	491f      	ldr	r1, [pc, #124]	; (80031dc <Si468x_dab_get_time+0x130>)
 8003160:	4618      	mov	r0, r3
 8003162:	f006 fc87 	bl	8009a74 <itoa>
 8003166:	4603      	mov	r3, r0
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f8b0 	bl	80032d0 <send_debug_msg>

	send_debug_msg(itoa(days, itoa_buffer, 10), CRLF_NO_SEND);
 8003170:	793b      	ldrb	r3, [r7, #4]
 8003172:	220a      	movs	r2, #10
 8003174:	4919      	ldr	r1, [pc, #100]	; (80031dc <Si468x_dab_get_time+0x130>)
 8003176:	4618      	mov	r0, r3
 8003178:	f006 fc7c 	bl	8009a74 <itoa>
 800317c:	4603      	mov	r3, r0
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f8a5 	bl	80032d0 <send_debug_msg>
	send_debug_msg(".", CRLF_NO_SEND);
 8003186:	2100      	movs	r1, #0
 8003188:	4816      	ldr	r0, [pc, #88]	; (80031e4 <Si468x_dab_get_time+0x138>)
 800318a:	f000 f8a1 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(months, itoa_buffer, 10), CRLF_NO_SEND);
 800318e:	797b      	ldrb	r3, [r7, #5]
 8003190:	220a      	movs	r2, #10
 8003192:	4912      	ldr	r1, [pc, #72]	; (80031dc <Si468x_dab_get_time+0x130>)
 8003194:	4618      	mov	r0, r3
 8003196:	f006 fc6d 	bl	8009a74 <itoa>
 800319a:	4603      	mov	r3, r0
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f896 	bl	80032d0 <send_debug_msg>
	send_debug_msg(".", CRLF_NO_SEND);
 80031a4:	2100      	movs	r1, #0
 80031a6:	480f      	ldr	r0, [pc, #60]	; (80031e4 <Si468x_dab_get_time+0x138>)
 80031a8:	f000 f892 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(year, itoa_buffer, 10), CRLF_SEND);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	220a      	movs	r2, #10
 80031b0:	490a      	ldr	r1, [pc, #40]	; (80031dc <Si468x_dab_get_time+0x130>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f006 fc5e 	bl	8009a74 <itoa>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f887 	bl	80032d0 <send_debug_msg>

}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	0800a72c 	.word	0x0800a72c
 80031d0:	200000dc 	.word	0x200000dc
 80031d4:	2000191c 	.word	0x2000191c
 80031d8:	200010dc 	.word	0x200010dc
 80031dc:	200018dc 	.word	0x200018dc
 80031e0:	0800a768 	.word	0x0800a768
 80031e4:	0800a76c 	.word	0x0800a76c

080031e8 <Si468x_play_next_station>:


void Si468x_play_next_station()
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------", CRLF_SEND);
 80031ec:	2101      	movs	r1, #1
 80031ee:	4832      	ldr	r0, [pc, #200]	; (80032b8 <Si468x_play_next_station+0xd0>)
 80031f0:	f000 f86e 	bl	80032d0 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 80031f4:	2100      	movs	r1, #0
 80031f6:	4831      	ldr	r0, [pc, #196]	; (80032bc <Si468x_play_next_station+0xd4>)
 80031f8:	f000 f86a 	bl	80032d0 <send_debug_msg>
	send_debug_msg(itoa(actual_station, itoa_buffer, 10), CRLF_SEND);
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <Si468x_play_next_station+0xd8>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	220a      	movs	r2, #10
 8003202:	4930      	ldr	r1, [pc, #192]	; (80032c4 <Si468x_play_next_station+0xdc>)
 8003204:	4618      	mov	r0, r3
 8003206:	f006 fc35 	bl	8009a74 <itoa>
 800320a:	4603      	mov	r3, r0
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f85e 	bl	80032d0 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[actual_station].freq_id); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <Si468x_play_next_station+0xd8>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <Si468x_play_next_station+0xe0>)
 800321c:	2334      	movs	r3, #52	; 0x34
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	332c      	adds	r3, #44	; 0x2c
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fd41 	bl	8001cb0 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <Si468x_play_next_station+0xd8>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <Si468x_play_next_station+0xe0>)
 8003236:	2334      	movs	r3, #52	; 0x34
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3324      	adds	r3, #36	; 0x24
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <Si468x_play_next_station+0xd8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	491f      	ldr	r1, [pc, #124]	; (80032c8 <Si468x_play_next_station+0xe0>)
 800324a:	2334      	movs	r3, #52	; 0x34
 800324c:	fb00 f303 	mul.w	r3, r0, r3
 8003250:	440b      	add	r3, r1
 8003252:	332e      	adds	r3, #46	; 0x2e
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7ff fe69 	bl	8002f30 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <Si468x_play_next_station+0xd8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <Si468x_play_next_station+0xe0>)
 8003266:	2334      	movs	r3, #52	; 0x34
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <Si468x_play_next_station+0xd8>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	4913      	ldr	r1, [pc, #76]	; (80032c8 <Si468x_play_next_station+0xe0>)
 800327a:	2334      	movs	r3, #52	; 0x34
 800327c:	fb00 f303 	mul.w	r3, r0, r3
 8003280:	440b      	add	r3, r1
 8003282:	332e      	adds	r3, #46	; 0x2e
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f7ff f8c5 	bl	8002418 <Si468x_dab_start_digital_service>

	Si468x_dab_digrad_status();
 800328e:	f7fe fdbd 	bl	8001e0c <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8003292:	f7ff fc79 	bl	8002b88 <Si468x_dab_get_audio_info>



	actual_station++;
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <Si468x_play_next_station+0xd8>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <Si468x_play_next_station+0xd8>)
 80032a0:	701a      	strb	r2, [r3, #0]
	if(actual_station == total_services)
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <Si468x_play_next_station+0xd8>)
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <Si468x_play_next_station+0xe4>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d102      	bne.n	80032b4 <Si468x_play_next_station+0xcc>
	{
	  actual_station = 0;
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <Si468x_play_next_station+0xd8>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
	}
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	0800a770 	.word	0x0800a770
 80032bc:	0800a794 	.word	0x0800a794
 80032c0:	20002545 	.word	0x20002545
 80032c4:	200018dc 	.word	0x200018dc
 80032c8:	20001b14 	.word	0x20001b14
 80032cc:	2000253c 	.word	0x2000253c

080032d0 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fc ff73 	bl	80001c8 <strlen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	2364      	movs	r3, #100	; 0x64
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	480a      	ldr	r0, [pc, #40]	; (8003318 <send_debug_msg+0x48>)
 80032f0:	f006 f80f 	bl	8009312 <HAL_UART_Transmit>

	if(is_crlf)
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80032fa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80032fe:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003300:	f107 010c 	add.w	r1, r7, #12
 8003304:	2364      	movs	r3, #100	; 0x64
 8003306:	2202      	movs	r2, #2
 8003308:	4803      	ldr	r0, [pc, #12]	; (8003318 <send_debug_msg+0x48>)
 800330a:	f006 f802 	bl	8009312 <HAL_UART_Transmit>
	}
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000283c 	.word	0x2000283c

0800331c <DisplayMainScreen>:
#include "display_management.h"

char char_buffer[32];

void DisplayMainScreen()
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 8003322:	2000      	movs	r0, #0
 8003324:	f7fd fac4 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 8003328:	23eb      	movs	r3, #235	; 0xeb
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	f240 133b 	movw	r3, #315	; 0x13b
 8003330:	2219      	movs	r2, #25
 8003332:	2105      	movs	r1, #5
 8003334:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003338:	f7fd fb45 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 800333c:	2302      	movs	r3, #2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	4b7a      	ldr	r3, [pc, #488]	; (800352c <DisplayMainScreen+0x210>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334a:	2105      	movs	r1, #5
 800334c:	2041      	movs	r0, #65	; 0x41
 800334e:	f7fd fbe7 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 8003352:	233c      	movs	r3, #60	; 0x3c
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f240 1331 	movw	r3, #305	; 0x131
 800335a:	2223      	movs	r2, #35	; 0x23
 800335c:	210f      	movs	r1, #15
 800335e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003362:	f7fd fb30 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 8003366:	235f      	movs	r3, #95	; 0x5f
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	f240 1331 	movw	r3, #305	; 0x131
 800336e:	2246      	movs	r2, #70	; 0x46
 8003370:	210f      	movs	r1, #15
 8003372:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003376:	f7fd fb26 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 800337a:	23a0      	movs	r3, #160	; 0xa0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2369      	movs	r3, #105	; 0x69
 8003380:	226e      	movs	r2, #110	; 0x6e
 8003382:	210f      	movs	r1, #15
 8003384:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003388:	f7fd fb1d 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 800338c:	239f      	movs	r3, #159	; 0x9f
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2368      	movs	r3, #104	; 0x68
 8003392:	226f      	movs	r2, #111	; 0x6f
 8003394:	2110      	movs	r1, #16
 8003396:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800339a:	f7fd faf3 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 800339e:	2302      	movs	r3, #2
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <DisplayMainScreen+0x214>)
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ae:	217f      	movs	r1, #127	; 0x7f
 80033b0:	2023      	movs	r0, #35	; 0x23
 80033b2:	f7fd fbb5 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 80033b6:	23a0      	movs	r3, #160	; 0xa0
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	23cd      	movs	r3, #205	; 0xcd
 80033bc:	226e      	movs	r2, #110	; 0x6e
 80033be:	2173      	movs	r1, #115	; 0x73
 80033c0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80033c4:	f7fd faff 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 80033c8:	239f      	movs	r3, #159	; 0x9f
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	23cc      	movs	r3, #204	; 0xcc
 80033ce:	226f      	movs	r2, #111	; 0x6f
 80033d0:	2174      	movs	r1, #116	; 0x74
 80033d2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80033d6:	f7fd fad5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 80033da:	2302      	movs	r3, #2
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <DisplayMainScreen+0x218>)
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ea:	217f      	movs	r1, #127	; 0x7f
 80033ec:	2090      	movs	r0, #144	; 0x90
 80033ee:	f7fd fb97 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 80033f2:	23a0      	movs	r3, #160	; 0xa0
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f240 1331 	movw	r3, #305	; 0x131
 80033fa:	226e      	movs	r2, #110	; 0x6e
 80033fc:	21d7      	movs	r1, #215	; 0xd7
 80033fe:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003402:	f7fd fae0 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 8003406:	239f      	movs	r3, #159	; 0x9f
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f44f 7398 	mov.w	r3, #304	; 0x130
 800340e:	226f      	movs	r2, #111	; 0x6f
 8003410:	21d8      	movs	r1, #216	; 0xd8
 8003412:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003416:	f7fd fab5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 800341a:	2302      	movs	r3, #2
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	4b46      	ldr	r3, [pc, #280]	; (8003538 <DisplayMainScreen+0x21c>)
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800342a:	217f      	movs	r1, #127	; 0x7f
 800342c:	20ea      	movs	r0, #234	; 0xea
 800342e:	f7fd fb77 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 8003432:	23dc      	movs	r3, #220	; 0xdc
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2369      	movs	r3, #105	; 0x69
 8003438:	22aa      	movs	r2, #170	; 0xaa
 800343a:	210f      	movs	r1, #15
 800343c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003440:	f7fd fac1 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 8003444:	23db      	movs	r3, #219	; 0xdb
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2368      	movs	r3, #104	; 0x68
 800344a:	22ab      	movs	r2, #171	; 0xab
 800344c:	2110      	movs	r1, #16
 800344e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003452:	f7fd fa97 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 8003456:	2302      	movs	r3, #2
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <DisplayMainScreen+0x220>)
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003466:	21bb      	movs	r1, #187	; 0xbb
 8003468:	202d      	movs	r0, #45	; 0x2d
 800346a:	f7fd fb59 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 800346e:	23dc      	movs	r3, #220	; 0xdc
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	23cd      	movs	r3, #205	; 0xcd
 8003474:	22aa      	movs	r2, #170	; 0xaa
 8003476:	2173      	movs	r1, #115	; 0x73
 8003478:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800347c:	f7fd faa3 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8003480:	23db      	movs	r3, #219	; 0xdb
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	23cc      	movs	r3, #204	; 0xcc
 8003486:	22ab      	movs	r2, #171	; 0xab
 8003488:	2174      	movs	r1, #116	; 0x74
 800348a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800348e:	f7fd fa79 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 8003492:	2302      	movs	r3, #2
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <DisplayMainScreen+0x224>)
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800349e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a2:	21b4      	movs	r1, #180	; 0xb4
 80034a4:	2081      	movs	r0, #129	; 0x81
 80034a6:	f7fd fb3b 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 80034aa:	2302      	movs	r3, #2
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	4b25      	ldr	r3, [pc, #148]	; (8003544 <DisplayMainScreen+0x228>)
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ba:	21c3      	movs	r1, #195	; 0xc3
 80034bc:	2084      	movs	r0, #132	; 0x84
 80034be:	f7fd fb2f 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 80034c2:	23dc      	movs	r3, #220	; 0xdc
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	f240 1331 	movw	r3, #305	; 0x131
 80034ca:	22aa      	movs	r2, #170	; 0xaa
 80034cc:	21d7      	movs	r1, #215	; 0xd7
 80034ce:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80034d2:	f7fd fa78 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 80034d6:	23db      	movs	r3, #219	; 0xdb
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f44f 7398 	mov.w	r3, #304	; 0x130
 80034de:	22ab      	movs	r2, #171	; 0xab
 80034e0:	21d8      	movs	r1, #216	; 0xd8
 80034e2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80034e6:	f7fd fa4d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 80034ea:	2302      	movs	r3, #2
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <DisplayMainScreen+0x22c>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fa:	21b4      	movs	r1, #180	; 0xb4
 80034fc:	20f5      	movs	r0, #245	; 0xf5
 80034fe:	f7fd fb0f 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 8003502:	2302      	movs	r3, #2
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <DisplayMainScreen+0x228>)
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800350e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003512:	21c3      	movs	r1, #195	; 0xc3
 8003514:	20e8      	movs	r0, #232	; 0xe8
 8003516:	f7fd fb03 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 800351a:	2201      	movs	r2, #1
 800351c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003520:	480a      	ldr	r0, [pc, #40]	; (800354c <DisplayMainScreen+0x230>)
 8003522:	f001 ff2f 	bl	8005384 <HAL_GPIO_WritePin>
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	0800a7a8 	.word	0x0800a7a8
 8003530:	0800a7bc 	.word	0x0800a7bc
 8003534:	0800a7c4 	.word	0x0800a7c4
 8003538:	0800a7cc 	.word	0x0800a7cc
 800353c:	0800a7d4 	.word	0x0800a7d4
 8003540:	0800a7dc 	.word	0x0800a7dc
 8003544:	0800a7e8 	.word	0x0800a7e8
 8003548:	0800a7f0 	.word	0x0800a7f0
 800354c:	40020c00 	.word	0x40020c00

08003550 <DisplayDabStatus>:
{
	ILI9341_Draw_String(290, 40, WHITE, BLACK, "E", 2);
}

void DisplayDabStatus(sig_metrics_t sig_metrics_val)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b087      	sub	sp, #28
 8003554:	af02      	add	r7, sp, #8
 8003556:	463c      	mov	r4, r7
 8003558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Valid:", 2);
 800355c:	2302      	movs	r3, #2
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <DisplayDabStatus+0x210>)
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800356a:	2128      	movs	r1, #40	; 0x28
 800356c:	2014      	movs	r0, #20
 800356e:	f7fd fad7 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(69, 40, WHITE, BLACK, itoa(sig_metrics_val.valid, char_buffer, 10), 2);
 8003572:	793b      	ldrb	r3, [r7, #4]
 8003574:	220a      	movs	r2, #10
 8003576:	497b      	ldr	r1, [pc, #492]	; (8003764 <DisplayDabStatus+0x214>)
 8003578:	4618      	mov	r0, r3
 800357a:	f006 fa7b 	bl	8009a74 <itoa>
 800357e:	4603      	mov	r3, r0
 8003580:	2202      	movs	r2, #2
 8003582:	9201      	str	r2, [sp, #4]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2300      	movs	r3, #0
 8003588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358c:	2128      	movs	r1, #40	; 0x28
 800358e:	2045      	movs	r0, #69	; 0x45
 8003590:	f7fd fac6 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(82, 40, WHITE, BLACK, "ACQ:", 2);
 8003594:	2302      	movs	r3, #2
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <DisplayDabStatus+0x218>)
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2300      	movs	r3, #0
 800359e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a2:	2128      	movs	r1, #40	; 0x28
 80035a4:	2052      	movs	r0, #82	; 0x52
 80035a6:	f7fd fabb 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 40, WHITE, BLACK, itoa(sig_metrics_val.acq, char_buffer, 10), 2);
 80035aa:	797b      	ldrb	r3, [r7, #5]
 80035ac:	220a      	movs	r2, #10
 80035ae:	496d      	ldr	r1, [pc, #436]	; (8003764 <DisplayDabStatus+0x214>)
 80035b0:	4618      	mov	r0, r3
 80035b2:	f006 fa5f 	bl	8009a74 <itoa>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2202      	movs	r2, #2
 80035ba:	9201      	str	r2, [sp, #4]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035c4:	2128      	movs	r1, #40	; 0x28
 80035c6:	2073      	movs	r0, #115	; 0x73
 80035c8:	f7fd faaa 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(131, 40, WHITE, BLACK, "RSSI:" , 2);
 80035cc:	2302      	movs	r3, #2
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <DisplayDabStatus+0x21c>)
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035da:	2128      	movs	r1, #40	; 0x28
 80035dc:	2083      	movs	r0, #131	; 0x83
 80035de:	f7fd fa9f 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, "   ", 2);
 80035e2:	2302      	movs	r3, #2
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	4b62      	ldr	r3, [pc, #392]	; (8003770 <DisplayDabStatus+0x220>)
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f0:	2128      	movs	r1, #40	; 0x28
 80035f2:	20ac      	movs	r0, #172	; 0xac
 80035f4:	f7fd fa94 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, itoa(sig_metrics_val.rssi, char_buffer, 10), 2);
 80035f8:	783b      	ldrb	r3, [r7, #0]
 80035fa:	220a      	movs	r2, #10
 80035fc:	4959      	ldr	r1, [pc, #356]	; (8003764 <DisplayDabStatus+0x214>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f006 fa38 	bl	8009a74 <itoa>
 8003604:	4603      	mov	r3, r0
 8003606:	2202      	movs	r2, #2
 8003608:	9201      	str	r2, [sp, #4]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003612:	2128      	movs	r1, #40	; 0x28
 8003614:	20ac      	movs	r0, #172	; 0xac
 8003616:	f7fd fa83 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 40, WHITE, BLACK, "SNR:" , 2);
 800361a:	2302      	movs	r3, #2
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	4b55      	ldr	r3, [pc, #340]	; (8003774 <DisplayDabStatus+0x224>)
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003628:	2128      	movs	r1, #40	; 0x28
 800362a:	20c0      	movs	r0, #192	; 0xc0
 800362c:	f7fd fa78 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, "   ", 2);
 8003630:	2302      	movs	r3, #2
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	4b4e      	ldr	r3, [pc, #312]	; (8003770 <DisplayDabStatus+0x220>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800363e:	2128      	movs	r1, #40	; 0x28
 8003640:	20e1      	movs	r0, #225	; 0xe1
 8003642:	f7fd fa6d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, itoa(sig_metrics_val.snr, char_buffer, 10), 2);
 8003646:	787b      	ldrb	r3, [r7, #1]
 8003648:	220a      	movs	r2, #10
 800364a:	4946      	ldr	r1, [pc, #280]	; (8003764 <DisplayDabStatus+0x214>)
 800364c:	4618      	mov	r0, r3
 800364e:	f006 fa11 	bl	8009a74 <itoa>
 8003652:	4603      	mov	r3, r0
 8003654:	2202      	movs	r2, #2
 8003656:	9201      	str	r2, [sp, #4]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2300      	movs	r3, #0
 800365c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003660:	2128      	movs	r1, #40	; 0x28
 8003662:	20e1      	movs	r0, #225	; 0xe1
 8003664:	f7fd fa5c 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 40, WHITE, BLACK, "FQ:" , 2);
 8003668:	2302      	movs	r3, #2
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <DisplayDabStatus+0x228>)
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003676:	2128      	movs	r1, #40	; 0x28
 8003678:	20f0      	movs	r0, #240	; 0xf0
 800367a:	f7fd fa51 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, "   ", 2);
 800367e:	2302      	movs	r3, #2
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <DisplayDabStatus+0x220>)
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368c:	2128      	movs	r1, #40	; 0x28
 800368e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8003692:	f7fd fa45 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, itoa(sig_metrics_val.fic_q, char_buffer, 10), 2);
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	220a      	movs	r2, #10
 800369a:	4932      	ldr	r1, [pc, #200]	; (8003764 <DisplayDabStatus+0x214>)
 800369c:	4618      	mov	r0, r3
 800369e:	f006 f9e9 	bl	8009a74 <itoa>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2202      	movs	r2, #2
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b0:	2128      	movs	r1, #40	; 0x28
 80036b2:	f44f 7088 	mov.w	r0, #272	; 0x110
 80036b6:	f7fd fa33 	bl	8000b20 <ILI9341_Draw_String>

//	ILI9341_Draw_String(20, 75, WHITE, BLACK, "FIB Error:", 2);
//	ILI9341_Draw_String(100, 75, WHITE, BLACK, "          ", 2);
//	ILI9341_Draw_String(100, 75, WHITE, BLACK, itoa(fib_error_val, char_buffer, 10), 2);
	//póki co nie wiadomo jak włączyć pomiar pseudo BER
	ILI9341_Draw_String(20, 75, WHITE, BLACK, "FIC Er:", 2);
 80036ba:	2302      	movs	r3, #2
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <DisplayDabStatus+0x22c>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2300      	movs	r3, #0
 80036c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c8:	214b      	movs	r1, #75	; 0x4b
 80036ca:	2014      	movs	r0, #20
 80036cc:	f7fd fa28 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, "          ", 2);
 80036d0:	2302      	movs	r3, #2
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <DisplayDabStatus+0x230>)
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036de:	214b      	movs	r1, #75	; 0x4b
 80036e0:	2050      	movs	r0, #80	; 0x50
 80036e2:	f7fd fa1d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, itoa(sig_metrics_val.fic_err_cnt, char_buffer, 10), 2);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	220a      	movs	r2, #10
 80036ea:	491e      	ldr	r1, [pc, #120]	; (8003764 <DisplayDabStatus+0x214>)
 80036ec:	4618      	mov	r0, r3
 80036ee:	f006 f9c1 	bl	8009a74 <itoa>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2202      	movs	r2, #2
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003700:	214b      	movs	r1, #75	; 0x4b
 8003702:	2050      	movs	r0, #80	; 0x50
 8003704:	f7fd fa0c 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 75, WHITE, BLACK, "FIC Tot:", 2);
 8003708:	2302      	movs	r3, #2
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <DisplayDabStatus+0x234>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003716:	214b      	movs	r1, #75	; 0x4b
 8003718:	2096      	movs	r0, #150	; 0x96
 800371a:	f7fd fa01 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, "          ", 2);
 800371e:	2302      	movs	r3, #2
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <DisplayDabStatus+0x230>)
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372c:	214b      	movs	r1, #75	; 0x4b
 800372e:	20dc      	movs	r0, #220	; 0xdc
 8003730:	f7fd f9f6 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, itoa(sig_metrics_val.fic_bit_cnt, char_buffer, 10), 2);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	220a      	movs	r2, #10
 8003738:	490a      	ldr	r1, [pc, #40]	; (8003764 <DisplayDabStatus+0x214>)
 800373a:	4618      	mov	r0, r3
 800373c:	f006 f99a 	bl	8009a74 <itoa>
 8003740:	4603      	mov	r3, r0
 8003742:	2202      	movs	r2, #2
 8003744:	9201      	str	r2, [sp, #4]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800374e:	214b      	movs	r1, #75	; 0x4b
 8003750:	20dc      	movs	r0, #220	; 0xdc
 8003752:	f7fd f9e5 	bl	8000b20 <ILI9341_Draw_String>
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	bf00      	nop
 8003760:	0800a814 	.word	0x0800a814
 8003764:	20002548 	.word	0x20002548
 8003768:	0800a81c 	.word	0x0800a81c
 800376c:	0800a824 	.word	0x0800a824
 8003770:	0800a7f8 	.word	0x0800a7f8
 8003774:	0800a82c 	.word	0x0800a82c
 8003778:	0800a834 	.word	0x0800a834
 800377c:	0800a838 	.word	0x0800a838
 8003780:	0800a840 	.word	0x0800a840
 8003784:	0800a84c 	.word	0x0800a84c

08003788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <MX_DMA_Init+0x3c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <MX_DMA_Init+0x3c>)
 8003798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <MX_DMA_Init+0x3c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80037aa:	2200      	movs	r2, #0
 80037ac:	2100      	movs	r1, #0
 80037ae:	200f      	movs	r0, #15
 80037b0:	f001 f8e3 	bl	800497a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80037b4:	200f      	movs	r0, #15
 80037b6:	f001 f8fc 	bl	80049b2 <HAL_NVIC_EnableIRQ>

}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	4b65      	ldr	r3, [pc, #404]	; (8003978 <MX_GPIO_Init+0x1b0>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a64      	ldr	r2, [pc, #400]	; (8003978 <MX_GPIO_Init+0x1b0>)
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <MX_GPIO_Init+0x1b0>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <MX_GPIO_Init+0x1b0>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <MX_GPIO_Init+0x1b0>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a56      	ldr	r2, [pc, #344]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b54      	ldr	r3, [pc, #336]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <MX_GPIO_Init+0x1b0>)
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a48      	ldr	r2, [pc, #288]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003858:	f043 0310 	orr.w	r3, r3, #16
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a41      	ldr	r2, [pc, #260]	; (8003978 <MX_GPIO_Init+0x1b0>)
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <MX_GPIO_Init+0x1b0>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8003886:	2200      	movs	r2, #0
 8003888:	2130      	movs	r1, #48	; 0x30
 800388a:	483c      	ldr	r0, [pc, #240]	; (800397c <MX_GPIO_Init+0x1b4>)
 800388c:	f001 fd7a 	bl	8005384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8003890:	2200      	movs	r2, #0
 8003892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003896:	483a      	ldr	r0, [pc, #232]	; (8003980 <MX_GPIO_Init+0x1b8>)
 8003898:	f001 fd74 	bl	8005384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 800389c:	2200      	movs	r2, #0
 800389e:	f24f 7180 	movw	r1, #63360	; 0xf780
 80038a2:	4838      	ldr	r0, [pc, #224]	; (8003984 <MX_GPIO_Init+0x1bc>)
 80038a4:	f001 fd6e 	bl	8005384 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2128      	movs	r1, #40	; 0x28
 80038ac:	4836      	ldr	r0, [pc, #216]	; (8003988 <MX_GPIO_Init+0x1c0>)
 80038ae:	f001 fd69 	bl	8005384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80038b2:	2310      	movs	r3, #16
 80038b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4831      	ldr	r0, [pc, #196]	; (800398c <MX_GPIO_Init+0x1c4>)
 80038c6:	f001 fba9 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 80038ca:	2330      	movs	r3, #48	; 0x30
 80038cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ce:	2301      	movs	r3, #1
 80038d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	4619      	mov	r1, r3
 80038e0:	4826      	ldr	r0, [pc, #152]	; (800397c <MX_GPIO_Init+0x1b4>)
 80038e2:	f001 fb9b 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 80038e6:	2311      	movs	r3, #17
 80038e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ea:	2300      	movs	r3, #0
 80038ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	4619      	mov	r1, r3
 80038f8:	4823      	ldr	r0, [pc, #140]	; (8003988 <MX_GPIO_Init+0x1c0>)
 80038fa:	f001 fb8f 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80038fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	2301      	movs	r3, #1
 8003906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2300      	movs	r3, #0
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	4619      	mov	r1, r3
 8003916:	481a      	ldr	r0, [pc, #104]	; (8003980 <MX_GPIO_Init+0x1b8>)
 8003918:	f001 fb80 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 800391c:	f24f 7380 	movw	r3, #63360	; 0xf780
 8003920:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003922:	2301      	movs	r3, #1
 8003924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800392e:	f107 031c 	add.w	r3, r7, #28
 8003932:	4619      	mov	r1, r3
 8003934:	4813      	ldr	r0, [pc, #76]	; (8003984 <MX_GPIO_Init+0x1bc>)
 8003936:	f001 fb71 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800393a:	2340      	movs	r3, #64	; 0x40
 800393c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	4619      	mov	r1, r3
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <MX_GPIO_Init+0x1bc>)
 800394e:	f001 fb65 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8003952:	2328      	movs	r3, #40	; 0x28
 8003954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003956:	2301      	movs	r3, #1
 8003958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	2300      	movs	r3, #0
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003962:	f107 031c 	add.w	r3, r7, #28
 8003966:	4619      	mov	r1, r3
 8003968:	4807      	ldr	r0, [pc, #28]	; (8003988 <MX_GPIO_Init+0x1c0>)
 800396a:	f001 fb57 	bl	800501c <HAL_GPIO_Init>

}
 800396e:	bf00      	nop
 8003970:	3730      	adds	r7, #48	; 0x30
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40020800 	.word	0x40020800
 8003980:	40021000 	.word	0x40021000
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40020400 	.word	0x40020400
 800398c:	40020000 	.word	0x40020000

08003990 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <MX_I2C1_Init+0x50>)
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <MX_I2C1_Init+0x54>)
 8003998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_I2C1_Init+0x50>)
 800399c:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <MX_I2C1_Init+0x58>)
 800399e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039cc:	4804      	ldr	r0, [pc, #16]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039ce:	f001 fcf3 	bl	80053b8 <HAL_I2C_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039d8:	f000 fa20 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20002568 	.word	0x20002568
 80039e4:	40005400 	.word	0x40005400
 80039e8:	000186a0 	.word	0x000186a0

080039ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <MX_I2C3_Init+0x50>)
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <MX_I2C3_Init+0x54>)
 80039f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <MX_I2C3_Init+0x50>)
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <MX_I2C3_Init+0x58>)
 80039fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <MX_I2C3_Init+0x50>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a28:	4804      	ldr	r0, [pc, #16]	; (8003a3c <MX_I2C3_Init+0x50>)
 8003a2a:	f001 fcc5 	bl	80053b8 <HAL_I2C_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a34:	f000 f9f2 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200025bc 	.word	0x200025bc
 8003a40:	40005c00 	.word	0x40005c00
 8003a44:	000186a0 	.word	0x000186a0

08003a48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <HAL_I2C_MspInit+0x148>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d12c      	bne.n	8003ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	4b49      	ldr	r3, [pc, #292]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a48      	ldr	r2, [pc, #288]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b46      	ldr	r3, [pc, #280]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8003a86:	23c0      	movs	r3, #192	; 0xc0
 8003a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a8a:	2312      	movs	r3, #18
 8003a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a92:	2303      	movs	r3, #3
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a96:	2304      	movs	r3, #4
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9a:	f107 031c 	add.w	r3, r7, #28
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	483d      	ldr	r0, [pc, #244]	; (8003b98 <HAL_I2C_MspInit+0x150>)
 8003aa2:	f001 fabb 	bl	800501c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003ac2:	e060      	b.n	8003b86 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a34      	ldr	r2, [pc, #208]	; (8003b9c <HAL_I2C_MspInit+0x154>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d15b      	bne.n	8003b86 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6313      	str	r3, [r2, #48]	; 0x30
 8003afa:	4b26      	ldr	r3, [pc, #152]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8003b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b0c:	2312      	movs	r3, #18
 8003b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b14:	2303      	movs	r3, #3
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	4619      	mov	r1, r3
 8003b22:	481f      	ldr	r0, [pc, #124]	; (8003ba0 <HAL_I2C_MspInit+0x158>)
 8003b24:	f001 fa7a 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8003b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2e:	2312      	movs	r3, #18
 8003b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	4817      	ldr	r0, [pc, #92]	; (8003ba4 <HAL_I2C_MspInit+0x15c>)
 8003b46:	f001 fa69 	bl	800501c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_I2C_MspInit+0x14c>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2048      	movs	r0, #72	; 0x48
 8003b6c:	f000 ff05 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003b70:	2048      	movs	r0, #72	; 0x48
 8003b72:	f000 ff1e 	bl	80049b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	2049      	movs	r0, #73	; 0x49
 8003b7c:	f000 fefd 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003b80:	2049      	movs	r0, #73	; 0x49
 8003b82:	f000 ff16 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 8003b86:	bf00      	nop
 8003b88:	3730      	adds	r7, #48	; 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40005400 	.word	0x40005400
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	40005c00 	.word	0x40005c00
 8003ba0:	40020800 	.word	0x40020800
 8003ba4:	40020000 	.word	0x40020000

08003ba8 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
	led_number++;
 8003bac:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <Leds_Control_Blink+0x110>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <Leds_Control_Blink+0x110>)
 8003bb6:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <Leds_Control_Blink+0x110>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d102      	bne.n	8003bc6 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <Leds_Control_Blink+0x110>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <Leds_Control_Blink+0x110>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d86f      	bhi.n	8003cb0 <Leds_Control_Blink+0x108>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <Leds_Control_Blink+0x30>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003c7f 	.word	0x08003c7f
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8003be8:	2201      	movs	r2, #1
 8003bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bee:	4833      	ldr	r0, [pc, #204]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003bf0:	f001 fbc8 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bfa:	4830      	ldr	r0, [pc, #192]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003bfc:	f001 fbc2 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c06:	482d      	ldr	r0, [pc, #180]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c08:	f001 fbbc 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c12:	482a      	ldr	r0, [pc, #168]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c14:	f001 fbb6 	bl	8005384 <HAL_GPIO_WritePin>
		break;
 8003c18:	e04b      	b.n	8003cb2 <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c20:	4826      	ldr	r0, [pc, #152]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c22:	f001 fbaf 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8003c26:	2201      	movs	r2, #1
 8003c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c2c:	4823      	ldr	r0, [pc, #140]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c2e:	f001 fba9 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8003c32:	2200      	movs	r2, #0
 8003c34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c38:	4820      	ldr	r0, [pc, #128]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c3a:	f001 fba3 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c44:	481d      	ldr	r0, [pc, #116]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c46:	f001 fb9d 	bl	8005384 <HAL_GPIO_WritePin>
		break;
 8003c4a:	e032      	b.n	8003cb2 <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c52:	481a      	ldr	r0, [pc, #104]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c54:	f001 fb96 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c5e:	4817      	ldr	r0, [pc, #92]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c60:	f001 fb90 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8003c64:	2201      	movs	r2, #1
 8003c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c6a:	4814      	ldr	r0, [pc, #80]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c6c:	f001 fb8a 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c76:	4811      	ldr	r0, [pc, #68]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c78:	f001 fb84 	bl	8005384 <HAL_GPIO_WritePin>
		break;
 8003c7c:	e019      	b.n	8003cb2 <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c86:	f001 fb7d 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c90:	480a      	ldr	r0, [pc, #40]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c92:	f001 fb77 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8003c96:	2200      	movs	r2, #0
 8003c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c9c:	4807      	ldr	r0, [pc, #28]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003c9e:	f001 fb71 	bl	8005384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ca8:	4804      	ldr	r0, [pc, #16]	; (8003cbc <Leds_Control_Blink+0x114>)
 8003caa:	f001 fb6b 	bl	8005384 <HAL_GPIO_WritePin>
		break;
 8003cae:	e000      	b.n	8003cb2 <Leds_Control_Blink+0x10a>
	default:

		break;
 8003cb0:	bf00      	nop
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200000ac 	.word	0x200000ac
 8003cbc:	40020c00 	.word	0x40020c00

08003cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cc4:	f000 fce8 	bl	8004698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cc8:	f000 f83e 	bl	8003d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ccc:	f7ff fd7c 	bl	80037c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003cd0:	f7ff fd5a 	bl	8003788 <MX_DMA_Init>
  MX_I2C1_Init();
 8003cd4:	f7ff fe5c 	bl	8003990 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003cd8:	f7ff fe88 	bl	80039ec <MX_I2C3_Init>
  MX_SPI1_Init();
 8003cdc:	f000 f8a4 	bl	8003e28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003ce0:	f000 f8d8 	bl	8003e94 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003ce4:	f000 fa76 	bl	80041d4 <MX_TIM3_Init>
  MX_UART5_Init();
 8003ce8:	f000 fbb8 	bl	800445c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003cec:	f000 fbe0 	bl	80044b0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003cf0:	f000 faca 	bl	8004288 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003cf4:	f000 faec 	bl	80042d0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	480f      	ldr	r0, [pc, #60]	; (8003d38 <main+0x78>)
 8003cfc:	f7ff fae8 	bl	80032d0 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim10);
 8003d00:	480e      	ldr	r0, [pc, #56]	; (8003d3c <main+0x7c>)
 8003d02:	f004 fd27 	bl	8008754 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003d06:	480e      	ldr	r0, [pc, #56]	; (8003d40 <main+0x80>)
 8003d08:	f004 fd24 	bl	8008754 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8003d0c:	f7fc fbe6 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 8003d10:	f7ff fb04 	bl	800331c <DisplayMainScreen>

  Si468x_init();
 8003d14:	f7fd f9ce 	bl	80010b4 <Si468x_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8003d18:	2101      	movs	r1, #1
 8003d1a:	480a      	ldr	r0, [pc, #40]	; (8003d44 <main+0x84>)
 8003d1c:	f001 fb1a 	bl	8005354 <HAL_GPIO_ReadPin>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <main+0x6a>
	  {
		  Si468x_play_next_station();
 8003d26:	f7ff fa5f 	bl	80031e8 <Si468x_play_next_station>
	  }
	  HAL_Delay(200);
 8003d2a:	20c8      	movs	r0, #200	; 0xc8
 8003d2c:	f000 fd26 	bl	800477c <HAL_Delay>
	  Si468x_dab_digrad_status();
 8003d30:	f7fe f86c 	bl	8001e0c <Si468x_dab_digrad_status>
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8003d34:	e7f0      	b.n	8003d18 <main+0x58>
 8003d36:	bf00      	nop
 8003d38:	0800a858 	.word	0x0800a858
 8003d3c:	20002768 	.word	0x20002768
 8003d40:	200027b0 	.word	0x200027b0
 8003d44:	40020400 	.word	0x40020400

08003d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b094      	sub	sp, #80	; 0x50
 8003d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d4e:	f107 0320 	add.w	r3, r7, #32
 8003d52:	2230      	movs	r2, #48	; 0x30
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f005 fe8e 	bl	8009a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d5c:	f107 030c 	add.w	r3, r7, #12
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <SystemClock_Config+0xcc>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <SystemClock_Config+0xcc>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <SystemClock_Config+0xcc>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <SystemClock_Config+0xd0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <SystemClock_Config+0xd0>)
 8003d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <SystemClock_Config+0xd0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dae:	2302      	movs	r3, #2
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003db8:	2304      	movs	r3, #4
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003dbc:	23a0      	movs	r3, #160	; 0xa0
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dc8:	f107 0320 	add.w	r3, r7, #32
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 f913 	bl	8006ff8 <HAL_RCC_OscConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003dd8:	f000 f820 	bl	8003e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ddc:	230f      	movs	r3, #15
 8003dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003de0:	2302      	movs	r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003de8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003df4:	f107 030c 	add.w	r3, r7, #12
 8003df8:	2105      	movs	r1, #5
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 fb74 	bl	80074e8 <HAL_RCC_ClockConfig>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e06:	f000 f809 	bl	8003e1c <Error_Handler>
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3750      	adds	r7, #80	; 0x50
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40007000 	.word	0x40007000

08003e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e20:	b672      	cpsid	i
}
 8003e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e24:	e7fe      	b.n	8003e24 <Error_Handler+0x8>
	...

08003e28 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <MX_SPI1_Init+0x68>)
 8003e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e74:	220a      	movs	r2, #10
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e78:	4804      	ldr	r0, [pc, #16]	; (8003e8c <MX_SPI1_Init+0x64>)
 8003e7a:	f003 fd55 	bl	8007928 <HAL_SPI_Init>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e84:	f7ff ffca 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20002610 	.word	0x20002610
 8003e90:	40013000 	.word	0x40013000

08003e94 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <MX_SPI2_Init+0x68>)
 8003e9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ea4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ee0:	220a      	movs	r2, #10
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ee4:	4804      	ldr	r0, [pc, #16]	; (8003ef8 <MX_SPI2_Init+0x64>)
 8003ee6:	f003 fd1f 	bl	8007928 <HAL_SPI_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ef0:	f7ff ff94 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20002668 	.word	0x20002668
 8003efc:	40003800 	.word	0x40003800

08003f00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a4d      	ldr	r2, [pc, #308]	; (8004054 <HAL_SPI_MspInit+0x154>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12c      	bne.n	8003f7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4a4b      	ldr	r2, [pc, #300]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f30:	6453      	str	r3, [r2, #68]	; 0x44
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	4b45      	ldr	r3, [pc, #276]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a44      	ldr	r2, [pc, #272]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b42      	ldr	r3, [pc, #264]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8003f5a:	23e0      	movs	r3, #224	; 0xe0
 8003f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f66:	2303      	movs	r3, #3
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f6a:	2305      	movs	r3, #5
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	f107 031c 	add.w	r3, r7, #28
 8003f72:	4619      	mov	r1, r3
 8003f74:	4839      	ldr	r0, [pc, #228]	; (800405c <HAL_SPI_MspInit+0x15c>)
 8003f76:	f001 f851 	bl	800501c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003f7a:	e066      	b.n	800404a <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a37      	ldr	r2, [pc, #220]	; (8004060 <HAL_SPI_MspInit+0x160>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d161      	bne.n	800404a <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	4b33      	ldr	r3, [pc, #204]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a32      	ldr	r2, [pc, #200]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	4a2b      	ldr	r2, [pc, #172]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <HAL_SPI_MspInit+0x158>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8003fbe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fd0:	2305      	movs	r3, #5
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4822      	ldr	r0, [pc, #136]	; (8004064 <HAL_SPI_MspInit+0x164>)
 8003fdc:	f001 f81e 	bl	800501c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8003fe2:	4a22      	ldr	r2, [pc, #136]	; (800406c <HAL_SPI_MspInit+0x16c>)
 8003fe4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8003ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ffe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8004002:	2200      	movs	r2, #0
 8004004:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_SPI_MspInit+0x168>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_SPI_MspInit+0x168>)
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800401e:	4812      	ldr	r0, [pc, #72]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8004020:	f000 fce2 	bl	80049e8 <HAL_DMA_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 800402a:	f7ff fef7 	bl	8003e1c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8004032:	649a      	str	r2, [r3, #72]	; 0x48
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <HAL_SPI_MspInit+0x168>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	2024      	movs	r0, #36	; 0x24
 8004040:	f000 fc9b 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004044:	2024      	movs	r0, #36	; 0x24
 8004046:	f000 fcb4 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3730      	adds	r7, #48	; 0x30
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40013000 	.word	0x40013000
 8004058:	40023800 	.word	0x40023800
 800405c:	40020000 	.word	0x40020000
 8004060:	40003800 	.word	0x40003800
 8004064:	40020400 	.word	0x40020400
 8004068:	200026c0 	.word	0x200026c0
 800406c:	40026070 	.word	0x40026070

08004070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_MspInit+0x4c>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <HAL_MspInit+0x4c>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004084:	6453      	str	r3, [r2, #68]	; 0x44
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_MspInit+0x4c>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_MspInit+0x4c>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_MspInit+0x4c>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_MspInit+0x4c>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040c4:	e7fe      	b.n	80040c4 <NMI_Handler+0x4>

080040c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ca:	e7fe      	b.n	80040ca <HardFault_Handler+0x4>

080040cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <MemManage_Handler+0x4>

080040d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d6:	e7fe      	b.n	80040d6 <BusFault_Handler+0x4>

080040d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <UsageFault_Handler+0x4>

080040de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800410c:	f000 fb16 	bl	800473c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004110:	bf00      	nop
 8004112:	bd80      	pop	{r7, pc}

08004114 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <DMA1_Stream4_IRQHandler+0x10>)
 800411a:	f000 fd35 	bl	8004b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200026c0 	.word	0x200026c0

08004128 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800412c:	4802      	ldr	r0, [pc, #8]	; (8004138 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800412e:	f004 fbd0 	bl	80088d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20002768 	.word	0x20002768

0800413c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004140:	4802      	ldr	r0, [pc, #8]	; (800414c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004142:	f004 fbc6 	bl	80088d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200027b0 	.word	0x200027b0

08004150 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <SPI2_IRQHandler+0x10>)
 8004156:	f004 f85f 	bl	8008218 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20002668 	.word	0x20002668

08004164 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <I2C3_EV_IRQHandler+0x10>)
 800416a:	f001 fa69 	bl	8005640 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200025bc 	.word	0x200025bc

08004178 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <I2C3_ER_IRQHandler+0x10>)
 800417e:	f001 fbd0 	bl	8005922 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200025bc 	.word	0x200025bc

0800418c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 800419e:	f7ff fd03 	bl	8003ba8 <Leds_Control_Blink>
//		Si468x_dab_reset_interrupts();
//		Si468x_dab_digrad_status();

	}
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40014800 	.word	0x40014800

080041b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <SystemInit+0x20>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <SystemInit+0x20>)
 80041bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041da:	f107 0320 	add.w	r3, r7, #32
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	615a      	str	r2, [r3, #20]
 80041f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <MX_TIM3_Init+0xac>)
 80041f8:	4a22      	ldr	r2, [pc, #136]	; (8004284 <MX_TIM3_Init+0xb0>)
 80041fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041fc:	4b20      	ldr	r3, [pc, #128]	; (8004280 <MX_TIM3_Init+0xac>)
 80041fe:	2200      	movs	r2, #0
 8004200:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <MX_TIM3_Init+0xac>)
 8004204:	2200      	movs	r2, #0
 8004206:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <MX_TIM3_Init+0xac>)
 800420a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800420e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <MX_TIM3_Init+0xac>)
 8004212:	2200      	movs	r2, #0
 8004214:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <MX_TIM3_Init+0xac>)
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800421c:	4818      	ldr	r0, [pc, #96]	; (8004280 <MX_TIM3_Init+0xac>)
 800421e:	f004 fb09 	bl	8008834 <HAL_TIM_PWM_Init>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004228:	f7ff fdf8 	bl	8003e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004234:	f107 0320 	add.w	r3, r7, #32
 8004238:	4619      	mov	r1, r3
 800423a:	4811      	ldr	r0, [pc, #68]	; (8004280 <MX_TIM3_Init+0xac>)
 800423c:	f004 ff8c 	bl	8009158 <HAL_TIMEx_MasterConfigSynchronization>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004246:	f7ff fde9 	bl	8003e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800424a:	2360      	movs	r3, #96	; 0x60
 800424c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	2208      	movs	r2, #8
 800425e:	4619      	mov	r1, r3
 8004260:	4807      	ldr	r0, [pc, #28]	; (8004280 <MX_TIM3_Init+0xac>)
 8004262:	f004 fc3f 	bl	8008ae4 <HAL_TIM_PWM_ConfigChannel>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800426c:	f7ff fdd6 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004270:	4803      	ldr	r0, [pc, #12]	; (8004280 <MX_TIM3_Init+0xac>)
 8004272:	f000 f8b9 	bl	80043e8 <HAL_TIM_MspPostInit>

}
 8004276:	bf00      	nop
 8004278:	3728      	adds	r7, #40	; 0x28
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20002720 	.word	0x20002720
 8004284:	40000400 	.word	0x40000400

08004288 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <MX_TIM10_Init+0x40>)
 800428e:	4a0f      	ldr	r2, [pc, #60]	; (80042cc <MX_TIM10_Init+0x44>)
 8004290:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <MX_TIM10_Init+0x40>)
 8004294:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004298:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <MX_TIM10_Init+0x40>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <MX_TIM10_Init+0x40>)
 80042a2:	f240 2257 	movw	r2, #599	; 0x257
 80042a6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <MX_TIM10_Init+0x40>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <MX_TIM10_Init+0x40>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80042b4:	4804      	ldr	r0, [pc, #16]	; (80042c8 <MX_TIM10_Init+0x40>)
 80042b6:	f004 f9fd 	bl	80086b4 <HAL_TIM_Base_Init>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80042c0:	f7ff fdac 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20002768 	.word	0x20002768
 80042cc:	40014400 	.word	0x40014400

080042d0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <MX_TIM11_Init+0x40>)
 80042d6:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <MX_TIM11_Init+0x44>)
 80042d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <MX_TIM11_Init+0x40>)
 80042dc:	f643 2297 	movw	r2, #14999	; 0x3a97
 80042e0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <MX_TIM11_Init+0x40>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <MX_TIM11_Init+0x40>)
 80042ea:	f240 5213 	movw	r2, #1299	; 0x513
 80042ee:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <MX_TIM11_Init+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <MX_TIM11_Init+0x40>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <MX_TIM11_Init+0x40>)
 80042fe:	f004 f9d9 	bl	80086b4 <HAL_TIM_Base_Init>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004308:	f7ff fd88 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200027b0 	.word	0x200027b0
 8004314:	40014800 	.word	0x40014800

08004318 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <HAL_TIM_PWM_MspInit+0x3c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10d      	bne.n	8004346 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_TIM_PWM_MspInit+0x40>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_TIM_PWM_MspInit+0x40>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_TIM_PWM_MspInit+0x40>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40000400 	.word	0x40000400
 8004358:	40023800 	.word	0x40023800

0800435c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIM_Base_MspInit+0x80>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d116      	bne.n	800439c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_TIM_Base_MspInit+0x84>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_TIM_Base_MspInit+0x84>)
 8004378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437c:	6453      	str	r3, [r2, #68]	; 0x44
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_TIM_Base_MspInit+0x84>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	2019      	movs	r0, #25
 8004390:	f000 faf3 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004394:	2019      	movs	r0, #25
 8004396:	f000 fb0c 	bl	80049b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800439a:	e01a      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <HAL_TIM_Base_MspInit+0x88>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d115      	bne.n	80043d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_TIM_Base_MspInit+0x84>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <HAL_TIM_Base_MspInit+0x84>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_TIM_Base_MspInit+0x84>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80043c2:	2200      	movs	r2, #0
 80043c4:	2100      	movs	r1, #0
 80043c6:	201a      	movs	r0, #26
 80043c8:	f000 fad7 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80043cc:	201a      	movs	r0, #26
 80043ce:	f000 faf0 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40014800 	.word	0x40014800

080043e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a12      	ldr	r2, [pc, #72]	; (8004450 <HAL_TIM_MspPostInit+0x68>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d11e      	bne.n	8004448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_TIM_MspPostInit+0x6c>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_TIM_MspPostInit+0x6c>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	6313      	str	r3, [r2, #48]	; 0x30
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_TIM_MspPostInit+0x6c>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8004426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800442a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004438:	2302      	movs	r3, #2
 800443a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	4619      	mov	r1, r3
 8004442:	4805      	ldr	r0, [pc, #20]	; (8004458 <HAL_TIM_MspPostInit+0x70>)
 8004444:	f000 fdea 	bl	800501c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004448:	bf00      	nop
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40000400 	.word	0x40000400
 8004454:	40023800 	.word	0x40023800
 8004458:	40020800 	.word	0x40020800

0800445c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004462:	4a12      	ldr	r2, [pc, #72]	; (80044ac <MX_UART5_Init+0x50>)
 8004464:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800446c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <MX_UART5_Init+0x4c>)
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004482:	220c      	movs	r2, #12
 8004484:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_UART5_Init+0x4c>)
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004492:	4805      	ldr	r0, [pc, #20]	; (80044a8 <MX_UART5_Init+0x4c>)
 8004494:	f004 fef0 	bl	8009278 <HAL_UART_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800449e:	f7ff fcbd 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200027f8 	.word	0x200027f8
 80044ac:	40005000 	.word	0x40005000

080044b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044b6:	4a12      	ldr	r2, [pc, #72]	; (8004500 <MX_USART3_UART_Init+0x50>)
 80044b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044bc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80044c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044d6:	220c      	movs	r2, #12
 80044d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044e6:	4805      	ldr	r0, [pc, #20]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044e8:	f004 fec6 	bl	8009278 <HAL_UART_Init>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80044f2:	f7ff fc93 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2000283c 	.word	0x2000283c
 8004500:	40004800 	.word	0x40004800

08004504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	; 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 031c 	add.w	r3, r7, #28
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a42      	ldr	r2, [pc, #264]	; (800462c <HAL_UART_MspInit+0x128>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d14b      	bne.n	80045be <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_UART_MspInit+0x12c>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a40      	ldr	r2, [pc, #256]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a39      	ldr	r2, [pc, #228]	; (8004630 <HAL_UART_MspInit+0x12c>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	4b33      	ldr	r3, [pc, #204]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_UART_MspInit+0x12c>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800457a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004588:	2303      	movs	r3, #3
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800458c:	2308      	movs	r3, #8
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	4619      	mov	r1, r3
 8004596:	4827      	ldr	r0, [pc, #156]	; (8004634 <HAL_UART_MspInit+0x130>)
 8004598:	f000 fd40 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800459c:	2304      	movs	r3, #4
 800459e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80045ac:	2308      	movs	r3, #8
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	4619      	mov	r1, r3
 80045b6:	4820      	ldr	r0, [pc, #128]	; (8004638 <HAL_UART_MspInit+0x134>)
 80045b8:	f000 fd30 	bl	800501c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80045bc:	e031      	b.n	8004622 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1e      	ldr	r2, [pc, #120]	; (800463c <HAL_UART_MspInit+0x138>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d12c      	bne.n	8004622 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	4b18      	ldr	r3, [pc, #96]	; (8004630 <HAL_UART_MspInit+0x12c>)
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <HAL_UART_MspInit+0x12c>)
 80045d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d6:	6413      	str	r3, [r2, #64]	; 0x40
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_UART_MspInit+0x12c>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_UART_MspInit+0x12c>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	4a10      	ldr	r2, [pc, #64]	; (8004630 <HAL_UART_MspInit+0x12c>)
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	6313      	str	r3, [r2, #48]	; 0x30
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_UART_MspInit+0x12c>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8004600:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460e:	2303      	movs	r3, #3
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004612:	2307      	movs	r3, #7
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	f107 031c 	add.w	r3, r7, #28
 800461a:	4619      	mov	r1, r3
 800461c:	4808      	ldr	r0, [pc, #32]	; (8004640 <HAL_UART_MspInit+0x13c>)
 800461e:	f000 fcfd 	bl	800501c <HAL_GPIO_Init>
}
 8004622:	bf00      	nop
 8004624:	3730      	adds	r7, #48	; 0x30
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40005000 	.word	0x40005000
 8004630:	40023800 	.word	0x40023800
 8004634:	40020800 	.word	0x40020800
 8004638:	40020c00 	.word	0x40020c00
 800463c:	40004800 	.word	0x40004800
 8004640:	40020400 	.word	0x40020400

08004644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800467c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004648:	480d      	ldr	r0, [pc, #52]	; (8004680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800464a:	490e      	ldr	r1, [pc, #56]	; (8004684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800464c:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004650:	e002      	b.n	8004658 <LoopCopyDataInit>

08004652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004656:	3304      	adds	r3, #4

08004658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800465a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800465c:	d3f9      	bcc.n	8004652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800465e:	4a0b      	ldr	r2, [pc, #44]	; (800468c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004660:	4c0b      	ldr	r4, [pc, #44]	; (8004690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004664:	e001      	b.n	800466a <LoopFillZerobss>

08004666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004668:	3204      	adds	r2, #4

0800466a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800466a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800466c:	d3fb      	bcc.n	8004666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800466e:	f7ff fd9f 	bl	80041b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004672:	f005 f9c3 	bl	80099fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004676:	f7ff fb23 	bl	8003cc0 <main>
  bx  lr    
 800467a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800467c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004684:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004688:	0800c82c 	.word	0x0800c82c
  ldr r2, =_sbss
 800468c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8004690:	20002884 	.word	0x20002884

08004694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004694:	e7fe      	b.n	8004694 <ADC_IRQHandler>
	...

08004698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_Init+0x40>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <HAL_Init+0x40>)
 80046a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_Init+0x40>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <HAL_Init+0x40>)
 80046ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_Init+0x40>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <HAL_Init+0x40>)
 80046ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046c0:	2003      	movs	r0, #3
 80046c2:	f000 f94f 	bl	8004964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046c6:	200f      	movs	r0, #15
 80046c8:	f000 f808 	bl	80046dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046cc:	f7ff fcd0 	bl	8004070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00

080046dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_InitTick+0x54>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_InitTick+0x58>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f967 	bl	80049ce <HAL_SYSTICK_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e00e      	b.n	8004728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b0f      	cmp	r3, #15
 800470e:	d80a      	bhi.n	8004726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004710:	2200      	movs	r2, #0
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f000 f92f 	bl	800497a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800471c:	4a06      	ldr	r2, [pc, #24]	; (8004738 <HAL_InitTick+0x5c>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200000b0 	.word	0x200000b0
 8004734:	200000b8 	.word	0x200000b8
 8004738:	200000b4 	.word	0x200000b4

0800473c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_IncTick+0x20>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_IncTick+0x24>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4413      	add	r3, r2
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <HAL_IncTick+0x24>)
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	200000b8 	.word	0x200000b8
 8004760:	20002880 	.word	0x20002880

08004764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return uwTick;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <HAL_GetTick+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20002880 	.word	0x20002880

0800477c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004784:	f7ff ffee 	bl	8004764 <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d005      	beq.n	80047a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_Delay+0x44>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047a2:	bf00      	nop
 80047a4:	f7ff ffde 	bl	8004764 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d8f7      	bhi.n	80047a4 <HAL_Delay+0x28>
  {
  }
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	200000b8 	.word	0x200000b8

080047c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <__NVIC_SetPriorityGrouping+0x44>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e0:	4013      	ands	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047f6:	4a04      	ldr	r2, [pc, #16]	; (8004808 <__NVIC_SetPriorityGrouping+0x44>)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	60d3      	str	r3, [r2, #12]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <__NVIC_GetPriorityGrouping+0x18>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f003 0307 	and.w	r3, r3, #7
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db0b      	blt.n	8004852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	4907      	ldr	r1, [pc, #28]	; (8004860 <__NVIC_EnableIRQ+0x38>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2001      	movs	r0, #1
 800484a:	fa00 f202 	lsl.w	r2, r0, r2
 800484e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e100 	.word	0xe000e100

08004864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	db0a      	blt.n	800488e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	490c      	ldr	r1, [pc, #48]	; (80048b0 <__NVIC_SetPriority+0x4c>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	440b      	add	r3, r1
 8004888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800488c:	e00a      	b.n	80048a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4908      	ldr	r1, [pc, #32]	; (80048b4 <__NVIC_SetPriority+0x50>)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	3b04      	subs	r3, #4
 800489c:	0112      	lsls	r2, r2, #4
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	440b      	add	r3, r1
 80048a2:	761a      	strb	r2, [r3, #24]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000e100 	.word	0xe000e100
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f1c3 0307 	rsb	r3, r3, #7
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	bf28      	it	cs
 80048d6:	2304      	movcs	r3, #4
 80048d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3304      	adds	r3, #4
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d902      	bls.n	80048e8 <NVIC_EncodePriority+0x30>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3b03      	subs	r3, #3
 80048e6:	e000      	b.n	80048ea <NVIC_EncodePriority+0x32>
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ec:	f04f 32ff 	mov.w	r2, #4294967295
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	401a      	ands	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004900:	f04f 31ff 	mov.w	r1, #4294967295
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	43d9      	mvns	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	4313      	orrs	r3, r2
         );
}
 8004912:	4618      	mov	r0, r3
 8004914:	3724      	adds	r7, #36	; 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004930:	d301      	bcc.n	8004936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004932:	2301      	movs	r3, #1
 8004934:	e00f      	b.n	8004956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <SysTick_Config+0x40>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800493e:	210f      	movs	r1, #15
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	f7ff ff8e 	bl	8004864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <SysTick_Config+0x40>)
 800494a:	2200      	movs	r2, #0
 800494c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <SysTick_Config+0x40>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010

08004964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff29 	bl	80047c4 <__NVIC_SetPriorityGrouping>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800498c:	f7ff ff3e 	bl	800480c <__NVIC_GetPriorityGrouping>
 8004990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f7ff ff8e 	bl	80048b8 <NVIC_EncodePriority>
 800499c:	4602      	mov	r2, r0
 800499e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff5d 	bl	8004864 <__NVIC_SetPriority>
}
 80049aa:	bf00      	nop
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff31 	bl	8004828 <__NVIC_EnableIRQ>
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ffa2 	bl	8004920 <SysTick_Config>
 80049dc:	4603      	mov	r3, r0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff feb6 	bl	8004764 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e099      	b.n	8004b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a24:	e00f      	b.n	8004a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a26:	f7ff fe9d 	bl	8004764 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d908      	bls.n	8004a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e078      	b.n	8004b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e8      	bne.n	8004a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <HAL_DMA_Init+0x158>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d107      	bne.n	8004ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d117      	bne.n	8004b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa19 	bl	8004f24 <DMA_CheckFifoParam>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2240      	movs	r2, #64	; 0x40
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b06:	2301      	movs	r3, #1
 8004b08:	e016      	b.n	8004b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9d0 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	223f      	movs	r2, #63	; 0x3f
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	f010803f 	.word	0xf010803f

08004b44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d004      	beq.n	8004b62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e00c      	b.n	8004b7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2205      	movs	r2, #5
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b94:	4b8e      	ldr	r3, [pc, #568]	; (8004dd0 <HAL_DMA_IRQHandler+0x248>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a8e      	ldr	r2, [pc, #568]	; (8004dd4 <HAL_DMA_IRQHandler+0x24c>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01a      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d013      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2208      	movs	r2, #8
 8004be2:	409a      	lsls	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	2201      	movs	r2, #1
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f043 0202 	orr.w	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	2204      	movs	r2, #4
 8004c30:	409a      	lsls	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d012      	beq.n	8004c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f043 0204 	orr.w	r2, r3, #4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	2210      	movs	r2, #16
 8004c66:	409a      	lsls	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d043      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03c      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c82:	2210      	movs	r2, #16
 8004c84:	409a      	lsls	r2, r3
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d018      	beq.n	8004cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d024      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
 8004cb6:	e01f      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
 8004cc8:	e016      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0208 	bic.w	r2, r2, #8
 8004ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 808f 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8087 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	2220      	movs	r2, #32
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d136      	bne.n	8004da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0216 	bic.w	r2, r2, #22
 8004d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x1da>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0208 	bic.w	r2, r2, #8
 8004d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	223f      	movs	r2, #63	; 0x3f
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d07e      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
        }
        return;
 8004d9e:	e079      	b.n	8004e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01d      	beq.n	8004dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d031      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	e02c      	b.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
 8004dce:	bf00      	nop
 8004dd0:	200000b0 	.word	0x200000b0
 8004dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
 8004de8:	e01e      	b.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10f      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0210 	bic.w	r2, r2, #16
 8004e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d032      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d022      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2205      	movs	r2, #5
 8004e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d307      	bcc.n	8004e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f2      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x2cc>
 8004e6e:	e000      	b.n	8004e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
 8004e92:	e000      	b.n	8004e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e94:	bf00      	nop
    }
  }
}
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eaa:	b2db      	uxtb	r3, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3b10      	subs	r3, #16
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <DMA_CalcBaseAndBitshift+0x64>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <DMA_CalcBaseAndBitshift+0x68>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d909      	bls.n	8004efa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	1d1a      	adds	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ef8:	e007      	b.n	8004f0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	aaaaaaab 	.word	0xaaaaaaab
 8004f20:	0800c7ec 	.word	0x0800c7ec

08004f24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11f      	bne.n	8004f7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d856      	bhi.n	8004ff2 <DMA_CheckFifoParam+0xce>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <DMA_CheckFifoParam+0x28>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6f 	.word	0x08004f6f
 8004f54:	08004f5d 	.word	0x08004f5d
 8004f58:	08004ff3 	.word	0x08004ff3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d046      	beq.n	8004ff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6c:	e043      	b.n	8004ff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f76:	d140      	bne.n	8004ffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7c:	e03d      	b.n	8004ffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	d121      	bne.n	8004fcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d837      	bhi.n	8004ffe <DMA_CheckFifoParam+0xda>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <DMA_CheckFifoParam+0x70>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fab 	.word	0x08004fab
 8004f9c:	08004fa5 	.word	0x08004fa5
 8004fa0:	08004fbd 	.word	0x08004fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	e030      	b.n	800500c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fba:	e022      	b.n	8005002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc4:	d11f      	bne.n	8005006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fca:	e01c      	b.n	8005006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d903      	bls.n	8004fda <DMA_CheckFifoParam+0xb6>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d003      	beq.n	8004fe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fd8:	e018      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fde:	e015      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e00b      	b.n	800500a <DMA_CheckFifoParam+0xe6>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e00a      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e008      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e006      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;   
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 800500a:	bf00      	nop
    }
  } 
  
  return status; 
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e16b      	b.n	8005310 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	f040 815a 	bne.w	800530a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d005      	beq.n	800506e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800506a:	2b02      	cmp	r3, #2
 800506c:	d130      	bne.n	80050d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	2203      	movs	r2, #3
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050a4:	2201      	movs	r2, #1
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 0201 	and.w	r2, r3, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d017      	beq.n	800510c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	2203      	movs	r2, #3
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d123      	bne.n	8005160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	08da      	lsrs	r2, r3, #3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3208      	adds	r2, #8
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	220f      	movs	r2, #15
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	08da      	lsrs	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3208      	adds	r2, #8
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2203      	movs	r2, #3
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0203 	and.w	r2, r3, #3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80b4 	beq.w	800530a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b60      	ldr	r3, [pc, #384]	; (8005328 <HAL_GPIO_Init+0x30c>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	4a5f      	ldr	r2, [pc, #380]	; (8005328 <HAL_GPIO_Init+0x30c>)
 80051ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051b0:	6453      	str	r3, [r2, #68]	; 0x44
 80051b2:	4b5d      	ldr	r3, [pc, #372]	; (8005328 <HAL_GPIO_Init+0x30c>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051be:	4a5b      	ldr	r2, [pc, #364]	; (800532c <HAL_GPIO_Init+0x310>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a52      	ldr	r2, [pc, #328]	; (8005330 <HAL_GPIO_Init+0x314>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02b      	beq.n	8005242 <HAL_GPIO_Init+0x226>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a51      	ldr	r2, [pc, #324]	; (8005334 <HAL_GPIO_Init+0x318>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d025      	beq.n	800523e <HAL_GPIO_Init+0x222>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a50      	ldr	r2, [pc, #320]	; (8005338 <HAL_GPIO_Init+0x31c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01f      	beq.n	800523a <HAL_GPIO_Init+0x21e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4f      	ldr	r2, [pc, #316]	; (800533c <HAL_GPIO_Init+0x320>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d019      	beq.n	8005236 <HAL_GPIO_Init+0x21a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a4e      	ldr	r2, [pc, #312]	; (8005340 <HAL_GPIO_Init+0x324>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_GPIO_Init+0x216>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4d      	ldr	r2, [pc, #308]	; (8005344 <HAL_GPIO_Init+0x328>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_GPIO_Init+0x212>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a4c      	ldr	r2, [pc, #304]	; (8005348 <HAL_GPIO_Init+0x32c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <HAL_GPIO_Init+0x20e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a4b      	ldr	r2, [pc, #300]	; (800534c <HAL_GPIO_Init+0x330>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_GPIO_Init+0x20a>
 8005222:	2307      	movs	r3, #7
 8005224:	e00e      	b.n	8005244 <HAL_GPIO_Init+0x228>
 8005226:	2308      	movs	r3, #8
 8005228:	e00c      	b.n	8005244 <HAL_GPIO_Init+0x228>
 800522a:	2306      	movs	r3, #6
 800522c:	e00a      	b.n	8005244 <HAL_GPIO_Init+0x228>
 800522e:	2305      	movs	r3, #5
 8005230:	e008      	b.n	8005244 <HAL_GPIO_Init+0x228>
 8005232:	2304      	movs	r3, #4
 8005234:	e006      	b.n	8005244 <HAL_GPIO_Init+0x228>
 8005236:	2303      	movs	r3, #3
 8005238:	e004      	b.n	8005244 <HAL_GPIO_Init+0x228>
 800523a:	2302      	movs	r3, #2
 800523c:	e002      	b.n	8005244 <HAL_GPIO_Init+0x228>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_GPIO_Init+0x228>
 8005242:	2300      	movs	r3, #0
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	f002 0203 	and.w	r2, r2, #3
 800524a:	0092      	lsls	r2, r2, #2
 800524c:	4093      	lsls	r3, r2
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005254:	4935      	ldr	r1, [pc, #212]	; (800532c <HAL_GPIO_Init+0x310>)
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3302      	adds	r3, #2
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_GPIO_Init+0x334>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005286:	4a32      	ldr	r2, [pc, #200]	; (8005350 <HAL_GPIO_Init+0x334>)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800528c:	4b30      	ldr	r3, [pc, #192]	; (8005350 <HAL_GPIO_Init+0x334>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <HAL_GPIO_Init+0x334>)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052b6:	4b26      	ldr	r3, [pc, #152]	; (8005350 <HAL_GPIO_Init+0x334>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052da:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <HAL_GPIO_Init+0x334>)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <HAL_GPIO_Init+0x334>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005304:	4a12      	ldr	r2, [pc, #72]	; (8005350 <HAL_GPIO_Init+0x334>)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	f67f ae90 	bls.w	8005038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800
 800532c:	40013800 	.word	0x40013800
 8005330:	40020000 	.word	0x40020000
 8005334:	40020400 	.word	0x40020400
 8005338:	40020800 	.word	0x40020800
 800533c:	40020c00 	.word	0x40020c00
 8005340:	40021000 	.word	0x40021000
 8005344:	40021400 	.word	0x40021400
 8005348:	40021800 	.word	0x40021800
 800534c:	40021c00 	.word	0x40021c00
 8005350:	40013c00 	.word	0x40013c00

08005354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	887b      	ldrh	r3, [r7, #2]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
 8005370:	e001      	b.n	8005376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	807b      	strh	r3, [r7, #2]
 8005390:	4613      	mov	r3, r2
 8005392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005394:	787b      	ldrb	r3, [r7, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053a0:	e003      	b.n	80053aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053a2:	887b      	ldrh	r3, [r7, #2]
 80053a4:	041a      	lsls	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	619a      	str	r2, [r3, #24]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e12b      	b.n	8005622 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fe fb32 	bl	8003a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2224      	movs	r2, #36	; 0x24
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800540a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800541a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800541c:	f002 fa5c 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 8005420:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4a81      	ldr	r2, [pc, #516]	; (800562c <HAL_I2C_Init+0x274>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d807      	bhi.n	800543c <HAL_I2C_Init+0x84>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a80      	ldr	r2, [pc, #512]	; (8005630 <HAL_I2C_Init+0x278>)
 8005430:	4293      	cmp	r3, r2
 8005432:	bf94      	ite	ls
 8005434:	2301      	movls	r3, #1
 8005436:	2300      	movhi	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e006      	b.n	800544a <HAL_I2C_Init+0x92>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a7d      	ldr	r2, [pc, #500]	; (8005634 <HAL_I2C_Init+0x27c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	bf94      	ite	ls
 8005444:	2301      	movls	r3, #1
 8005446:	2300      	movhi	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e0e7      	b.n	8005622 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a78      	ldr	r2, [pc, #480]	; (8005638 <HAL_I2C_Init+0x280>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	0c9b      	lsrs	r3, r3, #18
 800545c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a6a      	ldr	r2, [pc, #424]	; (800562c <HAL_I2C_Init+0x274>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d802      	bhi.n	800548c <HAL_I2C_Init+0xd4>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	3301      	adds	r3, #1
 800548a:	e009      	b.n	80054a0 <HAL_I2C_Init+0xe8>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	4a69      	ldr	r2, [pc, #420]	; (800563c <HAL_I2C_Init+0x284>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	099b      	lsrs	r3, r3, #6
 800549e:	3301      	adds	r3, #1
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	495c      	ldr	r1, [pc, #368]	; (800562c <HAL_I2C_Init+0x274>)
 80054bc:	428b      	cmp	r3, r1
 80054be:	d819      	bhi.n	80054f4 <HAL_I2C_Init+0x13c>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1e59      	subs	r1, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054d4:	400b      	ands	r3, r1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_I2C_Init+0x138>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1e59      	subs	r1, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e8:	3301      	adds	r3, #1
 80054ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ee:	e051      	b.n	8005594 <HAL_I2C_Init+0x1dc>
 80054f0:	2304      	movs	r3, #4
 80054f2:	e04f      	b.n	8005594 <HAL_I2C_Init+0x1dc>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d111      	bne.n	8005520 <HAL_I2C_Init+0x168>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1e58      	subs	r0, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6859      	ldr	r1, [r3, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	440b      	add	r3, r1
 800550a:	fbb0 f3f3 	udiv	r3, r0, r3
 800550e:	3301      	adds	r3, #1
 8005510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e012      	b.n	8005546 <HAL_I2C_Init+0x18e>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1e58      	subs	r0, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	0099      	lsls	r1, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	fbb0 f3f3 	udiv	r3, r0, r3
 8005536:	3301      	adds	r3, #1
 8005538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_I2C_Init+0x196>
 800554a:	2301      	movs	r3, #1
 800554c:	e022      	b.n	8005594 <HAL_I2C_Init+0x1dc>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10e      	bne.n	8005574 <HAL_I2C_Init+0x1bc>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1e58      	subs	r0, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	440b      	add	r3, r1
 8005564:	fbb0 f3f3 	udiv	r3, r0, r3
 8005568:	3301      	adds	r3, #1
 800556a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	e00f      	b.n	8005594 <HAL_I2C_Init+0x1dc>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1e58      	subs	r0, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	0099      	lsls	r1, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	fbb0 f3f3 	udiv	r3, r0, r3
 800558a:	3301      	adds	r3, #1
 800558c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	6809      	ldr	r1, [r1, #0]
 8005598:	4313      	orrs	r3, r2
 800559a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6911      	ldr	r1, [r2, #16]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	4311      	orrs	r1, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	000186a0 	.word	0x000186a0
 8005630:	001e847f 	.word	0x001e847f
 8005634:	003d08ff 	.word	0x003d08ff
 8005638:	431bde83 	.word	0x431bde83
 800563c:	10624dd3 	.word	0x10624dd3

08005640 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005660:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2b10      	cmp	r3, #16
 800566e:	d003      	beq.n	8005678 <HAL_I2C_EV_IRQHandler+0x38>
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	f040 80c1 	bne.w	80057fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <HAL_I2C_EV_IRQHandler+0x6e>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005698:	d003      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x62>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056a0:	d101      	bne.n	80056a6 <HAL_I2C_EV_IRQHandler+0x66>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_I2C_EV_IRQHandler+0x68>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f000 8132 	beq.w	8005912 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <HAL_I2C_EV_IRQHandler+0x92>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	0a5b      	lsrs	r3, r3, #9
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 fc7b 	bl	8006fc0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fd83 	bl	80061d6 <I2C_Master_SB>
 80056d0:	e092      	b.n	80057f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	0a5b      	lsrs	r3, r3, #9
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fdf9 	bl	80062e2 <I2C_Master_ADD10>
 80056f0:	e082      	b.n	80057f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0xd2>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	0a5b      	lsrs	r3, r3, #9
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fe13 	bl	8006336 <I2C_Master_ADDR>
 8005710:	e072      	b.n	80057f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d03b      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572c:	f000 80f3 	beq.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	09db      	lsrs	r3, r3, #7
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00f      	beq.n	800575c <HAL_I2C_EV_IRQHandler+0x11c>
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	0a9b      	lsrs	r3, r3, #10
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <HAL_I2C_EV_IRQHandler+0x11c>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f9f3 	bl	8005b40 <I2C_MasterTransmit_TXE>
 800575a:	e04d      	b.n	80057f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	089b      	lsrs	r3, r3, #2
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80d6 	beq.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	0a5b      	lsrs	r3, r3, #9
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80cf 	beq.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	2b21      	cmp	r3, #33	; 0x21
 800577c:	d103      	bne.n	8005786 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa7a 	bl	8005c78 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005784:	e0c7      	b.n	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	f040 80c4 	bne.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fae8 	bl	8005d64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005794:	e0bf      	b.n	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a4:	f000 80b7 	beq.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	099b      	lsrs	r3, r3, #6
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00f      	beq.n	80057d4 <HAL_I2C_EV_IRQHandler+0x194>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	0a9b      	lsrs	r3, r3, #10
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_I2C_EV_IRQHandler+0x194>
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	089b      	lsrs	r3, r3, #2
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fb5d 	bl	8005e8c <I2C_MasterReceive_RXNE>
 80057d2:	e011      	b.n	80057f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 809a 	beq.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	0a5b      	lsrs	r3, r3, #9
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8093 	beq.w	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fc06 	bl	8006002 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057f6:	e08e      	b.n	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057f8:	e08d      	b.n	8005916 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	e007      	b.n	800581c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d012      	beq.n	800584e <HAL_I2C_EV_IRQHandler+0x20e>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	0a5b      	lsrs	r3, r3, #9
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00c      	beq.n	800584e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 ffc4 	bl	80067d4 <I2C_Slave_ADDR>
 800584c:	e066      	b.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_I2C_EV_IRQHandler+0x22e>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	0a5b      	lsrs	r3, r3, #9
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fffe 	bl	8006868 <I2C_Slave_STOPF>
 800586c:	e056      	b.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	2b21      	cmp	r3, #33	; 0x21
 8005872:	d002      	beq.n	800587a <HAL_I2C_EV_IRQHandler+0x23a>
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	2b29      	cmp	r3, #41	; 0x29
 8005878:	d125      	bne.n	80058c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	09db      	lsrs	r3, r3, #7
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00f      	beq.n	80058a6 <HAL_I2C_EV_IRQHandler+0x266>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	0a9b      	lsrs	r3, r3, #10
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_I2C_EV_IRQHandler+0x266>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 feda 	bl	8006658 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058a4:	e039      	b.n	800591a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d033      	beq.n	800591a <HAL_I2C_EV_IRQHandler+0x2da>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	0a5b      	lsrs	r3, r3, #9
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02d      	beq.n	800591a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 ff07 	bl	80066d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058c4:	e029      	b.n	800591a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00f      	beq.n	80058f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	0a9b      	lsrs	r3, r3, #10
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 ff12 	bl	8006714 <I2C_SlaveReceive_RXNE>
 80058f0:	e014      	b.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	0a5b      	lsrs	r3, r3, #9
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 ff40 	bl	8006790 <I2C_SlaveReceive_BTF>
 8005910:	e004      	b.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005912:	bf00      	nop
 8005914:	e002      	b.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005916:	bf00      	nop
 8005918:	e000      	b.n	800591c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800591a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b08a      	sub	sp, #40	; 0x28
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005944:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00e      	beq.n	8005970 <HAL_I2C_ER_IRQHandler+0x4e>
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800596e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	0a5b      	lsrs	r3, r3, #9
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <HAL_I2C_ER_IRQHandler+0x78>
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005998:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	0a9b      	lsrs	r3, r3, #10
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d03f      	beq.n	8005a26 <HAL_I2C_ER_IRQHandler+0x104>
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d039      	beq.n	8005a26 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80059b2:	7efb      	ldrb	r3, [r7, #27]
 80059b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059cc:	7ebb      	ldrb	r3, [r7, #26]
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d112      	bne.n	80059f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10f      	bne.n	80059f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	2b21      	cmp	r3, #33	; 0x21
 80059dc:	d008      	beq.n	80059f0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059de:	7cfb      	ldrb	r3, [r7, #19]
 80059e0:	2b29      	cmp	r3, #41	; 0x29
 80059e2:	d005      	beq.n	80059f0 <HAL_I2C_ER_IRQHandler+0xce>
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b28      	cmp	r3, #40	; 0x28
 80059e8:	d106      	bne.n	80059f8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b21      	cmp	r3, #33	; 0x21
 80059ee:	d103      	bne.n	80059f8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 f869 	bl	8006ac8 <I2C_Slave_AF>
 80059f6:	e016      	b.n	8005a26 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a00:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f043 0304 	orr.w	r3, r3, #4
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a0a:	7efb      	ldrb	r3, [r7, #27]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d002      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0xf4>
 8005a10:	7efb      	ldrb	r3, [r7, #27]
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d107      	bne.n	8005a26 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a24:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	0adb      	lsrs	r3, r3, #11
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <HAL_I2C_ER_IRQHandler+0x12e>
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a4e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d008      	beq.n	8005a68 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 f8a0 	bl	8006ba8 <I2C_ITError>
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3728      	adds	r7, #40	; 0x28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
 8005acc:	4613      	mov	r3, r2
 8005ace:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d150      	bne.n	8005c08 <I2C_MasterTransmit_TXE+0xc8>
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b21      	cmp	r3, #33	; 0x21
 8005b6a:	d14d      	bne.n	8005c08 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d01d      	beq.n	8005bae <I2C_MasterTransmit_TXE+0x6e>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d01a      	beq.n	8005bae <I2C_MasterTransmit_TXE+0x6e>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b7e:	d016      	beq.n	8005bae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2211      	movs	r2, #17
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ff62 	bl	8005a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bac:	e060      	b.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bbc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bcc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d107      	bne.n	8005bf8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff7d 	bl	8005af0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bf6:	e03b      	b.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff35 	bl	8005a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c06:	e033      	b.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b21      	cmp	r3, #33	; 0x21
 8005c0c:	d005      	beq.n	8005c1a <I2C_MasterTransmit_TXE+0xda>
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d12d      	bne.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b22      	cmp	r3, #34	; 0x22
 8005c18:	d12a      	bne.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d108      	bne.n	8005c36 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c34:	e01c      	b.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d103      	bne.n	8005c4a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f88e 	bl	8005d64 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c48:	e012      	b.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c6e:	e7ff      	b.n	8005c70 <I2C_MasterTransmit_TXE+0x130>
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b21      	cmp	r3, #33	; 0x21
 8005c90:	d164      	bne.n	8005d5c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d012      	beq.n	8005cc2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005cc0:	e04c      	b.n	8005d5c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d01d      	beq.n	8005d04 <I2C_MasterTransmit_BTF+0x8c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d01a      	beq.n	8005d04 <I2C_MasterTransmit_BTF+0x8c>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cd4:	d016      	beq.n	8005d04 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ce4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2211      	movs	r2, #17
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff feb7 	bl	8005a70 <HAL_I2C_MasterTxCpltCallback>
}
 8005d02:	e02b      	b.n	8005d5c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d12:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d107      	bne.n	8005d4e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fed2 	bl	8005af0 <HAL_I2C_MemTxCpltCallback>
}
 8005d4c:	e006      	b.n	8005d5c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fe8a 	bl	8005a70 <HAL_I2C_MasterTxCpltCallback>
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11d      	bne.n	8005db8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10b      	bne.n	8005d9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005d9a:	e073      	b.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	121b      	asrs	r3, r3, #8
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005db6:	e065      	b.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10b      	bne.n	8005dd8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005dd6:	e055      	b.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d151      	bne.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b22      	cmp	r3, #34	; 0x22
 8005de4:	d10d      	bne.n	8005e02 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e00:	e040      	b.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b21      	cmp	r3, #33	; 0x21
 8005e10:	d112      	bne.n	8005e38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e36:	e025      	b.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d120      	bne.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b21      	cmp	r3, #33	; 0x21
 8005e46:	d11d      	bne.n	8005e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e56:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff fe36 	bl	8005af0 <HAL_I2C_MemTxCpltCallback>
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b22      	cmp	r3, #34	; 0x22
 8005e9e:	f040 80ac 	bne.w	8005ffa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d921      	bls.n	8005ef4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	f040 808c 	bne.w	8005ffa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005ef2:	e082      	b.n	8005ffa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d075      	beq.n	8005fe8 <I2C_MasterReceive_RXNE+0x15c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d002      	beq.n	8005f08 <I2C_MasterReceive_RXNE+0x7c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d16f      	bne.n	8005fe8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 f827 	bl	8006f5c <I2C_WaitOnSTOPRequestThroughIT>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d142      	bne.n	8005f9a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f22:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f32:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d10a      	bne.n	8005f84 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fdc1 	bl	8005b04 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f82:	e03a      	b.n	8005ffa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2212      	movs	r2, #18
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fd76 	bl	8005a84 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f98:	e02f      	b.n	8005ffa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fa8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fd99 	bl	8005b18 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fe6:	e008      	b.n	8005ffa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff6:	605a      	str	r2, [r3, #4]
}
 8005ff8:	e7ff      	b.n	8005ffa <I2C_MasterReceive_RXNE+0x16e>
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b04      	cmp	r3, #4
 8006018:	d11b      	bne.n	8006052 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006050:	e0bd      	b.n	80061ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b03      	cmp	r3, #3
 800605a:	d129      	bne.n	80060b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d00a      	beq.n	8006088 <I2C_MasterReceive_BTF+0x86>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d007      	beq.n	8006088 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006086:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060ae:	e08e      	b.n	80061ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d176      	bne.n	80061a8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <I2C_MasterReceive_BTF+0xc4>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d108      	bne.n	80060d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e019      	b.n	800610c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d002      	beq.n	80060e4 <I2C_MasterReceive_BTF+0xe2>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d108      	bne.n	80060f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e00a      	b.n	800610c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d007      	beq.n	800610c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800610a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006166:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d10a      	bne.n	8006192 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fcba 	bl	8005b04 <HAL_I2C_MemRxCpltCallback>
}
 8006190:	e01d      	b.n	80061ce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2212      	movs	r2, #18
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fc6f 	bl	8005a84 <HAL_I2C_MasterRxCpltCallback>
}
 80061a6:	e012      	b.n	80061ce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d117      	bne.n	800621a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006202:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006204:	e067      	b.n	80062d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]
}
 8006218:	e05d      	b.n	80062d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006222:	d133      	bne.n	800628c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b21      	cmp	r3, #33	; 0x21
 800622e:	d109      	bne.n	8006244 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006240:	611a      	str	r2, [r3, #16]
 8006242:	e008      	b.n	8006256 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <I2C_Master_SB+0x92>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d108      	bne.n	800627a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d032      	beq.n	80062d6 <I2C_Master_SB+0x100>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02d      	beq.n	80062d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006288:	605a      	str	r2, [r3, #4]
}
 800628a:	e024      	b.n	80062d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10e      	bne.n	80062b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	b29b      	uxth	r3, r3
 800629a:	11db      	asrs	r3, r3, #7
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0306 	and.w	r3, r3, #6
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f063 030f 	orn	r3, r3, #15
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	611a      	str	r2, [r3, #16]
}
 80062b0:	e011      	b.n	80062d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d10d      	bne.n	80062d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	b29b      	uxth	r3, r3
 80062c0:	11db      	asrs	r3, r3, #7
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0306 	and.w	r3, r3, #6
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f063 030e 	orn	r3, r3, #14
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	611a      	str	r2, [r3, #16]
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <I2C_Master_ADD10+0x26>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <I2C_Master_ADD10+0x48>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006328:	605a      	str	r2, [r3, #4]
  }
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006336:	b480      	push	{r7}
 8006338:	b091      	sub	sp, #68	; 0x44
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b22      	cmp	r3, #34	; 0x22
 800635e:	f040 8169 	bne.w	8006634 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <I2C_Master_ADDR+0x54>
 800636a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d10b      	bne.n	800638a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006372:	2300      	movs	r3, #0
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	e160      	b.n	800664c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <I2C_Master_ADDR+0x98>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800639a:	d118      	bne.n	80063ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639c:	2300      	movs	r3, #0
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	651a      	str	r2, [r3, #80]	; 0x50
 80063cc:	e13e      	b.n	800664c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d113      	bne.n	8006400 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d8:	2300      	movs	r3, #0
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e115      	b.n	800662c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	f040 808a 	bne.w	8006520 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006412:	d137      	bne.n	8006484 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006432:	d113      	bne.n	800645c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006442:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006444:	2300      	movs	r3, #0
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	e0e7      	b.n	800662c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	623b      	str	r3, [r7, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e0d3      	b.n	800662c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	2b08      	cmp	r3, #8
 8006488:	d02e      	beq.n	80064e8 <I2C_Master_ADDR+0x1b2>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	2b20      	cmp	r3, #32
 800648e:	d02b      	beq.n	80064e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006492:	2b12      	cmp	r3, #18
 8006494:	d102      	bne.n	800649c <I2C_Master_ADDR+0x166>
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	2b01      	cmp	r3, #1
 800649a:	d125      	bne.n	80064e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d00e      	beq.n	80064c0 <I2C_Master_ADDR+0x18a>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d00b      	beq.n	80064c0 <I2C_Master_ADDR+0x18a>
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d008      	beq.n	80064c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e007      	b.n	80064d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	e0a1      	b.n	800662c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e085      	b.n	800662c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d14d      	bne.n	80065c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	2b04      	cmp	r3, #4
 800652e:	d016      	beq.n	800655e <I2C_Master_ADDR+0x228>
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	2b02      	cmp	r3, #2
 8006534:	d013      	beq.n	800655e <I2C_Master_ADDR+0x228>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b10      	cmp	r3, #16
 800653a:	d010      	beq.n	800655e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e007      	b.n	800656e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800656c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657c:	d117      	bne.n	80065ae <I2C_Master_ADDR+0x278>
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006584:	d00b      	beq.n	800659e <I2C_Master_ADDR+0x268>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b01      	cmp	r3, #1
 800658a:	d008      	beq.n	800659e <I2C_Master_ADDR+0x268>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	2b08      	cmp	r3, #8
 8006590:	d005      	beq.n	800659e <I2C_Master_ADDR+0x268>
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	2b10      	cmp	r3, #16
 8006596:	d002      	beq.n	800659e <I2C_Master_ADDR+0x268>
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	2b20      	cmp	r3, #32
 800659c:	d107      	bne.n	80065ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	e032      	b.n	800662c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e4:	d117      	bne.n	8006616 <I2C_Master_ADDR+0x2e0>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065ec:	d00b      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d008      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d005      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d002      	beq.n	8006606 <I2C_Master_ADDR+0x2d0>
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	2b20      	cmp	r3, #32
 8006604:	d107      	bne.n	8006616 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006614:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006632:	e00b      	b.n	800664c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
}
 800664a:	e7ff      	b.n	800664c <I2C_Master_ADDR+0x316>
 800664c:	bf00      	nop
 800664e:	3744      	adds	r7, #68	; 0x44
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006666:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02b      	beq.n	80066ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	781a      	ldrb	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d114      	bne.n	80066ca <I2C_SlaveTransmit_TXE+0x72>
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b29      	cmp	r3, #41	; 0x29
 80066a4:	d111      	bne.n	80066ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2221      	movs	r2, #33	; 0x21
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2228      	movs	r2, #40	; 0x28
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff f9e7 	bl	8005a98 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02c      	beq.n	8006788 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d114      	bne.n	8006788 <I2C_SlaveReceive_RXNE+0x74>
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b2a      	cmp	r3, #42	; 0x2a
 8006762:	d111      	bne.n	8006788 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006772:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2222      	movs	r2, #34	; 0x22
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2228      	movs	r2, #40	; 0x28
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff f992 	bl	8005aac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d012      	beq.n	80067c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067ee:	2b28      	cmp	r3, #40	; 0x28
 80067f0:	d127      	bne.n	8006842 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006800:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	81bb      	strh	r3, [r7, #12]
 8006824:	e002      	b.n	800682c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006834:	89ba      	ldrh	r2, [r7, #12]
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff f940 	bl	8005ac0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006840:	e00e      	b.n	8006860 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006876:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006886:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006888:	2300      	movs	r3, #0
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	60bb      	str	r3, [r7, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c4:	d172      	bne.n	80069ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b22      	cmp	r3, #34	; 0x22
 80068ca:	d002      	beq.n	80068d2 <I2C_Slave_STOPF+0x6a>
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b2a      	cmp	r3, #42	; 0x2a
 80068d0:	d135      	bne.n	800693e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f043 0204 	orr.w	r2, r3, #4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006904:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fac6 	bl	8004e9c <HAL_DMA_GetState>
 8006910:	4603      	mov	r3, r0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d049      	beq.n	80069aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	4a69      	ldr	r2, [pc, #420]	; (8006ac0 <I2C_Slave_STOPF+0x258>)
 800691c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe f90e 	bl	8004b44 <HAL_DMA_Abort_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d03d      	beq.n	80069aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800693c:	e035      	b.n	80069aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0204 	orr.w	r2, r3, #4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006970:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fa90 	bl	8004e9c <HAL_DMA_GetState>
 800697c:	4603      	mov	r3, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	d014      	beq.n	80069ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	4a4e      	ldr	r2, [pc, #312]	; (8006ac0 <I2C_Slave_STOPF+0x258>)
 8006988:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe f8d8 	bl	8004b44 <HAL_DMA_Abort_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	e000      	b.n	80069ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d03e      	beq.n	8006a34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d112      	bne.n	80069ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d112      	bne.n	8006a1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f043 0204 	orr.w	r2, r3, #4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8b3 	bl	8006ba8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a42:	e039      	b.n	8006ab8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b2a      	cmp	r3, #42	; 0x2a
 8006a48:	d109      	bne.n	8006a5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2228      	movs	r2, #40	; 0x28
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff f827 	bl	8005aac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b28      	cmp	r3, #40	; 0x28
 8006a68:	d111      	bne.n	8006a8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <I2C_Slave_STOPF+0x25c>)
 8006a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff f828 	bl	8005adc <HAL_I2C_ListenCpltCallback>
}
 8006a8c:	e014      	b.n	8006ab8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	2b22      	cmp	r3, #34	; 0x22
 8006a94:	d002      	beq.n	8006a9c <I2C_Slave_STOPF+0x234>
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b22      	cmp	r3, #34	; 0x22
 8006a9a:	d10d      	bne.n	8006ab8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fe fffa 	bl	8005aac <HAL_I2C_SlaveRxCpltCallback>
}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	08006e0d 	.word	0x08006e0d
 8006ac4:	ffff0000 	.word	0xffff0000

08006ac8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d002      	beq.n	8006aea <I2C_Slave_AF+0x22>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d129      	bne.n	8006b3e <I2C_Slave_AF+0x76>
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b28      	cmp	r3, #40	; 0x28
 8006aee:	d126      	bne.n	8006b3e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <I2C_Slave_AF+0xdc>)
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b04:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b0e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe ffd0 	bl	8005adc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b3c:	e02e      	b.n	8006b9c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b21      	cmp	r3, #33	; 0x21
 8006b42:	d126      	bne.n	8006b92 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <I2C_Slave_AF+0xdc>)
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2221      	movs	r2, #33	; 0x21
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b6e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b78:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b88:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fe ff84 	bl	8005a98 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b90:	e004      	b.n	8006b9c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b9a:	615a      	str	r2, [r3, #20]
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	ffff0000 	.word	0xffff0000

08006ba8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d002      	beq.n	8006bcc <I2C_ITError+0x24>
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d10a      	bne.n	8006be2 <I2C_ITError+0x3a>
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b22      	cmp	r3, #34	; 0x22
 8006bd0:	d107      	bne.n	8006be2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006be0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006be8:	2b28      	cmp	r3, #40	; 0x28
 8006bea:	d107      	bne.n	8006bfc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2228      	movs	r2, #40	; 0x28
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bfa:	e015      	b.n	8006c28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0a:	d00a      	beq.n	8006c22 <I2C_ITError+0x7a>
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b60      	cmp	r3, #96	; 0x60
 8006c10:	d007      	beq.n	8006c22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c36:	d162      	bne.n	8006cfe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d020      	beq.n	8006c98 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	4a6a      	ldr	r2, [pc, #424]	; (8006e04 <I2C_ITError+0x25c>)
 8006c5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd ff6e 	bl	8004b44 <HAL_DMA_Abort_IT>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8089 	beq.w	8006d82 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c92:	4610      	mov	r0, r2
 8006c94:	4798      	blx	r3
 8006c96:	e074      	b.n	8006d82 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	4a59      	ldr	r2, [pc, #356]	; (8006e04 <I2C_ITError+0x25c>)
 8006c9e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd ff4d 	bl	8004b44 <HAL_DMA_Abort_IT>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d068      	beq.n	8006d82 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d10b      	bne.n	8006cd6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	e041      	b.n	8006d82 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b60      	cmp	r3, #96	; 0x60
 8006d08:	d125      	bne.n	8006d56 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d10b      	bne.n	8006d3e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fe feec 	bl	8005b2c <HAL_I2C_AbortCpltCallback>
 8006d54:	e015      	b.n	8006d82 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b40      	cmp	r3, #64	; 0x40
 8006d62:	d10b      	bne.n	8006d7c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7fe fecb 	bl	8005b18 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10e      	bne.n	8006db0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dbe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d113      	bne.n	8006dfc <I2C_ITError+0x254>
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b28      	cmp	r3, #40	; 0x28
 8006dd8:	d110      	bne.n	8006dfc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <I2C_ITError+0x260>)
 8006dde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fe fe70 	bl	8005adc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	08006e0d 	.word	0x08006e0d
 8006e08:	ffff0000 	.word	0xffff0000

08006e0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e26:	4b4b      	ldr	r3, [pc, #300]	; (8006f54 <I2C_DMAAbort+0x148>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	08db      	lsrs	r3, r3, #3
 8006e2c:	4a4a      	ldr	r2, [pc, #296]	; (8006f58 <I2C_DMAAbort+0x14c>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	0a1a      	lsrs	r2, r3, #8
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	00da      	lsls	r2, r3, #3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f043 0220 	orr.w	r2, r3, #32
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e52:	e00a      	b.n	8006e6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e68:	d0ea      	beq.n	8006e40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	2200      	movs	r2, #0
 8006e78:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	2200      	movs	r2, #0
 8006e88:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	2200      	movs	r2, #0
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b60      	cmp	r3, #96	; 0x60
 8006eda:	d10e      	bne.n	8006efa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	f7fe fe1a 	bl	8005b2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ef8:	e027      	b.n	8006f4a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006efa:	7cfb      	ldrb	r3, [r7, #19]
 8006efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f00:	2b28      	cmp	r3, #40	; 0x28
 8006f02:	d117      	bne.n	8006f34 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2228      	movs	r2, #40	; 0x28
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f32:	e007      	b.n	8006f44 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f44:	6978      	ldr	r0, [r7, #20]
 8006f46:	f7fe fde7 	bl	8005b18 <HAL_I2C_ErrorCallback>
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200000b0 	.word	0x200000b0
 8006f58:	14f8b589 	.word	0x14f8b589

08006f5c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	08db      	lsrs	r3, r3, #3
 8006f6e:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f70:	fba2 2303 	umull	r2, r3, r2, r3
 8006f74:	0a1a      	lsrs	r2, r3, #8
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d107      	bne.n	8006f9a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e008      	b.n	8006fac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa8:	d0e9      	beq.n	8006f7e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	200000b0 	.word	0x200000b0
 8006fbc:	14f8b589 	.word	0x14f8b589

08006fc0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fd0:	d103      	bne.n	8006fda <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fd8:	e007      	b.n	8006fea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fe2:	d102      	bne.n	8006fea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e267      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d075      	beq.n	8007102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007016:	4b88      	ldr	r3, [pc, #544]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
 800701e:	2b04      	cmp	r3, #4
 8007020:	d00c      	beq.n	800703c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007022:	4b85      	ldr	r3, [pc, #532]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800702a:	2b08      	cmp	r3, #8
 800702c:	d112      	bne.n	8007054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702e:	4b82      	ldr	r3, [pc, #520]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800703a:	d10b      	bne.n	8007054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800703c:	4b7e      	ldr	r3, [pc, #504]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d05b      	beq.n	8007100 <HAL_RCC_OscConfig+0x108>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d157      	bne.n	8007100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e242      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d106      	bne.n	800706c <HAL_RCC_OscConfig+0x74>
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a75      	ldr	r2, [pc, #468]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e01d      	b.n	80070a8 <HAL_RCC_OscConfig+0xb0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007074:	d10c      	bne.n	8007090 <HAL_RCC_OscConfig+0x98>
 8007076:	4b70      	ldr	r3, [pc, #448]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a6f      	ldr	r2, [pc, #444]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800707c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b6d      	ldr	r3, [pc, #436]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6c      	ldr	r2, [pc, #432]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e00b      	b.n	80070a8 <HAL_RCC_OscConfig+0xb0>
 8007090:	4b69      	ldr	r3, [pc, #420]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a68      	ldr	r2, [pc, #416]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	4b66      	ldr	r3, [pc, #408]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a65      	ldr	r2, [pc, #404]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 80070a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d013      	beq.n	80070d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7fd fb58 	bl	8004764 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070b8:	f7fd fb54 	bl	8004764 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	; 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e207      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b5b      	ldr	r3, [pc, #364]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCC_OscConfig+0xc0>
 80070d6:	e014      	b.n	8007102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d8:	f7fd fb44 	bl	8004764 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070e0:	f7fd fb40 	bl	8004764 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b64      	cmp	r3, #100	; 0x64
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e1f3      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f2:	4b51      	ldr	r3, [pc, #324]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0xe8>
 80070fe:	e000      	b.n	8007102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d063      	beq.n	80071d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800710e:	4b4a      	ldr	r3, [pc, #296]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800711a:	4b47      	ldr	r3, [pc, #284]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007122:	2b08      	cmp	r3, #8
 8007124:	d11c      	bne.n	8007160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007126:	4b44      	ldr	r3, [pc, #272]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d116      	bne.n	8007160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007132:	4b41      	ldr	r3, [pc, #260]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_RCC_OscConfig+0x152>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d001      	beq.n	800714a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e1c7      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714a:	4b3b      	ldr	r3, [pc, #236]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4937      	ldr	r1, [pc, #220]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800715a:	4313      	orrs	r3, r2
 800715c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800715e:	e03a      	b.n	80071d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d020      	beq.n	80071aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007168:	4b34      	ldr	r3, [pc, #208]	; (800723c <HAL_RCC_OscConfig+0x244>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716e:	f7fd faf9 	bl	8004764 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007176:	f7fd faf5 	bl	8004764 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e1a8      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007188:	4b2b      	ldr	r3, [pc, #172]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f0      	beq.n	8007176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007194:	4b28      	ldr	r3, [pc, #160]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4925      	ldr	r1, [pc, #148]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]
 80071a8:	e015      	b.n	80071d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071aa:	4b24      	ldr	r3, [pc, #144]	; (800723c <HAL_RCC_OscConfig+0x244>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fd fad8 	bl	8004764 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071b8:	f7fd fad4 	bl	8004764 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e187      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d036      	beq.n	8007250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d016      	beq.n	8007218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ea:	4b15      	ldr	r3, [pc, #84]	; (8007240 <HAL_RCC_OscConfig+0x248>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f0:	f7fd fab8 	bl	8004764 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071f8:	f7fd fab4 	bl	8004764 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e167      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720a:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <HAL_RCC_OscConfig+0x240>)
 800720c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x200>
 8007216:	e01b      	b.n	8007250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007218:	4b09      	ldr	r3, [pc, #36]	; (8007240 <HAL_RCC_OscConfig+0x248>)
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721e:	f7fd faa1 	bl	8004764 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007224:	e00e      	b.n	8007244 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007226:	f7fd fa9d 	bl	8004764 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d907      	bls.n	8007244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e150      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
 8007238:	40023800 	.word	0x40023800
 800723c:	42470000 	.word	0x42470000
 8007240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007244:	4b88      	ldr	r3, [pc, #544]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1ea      	bne.n	8007226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8097 	beq.w	800738c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007262:	4b81      	ldr	r3, [pc, #516]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10f      	bne.n	800728e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	4b7d      	ldr	r3, [pc, #500]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	4a7c      	ldr	r2, [pc, #496]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727c:	6413      	str	r3, [r2, #64]	; 0x40
 800727e:	4b7a      	ldr	r3, [pc, #488]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728e:	4b77      	ldr	r3, [pc, #476]	; (800746c <HAL_RCC_OscConfig+0x474>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d118      	bne.n	80072cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800729a:	4b74      	ldr	r3, [pc, #464]	; (800746c <HAL_RCC_OscConfig+0x474>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a73      	ldr	r2, [pc, #460]	; (800746c <HAL_RCC_OscConfig+0x474>)
 80072a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a6:	f7fd fa5d 	bl	8004764 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ae:	f7fd fa59 	bl	8004764 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e10c      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c0:	4b6a      	ldr	r3, [pc, #424]	; (800746c <HAL_RCC_OscConfig+0x474>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d106      	bne.n	80072e2 <HAL_RCC_OscConfig+0x2ea>
 80072d4:	4b64      	ldr	r3, [pc, #400]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	4a63      	ldr	r2, [pc, #396]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	6713      	str	r3, [r2, #112]	; 0x70
 80072e0:	e01c      	b.n	800731c <HAL_RCC_OscConfig+0x324>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d10c      	bne.n	8007304 <HAL_RCC_OscConfig+0x30c>
 80072ea:	4b5f      	ldr	r3, [pc, #380]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80072f0:	f043 0304 	orr.w	r3, r3, #4
 80072f4:	6713      	str	r3, [r2, #112]	; 0x70
 80072f6:	4b5c      	ldr	r3, [pc, #368]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	4a5b      	ldr	r2, [pc, #364]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	6713      	str	r3, [r2, #112]	; 0x70
 8007302:	e00b      	b.n	800731c <HAL_RCC_OscConfig+0x324>
 8007304:	4b58      	ldr	r3, [pc, #352]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007308:	4a57      	ldr	r2, [pc, #348]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	6713      	str	r3, [r2, #112]	; 0x70
 8007310:	4b55      	ldr	r3, [pc, #340]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	4a54      	ldr	r2, [pc, #336]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007316:	f023 0304 	bic.w	r3, r3, #4
 800731a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d015      	beq.n	8007350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007324:	f7fd fa1e 	bl	8004764 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732a:	e00a      	b.n	8007342 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800732c:	f7fd fa1a 	bl	8004764 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	; 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e0cb      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007342:	4b49      	ldr	r3, [pc, #292]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0ee      	beq.n	800732c <HAL_RCC_OscConfig+0x334>
 800734e:	e014      	b.n	800737a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007350:	f7fd fa08 	bl	8004764 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007356:	e00a      	b.n	800736e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007358:	f7fd fa04 	bl	8004764 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f241 3288 	movw	r2, #5000	; 0x1388
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e0b5      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800736e:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1ee      	bne.n	8007358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d105      	bne.n	800738c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007380:	4b39      	ldr	r3, [pc, #228]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	4a38      	ldr	r2, [pc, #224]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800738a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80a1 	beq.w	80074d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007396:	4b34      	ldr	r3, [pc, #208]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 030c 	and.w	r3, r3, #12
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d05c      	beq.n	800745c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d141      	bne.n	800742e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073aa:	4b31      	ldr	r3, [pc, #196]	; (8007470 <HAL_RCC_OscConfig+0x478>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b0:	f7fd f9d8 	bl	8004764 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073b8:	f7fd f9d4 	bl	8004764 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e087      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ca:	4b27      	ldr	r3, [pc, #156]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69da      	ldr	r2, [r3, #28]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	019b      	lsls	r3, r3, #6
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	3b01      	subs	r3, #1
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	061b      	lsls	r3, r3, #24
 80073fa:	491b      	ldr	r1, [pc, #108]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007400:	4b1b      	ldr	r3, [pc, #108]	; (8007470 <HAL_RCC_OscConfig+0x478>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007406:	f7fd f9ad 	bl	8004764 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800740e:	f7fd f9a9 	bl	8004764 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e05c      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007420:	4b11      	ldr	r3, [pc, #68]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0f0      	beq.n	800740e <HAL_RCC_OscConfig+0x416>
 800742c:	e054      	b.n	80074d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <HAL_RCC_OscConfig+0x478>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007434:	f7fd f996 	bl	8004764 <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800743c:	f7fd f992 	bl	8004764 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e045      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCC_OscConfig+0x470>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f0      	bne.n	800743c <HAL_RCC_OscConfig+0x444>
 800745a:	e03d      	b.n	80074d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d107      	bne.n	8007474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e038      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
 8007468:	40023800 	.word	0x40023800
 800746c:	40007000 	.word	0x40007000
 8007470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007474:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <HAL_RCC_OscConfig+0x4ec>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d028      	beq.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d121      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d11a      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d111      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	3b01      	subs	r3, #1
 80074be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d107      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d001      	beq.n	80074d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40023800 	.word	0x40023800

080074e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0cc      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074fc:	4b68      	ldr	r3, [pc, #416]	; (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d90c      	bls.n	8007524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800750a:	4b65      	ldr	r3, [pc, #404]	; (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007512:	4b63      	ldr	r3, [pc, #396]	; (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d001      	beq.n	8007524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e0b8      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d020      	beq.n	8007572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800753c:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4a58      	ldr	r2, [pc, #352]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007554:	4b53      	ldr	r3, [pc, #332]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4a52      	ldr	r2, [pc, #328]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800755e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007560:	4b50      	ldr	r3, [pc, #320]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	494d      	ldr	r1, [pc, #308]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	4313      	orrs	r3, r2
 8007570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d044      	beq.n	8007608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d107      	bne.n	8007596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007586:	4b47      	ldr	r3, [pc, #284]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d119      	bne.n	80075c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e07f      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d003      	beq.n	80075a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d107      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a6:	4b3f      	ldr	r3, [pc, #252]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e06f      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b6:	4b3b      	ldr	r3, [pc, #236]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e067      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f023 0203 	bic.w	r2, r3, #3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4934      	ldr	r1, [pc, #208]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075d8:	f7fd f8c4 	bl	8004764 <HAL_GetTick>
 80075dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075de:	e00a      	b.n	80075f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e0:	f7fd f8c0 	bl	8004764 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e04f      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f6:	4b2b      	ldr	r3, [pc, #172]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 020c 	and.w	r2, r3, #12
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	429a      	cmp	r2, r3
 8007606:	d1eb      	bne.n	80075e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d20c      	bcs.n	8007630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007616:	4b22      	ldr	r3, [pc, #136]	; (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800761e:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d001      	beq.n	8007630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e032      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800763c:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4916      	ldr	r1, [pc, #88]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	490e      	ldr	r1, [pc, #56]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800766e:	f000 f821 	bl	80076b4 <HAL_RCC_GetSysClockFreq>
 8007672:	4602      	mov	r2, r0
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	490a      	ldr	r1, [pc, #40]	; (80076a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007680:	5ccb      	ldrb	r3, [r1, r3]
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <HAL_RCC_ClockConfig+0x1c4>)
 8007688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f7fd f824 	bl	80046dc <HAL_InitTick>

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40023c00 	.word	0x40023c00
 80076a4:	40023800 	.word	0x40023800
 80076a8:	0800c7d4 	.word	0x0800c7d4
 80076ac:	200000b0 	.word	0x200000b0
 80076b0:	200000b4 	.word	0x200000b4

080076b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b8:	b094      	sub	sp, #80	; 0x50
 80076ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	647b      	str	r3, [r7, #68]	; 0x44
 80076c0:	2300      	movs	r3, #0
 80076c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076c4:	2300      	movs	r3, #0
 80076c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076cc:	4b79      	ldr	r3, [pc, #484]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 030c 	and.w	r3, r3, #12
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d00d      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x40>
 80076d8:	2b08      	cmp	r3, #8
 80076da:	f200 80e1 	bhi.w	80078a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0x34>
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d003      	beq.n	80076ee <HAL_RCC_GetSysClockFreq+0x3a>
 80076e6:	e0db      	b.n	80078a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076e8:	4b73      	ldr	r3, [pc, #460]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80076ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80076ec:	e0db      	b.n	80078a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ee:	4b73      	ldr	r3, [pc, #460]	; (80078bc <HAL_RCC_GetSysClockFreq+0x208>)
 80076f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076f2:	e0d8      	b.n	80078a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076f4:	4b6f      	ldr	r3, [pc, #444]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076fe:	4b6d      	ldr	r3, [pc, #436]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d063      	beq.n	80077d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800770a:	4b6a      	ldr	r3, [pc, #424]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	099b      	lsrs	r3, r3, #6
 8007710:	2200      	movs	r2, #0
 8007712:	63bb      	str	r3, [r7, #56]	; 0x38
 8007714:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771c:	633b      	str	r3, [r7, #48]	; 0x30
 800771e:	2300      	movs	r3, #0
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007726:	4622      	mov	r2, r4
 8007728:	462b      	mov	r3, r5
 800772a:	f04f 0000 	mov.w	r0, #0
 800772e:	f04f 0100 	mov.w	r1, #0
 8007732:	0159      	lsls	r1, r3, #5
 8007734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007738:	0150      	lsls	r0, r2, #5
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4621      	mov	r1, r4
 8007740:	1a51      	subs	r1, r2, r1
 8007742:	6139      	str	r1, [r7, #16]
 8007744:	4629      	mov	r1, r5
 8007746:	eb63 0301 	sbc.w	r3, r3, r1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007758:	4659      	mov	r1, fp
 800775a:	018b      	lsls	r3, r1, #6
 800775c:	4651      	mov	r1, sl
 800775e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007762:	4651      	mov	r1, sl
 8007764:	018a      	lsls	r2, r1, #6
 8007766:	4651      	mov	r1, sl
 8007768:	ebb2 0801 	subs.w	r8, r2, r1
 800776c:	4659      	mov	r1, fp
 800776e:	eb63 0901 	sbc.w	r9, r3, r1
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800777e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007786:	4690      	mov	r8, r2
 8007788:	4699      	mov	r9, r3
 800778a:	4623      	mov	r3, r4
 800778c:	eb18 0303 	adds.w	r3, r8, r3
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	462b      	mov	r3, r5
 8007794:	eb49 0303 	adc.w	r3, r9, r3
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077a6:	4629      	mov	r1, r5
 80077a8:	024b      	lsls	r3, r1, #9
 80077aa:	4621      	mov	r1, r4
 80077ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077b0:	4621      	mov	r1, r4
 80077b2:	024a      	lsls	r2, r1, #9
 80077b4:	4610      	mov	r0, r2
 80077b6:	4619      	mov	r1, r3
 80077b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ba:	2200      	movs	r2, #0
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077c4:	f7f8 fd08 	bl	80001d8 <__aeabi_uldivmod>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4613      	mov	r3, r2
 80077ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d0:	e058      	b.n	8007884 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077d2:	4b38      	ldr	r3, [pc, #224]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	2200      	movs	r2, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	4611      	mov	r1, r2
 80077de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077e2:	623b      	str	r3, [r7, #32]
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
 80077e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077ec:	4642      	mov	r2, r8
 80077ee:	464b      	mov	r3, r9
 80077f0:	f04f 0000 	mov.w	r0, #0
 80077f4:	f04f 0100 	mov.w	r1, #0
 80077f8:	0159      	lsls	r1, r3, #5
 80077fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077fe:	0150      	lsls	r0, r2, #5
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4641      	mov	r1, r8
 8007806:	ebb2 0a01 	subs.w	sl, r2, r1
 800780a:	4649      	mov	r1, r9
 800780c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800781c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007824:	ebb2 040a 	subs.w	r4, r2, sl
 8007828:	eb63 050b 	sbc.w	r5, r3, fp
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	00eb      	lsls	r3, r5, #3
 8007836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800783a:	00e2      	lsls	r2, r4, #3
 800783c:	4614      	mov	r4, r2
 800783e:	461d      	mov	r5, r3
 8007840:	4643      	mov	r3, r8
 8007842:	18e3      	adds	r3, r4, r3
 8007844:	603b      	str	r3, [r7, #0]
 8007846:	464b      	mov	r3, r9
 8007848:	eb45 0303 	adc.w	r3, r5, r3
 800784c:	607b      	str	r3, [r7, #4]
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800785a:	4629      	mov	r1, r5
 800785c:	028b      	lsls	r3, r1, #10
 800785e:	4621      	mov	r1, r4
 8007860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007864:	4621      	mov	r1, r4
 8007866:	028a      	lsls	r2, r1, #10
 8007868:	4610      	mov	r0, r2
 800786a:	4619      	mov	r1, r3
 800786c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786e:	2200      	movs	r2, #0
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	61fa      	str	r2, [r7, #28]
 8007874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007878:	f7f8 fcae 	bl	80001d8 <__aeabi_uldivmod>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4613      	mov	r3, r2
 8007882:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007884:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	0c1b      	lsrs	r3, r3, #16
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	3301      	adds	r3, #1
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007898:	fbb2 f3f3 	udiv	r3, r2, r3
 800789c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800789e:	e002      	b.n	80078a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80078a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3750      	adds	r7, #80	; 0x50
 80078ac:	46bd      	mov	sp, r7
 80078ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800
 80078b8:	00f42400 	.word	0x00f42400
 80078bc:	007a1200 	.word	0x007a1200

080078c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078c6:	681b      	ldr	r3, [r3, #0]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	200000b0 	.word	0x200000b0

080078d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078dc:	f7ff fff0 	bl	80078c0 <HAL_RCC_GetHCLKFreq>
 80078e0:	4602      	mov	r2, r0
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	0a9b      	lsrs	r3, r3, #10
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	4903      	ldr	r1, [pc, #12]	; (80078fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ee:	5ccb      	ldrb	r3, [r1, r3]
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40023800 	.word	0x40023800
 80078fc:	0800c7e4 	.word	0x0800c7e4

08007900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007904:	f7ff ffdc 	bl	80078c0 <HAL_RCC_GetHCLKFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	0b5b      	lsrs	r3, r3, #13
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4903      	ldr	r1, [pc, #12]	; (8007924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40023800 	.word	0x40023800
 8007924:	0800c7e4 	.word	0x0800c7e4

08007928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e07b      	b.n	8007a32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	d108      	bne.n	8007954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800794a:	d009      	beq.n	8007960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	61da      	str	r2, [r3, #28]
 8007952:	e005      	b.n	8007960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fc fac0 	bl	8003f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e4:	ea42 0103 	orr.w	r1, r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	0c1b      	lsrs	r3, r3, #16
 80079fe:	f003 0104 	and.w	r1, r3, #4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	f003 0210 	and.w	r2, r3, #16
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69da      	ldr	r2, [r3, #28]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b088      	sub	sp, #32
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	603b      	str	r3, [r7, #0]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d101      	bne.n	8007a5c <HAL_SPI_Transmit+0x22>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e126      	b.n	8007caa <HAL_SPI_Transmit+0x270>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a64:	f7fc fe7e 	bl	8004764 <HAL_GetTick>
 8007a68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d002      	beq.n	8007a80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a7e:	e10b      	b.n	8007c98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_SPI_Transmit+0x52>
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a90:	e102      	b.n	8007c98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2203      	movs	r2, #3
 8007a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	88fa      	ldrh	r2, [r7, #6]
 8007ab0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad8:	d10f      	bne.n	8007afa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d007      	beq.n	8007b18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b20:	d14b      	bne.n	8007bba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_SPI_Transmit+0xf6>
 8007b2a:	8afb      	ldrh	r3, [r7, #22]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d13e      	bne.n	8007bae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b34:	881a      	ldrh	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	1c9a      	adds	r2, r3, #2
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b54:	e02b      	b.n	8007bae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d112      	bne.n	8007b8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	881a      	ldrh	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	1c9a      	adds	r2, r3, #2
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b88:	e011      	b.n	8007bae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b8a:	f7fc fdeb 	bl	8004764 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d803      	bhi.n	8007ba2 <HAL_SPI_Transmit+0x168>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d102      	bne.n	8007ba8 <HAL_SPI_Transmit+0x16e>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bac:	e074      	b.n	8007c98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1ce      	bne.n	8007b56 <HAL_SPI_Transmit+0x11c>
 8007bb8:	e04c      	b.n	8007c54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_SPI_Transmit+0x18e>
 8007bc2:	8afb      	ldrh	r3, [r7, #22]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d140      	bne.n	8007c4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007bee:	e02c      	b.n	8007c4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d113      	bne.n	8007c26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c24:	e011      	b.n	8007c4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c26:	f7fc fd9d 	bl	8004764 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d803      	bhi.n	8007c3e <HAL_SPI_Transmit+0x204>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d102      	bne.n	8007c44 <HAL_SPI_Transmit+0x20a>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c48:	e026      	b.n	8007c98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1cd      	bne.n	8007bf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 fce9 	bl	8008630 <SPI_EndRxTxTransaction>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e000      	b.n	8007c98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b088      	sub	sp, #32
 8007cb6:	af02      	add	r7, sp, #8
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	603b      	str	r3, [r7, #0]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cce:	d112      	bne.n	8007cf6 <HAL_SPI_Receive+0x44>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10e      	bne.n	8007cf6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f8f1 	bl	8007ed4 <HAL_SPI_TransmitReceive>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	e0ea      	b.n	8007ecc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_SPI_Receive+0x52>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e0e3      	b.n	8007ecc <HAL_SPI_Receive+0x21a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d0c:	f7fc fd2a 	bl	8004764 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d002      	beq.n	8007d24 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d22:	e0ca      	b.n	8007eba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <HAL_SPI_Receive+0x7e>
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d34:	e0c1      	b.n	8007eba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2204      	movs	r2, #4
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	88fa      	ldrh	r2, [r7, #6]
 8007d54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d7c:	d10f      	bne.n	8007d9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d007      	beq.n	8007dbc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d162      	bne.n	8007e8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007dc4:	e02e      	b.n	8007e24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d115      	bne.n	8007e00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f103 020c 	add.w	r2, r3, #12
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dfe:	e011      	b.n	8007e24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e00:	f7fc fcb0 	bl	8004764 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d803      	bhi.n	8007e18 <HAL_SPI_Receive+0x166>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d102      	bne.n	8007e1e <HAL_SPI_Receive+0x16c>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d102      	bne.n	8007e24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e22:	e04a      	b.n	8007eba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1cb      	bne.n	8007dc6 <HAL_SPI_Receive+0x114>
 8007e2e:	e031      	b.n	8007e94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d113      	bne.n	8007e66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	1c9a      	adds	r2, r3, #2
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e64:	e011      	b.n	8007e8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e66:	f7fc fc7d 	bl	8004764 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d803      	bhi.n	8007e7e <HAL_SPI_Receive+0x1cc>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7c:	d102      	bne.n	8007e84 <HAL_SPI_Receive+0x1d2>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e88:	e017      	b.n	8007eba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1cd      	bne.n	8007e30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fb63 	bl	8008564 <SPI_EndRxTransaction>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
 8007eb6:	e000      	b.n	8007eba <HAL_SPI_Receive+0x208>
  }

error :
 8007eb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08c      	sub	sp, #48	; 0x30
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d101      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x26>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	e18a      	b.n	8008210 <HAL_SPI_TransmitReceive+0x33c>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f02:	f7fc fc2f 	bl	8004764 <HAL_GetTick>
 8007f06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007f18:	887b      	ldrh	r3, [r7, #2]
 8007f1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d00f      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x70>
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2a:	d107      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x68>
 8007f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d003      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f42:	e15b      	b.n	80081fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <HAL_SPI_TransmitReceive+0x82>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_SPI_TransmitReceive+0x82>
 8007f50:	887b      	ldrh	r3, [r7, #2]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f5c:	e14e      	b.n	80081fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d003      	beq.n	8007f72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	887a      	ldrh	r2, [r7, #2]
 8007f82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	887a      	ldrh	r2, [r7, #2]
 8007f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	887a      	ldrh	r2, [r7, #2]
 8007f94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	887a      	ldrh	r2, [r7, #2]
 8007f9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d007      	beq.n	8007fc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fce:	d178      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_SPI_TransmitReceive+0x10a>
 8007fd8:	8b7b      	ldrh	r3, [r7, #26]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d166      	bne.n	80080ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	881a      	ldrh	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	1c9a      	adds	r2, r3, #2
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008002:	e053      	b.n	80080ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b02      	cmp	r3, #2
 8008010:	d11b      	bne.n	800804a <HAL_SPI_TransmitReceive+0x176>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d016      	beq.n	800804a <HAL_SPI_TransmitReceive+0x176>
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d113      	bne.n	800804a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	881a      	ldrh	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	1c9a      	adds	r2, r3, #2
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d119      	bne.n	800808c <HAL_SPI_TransmitReceive+0x1b8>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d014      	beq.n	800808c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	b292      	uxth	r2, r2
 800806e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008088:	2301      	movs	r3, #1
 800808a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800808c:	f7fc fb6a 	bl	8004764 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008098:	429a      	cmp	r2, r3
 800809a:	d807      	bhi.n	80080ac <HAL_SPI_TransmitReceive+0x1d8>
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d003      	beq.n	80080ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080aa:	e0a7      	b.n	80081fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1a6      	bne.n	8008004 <HAL_SPI_TransmitReceive+0x130>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1a1      	bne.n	8008004 <HAL_SPI_TransmitReceive+0x130>
 80080c0:	e07c      	b.n	80081bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_SPI_TransmitReceive+0x1fc>
 80080ca:	8b7b      	ldrh	r3, [r7, #26]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d16b      	bne.n	80081a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	7812      	ldrb	r2, [r2, #0]
 80080dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080f6:	e057      	b.n	80081a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b02      	cmp	r3, #2
 8008104:	d11c      	bne.n	8008140 <HAL_SPI_TransmitReceive+0x26c>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_SPI_TransmitReceive+0x26c>
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d114      	bne.n	8008140 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	330c      	adds	r3, #12
 8008120:	7812      	ldrb	r2, [r2, #0]
 8008122:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b01      	cmp	r3, #1
 800814c:	d119      	bne.n	8008182 <HAL_SPI_TransmitReceive+0x2ae>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d014      	beq.n	8008182 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800817e:	2301      	movs	r3, #1
 8008180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008182:	f7fc faef 	bl	8004764 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818e:	429a      	cmp	r2, r3
 8008190:	d803      	bhi.n	800819a <HAL_SPI_TransmitReceive+0x2c6>
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d102      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x2cc>
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80081a6:	e029      	b.n	80081fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1a2      	bne.n	80080f8 <HAL_SPI_TransmitReceive+0x224>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d19d      	bne.n	80080f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fa35 	bl	8008630 <SPI_EndRxTxTransaction>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80081d8:	e010      	b.n	80081fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	e000      	b.n	80081fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80081fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800820c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008210:	4618      	mov	r0, r3
 8008212:	3730      	adds	r7, #48	; 0x30
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	099b      	lsrs	r3, r3, #6
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10f      	bne.n	800825c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	099b      	lsrs	r3, r3, #6
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
    return;
 800825a:	e0d7      	b.n	800840c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <HAL_SPI_IRQHandler+0x66>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	09db      	lsrs	r3, r3, #7
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
    return;
 800827c:	e0c6      	b.n	800840c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	095b      	lsrs	r3, r3, #5
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10c      	bne.n	80082a4 <HAL_SPI_IRQHandler+0x8c>
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	099b      	lsrs	r3, r3, #6
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80b4 	beq.w	800840c <HAL_SPI_IRQHandler+0x1f4>
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 80ad 	beq.w	800840c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	099b      	lsrs	r3, r3, #6
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d023      	beq.n	8008306 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d011      	beq.n	80082ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ce:	f043 0204 	orr.w	r2, r3, #4
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	617b      	str	r3, [r7, #20]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	e00b      	b.n	8008306 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082ee:	2300      	movs	r3, #0
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	613b      	str	r3, [r7, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	693b      	ldr	r3, [r7, #16]
        return;
 8008304:	e082      	b.n	800840c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	095b      	lsrs	r3, r3, #5
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d014      	beq.n	800833c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008316:	f043 0201 	orr.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00c      	beq.n	8008362 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834c:	f043 0208 	orr.w	r2, r3, #8
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008354:	2300      	movs	r3, #0
 8008356:	60bb      	str	r3, [r7, #8]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04f      	beq.n	800840a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008378:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <HAL_SPI_IRQHandler+0x17e>
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d034      	beq.n	8008400 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0203 	bic.w	r2, r2, #3
 80083a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d011      	beq.n	80083d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b2:	4a18      	ldr	r2, [pc, #96]	; (8008414 <HAL_SPI_IRQHandler+0x1fc>)
 80083b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fc fbc2 	bl	8004b44 <HAL_DMA_Abort_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d016      	beq.n	8008408 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083de:	4a0d      	ldr	r2, [pc, #52]	; (8008414 <HAL_SPI_IRQHandler+0x1fc>)
 80083e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fc fbac 	bl	8004b44 <HAL_DMA_Abort_IT>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80083fe:	e003      	b.n	8008408 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f809 	bl	8008418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008406:	e000      	b.n	800840a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008408:	bf00      	nop
    return;
 800840a:	bf00      	nop
  }
}
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	0800842d 	.word	0x0800842d

08008418 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff ffe6 	bl	8008418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	4613      	mov	r3, r2
 8008462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008464:	f7fc f97e 	bl	8004764 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	1a9b      	subs	r3, r3, r2
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	4413      	add	r3, r2
 8008472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008474:	f7fc f976 	bl	8004764 <HAL_GetTick>
 8008478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800847a:	4b39      	ldr	r3, [pc, #228]	; (8008560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	015b      	lsls	r3, r3, #5
 8008480:	0d1b      	lsrs	r3, r3, #20
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	fb02 f303 	mul.w	r3, r2, r3
 8008488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800848a:	e054      	b.n	8008536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008492:	d050      	beq.n	8008536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008494:	f7fc f966 	bl	8004764 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d902      	bls.n	80084aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d13d      	bne.n	8008526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c2:	d111      	bne.n	80084e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084cc:	d004      	beq.n	80084d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d6:	d107      	bne.n	80084e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084f0:	d10f      	bne.n	8008512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e017      	b.n	8008556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	3b01      	subs	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4013      	ands	r3, r2
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	429a      	cmp	r2, r3
 8008552:	d19b      	bne.n	800848c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200000b0 	.word	0x200000b0

08008564 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008578:	d111      	bne.n	800859e <SPI_EndRxTransaction+0x3a>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008582:	d004      	beq.n	800858e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858c:	d107      	bne.n	800859e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a6:	d12a      	bne.n	80085fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b0:	d012      	beq.n	80085d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2200      	movs	r2, #0
 80085ba:	2180      	movs	r1, #128	; 0x80
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff ff49 	bl	8008454 <SPI_WaitFlagStateUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d02d      	beq.n	8008624 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e026      	b.n	8008626 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2200      	movs	r2, #0
 80085e0:	2101      	movs	r1, #1
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff ff36 	bl	8008454 <SPI_WaitFlagStateUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01a      	beq.n	8008624 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	f043 0220 	orr.w	r2, r3, #32
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e013      	b.n	8008626 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	2101      	movs	r1, #1
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7ff ff23 	bl	8008454 <SPI_WaitFlagStateUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	f043 0220 	orr.w	r2, r3, #32
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e000      	b.n	8008626 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800863c:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <SPI_EndRxTxTransaction+0x7c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1b      	ldr	r2, [pc, #108]	; (80086b0 <SPI_EndRxTxTransaction+0x80>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	0d5b      	lsrs	r3, r3, #21
 8008648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800864c:	fb02 f303 	mul.w	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800865a:	d112      	bne.n	8008682 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	2180      	movs	r1, #128	; 0x80
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff fef4 	bl	8008454 <SPI_WaitFlagStateUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d016      	beq.n	80086a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	f043 0220 	orr.w	r2, r3, #32
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e00f      	b.n	80086a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	3b01      	subs	r3, #1
 800868c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008698:	2b80      	cmp	r3, #128	; 0x80
 800869a:	d0f2      	beq.n	8008682 <SPI_EndRxTxTransaction+0x52>
 800869c:	e000      	b.n	80086a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800869e:	bf00      	nop
  }

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200000b0 	.word	0x200000b0
 80086b0:	165e9f81 	.word	0x165e9f81

080086b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e041      	b.n	800874a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fb fe3e 	bl	800435c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f000 fae0 	bl	8008cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d001      	beq.n	800876c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e04e      	b.n	800880a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0201 	orr.w	r2, r2, #1
 8008782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a23      	ldr	r2, [pc, #140]	; (8008818 <HAL_TIM_Base_Start_IT+0xc4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d022      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d01d      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1f      	ldr	r2, [pc, #124]	; (800881c <HAL_TIM_Base_Start_IT+0xc8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d018      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a1e      	ldr	r2, [pc, #120]	; (8008820 <HAL_TIM_Base_Start_IT+0xcc>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d013      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1c      	ldr	r2, [pc, #112]	; (8008824 <HAL_TIM_Base_Start_IT+0xd0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00e      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a1b      	ldr	r2, [pc, #108]	; (8008828 <HAL_TIM_Base_Start_IT+0xd4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d009      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a19      	ldr	r2, [pc, #100]	; (800882c <HAL_TIM_Base_Start_IT+0xd8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a18      	ldr	r2, [pc, #96]	; (8008830 <HAL_TIM_Base_Start_IT+0xdc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d111      	bne.n	80087f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b06      	cmp	r3, #6
 80087e4:	d010      	beq.n	8008808 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f6:	e007      	b.n	8008808 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40010400 	.word	0x40010400
 800882c:	40014000 	.word	0x40014000
 8008830:	40001800 	.word	0x40001800

08008834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e041      	b.n	80088ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7fb fd5c 	bl	8004318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	4619      	mov	r1, r3
 8008872:	4610      	mov	r0, r2
 8008874:	f000 fa20 	bl	8008cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d122      	bne.n	800892e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d11b      	bne.n	800892e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f06f 0202 	mvn.w	r2, #2
 80088fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f9b1 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 800891a:	e005      	b.n	8008928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f9a3 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f9b4 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b04      	cmp	r3, #4
 800893a:	d122      	bne.n	8008982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b04      	cmp	r3, #4
 8008948:	d11b      	bne.n	8008982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0204 	mvn.w	r2, #4
 8008952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f987 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 800896e:	e005      	b.n	800897c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f979 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f98a 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b08      	cmp	r3, #8
 800898e:	d122      	bne.n	80089d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b08      	cmp	r3, #8
 800899c:	d11b      	bne.n	80089d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f06f 0208 	mvn.w	r2, #8
 80089a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2204      	movs	r2, #4
 80089ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f003 0303 	and.w	r3, r3, #3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f95d 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 80089c2:	e005      	b.n	80089d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f94f 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f960 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d122      	bne.n	8008a2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d11b      	bne.n	8008a2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f06f 0210 	mvn.w	r2, #16
 80089fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2208      	movs	r2, #8
 8008a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f933 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 8008a16:	e005      	b.n	8008a24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f925 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f936 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d10e      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d107      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f06f 0201 	mvn.w	r2, #1
 8008a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7fb fb9b 	bl	800418c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a60:	2b80      	cmp	r3, #128	; 0x80
 8008a62:	d10e      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b80      	cmp	r3, #128	; 0x80
 8008a70:	d107      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fbf1 	bl	8009264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d10e      	bne.n	8008aae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d107      	bne.n	8008aae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f8fb 	bl	8008ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d10e      	bne.n	8008ada <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d107      	bne.n	8008ada <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f06f 0220 	mvn.w	r2, #32
 8008ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fbbb 	bl	8009250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e0ae      	b.n	8008c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	f200 809f 	bhi.w	8008c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b12:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008c51 	.word	0x08008c51
 8008b20:	08008c51 	.word	0x08008c51
 8008b24:	08008c51 	.word	0x08008c51
 8008b28:	08008b8d 	.word	0x08008b8d
 8008b2c:	08008c51 	.word	0x08008c51
 8008b30:	08008c51 	.word	0x08008c51
 8008b34:	08008c51 	.word	0x08008c51
 8008b38:	08008bcf 	.word	0x08008bcf
 8008b3c:	08008c51 	.word	0x08008c51
 8008b40:	08008c51 	.word	0x08008c51
 8008b44:	08008c51 	.word	0x08008c51
 8008b48:	08008c0f 	.word	0x08008c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f950 	bl	8008df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699a      	ldr	r2, [r3, #24]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0204 	bic.w	r2, r2, #4
 8008b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6999      	ldr	r1, [r3, #24]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	619a      	str	r2, [r3, #24]
      break;
 8008b8a:	e064      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f9a0 	bl	8008ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	699a      	ldr	r2, [r3, #24]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6999      	ldr	r1, [r3, #24]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	021a      	lsls	r2, r3, #8
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	619a      	str	r2, [r3, #24]
      break;
 8008bcc:	e043      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 f9f5 	bl	8008fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69da      	ldr	r2, [r3, #28]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f042 0208 	orr.w	r2, r2, #8
 8008be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69da      	ldr	r2, [r3, #28]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0204 	bic.w	r2, r2, #4
 8008bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69d9      	ldr	r1, [r3, #28]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	61da      	str	r2, [r3, #28]
      break;
 8008c0c:	e023      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fa49 	bl	80090ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69da      	ldr	r2, [r3, #28]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69d9      	ldr	r1, [r3, #28]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	021a      	lsls	r2, r3, #8
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	61da      	str	r2, [r3, #28]
      break;
 8008c4e:	e002      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
      break;
 8008c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a40      	ldr	r2, [pc, #256]	; (8008dcc <TIM_Base_SetConfig+0x114>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d013      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd6:	d00f      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a3d      	ldr	r2, [pc, #244]	; (8008dd0 <TIM_Base_SetConfig+0x118>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00b      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3c      	ldr	r2, [pc, #240]	; (8008dd4 <TIM_Base_SetConfig+0x11c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d007      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3b      	ldr	r2, [pc, #236]	; (8008dd8 <TIM_Base_SetConfig+0x120>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a3a      	ldr	r2, [pc, #232]	; (8008ddc <TIM_Base_SetConfig+0x124>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d108      	bne.n	8008d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a2f      	ldr	r2, [pc, #188]	; (8008dcc <TIM_Base_SetConfig+0x114>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d02b      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d18:	d027      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a2c      	ldr	r2, [pc, #176]	; (8008dd0 <TIM_Base_SetConfig+0x118>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d023      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a2b      	ldr	r2, [pc, #172]	; (8008dd4 <TIM_Base_SetConfig+0x11c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d01f      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2a      	ldr	r2, [pc, #168]	; (8008dd8 <TIM_Base_SetConfig+0x120>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d01b      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a29      	ldr	r2, [pc, #164]	; (8008ddc <TIM_Base_SetConfig+0x124>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d017      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a28      	ldr	r2, [pc, #160]	; (8008de0 <TIM_Base_SetConfig+0x128>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d013      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a27      	ldr	r2, [pc, #156]	; (8008de4 <TIM_Base_SetConfig+0x12c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00f      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a26      	ldr	r2, [pc, #152]	; (8008de8 <TIM_Base_SetConfig+0x130>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00b      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a25      	ldr	r2, [pc, #148]	; (8008dec <TIM_Base_SetConfig+0x134>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d007      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a24      	ldr	r2, [pc, #144]	; (8008df0 <TIM_Base_SetConfig+0x138>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <TIM_Base_SetConfig+0x13c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d108      	bne.n	8008d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <TIM_Base_SetConfig+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_Base_SetConfig+0xf8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a0c      	ldr	r2, [pc, #48]	; (8008ddc <TIM_Base_SetConfig+0x124>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d103      	bne.n	8008db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	615a      	str	r2, [r3, #20]
}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40010000 	.word	0x40010000
 8008dd0:	40000400 	.word	0x40000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	40000c00 	.word	0x40000c00
 8008ddc:	40010400 	.word	0x40010400
 8008de0:	40014000 	.word	0x40014000
 8008de4:	40014400 	.word	0x40014400
 8008de8:	40014800 	.word	0x40014800
 8008dec:	40001800 	.word	0x40001800
 8008df0:	40001c00 	.word	0x40001c00
 8008df4:	40002000 	.word	0x40002000

08008df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	f023 0201 	bic.w	r2, r3, #1
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f023 0303 	bic.w	r3, r3, #3
 8008e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f023 0302 	bic.w	r3, r3, #2
 8008e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a20      	ldr	r2, [pc, #128]	; (8008ed0 <TIM_OC1_SetConfig+0xd8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_OC1_SetConfig+0x64>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a1f      	ldr	r2, [pc, #124]	; (8008ed4 <TIM_OC1_SetConfig+0xdc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d10c      	bne.n	8008e76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 0308 	bic.w	r3, r3, #8
 8008e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f023 0304 	bic.w	r3, r3, #4
 8008e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a15      	ldr	r2, [pc, #84]	; (8008ed0 <TIM_OC1_SetConfig+0xd8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d003      	beq.n	8008e86 <TIM_OC1_SetConfig+0x8e>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a14      	ldr	r2, [pc, #80]	; (8008ed4 <TIM_OC1_SetConfig+0xdc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d111      	bne.n	8008eaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	621a      	str	r2, [r3, #32]
}
 8008ec4:	bf00      	nop
 8008ec6:	371c      	adds	r7, #28
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40010400 	.word	0x40010400

08008ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f023 0210 	bic.w	r2, r3, #16
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	021b      	lsls	r3, r3, #8
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f023 0320 	bic.w	r3, r3, #32
 8008f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a22      	ldr	r2, [pc, #136]	; (8008fbc <TIM_OC2_SetConfig+0xe4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_OC2_SetConfig+0x68>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a21      	ldr	r2, [pc, #132]	; (8008fc0 <TIM_OC2_SetConfig+0xe8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d10d      	bne.n	8008f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <TIM_OC2_SetConfig+0xe4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_OC2_SetConfig+0x94>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <TIM_OC2_SetConfig+0xe8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d113      	bne.n	8008f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	621a      	str	r2, [r3, #32]
}
 8008fae:	bf00      	nop
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40010400 	.word	0x40010400

08008fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800900c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	4313      	orrs	r3, r2
 8009018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a21      	ldr	r2, [pc, #132]	; (80090a4 <TIM_OC3_SetConfig+0xe0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d003      	beq.n	800902a <TIM_OC3_SetConfig+0x66>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <TIM_OC3_SetConfig+0xe4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d10d      	bne.n	8009046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a16      	ldr	r2, [pc, #88]	; (80090a4 <TIM_OC3_SetConfig+0xe0>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d003      	beq.n	8009056 <TIM_OC3_SetConfig+0x92>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <TIM_OC3_SetConfig+0xe4>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d113      	bne.n	800907e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4313      	orrs	r3, r2
 800907c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	621a      	str	r2, [r3, #32]
}
 8009098:	bf00      	nop
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	40010000 	.word	0x40010000
 80090a8:	40010400 	.word	0x40010400

080090ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	031b      	lsls	r3, r3, #12
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a12      	ldr	r2, [pc, #72]	; (8009150 <TIM_OC4_SetConfig+0xa4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_OC4_SetConfig+0x68>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a11      	ldr	r2, [pc, #68]	; (8009154 <TIM_OC4_SetConfig+0xa8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d109      	bne.n	8009128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800911a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	019b      	lsls	r3, r3, #6
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	621a      	str	r2, [r3, #32]
}
 8009142:	bf00      	nop
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40010000 	.word	0x40010000
 8009154:	40010400 	.word	0x40010400

08009158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800916c:	2302      	movs	r3, #2
 800916e:	e05a      	b.n	8009226 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a21      	ldr	r2, [pc, #132]	; (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d022      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091bc:	d01d      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1d      	ldr	r2, [pc, #116]	; (8009238 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d018      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1b      	ldr	r2, [pc, #108]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d013      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1a      	ldr	r2, [pc, #104]	; (8009240 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00e      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a18      	ldr	r2, [pc, #96]	; (8009244 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d009      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a17      	ldr	r2, [pc, #92]	; (8009248 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d004      	beq.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a15      	ldr	r2, [pc, #84]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d10c      	bne.n	8009214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	4313      	orrs	r3, r2
 800920a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40010000 	.word	0x40010000
 8009238:	40000400 	.word	0x40000400
 800923c:	40000800 	.word	0x40000800
 8009240:	40000c00 	.word	0x40000c00
 8009244:	40010400 	.word	0x40010400
 8009248:	40014000 	.word	0x40014000
 800924c:	40001800 	.word	0x40001800

08009250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e03f      	b.n	800930a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fb f930 	bl	8004504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2224      	movs	r2, #36	; 0x24
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f929 	bl	8009514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695a      	ldr	r2, [r3, #20]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b08a      	sub	sp, #40	; 0x28
 8009316:	af02      	add	r7, sp, #8
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b20      	cmp	r3, #32
 8009330:	d17c      	bne.n	800942c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <HAL_UART_Transmit+0x2c>
 8009338:	88fb      	ldrh	r3, [r7, #6]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e075      	b.n	800942e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_UART_Transmit+0x3e>
 800934c:	2302      	movs	r3, #2
 800934e:	e06e      	b.n	800942e <HAL_UART_Transmit+0x11c>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2221      	movs	r2, #33	; 0x21
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009366:	f7fb f9fd 	bl	8004764 <HAL_GetTick>
 800936a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	88fa      	ldrh	r2, [r7, #6]
 8009370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009380:	d108      	bne.n	8009394 <HAL_UART_Transmit+0x82>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	61bb      	str	r3, [r7, #24]
 8009392:	e003      	b.n	800939c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009398:	2300      	movs	r3, #0
 800939a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80093a4:	e02a      	b.n	80093fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2200      	movs	r2, #0
 80093ae:	2180      	movs	r1, #128	; 0x80
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f840 	bl	8009436 <UART_WaitOnFlagUntilTimeout>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e036      	b.n	800942e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10b      	bne.n	80093de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	3302      	adds	r3, #2
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	e007      	b.n	80093ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3301      	adds	r3, #1
 80093ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009400:	b29b      	uxth	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1cf      	bne.n	80093a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2200      	movs	r2, #0
 800940e:	2140      	movs	r1, #64	; 0x40
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f810 	bl	8009436 <UART_WaitOnFlagUntilTimeout>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e006      	b.n	800942e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	e000      	b.n	800942e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800942c:	2302      	movs	r3, #2
  }
}
 800942e:	4618      	mov	r0, r3
 8009430:	3720      	adds	r7, #32
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b090      	sub	sp, #64	; 0x40
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009446:	e050      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944e:	d04c      	beq.n	80094ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009452:	2b00      	cmp	r3, #0
 8009454:	d007      	beq.n	8009466 <UART_WaitOnFlagUntilTimeout+0x30>
 8009456:	f7fb f985 	bl	8004764 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009462:	429a      	cmp	r2, r3
 8009464:	d241      	bcs.n	80094ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009486:	637a      	str	r2, [r7, #52]	; 0x34
 8009488:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800948c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e5      	bne.n	8009466 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3314      	adds	r3, #20
 80094a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	613b      	str	r3, [r7, #16]
   return(result);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	f023 0301 	bic.w	r3, r3, #1
 80094b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3314      	adds	r3, #20
 80094b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094ba:	623a      	str	r2, [r7, #32]
 80094bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	69f9      	ldr	r1, [r7, #28]
 80094c0:	6a3a      	ldr	r2, [r7, #32]
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e5      	bne.n	800949a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2220      	movs	r2, #32
 80094da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e00f      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4013      	ands	r3, r2
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	bf0c      	ite	eq
 80094fa:	2301      	moveq	r3, #1
 80094fc:	2300      	movne	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	461a      	mov	r2, r3
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	429a      	cmp	r2, r3
 8009506:	d09f      	beq.n	8009448 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3740      	adds	r7, #64	; 0x40
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009518:	b0c0      	sub	sp, #256	; 0x100
 800951a:	af00      	add	r7, sp, #0
 800951c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009530:	68d9      	ldr	r1, [r3, #12]
 8009532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	ea40 0301 	orr.w	r3, r0, r1
 800953c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	431a      	orrs	r2, r3
 800954c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	431a      	orrs	r2, r3
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	4313      	orrs	r3, r2
 800955c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800956c:	f021 010c 	bic.w	r1, r1, #12
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800957a:	430b      	orrs	r3, r1
 800957c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800957e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800958a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958e:	6999      	ldr	r1, [r3, #24]
 8009590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	ea40 0301 	orr.w	r3, r0, r1
 800959a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	4b8f      	ldr	r3, [pc, #572]	; (80097e0 <UART_SetConfig+0x2cc>)
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d005      	beq.n	80095b4 <UART_SetConfig+0xa0>
 80095a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b8d      	ldr	r3, [pc, #564]	; (80097e4 <UART_SetConfig+0x2d0>)
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d104      	bne.n	80095be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095b4:	f7fe f9a4 	bl	8007900 <HAL_RCC_GetPCLK2Freq>
 80095b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095bc:	e003      	b.n	80095c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095be:	f7fe f98b 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 80095c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d0:	f040 810c 	bne.w	80097ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	1891      	adds	r1, r2, r2
 80095ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80095ee:	415b      	adcs	r3, r3
 80095f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095f6:	4621      	mov	r1, r4
 80095f8:	eb12 0801 	adds.w	r8, r2, r1
 80095fc:	4629      	mov	r1, r5
 80095fe:	eb43 0901 	adc.w	r9, r3, r1
 8009602:	f04f 0200 	mov.w	r2, #0
 8009606:	f04f 0300 	mov.w	r3, #0
 800960a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800960e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009616:	4690      	mov	r8, r2
 8009618:	4699      	mov	r9, r3
 800961a:	4623      	mov	r3, r4
 800961c:	eb18 0303 	adds.w	r3, r8, r3
 8009620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009624:	462b      	mov	r3, r5
 8009626:	eb49 0303 	adc.w	r3, r9, r3
 800962a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800962e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800963a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800963e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009642:	460b      	mov	r3, r1
 8009644:	18db      	adds	r3, r3, r3
 8009646:	653b      	str	r3, [r7, #80]	; 0x50
 8009648:	4613      	mov	r3, r2
 800964a:	eb42 0303 	adc.w	r3, r2, r3
 800964e:	657b      	str	r3, [r7, #84]	; 0x54
 8009650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009658:	f7f6 fdbe 	bl	80001d8 <__aeabi_uldivmod>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4b61      	ldr	r3, [pc, #388]	; (80097e8 <UART_SetConfig+0x2d4>)
 8009662:	fba3 2302 	umull	r2, r3, r3, r2
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	011c      	lsls	r4, r3, #4
 800966a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966e:	2200      	movs	r2, #0
 8009670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800967c:	4642      	mov	r2, r8
 800967e:	464b      	mov	r3, r9
 8009680:	1891      	adds	r1, r2, r2
 8009682:	64b9      	str	r1, [r7, #72]	; 0x48
 8009684:	415b      	adcs	r3, r3
 8009686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800968c:	4641      	mov	r1, r8
 800968e:	eb12 0a01 	adds.w	sl, r2, r1
 8009692:	4649      	mov	r1, r9
 8009694:	eb43 0b01 	adc.w	fp, r3, r1
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	f04f 0300 	mov.w	r3, #0
 80096a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096ac:	4692      	mov	sl, r2
 80096ae:	469b      	mov	fp, r3
 80096b0:	4643      	mov	r3, r8
 80096b2:	eb1a 0303 	adds.w	r3, sl, r3
 80096b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096ba:	464b      	mov	r3, r9
 80096bc:	eb4b 0303 	adc.w	r3, fp, r3
 80096c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096d8:	460b      	mov	r3, r1
 80096da:	18db      	adds	r3, r3, r3
 80096dc:	643b      	str	r3, [r7, #64]	; 0x40
 80096de:	4613      	mov	r3, r2
 80096e0:	eb42 0303 	adc.w	r3, r2, r3
 80096e4:	647b      	str	r3, [r7, #68]	; 0x44
 80096e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096ee:	f7f6 fd73 	bl	80001d8 <__aeabi_uldivmod>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4611      	mov	r1, r2
 80096f8:	4b3b      	ldr	r3, [pc, #236]	; (80097e8 <UART_SetConfig+0x2d4>)
 80096fa:	fba3 2301 	umull	r2, r3, r3, r1
 80096fe:	095b      	lsrs	r3, r3, #5
 8009700:	2264      	movs	r2, #100	; 0x64
 8009702:	fb02 f303 	mul.w	r3, r2, r3
 8009706:	1acb      	subs	r3, r1, r3
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800970e:	4b36      	ldr	r3, [pc, #216]	; (80097e8 <UART_SetConfig+0x2d4>)
 8009710:	fba3 2302 	umull	r2, r3, r3, r2
 8009714:	095b      	lsrs	r3, r3, #5
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800971c:	441c      	add	r4, r3
 800971e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009722:	2200      	movs	r2, #0
 8009724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800972c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009730:	4642      	mov	r2, r8
 8009732:	464b      	mov	r3, r9
 8009734:	1891      	adds	r1, r2, r2
 8009736:	63b9      	str	r1, [r7, #56]	; 0x38
 8009738:	415b      	adcs	r3, r3
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009740:	4641      	mov	r1, r8
 8009742:	1851      	adds	r1, r2, r1
 8009744:	6339      	str	r1, [r7, #48]	; 0x30
 8009746:	4649      	mov	r1, r9
 8009748:	414b      	adcs	r3, r1
 800974a:	637b      	str	r3, [r7, #52]	; 0x34
 800974c:	f04f 0200 	mov.w	r2, #0
 8009750:	f04f 0300 	mov.w	r3, #0
 8009754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009758:	4659      	mov	r1, fp
 800975a:	00cb      	lsls	r3, r1, #3
 800975c:	4651      	mov	r1, sl
 800975e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009762:	4651      	mov	r1, sl
 8009764:	00ca      	lsls	r2, r1, #3
 8009766:	4610      	mov	r0, r2
 8009768:	4619      	mov	r1, r3
 800976a:	4603      	mov	r3, r0
 800976c:	4642      	mov	r2, r8
 800976e:	189b      	adds	r3, r3, r2
 8009770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009774:	464b      	mov	r3, r9
 8009776:	460a      	mov	r2, r1
 8009778:	eb42 0303 	adc.w	r3, r2, r3
 800977c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800978c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009794:	460b      	mov	r3, r1
 8009796:	18db      	adds	r3, r3, r3
 8009798:	62bb      	str	r3, [r7, #40]	; 0x28
 800979a:	4613      	mov	r3, r2
 800979c:	eb42 0303 	adc.w	r3, r2, r3
 80097a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80097aa:	f7f6 fd15 	bl	80001d8 <__aeabi_uldivmod>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <UART_SetConfig+0x2d4>)
 80097b4:	fba3 1302 	umull	r1, r3, r3, r2
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	2164      	movs	r1, #100	; 0x64
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	3332      	adds	r3, #50	; 0x32
 80097c6:	4a08      	ldr	r2, [pc, #32]	; (80097e8 <UART_SetConfig+0x2d4>)
 80097c8:	fba2 2303 	umull	r2, r3, r2, r3
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	f003 0207 	and.w	r2, r3, #7
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4422      	add	r2, r4
 80097da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097dc:	e105      	b.n	80099ea <UART_SetConfig+0x4d6>
 80097de:	bf00      	nop
 80097e0:	40011000 	.word	0x40011000
 80097e4:	40011400 	.word	0x40011400
 80097e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097fe:	4642      	mov	r2, r8
 8009800:	464b      	mov	r3, r9
 8009802:	1891      	adds	r1, r2, r2
 8009804:	6239      	str	r1, [r7, #32]
 8009806:	415b      	adcs	r3, r3
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
 800980a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800980e:	4641      	mov	r1, r8
 8009810:	1854      	adds	r4, r2, r1
 8009812:	4649      	mov	r1, r9
 8009814:	eb43 0501 	adc.w	r5, r3, r1
 8009818:	f04f 0200 	mov.w	r2, #0
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	00eb      	lsls	r3, r5, #3
 8009822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009826:	00e2      	lsls	r2, r4, #3
 8009828:	4614      	mov	r4, r2
 800982a:	461d      	mov	r5, r3
 800982c:	4643      	mov	r3, r8
 800982e:	18e3      	adds	r3, r4, r3
 8009830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009834:	464b      	mov	r3, r9
 8009836:	eb45 0303 	adc.w	r3, r5, r3
 800983a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800983e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800984a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800984e:	f04f 0200 	mov.w	r2, #0
 8009852:	f04f 0300 	mov.w	r3, #0
 8009856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800985a:	4629      	mov	r1, r5
 800985c:	008b      	lsls	r3, r1, #2
 800985e:	4621      	mov	r1, r4
 8009860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009864:	4621      	mov	r1, r4
 8009866:	008a      	lsls	r2, r1, #2
 8009868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800986c:	f7f6 fcb4 	bl	80001d8 <__aeabi_uldivmod>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4b60      	ldr	r3, [pc, #384]	; (80099f8 <UART_SetConfig+0x4e4>)
 8009876:	fba3 2302 	umull	r2, r3, r3, r2
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	011c      	lsls	r4, r3, #4
 800987e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009882:	2200      	movs	r2, #0
 8009884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800988c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	1891      	adds	r1, r2, r2
 8009896:	61b9      	str	r1, [r7, #24]
 8009898:	415b      	adcs	r3, r3
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098a0:	4641      	mov	r1, r8
 80098a2:	1851      	adds	r1, r2, r1
 80098a4:	6139      	str	r1, [r7, #16]
 80098a6:	4649      	mov	r1, r9
 80098a8:	414b      	adcs	r3, r1
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098b8:	4659      	mov	r1, fp
 80098ba:	00cb      	lsls	r3, r1, #3
 80098bc:	4651      	mov	r1, sl
 80098be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098c2:	4651      	mov	r1, sl
 80098c4:	00ca      	lsls	r2, r1, #3
 80098c6:	4610      	mov	r0, r2
 80098c8:	4619      	mov	r1, r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	4642      	mov	r2, r8
 80098ce:	189b      	adds	r3, r3, r2
 80098d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098d4:	464b      	mov	r3, r9
 80098d6:	460a      	mov	r2, r1
 80098d8:	eb42 0303 	adc.w	r3, r2, r3
 80098dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098f8:	4649      	mov	r1, r9
 80098fa:	008b      	lsls	r3, r1, #2
 80098fc:	4641      	mov	r1, r8
 80098fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009902:	4641      	mov	r1, r8
 8009904:	008a      	lsls	r2, r1, #2
 8009906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800990a:	f7f6 fc65 	bl	80001d8 <__aeabi_uldivmod>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4b39      	ldr	r3, [pc, #228]	; (80099f8 <UART_SetConfig+0x4e4>)
 8009914:	fba3 1302 	umull	r1, r3, r3, r2
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	2164      	movs	r1, #100	; 0x64
 800991c:	fb01 f303 	mul.w	r3, r1, r3
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	3332      	adds	r3, #50	; 0x32
 8009926:	4a34      	ldr	r2, [pc, #208]	; (80099f8 <UART_SetConfig+0x4e4>)
 8009928:	fba2 2303 	umull	r2, r3, r2, r3
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009932:	441c      	add	r4, r3
 8009934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009938:	2200      	movs	r2, #0
 800993a:	673b      	str	r3, [r7, #112]	; 0x70
 800993c:	677a      	str	r2, [r7, #116]	; 0x74
 800993e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009942:	4642      	mov	r2, r8
 8009944:	464b      	mov	r3, r9
 8009946:	1891      	adds	r1, r2, r2
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	415b      	adcs	r3, r3
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009952:	4641      	mov	r1, r8
 8009954:	1851      	adds	r1, r2, r1
 8009956:	6039      	str	r1, [r7, #0]
 8009958:	4649      	mov	r1, r9
 800995a:	414b      	adcs	r3, r1
 800995c:	607b      	str	r3, [r7, #4]
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	f04f 0300 	mov.w	r3, #0
 8009966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800996a:	4659      	mov	r1, fp
 800996c:	00cb      	lsls	r3, r1, #3
 800996e:	4651      	mov	r1, sl
 8009970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009974:	4651      	mov	r1, sl
 8009976:	00ca      	lsls	r2, r1, #3
 8009978:	4610      	mov	r0, r2
 800997a:	4619      	mov	r1, r3
 800997c:	4603      	mov	r3, r0
 800997e:	4642      	mov	r2, r8
 8009980:	189b      	adds	r3, r3, r2
 8009982:	66bb      	str	r3, [r7, #104]	; 0x68
 8009984:	464b      	mov	r3, r9
 8009986:	460a      	mov	r2, r1
 8009988:	eb42 0303 	adc.w	r3, r2, r3
 800998c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800998e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	663b      	str	r3, [r7, #96]	; 0x60
 8009998:	667a      	str	r2, [r7, #100]	; 0x64
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80099a6:	4649      	mov	r1, r9
 80099a8:	008b      	lsls	r3, r1, #2
 80099aa:	4641      	mov	r1, r8
 80099ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099b0:	4641      	mov	r1, r8
 80099b2:	008a      	lsls	r2, r1, #2
 80099b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099b8:	f7f6 fc0e 	bl	80001d8 <__aeabi_uldivmod>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <UART_SetConfig+0x4e4>)
 80099c2:	fba3 1302 	umull	r1, r3, r3, r2
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	2164      	movs	r1, #100	; 0x64
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	3332      	adds	r3, #50	; 0x32
 80099d4:	4a08      	ldr	r2, [pc, #32]	; (80099f8 <UART_SetConfig+0x4e4>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	095b      	lsrs	r3, r3, #5
 80099dc:	f003 020f 	and.w	r2, r3, #15
 80099e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4422      	add	r2, r4
 80099e8:	609a      	str	r2, [r3, #8]
}
 80099ea:	bf00      	nop
 80099ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099f0:	46bd      	mov	sp, r7
 80099f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099f6:	bf00      	nop
 80099f8:	51eb851f 	.word	0x51eb851f

080099fc <__libc_init_array>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	4d0d      	ldr	r5, [pc, #52]	; (8009a34 <__libc_init_array+0x38>)
 8009a00:	4c0d      	ldr	r4, [pc, #52]	; (8009a38 <__libc_init_array+0x3c>)
 8009a02:	1b64      	subs	r4, r4, r5
 8009a04:	10a4      	asrs	r4, r4, #2
 8009a06:	2600      	movs	r6, #0
 8009a08:	42a6      	cmp	r6, r4
 8009a0a:	d109      	bne.n	8009a20 <__libc_init_array+0x24>
 8009a0c:	4d0b      	ldr	r5, [pc, #44]	; (8009a3c <__libc_init_array+0x40>)
 8009a0e:	4c0c      	ldr	r4, [pc, #48]	; (8009a40 <__libc_init_array+0x44>)
 8009a10:	f000 f87c 	bl	8009b0c <_init>
 8009a14:	1b64      	subs	r4, r4, r5
 8009a16:	10a4      	asrs	r4, r4, #2
 8009a18:	2600      	movs	r6, #0
 8009a1a:	42a6      	cmp	r6, r4
 8009a1c:	d105      	bne.n	8009a2a <__libc_init_array+0x2e>
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a24:	4798      	blx	r3
 8009a26:	3601      	adds	r6, #1
 8009a28:	e7ee      	b.n	8009a08 <__libc_init_array+0xc>
 8009a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2e:	4798      	blx	r3
 8009a30:	3601      	adds	r6, #1
 8009a32:	e7f2      	b.n	8009a1a <__libc_init_array+0x1e>
 8009a34:	0800c824 	.word	0x0800c824
 8009a38:	0800c824 	.word	0x0800c824
 8009a3c:	0800c824 	.word	0x0800c824
 8009a40:	0800c828 	.word	0x0800c828

08009a44 <__itoa>:
 8009a44:	1e93      	subs	r3, r2, #2
 8009a46:	2b22      	cmp	r3, #34	; 0x22
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	d904      	bls.n	8009a58 <__itoa+0x14>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	700b      	strb	r3, [r1, #0]
 8009a52:	461c      	mov	r4, r3
 8009a54:	4620      	mov	r0, r4
 8009a56:	bd10      	pop	{r4, pc}
 8009a58:	2a0a      	cmp	r2, #10
 8009a5a:	d109      	bne.n	8009a70 <__itoa+0x2c>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	da07      	bge.n	8009a70 <__itoa+0x2c>
 8009a60:	232d      	movs	r3, #45	; 0x2d
 8009a62:	700b      	strb	r3, [r1, #0]
 8009a64:	4240      	negs	r0, r0
 8009a66:	2101      	movs	r1, #1
 8009a68:	4421      	add	r1, r4
 8009a6a:	f000 f80d 	bl	8009a88 <__utoa>
 8009a6e:	e7f1      	b.n	8009a54 <__itoa+0x10>
 8009a70:	2100      	movs	r1, #0
 8009a72:	e7f9      	b.n	8009a68 <__itoa+0x24>

08009a74 <itoa>:
 8009a74:	f7ff bfe6 	b.w	8009a44 <__itoa>

08009a78 <memset>:
 8009a78:	4402      	add	r2, r0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d100      	bne.n	8009a82 <memset+0xa>
 8009a80:	4770      	bx	lr
 8009a82:	f803 1b01 	strb.w	r1, [r3], #1
 8009a86:	e7f9      	b.n	8009a7c <memset+0x4>

08009a88 <__utoa>:
 8009a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8a:	4c1f      	ldr	r4, [pc, #124]	; (8009b08 <__utoa+0x80>)
 8009a8c:	b08b      	sub	sp, #44	; 0x2c
 8009a8e:	4605      	mov	r5, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	466e      	mov	r6, sp
 8009a94:	f104 0c20 	add.w	ip, r4, #32
 8009a98:	6820      	ldr	r0, [r4, #0]
 8009a9a:	6861      	ldr	r1, [r4, #4]
 8009a9c:	4637      	mov	r7, r6
 8009a9e:	c703      	stmia	r7!, {r0, r1}
 8009aa0:	3408      	adds	r4, #8
 8009aa2:	4564      	cmp	r4, ip
 8009aa4:	463e      	mov	r6, r7
 8009aa6:	d1f7      	bne.n	8009a98 <__utoa+0x10>
 8009aa8:	7921      	ldrb	r1, [r4, #4]
 8009aaa:	7139      	strb	r1, [r7, #4]
 8009aac:	1e91      	subs	r1, r2, #2
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	6038      	str	r0, [r7, #0]
 8009ab2:	2922      	cmp	r1, #34	; 0x22
 8009ab4:	f04f 0100 	mov.w	r1, #0
 8009ab8:	d904      	bls.n	8009ac4 <__utoa+0x3c>
 8009aba:	7019      	strb	r1, [r3, #0]
 8009abc:	460b      	mov	r3, r1
 8009abe:	4618      	mov	r0, r3
 8009ac0:	b00b      	add	sp, #44	; 0x2c
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac4:	1e58      	subs	r0, r3, #1
 8009ac6:	4684      	mov	ip, r0
 8009ac8:	fbb5 f7f2 	udiv	r7, r5, r2
 8009acc:	fb02 5617 	mls	r6, r2, r7, r5
 8009ad0:	3628      	adds	r6, #40	; 0x28
 8009ad2:	446e      	add	r6, sp
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009ada:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009ade:	462e      	mov	r6, r5
 8009ae0:	42b2      	cmp	r2, r6
 8009ae2:	f101 0101 	add.w	r1, r1, #1
 8009ae6:	463d      	mov	r5, r7
 8009ae8:	d9ee      	bls.n	8009ac8 <__utoa+0x40>
 8009aea:	2200      	movs	r2, #0
 8009aec:	545a      	strb	r2, [r3, r1]
 8009aee:	1919      	adds	r1, r3, r4
 8009af0:	1aa5      	subs	r5, r4, r2
 8009af2:	42aa      	cmp	r2, r5
 8009af4:	dae3      	bge.n	8009abe <__utoa+0x36>
 8009af6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009afa:	780e      	ldrb	r6, [r1, #0]
 8009afc:	7006      	strb	r6, [r0, #0]
 8009afe:	3201      	adds	r2, #1
 8009b00:	f801 5901 	strb.w	r5, [r1], #-1
 8009b04:	e7f4      	b.n	8009af0 <__utoa+0x68>
 8009b06:	bf00      	nop
 8009b08:	0800c7f4 	.word	0x0800c7f4

08009b0c <_init>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr

08009b18 <_fini>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	bf00      	nop
 8009b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1e:	bc08      	pop	{r3}
 8009b20:	469e      	mov	lr, r3
 8009b22:	4770      	bx	lr
