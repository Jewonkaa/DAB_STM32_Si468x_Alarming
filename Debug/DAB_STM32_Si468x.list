
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d278  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003630  0800d400  0800d400  0001d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a30  08010a30  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08010a30  08010a30  00020a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a38  08010a38  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a38  08010a38  00020a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a3c  08010a3c  00020a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08010a40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030188  2**0
                  CONTENTS
 10 .bss          00007050  20000188  20000188  00030188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200071d8  200071d8  00030188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001966f  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ad  00000000  00000000  00049827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0004d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f0  00000000  00000000  0004e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024596  00000000  00000000  0004fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd02  00000000  00000000  000740a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c18  00000000  00000000  00090da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001639c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058bc  00000000  00000000  00163a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d3e8 	.word	0x0800d3e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d3e8 	.word	0x0800d3e8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ILI9341_Init>:
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	f000 f914 	bl	8000720 <ILI9341_Reset>
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fb97 	bl	8000c2c <ILI9341_Send_Command>
 80004fe:	20cb      	movs	r0, #203	; 0xcb
 8000500:	f000 fb94 	bl	8000c2c <ILI9341_Send_Command>
 8000504:	2039      	movs	r0, #57	; 0x39
 8000506:	f000 fba0 	bl	8000c4a <ILI9341_Send_Data>
 800050a:	202c      	movs	r0, #44	; 0x2c
 800050c:	f000 fb9d 	bl	8000c4a <ILI9341_Send_Data>
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fb9a 	bl	8000c4a <ILI9341_Send_Data>
 8000516:	2034      	movs	r0, #52	; 0x34
 8000518:	f000 fb97 	bl	8000c4a <ILI9341_Send_Data>
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fb94 	bl	8000c4a <ILI9341_Send_Data>
 8000522:	20cf      	movs	r0, #207	; 0xcf
 8000524:	f000 fb82 	bl	8000c2c <ILI9341_Send_Command>
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fb8e 	bl	8000c4a <ILI9341_Send_Data>
 800052e:	20c1      	movs	r0, #193	; 0xc1
 8000530:	f000 fb8b 	bl	8000c4a <ILI9341_Send_Data>
 8000534:	2030      	movs	r0, #48	; 0x30
 8000536:	f000 fb88 	bl	8000c4a <ILI9341_Send_Data>
 800053a:	20e8      	movs	r0, #232	; 0xe8
 800053c:	f000 fb76 	bl	8000c2c <ILI9341_Send_Command>
 8000540:	2085      	movs	r0, #133	; 0x85
 8000542:	f000 fb82 	bl	8000c4a <ILI9341_Send_Data>
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb7f 	bl	8000c4a <ILI9341_Send_Data>
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fb7c 	bl	8000c4a <ILI9341_Send_Data>
 8000552:	20ea      	movs	r0, #234	; 0xea
 8000554:	f000 fb6a 	bl	8000c2c <ILI9341_Send_Command>
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb76 	bl	8000c4a <ILI9341_Send_Data>
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fb73 	bl	8000c4a <ILI9341_Send_Data>
 8000564:	20ed      	movs	r0, #237	; 0xed
 8000566:	f000 fb61 	bl	8000c2c <ILI9341_Send_Command>
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f000 fb6d 	bl	8000c4a <ILI9341_Send_Data>
 8000570:	2003      	movs	r0, #3
 8000572:	f000 fb6a 	bl	8000c4a <ILI9341_Send_Data>
 8000576:	2012      	movs	r0, #18
 8000578:	f000 fb67 	bl	8000c4a <ILI9341_Send_Data>
 800057c:	2081      	movs	r0, #129	; 0x81
 800057e:	f000 fb64 	bl	8000c4a <ILI9341_Send_Data>
 8000582:	20f7      	movs	r0, #247	; 0xf7
 8000584:	f000 fb52 	bl	8000c2c <ILI9341_Send_Command>
 8000588:	2020      	movs	r0, #32
 800058a:	f000 fb5e 	bl	8000c4a <ILI9341_Send_Data>
 800058e:	20c0      	movs	r0, #192	; 0xc0
 8000590:	f000 fb4c 	bl	8000c2c <ILI9341_Send_Command>
 8000594:	2010      	movs	r0, #16
 8000596:	f000 fb58 	bl	8000c4a <ILI9341_Send_Data>
 800059a:	20c1      	movs	r0, #193	; 0xc1
 800059c:	f000 fb46 	bl	8000c2c <ILI9341_Send_Command>
 80005a0:	2010      	movs	r0, #16
 80005a2:	f000 fb52 	bl	8000c4a <ILI9341_Send_Data>
 80005a6:	20c5      	movs	r0, #197	; 0xc5
 80005a8:	f000 fb40 	bl	8000c2c <ILI9341_Send_Command>
 80005ac:	203e      	movs	r0, #62	; 0x3e
 80005ae:	f000 fb4c 	bl	8000c4a <ILI9341_Send_Data>
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fb49 	bl	8000c4a <ILI9341_Send_Data>
 80005b8:	20c7      	movs	r0, #199	; 0xc7
 80005ba:	f000 fb37 	bl	8000c2c <ILI9341_Send_Command>
 80005be:	2086      	movs	r0, #134	; 0x86
 80005c0:	f000 fb43 	bl	8000c4a <ILI9341_Send_Data>
 80005c4:	2036      	movs	r0, #54	; 0x36
 80005c6:	f000 fb31 	bl	8000c2c <ILI9341_Send_Command>
 80005ca:	2048      	movs	r0, #72	; 0x48
 80005cc:	f000 fb3d 	bl	8000c4a <ILI9341_Send_Data>
 80005d0:	203a      	movs	r0, #58	; 0x3a
 80005d2:	f000 fb2b 	bl	8000c2c <ILI9341_Send_Command>
 80005d6:	2055      	movs	r0, #85	; 0x55
 80005d8:	f000 fb37 	bl	8000c4a <ILI9341_Send_Data>
 80005dc:	20b1      	movs	r0, #177	; 0xb1
 80005de:	f000 fb25 	bl	8000c2c <ILI9341_Send_Command>
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fb31 	bl	8000c4a <ILI9341_Send_Data>
 80005e8:	2018      	movs	r0, #24
 80005ea:	f000 fb2e 	bl	8000c4a <ILI9341_Send_Data>
 80005ee:	20b6      	movs	r0, #182	; 0xb6
 80005f0:	f000 fb1c 	bl	8000c2c <ILI9341_Send_Command>
 80005f4:	2008      	movs	r0, #8
 80005f6:	f000 fb28 	bl	8000c4a <ILI9341_Send_Data>
 80005fa:	2082      	movs	r0, #130	; 0x82
 80005fc:	f000 fb25 	bl	8000c4a <ILI9341_Send_Data>
 8000600:	2027      	movs	r0, #39	; 0x27
 8000602:	f000 fb22 	bl	8000c4a <ILI9341_Send_Data>
 8000606:	20f2      	movs	r0, #242	; 0xf2
 8000608:	f000 fb10 	bl	8000c2c <ILI9341_Send_Command>
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fb1c 	bl	8000c4a <ILI9341_Send_Data>
 8000612:	2026      	movs	r0, #38	; 0x26
 8000614:	f000 fb0a 	bl	8000c2c <ILI9341_Send_Command>
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fb16 	bl	8000c4a <ILI9341_Send_Data>
 800061e:	20e0      	movs	r0, #224	; 0xe0
 8000620:	f000 fb04 	bl	8000c2c <ILI9341_Send_Command>
 8000624:	200f      	movs	r0, #15
 8000626:	f000 fb10 	bl	8000c4a <ILI9341_Send_Data>
 800062a:	2031      	movs	r0, #49	; 0x31
 800062c:	f000 fb0d 	bl	8000c4a <ILI9341_Send_Data>
 8000630:	202b      	movs	r0, #43	; 0x2b
 8000632:	f000 fb0a 	bl	8000c4a <ILI9341_Send_Data>
 8000636:	200c      	movs	r0, #12
 8000638:	f000 fb07 	bl	8000c4a <ILI9341_Send_Data>
 800063c:	200e      	movs	r0, #14
 800063e:	f000 fb04 	bl	8000c4a <ILI9341_Send_Data>
 8000642:	2008      	movs	r0, #8
 8000644:	f000 fb01 	bl	8000c4a <ILI9341_Send_Data>
 8000648:	204e      	movs	r0, #78	; 0x4e
 800064a:	f000 fafe 	bl	8000c4a <ILI9341_Send_Data>
 800064e:	20f1      	movs	r0, #241	; 0xf1
 8000650:	f000 fafb 	bl	8000c4a <ILI9341_Send_Data>
 8000654:	2037      	movs	r0, #55	; 0x37
 8000656:	f000 faf8 	bl	8000c4a <ILI9341_Send_Data>
 800065a:	2007      	movs	r0, #7
 800065c:	f000 faf5 	bl	8000c4a <ILI9341_Send_Data>
 8000660:	2010      	movs	r0, #16
 8000662:	f000 faf2 	bl	8000c4a <ILI9341_Send_Data>
 8000666:	2003      	movs	r0, #3
 8000668:	f000 faef 	bl	8000c4a <ILI9341_Send_Data>
 800066c:	200e      	movs	r0, #14
 800066e:	f000 faec 	bl	8000c4a <ILI9341_Send_Data>
 8000672:	2009      	movs	r0, #9
 8000674:	f000 fae9 	bl	8000c4a <ILI9341_Send_Data>
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fae6 	bl	8000c4a <ILI9341_Send_Data>
 800067e:	20e1      	movs	r0, #225	; 0xe1
 8000680:	f000 fad4 	bl	8000c2c <ILI9341_Send_Command>
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fae0 	bl	8000c4a <ILI9341_Send_Data>
 800068a:	200e      	movs	r0, #14
 800068c:	f000 fadd 	bl	8000c4a <ILI9341_Send_Data>
 8000690:	2014      	movs	r0, #20
 8000692:	f000 fada 	bl	8000c4a <ILI9341_Send_Data>
 8000696:	2003      	movs	r0, #3
 8000698:	f000 fad7 	bl	8000c4a <ILI9341_Send_Data>
 800069c:	2011      	movs	r0, #17
 800069e:	f000 fad4 	bl	8000c4a <ILI9341_Send_Data>
 80006a2:	2007      	movs	r0, #7
 80006a4:	f000 fad1 	bl	8000c4a <ILI9341_Send_Data>
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 face 	bl	8000c4a <ILI9341_Send_Data>
 80006ae:	20c1      	movs	r0, #193	; 0xc1
 80006b0:	f000 facb 	bl	8000c4a <ILI9341_Send_Data>
 80006b4:	2048      	movs	r0, #72	; 0x48
 80006b6:	f000 fac8 	bl	8000c4a <ILI9341_Send_Data>
 80006ba:	2008      	movs	r0, #8
 80006bc:	f000 fac5 	bl	8000c4a <ILI9341_Send_Data>
 80006c0:	200f      	movs	r0, #15
 80006c2:	f000 fac2 	bl	8000c4a <ILI9341_Send_Data>
 80006c6:	200c      	movs	r0, #12
 80006c8:	f000 fabf 	bl	8000c4a <ILI9341_Send_Data>
 80006cc:	2031      	movs	r0, #49	; 0x31
 80006ce:	f000 fabc 	bl	8000c4a <ILI9341_Send_Data>
 80006d2:	2036      	movs	r0, #54	; 0x36
 80006d4:	f000 fab9 	bl	8000c4a <ILI9341_Send_Data>
 80006d8:	200f      	movs	r0, #15
 80006da:	f000 fab6 	bl	8000c4a <ILI9341_Send_Data>
 80006de:	2011      	movs	r0, #17
 80006e0:	f000 faa4 	bl	8000c2c <ILI9341_Send_Command>
 80006e4:	2029      	movs	r0, #41	; 0x29
 80006e6:	f000 faa1 	bl	8000c2c <ILI9341_Send_Command>
 80006ea:	202c      	movs	r0, #44	; 0x2c
 80006ec:	f000 faad 	bl	8000c4a <ILI9341_Send_Data>
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f83d 	bl	8000770 <ILI9341_Set_Rotation>
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <ILI9341_SPI_Send>:
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	1df9      	adds	r1, r7, #7
 8000708:	2301      	movs	r3, #1
 800070a:	2201      	movs	r2, #1
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <ILI9341_SPI_Send+0x20>)
 800070e:	f00a fe02 	bl	800b316 <HAL_SPI_Transmit>
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20006f54 	.word	0x20006f54

08000720 <ILI9341_Reset>:
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <ILI9341_Reset+0x4c>)
 800072c:	f007 fc1e 	bl	8007f6c <HAL_GPIO_WritePin>
 8000730:	2032      	movs	r0, #50	; 0x32
 8000732:	f006 fe17 	bl	8007364 <HAL_Delay>
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <ILI9341_Reset+0x4c>)
 800073e:	f007 fc15 	bl	8007f6c <HAL_GPIO_WritePin>
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <ILI9341_Reset+0x4c>)
 800074a:	f007 fc0f 	bl	8007f6c <HAL_GPIO_WritePin>
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f006 fe08 	bl	8007364 <HAL_Delay>
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fa69 	bl	8000c2c <ILI9341_Send_Command>
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_Reset+0x4c>)
 8000762:	f007 fc03 	bl	8007f6c <HAL_GPIO_WritePin>
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020c00 	.word	0x40020c00

08000770 <ILI9341_Set_Rotation>:
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fa56 	bl	8000c2c <ILI9341_Send_Command>
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d836      	bhi.n	80007f4 <ILI9341_Set_Rotation+0x84>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <ILI9341_Set_Rotation+0x1c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007b3 	.word	0x080007b3
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007df 	.word	0x080007df
 800079c:	2048      	movs	r0, #72	; 0x48
 800079e:	f000 fa54 	bl	8000c4a <ILI9341_Send_Data>
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007a4:	22f0      	movs	r2, #240	; 0xf0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	e020      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f000 fa49 	bl	8000c4a <ILI9341_Send_Data>
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e015      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
 80007c8:	2088      	movs	r0, #136	; 0x88
 80007ca:	f000 fa3e 	bl	8000c4a <ILI9341_Send_Data>
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007d0:	22f0      	movs	r2, #240	; 0xf0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e00a      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
 80007de:	20e8      	movs	r0, #232	; 0xe8
 80007e0:	f000 fa33 	bl	8000c4a <ILI9341_Send_Data>
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007ee:	22f0      	movs	r2, #240	; 0xf0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000004 	.word	0x20000004

08000804 <ILI9341_SPI_Send_32>:
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000818:	f007 fba8 	bl	8007f6c <HAL_GPIO_WritePin>
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f007 fba2 	bl	8007f6c <HAL_GPIO_WritePin>
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff66 	bl	80006fc <ILI9341_SPI_Send>
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000838:	f007 fb98 	bl	8007f6c <HAL_GPIO_WritePin>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	0e1b      	lsrs	r3, r3, #24
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff5a 	bl	80006fc <ILI9341_SPI_Send>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff54 	bl	80006fc <ILI9341_SPI_Send>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff4e 	bl	80006fc <ILI9341_SPI_Send>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff49 	bl	80006fc <ILI9341_SPI_Send>
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <ILI9341_Set_Address>:
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	6979      	ldr	r1, [r7, #20]
 800089a:	202a      	movs	r0, #42	; 0x2a
 800089c:	f7ff ffb2 	bl	8000804 <ILI9341_SPI_Send_32>
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	041b      	lsls	r3, r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	202b      	movs	r0, #43	; 0x2b
 80008b6:	f7ff ffa5 	bl	8000804 <ILI9341_SPI_Send_32>
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <ILI9341_Fill_Screen>:
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ffcc 	bl	8000878 <ILI9341_Set_Address>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	fb01 f202 	mul.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9b7 	bl	8000c68 <ILI9341_Send_Burst>
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <ILI9341_Draw_Pixel>:
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db31      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db2e      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d229      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d224      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	f7ff ff96 	bl	8000878 <ILI9341_Set_Address>
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000954:	f007 fb0a 	bl	8007f6c <HAL_GPIO_WritePin>
 8000958:	202c      	movs	r0, #44	; 0x2c
 800095a:	f7ff fecf 	bl	80006fc <ILI9341_SPI_Send>
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000966:	f007 fb01 	bl	8007f6c <HAL_GPIO_WritePin>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec3 	bl	80006fc <ILI9341_SPI_Send>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff febe 	bl	80006fc <ILI9341_SPI_Send>
 8000980:	e000      	b.n	8000984 <ILI9341_Draw_Pixel+0x78>
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004
 8000994:	40020c00 	.word	0x40020c00

08000998 <ILI9341_Draw_Filled_Rectangle>:
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f7ff ff63 	bl	8000878 <ILI9341_Set_Address>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	b298      	uxth	r0, r3
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	3301      	adds	r3, #1
 80009be:	4619      	mov	r1, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	fb01 f303 	mul.w	r3, r1, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 f94b 	bl	8000c68 <ILI9341_Send_Burst>
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <ILI9341_Draw_Line>:
 80009da:	b580      	push	{r7, lr}
 80009dc:	b08c      	sub	sp, #48	; 0x30
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1acb      	subs	r3, r1, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bfb8      	it	lt
 8000a00:	425b      	neglt	r3, r3
 8000a02:	429a      	cmp	r2, r3
 8000a04:	bfcc      	ite	gt
 8000a06:	2301      	movgt	r3, #1
 8000a08:	2300      	movle	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00d      	beq.n	8000a30 <ILI9341_Draw_Line+0x56>
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	843b      	strh	r3, [r7, #32]
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d90d      	bls.n	8000a54 <ILI9341_Draw_Line+0x7a>
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	83fb      	strh	r3, [r7, #30]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	83bb      	strh	r3, [r7, #28]
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	0fda      	lsrs	r2, r3, #31
 8000a6e:	4413      	add	r3, r2
 8000a70:	105b      	asrs	r3, r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d202      	bcs.n	8000a82 <ILI9341_Draw_Line+0xa8>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a80:	e023      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a88:	e01f      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <ILI9341_Draw_Line+0xc4>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff38 	bl	800090c <ILI9341_Draw_Pixel>
 8000a9c:	e005      	b.n	8000aaa <ILI9341_Draw_Line+0xd0>
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <ILI9341_Draw_Pixel>
 8000aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da05      	bge.n	8000ac4 <ILI9341_Draw_Line+0xea>
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d9db      	bls.n	8000a8a <ILI9341_Draw_Line+0xb0>
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ILI9341_Draw_String>:
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	7f3b      	ldrb	r3, [r7, #28]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d061      	beq.n	8000bb4 <ILI9341_Draw_String+0xd8>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	f300 8092 	bgt.w	8000c1a <ILI9341_Draw_String+0x13e>
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d028      	beq.n	8000b4c <ILI9341_Draw_String+0x70>
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d02b      	beq.n	8000b56 <ILI9341_Draw_String+0x7a>
 8000afe:	e08c      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
 8000b00:	7f3b      	ldrb	r3, [r7, #28]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	441a      	add	r2, r3
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d907      	bls.n	8000b22 <ILI9341_Draw_String+0x46>
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	7f3b      	ldrb	r3, [r7, #28]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	7f3a      	ldrb	r2, [r7, #28]
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	f000 f95a 	bl	8000dec <ILI9341_Draw_Char>
 8000b38:	7f3b      	ldrb	r3, [r7, #28]
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	3b02      	subs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1d5      	bne.n	8000b00 <ILI9341_Draw_String+0x24>
 8000b54:	e061      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e025      	b.n	8000baa <ILI9341_Draw_String+0xce>
 8000b5e:	7f3b      	ldrb	r3, [r7, #28]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	441a      	add	r2, r3
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d907      	bls.n	8000b80 <ILI9341_Draw_String+0xa4>
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	7f3b      	ldrb	r3, [r7, #28]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	7f3a      	ldrb	r2, [r7, #28]
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	f000 f92b 	bl	8000dec <ILI9341_Draw_Char>
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1d5      	bne.n	8000b5e <ILI9341_Draw_String+0x82>
 8000bb2:	e032      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e029      	b.n	8000c10 <ILI9341_Draw_String+0x134>
 8000bbc:	7f3b      	ldrb	r3, [r7, #28]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d907      	bls.n	8000bde <ILI9341_Draw_String+0x102>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	7f3b      	ldrb	r3, [r7, #28]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7f3a      	ldrb	r2, [r7, #28]
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	f000 f8fc 	bl	8000dec <ILI9341_Draw_Char>
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1d1      	bne.n	8000bbc <ILI9341_Draw_String+0xe0>
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <ILI9341_Send_Command>:
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	f000 fa09 	bl	800104c <Before_Sending_Command>
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fd5d 	bl	80006fc <ILI9341_SPI_Send>
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <ILI9341_Send_Data>:
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	f000 f9e8 	bl	8001028 <Before_Sending_Data>
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd4e 	bl	80006fc <ILI9341_SPI_Send>
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ILI9341_Send_Burst>:
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	72fb      	strb	r3, [r7, #11]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	4858      	ldr	r0, [pc, #352]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c88:	f007 f970 	bl	8007f6c <HAL_GPIO_WritePin>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4855      	ldr	r0, [pc, #340]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c94:	f007 f96a 	bl	8007f6c <HAL_GPIO_WritePin>
 8000c98:	202c      	movs	r0, #44	; 0x2c
 8000c9a:	f7ff fd2f 	bl	80006fc <ILI9341_SPI_Send>
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	4850      	ldr	r0, [pc, #320]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000ca6:	f007 f961 	bl	8007f6c <HAL_GPIO_WritePin>
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd25 	bl	80006fc <ILI9341_SPI_Send>
 8000cb2:	7afb      	ldrb	r3, [r7, #11]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd21 	bl	80006fc <ILI9341_SPI_Send>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	099b      	lsrs	r3, r3, #6
 8000cc4:	81fb      	strh	r3, [r7, #14]
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d169      	bne.n	8000da2 <ILI9341_Send_Burst+0x13a>
 8000cce:	e027      	b.n	8000d20 <ILI9341_Send_Burst+0xb8>
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	737b      	strb	r3, [r7, #13]
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd10 	bl	80006fc <ILI9341_SPI_Send>
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd0c 	bl	80006fc <ILI9341_SPI_Send>
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd08 	bl	80006fc <ILI9341_SPI_Send>
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd04 	bl	80006fc <ILI9341_SPI_Send>
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd00 	bl	80006fc <ILI9341_SPI_Send>
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcfc 	bl	80006fc <ILI9341_SPI_Send>
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcf8 	bl	80006fc <ILI9341_SPI_Send>
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fcf4 	bl	80006fc <ILI9341_SPI_Send>
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	737b      	strb	r3, [r7, #13]
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1d9      	bne.n	8000cd4 <ILI9341_Send_Burst+0x6c>
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	81fa      	strh	r2, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1d2      	bne.n	8000cd0 <ILI9341_Send_Burst+0x68>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d32:	737b      	strb	r3, [r7, #13]
 8000d34:	e007      	b.n	8000d46 <ILI9341_Send_Burst+0xde>
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcdf 	bl	80006fc <ILI9341_SPI_Send>
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fcdb 	bl	80006fc <ILI9341_SPI_Send>
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	737a      	strb	r2, [r7, #13]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f2      	bne.n	8000d36 <ILI9341_Send_Burst+0xce>
 8000d50:	e03f      	b.n	8000dd2 <ILI9341_Send_Burst+0x16a>
 8000d52:	2310      	movs	r3, #16
 8000d54:	737b      	strb	r3, [r7, #13]
 8000d56:	7b3b      	ldrb	r3, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fccf 	bl	80006fc <ILI9341_SPI_Send>
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fccb 	bl	80006fc <ILI9341_SPI_Send>
 8000d66:	7b3b      	ldrb	r3, [r7, #12]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcc7 	bl	80006fc <ILI9341_SPI_Send>
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fcc3 	bl	80006fc <ILI9341_SPI_Send>
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcbf 	bl	80006fc <ILI9341_SPI_Send>
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fcbb 	bl	80006fc <ILI9341_SPI_Send>
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcb7 	bl	80006fc <ILI9341_SPI_Send>
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcb3 	bl	80006fc <ILI9341_SPI_Send>
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1d9      	bne.n	8000d56 <ILI9341_Send_Burst+0xee>
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	81fa      	strh	r2, [r7, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1d2      	bne.n	8000d52 <ILI9341_Send_Burst+0xea>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000db4:	737b      	strb	r3, [r7, #13]
 8000db6:	e007      	b.n	8000dc8 <ILI9341_Send_Burst+0x160>
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc9e 	bl	80006fc <ILI9341_SPI_Send>
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fc9a 	bl	80006fc <ILI9341_SPI_Send>
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	1e5a      	subs	r2, r3, #1
 8000dcc:	737a      	strb	r2, [r7, #13]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f2      	bne.n	8000db8 <ILI9341_Send_Burst+0x150>
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000dda:	f007 f8c7 	bl	8007f6c <HAL_GPIO_WritePin>
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020c00 	.word	0x40020c00

08000dec <ILI9341_Draw_Char>:
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f000 80b2 	beq.w	8000f68 <ILI9341_Draw_Char+0x17c>
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f300 8104 	bgt.w	8001012 <ILI9341_Draw_Char+0x226>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <ILI9341_Draw_Char+0x28>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d055      	beq.n	8000ebe <ILI9341_Draw_Char+0xd2>
 8000e12:	e0fe      	b.n	8001012 <ILI9341_Draw_Char+0x226>
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3305      	adds	r3, #5
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3308      	adds	r3, #8
 8000e22:	f7ff fd29 	bl	8000878 <ILI9341_Set_Address>
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	487b      	ldr	r0, [pc, #492]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e2e:	f007 f89d 	bl	8007f6c <HAL_GPIO_WritePin>
 8000e32:	202c      	movs	r0, #44	; 0x2c
 8000e34:	f7ff fc62 	bl	80006fc <ILI9341_SPI_Send>
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3e:	4877      	ldr	r0, [pc, #476]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e40:	f007 f894 	bl	8007f6c <HAL_GPIO_WritePin>
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	e035      	b.n	8000eb6 <ILI9341_Draw_Char+0xca>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e02c      	b.n	8000eaa <ILI9341_Draw_Char+0xbe>
 8000e50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e54:	3b20      	subs	r3, #32
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <ILI9341_Draw_Char+0x234>)
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	441a      	add	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	fa42 f303 	asr.w	r3, r2, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <ILI9341_Draw_Char+0xa2>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc3d 	bl	80006fc <ILI9341_SPI_Send>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc38 	bl	80006fc <ILI9341_SPI_Send>
 8000e8c:	e00a      	b.n	8000ea4 <ILI9341_Draw_Char+0xb8>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc31 	bl	80006fc <ILI9341_SPI_Send>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc2c 	bl	80006fc <ILI9341_SPI_Send>
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	ddcf      	ble.n	8000e50 <ILI9341_Draw_Char+0x64>
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	ddc6      	ble.n	8000e4a <ILI9341_Draw_Char+0x5e>
 8000ebc:	e0a9      	b.n	8001012 <ILI9341_Draw_Char+0x226>
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3310      	adds	r3, #16
 8000ecc:	f7ff fcd4 	bl	8000878 <ILI9341_Set_Address>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4851      	ldr	r0, [pc, #324]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000ed8:	f007 f848 	bl	8007f6c <HAL_GPIO_WritePin>
 8000edc:	202c      	movs	r0, #44	; 0x2c
 8000ede:	f7ff fc0d 	bl	80006fc <ILI9341_SPI_Send>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	484c      	ldr	r0, [pc, #304]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000eea:	f007 f83f 	bl	8007f6c <HAL_GPIO_WritePin>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e035      	b.n	8000f60 <ILI9341_Draw_Char+0x174>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e02c      	b.n	8000f54 <ILI9341_Draw_Char+0x168>
 8000efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efe:	3b20      	subs	r3, #32
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	441a      	add	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f1c3 0307 	rsb	r3, r3, #7
 8000f14:	fa42 f303 	asr.w	r3, r2, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <ILI9341_Draw_Char+0x14c>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fbe8 	bl	80006fc <ILI9341_SPI_Send>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fbe3 	bl	80006fc <ILI9341_SPI_Send>
 8000f36:	e00a      	b.n	8000f4e <ILI9341_Draw_Char+0x162>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbdc 	bl	80006fc <ILI9341_SPI_Send>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbd7 	bl	80006fc <ILI9341_SPI_Send>
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	ddcf      	ble.n	8000efa <ILI9341_Draw_Char+0x10e>
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	ddc6      	ble.n	8000ef4 <ILI9341_Draw_Char+0x108>
 8000f66:	e054      	b.n	8001012 <ILI9341_Draw_Char+0x226>
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3309      	adds	r3, #9
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3310      	adds	r3, #16
 8000f76:	f7ff fc7f 	bl	8000878 <ILI9341_Set_Address>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f80:	4826      	ldr	r0, [pc, #152]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f82:	f006 fff3 	bl	8007f6c <HAL_GPIO_WritePin>
 8000f86:	202c      	movs	r0, #44	; 0x2c
 8000f88:	f7ff fbb8 	bl	80006fc <ILI9341_SPI_Send>
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f94:	f006 ffea 	bl	8007f6c <HAL_GPIO_WritePin>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e035      	b.n	800100a <ILI9341_Draw_Char+0x21e>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e02c      	b.n	8000ffe <ILI9341_Draw_Char+0x212>
 8000fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa8:	3b20      	subs	r3, #32
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	441a      	add	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	fa42 f303 	asr.w	r3, r2, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <ILI9341_Draw_Char+0x1f6>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb93 	bl	80006fc <ILI9341_SPI_Send>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb8e 	bl	80006fc <ILI9341_SPI_Send>
 8000fe0:	e00a      	b.n	8000ff8 <ILI9341_Draw_Char+0x20c>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb87 	bl	80006fc <ILI9341_SPI_Send>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb82 	bl	80006fc <ILI9341_SPI_Send>
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b07      	cmp	r3, #7
 8001002:	ddcf      	ble.n	8000fa4 <ILI9341_Draw_Char+0x1b8>
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b1d      	cmp	r3, #29
 800100e:	ddc6      	ble.n	8000f9e <ILI9341_Draw_Char+0x1b2>
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020c00 	.word	0x40020c00
 8001020:	0800ea28 	.word	0x0800ea28
 8001024:	0800ed00 	.word	0x0800ed00

08001028 <Before_Sending_Data>:
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <Before_Sending_Data+0x20>)
 8001034:	f006 ff9a 	bl	8007f6c <HAL_GPIO_WritePin>
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <Before_Sending_Data+0x20>)
 8001040:	f006 ff94 	bl	8007f6c <HAL_GPIO_WritePin>
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020c00 	.word	0x40020c00

0800104c <Before_Sending_Command>:
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <Before_Sending_Command+0x20>)
 8001058:	f006 ff88 	bl	8007f6c <HAL_GPIO_WritePin>
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	4802      	ldr	r0, [pc, #8]	; (800106c <Before_Sending_Command+0x20>)
 8001064:	f006 ff82 	bl	8007f6c <HAL_GPIO_WritePin>
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020c00 	.word	0x40020c00

08001070 <Si468x_dab_init>:
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
 8001074:	2101      	movs	r1, #1
 8001076:	4828      	ldr	r0, [pc, #160]	; (8001118 <Si468x_dab_init+0xa8>)
 8001078:	f002 fc8a 	bl	8003990 <send_debug_msg>
 800107c:	f000 f84e 	bl	800111c <Si468x_reset>
 8001080:	f000 f868 	bl	8001154 <Si468x_power_up>
 8001084:	f000 f8ea 	bl	800125c <Si468x_bootloader_load_host>
 8001088:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800108c:	f000 f95a 	bl	8001344 <Si468x_firmware_load_flash>
 8001090:	f000 f9f8 	bl	8001484 <Si468x_boot>
 8001094:	f000 fbb0 	bl	80017f8 <Si468x_get_part_info>
 8001098:	f000 fb28 	bl	80016ec <Si468x_get_sys_state>
 800109c:	2101      	movs	r1, #1
 800109e:	f241 7012 	movw	r0, #5906	; 0x1712
 80010a2:	f000 fc19 	bl	80018d8 <Si468x_set_property>
 80010a6:	2105      	movs	r1, #5
 80010a8:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010ac:	f000 fc14 	bl	80018d8 <Si468x_set_property>
 80010b0:	2130      	movs	r1, #48	; 0x30
 80010b2:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010b6:	f000 fc0f 	bl	80018d8 <Si468x_set_property>
 80010ba:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010be:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c2:	f000 fc09 	bl	80018d8 <Si468x_set_property>
 80010c6:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ca:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010ce:	f000 fc03 	bl	80018d8 <Si468x_set_property>
 80010d2:	2101      	movs	r1, #1
 80010d4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010d8:	f000 fbfe 	bl	80018d8 <Si468x_set_property>
 80010dc:	2101      	movs	r1, #1
 80010de:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e2:	f000 fbf9 	bl	80018d8 <Si468x_set_property>
 80010e6:	2101      	movs	r1, #1
 80010e8:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010ec:	f000 fbf4 	bl	80018d8 <Si468x_set_property>
 80010f0:	2105      	movs	r1, #5
 80010f2:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010f6:	f000 fbef 	bl	80018d8 <Si468x_set_property>
 80010fa:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 80010fe:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001102:	f000 fbe9 	bl	80018d8 <Si468x_set_property>
 8001106:	2101      	movs	r1, #1
 8001108:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 800110c:	f000 fbe4 	bl	80018d8 <Si468x_set_property>
 8001110:	f000 faec 	bl	80016ec <Si468x_get_sys_state>
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800d4b0 	.word	0x0800d4b0

0800111c <Si468x_reset>:
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
 8001120:	2101      	movs	r1, #1
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <Si468x_reset+0x30>)
 8001124:	f002 fc34 	bl	8003990 <send_debug_msg>
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <Si468x_reset+0x34>)
 800112e:	f006 ff1d 	bl	8007f6c <HAL_GPIO_WritePin>
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f006 f916 	bl	8007364 <HAL_Delay>
 8001138:	2201      	movs	r2, #1
 800113a:	2120      	movs	r1, #32
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <Si468x_reset+0x34>)
 800113e:	f006 ff15 	bl	8007f6c <HAL_GPIO_WritePin>
 8001142:	20c8      	movs	r0, #200	; 0xc8
 8001144:	f006 f90e 	bl	8007364 <HAL_Delay>
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0800d500 	.word	0x0800d500
 8001150:	40020800 	.word	0x40020800

08001154 <Si468x_power_up>:
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <Si468x_power_up+0xa0>)
 800115c:	f002 fc18 	bl	8003990 <send_debug_msg>
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <Si468x_power_up+0xa4>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <Si468x_power_up+0xa4>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	705a      	strb	r2, [r3, #1]
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <Si468x_power_up+0xa4>)
 800116e:	2217      	movs	r2, #23
 8001170:	709a      	strb	r2, [r3, #2]
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <Si468x_power_up+0xa4>)
 8001174:	2250      	movs	r2, #80	; 0x50
 8001176:	70da      	strb	r2, [r3, #3]
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <Si468x_power_up+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <Si468x_power_up+0xa4>)
 8001180:	22f8      	movs	r2, #248	; 0xf8
 8001182:	715a      	strb	r2, [r3, #5]
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <Si468x_power_up+0xa4>)
 8001186:	2224      	movs	r2, #36	; 0x24
 8001188:	719a      	strb	r2, [r3, #6]
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Si468x_power_up+0xa4>)
 800118c:	2201      	movs	r2, #1
 800118e:	71da      	strb	r2, [r3, #7]
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <Si468x_power_up+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	721a      	strb	r2, [r3, #8]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <Si468x_power_up+0xa4>)
 8001198:	2210      	movs	r2, #16
 800119a:	725a      	strb	r2, [r3, #9]
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <Si468x_power_up+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	729a      	strb	r2, [r3, #10]
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <Si468x_power_up+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	72da      	strb	r2, [r3, #11]
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <Si468x_power_up+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	731a      	strb	r2, [r3, #12]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <Si468x_power_up+0xa4>)
 80011b0:	2228      	movs	r2, #40	; 0x28
 80011b2:	735a      	strb	r2, [r3, #13]
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <Si468x_power_up+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	739a      	strb	r2, [r3, #14]
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <Si468x_power_up+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	73da      	strb	r2, [r3, #15]
 80011c0:	490d      	ldr	r1, [pc, #52]	; (80011f8 <Si468x_power_up+0xa4>)
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 fa58 	bl	8001678 <Si468x_write_command>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <Si468x_power_up+0xa8>)
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	2001      	movs	r0, #1
 80011d2:	f006 f8c7 	bl	8007364 <HAL_Delay>
 80011d6:	490a      	ldr	r1, [pc, #40]	; (8001200 <Si468x_power_up+0xac>)
 80011d8:	2005      	movs	r0, #5
 80011da:	f000 fa6f 	bl	80016bc <Si468x_read_reply>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <Si468x_power_up+0xa8>)
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	2101      	movs	r1, #1
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <Si468x_power_up+0xb0>)
 80011ea:	f002 fbd1 	bl	8003990 <send_debug_msg>
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	0800d514 	.word	0x0800d514
 80011f8:	200001a8 	.word	0x200001a8
 80011fc:	20003510 	.word	0x20003510
 8001200:	200011a8 	.word	0x200011a8
 8001204:	0800d550 	.word	0x0800d550

08001208 <Si468x_load_init>:
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
 800120c:	2101      	movs	r1, #1
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <Si468x_load_init+0x44>)
 8001210:	f002 fbbe 	bl	8003990 <send_debug_msg>
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <Si468x_load_init+0x48>)
 8001216:	2206      	movs	r2, #6
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Si468x_load_init+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <Si468x_load_init+0x48>)
 8001222:	2002      	movs	r0, #2
 8001224:	f000 fa28 	bl	8001678 <Si468x_write_command>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <Si468x_load_init+0x4c>)
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	2001      	movs	r0, #1
 8001232:	f006 f897 	bl	8007364 <HAL_Delay>
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <Si468x_load_init+0x50>)
 8001238:	2005      	movs	r0, #5
 800123a:	f000 fa3f 	bl	80016bc <Si468x_read_reply>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <Si468x_load_init+0x4c>)
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0800d570 	.word	0x0800d570
 8001250:	200001a8 	.word	0x200001a8
 8001254:	20003510 	.word	0x20003510
 8001258:	200011a8 	.word	0x200011a8

0800125c <Si468x_bootloader_load_host>:
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	2101      	movs	r1, #1
 8001264:	4830      	ldr	r0, [pc, #192]	; (8001328 <Si468x_bootloader_load_host+0xcc>)
 8001266:	f002 fb93 	bl	8003990 <send_debug_msg>
 800126a:	f7ff ffcd 	bl	8001208 <Si468x_load_init>
 800126e:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 8001276:	2204      	movs	r2, #4
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 800127c:	2200      	movs	r2, #0
 800127e:	705a      	strb	r2, [r3, #1]
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 8001282:	2200      	movs	r2, #0
 8001284:	709a      	strb	r2, [r3, #2]
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 8001288:	2200      	movs	r2, #0
 800128a:	70da      	strb	r2, [r3, #3]
 800128c:	2300      	movs	r3, #0
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	e03e      	b.n	8001310 <Si468x_bootloader_load_host+0xb4>
 8001292:	2300      	movs	r3, #0
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	e014      	b.n	80012c2 <Si468x_bootloader_load_host+0x66>
 8001298:	88ba      	ldrh	r2, [r7, #4]
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	4924      	ldr	r1, [pc, #144]	; (8001330 <Si468x_bootloader_load_host+0xd4>)
 800129e:	fba1 1303 	umull	r1, r3, r1, r3
 80012a2:	085b      	lsrs	r3, r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	441a      	add	r2, r3
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	491f      	ldr	r1, [pc, #124]	; (8001334 <Si468x_bootloader_load_host+0xd8>)
 80012b6:	5c89      	ldrb	r1, [r1, r2]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 80012ba:	54d1      	strb	r1, [r2, r3]
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	80bb      	strh	r3, [r7, #4]
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <Si468x_bootloader_load_host+0xd4>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3e1      	bcc.n	8001298 <Si468x_bootloader_load_host+0x3c>
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <Si468x_bootloader_load_host+0xd4>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3304      	adds	r3, #4
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4911      	ldr	r1, [pc, #68]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f9c6 	bl	8001678 <Si468x_write_command>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <Si468x_bootloader_load_host+0xdc>)
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	2001      	movs	r0, #1
 80012f6:	f006 f835 	bl	8007364 <HAL_Delay>
 80012fa:	4910      	ldr	r1, [pc, #64]	; (800133c <Si468x_bootloader_load_host+0xe0>)
 80012fc:	2005      	movs	r0, #5
 80012fe:	f000 f9dd 	bl	80016bc <Si468x_read_reply>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <Si468x_bootloader_load_host+0xdc>)
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	3301      	adds	r3, #1
 800130e:	80fb      	strh	r3, [r7, #6]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d9bd      	bls.n	8001292 <Si468x_bootloader_load_host+0x36>
 8001316:	2101      	movs	r1, #1
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <Si468x_bootloader_load_host+0xe4>)
 800131a:	f002 fb39 	bl	8003990 <send_debug_msg>
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0800d588 	.word	0x0800d588
 800132c:	200001a8 	.word	0x200001a8
 8001330:	aaaaaaab 	.word	0xaaaaaaab
 8001334:	0800f2f0 	.word	0x0800f2f0
 8001338:	20003510 	.word	0x20003510
 800133c:	200011a8 	.word	0x200011a8
 8001340:	0800d5c4 	.word	0x0800d5c4

08001344 <Si468x_firmware_load_flash>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	2101      	movs	r1, #1
 800134e:	4845      	ldr	r0, [pc, #276]	; (8001464 <Si468x_firmware_load_flash+0x120>)
 8001350:	f002 fb1e 	bl	8003990 <send_debug_msg>
 8001354:	f7ff ff58 	bl	8001208 <Si468x_load_init>
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800135a:	2205      	movs	r2, #5
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	4b42      	ldr	r3, [pc, #264]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001360:	2200      	movs	r2, #0
 8001362:	705a      	strb	r2, [r3, #1]
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001366:	2200      	movs	r2, #0
 8001368:	709a      	strb	r2, [r3, #2]
 800136a:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800136c:	2200      	movs	r2, #0
 800136e:	70da      	strb	r2, [r3, #3]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001376:	711a      	strb	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001380:	715a      	strb	r2, [r3, #5]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800138a:	719a      	strb	r2, [r3, #6]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0e1b      	lsrs	r3, r3, #24
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001394:	71da      	strb	r2, [r3, #7]
 8001396:	2100      	movs	r1, #0
 8001398:	4834      	ldr	r0, [pc, #208]	; (800146c <Si468x_firmware_load_flash+0x128>)
 800139a:	f002 faf9 	bl	8003990 <send_debug_msg>
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	2210      	movs	r2, #16
 80013a4:	4932      	ldr	r1, [pc, #200]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00b ffd2 	bl	800d350 <itoa>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 faed 	bl	8003990 <send_debug_msg>
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013b8:	795b      	ldrb	r3, [r3, #5]
 80013ba:	2210      	movs	r2, #16
 80013bc:	492c      	ldr	r1, [pc, #176]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b ffc6 	bl	800d350 <itoa>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fae1 	bl	8003990 <send_debug_msg>
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013d0:	799b      	ldrb	r3, [r3, #6]
 80013d2:	2210      	movs	r2, #16
 80013d4:	4926      	ldr	r1, [pc, #152]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00b ffba 	bl	800d350 <itoa>
 80013dc:	4603      	mov	r3, r0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fad5 	bl	8003990 <send_debug_msg>
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013e8:	79db      	ldrb	r3, [r3, #7]
 80013ea:	2210      	movs	r2, #16
 80013ec:	4920      	ldr	r1, [pc, #128]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b ffae 	bl	800d350 <itoa>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2101      	movs	r1, #1
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fac9 	bl	8003990 <send_debug_msg>
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001400:	2200      	movs	r2, #0
 8001402:	721a      	strb	r2, [r3, #8]
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001406:	2200      	movs	r2, #0
 8001408:	725a      	strb	r2, [r3, #9]
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800140c:	2200      	movs	r2, #0
 800140e:	729a      	strb	r2, [r3, #10]
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001412:	2200      	movs	r2, #0
 8001414:	72da      	strb	r2, [r3, #11]
 8001416:	4914      	ldr	r1, [pc, #80]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001418:	200c      	movs	r0, #12
 800141a:	f000 f92d 	bl	8001678 <Si468x_write_command>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <Si468x_firmware_load_flash+0x130>)
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	2001      	movs	r0, #1
 8001428:	f005 ff9c 	bl	8007364 <HAL_Delay>
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <Si468x_firmware_load_flash+0x134>)
 800142e:	2005      	movs	r0, #5
 8001430:	f000 f944 	bl	80016bc <Si468x_read_reply>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <Si468x_firmware_load_flash+0x130>)
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Si468x_firmware_load_flash+0x134>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <Si468x_firmware_load_flash+0x10e>
 8001448:	2101      	movs	r1, #1
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <Si468x_firmware_load_flash+0x138>)
 800144c:	f002 faa0 	bl	8003990 <send_debug_msg>
 8001450:	e003      	b.n	800145a <Si468x_firmware_load_flash+0x116>
 8001452:	2101      	movs	r1, #1
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <Si468x_firmware_load_flash+0x13c>)
 8001456:	f002 fa9b 	bl	8003990 <send_debug_msg>
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800d5e4 	.word	0x0800d5e4
 8001468:	200001a8 	.word	0x200001a8
 800146c:	0800d620 	.word	0x0800d620
 8001470:	200034d0 	.word	0x200034d0
 8001474:	20003510 	.word	0x20003510
 8001478:	200011a8 	.word	0x200011a8
 800147c:	0800d634 	.word	0x0800d634
 8001480:	0800d644 	.word	0x0800d644

08001484 <Si468x_boot>:
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
 8001488:	2101      	movs	r1, #1
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <Si468x_boot+0x60>)
 800148c:	f002 fa80 	bl	8003990 <send_debug_msg>
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <Si468x_boot+0x64>)
 8001492:	2207      	movs	r2, #7
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <Si468x_boot+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	705a      	strb	r2, [r3, #1]
 800149c:	4912      	ldr	r1, [pc, #72]	; (80014e8 <Si468x_boot+0x64>)
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8ea 	bl	8001678 <Si468x_write_command>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <Si468x_boot+0x68>)
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	2001      	movs	r0, #1
 80014ae:	f005 ff59 	bl	8007364 <HAL_Delay>
 80014b2:	490f      	ldr	r1, [pc, #60]	; (80014f0 <Si468x_boot+0x6c>)
 80014b4:	2005      	movs	r0, #5
 80014b6:	f000 f901 	bl	80016bc <Si468x_read_reply>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <Si468x_boot+0x68>)
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Si468x_boot+0x6c>)
 80014c4:	78db      	ldrb	r3, [r3, #3]
 80014c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ca:	2bc0      	cmp	r3, #192	; 0xc0
 80014cc:	d104      	bne.n	80014d8 <Si468x_boot+0x54>
 80014ce:	2101      	movs	r1, #1
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <Si468x_boot+0x70>)
 80014d2:	f002 fa5d 	bl	8003990 <send_debug_msg>
 80014d6:	e003      	b.n	80014e0 <Si468x_boot+0x5c>
 80014d8:	2101      	movs	r1, #1
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <Si468x_boot+0x74>)
 80014dc:	f002 fa58 	bl	8003990 <send_debug_msg>
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	0800d660 	.word	0x0800d660
 80014e8:	200001a8 	.word	0x200001a8
 80014ec:	20003510 	.word	0x20003510
 80014f0:	200011a8 	.word	0x200011a8
 80014f4:	0800d69c 	.word	0x0800d69c
 80014f8:	0800d6b8 	.word	0x0800d6b8

080014fc <Si468x_write_single_byte>:
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
 8001506:	1df9      	adds	r1, r7, #7
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2201      	movs	r2, #1
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <Si468x_write_single_byte+0x20>)
 800150e:	f009 ff02 	bl	800b316 <HAL_SPI_Transmit>
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20006efc 	.word	0x20006efc

08001520 <Si468x_read_single_byte>:
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	1df9      	adds	r1, r7, #7
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	2201      	movs	r2, #1
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <Si468x_read_single_byte+0x20>)
 8001532:	f00a f82c 	bl	800b58e <HAL_SPI_Receive>
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20006efc 	.word	0x20006efc

08001544 <Si468x_wait_for_CTS>:
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
 800154e:	2300      	movs	r3, #0
 8001550:	81fb      	strh	r3, [r7, #14]
 8001552:	e01f      	b.n	8001594 <Si468x_wait_for_CTS+0x50>
 8001554:	4916      	ldr	r1, [pc, #88]	; (80015b0 <Si468x_wait_for_CTS+0x6c>)
 8001556:	2001      	movs	r0, #1
 8001558:	f000 f8b0 	bl	80016bc <Si468x_read_reply>
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <Si468x_wait_for_CTS+0x70>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00e      	beq.n	8001588 <Si468x_wait_for_CTS+0x44>
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <Si468x_wait_for_CTS+0x70>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <Si468x_wait_for_CTS+0x40>
 8001578:	2101      	movs	r1, #1
 800157a:	480f      	ldr	r0, [pc, #60]	; (80015b8 <Si468x_wait_for_CTS+0x74>)
 800157c:	f002 fa08 	bl	8003990 <send_debug_msg>
 8001580:	2320      	movs	r3, #32
 8001582:	e010      	b.n	80015a6 <Si468x_wait_for_CTS+0x62>
 8001584:	2300      	movs	r3, #0
 8001586:	e00e      	b.n	80015a6 <Si468x_wait_for_CTS+0x62>
 8001588:	2001      	movs	r0, #1
 800158a:	f005 feeb 	bl	8007364 <HAL_Delay>
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	3301      	adds	r3, #1
 8001592:	81fb      	strh	r3, [r7, #14]
 8001594:	89fa      	ldrh	r2, [r7, #14]
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3db      	bcc.n	8001554 <Si468x_wait_for_CTS+0x10>
 800159c:	2101      	movs	r1, #1
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <Si468x_wait_for_CTS+0x78>)
 80015a0:	f002 f9f6 	bl	8003990 <send_debug_msg>
 80015a4:	2308      	movs	r3, #8
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200011a8 	.word	0x200011a8
 80015b4:	200035fc 	.word	0x200035fc
 80015b8:	0800d6cc 	.word	0x0800d6cc
 80015bc:	0800d6f4 	.word	0x0800d6f4

080015c0 <Si468x_write_multiple>:
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
 80015cc:	2300      	movs	r3, #0
 80015ce:	81fb      	strh	r3, [r7, #14]
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <Si468x_write_multiple+0x4c>)
 80015d6:	f006 fcc9 	bl	8007f6c <HAL_GPIO_WritePin>
 80015da:	e009      	b.n	80015f0 <Si468x_write_multiple+0x30>
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	81fa      	strh	r2, [r7, #14]
 80015e2:	461a      	mov	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff86 	bl	80014fc <Si468x_write_single_byte>
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	80fa      	strh	r2, [r7, #6]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <Si468x_write_multiple+0x1c>
 80015fa:	2201      	movs	r2, #1
 80015fc:	2110      	movs	r1, #16
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <Si468x_write_multiple+0x4c>)
 8001600:	f006 fcb4 	bl	8007f6c <HAL_GPIO_WritePin>
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020800 	.word	0x40020800

08001610 <Si468x_read_multiple>:
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <Si468x_read_multiple+0x64>)
 8001626:	f006 fca1 	bl	8007f6c <HAL_GPIO_WritePin>
 800162a:	2003      	movs	r0, #3
 800162c:	f005 fe9a 	bl	8007364 <HAL_Delay>
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <Si468x_read_multiple+0x64>)
 8001636:	f006 fc99 	bl	8007f6c <HAL_GPIO_WritePin>
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff ff5e 	bl	80014fc <Si468x_write_single_byte>
 8001640:	e009      	b.n	8001656 <Si468x_read_multiple+0x46>
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	81fa      	strh	r2, [r7, #14]
 8001648:	461a      	mov	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	189c      	adds	r4, r3, r2
 800164e:	f7ff ff67 	bl	8001520 <Si468x_read_single_byte>
 8001652:	4603      	mov	r3, r0
 8001654:	7023      	strb	r3, [r4, #0]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	80fa      	strh	r2, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <Si468x_read_multiple+0x32>
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <Si468x_read_multiple+0x64>)
 8001666:	f006 fc81 	bl	8007f6c <HAL_GPIO_WritePin>
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	40020800 	.word	0x40020800

08001678 <Si468x_write_command>:
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001688:	f7ff ff5c 	bl	8001544 <Si468x_wait_for_CTS>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <Si468x_write_command+0x24>
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b20      	cmp	r3, #32
 800169a:	d10a      	bne.n	80016b2 <Si468x_write_command+0x3a>
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff8d 	bl	80015c0 <Si468x_write_multiple>
 80016a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016aa:	f7ff ff4b 	bl	8001544 <Si468x_wait_for_CTS>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <Si468x_read_reply>:
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff9f 	bl	8001610 <Si468x_read_multiple>
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <Si468x_read_reply+0x28>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <Si468x_read_reply+0x2c>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200011a8 	.word	0x200011a8
 80016e8:	200035fc 	.word	0x200035fc

080016ec <Si468x_get_sys_state>:
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	2101      	movs	r1, #1
 80016f2:	4833      	ldr	r0, [pc, #204]	; (80017c0 <Si468x_get_sys_state+0xd4>)
 80016f4:	f002 f94c 	bl	8003990 <send_debug_msg>
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <Si468x_get_sys_state+0xd8>)
 80016fa:	2209      	movs	r2, #9
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Si468x_get_sys_state+0xd8>)
 8001700:	2200      	movs	r2, #0
 8001702:	705a      	strb	r2, [r3, #1]
 8001704:	492f      	ldr	r1, [pc, #188]	; (80017c4 <Si468x_get_sys_state+0xd8>)
 8001706:	2002      	movs	r0, #2
 8001708:	f7ff ffb6 	bl	8001678 <Si468x_write_command>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <Si468x_get_sys_state+0xdc>)
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	2001      	movs	r0, #1
 8001716:	f005 fe25 	bl	8007364 <HAL_Delay>
 800171a:	492c      	ldr	r1, [pc, #176]	; (80017cc <Si468x_get_sys_state+0xe0>)
 800171c:	2005      	movs	r0, #5
 800171e:	f7ff ffcd 	bl	80016bc <Si468x_read_reply>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <Si468x_get_sys_state+0xdc>)
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	2100      	movs	r1, #0
 800172c:	4828      	ldr	r0, [pc, #160]	; (80017d0 <Si468x_get_sys_state+0xe4>)
 800172e:	f002 f92f 	bl	8003990 <send_debug_msg>
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <Si468x_get_sys_state+0xe0>)
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d83a      	bhi.n	80017b0 <Si468x_get_sys_state+0xc4>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <Si468x_get_sys_state+0x54>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001761 	.word	0x08001761
 8001744:	0800176b 	.word	0x0800176b
 8001748:	08001775 	.word	0x08001775
 800174c:	0800177f 	.word	0x0800177f
 8001750:	08001789 	.word	0x08001789
 8001754:	08001793 	.word	0x08001793
 8001758:	0800179d 	.word	0x0800179d
 800175c:	080017a7 	.word	0x080017a7
 8001760:	2101      	movs	r1, #1
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <Si468x_get_sys_state+0xe8>)
 8001764:	f002 f914 	bl	8003990 <send_debug_msg>
 8001768:	e027      	b.n	80017ba <Si468x_get_sys_state+0xce>
 800176a:	2101      	movs	r1, #1
 800176c:	481a      	ldr	r0, [pc, #104]	; (80017d8 <Si468x_get_sys_state+0xec>)
 800176e:	f002 f90f 	bl	8003990 <send_debug_msg>
 8001772:	e022      	b.n	80017ba <Si468x_get_sys_state+0xce>
 8001774:	2101      	movs	r1, #1
 8001776:	4819      	ldr	r0, [pc, #100]	; (80017dc <Si468x_get_sys_state+0xf0>)
 8001778:	f002 f90a 	bl	8003990 <send_debug_msg>
 800177c:	e01d      	b.n	80017ba <Si468x_get_sys_state+0xce>
 800177e:	2101      	movs	r1, #1
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <Si468x_get_sys_state+0xf4>)
 8001782:	f002 f905 	bl	8003990 <send_debug_msg>
 8001786:	e018      	b.n	80017ba <Si468x_get_sys_state+0xce>
 8001788:	2101      	movs	r1, #1
 800178a:	4816      	ldr	r0, [pc, #88]	; (80017e4 <Si468x_get_sys_state+0xf8>)
 800178c:	f002 f900 	bl	8003990 <send_debug_msg>
 8001790:	e013      	b.n	80017ba <Si468x_get_sys_state+0xce>
 8001792:	2101      	movs	r1, #1
 8001794:	4814      	ldr	r0, [pc, #80]	; (80017e8 <Si468x_get_sys_state+0xfc>)
 8001796:	f002 f8fb 	bl	8003990 <send_debug_msg>
 800179a:	e00e      	b.n	80017ba <Si468x_get_sys_state+0xce>
 800179c:	2101      	movs	r1, #1
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <Si468x_get_sys_state+0x100>)
 80017a0:	f002 f8f6 	bl	8003990 <send_debug_msg>
 80017a4:	e009      	b.n	80017ba <Si468x_get_sys_state+0xce>
 80017a6:	2101      	movs	r1, #1
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <Si468x_get_sys_state+0x104>)
 80017aa:	f002 f8f1 	bl	8003990 <send_debug_msg>
 80017ae:	e004      	b.n	80017ba <Si468x_get_sys_state+0xce>
 80017b0:	2101      	movs	r1, #1
 80017b2:	4810      	ldr	r0, [pc, #64]	; (80017f4 <Si468x_get_sys_state+0x108>)
 80017b4:	f002 f8ec 	bl	8003990 <send_debug_msg>
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800d704 	.word	0x0800d704
 80017c4:	200001a8 	.word	0x200001a8
 80017c8:	20003510 	.word	0x20003510
 80017cc:	200011a8 	.word	0x200011a8
 80017d0:	0800d740 	.word	0x0800d740
 80017d4:	0800d74c 	.word	0x0800d74c
 80017d8:	0800d764 	.word	0x0800d764
 80017dc:	0800d77c 	.word	0x0800d77c
 80017e0:	0800d794 	.word	0x0800d794
 80017e4:	0800d7bc 	.word	0x0800d7bc
 80017e8:	0800d7d8 	.word	0x0800d7d8
 80017ec:	0800d7f0 	.word	0x0800d7f0
 80017f0:	0800d80c 	.word	0x0800d80c
 80017f4:	0800d824 	.word	0x0800d824

080017f8 <Si468x_get_part_info>:
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	2101      	movs	r1, #1
 8001800:	482d      	ldr	r0, [pc, #180]	; (80018b8 <Si468x_get_part_info+0xc0>)
 8001802:	f002 f8c5 	bl	8003990 <send_debug_msg>
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <Si468x_get_part_info+0xc4>)
 8001808:	2208      	movs	r2, #8
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <Si468x_get_part_info+0xc4>)
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
 8001812:	492a      	ldr	r1, [pc, #168]	; (80018bc <Si468x_get_part_info+0xc4>)
 8001814:	2002      	movs	r0, #2
 8001816:	f7ff ff2f 	bl	8001678 <Si468x_write_command>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <Si468x_get_part_info+0xc8>)
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	2001      	movs	r0, #1
 8001824:	f005 fd9e 	bl	8007364 <HAL_Delay>
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fe67 	bl	80014fc <Si468x_write_single_byte>
 800182e:	4925      	ldr	r1, [pc, #148]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001830:	200a      	movs	r0, #10
 8001832:	f7ff ff43 	bl	80016bc <Si468x_read_reply>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <Si468x_get_part_info+0xc8>)
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	2100      	movs	r1, #0
 8001840:	4821      	ldr	r0, [pc, #132]	; (80018c8 <Si468x_get_part_info+0xd0>)
 8001842:	f002 f8a5 	bl	8003990 <send_debug_msg>
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	220a      	movs	r2, #10
 800184c:	491f      	ldr	r1, [pc, #124]	; (80018cc <Si468x_get_part_info+0xd4>)
 800184e:	4618      	mov	r0, r3
 8001850:	f00b fd7e 	bl	800d350 <itoa>
 8001854:	4603      	mov	r3, r0
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f002 f899 	bl	8003990 <send_debug_msg>
 800185e:	2100      	movs	r1, #0
 8001860:	481b      	ldr	r0, [pc, #108]	; (80018d0 <Si468x_get_part_info+0xd8>)
 8001862:	f002 f895 	bl	8003990 <send_debug_msg>
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001868:	795b      	ldrb	r3, [r3, #5]
 800186a:	220a      	movs	r2, #10
 800186c:	4917      	ldr	r1, [pc, #92]	; (80018cc <Si468x_get_part_info+0xd4>)
 800186e:	4618      	mov	r0, r3
 8001870:	f00b fd6e 	bl	800d350 <itoa>
 8001874:	4603      	mov	r3, r0
 8001876:	2101      	movs	r1, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f002 f889 	bl	8003990 <send_debug_msg>
 800187e:	2100      	movs	r1, #0
 8001880:	4814      	ldr	r0, [pc, #80]	; (80018d4 <Si468x_get_part_info+0xdc>)
 8001882:	f002 f885 	bl	8003990 <send_debug_msg>
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001888:	7a5b      	ldrb	r3, [r3, #9]
 800188a:	b29b      	uxth	r3, r3
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001892:	7a1b      	ldrb	r3, [r3, #8]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	220a      	movs	r2, #10
 800189e:	490b      	ldr	r1, [pc, #44]	; (80018cc <Si468x_get_part_info+0xd4>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00b fd55 	bl	800d350 <itoa>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 f870 	bl	8003990 <send_debug_msg>
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	0800d838 	.word	0x0800d838
 80018bc:	200001a8 	.word	0x200001a8
 80018c0:	20003510 	.word	0x20003510
 80018c4:	200011a8 	.word	0x200011a8
 80018c8:	0800d874 	.word	0x0800d874
 80018cc:	200034d0 	.word	0x200034d0
 80018d0:	0800d884 	.word	0x0800d884
 80018d4:	0800d890 	.word	0x0800d890

080018d8 <Si468x_set_property>:
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	80fb      	strh	r3, [r7, #6]
 80018e4:	4613      	mov	r3, r2
 80018e6:	80bb      	strh	r3, [r7, #4]
 80018e8:	2101      	movs	r1, #1
 80018ea:	4832      	ldr	r0, [pc, #200]	; (80019b4 <Si468x_set_property+0xdc>)
 80018ec:	f002 f850 	bl	8003990 <send_debug_msg>
 80018f0:	2100      	movs	r1, #0
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <Si468x_set_property+0xe0>)
 80018f4:	f002 f84c 	bl	8003990 <send_debug_msg>
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	2210      	movs	r2, #16
 80018fc:	492f      	ldr	r1, [pc, #188]	; (80019bc <Si468x_set_property+0xe4>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f00b fd26 	bl	800d350 <itoa>
 8001904:	4603      	mov	r3, r0
 8001906:	2101      	movs	r1, #1
 8001908:	4618      	mov	r0, r3
 800190a:	f002 f841 	bl	8003990 <send_debug_msg>
 800190e:	2100      	movs	r1, #0
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <Si468x_set_property+0xe8>)
 8001912:	f002 f83d 	bl	8003990 <send_debug_msg>
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	2210      	movs	r2, #16
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <Si468x_set_property+0xe4>)
 800191c:	4618      	mov	r0, r3
 800191e:	f00b fd17 	bl	800d350 <itoa>
 8001922:	4603      	mov	r3, r0
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f832 	bl	8003990 <send_debug_msg>
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <Si468x_set_property+0xec>)
 800192e:	2213      	movs	r2, #19
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <Si468x_set_property+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <Si468x_set_property+0xec>)
 800193e:	709a      	strb	r2, [r3, #2]
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <Si468x_set_property+0xec>)
 800194a:	70da      	strb	r2, [r3, #3]
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <Si468x_set_property+0xec>)
 8001952:	711a      	strb	r2, [r3, #4]
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <Si468x_set_property+0xec>)
 800195e:	715a      	strb	r2, [r3, #5]
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <Si468x_set_property+0xec>)
 8001962:	2006      	movs	r0, #6
 8001964:	f7ff fe88 	bl	8001678 <Si468x_write_command>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <Si468x_set_property+0xf0>)
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	2001      	movs	r0, #1
 8001972:	f005 fcf7 	bl	8007364 <HAL_Delay>
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <Si468x_set_property+0xf4>)
 8001978:	2005      	movs	r0, #5
 800197a:	f7ff fe9f 	bl	80016bc <Si468x_read_reply>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <Si468x_set_property+0xf0>)
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f825 	bl	80019d8 <Si468x_get_property>
 800198e:	4603      	mov	r3, r0
 8001990:	81fb      	strh	r3, [r7, #14]
 8001992:	89fa      	ldrh	r2, [r7, #14]
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d104      	bne.n	80019a4 <Si468x_set_property+0xcc>
 800199a:	2101      	movs	r1, #1
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <Si468x_set_property+0xf8>)
 800199e:	f001 fff7 	bl	8003990 <send_debug_msg>
 80019a2:	e003      	b.n	80019ac <Si468x_set_property+0xd4>
 80019a4:	2101      	movs	r1, #1
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <Si468x_set_property+0xfc>)
 80019a8:	f001 fff2 	bl	8003990 <send_debug_msg>
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	0800d8a0 	.word	0x0800d8a0
 80019b8:	0800d8e0 	.word	0x0800d8e0
 80019bc:	200034d0 	.word	0x200034d0
 80019c0:	0800d8f0 	.word	0x0800d8f0
 80019c4:	200001a8 	.word	0x200001a8
 80019c8:	20003510 	.word	0x20003510
 80019cc:	200011a8 	.word	0x200011a8
 80019d0:	0800d90c 	.word	0x0800d90c
 80019d4:	0800d928 	.word	0x0800d928

080019d8 <Si468x_get_property>:
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
 80019e2:	2101      	movs	r1, #1
 80019e4:	482b      	ldr	r0, [pc, #172]	; (8001a94 <Si468x_get_property+0xbc>)
 80019e6:	f001 ffd3 	bl	8003990 <send_debug_msg>
 80019ea:	2100      	movs	r1, #0
 80019ec:	482a      	ldr	r0, [pc, #168]	; (8001a98 <Si468x_get_property+0xc0>)
 80019ee:	f001 ffcf 	bl	8003990 <send_debug_msg>
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	2210      	movs	r2, #16
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <Si468x_get_property+0xc4>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00b fca9 	bl	800d350 <itoa>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2101      	movs	r1, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 ffc4 	bl	8003990 <send_debug_msg>
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a0a:	2214      	movs	r2, #20
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	705a      	strb	r2, [r3, #1]
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a1a:	709a      	strb	r2, [r3, #2]
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a26:	70da      	strb	r2, [r3, #3]
 8001a28:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f7ff fe24 	bl	8001678 <Si468x_write_command>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <Si468x_get_property+0xcc>)
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f005 fc93 	bl	8007364 <HAL_Delay>
 8001a3e:	491a      	ldr	r1, [pc, #104]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a40:	2006      	movs	r0, #6
 8001a42:	f7ff fe3b 	bl	80016bc <Si468x_read_reply>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <Si468x_get_property+0xcc>)
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4816      	ldr	r0, [pc, #88]	; (8001aac <Si468x_get_property+0xd4>)
 8001a52:	f001 ff9d 	bl	8003990 <send_debug_msg>
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a58:	795b      	ldrb	r3, [r3, #5]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a5e:	7912      	ldrb	r2, [r2, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	2210      	movs	r2, #16
 8001a64:	490d      	ldr	r1, [pc, #52]	; (8001a9c <Si468x_get_property+0xc4>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00b fc72 	bl	800d350 <itoa>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 ff8d 	bl	8003990 <send_debug_msg>
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0800d940 	.word	0x0800d940
 8001a98:	0800d8e0 	.word	0x0800d8e0
 8001a9c:	200034d0 	.word	0x200034d0
 8001aa0:	200001a8 	.word	0x200001a8
 8001aa4:	20003510 	.word	0x20003510
 8001aa8:	200011a8 	.word	0x200011a8
 8001aac:	0800d97c 	.word	0x0800d97c

08001ab0 <Si468x_dab_tune_freq>:
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460a      	mov	r2, r1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80bb      	strh	r3, [r7, #4]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4858      	ldr	r0, [pc, #352]	; (8001c24 <Si468x_dab_tune_freq+0x174>)
 8001ac4:	f001 ff64 	bl	8003990 <send_debug_msg>
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4857      	ldr	r0, [pc, #348]	; (8001c28 <Si468x_dab_tune_freq+0x178>)
 8001acc:	f001 ff60 	bl	8003990 <send_debug_msg>
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <Si468x_dab_tune_freq+0x17c>)
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	220a      	movs	r2, #10
 8001ada:	4955      	ldr	r1, [pc, #340]	; (8001c30 <Si468x_dab_tune_freq+0x180>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b fc37 	bl	800d350 <itoa>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 ff52 	bl	8003990 <send_debug_msg>
 8001aec:	2101      	movs	r1, #1
 8001aee:	4851      	ldr	r0, [pc, #324]	; (8001c34 <Si468x_dab_tune_freq+0x184>)
 8001af0:	f001 ff4e 	bl	8003990 <send_debug_msg>
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001af6:	22b0      	movs	r2, #176	; 0xb0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
 8001b00:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	7093      	strb	r3, [r2, #2]
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	70da      	strb	r2, [r3, #3]
 8001b0c:	88bb      	ldrh	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <Si468x_dab_tune_freq+0x88>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d117      	bne.n	8001b46 <Si468x_dab_tune_freq+0x96>
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <Si468x_dab_tune_freq+0x18c>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b22:	711a      	strb	r2, [r3, #4]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <Si468x_dab_tune_freq+0x18c>)
 8001b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b34:	715a      	strb	r2, [r3, #5]
 8001b36:	e011      	b.n	8001b5c <Si468x_dab_tune_freq+0xac>
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	711a      	strb	r2, [r3, #4]
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	715a      	strb	r2, [r3, #5]
 8001b44:	e00a      	b.n	8001b5c <Si468x_dab_tune_freq+0xac>
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b4c:	711a      	strb	r2, [r3, #4]
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b58:	715a      	strb	r2, [r3, #5]
 8001b5a:	bf00      	nop
 8001b5c:	4936      	ldr	r1, [pc, #216]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f7ff fd8a 	bl	8001678 <Si468x_write_command>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <Si468x_dab_tune_freq+0x190>)
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <Si468x_dab_tune_freq+0x194>)
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff fda4 	bl	80016bc <Si468x_read_reply>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <Si468x_dab_tune_freq+0x190>)
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <Si468x_dab_tune_freq+0x198>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <Si468x_dab_tune_freq+0xe2>
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	482f      	ldr	r0, [pc, #188]	; (8001c4c <Si468x_dab_tune_freq+0x19c>)
 8001b8e:	f001 feff 	bl	8003990 <send_debug_msg>
 8001b92:	2300      	movs	r3, #0
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	e03a      	b.n	8001c0e <Si468x_dab_tune_freq+0x15e>
 8001b98:	492a      	ldr	r1, [pc, #168]	; (8001c44 <Si468x_dab_tune_freq+0x194>)
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7ff fd8e 	bl	80016bc <Si468x_read_reply>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <Si468x_dab_tune_freq+0x190>)
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <Si468x_dab_tune_freq+0x198>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01c      	beq.n	8001bf0 <Si468x_dab_tune_freq+0x140>
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4825      	ldr	r0, [pc, #148]	; (8001c50 <Si468x_dab_tune_freq+0x1a0>)
 8001bba:	f001 fee9 	bl	8003990 <send_debug_msg>
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	220a      	movs	r2, #10
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <Si468x_dab_tune_freq+0x180>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00b fbc3 	bl	800d350 <itoa>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fede 	bl	8003990 <send_debug_msg>
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	481f      	ldr	r0, [pc, #124]	; (8001c54 <Si468x_dab_tune_freq+0x1a4>)
 8001bd8:	f001 feda 	bl	8003990 <send_debug_msg>
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <Si468x_dab_tune_freq+0x1a8>)
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	7313      	strb	r3, [r2, #12]
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <Si468x_dab_tune_freq+0x17c>)
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <Si468x_dab_tune_freq+0x1a8>)
 8001bec:	6093      	str	r3, [r2, #8]
 8001bee:	e014      	b.n	8001c1a <Si468x_dab_tune_freq+0x16a>
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d103      	bne.n	8001c02 <Si468x_dab_tune_freq+0x152>
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4817      	ldr	r0, [pc, #92]	; (8001c5c <Si468x_dab_tune_freq+0x1ac>)
 8001bfe:	f001 fec7 	bl	8003990 <send_debug_msg>
 8001c02:	2001      	movs	r0, #1
 8001c04:	f005 fbae 	bl	8007364 <HAL_Delay>
 8001c08:	89fb      	ldrh	r3, [r7, #14]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	81fb      	strh	r3, [r7, #14]
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d9bf      	bls.n	8001b98 <Si468x_dab_tune_freq+0xe8>
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0800da34 	.word	0x0800da34
 8001c28:	0800da70 	.word	0x0800da70
 8001c2c:	20003514 	.word	0x20003514
 8001c30:	200034d0 	.word	0x200034d0
 8001c34:	0800d9f0 	.word	0x0800d9f0
 8001c38:	200001a8 	.word	0x200001a8
 8001c3c:	08010994 	.word	0x08010994
 8001c40:	20003510 	.word	0x20003510
 8001c44:	200011a8 	.word	0x200011a8
 8001c48:	200035fc 	.word	0x200035fc
 8001c4c:	0800d634 	.word	0x0800d634
 8001c50:	0800da7c 	.word	0x0800da7c
 8001c54:	0800da98 	.word	0x0800da98
 8001c58:	20004bc4 	.word	0x20004bc4
 8001c5c:	0800daa0 	.word	0x0800daa0

08001c60 <Si468x_dab_digrad_status>:
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <Si468x_dab_digrad_status+0x9c>)
 8001c6a:	22b2      	movs	r2, #178	; 0xb2
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <Si468x_dab_digrad_status+0x9c>)
 8001c70:	221a      	movs	r2, #26
 8001c72:	705a      	strb	r2, [r3, #1]
 8001c74:	4921      	ldr	r1, [pc, #132]	; (8001cfc <Si468x_dab_digrad_status+0x9c>)
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff fcfe 	bl	8001678 <Si468x_write_command>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <Si468x_dab_digrad_status+0xa0>)
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	2001      	movs	r0, #1
 8001c86:	f005 fb6d 	bl	8007364 <HAL_Delay>
 8001c8a:	491e      	ldr	r1, [pc, #120]	; (8001d04 <Si468x_dab_digrad_status+0xa4>)
 8001c8c:	2028      	movs	r0, #40	; 0x28
 8001c8e:	f7ff fd15 	bl	80016bc <Si468x_read_reply>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <Si468x_dab_digrad_status+0xa0>)
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <Si468x_dab_digrad_status+0xa8>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d019      	beq.n	8001cdc <Si468x_dab_digrad_status+0x7c>
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <Si468x_dab_digrad_status+0xa4>)
 8001cac:	4615      	mov	r5, r2
 8001cae:	1d1c      	adds	r4, r3, #4
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	2b14      	cmp	r3, #20
 8001cc6:	d902      	bls.n	8001cce <Si468x_dab_digrad_status+0x6e>
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	70da      	strb	r2, [r3, #3]
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	2b36      	cmp	r3, #54	; 0x36
 8001cd4:	d902      	bls.n	8001cdc <Si468x_dab_digrad_status+0x7c>
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	715a      	strb	r2, [r3, #5]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001ce0:	461c      	mov	r4, r3
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cf0:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	200001a8 	.word	0x200001a8
 8001d00:	20003510 	.word	0x20003510
 8001d04:	200011a8 	.word	0x200011a8
 8001d08:	200035fc 	.word	0x200035fc
 8001d0c:	200035d4 	.word	0x200035d4

08001d10 <Si468x_dab_get_digital_service_list>:
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	2300      	movs	r3, #0
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	77fb      	strb	r3, [r7, #31]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	77bb      	strb	r3, [r7, #30]
 8001d22:	2300      	movs	r3, #0
 8001d24:	777b      	strb	r3, [r7, #29]
 8001d26:	4ba2      	ldr	r3, [pc, #648]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	4ba0      	ldr	r3, [pc, #640]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	705a      	strb	r2, [r3, #1]
 8001d32:	499f      	ldr	r1, [pc, #636]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff fc9f 	bl	8001678 <Si468x_write_command>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b9d      	ldr	r3, [pc, #628]	; (8001fb4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	2001      	movs	r0, #1
 8001d44:	f005 fb0e 	bl	8007364 <HAL_Delay>
 8001d48:	499b      	ldr	r1, [pc, #620]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4e:	f7ff fcb5 	bl	80016bc <Si468x_read_reply>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4897      	ldr	r0, [pc, #604]	; (8001fbc <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d5e:	f001 fe17 	bl	8003990 <send_debug_msg>
 8001d62:	4b97      	ldr	r3, [pc, #604]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <Si468x_dab_get_digital_service_list+0x68>
 8001d70:	2101      	movs	r1, #1
 8001d72:	4894      	ldr	r0, [pc, #592]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d74:	f001 fe0c 	bl	8003990 <send_debug_msg>
 8001d78:	4b8f      	ldr	r3, [pc, #572]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d7a:	791b      	ldrb	r3, [r3, #4]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d80:	795b      	ldrb	r3, [r3, #5]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	82fb      	strh	r3, [r7, #22]
 8001d8c:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d8e:	7a1b      	ldrb	r3, [r3, #8]
 8001d90:	77fb      	strb	r3, [r7, #31]
 8001d92:	2300      	movs	r3, #0
 8001d94:	773b      	strb	r3, [r7, #28]
 8001d96:	e250      	b.n	800223a <Si468x_dab_get_digital_service_list+0x52a>
 8001d98:	7f3b      	ldrb	r3, [r7, #28]
 8001d9a:	4a8b      	ldr	r2, [pc, #556]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d9c:	7892      	ldrb	r2, [r2, #2]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a89      	ldr	r2, [pc, #548]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001da2:	6892      	ldr	r2, [r2, #8]
 8001da4:	4989      	ldr	r1, [pc, #548]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001da6:	2034      	movs	r0, #52	; 0x34
 8001da8:	fb00 f303 	mul.w	r3, r0, r3
 8001dac:	440b      	add	r3, r1
 8001dae:	3324      	adds	r3, #36	; 0x24
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	7f3b      	ldrb	r3, [r7, #28]
 8001db4:	4a84      	ldr	r2, [pc, #528]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001db6:	7892      	ldrb	r2, [r2, #2]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a83      	ldr	r2, [pc, #524]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dbc:	7b10      	ldrb	r0, [r2, #12]
 8001dbe:	4a83      	ldr	r2, [pc, #524]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dc0:	2134      	movs	r1, #52	; 0x34
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3328      	adds	r3, #40	; 0x28
 8001dca:	4602      	mov	r2, r0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	7fba      	ldrb	r2, [r7, #30]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	f103 0210 	add.w	r2, r3, #16
 8001ddc:	7f7b      	ldrb	r3, [r7, #29]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001de4:	5cd2      	ldrb	r2, [r2, r3]
 8001de6:	7f3b      	ldrb	r3, [r7, #28]
 8001de8:	4977      	ldr	r1, [pc, #476]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dea:	7889      	ldrb	r1, [r1, #2]
 8001dec:	440b      	add	r3, r1
 8001dee:	f002 0201 	and.w	r2, r2, #1
 8001df2:	b2d0      	uxtb	r0, r2
 8001df4:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001df6:	2134      	movs	r1, #52	; 0x34
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3314      	adds	r3, #20
 8001e00:	4602      	mov	r2, r0
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	7fba      	ldrb	r2, [r7, #30]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	f103 0211 	add.w	r2, r3, #17
 8001e12:	7f7b      	ldrb	r3, [r7, #29]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e1a:	5cd2      	ldrb	r2, [r2, r3]
 8001e1c:	7f3b      	ldrb	r3, [r7, #28]
 8001e1e:	496a      	ldr	r1, [pc, #424]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e20:	7889      	ldrb	r1, [r1, #2]
 8001e22:	440b      	add	r3, r1
 8001e24:	f002 020f 	and.w	r2, r2, #15
 8001e28:	b2d0      	uxtb	r0, r2
 8001e2a:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e2c:	2134      	movs	r1, #52	; 0x34
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3329      	adds	r3, #41	; 0x29
 8001e36:	4602      	mov	r2, r0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	7f3b      	ldrb	r3, [r7, #28]
 8001e3c:	4a62      	ldr	r2, [pc, #392]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e3e:	7892      	ldrb	r2, [r2, #2]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a62      	ldr	r2, [pc, #392]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e44:	2134      	movs	r1, #52	; 0x34
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d017      	beq.n	8001e84 <Si468x_dab_get_digital_service_list+0x174>
 8001e54:	7fbb      	ldrb	r3, [r7, #30]
 8001e56:	3301      	adds	r3, #1
 8001e58:	77bb      	strb	r3, [r7, #30]
 8001e5a:	7f3b      	ldrb	r3, [r7, #28]
 8001e5c:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e5e:	7892      	ldrb	r2, [r2, #2]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e64:	2134      	movs	r1, #52	; 0x34
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3329      	adds	r3, #41	; 0x29
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	7f7b      	ldrb	r3, [r7, #29]
 8001e72:	4413      	add	r3, r2
 8001e74:	777b      	strb	r3, [r7, #29]
 8001e76:	7f3b      	ldrb	r3, [r7, #28]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	773b      	strb	r3, [r7, #28]
 8001e7c:	7ffb      	ldrb	r3, [r7, #31]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	77fb      	strb	r3, [r7, #31]
 8001e82:	e1d7      	b.n	8002234 <Si468x_dab_get_digital_service_list+0x524>
 8001e84:	7fba      	ldrb	r2, [r7, #30]
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	f103 0210 	add.w	r2, r3, #16
 8001e92:	7f7b      	ldrb	r3, [r7, #29]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	105b      	asrs	r3, r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7f3b      	ldrb	r3, [r7, #28]
 8001ea2:	4949      	ldr	r1, [pc, #292]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ea4:	7889      	ldrb	r1, [r1, #2]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	b2d0      	uxtb	r0, r2
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001eb0:	2134      	movs	r1, #52	; 0x34
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3315      	adds	r3, #21
 8001eba:	4602      	mov	r2, r0
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	7f3b      	ldrb	r3, [r7, #28]
 8001ec0:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ec2:	7892      	ldrb	r2, [r2, #2]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ec8:	2134      	movs	r1, #52	; 0x34
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <Si468x_dab_get_digital_service_list+0x1ce>
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d079      	beq.n	8001fd0 <Si468x_dab_get_digital_service_list+0x2c0>
 8001edc:	e0ee      	b.n	80020bc <Si468x_dab_get_digital_service_list+0x3ac>
 8001ede:	7fba      	ldrb	r2, [r7, #30]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f103 020c 	add.w	r2, r3, #12
 8001eec:	7f7b      	ldrb	r3, [r7, #29]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	7fba      	ldrb	r2, [r7, #30]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f103 020d 	add.w	r2, r3, #13
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f16:	4419      	add	r1, r3
 8001f18:	7f3b      	ldrb	r3, [r7, #28]
 8001f1a:	4a2b      	ldr	r2, [pc, #172]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f1c:	7892      	ldrb	r2, [r2, #2]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4608      	mov	r0, r1
 8001f22:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f24:	2134      	movs	r1, #52	; 0x34
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	6018      	str	r0, [r3, #0]
 8001f30:	7fba      	ldrb	r2, [r7, #30]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	f103 020d 	add.w	r2, r3, #13
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f46:	5cd2      	ldrb	r2, [r2, r3]
 8001f48:	7f3b      	ldrb	r3, [r7, #28]
 8001f4a:	491f      	ldr	r1, [pc, #124]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f4c:	7889      	ldrb	r1, [r1, #2]
 8001f4e:	440b      	add	r3, r1
 8001f50:	0912      	lsrs	r2, r2, #4
 8001f52:	b2d0      	uxtb	r0, r2
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f56:	2134      	movs	r1, #52	; 0x34
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	331c      	adds	r3, #28
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	7f3b      	ldrb	r3, [r7, #28]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f68:	7892      	ldrb	r2, [r2, #2]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f6e:	2134      	movs	r1, #52	; 0x34
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	331c      	adds	r3, #28
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	031b      	lsls	r3, r3, #12
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	7f3b      	ldrb	r3, [r7, #28]
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f82:	7892      	ldrb	r2, [r2, #2]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f88:	2134      	movs	r1, #52	; 0x34
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3318      	adds	r3, #24
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	7f3b      	ldrb	r3, [r7, #28]
 8001f96:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f98:	7889      	ldrb	r1, [r1, #2]
 8001f9a:	440b      	add	r3, r1
 8001f9c:	4402      	add	r2, r0
 8001f9e:	490b      	ldr	r1, [pc, #44]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001fa0:	2034      	movs	r0, #52	; 0x34
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3320      	adds	r3, #32
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e086      	b.n	80020bc <Si468x_dab_get_digital_service_list+0x3ac>
 8001fae:	bf00      	nop
 8001fb0:	200001a8 	.word	0x200001a8
 8001fb4:	20003510 	.word	0x20003510
 8001fb8:	200011a8 	.word	0x200011a8
 8001fbc:	0800db00 	.word	0x0800db00
 8001fc0:	200035fc 	.word	0x200035fc
 8001fc4:	0800d634 	.word	0x0800d634
 8001fc8:	20004bc4 	.word	0x20004bc4
 8001fcc:	20003774 	.word	0x20003774
 8001fd0:	7fba      	ldrb	r2, [r7, #30]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	f103 020c 	add.w	r2, r3, #12
 8001fde:	7f7b      	ldrb	r3, [r7, #29]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4aa0      	ldr	r2, [pc, #640]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	7fba      	ldrb	r2, [r7, #30]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	f103 020d 	add.w	r2, r3, #13
 8001ff8:	7f7b      	ldrb	r3, [r7, #29]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a9a      	ldr	r2, [pc, #616]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4419      	add	r1, r3
 8002006:	7fba      	ldrb	r2, [r7, #30]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	f103 020e 	add.w	r2, r3, #14
 8002014:	7f7b      	ldrb	r3, [r7, #29]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	4a93      	ldr	r2, [pc, #588]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002024:	4419      	add	r1, r3
 8002026:	7f3b      	ldrb	r3, [r7, #28]
 8002028:	4a90      	ldr	r2, [pc, #576]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800202a:	7892      	ldrb	r2, [r2, #2]
 800202c:	4413      	add	r3, r2
 800202e:	4608      	mov	r0, r1
 8002030:	4a8f      	ldr	r2, [pc, #572]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002032:	2134      	movs	r1, #52	; 0x34
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3318      	adds	r3, #24
 800203c:	6018      	str	r0, [r3, #0]
 800203e:	7fba      	ldrb	r2, [r7, #30]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	f103 020e 	add.w	r2, r3, #14
 800204c:	7f7b      	ldrb	r3, [r7, #29]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	4a85      	ldr	r2, [pc, #532]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8002054:	5cd2      	ldrb	r2, [r2, r3]
 8002056:	7f3b      	ldrb	r3, [r7, #28]
 8002058:	4984      	ldr	r1, [pc, #528]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800205a:	7889      	ldrb	r1, [r1, #2]
 800205c:	440b      	add	r3, r1
 800205e:	0912      	lsrs	r2, r2, #4
 8002060:	b2d0      	uxtb	r0, r2
 8002062:	4a83      	ldr	r2, [pc, #524]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002064:	2134      	movs	r1, #52	; 0x34
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	331c      	adds	r3, #28
 800206e:	4602      	mov	r2, r0
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	7f3b      	ldrb	r3, [r7, #28]
 8002074:	4a7d      	ldr	r2, [pc, #500]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002076:	7892      	ldrb	r2, [r2, #2]
 8002078:	4413      	add	r3, r2
 800207a:	4a7d      	ldr	r2, [pc, #500]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800207c:	2134      	movs	r1, #52	; 0x34
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	331c      	adds	r3, #28
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	051b      	lsls	r3, r3, #20
 800208a:	4618      	mov	r0, r3
 800208c:	7f3b      	ldrb	r3, [r7, #28]
 800208e:	4a77      	ldr	r2, [pc, #476]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002090:	7892      	ldrb	r2, [r2, #2]
 8002092:	4413      	add	r3, r2
 8002094:	4a76      	ldr	r2, [pc, #472]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002096:	2134      	movs	r1, #52	; 0x34
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3318      	adds	r3, #24
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	7f3b      	ldrb	r3, [r7, #28]
 80020a4:	4971      	ldr	r1, [pc, #452]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80020a6:	7889      	ldrb	r1, [r1, #2]
 80020a8:	440b      	add	r3, r1
 80020aa:	4402      	add	r2, r0
 80020ac:	4970      	ldr	r1, [pc, #448]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 80020ae:	2034      	movs	r0, #52	; 0x34
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	440b      	add	r3, r1
 80020b6:	3320      	adds	r3, #32
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	bf00      	nop
 80020bc:	7fba      	ldrb	r2, [r7, #30]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f103 0214 	add.w	r2, r3, #20
 80020ca:	7f7b      	ldrb	r3, [r7, #29]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03f      	beq.n	8002158 <Si468x_dab_get_digital_service_list+0x448>
 80020d8:	2300      	movs	r3, #0
 80020da:	76fb      	strb	r3, [r7, #27]
 80020dc:	e038      	b.n	8002150 <Si468x_dab_get_digital_service_list+0x440>
 80020de:	7efb      	ldrb	r3, [r7, #27]
 80020e0:	f103 0114 	add.w	r1, r3, #20
 80020e4:	7fba      	ldrb	r2, [r7, #30]
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	18ca      	adds	r2, r1, r3
 80020f0:	7f7b      	ldrb	r3, [r7, #29]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	18d1      	adds	r1, r2, r3
 80020f6:	7f3b      	ldrb	r3, [r7, #28]
 80020f8:	4a5c      	ldr	r2, [pc, #368]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80020fa:	7892      	ldrb	r2, [r2, #2]
 80020fc:	441a      	add	r2, r3
 80020fe:	7efb      	ldrb	r3, [r7, #27]
 8002100:	4859      	ldr	r0, [pc, #356]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8002102:	5c44      	ldrb	r4, [r0, r1]
 8002104:	495a      	ldr	r1, [pc, #360]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002106:	2034      	movs	r0, #52	; 0x34
 8002108:	fb00 f202 	mul.w	r2, r0, r2
 800210c:	440a      	add	r2, r1
 800210e:	4413      	add	r3, r2
 8002110:	4622      	mov	r2, r4
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	7f3b      	ldrb	r3, [r7, #28]
 8002116:	4a55      	ldr	r2, [pc, #340]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002118:	7892      	ldrb	r2, [r2, #2]
 800211a:	441a      	add	r2, r3
 800211c:	7efb      	ldrb	r3, [r7, #27]
 800211e:	4954      	ldr	r1, [pc, #336]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002120:	2034      	movs	r0, #52	; 0x34
 8002122:	fb00 f202 	mul.w	r2, r0, r2
 8002126:	440a      	add	r2, r1
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b86      	cmp	r3, #134	; 0x86
 800212e:	d10c      	bne.n	800214a <Si468x_dab_get_digital_service_list+0x43a>
 8002130:	7f3b      	ldrb	r3, [r7, #28]
 8002132:	4a4e      	ldr	r2, [pc, #312]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002134:	7892      	ldrb	r2, [r2, #2]
 8002136:	441a      	add	r2, r3
 8002138:	7efb      	ldrb	r3, [r7, #27]
 800213a:	494d      	ldr	r1, [pc, #308]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800213c:	2034      	movs	r0, #52	; 0x34
 800213e:	fb00 f202 	mul.w	r2, r0, r2
 8002142:	440a      	add	r2, r1
 8002144:	4413      	add	r3, r2
 8002146:	226f      	movs	r2, #111	; 0x6f
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	7efb      	ldrb	r3, [r7, #27]
 800214c:	3301      	adds	r3, #1
 800214e:	76fb      	strb	r3, [r7, #27]
 8002150:	7efb      	ldrb	r3, [r7, #27]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d9c3      	bls.n	80020de <Si468x_dab_get_digital_service_list+0x3ce>
 8002156:	e026      	b.n	80021a6 <Si468x_dab_get_digital_service_list+0x496>
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <Si468x_dab_get_digital_service_list+0x564>)
 800215a:	463c      	mov	r4, r7
 800215c:	461d      	mov	r5, r3
 800215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	7023      	strb	r3, [r4, #0]
 8002166:	f107 0311 	add.w	r3, r7, #17
 800216a:	2200      	movs	r2, #0
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	709a      	strb	r2, [r3, #2]
 8002170:	2300      	movs	r3, #0
 8002172:	76bb      	strb	r3, [r7, #26]
 8002174:	e014      	b.n	80021a0 <Si468x_dab_get_digital_service_list+0x490>
 8002176:	7eb9      	ldrb	r1, [r7, #26]
 8002178:	7f3b      	ldrb	r3, [r7, #28]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800217c:	7892      	ldrb	r2, [r2, #2]
 800217e:	441a      	add	r2, r3
 8002180:	7ebb      	ldrb	r3, [r7, #26]
 8002182:	3120      	adds	r1, #32
 8002184:	4439      	add	r1, r7
 8002186:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800218a:	4939      	ldr	r1, [pc, #228]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800218c:	2034      	movs	r0, #52	; 0x34
 800218e:	fb00 f202 	mul.w	r2, r0, r2
 8002192:	440a      	add	r2, r1
 8002194:	4413      	add	r3, r2
 8002196:	4622      	mov	r2, r4
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	7ebb      	ldrb	r3, [r7, #26]
 800219c:	3301      	adds	r3, #1
 800219e:	76bb      	strb	r3, [r7, #26]
 80021a0:	7ebb      	ldrb	r3, [r7, #26]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d9e7      	bls.n	8002176 <Si468x_dab_get_digital_service_list+0x466>
 80021a6:	2300      	movs	r3, #0
 80021a8:	767b      	strb	r3, [r7, #25]
 80021aa:	e032      	b.n	8002212 <Si468x_dab_get_digital_service_list+0x502>
 80021ac:	7f3b      	ldrb	r3, [r7, #28]
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80021b0:	7892      	ldrb	r2, [r2, #2]
 80021b2:	441a      	add	r2, r3
 80021b4:	7e7b      	ldrb	r3, [r7, #25]
 80021b6:	492e      	ldr	r1, [pc, #184]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 80021b8:	201a      	movs	r0, #26
 80021ba:	fb00 f202 	mul.w	r2, r0, r2
 80021be:	4413      	add	r3, r2
 80021c0:	3314      	adds	r3, #20
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	440b      	add	r3, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	70da      	strb	r2, [r3, #3]
 80021ca:	7fba      	ldrb	r2, [r7, #30]
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021d8:	7f7b      	ldrb	r3, [r7, #29]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 80021e0:	5cd1      	ldrb	r1, [r2, r3]
 80021e2:	7f3b      	ldrb	r3, [r7, #28]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80021e6:	7892      	ldrb	r2, [r2, #2]
 80021e8:	441a      	add	r2, r3
 80021ea:	7e7b      	ldrb	r3, [r7, #25]
 80021ec:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021f0:	b2cc      	uxtb	r4, r1
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 80021f4:	201a      	movs	r0, #26
 80021f6:	fb00 f202 	mul.w	r2, r0, r2
 80021fa:	4413      	add	r3, r2
 80021fc:	3314      	adds	r3, #20
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	440b      	add	r3, r1
 8002202:	4622      	mov	r2, r4
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	7f7b      	ldrb	r3, [r7, #29]
 8002208:	3301      	adds	r3, #1
 800220a:	777b      	strb	r3, [r7, #29]
 800220c:	7e7b      	ldrb	r3, [r7, #25]
 800220e:	3301      	adds	r3, #1
 8002210:	767b      	strb	r3, [r7, #25]
 8002212:	7f3b      	ldrb	r3, [r7, #28]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002216:	7892      	ldrb	r2, [r2, #2]
 8002218:	4413      	add	r3, r2
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800221c:	2134      	movs	r1, #52	; 0x34
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3329      	adds	r3, #41	; 0x29
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	7e7a      	ldrb	r2, [r7, #25]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3be      	bcc.n	80021ac <Si468x_dab_get_digital_service_list+0x49c>
 800222e:	7fbb      	ldrb	r3, [r7, #30]
 8002230:	3301      	adds	r3, #1
 8002232:	77bb      	strb	r3, [r7, #30]
 8002234:	7f3b      	ldrb	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	773b      	strb	r3, [r7, #28]
 800223a:	7f3a      	ldrb	r2, [r7, #28]
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	429a      	cmp	r2, r3
 8002240:	f4ff adaa 	bcc.w	8001d98 <Si468x_dab_get_digital_service_list+0x88>
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	4413      	add	r3, r2
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002254:	789a      	ldrb	r2, [r3, #2]
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	4413      	add	r3, r2
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800225e:	709a      	strb	r2, [r3, #2]
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bdb0      	pop	{r4, r5, r7, pc}
 8002268:	200011a8 	.word	0x200011a8
 800226c:	20004bc4 	.word	0x20004bc4
 8002270:	20003774 	.word	0x20003774
 8002274:	0800db3c 	.word	0x0800db3c

08002278 <Si468x_dab_start_digital_service>:
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	2101      	movs	r1, #1
 8002284:	482d      	ldr	r0, [pc, #180]	; (800233c <Si468x_dab_start_digital_service+0xc4>)
 8002286:	f001 fb83 	bl	8003990 <send_debug_msg>
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 800228c:	2281      	movs	r2, #129	; 0x81
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 8002292:	2200      	movs	r2, #0
 8002294:	705a      	strb	r2, [r3, #1]
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 8002298:	2200      	movs	r2, #0
 800229a:	709a      	strb	r2, [r3, #2]
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	70da      	strb	r2, [r3, #3]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022a8:	711a      	strb	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022b2:	715a      	strb	r2, [r3, #5]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022bc:	719a      	strb	r2, [r3, #6]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0e1b      	lsrs	r3, r3, #24
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022c6:	71da      	strb	r2, [r3, #7]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022ce:	721a      	strb	r2, [r3, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022d8:	725a      	strb	r2, [r3, #9]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022e2:	729a      	strb	r2, [r3, #10]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	0e1b      	lsrs	r3, r3, #24
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022ec:	72da      	strb	r2, [r3, #11]
 80022ee:	4914      	ldr	r1, [pc, #80]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022f0:	200c      	movs	r0, #12
 80022f2:	f7ff f9c1 	bl	8001678 <Si468x_write_command>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <Si468x_dab_start_digital_service+0xcc>)
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	2001      	movs	r0, #1
 8002300:	f005 f830 	bl	8007364 <HAL_Delay>
 8002304:	4910      	ldr	r1, [pc, #64]	; (8002348 <Si468x_dab_start_digital_service+0xd0>)
 8002306:	2005      	movs	r0, #5
 8002308:	f7ff f9d8 	bl	80016bc <Si468x_read_reply>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <Si468x_dab_start_digital_service+0xcc>)
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <Si468x_dab_start_digital_service+0xd4>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <Si468x_dab_start_digital_service+0xb4>
 8002322:	2101      	movs	r1, #1
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <Si468x_dab_start_digital_service+0xd8>)
 8002326:	f001 fb33 	bl	8003990 <send_debug_msg>
 800232a:	e003      	b.n	8002334 <Si468x_dab_start_digital_service+0xbc>
 800232c:	2101      	movs	r1, #1
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <Si468x_dab_start_digital_service+0xdc>)
 8002330:	f001 fb2e 	bl	8003990 <send_debug_msg>
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	0800db50 	.word	0x0800db50
 8002340:	200001a8 	.word	0x200001a8
 8002344:	20003510 	.word	0x20003510
 8002348:	200011a8 	.word	0x200011a8
 800234c:	200035fc 	.word	0x200035fc
 8002350:	0800d634 	.word	0x0800d634
 8002354:	0800db8c 	.word	0x0800db8c

08002358 <Si468x_dab_get_ensemble_info>:
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	2101      	movs	r1, #1
 8002364:	484a      	ldr	r0, [pc, #296]	; (8002490 <Si468x_dab_get_ensemble_info+0x138>)
 8002366:	f001 fb13 	bl	8003990 <send_debug_msg>
 800236a:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 800236c:	22b4      	movs	r2, #180	; 0xb4
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	4b48      	ldr	r3, [pc, #288]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
 8002376:	4947      	ldr	r1, [pc, #284]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff f97d 	bl	8001678 <Si468x_write_command>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	2002      	movs	r0, #2
 8002388:	f004 ffec 	bl	8007364 <HAL_Delay>
 800238c:	4943      	ldr	r1, [pc, #268]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 800238e:	2015      	movs	r0, #21
 8002390:	f7ff f994 	bl	80016bc <Si468x_read_reply>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e012      	b.n	80023c4 <Si468x_dab_get_ensemble_info+0x6c>
 800239e:	493d      	ldr	r1, [pc, #244]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7ff f969 	bl	8001678 <Si468x_write_command>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	2002      	movs	r0, #2
 80023b0:	f004 ffd8 	bl	8007364 <HAL_Delay>
 80023b4:	4939      	ldr	r1, [pc, #228]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023b6:	2015      	movs	r0, #21
 80023b8:	f7ff f980 	bl	80016bc <Si468x_read_reply>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023c6:	799b      	ldrb	r3, [r3, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0e8      	beq.n	800239e <Si468x_dab_get_ensemble_info+0x46>
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <Si468x_dab_get_ensemble_info+0x148>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <Si468x_dab_get_ensemble_info+0x8e>
 80023da:	2101      	movs	r1, #1
 80023dc:	4831      	ldr	r0, [pc, #196]	; (80024a4 <Si468x_dab_get_ensemble_info+0x14c>)
 80023de:	f001 fad7 	bl	8003990 <send_debug_msg>
 80023e2:	2300      	movs	r3, #0
 80023e4:	e050      	b.n	8002488 <Si468x_dab_get_ensemble_info+0x130>
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023e8:	795b      	ldrb	r3, [r3, #5]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023ee:	7912      	ldrb	r2, [r2, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d041      	beq.n	800247e <Si468x_dab_get_ensemble_info+0x126>
 80023fa:	2101      	movs	r1, #1
 80023fc:	482a      	ldr	r0, [pc, #168]	; (80024a8 <Si468x_dab_get_ensemble_info+0x150>)
 80023fe:	f001 fac7 	bl	8003990 <send_debug_msg>
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	b291      	uxth	r1, r2
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	4413      	add	r3, r2
 8002410:	460a      	mov	r2, r1
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	4618      	mov	r0, r3
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 8002420:	0143      	lsls	r3, r0, #5
 8002422:	440b      	add	r3, r1
 8002424:	3318      	adds	r3, #24
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	4b20      	ldr	r3, [pc, #128]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	4618      	mov	r0, r3
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002430:	7b19      	ldrb	r1, [r3, #12]
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 8002434:	0143      	lsls	r3, r0, #5
 8002436:	4413      	add	r3, r2
 8002438:	331c      	adds	r3, #28
 800243a:	460a      	mov	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	2300      	movs	r3, #0
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	e011      	b.n	8002468 <Si468x_dab_get_ensemble_info+0x110>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	1d9a      	adds	r2, r3, #6
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	461c      	mov	r4, r3
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4912      	ldr	r1, [pc, #72]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 8002452:	5c88      	ldrb	r0, [r1, r2]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 8002456:	0162      	lsls	r2, r4, #5
 8002458:	440a      	add	r2, r1
 800245a:	4413      	add	r3, r2
 800245c:	3302      	adds	r3, #2
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	3301      	adds	r3, #1
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d9ea      	bls.n	8002444 <Si468x_dab_get_ensemble_info+0xec>
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002478:	705a      	strb	r2, [r3, #1]
 800247a:	2301      	movs	r3, #1
 800247c:	e004      	b.n	8002488 <Si468x_dab_get_ensemble_info+0x130>
 800247e:	2101      	movs	r1, #1
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <Si468x_dab_get_ensemble_info+0x15c>)
 8002482:	f001 fa85 	bl	8003990 <send_debug_msg>
 8002486:	2300      	movs	r3, #0
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	0800dbac 	.word	0x0800dbac
 8002494:	200001a8 	.word	0x200001a8
 8002498:	20003510 	.word	0x20003510
 800249c:	200011a8 	.word	0x200011a8
 80024a0:	200035fc 	.word	0x200035fc
 80024a4:	0800d634 	.word	0x0800d634
 80024a8:	0800dbe8 	.word	0x0800dbe8
 80024ac:	20004bc4 	.word	0x20004bc4
 80024b0:	20003634 	.word	0x20003634
 80024b4:	0800dbf8 	.word	0x0800dbf8

080024b8 <Si468x_dab_full_scan>:
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b099      	sub	sp, #100	; 0x64
 80024bc:	af0a      	add	r7, sp, #40	; 0x28
 80024be:	2101      	movs	r1, #1
 80024c0:	4887      	ldr	r0, [pc, #540]	; (80026e0 <Si468x_dab_full_scan+0x228>)
 80024c2:	f001 fa65 	bl	8003990 <send_debug_msg>
 80024c6:	4b87      	ldr	r3, [pc, #540]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	705a      	strb	r2, [r3, #1]
 80024d2:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	709a      	strb	r2, [r3, #2]
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024f0:	e09e      	b.n	8002630 <Si468x_dab_full_scan+0x178>
 80024f2:	f004 fb8f 	bl	8006c14 <Touch_read>
 80024f6:	4603      	mov	r3, r0
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d90c      	bls.n	800251a <Si468x_dab_full_scan+0x62>
 8002500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002502:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002506:	d808      	bhi.n	800251a <Si468x_dab_full_scan+0x62>
 8002508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800250a:	2bc3      	cmp	r3, #195	; 0xc3
 800250c:	d905      	bls.n	800251a <Si468x_dab_full_scan+0x62>
 800250e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002510:	2bea      	cmp	r3, #234	; 0xea
 8002512:	d802      	bhi.n	800251a <Si468x_dab_full_scan+0x62>
 8002514:	2301      	movs	r3, #1
 8002516:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800251a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 808e 	bne.w	8002640 <Si468x_dab_full_scan+0x188>
 8002524:	2306      	movs	r3, #6
 8002526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800252a:	2396      	movs	r3, #150	; 0x96
 800252c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002530:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff faba 	bl	8001ab0 <Si468x_dab_tune_freq>
 800253c:	463b      	mov	r3, r7
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb8e 	bl	8001c60 <Si468x_dab_digrad_status>
 8002544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002548:	3b01      	subs	r3, #1
 800254a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800254e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <Si468x_dab_full_scan+0xa8>
 8002556:	2101      	movs	r1, #1
 8002558:	4863      	ldr	r0, [pc, #396]	; (80026e8 <Si468x_dab_full_scan+0x230>)
 800255a:	f001 fa19 	bl	8003990 <send_debug_msg>
 800255e:	e010      	b.n	8002582 <Si468x_dab_full_scan+0xca>
 8002560:	2032      	movs	r0, #50	; 0x32
 8002562:	f004 feff 	bl	8007364 <HAL_Delay>
 8002566:	4b61      	ldr	r3, [pc, #388]	; (80026ec <Si468x_dab_full_scan+0x234>)
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0e3      	beq.n	800253c <Si468x_dab_full_scan+0x84>
 8002574:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <Si468x_dab_full_scan+0x234>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0dc      	beq.n	800253c <Si468x_dab_full_scan+0x84>
 8002582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <Si468x_dab_full_scan+0x104>
 800258a:	463b      	mov	r3, r7
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb67 	bl	8001c60 <Si468x_dab_digrad_status>
 8002592:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002596:	3b01      	subs	r3, #1
 8002598:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800259c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <Si468x_dab_full_scan+0xf6>
 80025a4:	2101      	movs	r1, #1
 80025a6:	4850      	ldr	r0, [pc, #320]	; (80026e8 <Si468x_dab_full_scan+0x230>)
 80025a8:	f001 f9f2 	bl	8003990 <send_debug_msg>
 80025ac:	e006      	b.n	80025bc <Si468x_dab_full_scan+0x104>
 80025ae:	2032      	movs	r0, #50	; 0x32
 80025b0:	f004 fed8 	bl	8007364 <HAL_Delay>
 80025b4:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <Si468x_dab_full_scan+0x234>)
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	2b31      	cmp	r3, #49	; 0x31
 80025ba:	d9e6      	bls.n	800258a <Si468x_dab_full_scan+0xd2>
 80025bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01d      	beq.n	8002600 <Si468x_dab_full_scan+0x148>
 80025c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d019      	beq.n	8002600 <Si468x_dab_full_scan+0x148>
 80025cc:	f000 fb12 	bl	8002bf4 <Si468x_dab_get_event_status>
 80025d0:	200a      	movs	r0, #10
 80025d2:	f004 fec7 	bl	8007364 <HAL_Delay>
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <Si468x_dab_full_scan+0x238>)
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f3      	beq.n	80025cc <Si468x_dab_full_scan+0x114>
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <Si468x_dab_full_scan+0x238>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ec      	bne.n	80025cc <Si468x_dab_full_scan+0x114>
 80025f2:	f7ff feb1 	bl	8002358 <Si468x_dab_get_ensemble_info>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <Si468x_dab_full_scan+0x148>
 80025fc:	f7ff fb88 	bl	8001d10 <Si468x_dab_get_digital_service_list>
 8002600:	4e3a      	ldr	r6, [pc, #232]	; (80026ec <Si468x_dab_full_scan+0x234>)
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002604:	ac06      	add	r4, sp, #24
 8002606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800260c:	466d      	mov	r5, sp
 800260e:	f106 0410 	add.w	r4, r6, #16
 8002612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261a:	e885 0003 	stmia.w	r5, {r0, r1}
 800261e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002622:	f002 f80d 	bl	8004640 <Display_scanning_screen_data>
 8002626:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800262a:	3301      	adds	r3, #1
 800262c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002632:	7b5b      	ldrb	r3, [r3, #13]
 8002634:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002638:	429a      	cmp	r2, r3
 800263a:	f4ff af5a 	bcc.w	80024f2 <Si468x_dab_full_scan+0x3a>
 800263e:	e000      	b.n	8002642 <Si468x_dab_full_scan+0x18a>
 8002640:	bf00      	nop
 8002642:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <Si468x_dab_full_scan+0x1a2>
 800264a:	2101      	movs	r1, #1
 800264c:	4829      	ldr	r0, [pc, #164]	; (80026f4 <Si468x_dab_full_scan+0x23c>)
 800264e:	f001 f99f 	bl	8003990 <send_debug_msg>
 8002652:	f000 fe37 	bl	80032c4 <restore_from_eeprom>
 8002656:	2300      	movs	r3, #0
 8002658:	e1e9      	b.n	8002a2e <Si468x_dab_full_scan+0x576>
 800265a:	f003 f84d 	bl	80056f8 <eeprom_clear_scanning_data>
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d013      	beq.n	800268e <Si468x_dab_full_scan+0x1d6>
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002668:	7819      	ldrb	r1, [r3, #0]
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <Si468x_dab_full_scan+0x240>)
 8002670:	4822      	ldr	r0, [pc, #136]	; (80026fc <Si468x_dab_full_scan+0x244>)
 8002672:	f003 f89d 	bl	80057b0 <eeprom_save_scanning_data>
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002678:	2200      	movs	r2, #0
 800267a:	70da      	strb	r2, [r3, #3]
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 800267e:	2200      	movs	r2, #0
 8002680:	711a      	strb	r2, [r3, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	491e      	ldr	r1, [pc, #120]	; (8002700 <Si468x_dab_full_scan+0x248>)
 8002686:	f240 1007 	movw	r0, #263	; 0x107
 800268a:	f003 f80d 	bl	80056a8 <eeprom_write>
 800268e:	2100      	movs	r1, #0
 8002690:	481c      	ldr	r0, [pc, #112]	; (8002704 <Si468x_dab_full_scan+0x24c>)
 8002692:	f001 f97d 	bl	8003990 <send_debug_msg>
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	220a      	movs	r2, #10
 800269c:	491a      	ldr	r1, [pc, #104]	; (8002708 <Si468x_dab_full_scan+0x250>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f00a fe56 	bl	800d350 <itoa>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f971 	bl	8003990 <send_debug_msg>
 80026ae:	2101      	movs	r1, #1
 80026b0:	4816      	ldr	r0, [pc, #88]	; (800270c <Si468x_dab_full_scan+0x254>)
 80026b2:	f001 f96d 	bl	8003990 <send_debug_msg>
 80026b6:	2100      	movs	r1, #0
 80026b8:	4815      	ldr	r0, [pc, #84]	; (8002710 <Si468x_dab_full_scan+0x258>)
 80026ba:	f001 f969 	bl	8003990 <send_debug_msg>
 80026be:	2100      	movs	r1, #0
 80026c0:	4814      	ldr	r0, [pc, #80]	; (8002714 <Si468x_dab_full_scan+0x25c>)
 80026c2:	f001 f965 	bl	8003990 <send_debug_msg>
 80026c6:	2100      	movs	r1, #0
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <Si468x_dab_full_scan+0x260>)
 80026ca:	f001 f961 	bl	8003990 <send_debug_msg>
 80026ce:	2101      	movs	r1, #1
 80026d0:	4812      	ldr	r0, [pc, #72]	; (800271c <Si468x_dab_full_scan+0x264>)
 80026d2:	f001 f95d 	bl	8003990 <send_debug_msg>
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80026dc:	e07d      	b.n	80027da <Si468x_dab_full_scan+0x322>
 80026de:	bf00      	nop
 80026e0:	0800dc0c 	.word	0x0800dc0c
 80026e4:	20004bc4 	.word	0x20004bc4
 80026e8:	0800dbf8 	.word	0x0800dbf8
 80026ec:	200035d4 	.word	0x200035d4
 80026f0:	20003600 	.word	0x20003600
 80026f4:	0800dc48 	.word	0x0800dc48
 80026f8:	20003634 	.word	0x20003634
 80026fc:	20003774 	.word	0x20003774
 8002700:	20004bc8 	.word	0x20004bc8
 8002704:	0800dc5c 	.word	0x0800dc5c
 8002708:	200034d0 	.word	0x200034d0
 800270c:	0800dc70 	.word	0x0800dc70
 8002710:	0800dca4 	.word	0x0800dca4
 8002714:	0800dcb0 	.word	0x0800dcb0
 8002718:	0800dcc4 	.word	0x0800dcc4
 800271c:	0800dcd4 	.word	0x0800dcd4
 8002720:	2100      	movs	r1, #0
 8002722:	48c5      	ldr	r0, [pc, #788]	; (8002a38 <Si468x_dab_full_scan+0x580>)
 8002724:	f001 f934 	bl	8003990 <send_debug_msg>
 8002728:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800272c:	3301      	adds	r3, #1
 800272e:	220a      	movs	r2, #10
 8002730:	49c2      	ldr	r1, [pc, #776]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fe0c 	bl	800d350 <itoa>
 8002738:	4603      	mov	r3, r0
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f001 f927 	bl	8003990 <send_debug_msg>
 8002742:	2100      	movs	r1, #0
 8002744:	48be      	ldr	r0, [pc, #760]	; (8002a40 <Si468x_dab_full_scan+0x588>)
 8002746:	f001 f923 	bl	8003990 <send_debug_msg>
 800274a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	4abc      	ldr	r2, [pc, #752]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 8002752:	4413      	add	r3, r2
 8002754:	3302      	adds	r3, #2
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f001 f919 	bl	8003990 <send_debug_msg>
 800275e:	2100      	movs	r1, #0
 8002760:	48b5      	ldr	r0, [pc, #724]	; (8002a38 <Si468x_dab_full_scan+0x580>)
 8002762:	f001 f915 	bl	8003990 <send_debug_msg>
 8002766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800276a:	4ab6      	ldr	r2, [pc, #728]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	4413      	add	r3, r2
 8002770:	3318      	adds	r3, #24
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	220a      	movs	r2, #10
 8002776:	49b1      	ldr	r1, [pc, #708]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 8002778:	4618      	mov	r0, r3
 800277a:	f00a fde9 	bl	800d350 <itoa>
 800277e:	4603      	mov	r3, r0
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f001 f904 	bl	8003990 <send_debug_msg>
 8002788:	2100      	movs	r1, #0
 800278a:	48af      	ldr	r0, [pc, #700]	; (8002a48 <Si468x_dab_full_scan+0x590>)
 800278c:	f001 f900 	bl	8003990 <send_debug_msg>
 8002790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002794:	4aab      	ldr	r2, [pc, #684]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	4413      	add	r3, r2
 800279a:	331c      	adds	r3, #28
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4baa      	ldr	r3, [pc, #680]	; (8002a4c <Si468x_dab_full_scan+0x594>)
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f8f1 	bl	8003990 <send_debug_msg>
 80027ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027b2:	4aa4      	ldr	r2, [pc, #656]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	4413      	add	r3, r2
 80027b8:	331c      	adds	r3, #28
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b13      	cmp	r3, #19
 80027be:	d803      	bhi.n	80027c8 <Si468x_dab_full_scan+0x310>
 80027c0:	2100      	movs	r1, #0
 80027c2:	48a3      	ldr	r0, [pc, #652]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 80027c4:	f001 f8e4 	bl	8003990 <send_debug_msg>
 80027c8:	2101      	movs	r1, #1
 80027ca:	48a2      	ldr	r0, [pc, #648]	; (8002a54 <Si468x_dab_full_scan+0x59c>)
 80027cc:	f001 f8e0 	bl	8003990 <send_debug_msg>
 80027d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027d4:	3301      	adds	r3, #1
 80027d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80027da:	4b9f      	ldr	r3, [pc, #636]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d39c      	bcc.n	8002720 <Si468x_dab_full_scan+0x268>
 80027e6:	2101      	movs	r1, #1
 80027e8:	489c      	ldr	r0, [pc, #624]	; (8002a5c <Si468x_dab_full_scan+0x5a4>)
 80027ea:	f001 f8d1 	bl	8003990 <send_debug_msg>
 80027ee:	2100      	movs	r1, #0
 80027f0:	489b      	ldr	r0, [pc, #620]	; (8002a60 <Si468x_dab_full_scan+0x5a8>)
 80027f2:	f001 f8cd 	bl	8003990 <send_debug_msg>
 80027f6:	4b98      	ldr	r3, [pc, #608]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	220a      	movs	r2, #10
 80027fc:	498f      	ldr	r1, [pc, #572]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f00a fda6 	bl	800d350 <itoa>
 8002804:	4603      	mov	r3, r0
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f8c1 	bl	8003990 <send_debug_msg>
 800280e:	2101      	movs	r1, #1
 8002810:	4894      	ldr	r0, [pc, #592]	; (8002a64 <Si468x_dab_full_scan+0x5ac>)
 8002812:	f001 f8bd 	bl	8003990 <send_debug_msg>
 8002816:	2101      	movs	r1, #1
 8002818:	4893      	ldr	r0, [pc, #588]	; (8002a68 <Si468x_dab_full_scan+0x5b0>)
 800281a:	f001 f8b9 	bl	8003990 <send_debug_msg>
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002824:	e0f7      	b.n	8002a16 <Si468x_dab_full_scan+0x55e>
 8002826:	2100      	movs	r1, #0
 8002828:	4883      	ldr	r0, [pc, #524]	; (8002a38 <Si468x_dab_full_scan+0x580>)
 800282a:	f001 f8b1 	bl	8003990 <send_debug_msg>
 800282e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002832:	3301      	adds	r3, #1
 8002834:	220a      	movs	r2, #10
 8002836:	4981      	ldr	r1, [pc, #516]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fd89 	bl	800d350 <itoa>
 800283e:	4603      	mov	r3, r0
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f8a4 	bl	8003990 <send_debug_msg>
 8002848:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800284c:	2b08      	cmp	r3, #8
 800284e:	d803      	bhi.n	8002858 <Si468x_dab_full_scan+0x3a0>
 8002850:	2100      	movs	r1, #0
 8002852:	487f      	ldr	r0, [pc, #508]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 8002854:	f001 f89c 	bl	8003990 <send_debug_msg>
 8002858:	2100      	movs	r1, #0
 800285a:	4884      	ldr	r0, [pc, #528]	; (8002a6c <Si468x_dab_full_scan+0x5b4>)
 800285c:	f001 f898 	bl	8003990 <send_debug_msg>
 8002860:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002864:	2234      	movs	r2, #52	; 0x34
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	4a81      	ldr	r2, [pc, #516]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 800286c:	4413      	add	r3, r2
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f001 f88d 	bl	8003990 <send_debug_msg>
 8002876:	2100      	movs	r1, #0
 8002878:	487e      	ldr	r0, [pc, #504]	; (8002a74 <Si468x_dab_full_scan+0x5bc>)
 800287a:	f001 f889 	bl	8003990 <send_debug_msg>
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002884:	e021      	b.n	80028ca <Si468x_dab_full_scan+0x412>
 8002886:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800288a:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	4413      	add	r3, r2
 8002890:	331c      	adds	r3, #28
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002898:	4975      	ldr	r1, [pc, #468]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 800289a:	2034      	movs	r0, #52	; 0x34
 800289c:	fb00 f303 	mul.w	r3, r0, r3
 80028a0:	440b      	add	r3, r1
 80028a2:	3328      	adds	r3, #40	; 0x28
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10a      	bne.n	80028c0 <Si468x_dab_full_scan+0x408>
 80028aa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80028ae:	015b      	lsls	r3, r3, #5
 80028b0:	4a64      	ldr	r2, [pc, #400]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 80028b2:	4413      	add	r3, r2
 80028b4:	3302      	adds	r3, #2
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 f869 	bl	8003990 <send_debug_msg>
 80028be:	e00a      	b.n	80028d6 <Si468x_dab_full_scan+0x41e>
 80028c0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80028c4:	3301      	adds	r3, #1
 80028c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3d7      	bcc.n	8002886 <Si468x_dab_full_scan+0x3ce>
 80028d6:	2100      	movs	r1, #0
 80028d8:	4866      	ldr	r0, [pc, #408]	; (8002a74 <Si468x_dab_full_scan+0x5bc>)
 80028da:	f001 f859 	bl	8003990 <send_debug_msg>
 80028de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028e2:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 80028e4:	2134      	movs	r1, #52	; 0x34
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3324      	adds	r3, #36	; 0x24
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	220a      	movs	r2, #10
 80028f2:	4952      	ldr	r1, [pc, #328]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00a fd2b 	bl	800d350 <itoa>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f846 	bl	8003990 <send_debug_msg>
 8002904:	2100      	movs	r1, #0
 8002906:	4850      	ldr	r0, [pc, #320]	; (8002a48 <Si468x_dab_full_scan+0x590>)
 8002908:	f001 f842 	bl	8003990 <send_debug_msg>
 800290c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 8002912:	2134      	movs	r1, #52	; 0x34
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3328      	adds	r3, #40	; 0x28
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <Si468x_dab_full_scan+0x594>)
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f831 	bl	8003990 <send_debug_msg>
 800292e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002932:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 8002934:	2134      	movs	r1, #52	; 0x34
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3328      	adds	r3, #40	; 0x28
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b13      	cmp	r3, #19
 8002942:	d803      	bhi.n	800294c <Si468x_dab_full_scan+0x494>
 8002944:	2100      	movs	r1, #0
 8002946:	4842      	ldr	r0, [pc, #264]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 8002948:	f001 f822 	bl	8003990 <send_debug_msg>
 800294c:	2100      	movs	r1, #0
 800294e:	4847      	ldr	r0, [pc, #284]	; (8002a6c <Si468x_dab_full_scan+0x5b4>)
 8002950:	f001 f81e 	bl	8003990 <send_debug_msg>
 8002954:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002958:	4a45      	ldr	r2, [pc, #276]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 800295a:	2134      	movs	r1, #52	; 0x34
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3315      	adds	r3, #21
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	220a      	movs	r2, #10
 8002968:	4934      	ldr	r1, [pc, #208]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 800296a:	4618      	mov	r0, r3
 800296c:	f00a fcf0 	bl	800d350 <itoa>
 8002970:	4603      	mov	r3, r0
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f001 f80b 	bl	8003990 <send_debug_msg>
 800297a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 8002980:	2134      	movs	r1, #52	; 0x34
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3315      	adds	r3, #21
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d803      	bhi.n	8002998 <Si468x_dab_full_scan+0x4e0>
 8002990:	2100      	movs	r1, #0
 8002992:	482f      	ldr	r0, [pc, #188]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 8002994:	f000 fffc 	bl	8003990 <send_debug_msg>
 8002998:	2100      	movs	r1, #0
 800299a:	4837      	ldr	r0, [pc, #220]	; (8002a78 <Si468x_dab_full_scan+0x5c0>)
 800299c:	f000 fff8 	bl	8003990 <send_debug_msg>
 80029a0:	2100      	movs	r1, #0
 80029a2:	4836      	ldr	r0, [pc, #216]	; (8002a7c <Si468x_dab_full_scan+0x5c4>)
 80029a4:	f000 fff4 	bl	8003990 <send_debug_msg>
 80029a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 80029ae:	2134      	movs	r1, #52	; 0x34
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3320      	adds	r3, #32
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2210      	movs	r2, #16
 80029bc:	491f      	ldr	r1, [pc, #124]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f00a fcc6 	bl	800d350 <itoa>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 ffe1 	bl	8003990 <send_debug_msg>
 80029ce:	2100      	movs	r1, #0
 80029d0:	4826      	ldr	r0, [pc, #152]	; (8002a6c <Si468x_dab_full_scan+0x5b4>)
 80029d2:	f000 ffdd 	bl	8003990 <send_debug_msg>
 80029d6:	2100      	movs	r1, #0
 80029d8:	4828      	ldr	r0, [pc, #160]	; (8002a7c <Si468x_dab_full_scan+0x5c4>)
 80029da:	f000 ffd9 	bl	8003990 <send_debug_msg>
 80029de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 80029e4:	2134      	movs	r1, #52	; 0x34
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	332a      	adds	r3, #42	; 0x2a
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	4912      	ldr	r1, [pc, #72]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00a fcab 	bl	800d350 <itoa>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ffc6 	bl	8003990 <send_debug_msg>
 8002a04:	2101      	movs	r1, #1
 8002a06:	481e      	ldr	r0, [pc, #120]	; (8002a80 <Si468x_dab_full_scan+0x5c8>)
 8002a08:	f000 ffc2 	bl	8003990 <send_debug_msg>
 8002a0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a10:	3301      	adds	r3, #1
 8002a12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	f4ff af01 	bcc.w	8002826 <Si468x_dab_full_scan+0x36e>
 8002a24:	2101      	movs	r1, #1
 8002a26:	480f      	ldr	r0, [pc, #60]	; (8002a64 <Si468x_dab_full_scan+0x5ac>)
 8002a28:	f000 ffb2 	bl	8003990 <send_debug_msg>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	373c      	adds	r7, #60	; 0x3c
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	0800dce4 	.word	0x0800dce4
 8002a3c:	200034d0 	.word	0x200034d0
 8002a40:	0800dce8 	.word	0x0800dce8
 8002a44:	20003634 	.word	0x20003634
 8002a48:	0800dcf4 	.word	0x0800dcf4
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	0800dcfc 	.word	0x0800dcfc
 8002a54:	0800dd00 	.word	0x0800dd00
 8002a58:	20004bc4 	.word	0x20004bc4
 8002a5c:	0800dc70 	.word	0x0800dc70
 8002a60:	0800dd08 	.word	0x0800dd08
 8002a64:	0800dd1c 	.word	0x0800dd1c
 8002a68:	0800dd88 	.word	0x0800dd88
 8002a6c:	0800ddf4 	.word	0x0800ddf4
 8002a70:	20003774 	.word	0x20003774
 8002a74:	0800ddfc 	.word	0x0800ddfc
 8002a78:	0800de00 	.word	0x0800de00
 8002a7c:	0800de08 	.word	0x0800de08
 8002a80:	0800de0c 	.word	0x0800de0c

08002a84 <Si468x_dab_get_audio_info>:
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	484d      	ldr	r0, [pc, #308]	; (8002bc4 <Si468x_dab_get_audio_info+0x140>)
 8002a90:	f000 ff7e 	bl	8003990 <send_debug_msg>
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <Si468x_dab_get_audio_info+0x144>)
 8002a96:	22bd      	movs	r2, #189	; 0xbd
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <Si468x_dab_get_audio_info+0x144>)
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	705a      	strb	r2, [r3, #1]
 8002aa0:	4949      	ldr	r1, [pc, #292]	; (8002bc8 <Si468x_dab_get_audio_info+0x144>)
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f7fe fde8 	bl	8001678 <Si468x_write_command>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <Si468x_dab_get_audio_info+0x148>)
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f004 fc57 	bl	8007364 <HAL_Delay>
 8002ab6:	4946      	ldr	r1, [pc, #280]	; (8002bd0 <Si468x_dab_get_audio_info+0x14c>)
 8002ab8:	2014      	movs	r0, #20
 8002aba:	f7fe fdff 	bl	80016bc <Si468x_read_reply>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <Si468x_dab_get_audio_info+0x148>)
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	4a43      	ldr	r2, [pc, #268]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002ac8:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <Si468x_dab_get_audio_info+0x14c>)
 8002aca:	4614      	mov	r4, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4840      	ldr	r0, [pc, #256]	; (8002bd8 <Si468x_dab_get_audio_info+0x154>)
 8002ad8:	f000 ff5a 	bl	8003990 <send_debug_msg>
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	220a      	movs	r2, #10
 8002ae2:	493e      	ldr	r1, [pc, #248]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00a fc33 	bl	800d350 <itoa>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 ff4e 	bl	8003990 <send_debug_msg>
 8002af4:	2100      	movs	r1, #0
 8002af6:	483a      	ldr	r0, [pc, #232]	; (8002be0 <Si468x_dab_get_audio_info+0x15c>)
 8002af8:	f000 ff4a 	bl	8003990 <send_debug_msg>
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002afe:	885b      	ldrh	r3, [r3, #2]
 8002b00:	220a      	movs	r2, #10
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00a fc23 	bl	800d350 <itoa>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 ff3e 	bl	8003990 <send_debug_msg>
 8002b14:	2100      	movs	r1, #0
 8002b16:	4833      	ldr	r0, [pc, #204]	; (8002be4 <Si468x_dab_get_audio_info+0x160>)
 8002b18:	f000 ff3a 	bl	8003990 <send_debug_msg>
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b1e:	791b      	ldrb	r3, [r3, #4]
 8002b20:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	220a      	movs	r2, #10
 8002b28:	492c      	ldr	r1, [pc, #176]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f00a fc10 	bl	800d350 <itoa>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 ff2b 	bl	8003990 <send_debug_msg>
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	482a      	ldr	r0, [pc, #168]	; (8002be8 <Si468x_dab_get_audio_info+0x164>)
 8002b3e:	f000 ff27 	bl	8003990 <send_debug_msg>
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	220a      	movs	r2, #10
 8002b4e:	4923      	ldr	r1, [pc, #140]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00a fbfd 	bl	800d350 <itoa>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ff18 	bl	8003990 <send_debug_msg>
 8002b60:	2100      	movs	r1, #0
 8002b62:	4822      	ldr	r0, [pc, #136]	; (8002bec <Si468x_dab_get_audio_info+0x168>)
 8002b64:	f000 ff14 	bl	8003990 <send_debug_msg>
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	220a      	movs	r2, #10
 8002b74:	4919      	ldr	r1, [pc, #100]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00a fbea 	bl	800d350 <itoa>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 ff05 	bl	8003990 <send_debug_msg>
 8002b86:	2100      	movs	r1, #0
 8002b88:	4819      	ldr	r0, [pc, #100]	; (8002bf0 <Si468x_dab_get_audio_info+0x16c>)
 8002b8a:	f000 ff01 	bl	8003990 <send_debug_msg>
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	220a      	movs	r2, #10
 8002b9a:	4910      	ldr	r1, [pc, #64]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00a fbd7 	bl	800d350 <itoa>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fef2 	bl	8003990 <send_debug_msg>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002bb0:	461c      	mov	r4, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	0800de18 	.word	0x0800de18
 8002bc8:	200001a8 	.word	0x200001a8
 8002bcc:	20003510 	.word	0x20003510
 8002bd0:	200011a8 	.word	0x200011a8
 8002bd4:	20003610 	.word	0x20003610
 8002bd8:	0800de54 	.word	0x0800de54
 8002bdc:	200034d0 	.word	0x200034d0
 8002be0:	0800de60 	.word	0x0800de60
 8002be4:	0800de70 	.word	0x0800de70
 8002be8:	0800de84 	.word	0x0800de84
 8002bec:	0800de90 	.word	0x0800de90
 8002bf0:	0800de9c 	.word	0x0800de9c

08002bf4 <Si468x_dab_get_event_status>:
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4811      	ldr	r0, [pc, #68]	; (8002c40 <Si468x_dab_get_event_status+0x4c>)
 8002bfc:	f000 fec8 	bl	8003990 <send_debug_msg>
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <Si468x_dab_get_event_status+0x50>)
 8002c02:	22b3      	movs	r2, #179	; 0xb3
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <Si468x_dab_get_event_status+0x50>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	705a      	strb	r2, [r3, #1]
 8002c0c:	490d      	ldr	r1, [pc, #52]	; (8002c44 <Si468x_dab_get_event_status+0x50>)
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7fe fd32 	bl	8001678 <Si468x_write_command>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <Si468x_dab_get_event_status+0x54>)
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f004 fba1 	bl	8007364 <HAL_Delay>
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <Si468x_dab_get_event_status+0x58>)
 8002c24:	2009      	movs	r0, #9
 8002c26:	f7fe fd49 	bl	80016bc <Si468x_read_reply>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <Si468x_dab_get_event_status+0x54>)
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <Si468x_dab_get_event_status+0x58>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <Si468x_dab_get_event_status+0x5c>)
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800deac 	.word	0x0800deac
 8002c44:	200001a8 	.word	0x200001a8
 8002c48:	20003510 	.word	0x20003510
 8002c4c:	200011a8 	.word	0x200011a8
 8002c50:	20003600 	.word	0x20003600

08002c54 <Si468x_dab_get_component_info>:
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
 8002c60:	2101      	movs	r1, #1
 8002c62:	484a      	ldr	r0, [pc, #296]	; (8002d8c <Si468x_dab_get_component_info+0x138>)
 8002c64:	f000 fe94 	bl	8003990 <send_debug_msg>
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c6a:	22bb      	movs	r2, #187	; 0xbb
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	709a      	strb	r2, [r3, #2]
 8002c7a:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	70da      	strb	r2, [r3, #3]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c86:	711a      	strb	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c90:	715a      	strb	r2, [r3, #5]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c9a:	719a      	strb	r2, [r3, #6]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0e1b      	lsrs	r3, r3, #24
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002ca4:	71da      	strb	r2, [r3, #7]
 8002ca6:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	7213      	strb	r3, [r2, #8]
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	121b      	asrs	r3, r3, #8
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002cb4:	725a      	strb	r2, [r3, #9]
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	141b      	asrs	r3, r3, #16
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002cbe:	729a      	strb	r2, [r3, #10]
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	161b      	asrs	r3, r3, #24
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002cc8:	72da      	strb	r2, [r3, #11]
 8002cca:	4931      	ldr	r1, [pc, #196]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002ccc:	200c      	movs	r0, #12
 8002cce:	f7fe fcd3 	bl	8001678 <Si468x_write_command>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <Si468x_dab_get_component_info+0x140>)
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	2005      	movs	r0, #5
 8002cdc:	f004 fb42 	bl	8007364 <HAL_Delay>
 8002ce0:	492d      	ldr	r1, [pc, #180]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002ce2:	201a      	movs	r0, #26
 8002ce4:	f7fe fcea 	bl	80016bc <Si468x_read_reply>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <Si468x_dab_get_component_info+0x140>)
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002cf2:	799b      	ldrb	r3, [r3, #6]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf8:	77bb      	strb	r3, [r7, #30]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e00c      	b.n	8002d1a <Si468x_dab_get_component_info+0xc6>
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
 8002d02:	f103 0208 	add.w	r2, r3, #8
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	4923      	ldr	r1, [pc, #140]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002d0a:	5c8a      	ldrb	r2, [r1, r2]
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	443b      	add	r3, r7
 8002d10:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
 8002d16:	3301      	adds	r3, #1
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d9ef      	bls.n	8002d00 <Si468x_dab_get_component_info+0xac>
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002d28:	7e5b      	ldrb	r3, [r3, #25]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	83bb      	strh	r3, [r7, #28]
 8002d34:	2100      	movs	r1, #0
 8002d36:	4819      	ldr	r0, [pc, #100]	; (8002d9c <Si468x_dab_get_component_info+0x148>)
 8002d38:	f000 fe2a 	bl	8003990 <send_debug_msg>
 8002d3c:	7fbb      	ldrb	r3, [r7, #30]
 8002d3e:	220a      	movs	r2, #10
 8002d40:	4917      	ldr	r1, [pc, #92]	; (8002da0 <Si468x_dab_get_component_info+0x14c>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f00a fb04 	bl	800d350 <itoa>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fe1f 	bl	8003990 <send_debug_msg>
 8002d52:	2100      	movs	r1, #0
 8002d54:	4813      	ldr	r0, [pc, #76]	; (8002da4 <Si468x_dab_get_component_info+0x150>)
 8002d56:	f000 fe1b 	bl	8003990 <send_debug_msg>
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fe15 	bl	8003990 <send_debug_msg>
 8002d66:	2100      	movs	r1, #0
 8002d68:	480f      	ldr	r0, [pc, #60]	; (8002da8 <Si468x_dab_get_component_info+0x154>)
 8002d6a:	f000 fe11 	bl	8003990 <send_debug_msg>
 8002d6e:	8bbb      	ldrh	r3, [r7, #28]
 8002d70:	2202      	movs	r2, #2
 8002d72:	490b      	ldr	r1, [pc, #44]	; (8002da0 <Si468x_dab_get_component_info+0x14c>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00a faeb 	bl	800d350 <itoa>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fe06 	bl	8003990 <send_debug_msg>
 8002d84:	bf00      	nop
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	0800deec 	.word	0x0800deec
 8002d90:	200001a8 	.word	0x200001a8
 8002d94:	20003510 	.word	0x20003510
 8002d98:	200011a8 	.word	0x200011a8
 8002d9c:	0800df20 	.word	0x0800df20
 8002da0:	200034d0 	.word	0x200034d0
 8002da4:	0800df2c 	.word	0x0800df2c
 8002da8:	0800df40 	.word	0x0800df40

08002dac <Si468x_dab_get_digital_service_data>:
 8002dac:	b5b0      	push	{r4, r5, r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	49ab      	ldr	r1, [pc, #684]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002db4:	2005      	movs	r0, #5
 8002db6:	f7fe fc81 	bl	80016bc <Si468x_read_reply>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4ba9      	ldr	r3, [pc, #676]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	4ba9      	ldr	r3, [pc, #676]	; (8003068 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8142 	beq.w	8003056 <Si468x_dab_get_digital_service_data+0x2aa>
 8002dd2:	4ba6      	ldr	r3, [pc, #664]	; (800306c <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dd4:	2284      	movs	r2, #132	; 0x84
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	4ba4      	ldr	r3, [pc, #656]	; (800306c <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]
 8002dde:	49a3      	ldr	r1, [pc, #652]	; (800306c <Si468x_dab_get_digital_service_data+0x2c0>)
 8002de0:	2002      	movs	r0, #2
 8002de2:	f7fe fc49 	bl	8001678 <Si468x_write_command>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b9e      	ldr	r3, [pc, #632]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	2005      	movs	r0, #5
 8002df0:	f004 fab8 	bl	8007364 <HAL_Delay>
 8002df4:	499a      	ldr	r1, [pc, #616]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002df6:	201e      	movs	r0, #30
 8002df8:	f7fe fc60 	bl	80016bc <Si468x_read_reply>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b98      	ldr	r3, [pc, #608]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	4a9a      	ldr	r2, [pc, #616]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e06:	4b96      	ldr	r3, [pc, #600]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e08:	4615      	mov	r5, r2
 8002e0a:	1d1c      	adds	r4, r3, #4
 8002e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	4897      	ldr	r0, [pc, #604]	; (8003074 <Si468x_dab_get_digital_service_data+0x2c8>)
 8002e18:	f000 fdba 	bl	8003990 <send_debug_msg>
 8002e1c:	4b94      	ldr	r3, [pc, #592]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8115 	bne.w	8003056 <Si468x_dab_get_digital_service_data+0x2aa>
 8002e2c:	4b90      	ldr	r3, [pc, #576]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e2e:	89db      	ldrh	r3, [r3, #14]
 8002e30:	3318      	adds	r3, #24
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	498a      	ldr	r1, [pc, #552]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fc40 	bl	80016bc <Si468x_read_reply>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b88      	ldr	r3, [pc, #544]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	4b8a      	ldr	r3, [pc, #552]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b3c      	cmp	r3, #60	; 0x3c
 8002e50:	f040 80a7 	bne.w	8002fa2 <Si468x_dab_get_digital_service_data+0x1f6>
 8002e54:	2101      	movs	r1, #1
 8002e56:	4888      	ldr	r0, [pc, #544]	; (8003078 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002e58:	f000 fd9a 	bl	8003990 <send_debug_msg>
 8002e5c:	4b80      	ldr	r3, [pc, #512]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e5e:	7e1b      	ldrb	r3, [r3, #24]
 8002e60:	051a      	lsls	r2, r3, #20
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	441a      	add	r2, r3
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e6c:	7e9b      	ldrb	r3, [r3, #26]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e76:	7edb      	ldrb	r3, [r3, #27]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <Si468x_dab_get_digital_service_data+0xd6>
 8002e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e80:	e000      	b.n	8002e84 <Si468x_dab_get_digital_service_data+0xd8>
 8002e82:	2200      	movs	r2, #0
 8002e84:	4b76      	ldr	r3, [pc, #472]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e86:	7f1b      	ldrb	r3, [r3, #28]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
 8002e92:	2300      	movs	r3, #0
 8002e94:	717b      	strb	r3, [r7, #5]
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e98:	7f5b      	ldrb	r3, [r3, #29]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <Si468x_dab_get_digital_service_data+0xf8>
 8002e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea2:	e000      	b.n	8002ea6 <Si468x_dab_get_digital_service_data+0xfa>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002ea8:	7f9b      	ldrb	r3, [r3, #30]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	82fb      	strh	r3, [r7, #22]
 8002eb4:	e006      	b.n	8002ec4 <Si468x_dab_get_digital_service_data+0x118>
 8002eb6:	8afb      	ldrh	r3, [r7, #22]
 8002eb8:	4a70      	ldr	r2, [pc, #448]	; (800307c <Si468x_dab_get_digital_service_data+0x2d0>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	54d1      	strb	r1, [r2, r3]
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	82fb      	strh	r3, [r7, #22]
 8002ec4:	8afb      	ldrh	r3, [r7, #22]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d3f4      	bcc.n	8002eb6 <Si468x_dab_get_digital_service_data+0x10a>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	82bb      	strh	r3, [r7, #20]
 8002ed0:	e00a      	b.n	8002ee8 <Si468x_dab_get_digital_service_data+0x13c>
 8002ed2:	8abb      	ldrh	r3, [r7, #20]
 8002ed4:	f103 0218 	add.w	r2, r3, #24
 8002ed8:	8abb      	ldrh	r3, [r7, #20]
 8002eda:	4961      	ldr	r1, [pc, #388]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002edc:	5c89      	ldrb	r1, [r1, r2]
 8002ede:	4a67      	ldr	r2, [pc, #412]	; (800307c <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ee0:	54d1      	strb	r1, [r2, r3]
 8002ee2:	8abb      	ldrh	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	82bb      	strh	r3, [r7, #20]
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002eea:	89db      	ldrh	r3, [r3, #14]
 8002eec:	8aba      	ldrh	r2, [r7, #20]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3ef      	bcc.n	8002ed2 <Si468x_dab_get_digital_service_data+0x126>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	827b      	strh	r3, [r7, #18]
 8002ef6:	e00f      	b.n	8002f18 <Si468x_dab_get_digital_service_data+0x16c>
 8002ef8:	8a7b      	ldrh	r3, [r7, #18]
 8002efa:	4a60      	ldr	r2, [pc, #384]	; (800307c <Si468x_dab_get_digital_service_data+0x2d0>)
 8002efc:	5cd3      	ldrb	r3, [r2, r3]
 8002efe:	220a      	movs	r2, #10
 8002f00:	495f      	ldr	r1, [pc, #380]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00a fa24 	bl	800d350 <itoa>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd3f 	bl	8003990 <send_debug_msg>
 8002f12:	8a7b      	ldrh	r3, [r7, #18]
 8002f14:	3301      	adds	r3, #1
 8002f16:	827b      	strh	r3, [r7, #18]
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002f1a:	89db      	ldrh	r3, [r3, #14]
 8002f1c:	8a7a      	ldrh	r2, [r7, #18]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3ea      	bcc.n	8002ef8 <Si468x_dab_get_digital_service_data+0x14c>
 8002f22:	2101      	movs	r1, #1
 8002f24:	4857      	ldr	r0, [pc, #348]	; (8003084 <Si468x_dab_get_digital_service_data+0x2d8>)
 8002f26:	f000 fd33 	bl	8003990 <send_debug_msg>
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4856      	ldr	r0, [pc, #344]	; (8003088 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002f2e:	f000 fd2f 	bl	8003990 <send_debug_msg>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	220a      	movs	r2, #10
 8002f36:	4952      	ldr	r1, [pc, #328]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00a fa09 	bl	800d350 <itoa>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fd24 	bl	8003990 <send_debug_msg>
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4850      	ldr	r0, [pc, #320]	; (800308c <Si468x_dab_get_digital_service_data+0x2e0>)
 8002f4c:	f000 fd20 	bl	8003990 <send_debug_msg>
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	220a      	movs	r2, #10
 8002f54:	494a      	ldr	r1, [pc, #296]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00a f9fa 	bl	800d350 <itoa>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fd15 	bl	8003990 <send_debug_msg>
 8002f66:	2100      	movs	r1, #0
 8002f68:	4849      	ldr	r0, [pc, #292]	; (8003090 <Si468x_dab_get_digital_service_data+0x2e4>)
 8002f6a:	f000 fd11 	bl	8003990 <send_debug_msg>
 8002f6e:	797b      	ldrb	r3, [r7, #5]
 8002f70:	220a      	movs	r2, #10
 8002f72:	4943      	ldr	r1, [pc, #268]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00a f9eb 	bl	800d350 <itoa>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fd06 	bl	8003990 <send_debug_msg>
 8002f84:	2100      	movs	r1, #0
 8002f86:	4843      	ldr	r0, [pc, #268]	; (8003094 <Si468x_dab_get_digital_service_data+0x2e8>)
 8002f88:	f000 fd02 	bl	8003990 <send_debug_msg>
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	220a      	movs	r2, #10
 8002f90:	493b      	ldr	r1, [pc, #236]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00a f9dc 	bl	800d350 <itoa>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fcf7 	bl	8003990 <send_debug_msg>
 8002fa2:	4b33      	ldr	r3, [pc, #204]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002fa4:	78db      	ldrb	r3, [r3, #3]
 8002fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d152      	bne.n	8003056 <Si468x_dab_get_digital_service_data+0x2aa>
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4839      	ldr	r0, [pc, #228]	; (8003098 <Si468x_dab_get_digital_service_data+0x2ec>)
 8002fb4:	f000 fcec 	bl	8003990 <send_debug_msg>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	747b      	strb	r3, [r7, #17]
 8002fbc:	e006      	b.n	8002fcc <Si468x_dab_get_digital_service_data+0x220>
 8002fbe:	7c7b      	ldrb	r3, [r7, #17]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	54d1      	strb	r1, [r2, r3]
 8002fc6:	7c7b      	ldrb	r3, [r7, #17]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	747b      	strb	r3, [r7, #17]
 8002fcc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	daf4      	bge.n	8002fbe <Si468x_dab_get_digital_service_data+0x212>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	743b      	strb	r3, [r7, #16]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e031      	b.n	8003042 <Si468x_dab_get_digital_service_data+0x296>
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	f103 021a 	add.w	r2, r3, #26
 8002fe4:	7c3b      	ldrb	r3, [r7, #16]
 8002fe6:	491e      	ldr	r1, [pc, #120]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002fe8:	5c89      	ldrb	r1, [r1, r2]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fec:	54d1      	strb	r1, [r2, r3]
 8002fee:	7c3b      	ldrb	r3, [r7, #16]
 8002ff0:	4a2a      	ldr	r2, [pc, #168]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	2bc3      	cmp	r3, #195	; 0xc3
 8002ff6:	d106      	bne.n	8003006 <Si468x_dab_get_digital_service_data+0x25a>
 8002ff8:	7c3b      	ldrb	r3, [r7, #16]
 8002ffa:	4a28      	ldr	r2, [pc, #160]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002ffc:	216f      	movs	r1, #111	; 0x6f
 8002ffe:	54d1      	strb	r1, [r2, r3]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	3301      	adds	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	7c3b      	ldrb	r3, [r7, #16]
 8003008:	4a24      	ldr	r2, [pc, #144]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	2bc4      	cmp	r3, #196	; 0xc4
 800300e:	d106      	bne.n	800301e <Si468x_dab_get_digital_service_data+0x272>
 8003010:	7c3b      	ldrb	r3, [r7, #16]
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8003014:	2163      	movs	r1, #99	; 0x63
 8003016:	54d1      	strb	r1, [r2, r3]
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	7c3b      	ldrb	r3, [r7, #16]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	2bc5      	cmp	r3, #197	; 0xc5
 8003026:	d106      	bne.n	8003036 <Si468x_dab_get_digital_service_data+0x28a>
 8003028:	7c3b      	ldrb	r3, [r7, #16]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 800302c:	216c      	movs	r1, #108	; 0x6c
 800302e:	54d1      	strb	r1, [r2, r3]
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	3301      	adds	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	7c3b      	ldrb	r3, [r7, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	743b      	strb	r3, [r7, #16]
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	3301      	adds	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8003048:	89db      	ldrh	r3, [r3, #14]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3c7      	bcc.n	8002fde <Si468x_dab_get_digital_service_data+0x232>
 800304e:	2101      	movs	r1, #1
 8003050:	4812      	ldr	r0, [pc, #72]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8003052:	f000 fc9d 	bl	8003990 <send_debug_msg>
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bdb0      	pop	{r4, r5, r7, pc}
 800305e:	bf00      	nop
 8003060:	200011a8 	.word	0x200011a8
 8003064:	20003510 	.word	0x20003510
 8003068:	200035fc 	.word	0x200035fc
 800306c:	200001a8 	.word	0x200001a8
 8003070:	20003620 	.word	0x20003620
 8003074:	0800df54 	.word	0x0800df54
 8003078:	0800df88 	.word	0x0800df88
 800307c:	20004c58 	.word	0x20004c58
 8003080:	200034d0 	.word	0x200034d0
 8003084:	0800df9c 	.word	0x0800df9c
 8003088:	0800dfa0 	.word	0x0800dfa0
 800308c:	0800dfac 	.word	0x0800dfac
 8003090:	0800dfbc 	.word	0x0800dfbc
 8003094:	0800dfcc 	.word	0x0800dfcc
 8003098:	0800dfe0 	.word	0x0800dfe0
 800309c:	20004bd4 	.word	0x20004bd4

080030a0 <Si468x_dab_get_time>:
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <Si468x_dab_get_time+0x78>)
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02f      	beq.n	8003112 <Si468x_dab_get_time+0x72>
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <Si468x_dab_get_time+0x78>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d028      	beq.n	8003112 <Si468x_dab_get_time+0x72>
 80030c0:	4b15      	ldr	r3, [pc, #84]	; (8003118 <Si468x_dab_get_time+0x78>)
 80030c2:	791b      	ldrb	r3, [r3, #4]
 80030c4:	2b5a      	cmp	r3, #90	; 0x5a
 80030c6:	d924      	bls.n	8003112 <Si468x_dab_get_time+0x72>
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <Si468x_dab_get_time+0x7c>)
 80030ca:	22bc      	movs	r2, #188	; 0xbc
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <Si468x_dab_get_time+0x7c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	705a      	strb	r2, [r3, #1]
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <Si468x_dab_get_time+0x7c>)
 80030d6:	2002      	movs	r0, #2
 80030d8:	f7fe face 	bl	8001678 <Si468x_write_command>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <Si468x_dab_get_time+0x80>)
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	2001      	movs	r0, #1
 80030e6:	f004 f93d 	bl	8007364 <HAL_Delay>
 80030ea:	490e      	ldr	r1, [pc, #56]	; (8003124 <Si468x_dab_get_time+0x84>)
 80030ec:	200b      	movs	r0, #11
 80030ee:	f7fe fae5 	bl	80016bc <Si468x_read_reply>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <Si468x_dab_get_time+0x80>)
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <Si468x_dab_get_time+0x88>)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <Si468x_dab_get_time+0x84>)
 80030fe:	3304      	adds	r3, #4
 8003100:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003104:	e882 0003 	stmia.w	r2, {r0, r1}
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <Si468x_dab_get_time+0x88>)
 800310a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800310e:	f002 f9f3 	bl	80054f8 <Display_time>
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200035d4 	.word	0x200035d4
 800311c:	200001a8 	.word	0x200001a8
 8003120:	20003510 	.word	0x20003510
 8003124:	200011a8 	.word	0x200011a8
 8003128:	20003608 	.word	0x20003608

0800312c <Si468x_set_audio_volume>:
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003140:	f7fe fbca 	bl	80018d8 <Si468x_set_property>
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <Si468x_set_audio_volume+0x5c>)
 8003148:	739a      	strb	r2, [r3, #14]
 800314a:	2100      	movs	r1, #0
 800314c:	480f      	ldr	r0, [pc, #60]	; (800318c <Si468x_set_audio_volume+0x60>)
 800314e:	f000 fc1f 	bl	8003990 <send_debug_msg>
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <Si468x_set_audio_volume+0x5c>)
 8003154:	7b9b      	ldrb	r3, [r3, #14]
 8003156:	220a      	movs	r2, #10
 8003158:	490d      	ldr	r1, [pc, #52]	; (8003190 <Si468x_set_audio_volume+0x64>)
 800315a:	4618      	mov	r0, r3
 800315c:	f00a f8f8 	bl	800d350 <itoa>
 8003160:	4603      	mov	r3, r0
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc13 	bl	8003990 <send_debug_msg>
 800316a:	2101      	movs	r1, #1
 800316c:	4809      	ldr	r0, [pc, #36]	; (8003194 <Si468x_set_audio_volume+0x68>)
 800316e:	f000 fc0f 	bl	8003990 <send_debug_msg>
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	2201      	movs	r2, #1
 8003176:	4619      	mov	r1, r3
 8003178:	200b      	movs	r0, #11
 800317a:	f002 fa95 	bl	80056a8 <eeprom_write>
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20004bc4 	.word	0x20004bc4
 800318c:	0800e034 	.word	0x0800e034
 8003190:	200034d0 	.word	0x200034d0
 8003194:	0800e040 	.word	0x0800e040

08003198 <play_station>:
 8003198:	b580      	push	{r7, lr}
 800319a:	b08c      	sub	sp, #48	; 0x30
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031a4:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <play_station+0x110>)
 80031a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031aa:	70d3      	strb	r3, [r2, #3]
 80031ac:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <play_station+0x110>)
 80031ae:	78da      	ldrb	r2, [r3, #3]
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <play_station+0x110>)
 80031b2:	711a      	strb	r2, [r3, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	493d      	ldr	r1, [pc, #244]	; (80032ac <play_station+0x114>)
 80031b8:	f240 1007 	movw	r0, #263	; 0x107
 80031bc:	f002 fa74 	bl	80056a8 <eeprom_write>
 80031c0:	2101      	movs	r1, #1
 80031c2:	483b      	ldr	r0, [pc, #236]	; (80032b0 <play_station+0x118>)
 80031c4:	f000 fbe4 	bl	8003990 <send_debug_msg>
 80031c8:	2100      	movs	r1, #0
 80031ca:	483a      	ldr	r0, [pc, #232]	; (80032b4 <play_station+0x11c>)
 80031cc:	f000 fbe0 	bl	8003990 <send_debug_msg>
 80031d0:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <play_station+0x110>)
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	3301      	adds	r3, #1
 80031d6:	220a      	movs	r2, #10
 80031d8:	4937      	ldr	r1, [pc, #220]	; (80032b8 <play_station+0x120>)
 80031da:	4618      	mov	r0, r3
 80031dc:	f00a f8b8 	bl	800d350 <itoa>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fbd3 	bl	8003990 <send_debug_msg>
 80031ea:	2100      	movs	r1, #0
 80031ec:	4833      	ldr	r0, [pc, #204]	; (80032bc <play_station+0x124>)
 80031ee:	f000 fbcf 	bl	8003990 <send_debug_msg>
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <play_station+0x110>)
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	461a      	mov	r2, r3
 80031f8:	2334      	movs	r3, #52	; 0x34
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <play_station+0x128>)
 8003200:	4413      	add	r3, r2
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fbc3 	bl	8003990 <send_debug_msg>
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <play_station+0x110>)
 800320c:	78db      	ldrb	r3, [r3, #3]
 800320e:	4619      	mov	r1, r3
 8003210:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <play_station+0x128>)
 8003212:	2334      	movs	r3, #52	; 0x34
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3328      	adds	r3, #40	; 0x28
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fc45 	bl	8001ab0 <Si468x_dab_tune_freq>
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <play_station+0x110>)
 8003228:	78db      	ldrb	r3, [r3, #3]
 800322a:	4619      	mov	r1, r3
 800322c:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <play_station+0x128>)
 800322e:	2334      	movs	r3, #52	; 0x34
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3320      	adds	r3, #32
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <play_station+0x110>)
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	4618      	mov	r0, r3
 8003240:	491f      	ldr	r1, [pc, #124]	; (80032c0 <play_station+0x128>)
 8003242:	2334      	movs	r3, #52	; 0x34
 8003244:	fb00 f303 	mul.w	r3, r0, r3
 8003248:	440b      	add	r3, r1
 800324a:	332a      	adds	r3, #42	; 0x2a
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff fcff 	bl	8002c54 <Si468x_dab_get_component_info>
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <play_station+0x110>)
 8003258:	78db      	ldrb	r3, [r3, #3]
 800325a:	4619      	mov	r1, r3
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <play_station+0x128>)
 800325e:	2334      	movs	r3, #52	; 0x34
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3320      	adds	r3, #32
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <play_station+0x110>)
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	4618      	mov	r0, r3
 8003270:	4913      	ldr	r1, [pc, #76]	; (80032c0 <play_station+0x128>)
 8003272:	2334      	movs	r3, #52	; 0x34
 8003274:	fb00 f303 	mul.w	r3, r0, r3
 8003278:	440b      	add	r3, r1
 800327a:	332a      	adds	r3, #42	; 0x2a
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7fe fff9 	bl	8002278 <Si468x_dab_start_digital_service>
 8003286:	463b      	mov	r3, r7
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fce9 	bl	8001c60 <Si468x_dab_digrad_status>
 800328e:	463b      	mov	r3, r7
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fbf7 	bl	8002a84 <Si468x_dab_get_audio_info>
 8003296:	2103      	movs	r1, #3
 8003298:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 800329c:	f7fe fb1c 	bl	80018d8 <Si468x_set_property>
 80032a0:	bf00      	nop
 80032a2:	3730      	adds	r7, #48	; 0x30
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20004bc4 	.word	0x20004bc4
 80032ac:	20004bc8 	.word	0x20004bc8
 80032b0:	0800e054 	.word	0x0800e054
 80032b4:	0800e078 	.word	0x0800e078
 80032b8:	200034d0 	.word	0x200034d0
 80032bc:	0800e08c 	.word	0x0800e08c
 80032c0:	20003774 	.word	0x20003774

080032c4 <restore_from_eeprom>:
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	2101      	movs	r1, #1
 80032cc:	4895      	ldr	r0, [pc, #596]	; (8003524 <restore_from_eeprom+0x260>)
 80032ce:	f000 fb5f 	bl	8003990 <send_debug_msg>
 80032d2:	2201      	movs	r2, #1
 80032d4:	4994      	ldr	r1, [pc, #592]	; (8003528 <restore_from_eeprom+0x264>)
 80032d6:	203f      	movs	r0, #63	; 0x3f
 80032d8:	f002 f9c8 	bl	800566c <eeprom_read>
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
 80032e0:	e012      	b.n	8003308 <restore_from_eeprom+0x44>
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	3301      	adds	r3, #1
 80032e6:	019b      	lsls	r3, r3, #6
 80032e8:	4618      	mov	r0, r3
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4a8e      	ldr	r2, [pc, #568]	; (800352c <restore_from_eeprom+0x268>)
 80032f2:	4413      	add	r3, r2
 80032f4:	2240      	movs	r2, #64	; 0x40
 80032f6:	4619      	mov	r1, r3
 80032f8:	f002 f9b8 	bl	800566c <eeprom_read>
 80032fc:	2005      	movs	r0, #5
 80032fe:	f004 f831 	bl	8007364 <HAL_Delay>
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	3301      	adds	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d9e9      	bls.n	80032e2 <restore_from_eeprom+0x1e>
 800330e:	2100      	movs	r1, #0
 8003310:	4887      	ldr	r0, [pc, #540]	; (8003530 <restore_from_eeprom+0x26c>)
 8003312:	f000 fb3d 	bl	8003990 <send_debug_msg>
 8003316:	4b87      	ldr	r3, [pc, #540]	; (8003534 <restore_from_eeprom+0x270>)
 8003318:	7b5b      	ldrb	r3, [r3, #13]
 800331a:	220a      	movs	r2, #10
 800331c:	4986      	ldr	r1, [pc, #536]	; (8003538 <restore_from_eeprom+0x274>)
 800331e:	4618      	mov	r0, r3
 8003320:	f00a f816 	bl	800d350 <itoa>
 8003324:	4603      	mov	r3, r0
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb31 	bl	8003990 <send_debug_msg>
 800332e:	2101      	movs	r1, #1
 8003330:	4882      	ldr	r0, [pc, #520]	; (800353c <restore_from_eeprom+0x278>)
 8003332:	f000 fb2d 	bl	8003990 <send_debug_msg>
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e022      	b.n	8003382 <restore_from_eeprom+0xbe>
 800333c:	220a      	movs	r2, #10
 800333e:	497e      	ldr	r1, [pc, #504]	; (8003538 <restore_from_eeprom+0x274>)
 8003340:	6938      	ldr	r0, [r7, #16]
 8003342:	f00a f805 	bl	800d350 <itoa>
 8003346:	4603      	mov	r3, r0
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb20 	bl	8003990 <send_debug_msg>
 8003350:	2100      	movs	r1, #0
 8003352:	487b      	ldr	r0, [pc, #492]	; (8003540 <restore_from_eeprom+0x27c>)
 8003354:	f000 fb1c 	bl	8003990 <send_debug_msg>
 8003358:	4a74      	ldr	r2, [pc, #464]	; (800352c <restore_from_eeprom+0x268>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	220a      	movs	r2, #10
 8003362:	4975      	ldr	r1, [pc, #468]	; (8003538 <restore_from_eeprom+0x274>)
 8003364:	4618      	mov	r0, r3
 8003366:	f009 fff3 	bl	800d350 <itoa>
 800336a:	4603      	mov	r3, r0
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fb0e 	bl	8003990 <send_debug_msg>
 8003374:	2101      	movs	r1, #1
 8003376:	4873      	ldr	r0, [pc, #460]	; (8003544 <restore_from_eeprom+0x280>)
 8003378:	f000 fb0a 	bl	8003990 <send_debug_msg>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3301      	adds	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <restore_from_eeprom+0x270>)
 8003384:	7b5b      	ldrb	r3, [r3, #13]
 8003386:	461a      	mov	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4293      	cmp	r3, r2
 800338c:	dbd6      	blt.n	800333c <restore_from_eeprom+0x78>
 800338e:	2201      	movs	r2, #1
 8003390:	496d      	ldr	r1, [pc, #436]	; (8003548 <restore_from_eeprom+0x284>)
 8003392:	f240 1005 	movw	r0, #261	; 0x105
 8003396:	f002 f969 	bl	800566c <eeprom_read>
 800339a:	2201      	movs	r2, #1
 800339c:	4965      	ldr	r1, [pc, #404]	; (8003534 <restore_from_eeprom+0x270>)
 800339e:	f44f 7083 	mov.w	r0, #262	; 0x106
 80033a2:	f002 f963 	bl	800566c <eeprom_read>
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <restore_from_eeprom+0x270>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	f000 828b 	beq.w	80038c6 <restore_from_eeprom+0x602>
 80033b0:	4b60      	ldr	r3, [pc, #384]	; (8003534 <restore_from_eeprom+0x270>)
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2bff      	cmp	r3, #255	; 0xff
 80033b6:	f000 8286 	beq.w	80038c6 <restore_from_eeprom+0x602>
 80033ba:	2204      	movs	r2, #4
 80033bc:	4963      	ldr	r1, [pc, #396]	; (800354c <restore_from_eeprom+0x288>)
 80033be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033c2:	f002 f953 	bl	800566c <eeprom_read>
 80033c6:	2201      	movs	r2, #1
 80033c8:	4961      	ldr	r1, [pc, #388]	; (8003550 <restore_from_eeprom+0x28c>)
 80033ca:	f44f 7082 	mov.w	r0, #260	; 0x104
 80033ce:	f002 f94d 	bl	800566c <eeprom_read>
 80033d2:	2201      	movs	r2, #1
 80033d4:	495f      	ldr	r1, [pc, #380]	; (8003554 <restore_from_eeprom+0x290>)
 80033d6:	f240 1007 	movw	r0, #263	; 0x107
 80033da:	f002 f947 	bl	800566c <eeprom_read>
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <restore_from_eeprom+0x270>)
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	2bff      	cmp	r3, #255	; 0xff
 80033e4:	d102      	bne.n	80033ec <restore_from_eeprom+0x128>
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <restore_from_eeprom+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	711a      	strb	r2, [r3, #4]
 80033ec:	4b51      	ldr	r3, [pc, #324]	; (8003534 <restore_from_eeprom+0x270>)
 80033ee:	791a      	ldrb	r2, [r3, #4]
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <restore_from_eeprom+0x270>)
 80033f2:	70da      	strb	r2, [r3, #3]
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e00e      	b.n	8003418 <restore_from_eeprom+0x154>
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	3305      	adds	r3, #5
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	4618      	mov	r0, r3
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	015b      	lsls	r3, r3, #5
 8003406:	4a54      	ldr	r2, [pc, #336]	; (8003558 <restore_from_eeprom+0x294>)
 8003408:	4413      	add	r3, r2
 800340a:	2220      	movs	r2, #32
 800340c:	4619      	mov	r1, r3
 800340e:	f002 f92d 	bl	800566c <eeprom_read>
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	3301      	adds	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <restore_from_eeprom+0x270>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3eb      	bcc.n	80033fa <restore_from_eeprom+0x136>
 8003422:	2300      	movs	r3, #0
 8003424:	73bb      	strb	r3, [r7, #14]
 8003426:	e010      	b.n	800344a <restore_from_eeprom+0x186>
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	330f      	adds	r3, #15
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	4618      	mov	r0, r3
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2234      	movs	r2, #52	; 0x34
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a48      	ldr	r2, [pc, #288]	; (800355c <restore_from_eeprom+0x298>)
 800343a:	4413      	add	r3, r2
 800343c:	2234      	movs	r2, #52	; 0x34
 800343e:	4619      	mov	r1, r3
 8003440:	f002 f914 	bl	800566c <eeprom_read>
 8003444:	7bbb      	ldrb	r3, [r7, #14]
 8003446:	3301      	adds	r3, #1
 8003448:	73bb      	strb	r3, [r7, #14]
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <restore_from_eeprom+0x270>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	7bba      	ldrb	r2, [r7, #14]
 8003450:	429a      	cmp	r2, r3
 8003452:	d3e9      	bcc.n	8003428 <restore_from_eeprom+0x164>
 8003454:	2100      	movs	r1, #0
 8003456:	4836      	ldr	r0, [pc, #216]	; (8003530 <restore_from_eeprom+0x26c>)
 8003458:	f000 fa9a 	bl	8003990 <send_debug_msg>
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <restore_from_eeprom+0x270>)
 800345e:	7b5b      	ldrb	r3, [r3, #13]
 8003460:	220a      	movs	r2, #10
 8003462:	4935      	ldr	r1, [pc, #212]	; (8003538 <restore_from_eeprom+0x274>)
 8003464:	4618      	mov	r0, r3
 8003466:	f009 ff73 	bl	800d350 <itoa>
 800346a:	4603      	mov	r3, r0
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa8e 	bl	8003990 <send_debug_msg>
 8003474:	2101      	movs	r1, #1
 8003476:	4831      	ldr	r0, [pc, #196]	; (800353c <restore_from_eeprom+0x278>)
 8003478:	f000 fa8a 	bl	8003990 <send_debug_msg>
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e022      	b.n	80034c8 <restore_from_eeprom+0x204>
 8003482:	220a      	movs	r2, #10
 8003484:	492c      	ldr	r1, [pc, #176]	; (8003538 <restore_from_eeprom+0x274>)
 8003486:	68b8      	ldr	r0, [r7, #8]
 8003488:	f009 ff62 	bl	800d350 <itoa>
 800348c:	4603      	mov	r3, r0
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa7d 	bl	8003990 <send_debug_msg>
 8003496:	2100      	movs	r1, #0
 8003498:	4829      	ldr	r0, [pc, #164]	; (8003540 <restore_from_eeprom+0x27c>)
 800349a:	f000 fa79 	bl	8003990 <send_debug_msg>
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <restore_from_eeprom+0x268>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	220a      	movs	r2, #10
 80034a8:	4923      	ldr	r1, [pc, #140]	; (8003538 <restore_from_eeprom+0x274>)
 80034aa:	4618      	mov	r0, r3
 80034ac:	f009 ff50 	bl	800d350 <itoa>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa6b 	bl	8003990 <send_debug_msg>
 80034ba:	2101      	movs	r1, #1
 80034bc:	4821      	ldr	r0, [pc, #132]	; (8003544 <restore_from_eeprom+0x280>)
 80034be:	f000 fa67 	bl	8003990 <send_debug_msg>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <restore_from_eeprom+0x270>)
 80034ca:	7b5b      	ldrb	r3, [r3, #13]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4293      	cmp	r3, r2
 80034d2:	dbd6      	blt.n	8003482 <restore_from_eeprom+0x1be>
 80034d4:	2100      	movs	r1, #0
 80034d6:	4822      	ldr	r0, [pc, #136]	; (8003560 <restore_from_eeprom+0x29c>)
 80034d8:	f000 fa5a 	bl	8003990 <send_debug_msg>
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <restore_from_eeprom+0x270>)
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	220a      	movs	r2, #10
 80034e2:	4915      	ldr	r1, [pc, #84]	; (8003538 <restore_from_eeprom+0x274>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f009 ff33 	bl	800d350 <itoa>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2101      	movs	r1, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa4e 	bl	8003990 <send_debug_msg>
 80034f4:	2101      	movs	r1, #1
 80034f6:	481b      	ldr	r0, [pc, #108]	; (8003564 <restore_from_eeprom+0x2a0>)
 80034f8:	f000 fa4a 	bl	8003990 <send_debug_msg>
 80034fc:	2100      	movs	r1, #0
 80034fe:	481a      	ldr	r0, [pc, #104]	; (8003568 <restore_from_eeprom+0x2a4>)
 8003500:	f000 fa46 	bl	8003990 <send_debug_msg>
 8003504:	2100      	movs	r1, #0
 8003506:	4819      	ldr	r0, [pc, #100]	; (800356c <restore_from_eeprom+0x2a8>)
 8003508:	f000 fa42 	bl	8003990 <send_debug_msg>
 800350c:	2100      	movs	r1, #0
 800350e:	4818      	ldr	r0, [pc, #96]	; (8003570 <restore_from_eeprom+0x2ac>)
 8003510:	f000 fa3e 	bl	8003990 <send_debug_msg>
 8003514:	2101      	movs	r1, #1
 8003516:	4817      	ldr	r0, [pc, #92]	; (8003574 <restore_from_eeprom+0x2b0>)
 8003518:	f000 fa3a 	bl	8003990 <send_debug_msg>
 800351c:	2300      	movs	r3, #0
 800351e:	71fb      	strb	r3, [r7, #7]
 8003520:	e080      	b.n	8003624 <restore_from_eeprom+0x360>
 8003522:	bf00      	nop
 8003524:	0800e094 	.word	0x0800e094
 8003528:	20004bd1 	.word	0x20004bd1
 800352c:	20003514 	.word	0x20003514
 8003530:	0800d9cc 	.word	0x0800d9cc
 8003534:	20004bc4 	.word	0x20004bc4
 8003538:	200034d0 	.word	0x200034d0
 800353c:	0800d9d4 	.word	0x0800d9d4
 8003540:	0800d9ec 	.word	0x0800d9ec
 8003544:	0800d9f0 	.word	0x0800d9f0
 8003548:	20004bc5 	.word	0x20004bc5
 800354c:	20004bcc 	.word	0x20004bcc
 8003550:	20004bd0 	.word	0x20004bd0
 8003554:	20004bc8 	.word	0x20004bc8
 8003558:	20003634 	.word	0x20003634
 800355c:	20003774 	.word	0x20003774
 8003560:	0800dc5c 	.word	0x0800dc5c
 8003564:	0800dc70 	.word	0x0800dc70
 8003568:	0800dca4 	.word	0x0800dca4
 800356c:	0800dcb0 	.word	0x0800dcb0
 8003570:	0800dcc4 	.word	0x0800dcc4
 8003574:	0800dcd4 	.word	0x0800dcd4
 8003578:	2100      	movs	r1, #0
 800357a:	485f      	ldr	r0, [pc, #380]	; (80036f8 <restore_from_eeprom+0x434>)
 800357c:	f000 fa08 	bl	8003990 <send_debug_msg>
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	3301      	adds	r3, #1
 8003584:	220a      	movs	r2, #10
 8003586:	495d      	ldr	r1, [pc, #372]	; (80036fc <restore_from_eeprom+0x438>)
 8003588:	4618      	mov	r0, r3
 800358a:	f009 fee1 	bl	800d350 <itoa>
 800358e:	4603      	mov	r3, r0
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f9fc 	bl	8003990 <send_debug_msg>
 8003598:	2100      	movs	r1, #0
 800359a:	4859      	ldr	r0, [pc, #356]	; (8003700 <restore_from_eeprom+0x43c>)
 800359c:	f000 f9f8 	bl	8003990 <send_debug_msg>
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	015b      	lsls	r3, r3, #5
 80035a4:	4a57      	ldr	r2, [pc, #348]	; (8003704 <restore_from_eeprom+0x440>)
 80035a6:	4413      	add	r3, r2
 80035a8:	3302      	adds	r3, #2
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f9ef 	bl	8003990 <send_debug_msg>
 80035b2:	2100      	movs	r1, #0
 80035b4:	4850      	ldr	r0, [pc, #320]	; (80036f8 <restore_from_eeprom+0x434>)
 80035b6:	f000 f9eb 	bl	8003990 <send_debug_msg>
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <restore_from_eeprom+0x440>)
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	4413      	add	r3, r2
 80035c2:	3318      	adds	r3, #24
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	220a      	movs	r2, #10
 80035c8:	494c      	ldr	r1, [pc, #304]	; (80036fc <restore_from_eeprom+0x438>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f009 fec0 	bl	800d350 <itoa>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f9db 	bl	8003990 <send_debug_msg>
 80035da:	2100      	movs	r1, #0
 80035dc:	484a      	ldr	r0, [pc, #296]	; (8003708 <restore_from_eeprom+0x444>)
 80035de:	f000 f9d7 	bl	8003990 <send_debug_msg>
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	4a47      	ldr	r2, [pc, #284]	; (8003704 <restore_from_eeprom+0x440>)
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	4413      	add	r3, r2
 80035ea:	331c      	adds	r3, #28
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <restore_from_eeprom+0x448>)
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f9c9 	bl	8003990 <send_debug_msg>
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	4a40      	ldr	r2, [pc, #256]	; (8003704 <restore_from_eeprom+0x440>)
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	4413      	add	r3, r2
 8003606:	331c      	adds	r3, #28
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b13      	cmp	r3, #19
 800360c:	d803      	bhi.n	8003616 <restore_from_eeprom+0x352>
 800360e:	2100      	movs	r1, #0
 8003610:	483f      	ldr	r0, [pc, #252]	; (8003710 <restore_from_eeprom+0x44c>)
 8003612:	f000 f9bd 	bl	8003990 <send_debug_msg>
 8003616:	2101      	movs	r1, #1
 8003618:	483e      	ldr	r0, [pc, #248]	; (8003714 <restore_from_eeprom+0x450>)
 800361a:	f000 f9b9 	bl	8003990 <send_debug_msg>
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	3301      	adds	r3, #1
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <restore_from_eeprom+0x454>)
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d3a4      	bcc.n	8003578 <restore_from_eeprom+0x2b4>
 800362e:	2101      	movs	r1, #1
 8003630:	483a      	ldr	r0, [pc, #232]	; (800371c <restore_from_eeprom+0x458>)
 8003632:	f000 f9ad 	bl	8003990 <send_debug_msg>
 8003636:	2100      	movs	r1, #0
 8003638:	4839      	ldr	r0, [pc, #228]	; (8003720 <restore_from_eeprom+0x45c>)
 800363a:	f000 f9a9 	bl	8003990 <send_debug_msg>
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <restore_from_eeprom+0x454>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	220a      	movs	r2, #10
 8003644:	492d      	ldr	r1, [pc, #180]	; (80036fc <restore_from_eeprom+0x438>)
 8003646:	4618      	mov	r0, r3
 8003648:	f009 fe82 	bl	800d350 <itoa>
 800364c:	4603      	mov	r3, r0
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f99d 	bl	8003990 <send_debug_msg>
 8003656:	2101      	movs	r1, #1
 8003658:	4832      	ldr	r0, [pc, #200]	; (8003724 <restore_from_eeprom+0x460>)
 800365a:	f000 f999 	bl	8003990 <send_debug_msg>
 800365e:	2101      	movs	r1, #1
 8003660:	4831      	ldr	r0, [pc, #196]	; (8003728 <restore_from_eeprom+0x464>)
 8003662:	f000 f995 	bl	8003990 <send_debug_msg>
 8003666:	2300      	movs	r3, #0
 8003668:	71bb      	strb	r3, [r7, #6]
 800366a:	e104      	b.n	8003876 <restore_from_eeprom+0x5b2>
 800366c:	2100      	movs	r1, #0
 800366e:	4822      	ldr	r0, [pc, #136]	; (80036f8 <restore_from_eeprom+0x434>)
 8003670:	f000 f98e 	bl	8003990 <send_debug_msg>
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	3301      	adds	r3, #1
 8003678:	220a      	movs	r2, #10
 800367a:	4920      	ldr	r1, [pc, #128]	; (80036fc <restore_from_eeprom+0x438>)
 800367c:	4618      	mov	r0, r3
 800367e:	f009 fe67 	bl	800d350 <itoa>
 8003682:	4603      	mov	r3, r0
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f982 	bl	8003990 <send_debug_msg>
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d803      	bhi.n	800369a <restore_from_eeprom+0x3d6>
 8003692:	2100      	movs	r1, #0
 8003694:	481e      	ldr	r0, [pc, #120]	; (8003710 <restore_from_eeprom+0x44c>)
 8003696:	f000 f97b 	bl	8003990 <send_debug_msg>
 800369a:	2100      	movs	r1, #0
 800369c:	4823      	ldr	r0, [pc, #140]	; (800372c <restore_from_eeprom+0x468>)
 800369e:	f000 f977 	bl	8003990 <send_debug_msg>
 80036a2:	79bb      	ldrb	r3, [r7, #6]
 80036a4:	2234      	movs	r2, #52	; 0x34
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <restore_from_eeprom+0x46c>)
 80036ac:	4413      	add	r3, r2
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f96d 	bl	8003990 <send_debug_msg>
 80036b6:	2100      	movs	r1, #0
 80036b8:	481e      	ldr	r0, [pc, #120]	; (8003734 <restore_from_eeprom+0x470>)
 80036ba:	f000 f969 	bl	8003990 <send_debug_msg>
 80036be:	2300      	movs	r3, #0
 80036c0:	717b      	strb	r3, [r7, #5]
 80036c2:	e03c      	b.n	800373e <restore_from_eeprom+0x47a>
 80036c4:	797b      	ldrb	r3, [r7, #5]
 80036c6:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <restore_from_eeprom+0x440>)
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	4413      	add	r3, r2
 80036cc:	331c      	adds	r3, #28
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	79bb      	ldrb	r3, [r7, #6]
 80036d2:	4917      	ldr	r1, [pc, #92]	; (8003730 <restore_from_eeprom+0x46c>)
 80036d4:	2034      	movs	r0, #52	; 0x34
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	440b      	add	r3, r1
 80036dc:	3328      	adds	r3, #40	; 0x28
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d129      	bne.n	8003738 <restore_from_eeprom+0x474>
 80036e4:	797b      	ldrb	r3, [r7, #5]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <restore_from_eeprom+0x440>)
 80036ea:	4413      	add	r3, r2
 80036ec:	3302      	adds	r3, #2
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f94d 	bl	8003990 <send_debug_msg>
 80036f6:	e027      	b.n	8003748 <restore_from_eeprom+0x484>
 80036f8:	0800dce4 	.word	0x0800dce4
 80036fc:	200034d0 	.word	0x200034d0
 8003700:	0800dce8 	.word	0x0800dce8
 8003704:	20003634 	.word	0x20003634
 8003708:	0800dcf4 	.word	0x0800dcf4
 800370c:	20000008 	.word	0x20000008
 8003710:	0800dcfc 	.word	0x0800dcfc
 8003714:	0800dd00 	.word	0x0800dd00
 8003718:	20004bc4 	.word	0x20004bc4
 800371c:	0800dc70 	.word	0x0800dc70
 8003720:	0800dd08 	.word	0x0800dd08
 8003724:	0800dd1c 	.word	0x0800dd1c
 8003728:	0800dd88 	.word	0x0800dd88
 800372c:	0800ddf4 	.word	0x0800ddf4
 8003730:	20003774 	.word	0x20003774
 8003734:	0800ddfc 	.word	0x0800ddfc
 8003738:	797b      	ldrb	r3, [r7, #5]
 800373a:	3301      	adds	r3, #1
 800373c:	717b      	strb	r3, [r7, #5]
 800373e:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <restore_from_eeprom+0x634>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	797a      	ldrb	r2, [r7, #5]
 8003744:	429a      	cmp	r2, r3
 8003746:	d3bd      	bcc.n	80036c4 <restore_from_eeprom+0x400>
 8003748:	2100      	movs	r1, #0
 800374a:	486c      	ldr	r0, [pc, #432]	; (80038fc <restore_from_eeprom+0x638>)
 800374c:	f000 f920 	bl	8003990 <send_debug_msg>
 8003750:	79bb      	ldrb	r3, [r7, #6]
 8003752:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <restore_from_eeprom+0x63c>)
 8003754:	2134      	movs	r1, #52	; 0x34
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3324      	adds	r3, #36	; 0x24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	220a      	movs	r2, #10
 8003762:	4968      	ldr	r1, [pc, #416]	; (8003904 <restore_from_eeprom+0x640>)
 8003764:	4618      	mov	r0, r3
 8003766:	f009 fdf3 	bl	800d350 <itoa>
 800376a:	4603      	mov	r3, r0
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f90e 	bl	8003990 <send_debug_msg>
 8003774:	2100      	movs	r1, #0
 8003776:	4864      	ldr	r0, [pc, #400]	; (8003908 <restore_from_eeprom+0x644>)
 8003778:	f000 f90a 	bl	8003990 <send_debug_msg>
 800377c:	79bb      	ldrb	r3, [r7, #6]
 800377e:	4a60      	ldr	r2, [pc, #384]	; (8003900 <restore_from_eeprom+0x63c>)
 8003780:	2134      	movs	r1, #52	; 0x34
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3328      	adds	r3, #40	; 0x28
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b5f      	ldr	r3, [pc, #380]	; (800390c <restore_from_eeprom+0x648>)
 8003790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f8fa 	bl	8003990 <send_debug_msg>
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	4a58      	ldr	r2, [pc, #352]	; (8003900 <restore_from_eeprom+0x63c>)
 80037a0:	2134      	movs	r1, #52	; 0x34
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3328      	adds	r3, #40	; 0x28
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b13      	cmp	r3, #19
 80037ae:	d803      	bhi.n	80037b8 <restore_from_eeprom+0x4f4>
 80037b0:	2100      	movs	r1, #0
 80037b2:	4857      	ldr	r0, [pc, #348]	; (8003910 <restore_from_eeprom+0x64c>)
 80037b4:	f000 f8ec 	bl	8003990 <send_debug_msg>
 80037b8:	2100      	movs	r1, #0
 80037ba:	4856      	ldr	r0, [pc, #344]	; (8003914 <restore_from_eeprom+0x650>)
 80037bc:	f000 f8e8 	bl	8003990 <send_debug_msg>
 80037c0:	79bb      	ldrb	r3, [r7, #6]
 80037c2:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <restore_from_eeprom+0x63c>)
 80037c4:	2134      	movs	r1, #52	; 0x34
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3315      	adds	r3, #21
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	220a      	movs	r2, #10
 80037d2:	494c      	ldr	r1, [pc, #304]	; (8003904 <restore_from_eeprom+0x640>)
 80037d4:	4618      	mov	r0, r3
 80037d6:	f009 fdbb 	bl	800d350 <itoa>
 80037da:	4603      	mov	r3, r0
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f8d6 	bl	8003990 <send_debug_msg>
 80037e4:	79bb      	ldrb	r3, [r7, #6]
 80037e6:	4a46      	ldr	r2, [pc, #280]	; (8003900 <restore_from_eeprom+0x63c>)
 80037e8:	2134      	movs	r1, #52	; 0x34
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3315      	adds	r3, #21
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	d803      	bhi.n	8003800 <restore_from_eeprom+0x53c>
 80037f8:	2100      	movs	r1, #0
 80037fa:	4845      	ldr	r0, [pc, #276]	; (8003910 <restore_from_eeprom+0x64c>)
 80037fc:	f000 f8c8 	bl	8003990 <send_debug_msg>
 8003800:	2100      	movs	r1, #0
 8003802:	4845      	ldr	r0, [pc, #276]	; (8003918 <restore_from_eeprom+0x654>)
 8003804:	f000 f8c4 	bl	8003990 <send_debug_msg>
 8003808:	2100      	movs	r1, #0
 800380a:	4844      	ldr	r0, [pc, #272]	; (800391c <restore_from_eeprom+0x658>)
 800380c:	f000 f8c0 	bl	8003990 <send_debug_msg>
 8003810:	79bb      	ldrb	r3, [r7, #6]
 8003812:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <restore_from_eeprom+0x63c>)
 8003814:	2134      	movs	r1, #52	; 0x34
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3320      	adds	r3, #32
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2210      	movs	r2, #16
 8003822:	4938      	ldr	r1, [pc, #224]	; (8003904 <restore_from_eeprom+0x640>)
 8003824:	4618      	mov	r0, r3
 8003826:	f009 fd93 	bl	800d350 <itoa>
 800382a:	4603      	mov	r3, r0
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f8ae 	bl	8003990 <send_debug_msg>
 8003834:	2100      	movs	r1, #0
 8003836:	4837      	ldr	r0, [pc, #220]	; (8003914 <restore_from_eeprom+0x650>)
 8003838:	f000 f8aa 	bl	8003990 <send_debug_msg>
 800383c:	2100      	movs	r1, #0
 800383e:	4837      	ldr	r0, [pc, #220]	; (800391c <restore_from_eeprom+0x658>)
 8003840:	f000 f8a6 	bl	8003990 <send_debug_msg>
 8003844:	79bb      	ldrb	r3, [r7, #6]
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <restore_from_eeprom+0x63c>)
 8003848:	2134      	movs	r1, #52	; 0x34
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	332a      	adds	r3, #42	; 0x2a
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	492b      	ldr	r1, [pc, #172]	; (8003904 <restore_from_eeprom+0x640>)
 8003858:	4618      	mov	r0, r3
 800385a:	f009 fd79 	bl	800d350 <itoa>
 800385e:	4603      	mov	r3, r0
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f894 	bl	8003990 <send_debug_msg>
 8003868:	2101      	movs	r1, #1
 800386a:	482d      	ldr	r0, [pc, #180]	; (8003920 <restore_from_eeprom+0x65c>)
 800386c:	f000 f890 	bl	8003990 <send_debug_msg>
 8003870:	79bb      	ldrb	r3, [r7, #6]
 8003872:	3301      	adds	r3, #1
 8003874:	71bb      	strb	r3, [r7, #6]
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <restore_from_eeprom+0x634>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	79ba      	ldrb	r2, [r7, #6]
 800387c:	429a      	cmp	r2, r3
 800387e:	f4ff aef5 	bcc.w	800366c <restore_from_eeprom+0x3a8>
 8003882:	2101      	movs	r1, #1
 8003884:	4827      	ldr	r0, [pc, #156]	; (8003924 <restore_from_eeprom+0x660>)
 8003886:	f000 f883 	bl	8003990 <send_debug_msg>
 800388a:	2201      	movs	r2, #1
 800388c:	4926      	ldr	r1, [pc, #152]	; (8003928 <restore_from_eeprom+0x664>)
 800388e:	200b      	movs	r0, #11
 8003890:	f001 feec 	bl	800566c <eeprom_read>
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <restore_from_eeprom+0x634>)
 8003896:	7b9b      	ldrb	r3, [r3, #14]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fc47 	bl	800312c <Si468x_set_audio_volume>
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <restore_from_eeprom+0x634>)
 80038a0:	791b      	ldrb	r3, [r3, #4]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <restore_from_eeprom+0x63c>)
 80038a6:	2334      	movs	r3, #52	; 0x34
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3328      	adds	r3, #40	; 0x28
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe f8fb 	bl	8001ab0 <Si468x_dab_tune_freq>
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <restore_from_eeprom+0x634>)
 80038bc:	791b      	ldrb	r3, [r3, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fc6a 	bl	8003198 <play_station>
 80038c4:	e013      	b.n	80038ee <restore_from_eeprom+0x62a>
 80038c6:	2101      	movs	r1, #1
 80038c8:	4818      	ldr	r0, [pc, #96]	; (800392c <restore_from_eeprom+0x668>)
 80038ca:	f000 f861 	bl	8003990 <send_debug_msg>
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <restore_from_eeprom+0x634>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <restore_from_eeprom+0x634>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	731a      	strb	r2, [r3, #12]
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <restore_from_eeprom+0x634>)
 80038dc:	2200      	movs	r2, #0
 80038de:	705a      	strb	r2, [r3, #1]
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <restore_from_eeprom+0x634>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <restore_from_eeprom+0x634>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	70da      	strb	r2, [r3, #3]
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20004bc4 	.word	0x20004bc4
 80038fc:	0800ddfc 	.word	0x0800ddfc
 8003900:	20003774 	.word	0x20003774
 8003904:	200034d0 	.word	0x200034d0
 8003908:	0800dcf4 	.word	0x0800dcf4
 800390c:	20000008 	.word	0x20000008
 8003910:	0800dcfc 	.word	0x0800dcfc
 8003914:	0800ddf4 	.word	0x0800ddf4
 8003918:	0800de00 	.word	0x0800de00
 800391c:	0800de08 	.word	0x0800de08
 8003920:	0800de0c 	.word	0x0800de0c
 8003924:	0800dd1c 	.word	0x0800dd1c
 8003928:	20004bd2 	.word	0x20004bd2
 800392c:	0800e0d0 	.word	0x0800e0d0

08003930 <get_dab_service_list>:
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <get_dab_service_list+0x10>)
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	20003774 	.word	0x20003774

08003944 <get_dab_ensemble_list>:
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <get_dab_ensemble_list+0x10>)
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	20003634 	.word	0x20003634

08003958 <get_dab_management>:
 8003958:	b490      	push	{r4, r7}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <get_dab_management+0x20>)
 8003964:	461c      	mov	r4, r3
 8003966:	4613      	mov	r3, r2
 8003968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bc90      	pop	{r4, r7}
 8003976:	4770      	bx	lr
 8003978:	20004bc4 	.word	0x20004bc4

0800397c <get_dls_label>:
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <get_dls_label+0x10>)
 8003982:	4618      	mov	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20004bd4 	.word	0x20004bd4

08003990 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fc fc1d 	bl	80001dc <strlen>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	2364      	movs	r3, #100	; 0x64
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	480a      	ldr	r0, [pc, #40]	; (80039d8 <send_debug_msg+0x48>)
 80039b0:	f009 f91d 	bl	800cbee <HAL_UART_Transmit>

	if(is_crlf)
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80039ba:	f640 230d 	movw	r3, #2573	; 0xa0d
 80039be:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80039c0:	f107 010c 	add.w	r1, r7, #12
 80039c4:	2364      	movs	r3, #100	; 0x64
 80039c6:	2202      	movs	r2, #2
 80039c8:	4803      	ldr	r0, [pc, #12]	; (80039d8 <send_debug_msg+0x48>)
 80039ca:	f009 f910 	bl	800cbee <HAL_UART_Transmit>
	}
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20007190 	.word	0x20007190

080039dc <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fc ff6e 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80039e8:	2311      	movs	r3, #17
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80039f0:	2211      	movs	r2, #17
 80039f2:	2100      	movs	r1, #0
 80039f4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80039f8:	f7fc ffef 	bl	80009da <ILI9341_Draw_Line>
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <Display_booting_screen>:

void Display_booting_screen()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7fc ff5a 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003a10:	2302      	movs	r3, #2
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <Display_booting_screen+0xc4>)
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a1e:	2128      	movs	r1, #40	; 0x28
 8003a20:	205f      	movs	r0, #95	; 0x5f
 8003a22:	f7fd f85b 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003a26:	2302      	movs	r3, #2
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <Display_booting_screen+0xc8>)
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a34:	213c      	movs	r1, #60	; 0x3c
 8003a36:	2046      	movs	r0, #70	; 0x46
 8003a38:	f7fd f850 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <Display_booting_screen+0xcc>)
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4a:	2150      	movs	r1, #80	; 0x50
 8003a4c:	2082      	movs	r0, #130	; 0x82
 8003a4e:	f7fd f845 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003a52:	2302      	movs	r3, #2
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <Display_booting_screen+0xd0>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a60:	2164      	movs	r1, #100	; 0x64
 8003a62:	2064      	movs	r0, #100	; 0x64
 8003a64:	f7fd f83a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <Display_booting_screen+0xd4>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a76:	2178      	movs	r1, #120	; 0x78
 8003a78:	205a      	movs	r0, #90	; 0x5a
 8003a7a:	f7fd f82f 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <Display_booting_screen+0xd8>)
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8c:	218c      	movs	r1, #140	; 0x8c
 8003a8e:	2032      	movs	r0, #50	; 0x32
 8003a90:	f7fd f824 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003a94:	2302      	movs	r3, #2
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <Display_booting_screen+0xdc>)
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa2:	21a0      	movs	r1, #160	; 0xa0
 8003aa4:	205a      	movs	r0, #90	; 0x5a
 8003aa6:	f7fd f819 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003aaa:	2302      	movs	r3, #2
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <Display_booting_screen+0xe0>)
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab8:	21b4      	movs	r1, #180	; 0xb4
 8003aba:	2078      	movs	r0, #120	; 0x78
 8003abc:	f7fd f80e 	bl	8000adc <ILI9341_Draw_String>
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	0800e204 	.word	0x0800e204
 8003acc:	0800e214 	.word	0x0800e214
 8003ad0:	0800e22c 	.word	0x0800e22c
 8003ad4:	0800e234 	.word	0x0800e234
 8003ad8:	0800e244 	.word	0x0800e244
 8003adc:	0800e258 	.word	0x0800e258
 8003ae0:	0800e274 	.word	0x0800e274
 8003ae4:	0800e288 	.word	0x0800e288

08003ae8 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8003aee:	f7ff ff75 	bl	80039dc <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2);
 8003af2:	2302      	movs	r3, #2
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <Display_main_screen_background+0x110>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b00:	2101      	movs	r1, #1
 8003b02:	2005      	movs	r0, #5
 8003b04:	f7fc ffea 	bl	8000adc <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003b08:	2328      	movs	r3, #40	; 0x28
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	238c      	movs	r3, #140	; 0x8c
 8003b0e:	2214      	movs	r2, #20
 8003b10:	2105      	movs	r1, #5
 8003b12:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b16:	f7fc ff3f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003b1a:	2341      	movs	r3, #65	; 0x41
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	238c      	movs	r3, #140	; 0x8c
 8003b20:	222d      	movs	r2, #45	; 0x2d
 8003b22:	2105      	movs	r1, #5
 8003b24:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b28:	f7fc ff36 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003b2c:	235a      	movs	r3, #90	; 0x5a
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	238c      	movs	r3, #140	; 0x8c
 8003b32:	2246      	movs	r2, #70	; 0x46
 8003b34:	2105      	movs	r1, #5
 8003b36:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b3a:	f7fc ff2d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003b3e:	2373      	movs	r3, #115	; 0x73
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	238c      	movs	r3, #140	; 0x8c
 8003b44:	225f      	movs	r2, #95	; 0x5f
 8003b46:	2105      	movs	r1, #5
 8003b48:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b4c:	f7fc ff24 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003b50:	238c      	movs	r3, #140	; 0x8c
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	238c      	movs	r3, #140	; 0x8c
 8003b56:	2278      	movs	r2, #120	; 0x78
 8003b58:	2105      	movs	r1, #5
 8003b5a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b5e:	f7fc ff1b 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003b62:	23a5      	movs	r3, #165	; 0xa5
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	238c      	movs	r3, #140	; 0x8c
 8003b68:	2291      	movs	r2, #145	; 0x91
 8003b6a:	2105      	movs	r1, #5
 8003b6c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b70:	f7fc ff12 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003b74:	23be      	movs	r3, #190	; 0xbe
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	238c      	movs	r3, #140	; 0x8c
 8003b7a:	22aa      	movs	r2, #170	; 0xaa
 8003b7c:	2105      	movs	r1, #5
 8003b7e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b82:	f7fc ff09 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003b86:	23be      	movs	r3, #190	; 0xbe
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f240 133b 	movw	r3, #315	; 0x13b
 8003b8e:	2214      	movs	r2, #20
 8003b90:	2191      	movs	r1, #145	; 0x91
 8003b92:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b96:	f7fc feff 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003b9a:	23eb      	movs	r3, #235	; 0xeb
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	239d      	movs	r3, #157	; 0x9d
 8003ba0:	22c3      	movs	r2, #195	; 0xc3
 8003ba2:	2105      	movs	r1, #5
 8003ba4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003ba8:	f7fc fef6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003bac:	23eb      	movs	r3, #235	; 0xeb
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f240 133b 	movw	r3, #315	; 0x13b
 8003bb4:	22c3      	movs	r2, #195	; 0xc3
 8003bb6:	21a3      	movs	r1, #163	; 0xa3
 8003bb8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003bbc:	f7fc feec 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <Display_main_screen_background+0x114>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd0:	21cf      	movs	r1, #207	; 0xcf
 8003bd2:	2032      	movs	r0, #50	; 0x32
 8003bd4:	f7fc ff82 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003bd8:	2302      	movs	r3, #2
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <Display_main_screen_background+0x118>)
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be8:	21cf      	movs	r1, #207	; 0xcf
 8003bea:	20c0      	movs	r0, #192	; 0xc0
 8003bec:	f7fc ff76 	bl	8000adc <ILI9341_Draw_String>
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	0800e294 	.word	0x0800e294
 8003bfc:	0800e2a4 	.word	0x0800e2a4
 8003c00:	0800e2b0 	.word	0x0800e2b0

08003c04 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003c04:	b082      	sub	sp, #8
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
 8003c10:	f107 0118 	add.w	r1, r7, #24
 8003c14:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003c18:	7efb      	ldrb	r3, [r7, #27]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2334      	movs	r3, #52	; 0x34
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	461a      	mov	r2, r3
 8003c28:	2302      	movs	r3, #2
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	9200      	str	r2, [sp, #0]
 8003c2e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	2117      	movs	r1, #23
 8003c38:	2008      	movs	r0, #8
 8003c3a:	f7fc ff4f 	bl	8000adc <ILI9341_Draw_String>
//
//	//BAr3
//	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);

	//Bar 4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c40:	2b63      	cmp	r3, #99	; 0x63
 8003c42:	d81e      	bhi.n	8003c82 <Display_main_screen_data+0x7e>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003c44:	2302      	movs	r3, #2
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <Display_main_screen_data+0x250>)
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c54:	217b      	movs	r1, #123	; 0x7b
 8003c56:	2008      	movs	r0, #8
 8003c58:	f7fc ff40 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003c5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c5e:	220a      	movs	r2, #10
 8003c60:	497d      	ldr	r1, [pc, #500]	; (8003e58 <Display_main_screen_data+0x254>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f009 fb74 	bl	800d350 <itoa>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	9201      	str	r2, [sp, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c78:	217b      	movs	r1, #123	; 0x7b
 8003c7a:	2011      	movs	r0, #17
 8003c7c:	f7fc ff2e 	bl	8000adc <ILI9341_Draw_String>
 8003c80:	e011      	b.n	8003ca6 <Display_main_screen_data+0xa2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003c82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c84:	220a      	movs	r2, #10
 8003c86:	4974      	ldr	r1, [pc, #464]	; (8003e58 <Display_main_screen_data+0x254>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f009 fb61 	bl	800d350 <itoa>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2202      	movs	r2, #2
 8003c92:	9201      	str	r2, [sp, #4]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9e:	217b      	movs	r1, #123	; 0x7b
 8003ca0:	2008      	movs	r0, #8
 8003ca2:	f7fc ff1b 	bl	8000adc <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <Display_main_screen_data+0x258>)
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb6:	217b      	movs	r1, #123	; 0x7b
 8003cb8:	2024      	movs	r0, #36	; 0x24
 8003cba:	f7fc ff0f 	bl	8000adc <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	4965      	ldr	r1, [pc, #404]	; (8003e58 <Display_main_screen_data+0x254>)
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f009 fb43 	bl	800d350 <itoa>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2202      	movs	r2, #2
 8003cce:	9201      	str	r2, [sp, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cda:	217b      	movs	r1, #123	; 0x7b
 8003cdc:	204e      	movs	r0, #78	; 0x4e
 8003cde:	f7fc fefd 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <Display_main_screen_data+0x25c>)
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf2:	217b      	movs	r1, #123	; 0x7b
 8003cf4:	207a      	movs	r0, #122	; 0x7a
 8003cf6:	f7fc fef1 	bl	8000adc <ILI9341_Draw_String>

	//Bar 5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	e022      	b.n	8003d46 <Display_main_screen_data+0x142>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	015b      	lsls	r3, r3, #5
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	7f1a      	ldrb	r2, [r3, #28]
 8003d0a:	7efb      	ldrb	r3, [r7, #27]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	2334      	movs	r3, #52	; 0x34
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	440b      	add	r3, r1
 8003d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d10f      	bne.n	8003d40 <Display_main_screen_data+0x13c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	9201      	str	r2, [sp, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d38:	2194      	movs	r1, #148	; 0x94
 8003d3a:	2008      	movs	r0, #8
 8003d3c:	f7fc fece 	bl	8000adc <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	3301      	adds	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
 8003d46:	7e7b      	ldrb	r3, [r7, #25]
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d3d8      	bcc.n	8003d00 <Display_main_screen_data+0xfc>
		}
	}

	//Bar 6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003d4e:	7efb      	ldrb	r3, [r7, #27]
 8003d50:	461a      	mov	r2, r3
 8003d52:	2334      	movs	r3, #52	; 0x34
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	4a41      	ldr	r2, [pc, #260]	; (8003e64 <Display_main_screen_data+0x260>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	220a      	movs	r2, #10
 8003d68:	493b      	ldr	r1, [pc, #236]	; (8003e58 <Display_main_screen_data+0x254>)
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f009 faf0 	bl	800d350 <itoa>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2202      	movs	r2, #2
 8003d74:	9201      	str	r2, [sp, #4]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d80:	21ad      	movs	r1, #173	; 0xad
 8003d82:	2008      	movs	r0, #8
 8003d84:	f7fc feaa 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003d88:	2302      	movs	r3, #2
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <Display_main_screen_data+0x264>)
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d98:	21ad      	movs	r1, #173	; 0xad
 8003d9a:	201f      	movs	r0, #31
 8003d9c:	f7fc fe9e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003da0:	7efb      	ldrb	r3, [r7, #27]
 8003da2:	461a      	mov	r2, r3
 8003da4:	2334      	movs	r3, #52	; 0x34
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db0:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <Display_main_screen_data+0x260>)
 8003db2:	fba3 1302 	umull	r1, r3, r3, r2
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	220a      	movs	r2, #10
 8003dc4:	4924      	ldr	r1, [pc, #144]	; (8003e58 <Display_main_screen_data+0x254>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f009 fac2 	bl	800d350 <itoa>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2202      	movs	r2, #2
 8003dd0:	9201      	str	r2, [sp, #4]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ddc:	21ad      	movs	r1, #173	; 0xad
 8003dde:	2026      	movs	r0, #38	; 0x26
 8003de0:	f7fc fe7c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003de4:	2302      	movs	r3, #2
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <Display_main_screen_data+0x268>)
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df4:	21ad      	movs	r1, #173	; 0xad
 8003df6:	2041      	movs	r0, #65	; 0x41
 8003df8:	f7fc fe70 	bl	8000adc <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <Display_main_screen_data+0x26c>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0c:	21ad      	movs	r1, #173	; 0xad
 8003e0e:	205f      	movs	r0, #95	; 0x5f
 8003e10:	f7fc fe64 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003e14:	7efb      	ldrb	r3, [r7, #27]
 8003e16:	461a      	mov	r2, r3
 8003e18:	2334      	movs	r3, #52	; 0x34
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <Display_main_screen_data+0x270>)
 8003e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	9201      	str	r2, [sp, #4]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e3c:	21ad      	movs	r1, #173	; 0xad
 8003e3e:	2073      	movs	r0, #115	; 0x73
 8003e40:	f7fc fe4c 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4e:	b002      	add	sp, #8
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	0800e2c0 	.word	0x0800e2c0
 8003e58:	20006d8c 	.word	0x20006d8c
 8003e5c:	0800e2c4 	.word	0x0800e2c4
 8003e60:	0800e2cc 	.word	0x0800e2cc
 8003e64:	10624dd3 	.word	0x10624dd3
 8003e68:	0800e2d0 	.word	0x0800e2d0
 8003e6c:	0800e2d4 	.word	0x0800e2d4
 8003e70:	0800e2d8 	.word	0x0800e2d8
 8003e74:	200000ac 	.word	0x200000ac

08003e78 <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003e80:	4919      	ldr	r1, [pc, #100]	; (8003ee8 <Display_main_screen_dls+0x70>)
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fc f9a0 	bl	80001c8 <strcmp>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d027      	beq.n	8003ede <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003e8e:	2302      	movs	r3, #2
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <Display_main_screen_dls+0x74>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9e:	2130      	movs	r1, #48	; 0x30
 8003ea0:	2008      	movs	r0, #8
 8003ea2:	f7fc fe1b 	bl	8000adc <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb6:	2130      	movs	r1, #48	; 0x30
 8003eb8:	2008      	movs	r0, #8
 8003eba:	f7fc fe0f 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e009      	b.n	8003ed8 <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	441a      	add	r2, r3
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	7811      	ldrb	r1, [r2, #0]
 8003ece:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <Display_main_screen_dls+0x70>)
 8003ed0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d9f2      	bls.n	8003ec4 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20006dcc 	.word	0x20006dcc
 8003eec:	0800e2dc 	.word	0x0800e2dc

08003ef0 <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <Display_main_screen_empty+0xb4>)
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f06:	2117      	movs	r1, #23
 8003f08:	2008      	movs	r0, #8
 8003f0a:	f7fc fde7 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003f0e:	2302      	movs	r3, #2
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <Display_main_screen_empty+0xb8>)
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1e:	2130      	movs	r1, #48	; 0x30
 8003f20:	2008      	movs	r0, #8
 8003f22:	f7fc fddb 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003f26:	2302      	movs	r3, #2
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <Display_main_screen_empty+0xbc>)
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f36:	2149      	movs	r1, #73	; 0x49
 8003f38:	2008      	movs	r0, #8
 8003f3a:	f7fc fdcf 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003f3e:	2302      	movs	r3, #2
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <Display_main_screen_empty+0xc0>)
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4e:	2162      	movs	r1, #98	; 0x62
 8003f50:	2008      	movs	r0, #8
 8003f52:	f7fc fdc3 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003f56:	2302      	movs	r3, #2
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <Display_main_screen_empty+0xc4>)
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f66:	217b      	movs	r1, #123	; 0x7b
 8003f68:	2008      	movs	r0, #8
 8003f6a:	f7fc fdb7 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003f6e:	2302      	movs	r3, #2
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <Display_main_screen_empty+0xc8>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7e:	2194      	movs	r1, #148	; 0x94
 8003f80:	2008      	movs	r0, #8
 8003f82:	f7fc fdab 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8003f86:	2302      	movs	r3, #2
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <Display_main_screen_empty+0xc8>)
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f96:	21ad      	movs	r1, #173	; 0xad
 8003f98:	2008      	movs	r0, #8
 8003f9a:	f7fc fd9f 	bl	8000adc <ILI9341_Draw_String>
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	0800e35c 	.word	0x0800e35c
 8003fa8:	0800e370 	.word	0x0800e370
 8003fac:	0800e384 	.word	0x0800e384
 8003fb0:	0800e398 	.word	0x0800e398
 8003fb4:	0800e3ac 	.word	0x0800e3ac
 8003fb8:	0800e3c0 	.word	0x0800e3c0

08003fbc <Display_stations_list_background>:


void Display_stations_list_background()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af02      	add	r7, sp, #8
	//clear screen
	Display_clear_screen();
 8003fc2:	f7ff fd0b 	bl	80039dc <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2);
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <Display_stations_list_background+0x174>)
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	2005      	movs	r0, #5
 8003fd8:	f7fc fd80 	bl	8000adc <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8003fdc:	2332      	movs	r3, #50	; 0x32
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f240 131d 	movw	r3, #285	; 0x11d
 8003fe4:	2214      	movs	r2, #20
 8003fe6:	2105      	movs	r1, #5
 8003fe8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003fec:	f7fc fcd4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8003ff0:	2355      	movs	r3, #85	; 0x55
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	f240 131d 	movw	r3, #285	; 0x11d
 8003ff8:	2237      	movs	r2, #55	; 0x37
 8003ffa:	2105      	movs	r1, #5
 8003ffc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004000:	f7fc fcca 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8004004:	2378      	movs	r3, #120	; 0x78
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f240 131d 	movw	r3, #285	; 0x11d
 800400c:	225a      	movs	r2, #90	; 0x5a
 800400e:	2105      	movs	r1, #5
 8004010:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004014:	f7fc fcc0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8004018:	239b      	movs	r3, #155	; 0x9b
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	f240 131d 	movw	r3, #285	; 0x11d
 8004020:	227d      	movs	r2, #125	; 0x7d
 8004022:	2105      	movs	r1, #5
 8004024:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004028:	f7fc fcb6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 800402c:	23be      	movs	r3, #190	; 0xbe
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f240 131d 	movw	r3, #285	; 0x11d
 8004034:	22a0      	movs	r2, #160	; 0xa0
 8004036:	2105      	movs	r1, #5
 8004038:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800403c:	f7fc fcac 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8004040:	2366      	movs	r3, #102	; 0x66
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	f240 133b 	movw	r3, #315	; 0x13b
 8004048:	2214      	movs	r2, #20
 800404a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800404e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004052:	f7fc fca1 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8004056:	2302      	movs	r3, #2
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <Display_stations_list_background+0x178>)
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004066:	2138      	movs	r1, #56	; 0x38
 8004068:	f240 1027 	movw	r0, #295	; 0x127
 800406c:	f7fc fd36 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8004070:	2302      	movs	r3, #2
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <Display_stations_list_background+0x17c>)
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800407c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004080:	2138      	movs	r1, #56	; 0x38
 8004082:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8004086:	f7fc fd29 	bl	8000adc <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 800408a:	23be      	movs	r3, #190	; 0xbe
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	f240 133b 	movw	r3, #315	; 0x13b
 8004092:	226c      	movs	r2, #108	; 0x6c
 8004094:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004098:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800409c:	f7fc fc7c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 80040a0:	2302      	movs	r3, #2
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <Display_stations_list_background+0x17c>)
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040b0:	2192      	movs	r1, #146	; 0x92
 80040b2:	f240 1027 	movw	r0, #295	; 0x127
 80040b6:	f7fc fd11 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 80040ba:	2302      	movs	r3, #2
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <Display_stations_list_background+0x178>)
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ca:	2192      	movs	r1, #146	; 0x92
 80040cc:	f44f 7097 	mov.w	r0, #302	; 0x12e
 80040d0:	f7fc fd04 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80040d4:	23eb      	movs	r3, #235	; 0xeb
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	239d      	movs	r3, #157	; 0x9d
 80040da:	22c3      	movs	r2, #195	; 0xc3
 80040dc:	2105      	movs	r1, #5
 80040de:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80040e2:	f7fc fc59 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80040e6:	23eb      	movs	r3, #235	; 0xeb
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f240 133b 	movw	r3, #315	; 0x13b
 80040ee:	22c3      	movs	r2, #195	; 0xc3
 80040f0:	21a3      	movs	r1, #163	; 0xa3
 80040f2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80040f6:	f7fc fc4f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80040fa:	2302      	movs	r3, #2
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <Display_stations_list_background+0x180>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800410a:	21cf      	movs	r1, #207	; 0xcf
 800410c:	2025      	movs	r0, #37	; 0x25
 800410e:	f7fc fce5 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8004112:	2302      	movs	r3, #2
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <Display_stations_list_background+0x184>)
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800411e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004122:	21cf      	movs	r1, #207	; 0xcf
 8004124:	20c3      	movs	r0, #195	; 0xc3
 8004126:	f7fc fcd9 	bl	8000adc <ILI9341_Draw_String>

}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	0800e3d4 	.word	0x0800e3d4
 8004134:	0800e3e8 	.word	0x0800e3e8
 8004138:	0800e3ec 	.word	0x0800e3ec
 800413c:	0800e3f0 	.word	0x0800e3f0
 8004140:	0800e3fc 	.word	0x0800e3fc

08004144 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8004144:	b084      	sub	sp, #16
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b087      	sub	sp, #28
 800414a:	af02      	add	r7, sp, #8
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//check if stations list is not empty
	if(_dab_management.total_services)
 8004156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8133 	beq.w	80043c6 <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e12a      	b.n	80043bc <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 8004166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800416a:	4619      	mov	r1, r3
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	4299      	cmp	r1, r3
 8004174:	dc02      	bgt.n	800417c <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	425b      	negs	r3, r3
 800417a:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	2b08      	cmp	r3, #8
 8004184:	dc30      	bgt.n	80041e8 <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	00da      	lsls	r2, r3, #3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	331c      	adds	r3, #28
 8004194:	4619      	mov	r1, r3
 8004196:	2302      	movs	r3, #2
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	4bac      	ldr	r3, [pc, #688]	; (800444c <Display_stations_list_data+0x308>)
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041a6:	2008      	movs	r0, #8
 80041a8:	f7fc fc98 	bl	8000adc <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80041ac:	7bfa      	ldrb	r2, [r7, #15]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00da      	lsls	r2, r3, #3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	331c      	adds	r3, #28
 80041ba:	461c      	mov	r4, r3
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	3301      	adds	r3, #1
 80041c4:	220a      	movs	r2, #10
 80041c6:	49a2      	ldr	r1, [pc, #648]	; (8004450 <Display_stations_list_data+0x30c>)
 80041c8:	4618      	mov	r0, r3
 80041ca:	f009 f8c1 	bl	800d350 <itoa>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2202      	movs	r2, #2
 80041d2:	9201      	str	r2, [sp, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041de:	4621      	mov	r1, r4
 80041e0:	2011      	movs	r0, #17
 80041e2:	f7fc fc7b 	bl	8000adc <ILI9341_Draw_String>
 80041e6:	e01c      	b.n	8004222 <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00da      	lsls	r2, r3, #3
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	331c      	adds	r3, #28
 80041f6:	461c      	mov	r4, r3
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3301      	adds	r3, #1
 8004200:	220a      	movs	r2, #10
 8004202:	4993      	ldr	r1, [pc, #588]	; (8004450 <Display_stations_list_data+0x30c>)
 8004204:	4618      	mov	r0, r3
 8004206:	f009 f8a3 	bl	800d350 <itoa>
 800420a:	4603      	mov	r3, r0
 800420c:	2202      	movs	r2, #2
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800421a:	4621      	mov	r1, r4
 800421c:	2008      	movs	r0, #8
 800421e:	f7fc fc5d 	bl	8000adc <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00da      	lsls	r2, r3, #3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	331c      	adds	r3, #28
 8004230:	4619      	mov	r1, r3
 8004232:	2302      	movs	r3, #2
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	4b87      	ldr	r3, [pc, #540]	; (8004454 <Display_stations_list_data+0x310>)
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800423e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004242:	2018      	movs	r0, #24
 8004244:	f7fc fc4a 	bl	8000adc <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00da      	lsls	r2, r3, #3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	331c      	adds	r3, #28
 8004256:	4619      	mov	r1, r3
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	461a      	mov	r2, r3
 8004260:	2334      	movs	r3, #52	; 0x34
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004268:	4413      	add	r3, r2
 800426a:	461a      	mov	r2, r3
 800426c:	2302      	movs	r3, #2
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800427a:	2022      	movs	r0, #34	; 0x22
 800427c:	f7fc fc2e 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00da      	lsls	r2, r3, #3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	331c      	adds	r3, #28
 800428e:	4619      	mov	r1, r3
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	461a      	mov	r2, r3
 8004298:	2334      	movs	r3, #52	; 0x34
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a0:	4413      	add	r3, r2
 80042a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <Display_stations_list_data+0x314>)
 80042aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ae:	2202      	movs	r2, #2
 80042b0:	9201      	str	r2, [sp, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042bc:	20ab      	movs	r0, #171	; 0xab
 80042be:	f7fc fc0d 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00da      	lsls	r2, r3, #3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	331c      	adds	r3, #28
 80042d0:	461c      	mov	r4, r3
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	2334      	movs	r3, #52	; 0x34
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e2:	4413      	add	r3, r2
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	4a5d      	ldr	r2, [pc, #372]	; (800445c <Display_stations_list_data+0x318>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	220a      	movs	r2, #10
 80042f0:	4957      	ldr	r1, [pc, #348]	; (8004450 <Display_stations_list_data+0x30c>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f009 f82c 	bl	800d350 <itoa>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2202      	movs	r2, #2
 80042fc:	9201      	str	r2, [sp, #4]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004308:	4621      	mov	r1, r4
 800430a:	20ca      	movs	r0, #202	; 0xca
 800430c:	f7fc fbe6 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00da      	lsls	r2, r3, #3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	331c      	adds	r3, #28
 800431e:	4619      	mov	r1, r3
 8004320:	2302      	movs	r3, #2
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <Display_stations_list_data+0x310>)
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800432c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004330:	20e1      	movs	r0, #225	; 0xe1
 8004332:	f7fc fbd3 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00da      	lsls	r2, r3, #3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	331c      	adds	r3, #28
 8004344:	461c      	mov	r4, r3
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	461a      	mov	r2, r3
 800434e:	2334      	movs	r3, #52	; 0x34
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004356:	4413      	add	r3, r2
 8004358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <Display_stations_list_data+0x318>)
 800435c:	fba3 1302 	umull	r1, r3, r3, r2
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	220a      	movs	r2, #10
 800436e:	4938      	ldr	r1, [pc, #224]	; (8004450 <Display_stations_list_data+0x30c>)
 8004370:	4618      	mov	r0, r3
 8004372:	f008 ffed 	bl	800d350 <itoa>
 8004376:	4603      	mov	r3, r0
 8004378:	2202      	movs	r2, #2
 800437a:	9201      	str	r2, [sp, #4]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004386:	4621      	mov	r1, r4
 8004388:	20e8      	movs	r0, #232	; 0xe8
 800438a:	f7fc fba7 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	00da      	lsls	r2, r3, #3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	331c      	adds	r3, #28
 800439c:	4619      	mov	r1, r3
 800439e:	2302      	movs	r3, #2
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <Display_stations_list_data+0x31c>)
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ae:	f240 1003 	movw	r0, #259	; 0x103
 80043b2:	f7fc fb93 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	3301      	adds	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	f67f aed1 	bls.w	8004166 <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 80043c4:	e03b      	b.n	800443e <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 80043c6:	2302      	movs	r3, #2
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <Display_stations_list_data+0x320>)
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d6:	211c      	movs	r1, #28
 80043d8:	2008      	movs	r0, #8
 80043da:	f7fc fb7f 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 80043de:	2302      	movs	r3, #2
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	4b21      	ldr	r3, [pc, #132]	; (8004468 <Display_stations_list_data+0x324>)
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ee:	213f      	movs	r1, #63	; 0x3f
 80043f0:	2008      	movs	r0, #8
 80043f2:	f7fc fb73 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 80043f6:	2302      	movs	r3, #2
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <Display_stations_list_data+0x328>)
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004406:	2162      	movs	r1, #98	; 0x62
 8004408:	2008      	movs	r0, #8
 800440a:	f7fc fb67 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 800440e:	2302      	movs	r3, #2
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <Display_stations_list_data+0x32c>)
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800441a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441e:	2185      	movs	r1, #133	; 0x85
 8004420:	2008      	movs	r0, #8
 8004422:	f7fc fb5b 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 8004426:	2302      	movs	r3, #2
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <Display_stations_list_data+0x330>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004436:	21a8      	movs	r1, #168	; 0xa8
 8004438:	2008      	movs	r0, #8
 800443a:	f7fc fb4f 	bl	8000adc <ILI9341_Draw_String>
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004448:	b004      	add	sp, #16
 800444a:	4770      	bx	lr
 800444c:	0800e2c0 	.word	0x0800e2c0
 8004450:	20006d8c 	.word	0x20006d8c
 8004454:	0800e2d0 	.word	0x0800e2d0
 8004458:	200000ac 	.word	0x200000ac
 800445c:	10624dd3 	.word	0x10624dd3
 8004460:	0800e2d4 	.word	0x0800e2d4
 8004464:	0800e408 	.word	0x0800e408
 8004468:	0800e420 	.word	0x0800e420
 800446c:	0800e438 	.word	0x0800e438
 8004470:	0800e450 	.word	0x0800e450
 8004474:	0800e46c 	.word	0x0800e46c

08004478 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 800447e:	f7ff faad 	bl	80039dc <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2);
 8004482:	2302      	movs	r3, #2
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	4b64      	ldr	r3, [pc, #400]	; (8004618 <Display_scanning_screen_background+0x1a0>)
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2300      	movs	r3, #0
 800448c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004490:	2101      	movs	r1, #1
 8004492:	2005      	movs	r0, #5
 8004494:	f7fc fb22 	bl	8000adc <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004498:	2328      	movs	r3, #40	; 0x28
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	f240 133b 	movw	r3, #315	; 0x13b
 80044a0:	2214      	movs	r2, #20
 80044a2:	2105      	movs	r1, #5
 80044a4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044a8:	f7fc fa76 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 80044ac:	2302      	movs	r3, #2
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	4b5a      	ldr	r3, [pc, #360]	; (800461c <Display_scanning_screen_background+0x1a4>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044bc:	2117      	movs	r1, #23
 80044be:	2050      	movs	r0, #80	; 0x50
 80044c0:	f7fc fb0c 	bl	8000adc <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80044c4:	2341      	movs	r3, #65	; 0x41
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f240 133b 	movw	r3, #315	; 0x13b
 80044cc:	222d      	movs	r2, #45	; 0x2d
 80044ce:	2105      	movs	r1, #5
 80044d0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044d4:	f7fc fa60 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80044d8:	235a      	movs	r3, #90	; 0x5a
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	f240 133b 	movw	r3, #315	; 0x13b
 80044e0:	2246      	movs	r2, #70	; 0x46
 80044e2:	2105      	movs	r1, #5
 80044e4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044e8:	f7fc fa56 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 80044ec:	2302      	movs	r3, #2
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <Display_scanning_screen_background+0x1a8>)
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	2149      	movs	r1, #73	; 0x49
 80044fe:	200a      	movs	r0, #10
 8004500:	f7fc faec 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004504:	2373      	movs	r3, #115	; 0x73
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	f240 133b 	movw	r3, #315	; 0x13b
 800450c:	225f      	movs	r2, #95	; 0x5f
 800450e:	2105      	movs	r1, #5
 8004510:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004514:	f7fc fa40 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8004518:	2302      	movs	r3, #2
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	4b41      	ldr	r3, [pc, #260]	; (8004624 <Display_scanning_screen_background+0x1ac>)
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004528:	2162      	movs	r1, #98	; 0x62
 800452a:	200a      	movs	r0, #10
 800452c:	f7fc fad6 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004530:	238c      	movs	r3, #140	; 0x8c
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	f240 133b 	movw	r3, #315	; 0x13b
 8004538:	2278      	movs	r2, #120	; 0x78
 800453a:	2105      	movs	r1, #5
 800453c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004540:	f7fc fa2a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8004544:	2302      	movs	r3, #2
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	4b37      	ldr	r3, [pc, #220]	; (8004628 <Display_scanning_screen_background+0x1b0>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004554:	217b      	movs	r1, #123	; 0x7b
 8004556:	200a      	movs	r0, #10
 8004558:	f7fc fac0 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 800455c:	23a5      	movs	r3, #165	; 0xa5
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f240 133b 	movw	r3, #315	; 0x13b
 8004564:	2291      	movs	r2, #145	; 0x91
 8004566:	2105      	movs	r1, #5
 8004568:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800456c:	f7fc fa14 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8004570:	2302      	movs	r3, #2
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <Display_scanning_screen_background+0x1b4>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800457c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004580:	2194      	movs	r1, #148	; 0x94
 8004582:	200a      	movs	r0, #10
 8004584:	f7fc faaa 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8004588:	2302      	movs	r3, #2
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	4b28      	ldr	r3, [pc, #160]	; (8004630 <Display_scanning_screen_background+0x1b8>)
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004598:	2194      	movs	r1, #148	; 0x94
 800459a:	2078      	movs	r0, #120	; 0x78
 800459c:	f7fc fa9e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 80045a0:	2302      	movs	r3, #2
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	4b23      	ldr	r3, [pc, #140]	; (8004634 <Display_scanning_screen_background+0x1bc>)
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b0:	2194      	movs	r1, #148	; 0x94
 80045b2:	209e      	movs	r0, #158	; 0x9e
 80045b4:	f7fc fa92 	bl	8000adc <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80045b8:	23be      	movs	r3, #190	; 0xbe
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f240 133b 	movw	r3, #315	; 0x13b
 80045c0:	22aa      	movs	r2, #170	; 0xaa
 80045c2:	2105      	movs	r1, #5
 80045c4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045c8:	f7fc f9e6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 80045cc:	2302      	movs	r3, #2
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <Display_scanning_screen_background+0x1c0>)
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045dc:	21ad      	movs	r1, #173	; 0xad
 80045de:	200a      	movs	r0, #10
 80045e0:	f7fc fa7c 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80045e4:	23eb      	movs	r3, #235	; 0xeb
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	f240 133b 	movw	r3, #315	; 0x13b
 80045ec:	22c3      	movs	r2, #195	; 0xc3
 80045ee:	2105      	movs	r1, #5
 80045f0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80045f4:	f7fc f9d0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 80045f8:	2302      	movs	r3, #2
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <Display_scanning_screen_background+0x1c4>)
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004608:	21cf      	movs	r1, #207	; 0xcf
 800460a:	2082      	movs	r0, #130	; 0x82
 800460c:	f7fc fa66 	bl	8000adc <ILI9341_Draw_String>
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	0800e484 	.word	0x0800e484
 800461c:	0800e494 	.word	0x0800e494
 8004620:	0800e4ac 	.word	0x0800e4ac
 8004624:	0800e4c0 	.word	0x0800e4c0
 8004628:	0800e4d0 	.word	0x0800e4d0
 800462c:	0800e4e0 	.word	0x0800e4e0
 8004630:	0800e2d0 	.word	0x0800e2d0
 8004634:	0800e2d4 	.word	0x0800e2d4
 8004638:	0800e4ec 	.word	0x0800e4ec
 800463c:	0800e4f8 	.word	0x0800e4f8

08004640 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8004640:	b084      	sub	sp, #16
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af02      	add	r7, sp, #8
 8004648:	f107 0c08 	add.w	ip, r7, #8
 800464c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8004650:	7d3b      	ldrb	r3, [r7, #20]
 8004652:	3301      	adds	r3, #1
 8004654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004660:	fb93 f3f2 	sdiv	r3, r3, r2
 8004664:	330a      	adds	r3, #10
 8004666:	461a      	mov	r2, r3
 8004668:	233c      	movs	r3, #60	; 0x3c
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	2232      	movs	r2, #50	; 0x32
 8004670:	210a      	movs	r1, #10
 8004672:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004676:	f7fc f98f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 800467a:	7d3b      	ldrb	r3, [r7, #20]
 800467c:	3301      	adds	r3, #1
 800467e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800468a:	fb93 f3f2 	sdiv	r3, r3, r2
 800468e:	330a      	adds	r3, #10
 8004690:	4619      	mov	r1, r3
 8004692:	233c      	movs	r3, #60	; 0x3c
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	f44f 739b 	mov.w	r3, #310	; 0x136
 800469a:	2232      	movs	r2, #50	; 0x32
 800469c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046a0:	f7fc f97a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 80046a4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80046a8:	220a      	movs	r2, #10
 80046aa:	4954      	ldr	r1, [pc, #336]	; (80047fc <Display_scanning_screen_data+0x1bc>)
 80046ac:	4618      	mov	r0, r3
 80046ae:	f008 fe4f 	bl	800d350 <itoa>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2202      	movs	r2, #2
 80046b6:	9201      	str	r2, [sp, #4]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c2:	2149      	movs	r1, #73	; 0x49
 80046c4:	2091      	movs	r0, #145	; 0x91
 80046c6:	f7fc fa09 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 80046ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80046ce:	220a      	movs	r2, #10
 80046d0:	494a      	ldr	r1, [pc, #296]	; (80047fc <Display_scanning_screen_data+0x1bc>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	f008 fe3c 	bl	800d350 <itoa>
 80046d8:	4603      	mov	r3, r0
 80046da:	2202      	movs	r2, #2
 80046dc:	9201      	str	r2, [sp, #4]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e8:	2162      	movs	r1, #98	; 0x62
 80046ea:	2087      	movs	r0, #135	; 0x87
 80046ec:	f7fc f9f6 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 80046f0:	7d3b      	ldrb	r3, [r7, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	220a      	movs	r2, #10
 80046f6:	4941      	ldr	r1, [pc, #260]	; (80047fc <Display_scanning_screen_data+0x1bc>)
 80046f8:	4618      	mov	r0, r3
 80046fa:	f008 fe29 	bl	800d350 <itoa>
 80046fe:	4603      	mov	r3, r0
 8004700:	2202      	movs	r2, #2
 8004702:	9201      	str	r2, [sp, #4]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800470a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800470e:	217b      	movs	r1, #123	; 0x7b
 8004710:	2076      	movs	r0, #118	; 0x76
 8004712:	f7fc f9e3 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 8004716:	2302      	movs	r3, #2
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <Display_scanning_screen_data+0x1c0>)
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004726:	217b      	movs	r1, #123	; 0x7b
 8004728:	2089      	movs	r0, #137	; 0x89
 800472a:	f7fc f9d7 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 800472e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004732:	220a      	movs	r2, #10
 8004734:	4931      	ldr	r1, [pc, #196]	; (80047fc <Display_scanning_screen_data+0x1bc>)
 8004736:	4618      	mov	r0, r3
 8004738:	f008 fe0a 	bl	800d350 <itoa>
 800473c:	4603      	mov	r3, r0
 800473e:	2202      	movs	r2, #2
 8004740:	9201      	str	r2, [sp, #4]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800474c:	217b      	movs	r1, #123	; 0x7b
 800474e:	2093      	movs	r0, #147	; 0x93
 8004750:	f7fc f9c4 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4a2b      	ldr	r2, [pc, #172]	; (8004804 <Display_scanning_screen_data+0x1c4>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	220a      	movs	r2, #10
 8004760:	4926      	ldr	r1, [pc, #152]	; (80047fc <Display_scanning_screen_data+0x1bc>)
 8004762:	4618      	mov	r0, r3
 8004764:	f008 fdf4 	bl	800d350 <itoa>
 8004768:	4603      	mov	r3, r0
 800476a:	2202      	movs	r2, #2
 800476c:	9201      	str	r2, [sp, #4]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004778:	2194      	movs	r1, #148	; 0x94
 800477a:	205f      	movs	r0, #95	; 0x5f
 800477c:	f7fc f9ae 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <Display_scanning_screen_data+0x1c4>)
 8004784:	fba3 1302 	umull	r1, r3, r3, r2
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	220a      	movs	r2, #10
 8004796:	4919      	ldr	r1, [pc, #100]	; (80047fc <Display_scanning_screen_data+0x1bc>)
 8004798:	4618      	mov	r0, r3
 800479a:	f008 fdd9 	bl	800d350 <itoa>
 800479e:	4603      	mov	r3, r0
 80047a0:	2202      	movs	r2, #2
 80047a2:	9201      	str	r2, [sp, #4]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ae:	2194      	movs	r1, #148	; 0x94
 80047b0:	2081      	movs	r0, #129	; 0x81
 80047b2:	f7fc f993 	bl	8000adc <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 80047b6:	2302      	movs	r3, #2
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <Display_scanning_screen_data+0x1c8>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047c6:	21ad      	movs	r1, #173	; 0xad
 80047c8:	2050      	movs	r0, #80	; 0x50
 80047ca:	f7fc f987 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 80047ce:	7d3b      	ldrb	r3, [r7, #20]
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <Display_scanning_screen_data+0x1cc>)
 80047d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d8:	2202      	movs	r2, #2
 80047da:	9201      	str	r2, [sp, #4]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e6:	21ad      	movs	r1, #173	; 0xad
 80047e8:	2050      	movs	r0, #80	; 0x50
 80047ea:	f7fc f977 	bl	8000adc <ILI9341_Draw_String>
}
 80047ee:	bf00      	nop
 80047f0:	46bd      	mov	sp, r7
 80047f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f6:	b004      	add	sp, #16
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20006d8c 	.word	0x20006d8c
 8004800:	0800e3e8 	.word	0x0800e3e8
 8004804:	10624dd3 	.word	0x10624dd3
 8004808:	0800e500 	.word	0x0800e500
 800480c:	200000ac 	.word	0x200000ac

08004810 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004816:	2328      	movs	r3, #40	; 0x28
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f240 133b 	movw	r3, #315	; 0x13b
 800481e:	2214      	movs	r2, #20
 8004820:	2105      	movs	r1, #5
 8004822:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004826:	f7fc f8b7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 800482a:	2302      	movs	r3, #2
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <Display_scanning_screen_complete+0x64>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800483a:	2117      	movs	r1, #23
 800483c:	2050      	movs	r0, #80	; 0x50
 800483e:	f7fc f94d 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004842:	23eb      	movs	r3, #235	; 0xeb
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	f240 133b 	movw	r3, #315	; 0x13b
 800484a:	22c3      	movs	r2, #195	; 0xc3
 800484c:	2105      	movs	r1, #5
 800484e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004852:	f7fc f8a1 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 8004856:	2302      	movs	r3, #2
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <Display_scanning_screen_complete+0x68>)
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004866:	21cf      	movs	r1, #207	; 0xcf
 8004868:	2082      	movs	r0, #130	; 0x82
 800486a:	f7fc f937 	bl	8000adc <ILI9341_Draw_String>
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	0800e508 	.word	0x0800e508
 8004878:	0800e520 	.word	0x0800e520

0800487c <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af02      	add	r7, sp, #8
	//Clear Screen
	Display_clear_screen();
 8004882:	f7ff f8ab 	bl	80039dc <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2);
 8004886:	2302      	movs	r3, #2
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	4bb4      	ldr	r3, [pc, #720]	; (8004b5c <Display_dab_digrad_status_background+0x2e0>)
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2300      	movs	r3, #0
 8004890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004894:	2101      	movs	r1, #1
 8004896:	2005      	movs	r0, #5
 8004898:	f7fc f920 	bl	8000adc <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 800489c:	2328      	movs	r3, #40	; 0x28
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2369      	movs	r3, #105	; 0x69
 80048a2:	2214      	movs	r2, #20
 80048a4:	2105      	movs	r1, #5
 80048a6:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048aa:	f7fc f875 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80048ae:	2328      	movs	r3, #40	; 0x28
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	23d2      	movs	r3, #210	; 0xd2
 80048b4:	2214      	movs	r2, #20
 80048b6:	216e      	movs	r1, #110	; 0x6e
 80048b8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048bc:	f7fc f86c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80048c0:	2328      	movs	r3, #40	; 0x28
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	f240 133b 	movw	r3, #315	; 0x13b
 80048c8:	2214      	movs	r2, #20
 80048ca:	21d7      	movs	r1, #215	; 0xd7
 80048cc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048d0:	f7fc f862 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80048d4:	2341      	movs	r3, #65	; 0x41
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f240 133b 	movw	r3, #315	; 0x13b
 80048dc:	222d      	movs	r2, #45	; 0x2d
 80048de:	2105      	movs	r1, #5
 80048e0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048e4:	f7fc f858 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 80048e8:	2302      	movs	r3, #2
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	4b9c      	ldr	r3, [pc, #624]	; (8004b60 <Display_dab_digrad_status_background+0x2e4>)
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f8:	2130      	movs	r1, #48	; 0x30
 80048fa:	200a      	movs	r0, #10
 80048fc:	f7fc f8ee 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8004900:	2302      	movs	r3, #2
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	4b97      	ldr	r3, [pc, #604]	; (8004b64 <Display_dab_digrad_status_background+0x2e8>)
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800490c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004910:	2130      	movs	r1, #48	; 0x30
 8004912:	205a      	movs	r0, #90	; 0x5a
 8004914:	f7fc f8e2 	bl	8000adc <ILI9341_Draw_String>

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004918:	235a      	movs	r3, #90	; 0x5a
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	f240 133b 	movw	r3, #315	; 0x13b
 8004920:	2246      	movs	r2, #70	; 0x46
 8004922:	2105      	movs	r1, #5
 8004924:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004928:	f7fc f836 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 800492c:	2302      	movs	r3, #2
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	4b8d      	ldr	r3, [pc, #564]	; (8004b68 <Display_dab_digrad_status_background+0x2ec>)
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800493c:	2149      	movs	r1, #73	; 0x49
 800493e:	200a      	movs	r0, #10
 8004940:	f7fc f8cc 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004944:	2302      	movs	r3, #2
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <Display_dab_digrad_status_background+0x2f0>)
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004954:	2149      	movs	r1, #73	; 0x49
 8004956:	2069      	movs	r0, #105	; 0x69
 8004958:	f7fc f8c0 	bl	8000adc <ILI9341_Draw_String>

	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 800495c:	2373      	movs	r3, #115	; 0x73
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f240 133b 	movw	r3, #315	; 0x13b
 8004964:	225f      	movs	r2, #95	; 0x5f
 8004966:	2105      	movs	r1, #5
 8004968:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800496c:	f7fc f814 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8004970:	2302      	movs	r3, #2
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	4b7e      	ldr	r3, [pc, #504]	; (8004b70 <Display_dab_digrad_status_background+0x2f4>)
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800497c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004980:	2162      	movs	r1, #98	; 0x62
 8004982:	200a      	movs	r0, #10
 8004984:	f7fc f8aa 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8004988:	2302      	movs	r3, #2
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	4b77      	ldr	r3, [pc, #476]	; (8004b6c <Display_dab_digrad_status_background+0x2f0>)
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004998:	2162      	movs	r1, #98	; 0x62
 800499a:	2069      	movs	r0, #105	; 0x69
 800499c:	f7fc f89e 	bl	8000adc <ILI9341_Draw_String>

	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80049a0:	238c      	movs	r3, #140	; 0x8c
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	f240 133b 	movw	r3, #315	; 0x13b
 80049a8:	2278      	movs	r2, #120	; 0x78
 80049aa:	2105      	movs	r1, #5
 80049ac:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049b0:	f7fb fff2 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 80049b4:	2302      	movs	r3, #2
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	4b6e      	ldr	r3, [pc, #440]	; (8004b74 <Display_dab_digrad_status_background+0x2f8>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049c4:	217b      	movs	r1, #123	; 0x7b
 80049c6:	200a      	movs	r0, #10
 80049c8:	f7fc f888 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 80049cc:	2302      	movs	r3, #2
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	4b69      	ldr	r3, [pc, #420]	; (8004b78 <Display_dab_digrad_status_background+0x2fc>)
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049dc:	217b      	movs	r1, #123	; 0x7b
 80049de:	206e      	movs	r0, #110	; 0x6e
 80049e0:	f7fc f87c 	bl	8000adc <ILI9341_Draw_String>

	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 80049e4:	23a5      	movs	r3, #165	; 0xa5
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	f240 133b 	movw	r3, #315	; 0x13b
 80049ec:	2291      	movs	r2, #145	; 0x91
 80049ee:	2105      	movs	r1, #5
 80049f0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049f4:	f7fb ffd0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 80049f8:	2302      	movs	r3, #2
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	4b5f      	ldr	r3, [pc, #380]	; (8004b7c <Display_dab_digrad_status_background+0x300>)
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a08:	2194      	movs	r1, #148	; 0x94
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	f7fc f866 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004a10:	2302      	movs	r3, #2
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	4b5a      	ldr	r3, [pc, #360]	; (8004b80 <Display_dab_digrad_status_background+0x304>)
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a20:	2194      	movs	r1, #148	; 0x94
 8004a22:	2071      	movs	r0, #113	; 0x71
 8004a24:	f7fc f85a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004a28:	2302      	movs	r3, #2
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <Display_dab_digrad_status_background+0x308>)
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a38:	2194      	movs	r1, #148	; 0x94
 8004a3a:	2094      	movs	r0, #148	; 0x94
 8004a3c:	f7fc f84e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004a40:	2302      	movs	r3, #2
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <Display_dab_digrad_status_background+0x30c>)
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a50:	2194      	movs	r1, #148	; 0x94
 8004a52:	20b7      	movs	r0, #183	; 0xb7
 8004a54:	f7fc f842 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004a58:	2302      	movs	r3, #2
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	4b4b      	ldr	r3, [pc, #300]	; (8004b8c <Display_dab_digrad_status_background+0x310>)
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a68:	2194      	movs	r1, #148	; 0x94
 8004a6a:	20db      	movs	r0, #219	; 0xdb
 8004a6c:	f7fc f836 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004a70:	2302      	movs	r3, #2
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <Display_dab_digrad_status_background+0x314>)
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a80:	2194      	movs	r1, #148	; 0x94
 8004a82:	f240 101b 	movw	r0, #283	; 0x11b
 8004a86:	f7fc f829 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <Display_dab_digrad_status_background+0x318>)
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9a:	2194      	movs	r1, #148	; 0x94
 8004a9c:	f240 1025 	movw	r0, #293	; 0x125
 8004aa0:	f7fc f81c 	bl	8000adc <ILI9341_Draw_String>

	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004aa4:	23be      	movs	r3, #190	; 0xbe
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	f240 133b 	movw	r3, #315	; 0x13b
 8004aac:	22aa      	movs	r2, #170	; 0xaa
 8004aae:	2105      	movs	r1, #5
 8004ab0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004ab4:	f7fb ff70 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004ab8:	2302      	movs	r3, #2
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <Display_dab_digrad_status_background+0x31c>)
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac8:	21ad      	movs	r1, #173	; 0xad
 8004aca:	200a      	movs	r0, #10
 8004acc:	f7fc f806 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <Display_dab_digrad_status_background+0x320>)
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae0:	21ad      	movs	r1, #173	; 0xad
 8004ae2:	207d      	movs	r0, #125	; 0x7d
 8004ae4:	f7fb fffa 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004ae8:	2302      	movs	r3, #2
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <Display_dab_digrad_status_background+0x324>)
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af8:	21ad      	movs	r1, #173	; 0xad
 8004afa:	20b4      	movs	r0, #180	; 0xb4
 8004afc:	f7fb ffee 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004b00:	23eb      	movs	r3, #235	; 0xeb
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	239d      	movs	r3, #157	; 0x9d
 8004b06:	22c3      	movs	r2, #195	; 0xc3
 8004b08:	2105      	movs	r1, #5
 8004b0a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b0e:	f7fb ff43 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004b12:	23eb      	movs	r3, #235	; 0xeb
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	f240 133b 	movw	r3, #315	; 0x13b
 8004b1a:	22c3      	movs	r2, #195	; 0xc3
 8004b1c:	21a3      	movs	r1, #163	; 0xa3
 8004b1e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b22:	f7fb ff39 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004b26:	2302      	movs	r3, #2
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <Display_dab_digrad_status_background+0x328>)
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b36:	21cf      	movs	r1, #207	; 0xcf
 8004b38:	2023      	movs	r0, #35	; 0x23
 8004b3a:	f7fb ffcf 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004b3e:	2302      	movs	r3, #2
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <Display_dab_digrad_status_background+0x32c>)
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b4e:	21cf      	movs	r1, #207	; 0xcf
 8004b50:	20cd      	movs	r0, #205	; 0xcd
 8004b52:	f7fb ffc3 	bl	8000adc <ILI9341_Draw_String>
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	0800e528 	.word	0x0800e528
 8004b60:	0800e53c 	.word	0x0800e53c
 8004b64:	0800e544 	.word	0x0800e544
 8004b68:	0800e54c 	.word	0x0800e54c
 8004b6c:	0800e550 	.word	0x0800e550
 8004b70:	0800e554 	.word	0x0800e554
 8004b74:	0800e558 	.word	0x0800e558
 8004b78:	0800e560 	.word	0x0800e560
 8004b7c:	0800e564 	.word	0x0800e564
 8004b80:	0800e2d0 	.word	0x0800e2d0
 8004b84:	0800e2d4 	.word	0x0800e2d4
 8004b88:	0800e570 	.word	0x0800e570
 8004b8c:	0800e578 	.word	0x0800e578
 8004b90:	0800e3e8 	.word	0x0800e3e8
 8004b94:	0800e580 	.word	0x0800e580
 8004b98:	0800e584 	.word	0x0800e584
 8004b9c:	0800e590 	.word	0x0800e590
 8004ba0:	0800e594 	.word	0x0800e594
 8004ba4:	0800e2b0 	.word	0x0800e2b0
 8004ba8:	0800e2a4 	.word	0x0800e2a4

08004bac <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004bac:	b084      	sub	sp, #16
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af02      	add	r7, sp, #8
 8004bb4:	f107 0c18 	add.w	ip, r7, #24
 8004bb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004bbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	23fa      	movs	r3, #250	; 0xfa
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <Display_dab_digrad_status_data+0xe0>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <Display_dab_digrad_status_data+0xe0>)
 8004bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 8004bea:	7e7b      	ldrb	r3, [r7, #25]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	4b25      	ldr	r3, [pc, #148]	; (8004c90 <Display_dab_digrad_status_data+0xe4>)
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c02:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c06:	2117      	movs	r1, #23
 8004c08:	2023      	movs	r0, #35	; 0x23
 8004c0a:	f7fb ff67 	bl	8000adc <ILI9341_Draw_String>
 8004c0e:	e00b      	b.n	8004c28 <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004c10:	2302      	movs	r3, #2
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <Display_dab_digrad_status_data+0xe4>)
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c1c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c20:	2117      	movs	r1, #23
 8004c22:	2023      	movs	r0, #35	; 0x23
 8004c24:	f7fb ff5a 	bl	8000adc <ILI9341_Draw_String>

	//ACQ
	if(digrad_status.acq)
 8004c28:	7e7b      	ldrb	r3, [r7, #25]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00c      	beq.n	8004c4e <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004c34:	2302      	movs	r3, #2
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <Display_dab_digrad_status_data+0xe8>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c40:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c44:	2117      	movs	r1, #23
 8004c46:	2085      	movs	r0, #133	; 0x85
 8004c48:	f7fb ff48 	bl	8000adc <ILI9341_Draw_String>
 8004c4c:	e00b      	b.n	8004c66 <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004c4e:	2302      	movs	r3, #2
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <Display_dab_digrad_status_data+0xe8>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c5a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c5e:	2117      	movs	r1, #23
 8004c60:	2085      	movs	r0, #133	; 0x85
 8004c62:	f7fb ff3b 	bl	8000adc <ILI9341_Draw_String>

	//FIC_ERROR
	if(digrad_status.fic_err)
 8004c66:	7e7b      	ldrb	r3, [r7, #25]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d014      	beq.n	8004c9c <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004c72:	2302      	movs	r3, #2
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <Display_dab_digrad_status_data+0xec>)
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c7e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c82:	2117      	movs	r1, #23
 8004c84:	20e4      	movs	r0, #228	; 0xe4
 8004c86:	f7fb ff29 	bl	8000adc <ILI9341_Draw_String>
 8004c8a:	e013      	b.n	8004cb4 <Display_dab_digrad_status_data+0x108>
 8004c8c:	10624dd3 	.word	0x10624dd3
 8004c90:	0800e598 	.word	0x0800e598
 8004c94:	0800e5a0 	.word	0x0800e5a0
 8004c98:	0800e5a8 	.word	0x0800e5a8
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	4bb6      	ldr	r3, [pc, #728]	; (8004f7c <Display_dab_digrad_status_data+0x3d0>)
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ca8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cac:	2117      	movs	r1, #23
 8004cae:	20e4      	movs	r0, #228	; 0xe4
 8004cb0:	f7fb ff14 	bl	8000adc <ILI9341_Draw_String>

	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 8004cb4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cb8:	2b0d      	cmp	r3, #13
 8004cba:	dc02      	bgt.n	8004cc2 <Display_dab_digrad_status_data+0x116>
 8004cbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cc0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004cc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cc6:	2b1a      	cmp	r3, #26
 8004cc8:	dc06      	bgt.n	8004cd8 <Display_dab_digrad_status_data+0x12c>
 8004cca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cce:	2b0d      	cmp	r3, #13
 8004cd0:	dd02      	ble.n	8004cd8 <Display_dab_digrad_status_data+0x12c>
 8004cd2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004cd6:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004cd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cdc:	2b27      	cmp	r3, #39	; 0x27
 8004cde:	dc06      	bgt.n	8004cee <Display_dab_digrad_status_data+0x142>
 8004ce0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004ce4:	2b1a      	cmp	r3, #26
 8004ce6:	dd02      	ble.n	8004cee <Display_dab_digrad_status_data+0x142>
 8004ce8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004cec:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004cee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cf2:	2b34      	cmp	r3, #52	; 0x34
 8004cf4:	dc06      	bgt.n	8004d04 <Display_dab_digrad_status_data+0x158>
 8004cf6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cfa:	2b27      	cmp	r3, #39	; 0x27
 8004cfc:	dd02      	ble.n	8004d04 <Display_dab_digrad_status_data+0x158>
 8004cfe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d02:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 8004d04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d08:	2b34      	cmp	r3, #52	; 0x34
 8004d0a:	dd02      	ble.n	8004d12 <Display_dab_digrad_status_data+0x166>
 8004d0c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d10:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004d12:	2302      	movs	r3, #2
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	4b9a      	ldr	r3, [pc, #616]	; (8004f80 <Display_dab_digrad_status_data+0x3d4>)
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d22:	2130      	movs	r1, #48	; 0x30
 8004d24:	2032      	movs	r0, #50	; 0x32
 8004d26:	f7fb fed9 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004d2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d2e:	220a      	movs	r2, #10
 8004d30:	4994      	ldr	r1, [pc, #592]	; (8004f84 <Display_dab_digrad_status_data+0x3d8>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f008 fb0c 	bl	800d350 <itoa>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d48:	2130      	movs	r1, #48	; 0x30
 8004d4a:	2032      	movs	r0, #50	; 0x32
 8004d4c:	f7fb fec6 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004d50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d54:	461a      	mov	r2, r3
 8004d56:	23b4      	movs	r3, #180	; 0xb4
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da00      	bge.n	8004d62 <Display_dab_digrad_status_data+0x1b6>
 8004d60:	333f      	adds	r3, #63	; 0x3f
 8004d62:	119b      	asrs	r3, r3, #6
 8004d64:	3382      	adds	r3, #130	; 0x82
 8004d66:	461a      	mov	r2, r3
 8004d68:	233c      	movs	r3, #60	; 0x3c
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	2232      	movs	r2, #50	; 0x32
 8004d70:	2182      	movs	r1, #130	; 0x82
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7fb fe10 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004d78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	23b4      	movs	r3, #180	; 0xb4
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	da00      	bge.n	8004d8a <Display_dab_digrad_status_data+0x1de>
 8004d88:	333f      	adds	r3, #63	; 0x3f
 8004d8a:	119b      	asrs	r3, r3, #6
 8004d8c:	3382      	adds	r3, #130	; 0x82
 8004d8e:	4619      	mov	r1, r3
 8004d90:	233c      	movs	r3, #60	; 0x3c
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004d98:	2232      	movs	r2, #50	; 0x32
 8004d9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d9e:	f7fb fdfb 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 8004da2:	7efb      	ldrb	r3, [r7, #27]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d802      	bhi.n	8004dae <Display_dab_digrad_status_data+0x202>
 8004da8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dac:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004dae:	7efb      	ldrb	r3, [r7, #27]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d805      	bhi.n	8004dc0 <Display_dab_digrad_status_data+0x214>
 8004db4:	7efb      	ldrb	r3, [r7, #27]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d902      	bls.n	8004dc0 <Display_dab_digrad_status_data+0x214>
 8004dba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004dbe:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004dc0:	7efb      	ldrb	r3, [r7, #27]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d805      	bhi.n	8004dd2 <Display_dab_digrad_status_data+0x226>
 8004dc6:	7efb      	ldrb	r3, [r7, #27]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d902      	bls.n	8004dd2 <Display_dab_digrad_status_data+0x226>
 8004dcc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dd0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004dd2:	7efb      	ldrb	r3, [r7, #27]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d805      	bhi.n	8004de4 <Display_dab_digrad_status_data+0x238>
 8004dd8:	7efb      	ldrb	r3, [r7, #27]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d902      	bls.n	8004de4 <Display_dab_digrad_status_data+0x238>
 8004dde:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004de2:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 8004de4:	7efb      	ldrb	r3, [r7, #27]
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d902      	bls.n	8004df0 <Display_dab_digrad_status_data+0x244>
 8004dea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dee:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004df0:	2302      	movs	r3, #2
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	4b62      	ldr	r3, [pc, #392]	; (8004f80 <Display_dab_digrad_status_data+0x3d4>)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e00:	2149      	movs	r1, #73	; 0x49
 8004e02:	2032      	movs	r0, #50	; 0x32
 8004e04:	f7fb fe6a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004e08:	7efb      	ldrb	r3, [r7, #27]
 8004e0a:	220a      	movs	r2, #10
 8004e0c:	495d      	ldr	r1, [pc, #372]	; (8004f84 <Display_dab_digrad_status_data+0x3d8>)
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f008 fa9e 	bl	800d350 <itoa>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2202      	movs	r2, #2
 8004e18:	9201      	str	r2, [sp, #4]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e24:	2149      	movs	r1, #73	; 0x49
 8004e26:	2032      	movs	r0, #50	; 0x32
 8004e28:	f7fb fe58 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004e2c:	7efb      	ldrb	r3, [r7, #27]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4613      	mov	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	3382      	adds	r3, #130	; 0x82
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2355      	movs	r3, #85	; 0x55
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	224b      	movs	r2, #75	; 0x4b
 8004e42:	2182      	movs	r1, #130	; 0x82
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7fb fda7 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	3382      	adds	r3, #130	; 0x82
 8004e56:	4619      	mov	r1, r3
 8004e58:	2355      	movs	r3, #85	; 0x55
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004e60:	224b      	movs	r2, #75	; 0x4b
 8004e62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e66:	f7fb fd97 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 8004e6a:	7f7b      	ldrb	r3, [r7, #29]
 8004e6c:	2b0b      	cmp	r3, #11
 8004e6e:	d802      	bhi.n	8004e76 <Display_dab_digrad_status_data+0x2ca>
 8004e70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e74:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004e76:	7f7b      	ldrb	r3, [r7, #29]
 8004e78:	2b16      	cmp	r3, #22
 8004e7a:	d805      	bhi.n	8004e88 <Display_dab_digrad_status_data+0x2dc>
 8004e7c:	7f7b      	ldrb	r3, [r7, #29]
 8004e7e:	2b0b      	cmp	r3, #11
 8004e80:	d902      	bls.n	8004e88 <Display_dab_digrad_status_data+0x2dc>
 8004e82:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e86:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004e88:	7f7b      	ldrb	r3, [r7, #29]
 8004e8a:	2b21      	cmp	r3, #33	; 0x21
 8004e8c:	d805      	bhi.n	8004e9a <Display_dab_digrad_status_data+0x2ee>
 8004e8e:	7f7b      	ldrb	r3, [r7, #29]
 8004e90:	2b16      	cmp	r3, #22
 8004e92:	d902      	bls.n	8004e9a <Display_dab_digrad_status_data+0x2ee>
 8004e94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e98:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004e9a:	7f7b      	ldrb	r3, [r7, #29]
 8004e9c:	2b2c      	cmp	r3, #44	; 0x2c
 8004e9e:	d805      	bhi.n	8004eac <Display_dab_digrad_status_data+0x300>
 8004ea0:	7f7b      	ldrb	r3, [r7, #29]
 8004ea2:	2b21      	cmp	r3, #33	; 0x21
 8004ea4:	d902      	bls.n	8004eac <Display_dab_digrad_status_data+0x300>
 8004ea6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eaa:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 8004eac:	7f7b      	ldrb	r3, [r7, #29]
 8004eae:	2b2c      	cmp	r3, #44	; 0x2c
 8004eb0:	d902      	bls.n	8004eb8 <Display_dab_digrad_status_data+0x30c>
 8004eb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004eb6:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004eb8:	2302      	movs	r3, #2
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <Display_dab_digrad_status_data+0x3d4>)
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec8:	2162      	movs	r1, #98	; 0x62
 8004eca:	2032      	movs	r0, #50	; 0x32
 8004ecc:	f7fb fe06 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004ed0:	7f7b      	ldrb	r3, [r7, #29]
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	492b      	ldr	r1, [pc, #172]	; (8004f84 <Display_dab_digrad_status_data+0x3d8>)
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f008 fa3a 	bl	800d350 <itoa>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2202      	movs	r2, #2
 8004ee0:	9201      	str	r2, [sp, #4]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eec:	2162      	movs	r1, #98	; 0x62
 8004eee:	2032      	movs	r0, #50	; 0x32
 8004ef0:	f7fb fdf4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004ef4:	7f7b      	ldrb	r3, [r7, #29]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	23b4      	movs	r3, #180	; 0xb4
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <Display_dab_digrad_status_data+0x3dc>)
 8004f00:	fb82 1203 	smull	r1, r2, r2, r3
 8004f04:	1112      	asrs	r2, r2, #4
 8004f06:	17db      	asrs	r3, r3, #31
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	3382      	adds	r3, #130	; 0x82
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	236e      	movs	r3, #110	; 0x6e
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	2264      	movs	r2, #100	; 0x64
 8004f16:	2182      	movs	r1, #130	; 0x82
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7fb fd3d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004f1e:	7f7b      	ldrb	r3, [r7, #29]
 8004f20:	461a      	mov	r2, r3
 8004f22:	23b4      	movs	r3, #180	; 0xb4
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <Display_dab_digrad_status_data+0x3dc>)
 8004f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8004f2e:	1112      	asrs	r2, r2, #4
 8004f30:	17db      	asrs	r3, r3, #31
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	3382      	adds	r3, #130	; 0x82
 8004f36:	4619      	mov	r1, r3
 8004f38:	236e      	movs	r3, #110	; 0x6e
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004f40:	2264      	movs	r2, #100	; 0x64
 8004f42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004f46:	f7fb fd27 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 8004f4a:	7f3b      	ldrb	r3, [r7, #28]
 8004f4c:	2b14      	cmp	r3, #20
 8004f4e:	d802      	bhi.n	8004f56 <Display_dab_digrad_status_data+0x3aa>
 8004f50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f54:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004f56:	7f3b      	ldrb	r3, [r7, #28]
 8004f58:	2b28      	cmp	r3, #40	; 0x28
 8004f5a:	d805      	bhi.n	8004f68 <Display_dab_digrad_status_data+0x3bc>
 8004f5c:	7f3b      	ldrb	r3, [r7, #28]
 8004f5e:	2b14      	cmp	r3, #20
 8004f60:	d902      	bls.n	8004f68 <Display_dab_digrad_status_data+0x3bc>
 8004f62:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f66:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004f68:	7f3b      	ldrb	r3, [r7, #28]
 8004f6a:	2b3c      	cmp	r3, #60	; 0x3c
 8004f6c:	d80e      	bhi.n	8004f8c <Display_dab_digrad_status_data+0x3e0>
 8004f6e:	7f3b      	ldrb	r3, [r7, #28]
 8004f70:	2b28      	cmp	r3, #40	; 0x28
 8004f72:	d90b      	bls.n	8004f8c <Display_dab_digrad_status_data+0x3e0>
 8004f74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e007      	b.n	8004f8c <Display_dab_digrad_status_data+0x3e0>
 8004f7c:	0800e5a8 	.word	0x0800e5a8
 8004f80:	0800e5b4 	.word	0x0800e5b4
 8004f84:	20006d8c 	.word	0x20006d8c
 8004f88:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8004f8c:	7f3b      	ldrb	r3, [r7, #28]
 8004f8e:	2b50      	cmp	r3, #80	; 0x50
 8004f90:	d805      	bhi.n	8004f9e <Display_dab_digrad_status_data+0x3f2>
 8004f92:	7f3b      	ldrb	r3, [r7, #28]
 8004f94:	2b3c      	cmp	r3, #60	; 0x3c
 8004f96:	d902      	bls.n	8004f9e <Display_dab_digrad_status_data+0x3f2>
 8004f98:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f9c:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 8004f9e:	7f3b      	ldrb	r3, [r7, #28]
 8004fa0:	2b50      	cmp	r3, #80	; 0x50
 8004fa2:	d902      	bls.n	8004faa <Display_dab_digrad_status_data+0x3fe>
 8004fa4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fa8:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8004faa:	2302      	movs	r3, #2
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	4ba9      	ldr	r3, [pc, #676]	; (8005254 <Display_dab_digrad_status_data+0x6a8>)
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fba:	217b      	movs	r1, #123	; 0x7b
 8004fbc:	204b      	movs	r0, #75	; 0x4b
 8004fbe:	f7fb fd8d 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8004fc2:	7f3b      	ldrb	r3, [r7, #28]
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	49a4      	ldr	r1, [pc, #656]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f008 f9c1 	bl	800d350 <itoa>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	9201      	str	r2, [sp, #4]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fde:	217b      	movs	r1, #123	; 0x7b
 8004fe0:	204b      	movs	r0, #75	; 0x4b
 8004fe2:	f7fb fd7b 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8004fe6:	7f3b      	ldrb	r3, [r7, #28]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	23b4      	movs	r3, #180	; 0xb4
 8004fec:	fb02 f303 	mul.w	r3, r2, r3
 8004ff0:	4a9a      	ldr	r2, [pc, #616]	; (800525c <Display_dab_digrad_status_data+0x6b0>)
 8004ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ff6:	1152      	asrs	r2, r2, #5
 8004ff8:	17db      	asrs	r3, r3, #31
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	3382      	adds	r3, #130	; 0x82
 8004ffe:	461a      	mov	r2, r3
 8005000:	2387      	movs	r3, #135	; 0x87
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	227d      	movs	r2, #125	; 0x7d
 8005008:	2182      	movs	r1, #130	; 0x82
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7fb fcc4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8005010:	7f3b      	ldrb	r3, [r7, #28]
 8005012:	461a      	mov	r2, r3
 8005014:	23b4      	movs	r3, #180	; 0xb4
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	4a90      	ldr	r2, [pc, #576]	; (800525c <Display_dab_digrad_status_data+0x6b0>)
 800501c:	fb82 1203 	smull	r1, r2, r2, r3
 8005020:	1152      	asrs	r2, r2, #5
 8005022:	17db      	asrs	r3, r3, #31
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	3382      	adds	r3, #130	; 0x82
 8005028:	4619      	mov	r1, r3
 800502a:	2387      	movs	r3, #135	; 0x87
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8005032:	227d      	movs	r2, #125	; 0x7d
 8005034:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005038:	f7fb fcae 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	4a88      	ldr	r2, [pc, #544]	; (8005260 <Display_dab_digrad_status_data+0x6b4>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	099b      	lsrs	r3, r3, #6
 8005046:	220a      	movs	r2, #10
 8005048:	4983      	ldr	r1, [pc, #524]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 800504a:	4618      	mov	r0, r3
 800504c:	f008 f980 	bl	800d350 <itoa>
 8005050:	4603      	mov	r3, r0
 8005052:	2202      	movs	r2, #2
 8005054:	9201      	str	r2, [sp, #4]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800505c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005060:	2194      	movs	r1, #148	; 0x94
 8005062:	205b      	movs	r0, #91	; 0x5b
 8005064:	f7fb fd3a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8005068:	6a3a      	ldr	r2, [r7, #32]
 800506a:	4b7d      	ldr	r3, [pc, #500]	; (8005260 <Display_dab_digrad_status_data+0x6b4>)
 800506c:	fba3 1302 	umull	r1, r3, r3, r2
 8005070:	099b      	lsrs	r3, r3, #6
 8005072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	220a      	movs	r2, #10
 800507e:	4976      	ldr	r1, [pc, #472]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 8005080:	4618      	mov	r0, r3
 8005082:	f008 f965 	bl	800d350 <itoa>
 8005086:	4603      	mov	r3, r0
 8005088:	2202      	movs	r2, #2
 800508a:	9201      	str	r2, [sp, #4]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005096:	2194      	movs	r1, #148	; 0x94
 8005098:	2078      	movs	r0, #120	; 0x78
 800509a:	f7fb fd1f 	bl	8000adc <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 800509e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d821      	bhi.n	80050ea <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 80050a6:	2302      	movs	r3, #2
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	4b6e      	ldr	r3, [pc, #440]	; (8005264 <Display_dab_digrad_status_data+0x6b8>)
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b6:	2194      	movs	r1, #148	; 0x94
 80050b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80050bc:	f7fb fd0e 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 80050c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050c4:	220a      	movs	r2, #10
 80050c6:	4964      	ldr	r1, [pc, #400]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 80050c8:	4618      	mov	r0, r3
 80050ca:	f008 f941 	bl	800d350 <itoa>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2202      	movs	r2, #2
 80050d2:	9201      	str	r2, [sp, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050de:	2194      	movs	r1, #148	; 0x94
 80050e0:	f240 1011 	movw	r0, #273	; 0x111
 80050e4:	f7fb fcfa 	bl	8000adc <ILI9341_Draw_String>
 80050e8:	e013      	b.n	8005112 <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 80050ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050ee:	220a      	movs	r2, #10
 80050f0:	4959      	ldr	r1, [pc, #356]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f008 f92c 	bl	800d350 <itoa>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2202      	movs	r2, #2
 80050fc:	9201      	str	r2, [sp, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005108:	2194      	movs	r1, #148	; 0x94
 800510a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800510e:	f7fb fce5 	bl	8000adc <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	2b09      	cmp	r3, #9
 8005116:	d81d      	bhi.n	8005154 <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8005118:	2302      	movs	r3, #2
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	4b52      	ldr	r3, [pc, #328]	; (8005268 <Display_dab_digrad_status_data+0x6bc>)
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005128:	21ad      	movs	r1, #173	; 0xad
 800512a:	204f      	movs	r0, #79	; 0x4f
 800512c:	f7fb fcd6 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	220a      	movs	r2, #10
 8005134:	4948      	ldr	r1, [pc, #288]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 8005136:	4618      	mov	r0, r3
 8005138:	f008 f90a 	bl	800d350 <itoa>
 800513c:	4603      	mov	r3, r0
 800513e:	2202      	movs	r2, #2
 8005140:	9201      	str	r2, [sp, #4]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800514c:	21ad      	movs	r1, #173	; 0xad
 800514e:	2057      	movs	r0, #87	; 0x57
 8005150:	f7fb fcc4 	bl	8000adc <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	2b09      	cmp	r3, #9
 8005158:	d911      	bls.n	800517e <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	220a      	movs	r2, #10
 800515e:	493e      	ldr	r1, [pc, #248]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 8005160:	4618      	mov	r0, r3
 8005162:	f008 f8f5 	bl	800d350 <itoa>
 8005166:	4603      	mov	r3, r0
 8005168:	2202      	movs	r2, #2
 800516a:	9201      	str	r2, [sp, #4]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005176:	21ad      	movs	r1, #173	; 0xad
 8005178:	204f      	movs	r0, #79	; 0x4f
 800517a:	f7fb fcaf 	bl	8000adc <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 800517e:	2302      	movs	r3, #2
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	4b3a      	ldr	r3, [pc, #232]	; (800526c <Display_dab_digrad_status_data+0x6c0>)
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800518a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800518e:	21ad      	movs	r1, #173	; 0xad
 8005190:	205f      	movs	r0, #95	; 0x5f
 8005192:	f7fb fca3 	bl	8000adc <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 8005196:	88bb      	ldrh	r3, [r7, #4]
 8005198:	f240 22ee 	movw	r2, #750	; 0x2ee
 800519c:	4293      	cmp	r3, r2
 800519e:	d023      	beq.n	80051e8 <Display_dab_digrad_status_data+0x63c>
 80051a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80051a4:	4293      	cmp	r3, r2
 80051a6:	dc2c      	bgt.n	8005202 <Display_dab_digrad_status_data+0x656>
 80051a8:	2bfa      	cmp	r3, #250	; 0xfa
 80051aa:	d003      	beq.n	80051b4 <Display_dab_digrad_status_data+0x608>
 80051ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051b0:	d00d      	beq.n	80051ce <Display_dab_digrad_status_data+0x622>
 80051b2:	e026      	b.n	8005202 <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 80051b4:	2302      	movs	r3, #2
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <Display_dab_digrad_status_data+0x6c4>)
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c4:	21ad      	movs	r1, #173	; 0xad
 80051c6:	2067      	movs	r0, #103	; 0x67
 80051c8:	f7fb fc88 	bl	8000adc <ILI9341_Draw_String>
		break;
 80051cc:	e026      	b.n	800521c <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 80051ce:	2302      	movs	r3, #2
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	4b28      	ldr	r3, [pc, #160]	; (8005274 <Display_dab_digrad_status_data+0x6c8>)
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051de:	21ad      	movs	r1, #173	; 0xad
 80051e0:	2067      	movs	r0, #103	; 0x67
 80051e2:	f7fb fc7b 	bl	8000adc <ILI9341_Draw_String>
		break;
 80051e6:	e019      	b.n	800521c <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 80051e8:	2302      	movs	r3, #2
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	4b22      	ldr	r3, [pc, #136]	; (8005278 <Display_dab_digrad_status_data+0x6cc>)
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f8:	21ad      	movs	r1, #173	; 0xad
 80051fa:	2067      	movs	r0, #103	; 0x67
 80051fc:	f7fb fc6e 	bl	8000adc <ILI9341_Draw_String>
		break;
 8005200:	e00c      	b.n	800521c <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8005202:	2302      	movs	r3, #2
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <Display_dab_digrad_status_data+0x6d0>)
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800520e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005212:	21ad      	movs	r1, #173	; 0xad
 8005214:	2067      	movs	r0, #103	; 0x67
 8005216:	f7fb fc61 	bl	8000adc <ILI9341_Draw_String>
		break;
 800521a:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 800521c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	220a      	movs	r2, #10
 8005226:	490c      	ldr	r1, [pc, #48]	; (8005258 <Display_dab_digrad_status_data+0x6ac>)
 8005228:	4618      	mov	r0, r3
 800522a:	f008 f891 	bl	800d350 <itoa>
 800522e:	4603      	mov	r3, r0
 8005230:	2202      	movs	r2, #2
 8005232:	9201      	str	r2, [sp, #4]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800523a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523e:	21ad      	movs	r1, #173	; 0xad
 8005240:	20d7      	movs	r0, #215	; 0xd7
 8005242:	f7fb fc4b 	bl	8000adc <ILI9341_Draw_String>
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr
 8005254:	0800e5b4 	.word	0x0800e5b4
 8005258:	20006d8c 	.word	0x20006d8c
 800525c:	51eb851f 	.word	0x51eb851f
 8005260:	10624dd3 	.word	0x10624dd3
 8005264:	0800e5b8 	.word	0x0800e5b8
 8005268:	0800e2c0 	.word	0x0800e2c0
 800526c:	0800e2d0 	.word	0x0800e2d0
 8005270:	0800e5bc 	.word	0x0800e5bc
 8005274:	0800e5c0 	.word	0x0800e5c0
 8005278:	0800e5c4 	.word	0x0800e5c4
 800527c:	0800e5c8 	.word	0x0800e5c8

08005280 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 8005286:	f7fe fba9 	bl	80039dc <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2);
 800528a:	2302      	movs	r3, #2
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <Display_settings_screen_background+0x1c4>)
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	2300      	movs	r3, #0
 8005294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005298:	2101      	movs	r1, #1
 800529a:	2005      	movs	r0, #5
 800529c:	f7fb fc1e 	bl	8000adc <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 80052a0:	2337      	movs	r3, #55	; 0x37
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	f240 133b 	movw	r3, #315	; 0x13b
 80052a8:	2214      	movs	r2, #20
 80052aa:	2105      	movs	r1, #5
 80052ac:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80052b0:	f7fb fb72 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 80052b4:	2302      	movs	r3, #2
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	4b63      	ldr	r3, [pc, #396]	; (8005448 <Display_settings_screen_background+0x1c8>)
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80052c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052c4:	2116      	movs	r1, #22
 80052c6:	2037      	movs	r0, #55	; 0x37
 80052c8:	f7fb fc08 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 80052cc:	2302      	movs	r3, #2
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	4b5e      	ldr	r3, [pc, #376]	; (800544c <Display_settings_screen_background+0x1cc>)
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80052d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052dc:	2116      	movs	r1, #22
 80052de:	20ce      	movs	r0, #206	; 0xce
 80052e0:	f7fb fbfc 	bl	8000adc <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 80052e4:	2364      	movs	r3, #100	; 0x64
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	239d      	movs	r3, #157	; 0x9d
 80052ea:	223c      	movs	r2, #60	; 0x3c
 80052ec:	2105      	movs	r1, #5
 80052ee:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80052f2:	f7fb fb51 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 80052f6:	2364      	movs	r3, #100	; 0x64
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f240 133b 	movw	r3, #315	; 0x13b
 80052fe:	223c      	movs	r2, #60	; 0x3c
 8005300:	21a3      	movs	r1, #163	; 0xa3
 8005302:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005306:	f7fb fb47 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 800530a:	2302      	movs	r3, #2
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	4b50      	ldr	r3, [pc, #320]	; (8005450 <Display_settings_screen_background+0x1d0>)
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800531a:	2148      	movs	r1, #72	; 0x48
 800531c:	2036      	movs	r0, #54	; 0x36
 800531e:	f7fb fbdd 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8005322:	2302      	movs	r3, #2
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	4b4b      	ldr	r3, [pc, #300]	; (8005454 <Display_settings_screen_background+0x1d4>)
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800532e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005332:	2148      	movs	r1, #72	; 0x48
 8005334:	20d3      	movs	r0, #211	; 0xd3
 8005336:	f7fb fbd1 	bl	8000adc <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 800533a:	2391      	movs	r3, #145	; 0x91
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	239d      	movs	r3, #157	; 0x9d
 8005340:	2269      	movs	r2, #105	; 0x69
 8005342:	2105      	movs	r1, #5
 8005344:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005348:	f7fb fb26 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 800534c:	2391      	movs	r3, #145	; 0x91
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	f240 133b 	movw	r3, #315	; 0x13b
 8005354:	2269      	movs	r2, #105	; 0x69
 8005356:	21a3      	movs	r1, #163	; 0xa3
 8005358:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800535c:	f7fb fb1c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8005360:	2302      	movs	r3, #2
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <Display_settings_screen_background+0x1d8>)
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800536c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005370:	2175      	movs	r1, #117	; 0x75
 8005372:	2023      	movs	r0, #35	; 0x23
 8005374:	f7fb fbb2 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8005378:	2302      	movs	r3, #2
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	4b37      	ldr	r3, [pc, #220]	; (800545c <Display_settings_screen_background+0x1dc>)
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005388:	2175      	movs	r1, #117	; 0x75
 800538a:	20c1      	movs	r0, #193	; 0xc1
 800538c:	f7fb fba6 	bl	8000adc <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8005390:	23be      	movs	r3, #190	; 0xbe
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	239d      	movs	r3, #157	; 0x9d
 8005396:	2296      	movs	r2, #150	; 0x96
 8005398:	2105      	movs	r1, #5
 800539a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800539e:	f7fb fafb 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 80053a2:	23be      	movs	r3, #190	; 0xbe
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	f240 133b 	movw	r3, #315	; 0x13b
 80053aa:	2296      	movs	r2, #150	; 0x96
 80053ac:	21a3      	movs	r1, #163	; 0xa3
 80053ae:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053b2:	f7fb faf1 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 80053b6:	2302      	movs	r3, #2
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	4b29      	ldr	r3, [pc, #164]	; (8005460 <Display_settings_screen_background+0x1e0>)
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053c6:	21a2      	movs	r1, #162	; 0xa2
 80053c8:	2020      	movs	r0, #32
 80053ca:	f7fb fb87 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 80053ce:	2302      	movs	r3, #2
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <Display_settings_screen_background+0x1e4>)
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053de:	21a2      	movs	r1, #162	; 0xa2
 80053e0:	20a8      	movs	r0, #168	; 0xa8
 80053e2:	f7fb fb7b 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80053e6:	23eb      	movs	r3, #235	; 0xeb
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	239d      	movs	r3, #157	; 0x9d
 80053ec:	22c3      	movs	r2, #195	; 0xc3
 80053ee:	2105      	movs	r1, #5
 80053f0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053f4:	f7fb fad0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80053f8:	23eb      	movs	r3, #235	; 0xeb
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	f240 133b 	movw	r3, #315	; 0x13b
 8005400:	22c3      	movs	r2, #195	; 0xc3
 8005402:	21a3      	movs	r1, #163	; 0xa3
 8005404:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005408:	f7fb fac6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 800540c:	2302      	movs	r3, #2
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	4b15      	ldr	r3, [pc, #84]	; (8005468 <Display_settings_screen_background+0x1e8>)
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800541c:	21cf      	movs	r1, #207	; 0xcf
 800541e:	2025      	movs	r0, #37	; 0x25
 8005420:	f7fb fb5c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8005424:	2302      	movs	r3, #2
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <Display_settings_screen_background+0x1ec>)
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005434:	21cf      	movs	r1, #207	; 0xcf
 8005436:	20c3      	movs	r0, #195	; 0xc3
 8005438:	f7fb fb50 	bl	8000adc <ILI9341_Draw_String>
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	0800e5cc 	.word	0x0800e5cc
 8005448:	0800e5dc 	.word	0x0800e5dc
 800544c:	0800e5e4 	.word	0x0800e5e4
 8005450:	0800e5f0 	.word	0x0800e5f0
 8005454:	0800e5fc 	.word	0x0800e5fc
 8005458:	0800e608 	.word	0x0800e608
 800545c:	0800e614 	.word	0x0800e614
 8005460:	0800e620 	.word	0x0800e620
 8005464:	0800e630 	.word	0x0800e630
 8005468:	0800e3fc 	.word	0x0800e3fc
 800546c:	0800e3f0 	.word	0x0800e3f0

08005470 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b087      	sub	sp, #28
 8005474:	af02      	add	r7, sp, #8
 8005476:	463c      	mov	r4, r7
 8005478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	461a      	mov	r2, r3
 8005480:	238c      	movs	r3, #140	; 0x8c
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <Display_settings_screen_data+0x84>)
 8005488:	fb82 1203 	smull	r1, r2, r2, r3
 800548c:	441a      	add	r2, r3
 800548e:	1152      	asrs	r2, r2, #5
 8005490:	17db      	asrs	r3, r3, #31
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	330c      	adds	r3, #12
 8005496:	4619      	mov	r1, r3
 8005498:	2332      	movs	r3, #50	; 0x32
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2398      	movs	r3, #152	; 0x98
 800549e:	2228      	movs	r2, #40	; 0x28
 80054a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054a4:	f7fb fa78 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	461a      	mov	r2, r3
 80054ac:	238c      	movs	r3, #140	; 0x8c
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <Display_settings_screen_data+0x84>)
 80054b4:	fb82 1203 	smull	r1, r2, r2, r3
 80054b8:	441a      	add	r2, r3
 80054ba:	1152      	asrs	r2, r2, #5
 80054bc:	17db      	asrs	r3, r3, #31
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	330c      	adds	r3, #12
 80054c2:	461a      	mov	r2, r3
 80054c4:	2332      	movs	r3, #50	; 0x32
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	2228      	movs	r2, #40	; 0x28
 80054cc:	210c      	movs	r1, #12
 80054ce:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80054d2:	f7fb fa61 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 80054d6:	2332      	movs	r3, #50	; 0x32
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	f44f 739a 	mov.w	r3, #308	; 0x134
 80054de:	2228      	movs	r2, #40	; 0x28
 80054e0:	21a8      	movs	r1, #168	; 0xa8
 80054e2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80054e6:	f7fb fa57 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop
 80054f4:	82082083 	.word	0x82082083

080054f8 <Display_time>:

void Display_time(time_t time_val)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	463b      	mov	r3, r7
 8005500:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005504:	883b      	ldrh	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d076      	beq.n	80055f8 <Display_time+0x100>
 800550a:	78bb      	ldrb	r3, [r7, #2]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d073      	beq.n	80055f8 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8005510:	793b      	ldrb	r3, [r7, #4]
 8005512:	2b09      	cmp	r3, #9
 8005514:	d81e      	bhi.n	8005554 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 8005516:	2302      	movs	r3, #2
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	4b39      	ldr	r3, [pc, #228]	; (8005600 <Display_time+0x108>)
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005524:	2101      	movs	r1, #1
 8005526:	f240 100f 	movw	r0, #271	; 0x10f
 800552a:	f7fb fad7 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 800552e:	793b      	ldrb	r3, [r7, #4]
 8005530:	220a      	movs	r2, #10
 8005532:	4934      	ldr	r1, [pc, #208]	; (8005604 <Display_time+0x10c>)
 8005534:	4618      	mov	r0, r3
 8005536:	f007 ff0b 	bl	800d350 <itoa>
 800553a:	4603      	mov	r3, r0
 800553c:	2202      	movs	r2, #2
 800553e:	9201      	str	r2, [sp, #4]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005548:	2101      	movs	r1, #1
 800554a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800554e:	f7fb fac5 	bl	8000adc <ILI9341_Draw_String>
 8005552:	e011      	b.n	8005578 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005554:	793b      	ldrb	r3, [r7, #4]
 8005556:	220a      	movs	r2, #10
 8005558:	492a      	ldr	r1, [pc, #168]	; (8005604 <Display_time+0x10c>)
 800555a:	4618      	mov	r0, r3
 800555c:	f007 fef8 	bl	800d350 <itoa>
 8005560:	4603      	mov	r3, r0
 8005562:	2202      	movs	r2, #2
 8005564:	9201      	str	r2, [sp, #4]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800556e:	2101      	movs	r1, #1
 8005570:	f240 100f 	movw	r0, #271	; 0x10f
 8005574:	f7fb fab2 	bl	8000adc <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 8005578:	2302      	movs	r3, #2
 800557a:	9301      	str	r3, [sp, #4]
 800557c:	4b22      	ldr	r3, [pc, #136]	; (8005608 <Display_time+0x110>)
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005586:	2101      	movs	r1, #1
 8005588:	f240 101f 	movw	r0, #287	; 0x11f
 800558c:	f7fb faa6 	bl	8000adc <ILI9341_Draw_String>

		if(time_val.minute < 10)
 8005590:	797b      	ldrb	r3, [r7, #5]
 8005592:	2b09      	cmp	r3, #9
 8005594:	d81e      	bhi.n	80055d4 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 8005596:	2302      	movs	r3, #2
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	4b19      	ldr	r3, [pc, #100]	; (8005600 <Display_time+0x108>)
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055a4:	2101      	movs	r1, #1
 80055a6:	f240 1027 	movw	r0, #295	; 0x127
 80055aa:	f7fb fa97 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80055ae:	797b      	ldrb	r3, [r7, #5]
 80055b0:	220a      	movs	r2, #10
 80055b2:	4914      	ldr	r1, [pc, #80]	; (8005604 <Display_time+0x10c>)
 80055b4:	4618      	mov	r0, r3
 80055b6:	f007 fecb 	bl	800d350 <itoa>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2202      	movs	r2, #2
 80055be:	9201      	str	r2, [sp, #4]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2300      	movs	r3, #0
 80055c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055c8:	2101      	movs	r1, #1
 80055ca:	f44f 7098 	mov.w	r0, #304	; 0x130
 80055ce:	f7fb fa85 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 80055d2:	e011      	b.n	80055f8 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80055d4:	797b      	ldrb	r3, [r7, #5]
 80055d6:	220a      	movs	r2, #10
 80055d8:	490a      	ldr	r1, [pc, #40]	; (8005604 <Display_time+0x10c>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f007 feb8 	bl	800d350 <itoa>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2202      	movs	r2, #2
 80055e4:	9201      	str	r2, [sp, #4]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ee:	2101      	movs	r1, #1
 80055f0:	f240 1027 	movw	r0, #295	; 0x127
 80055f4:	f7fb fa72 	bl	8000adc <ILI9341_Draw_String>
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	0800e5b8 	.word	0x0800e5b8
 8005604:	20006d8c 	.word	0x20006d8c
 8005608:	0800e644 	.word	0x0800e644

0800560c <MX_DMA_Init>:
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <MX_DMA_Init+0x3c>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <MX_DMA_Init+0x3c>)
 800561c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005620:	6313      	str	r3, [r2, #48]	; 0x30
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <MX_DMA_Init+0x3c>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	2100      	movs	r1, #0
 8005632:	200f      	movs	r0, #15
 8005634:	f001 ff95 	bl	8007562 <HAL_NVIC_SetPriority>
 8005638:	200f      	movs	r0, #15
 800563a:	f001 ffae 	bl	800759a <HAL_NVIC_EnableIRQ>
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800

0800564c <eeprom_wait>:
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
 8005650:	bf00      	nop
 8005652:	f001 fe7b 	bl	800734c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <eeprom_wait+0x1c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b14      	cmp	r3, #20
 8005660:	d9f7      	bls.n	8005652 <eeprom_wait+0x6>
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20006e50 	.word	0x20006e50

0800566c <eeprom_read>:
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af04      	add	r7, sp, #16
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	f7ff ffe8 	bl	800564c <eeprom_wait>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	b29a      	uxth	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005688:	9102      	str	r1, [sp, #8]
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	2302      	movs	r3, #2
 8005692:	21a0      	movs	r1, #160	; 0xa0
 8005694:	4803      	ldr	r0, [pc, #12]	; (80056a4 <eeprom_read+0x38>)
 8005696:	f002 fec1 	bl	800841c <HAL_I2C_Mem_Read>
 800569a:	4603      	mov	r3, r0
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20006e54 	.word	0x20006e54

080056a8 <eeprom_write>:
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af04      	add	r7, sp, #16
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	f7ff ffca 	bl	800564c <eeprom_wait>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80056c4:	9102      	str	r1, [sp, #8]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2302      	movs	r3, #2
 80056ce:	21a0      	movs	r1, #160	; 0xa0
 80056d0:	4807      	ldr	r0, [pc, #28]	; (80056f0 <eeprom_write+0x48>)
 80056d2:	f002 fda9 	bl	8008228 <HAL_I2C_Mem_Write>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]
 80056da:	f001 fe37 	bl	800734c <HAL_GetTick>
 80056de:	4603      	mov	r3, r0
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <eeprom_write+0x4c>)
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20006e54 	.word	0x20006e54
 80056f4:	20006e50 	.word	0x20006e50

080056f8 <eeprom_clear_scanning_data>:
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b092      	sub	sp, #72	; 0x48
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	2101      	movs	r1, #1
 8005700:	4829      	ldr	r0, [pc, #164]	; (80057a8 <eeprom_clear_scanning_data+0xb0>)
 8005702:	f7fe f945 	bl	8003990 <send_debug_msg>
 8005706:	2300      	movs	r3, #0
 8005708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800570c:	e00b      	b.n	8005726 <eeprom_clear_scanning_data+0x2e>
 800570e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005712:	3348      	adds	r3, #72	; 0x48
 8005714:	443b      	add	r3, r7
 8005716:	22ff      	movs	r2, #255	; 0xff
 8005718:	f803 2c44 	strb.w	r2, [r3, #-68]
 800571c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005720:	3301      	adds	r3, #1
 8005722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005726:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800572a:	2b3f      	cmp	r3, #63	; 0x3f
 800572c:	d9ef      	bls.n	800570e <eeprom_clear_scanning_data+0x16>
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	2240      	movs	r2, #64	; 0x40
 8005732:	4619      	mov	r1, r3
 8005734:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005738:	f7ff ffb6 	bl	80056a8 <eeprom_write>
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005742:	e00e      	b.n	8005762 <eeprom_clear_scanning_data+0x6a>
 8005744:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005748:	3305      	adds	r3, #5
 800574a:	019b      	lsls	r3, r3, #6
 800574c:	4618      	mov	r0, r3
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	2240      	movs	r2, #64	; 0x40
 8005752:	4619      	mov	r1, r3
 8005754:	f7ff ffa8 	bl	80056a8 <eeprom_write>
 8005758:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800575c:	3301      	adds	r3, #1
 800575e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005762:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005766:	2b09      	cmp	r3, #9
 8005768:	d9ec      	bls.n	8005744 <eeprom_clear_scanning_data+0x4c>
 800576a:	2300      	movs	r3, #0
 800576c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005770:	e00e      	b.n	8005790 <eeprom_clear_scanning_data+0x98>
 8005772:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005776:	330f      	adds	r3, #15
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	4618      	mov	r0, r3
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	4619      	mov	r1, r3
 8005782:	f7ff ff91 	bl	80056a8 <eeprom_write>
 8005786:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800578a:	3301      	adds	r3, #1
 800578c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005790:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005794:	2b63      	cmp	r3, #99	; 0x63
 8005796:	d9ec      	bls.n	8005772 <eeprom_clear_scanning_data+0x7a>
 8005798:	2101      	movs	r1, #1
 800579a:	4804      	ldr	r0, [pc, #16]	; (80057ac <eeprom_clear_scanning_data+0xb4>)
 800579c:	f7fe f8f8 	bl	8003990 <send_debug_msg>
 80057a0:	bf00      	nop
 80057a2:	3748      	adds	r7, #72	; 0x48
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	0800e6f8 	.word	0x0800e6f8
 80057ac:	0800e718 	.word	0x0800e718

080057b0 <eeprom_save_scanning_data>:
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	461a      	mov	r2, r3
 80057bc:	460b      	mov	r3, r1
 80057be:	72fb      	strb	r3, [r7, #11]
 80057c0:	4613      	mov	r3, r2
 80057c2:	72bb      	strb	r3, [r7, #10]
 80057c4:	2101      	movs	r1, #1
 80057c6:	4824      	ldr	r0, [pc, #144]	; (8005858 <eeprom_save_scanning_data+0xa8>)
 80057c8:	f7fe f8e2 	bl	8003990 <send_debug_msg>
 80057cc:	f107 030a 	add.w	r3, r7, #10
 80057d0:	2201      	movs	r2, #1
 80057d2:	4619      	mov	r1, r3
 80057d4:	f240 1005 	movw	r0, #261	; 0x105
 80057d8:	f7ff ff66 	bl	80056a8 <eeprom_write>
 80057dc:	f107 030b 	add.w	r3, r7, #11
 80057e0:	2201      	movs	r2, #1
 80057e2:	4619      	mov	r1, r3
 80057e4:	f44f 7083 	mov.w	r0, #262	; 0x106
 80057e8:	f7ff ff5e 	bl	80056a8 <eeprom_write>
 80057ec:	2300      	movs	r3, #0
 80057ee:	75fb      	strb	r3, [r7, #23]
 80057f0:	e00e      	b.n	8005810 <eeprom_save_scanning_data+0x60>
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	3305      	adds	r3, #5
 80057f6:	019b      	lsls	r3, r3, #6
 80057f8:	4618      	mov	r0, r3
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	015b      	lsls	r3, r3, #5
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	2220      	movs	r2, #32
 8005804:	4619      	mov	r1, r3
 8005806:	f7ff ff4f 	bl	80056a8 <eeprom_write>
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	3301      	adds	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
 8005810:	7abb      	ldrb	r3, [r7, #10]
 8005812:	7dfa      	ldrb	r2, [r7, #23]
 8005814:	429a      	cmp	r2, r3
 8005816:	d3ec      	bcc.n	80057f2 <eeprom_save_scanning_data+0x42>
 8005818:	2300      	movs	r3, #0
 800581a:	75bb      	strb	r3, [r7, #22]
 800581c:	e010      	b.n	8005840 <eeprom_save_scanning_data+0x90>
 800581e:	7dbb      	ldrb	r3, [r7, #22]
 8005820:	330f      	adds	r3, #15
 8005822:	019b      	lsls	r3, r3, #6
 8005824:	4618      	mov	r0, r3
 8005826:	7dbb      	ldrb	r3, [r7, #22]
 8005828:	2234      	movs	r2, #52	; 0x34
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	2234      	movs	r2, #52	; 0x34
 8005834:	4619      	mov	r1, r3
 8005836:	f7ff ff37 	bl	80056a8 <eeprom_write>
 800583a:	7dbb      	ldrb	r3, [r7, #22]
 800583c:	3301      	adds	r3, #1
 800583e:	75bb      	strb	r3, [r7, #22]
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	7dba      	ldrb	r2, [r7, #22]
 8005844:	429a      	cmp	r2, r3
 8005846:	d3ea      	bcc.n	800581e <eeprom_save_scanning_data+0x6e>
 8005848:	2101      	movs	r1, #1
 800584a:	4804      	ldr	r0, [pc, #16]	; (800585c <eeprom_save_scanning_data+0xac>)
 800584c:	f7fe f8a0 	bl	8003990 <send_debug_msg>
 8005850:	bf00      	nop
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	0800e724 	.word	0x0800e724
 800585c:	0800e740 	.word	0x0800e740

08005860 <MX_GPIO_Init>:
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	; 0x30
 8005864:	af00      	add	r7, sp, #0
 8005866:	f107 031c 	add.w	r3, r7, #28
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	605a      	str	r2, [r3, #4]
 8005870:	609a      	str	r2, [r3, #8]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	611a      	str	r2, [r3, #16]
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	4b6c      	ldr	r3, [pc, #432]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	4a6b      	ldr	r2, [pc, #428]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	6313      	str	r3, [r2, #48]	; 0x30
 8005886:	4b69      	ldr	r3, [pc, #420]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	4a64      	ldr	r2, [pc, #400]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	6313      	str	r3, [r2, #48]	; 0x30
 80058a2:	4b62      	ldr	r3, [pc, #392]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a5d      	ldr	r2, [pc, #372]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058b8:	f043 0304 	orr.w	r3, r3, #4
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	4b57      	ldr	r3, [pc, #348]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4a56      	ldr	r2, [pc, #344]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	6313      	str	r3, [r2, #48]	; 0x30
 80058da:	4b54      	ldr	r3, [pc, #336]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a4f      	ldr	r2, [pc, #316]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058f0:	f043 0310 	orr.w	r3, r3, #16
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b4d      	ldr	r3, [pc, #308]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a48      	ldr	r2, [pc, #288]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 800590c:	f043 0308 	orr.w	r3, r3, #8
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
 8005912:	4b46      	ldr	r3, [pc, #280]	; (8005a2c <MX_GPIO_Init+0x1cc>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	2130      	movs	r1, #48	; 0x30
 8005922:	4843      	ldr	r0, [pc, #268]	; (8005a30 <MX_GPIO_Init+0x1d0>)
 8005924:	f002 fb22 	bl	8007f6c <HAL_GPIO_WritePin>
 8005928:	2200      	movs	r2, #0
 800592a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800592e:	4841      	ldr	r0, [pc, #260]	; (8005a34 <MX_GPIO_Init+0x1d4>)
 8005930:	f002 fb1c 	bl	8007f6c <HAL_GPIO_WritePin>
 8005934:	2200      	movs	r2, #0
 8005936:	f24f 7180 	movw	r1, #63360	; 0xf780
 800593a:	483f      	ldr	r0, [pc, #252]	; (8005a38 <MX_GPIO_Init+0x1d8>)
 800593c:	f002 fb16 	bl	8007f6c <HAL_GPIO_WritePin>
 8005940:	2200      	movs	r2, #0
 8005942:	2128      	movs	r1, #40	; 0x28
 8005944:	483d      	ldr	r0, [pc, #244]	; (8005a3c <MX_GPIO_Init+0x1dc>)
 8005946:	f002 fb11 	bl	8007f6c <HAL_GPIO_WritePin>
 800594a:	2310      	movs	r3, #16
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	f107 031c 	add.w	r3, r7, #28
 800595a:	4619      	mov	r1, r3
 800595c:	4838      	ldr	r0, [pc, #224]	; (8005a40 <MX_GPIO_Init+0x1e0>)
 800595e:	f002 f951 	bl	8007c04 <HAL_GPIO_Init>
 8005962:	2330      	movs	r3, #48	; 0x30
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	2301      	movs	r3, #1
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
 800596e:	2302      	movs	r3, #2
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
 8005972:	f107 031c 	add.w	r3, r7, #28
 8005976:	4619      	mov	r1, r3
 8005978:	482d      	ldr	r0, [pc, #180]	; (8005a30 <MX_GPIO_Init+0x1d0>)
 800597a:	f002 f943 	bl	8007c04 <HAL_GPIO_Init>
 800597e:	2311      	movs	r3, #17
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	2300      	movs	r3, #0
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	f107 031c 	add.w	r3, r7, #28
 800598e:	4619      	mov	r1, r3
 8005990:	482a      	ldr	r0, [pc, #168]	; (8005a3c <MX_GPIO_Init+0x1dc>)
 8005992:	f002 f937 	bl	8007c04 <HAL_GPIO_Init>
 8005996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	2301      	movs	r3, #1
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
 80059a4:	2300      	movs	r3, #0
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a8:	f107 031c 	add.w	r3, r7, #28
 80059ac:	4619      	mov	r1, r3
 80059ae:	4821      	ldr	r0, [pc, #132]	; (8005a34 <MX_GPIO_Init+0x1d4>)
 80059b0:	f002 f928 	bl	8007c04 <HAL_GPIO_Init>
 80059b4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	2301      	movs	r3, #1
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
 80059c2:	2302      	movs	r3, #2
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c6:	f107 031c 	add.w	r3, r7, #28
 80059ca:	4619      	mov	r1, r3
 80059cc:	481a      	ldr	r0, [pc, #104]	; (8005a38 <MX_GPIO_Init+0x1d8>)
 80059ce:	f002 f919 	bl	8007c04 <HAL_GPIO_Init>
 80059d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	2301      	movs	r3, #1
 80059da:	623b      	str	r3, [r7, #32]
 80059dc:	2300      	movs	r3, #0
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	2300      	movs	r3, #0
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e4:	f107 031c 	add.w	r3, r7, #28
 80059e8:	4619      	mov	r1, r3
 80059ea:	4813      	ldr	r0, [pc, #76]	; (8005a38 <MX_GPIO_Init+0x1d8>)
 80059ec:	f002 f90a 	bl	8007c04 <HAL_GPIO_Init>
 80059f0:	2340      	movs	r3, #64	; 0x40
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	2300      	movs	r3, #0
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
 80059fc:	f107 031c 	add.w	r3, r7, #28
 8005a00:	4619      	mov	r1, r3
 8005a02:	480d      	ldr	r0, [pc, #52]	; (8005a38 <MX_GPIO_Init+0x1d8>)
 8005a04:	f002 f8fe 	bl	8007c04 <HAL_GPIO_Init>
 8005a08:	2328      	movs	r3, #40	; 0x28
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
 8005a14:	2302      	movs	r3, #2
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a18:	f107 031c 	add.w	r3, r7, #28
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4807      	ldr	r0, [pc, #28]	; (8005a3c <MX_GPIO_Init+0x1dc>)
 8005a20:	f002 f8f0 	bl	8007c04 <HAL_GPIO_Init>
 8005a24:	bf00      	nop
 8005a26:	3730      	adds	r7, #48	; 0x30
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40020800 	.word	0x40020800
 8005a34:	40021000 	.word	0x40021000
 8005a38:	40020c00 	.word	0x40020c00
 8005a3c:	40020400 	.word	0x40020400
 8005a40:	40020000 	.word	0x40020000

08005a44 <MX_I2C1_Init>:
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a4a:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <MX_I2C1_Init+0x54>)
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a50:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <MX_I2C1_Init+0x58>)
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]
 8005a5a:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	60da      	str	r2, [r3, #12]
 8005a60:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a66:	611a      	str	r2, [r3, #16]
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	619a      	str	r2, [r3, #24]
 8005a74:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	61da      	str	r2, [r3, #28]
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	621a      	str	r2, [r3, #32]
 8005a80:	4804      	ldr	r0, [pc, #16]	; (8005a94 <MX_I2C1_Init+0x50>)
 8005a82:	f002 fa8d 	bl	8007fa0 <HAL_I2C_Init>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_I2C1_Init+0x4c>
 8005a8c:	f000 f982 	bl	8005d94 <Error_Handler>
 8005a90:	bf00      	nop
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20006e54 	.word	0x20006e54
 8005a98:	40005400 	.word	0x40005400
 8005a9c:	000186a0 	.word	0x000186a0

08005aa0 <MX_I2C3_Init>:
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <MX_I2C3_Init+0x54>)
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <MX_I2C3_Init+0x58>)
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ac2:	611a      	str	r2, [r3, #16]
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	615a      	str	r2, [r3, #20]
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	619a      	str	r2, [r3, #24]
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61da      	str	r2, [r3, #28]
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	621a      	str	r2, [r3, #32]
 8005adc:	4804      	ldr	r0, [pc, #16]	; (8005af0 <MX_I2C3_Init+0x50>)
 8005ade:	f002 fa5f 	bl	8007fa0 <HAL_I2C_Init>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_I2C3_Init+0x4c>
 8005ae8:	f000 f954 	bl	8005d94 <Error_Handler>
 8005aec:	bf00      	nop
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20006ea8 	.word	0x20006ea8
 8005af4:	40005c00 	.word	0x40005c00
 8005af8:	000186a0 	.word	0x000186a0

08005afc <HAL_I2C_MspInit>:
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	f107 031c 	add.w	r3, r7, #28
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a4a      	ldr	r2, [pc, #296]	; (8005c44 <HAL_I2C_MspInit+0x148>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d12c      	bne.n	8005b78 <HAL_I2C_MspInit+0x7c>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	4a48      	ldr	r2, [pc, #288]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b28:	f043 0302 	orr.w	r3, r3, #2
 8005b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2e:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	23c0      	movs	r3, #192	; 0xc0
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	2312      	movs	r3, #18
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	2303      	movs	r3, #3
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4a:	2304      	movs	r3, #4
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	f107 031c 	add.w	r3, r7, #28
 8005b52:	4619      	mov	r1, r3
 8005b54:	483d      	ldr	r0, [pc, #244]	; (8005c4c <HAL_I2C_MspInit+0x150>)
 8005b56:	f002 f855 	bl	8007c04 <HAL_GPIO_Init>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	4b3a      	ldr	r3, [pc, #232]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	4a39      	ldr	r2, [pc, #228]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b68:	6413      	str	r3, [r2, #64]	; 0x40
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	e060      	b.n	8005c3a <HAL_I2C_MspInit+0x13e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a34      	ldr	r2, [pc, #208]	; (8005c50 <HAL_I2C_MspInit+0x154>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d15b      	bne.n	8005c3a <HAL_I2C_MspInit+0x13e>
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b8c:	f043 0304 	orr.w	r3, r3, #4
 8005b90:	6313      	str	r3, [r2, #48]	; 0x30
 8005b92:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	4b29      	ldr	r3, [pc, #164]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6313      	str	r3, [r2, #48]	; 0x30
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	2312      	movs	r3, #18
 8005bc2:	623b      	str	r3, [r7, #32]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	2303      	movs	r3, #3
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bcc:	2304      	movs	r3, #4
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	481f      	ldr	r0, [pc, #124]	; (8005c54 <HAL_I2C_MspInit+0x158>)
 8005bd8:	f002 f814 	bl	8007c04 <HAL_GPIO_Init>
 8005bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	2312      	movs	r3, #18
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bea:	2303      	movs	r3, #3
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bee:	2304      	movs	r3, #4
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf2:	f107 031c 	add.w	r3, r7, #28
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4817      	ldr	r0, [pc, #92]	; (8005c58 <HAL_I2C_MspInit+0x15c>)
 8005bfa:	f002 f803 	bl	8007c04 <HAL_GPIO_Init>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	4a10      	ldr	r2, [pc, #64]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005c08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <HAL_I2C_MspInit+0x14c>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	2048      	movs	r0, #72	; 0x48
 8005c20:	f001 fc9f 	bl	8007562 <HAL_NVIC_SetPriority>
 8005c24:	2048      	movs	r0, #72	; 0x48
 8005c26:	f001 fcb8 	bl	800759a <HAL_NVIC_EnableIRQ>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	2049      	movs	r0, #73	; 0x49
 8005c30:	f001 fc97 	bl	8007562 <HAL_NVIC_SetPriority>
 8005c34:	2049      	movs	r0, #73	; 0x49
 8005c36:	f001 fcb0 	bl	800759a <HAL_NVIC_EnableIRQ>
 8005c3a:	bf00      	nop
 8005c3c:	3730      	adds	r7, #48	; 0x30
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40005400 	.word	0x40005400
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40020400 	.word	0x40020400
 8005c50:	40005c00 	.word	0x40005c00
 8005c54:	40020800 	.word	0x40020800
 8005c58:	40020000 	.word	0x40020000

08005c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c60:	f001 fb0e 	bl	8007280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c64:	f000 f82c 	bl	8005cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c68:	f7ff fdfa 	bl	8005860 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c6c:	f7ff fcce 	bl	800560c <MX_DMA_Init>
  MX_I2C1_Init();
 8005c70:	f7ff fee8 	bl	8005a44 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005c74:	f7ff ff14 	bl	8005aa0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005c78:	f000 f892 	bl	8005da0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005c7c:	f000 f8c6 	bl	8005e0c <MX_SPI2_Init>
  MX_TIM3_Init();
 8005c80:	f000 fe84 	bl	800698c <MX_TIM3_Init>
  MX_UART5_Init();
 8005c84:	f001 f9de 	bl	8007044 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005c88:	f001 fa06 	bl	8007098 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005c8c:	f000 fed8 	bl	8006a40 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005c90:	f000 fefa 	bl	8006a88 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005c94:	2101      	movs	r1, #1
 8005c96:	4808      	ldr	r0, [pc, #32]	; (8005cb8 <main+0x5c>)
 8005c98:	f7fd fe7a 	bl	8003990 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005c9c:	4807      	ldr	r0, [pc, #28]	; (8005cbc <main+0x60>)
 8005c9e:	f006 f9c7 	bl	800c030 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005ca2:	f7fa fc25 	bl	80004f0 <ILI9341_Init>
  Display_booting_screen();
 8005ca6:	f7fd fead 	bl	8003a04 <Display_booting_screen>

  Si468x_dab_init();
 8005caa:	f7fb f9e1 	bl	8001070 <Si468x_dab_init>
  restore_from_eeprom();
 8005cae:	f7fd fb09 	bl	80032c4 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005cb2:	f000 f999 	bl	8005fe8 <state_machine>
 8005cb6:	e7fc      	b.n	8005cb2 <main+0x56>
 8005cb8:	0800ea18 	.word	0x0800ea18
 8005cbc:	20007100 	.word	0x20007100

08005cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b094      	sub	sp, #80	; 0x50
 8005cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cc6:	f107 0320 	add.w	r3, r7, #32
 8005cca:	2230      	movs	r2, #48	; 0x30
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f007 fb40 	bl	800d354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <SystemClock_Config+0xcc>)
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <SystemClock_Config+0xcc>)
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf4:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <SystemClock_Config+0xcc>)
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d00:	2300      	movs	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <SystemClock_Config+0xd0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a21      	ldr	r2, [pc, #132]	; (8005d90 <SystemClock_Config+0xd0>)
 8005d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4b1f      	ldr	r3, [pc, #124]	; (8005d90 <SystemClock_Config+0xd0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d18:	607b      	str	r3, [r7, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d26:	2302      	movs	r3, #2
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005d30:	2304      	movs	r3, #4
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8005d34:	23f0      	movs	r3, #240	; 0xf0
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d40:	f107 0320 	add.w	r3, r7, #32
 8005d44:	4618      	mov	r0, r3
 8005d46:	f004 fdc5 	bl	800a8d4 <HAL_RCC_OscConfig>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005d50:	f000 f820 	bl	8005d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d54:	230f      	movs	r3, #15
 8005d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d6c:	f107 030c 	add.w	r3, r7, #12
 8005d70:	2105      	movs	r1, #5
 8005d72:	4618      	mov	r0, r3
 8005d74:	f005 f826 	bl	800adc4 <HAL_RCC_ClockConfig>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005d7e:	f000 f809 	bl	8005d94 <Error_Handler>
  }
}
 8005d82:	bf00      	nop
 8005d84:	3750      	adds	r7, #80	; 0x50
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40007000 	.word	0x40007000

08005d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d98:	b672      	cpsid	i
}
 8005d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d9c:	e7fe      	b.n	8005d9c <Error_Handler+0x8>
	...

08005da0 <MX_SPI1_Init>:
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <MX_SPI1_Init+0x68>)
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	611a      	str	r2, [r3, #16]
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	615a      	str	r2, [r3, #20]
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd0:	619a      	str	r2, [r3, #24]
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	61da      	str	r2, [r3, #28]
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	621a      	str	r2, [r3, #32]
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	629a      	str	r2, [r3, #40]	; 0x28
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005dec:	220a      	movs	r2, #10
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c
 8005df0:	4804      	ldr	r0, [pc, #16]	; (8005e04 <MX_SPI1_Init+0x64>)
 8005df2:	f005 fa07 	bl	800b204 <HAL_SPI_Init>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_SPI1_Init+0x60>
 8005dfc:	f7ff ffca 	bl	8005d94 <Error_Handler>
 8005e00:	bf00      	nop
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20006efc 	.word	0x20006efc
 8005e08:	40013000 	.word	0x40013000

08005e0c <MX_SPI2_Init>:
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e12:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <MX_SPI2_Init+0x68>)
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	60da      	str	r2, [r3, #12]
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	611a      	str	r2, [r3, #16]
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	615a      	str	r2, [r3, #20]
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e3c:	619a      	str	r2, [r3, #24]
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	61da      	str	r2, [r3, #28]
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	621a      	str	r2, [r3, #32]
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	629a      	str	r2, [r3, #40]	; 0x28
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e58:	220a      	movs	r2, #10
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e5c:	4804      	ldr	r0, [pc, #16]	; (8005e70 <MX_SPI2_Init+0x64>)
 8005e5e:	f005 f9d1 	bl	800b204 <HAL_SPI_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_SPI2_Init+0x60>
 8005e68:	f7ff ff94 	bl	8005d94 <Error_Handler>
 8005e6c:	bf00      	nop
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20006f54 	.word	0x20006f54
 8005e74:	40003800 	.word	0x40003800

08005e78 <HAL_SPI_MspInit>:
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	; 0x30
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	f107 031c 	add.w	r3, r7, #28
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	611a      	str	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a4d      	ldr	r2, [pc, #308]	; (8005fcc <HAL_SPI_MspInit+0x154>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d12c      	bne.n	8005ef4 <HAL_SPI_MspInit+0x7c>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	4a4b      	ldr	r2, [pc, #300]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8005eaa:	4b49      	ldr	r3, [pc, #292]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4a44      	ldr	r2, [pc, #272]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec6:	4b42      	ldr	r3, [pc, #264]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	23e0      	movs	r3, #224	; 0xe0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	2303      	movs	r3, #3
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	2305      	movs	r3, #5
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee6:	f107 031c 	add.w	r3, r7, #28
 8005eea:	4619      	mov	r1, r3
 8005eec:	4839      	ldr	r0, [pc, #228]	; (8005fd4 <HAL_SPI_MspInit+0x15c>)
 8005eee:	f001 fe89 	bl	8007c04 <HAL_GPIO_Init>
 8005ef2:	e066      	b.n	8005fc2 <HAL_SPI_MspInit+0x14a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <HAL_SPI_MspInit+0x160>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d161      	bne.n	8005fc2 <HAL_SPI_MspInit+0x14a>
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	4a32      	ldr	r2, [pc, #200]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0e:	4b30      	ldr	r3, [pc, #192]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005f24:	f043 0302 	orr.w	r3, r3, #2
 8005f28:	6313      	str	r3, [r2, #48]	; 0x30
 8005f2a:	4b29      	ldr	r3, [pc, #164]	; (8005fd0 <HAL_SPI_MspInit+0x158>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	623b      	str	r3, [r7, #32]
 8005f40:	2300      	movs	r3, #0
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
 8005f44:	2303      	movs	r3, #3
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f48:	2305      	movs	r3, #5
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f4c:	f107 031c 	add.w	r3, r7, #28
 8005f50:	4619      	mov	r1, r3
 8005f52:	4822      	ldr	r0, [pc, #136]	; (8005fdc <HAL_SPI_MspInit+0x164>)
 8005f54:	f001 fe56 	bl	8007c04 <HAL_GPIO_Init>
 8005f58:	4b21      	ldr	r3, [pc, #132]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f5a:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <HAL_SPI_MspInit+0x16c>)
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f66:	2240      	movs	r2, #64	; 0x40
 8005f68:	609a      	str	r2, [r3, #8]
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f76:	611a      	str	r2, [r3, #16]
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	615a      	str	r2, [r3, #20]
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]
 8005f84:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	61da      	str	r2, [r3, #28]
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	621a      	str	r2, [r3, #32]
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
 8005f96:	4812      	ldr	r0, [pc, #72]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005f98:	f001 fb1a 	bl	80075d0 <HAL_DMA_Init>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_SPI_MspInit+0x12e>
 8005fa2:	f7ff fef7 	bl	8005d94 <Error_Handler>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005faa:	649a      	str	r2, [r3, #72]	; 0x48
 8005fac:	4a0c      	ldr	r2, [pc, #48]	; (8005fe0 <HAL_SPI_MspInit+0x168>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6393      	str	r3, [r2, #56]	; 0x38
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	2024      	movs	r0, #36	; 0x24
 8005fb8:	f001 fad3 	bl	8007562 <HAL_NVIC_SetPriority>
 8005fbc:	2024      	movs	r0, #36	; 0x24
 8005fbe:	f001 faec 	bl	800759a <HAL_NVIC_EnableIRQ>
 8005fc2:	bf00      	nop
 8005fc4:	3730      	adds	r7, #48	; 0x30
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40013000 	.word	0x40013000
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	40020000 	.word	0x40020000
 8005fd8:	40003800 	.word	0x40003800
 8005fdc:	40020400 	.word	0x40020400
 8005fe0:	20006fac 	.word	0x20006fac
 8005fe4:	40026070 	.word	0x40026070

08005fe8 <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 8005fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fea:	b097      	sub	sp, #92	; 0x5c
 8005fec:	af06      	add	r7, sp, #24
	if(state_change_done)
 8005fee:	4b64      	ldr	r3, [pc, #400]	; (8006180 <state_machine+0x198>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 8005ff6:	f000 fe0d 	bl	8006c14 <Touch_read>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4a61      	ldr	r2, [pc, #388]	; (8006184 <state_machine+0x19c>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e005      	b.n	800600e <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 8006002:	4b60      	ldr	r3, [pc, #384]	; (8006184 <state_machine+0x19c>)
 8006004:	2200      	movs	r2, #0
 8006006:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8006008:	4b5e      	ldr	r3, [pc, #376]	; (8006184 <state_machine+0x19c>)
 800600a:	2200      	movs	r2, #0
 800600c:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 800600e:	4c5e      	ldr	r4, [pc, #376]	; (8006188 <state_machine+0x1a0>)
 8006010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006014:	4618      	mov	r0, r3
 8006016:	f7fd fc9f 	bl	8003958 <get_dab_management>
 800601a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800601e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 8006024:	f7fd fcaa 	bl	800397c <get_dls_label>
 8006028:	4603      	mov	r3, r0
 800602a:	4a58      	ldr	r2, [pc, #352]	; (800618c <state_machine+0x1a4>)
 800602c:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 800602e:	f7fd f837 	bl	80030a0 <Si468x_dab_get_time>


	switch(system_state)
 8006032:	4b57      	ldr	r3, [pc, #348]	; (8006190 <state_machine+0x1a8>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b04      	cmp	r3, #4
 8006038:	f200 83e0 	bhi.w	80067fc <state_machine+0x814>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <state_machine+0x5c>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006059 	.word	0x08006059
 8006048:	080061a9 	.word	0x080061a9
 800604c:	08006611 	.word	0x08006611
 8006050:	08006541 	.word	0x08006541
 8006054:	08006685 	.word	0x08006685
	{
	case main_screen:

		if(!state_change_done)
 8006058:	4b49      	ldr	r3, [pc, #292]	; (8006180 <state_machine+0x198>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d14e      	bne.n	80060fe <state_machine+0x116>
		{
			if(!dab_management_to_display.total_services)
 8006060:	4b49      	ldr	r3, [pc, #292]	; (8006188 <state_machine+0x1a0>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <state_machine+0x88>
			{
				playing_state = not_playing;
 8006068:	4b4a      	ldr	r3, [pc, #296]	; (8006194 <state_machine+0x1ac>)
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e028      	b.n	80060c2 <state_machine+0xda>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 8006070:	f7fd fc5e 	bl	8003930 <get_dab_service_list>
 8006074:	4603      	mov	r3, r0
 8006076:	4a48      	ldr	r2, [pc, #288]	; (8006198 <state_machine+0x1b0>)
 8006078:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 800607a:	f7fd fc63 	bl	8003944 <get_dab_ensemble_list>
 800607e:	4603      	mov	r3, r0
 8006080:	4a46      	ldr	r2, [pc, #280]	; (800619c <state_machine+0x1b4>)
 8006082:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 8006084:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <state_machine+0x1b8>)
 8006086:	2232      	movs	r2, #50	; 0x32
 8006088:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 800608a:	e014      	b.n	80060b6 <state_machine+0xce>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 800608c:	4c45      	ldr	r4, [pc, #276]	; (80061a4 <state_machine+0x1bc>)
 800608e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc fcf6 	bl	8002a84 <Si468x_dab_get_audio_info>
 8006098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800609c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800609e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 80060a2:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <state_machine+0x1b8>)
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	4b3d      	ldr	r3, [pc, #244]	; (80061a0 <state_machine+0x1b8>)
 80060ac:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 80060ae:	4b3c      	ldr	r3, [pc, #240]	; (80061a0 <state_machine+0x1b8>)
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <state_machine+0xd8>
				while(!dab_audio_info_to_display.audio_sample_rate)
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <state_machine+0x1bc>)
 80060b8:	885b      	ldrh	r3, [r3, #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0e6      	beq.n	800608c <state_machine+0xa4>
 80060be:	e000      	b.n	80060c2 <state_machine+0xda>
					{
						break;
 80060c0:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 80060c2:	f7fd fd11 	bl	8003ae8 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 80060c6:	4b34      	ldr	r3, [pc, #208]	; (8006198 <state_machine+0x1b0>)
 80060c8:	681e      	ldr	r6, [r3, #0]
 80060ca:	4b34      	ldr	r3, [pc, #208]	; (800619c <state_machine+0x1b4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	4c2d      	ldr	r4, [pc, #180]	; (8006188 <state_machine+0x1a0>)
 80060d2:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <state_machine+0x1bc>)
 80060d4:	ad02      	add	r5, sp, #8
 80060d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80060dc:	466a      	mov	r2, sp
 80060de:	f104 0308 	add.w	r3, r4, #8
 80060e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80060e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80060ea:	e894 000c 	ldmia.w	r4, {r2, r3}
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fd fd87 	bl	8003c04 <Display_main_screen_data>
			state_change_done = 1;
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <state_machine+0x198>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e00d      	b.n	800611a <state_machine+0x132>
		}

		else
		{
			if(playing_state == playing)
 80060fe:	4b25      	ldr	r3, [pc, #148]	; (8006194 <state_machine+0x1ac>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d107      	bne.n	8006116 <state_machine+0x12e>
			{
				Si468x_dab_get_digital_service_data();
 8006106:	f7fc fe51 	bl	8002dac <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 800610a:	4b20      	ldr	r3, [pc, #128]	; (800618c <state_machine+0x1a4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fd feb2 	bl	8003e78 <Display_main_screen_dls>
 8006114:	e001      	b.n	800611a <state_machine+0x132>
			}
			else
			{
				Display_main_screen_empty();
 8006116:	f7fd feeb 	bl	8003ef0 <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800611a:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <state_machine+0x19c>)
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	2b05      	cmp	r3, #5
 8006120:	d911      	bls.n	8006146 <state_machine+0x15e>
 8006122:	4b18      	ldr	r3, [pc, #96]	; (8006184 <state_machine+0x19c>)
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	2b9c      	cmp	r3, #156	; 0x9c
 8006128:	d80d      	bhi.n	8006146 <state_machine+0x15e>
 800612a:	4b16      	ldr	r3, [pc, #88]	; (8006184 <state_machine+0x19c>)
 800612c:	885b      	ldrh	r3, [r3, #2]
 800612e:	2bc3      	cmp	r3, #195	; 0xc3
 8006130:	d909      	bls.n	8006146 <state_machine+0x15e>
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <state_machine+0x19c>)
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	2bea      	cmp	r3, #234	; 0xea
 8006138:	d805      	bhi.n	8006146 <state_machine+0x15e>
		{
			state_change_done = 0;
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <state_machine+0x198>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <state_machine+0x1a8>)
 8006142:	2204      	movs	r2, #4
 8006144:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006146:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <state_machine+0x19c>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	2ba3      	cmp	r3, #163	; 0xa3
 800614c:	f240 8358 	bls.w	8006800 <state_machine+0x818>
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <state_machine+0x19c>)
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006158:	f200 8352 	bhi.w	8006800 <state_machine+0x818>
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <state_machine+0x19c>)
 800615e:	885b      	ldrh	r3, [r3, #2]
 8006160:	2bc3      	cmp	r3, #195	; 0xc3
 8006162:	f240 834d 	bls.w	8006800 <state_machine+0x818>
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <state_machine+0x19c>)
 8006168:	885b      	ldrh	r3, [r3, #2]
 800616a:	2bea      	cmp	r3, #234	; 0xea
 800616c:	f200 8348 	bhi.w	8006800 <state_machine+0x818>
		{
			state_change_done = 0;
 8006170:	4b03      	ldr	r3, [pc, #12]	; (8006180 <state_machine+0x198>)
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <state_machine+0x1a8>)
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
		}

		break;
 800617c:	e340      	b.n	8006800 <state_machine+0x818>
 800617e:	bf00      	nop
 8006180:	2000700d 	.word	0x2000700d
 8006184:	20007014 	.word	0x20007014
 8006188:	20007040 	.word	0x20007040
 800618c:	20007068 	.word	0x20007068
 8006190:	2000700c 	.word	0x2000700c
 8006194:	20000150 	.word	0x20000150
 8006198:	20007050 	.word	0x20007050
 800619c:	20007054 	.word	0x20007054
 80061a0:	2000706e 	.word	0x2000706e
 80061a4:	20007058 	.word	0x20007058

	case services_list_screen:
		if(!state_change_done)
 80061a8:	4b7d      	ldr	r3, [pc, #500]	; (80063a0 <state_machine+0x3b8>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d114      	bne.n	80061da <state_machine+0x1f2>
		{
			services_list_to_display = get_dab_service_list();
 80061b0:	f7fd fbbe 	bl	8003930 <get_dab_service_list>
 80061b4:	4603      	mov	r3, r0
 80061b6:	4a7b      	ldr	r2, [pc, #492]	; (80063a4 <state_machine+0x3bc>)
 80061b8:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 80061ba:	f7fd feff 	bl	8003fbc <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80061be:	4b7a      	ldr	r3, [pc, #488]	; (80063a8 <state_machine+0x3c0>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	4b78      	ldr	r3, [pc, #480]	; (80063a4 <state_machine+0x3bc>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b79      	ldr	r3, [pc, #484]	; (80063ac <state_machine+0x3c4>)
 80061c8:	9201      	str	r2, [sp, #4]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	9200      	str	r2, [sp, #0]
 80061ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d0:	f7fd ffb8 	bl	8004144 <Display_stations_list_data>
			state_change_done = 1;
 80061d4:	4b72      	ldr	r3, [pc, #456]	; (80063a0 <state_machine+0x3b8>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80061da:	4b75      	ldr	r3, [pc, #468]	; (80063b0 <state_machine+0x3c8>)
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d911      	bls.n	8006206 <state_machine+0x21e>
 80061e2:	4b73      	ldr	r3, [pc, #460]	; (80063b0 <state_machine+0x3c8>)
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	2b9c      	cmp	r3, #156	; 0x9c
 80061e8:	d80d      	bhi.n	8006206 <state_machine+0x21e>
 80061ea:	4b71      	ldr	r3, [pc, #452]	; (80063b0 <state_machine+0x3c8>)
 80061ec:	885b      	ldrh	r3, [r3, #2]
 80061ee:	2bc3      	cmp	r3, #195	; 0xc3
 80061f0:	d909      	bls.n	8006206 <state_machine+0x21e>
 80061f2:	4b6f      	ldr	r3, [pc, #444]	; (80063b0 <state_machine+0x3c8>)
 80061f4:	885b      	ldrh	r3, [r3, #2]
 80061f6:	2bea      	cmp	r3, #234	; 0xea
 80061f8:	d805      	bhi.n	8006206 <state_machine+0x21e>
		{
			state_change_done = 0;
 80061fa:	4b69      	ldr	r3, [pc, #420]	; (80063a0 <state_machine+0x3b8>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006200:	4b6c      	ldr	r3, [pc, #432]	; (80063b4 <state_machine+0x3cc>)
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006206:	4b6a      	ldr	r3, [pc, #424]	; (80063b0 <state_machine+0x3c8>)
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	2ba3      	cmp	r3, #163	; 0xa3
 800620c:	d912      	bls.n	8006234 <state_machine+0x24c>
 800620e:	4b68      	ldr	r3, [pc, #416]	; (80063b0 <state_machine+0x3c8>)
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006216:	d80d      	bhi.n	8006234 <state_machine+0x24c>
 8006218:	4b65      	ldr	r3, [pc, #404]	; (80063b0 <state_machine+0x3c8>)
 800621a:	885b      	ldrh	r3, [r3, #2]
 800621c:	2bc3      	cmp	r3, #195	; 0xc3
 800621e:	d909      	bls.n	8006234 <state_machine+0x24c>
 8006220:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <state_machine+0x3c8>)
 8006222:	885b      	ldrh	r3, [r3, #2]
 8006224:	2bea      	cmp	r3, #234	; 0xea
 8006226:	d805      	bhi.n	8006234 <state_machine+0x24c>
		{
			state_change_done = 0;
 8006228:	4b5d      	ldr	r3, [pc, #372]	; (80063a0 <state_machine+0x3b8>)
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800622e:	4b61      	ldr	r3, [pc, #388]	; (80063b4 <state_machine+0x3cc>)
 8006230:	2203      	movs	r2, #3
 8006232:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006234:	4b5e      	ldr	r3, [pc, #376]	; (80063b0 <state_machine+0x3c8>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800623c:	d930      	bls.n	80062a0 <state_machine+0x2b8>
 800623e:	4b5c      	ldr	r3, [pc, #368]	; (80063b0 <state_machine+0x3c8>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006246:	d82b      	bhi.n	80062a0 <state_machine+0x2b8>
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <state_machine+0x3c8>)
 800624a:	885b      	ldrh	r3, [r3, #2]
 800624c:	2b14      	cmp	r3, #20
 800624e:	d927      	bls.n	80062a0 <state_machine+0x2b8>
 8006250:	4b57      	ldr	r3, [pc, #348]	; (80063b0 <state_machine+0x3c8>)
 8006252:	885b      	ldrh	r3, [r3, #2]
 8006254:	2b65      	cmp	r3, #101	; 0x65
 8006256:	d823      	bhi.n	80062a0 <state_machine+0x2b8>
		{
			if(dab_management_to_display.total_services)
 8006258:	4b54      	ldr	r3, [pc, #336]	; (80063ac <state_machine+0x3c4>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01f      	beq.n	80062a0 <state_machine+0x2b8>
			{
				srv_list_start_index--;
 8006260:	4b51      	ldr	r3, [pc, #324]	; (80063a8 <state_machine+0x3c0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3b01      	subs	r3, #1
 8006266:	4a50      	ldr	r2, [pc, #320]	; (80063a8 <state_machine+0x3c0>)
 8006268:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 800626a:	4b50      	ldr	r3, [pc, #320]	; (80063ac <state_machine+0x3c4>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	4b4d      	ldr	r3, [pc, #308]	; (80063a8 <state_machine+0x3c0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	db03      	blt.n	8006280 <state_machine+0x298>
 8006278:	4b4b      	ldr	r3, [pc, #300]	; (80063a8 <state_machine+0x3c0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	da04      	bge.n	800628a <state_machine+0x2a2>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 8006280:	4b4a      	ldr	r3, [pc, #296]	; (80063ac <state_machine+0x3c4>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	3b01      	subs	r3, #1
 8006286:	4a48      	ldr	r2, [pc, #288]	; (80063a8 <state_machine+0x3c0>)
 8006288:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800628a:	4b47      	ldr	r3, [pc, #284]	; (80063a8 <state_machine+0x3c0>)
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <state_machine+0x3bc>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b46      	ldr	r3, [pc, #280]	; (80063ac <state_machine+0x3c4>)
 8006294:	9201      	str	r2, [sp, #4]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	9200      	str	r2, [sp, #0]
 800629a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800629c:	f7fd ff52 	bl	8004144 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 80062a0:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <state_machine+0x3c8>)
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80062a8:	d92a      	bls.n	8006300 <state_machine+0x318>
 80062aa:	4b41      	ldr	r3, [pc, #260]	; (80063b0 <state_machine+0x3c8>)
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80062b2:	d825      	bhi.n	8006300 <state_machine+0x318>
 80062b4:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <state_machine+0x3c8>)
 80062b6:	885b      	ldrh	r3, [r3, #2]
 80062b8:	2b6c      	cmp	r3, #108	; 0x6c
 80062ba:	d921      	bls.n	8006300 <state_machine+0x318>
 80062bc:	4b3c      	ldr	r3, [pc, #240]	; (80063b0 <state_machine+0x3c8>)
 80062be:	885b      	ldrh	r3, [r3, #2]
 80062c0:	2bbd      	cmp	r3, #189	; 0xbd
 80062c2:	d81d      	bhi.n	8006300 <state_machine+0x318>
		{
			if(dab_management_to_display.total_services)
 80062c4:	4b39      	ldr	r3, [pc, #228]	; (80063ac <state_machine+0x3c4>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d019      	beq.n	8006300 <state_machine+0x318>
			{
				srv_list_start_index++;
 80062cc:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <state_machine+0x3c0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a35      	ldr	r2, [pc, #212]	; (80063a8 <state_machine+0x3c0>)
 80062d4:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 80062d6:	4b35      	ldr	r3, [pc, #212]	; (80063ac <state_machine+0x3c4>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	4b32      	ldr	r3, [pc, #200]	; (80063a8 <state_machine+0x3c0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	dc02      	bgt.n	80062ea <state_machine+0x302>
				{
					srv_list_start_index = 0;
 80062e4:	4b30      	ldr	r3, [pc, #192]	; (80063a8 <state_machine+0x3c0>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80062ea:	4b2f      	ldr	r3, [pc, #188]	; (80063a8 <state_machine+0x3c0>)
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <state_machine+0x3bc>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <state_machine+0x3c4>)
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	9200      	str	r2, [sp, #0]
 80062fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062fc:	f7fd ff22 	bl	8004144 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 8006300:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <state_machine+0x3c8>)
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	2b05      	cmp	r3, #5
 8006306:	d91f      	bls.n	8006348 <state_machine+0x360>
 8006308:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <state_machine+0x3c8>)
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006310:	d81a      	bhi.n	8006348 <state_machine+0x360>
 8006312:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <state_machine+0x3c8>)
 8006314:	885b      	ldrh	r3, [r3, #2]
 8006316:	2b14      	cmp	r3, #20
 8006318:	d916      	bls.n	8006348 <state_machine+0x360>
 800631a:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <state_machine+0x3c8>)
 800631c:	885b      	ldrh	r3, [r3, #2]
 800631e:	2b31      	cmp	r3, #49	; 0x31
 8006320:	d812      	bhi.n	8006348 <state_machine+0x360>
		{
			if(dab_management_to_display.total_services)
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <state_machine+0x3c4>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <state_machine+0x360>
			{
				state_change_done = 0;
 800632a:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <state_machine+0x3b8>)
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8006330:	4b1d      	ldr	r3, [pc, #116]	; (80063a8 <state_machine+0x3c0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	4618      	mov	r0, r3
 8006338:	f7fc ff2e 	bl	8003198 <play_station>
				playing_state = playing;
 800633c:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <state_machine+0x3d0>)
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006342:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <state_machine+0x3cc>)
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <state_machine+0x3c8>)
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	2b05      	cmp	r3, #5
 800634e:	d943      	bls.n	80063d8 <state_machine+0x3f0>
 8006350:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <state_machine+0x3c8>)
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006358:	d83e      	bhi.n	80063d8 <state_machine+0x3f0>
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <state_machine+0x3c8>)
 800635c:	885b      	ldrh	r3, [r3, #2]
 800635e:	2b37      	cmp	r3, #55	; 0x37
 8006360:	d93a      	bls.n	80063d8 <state_machine+0x3f0>
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <state_machine+0x3c8>)
 8006364:	885b      	ldrh	r3, [r3, #2]
 8006366:	2b54      	cmp	r3, #84	; 0x54
 8006368:	d836      	bhi.n	80063d8 <state_machine+0x3f0>
		{
			if(dab_management_to_display.total_services)
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <state_machine+0x3c4>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d032      	beq.n	80063d8 <state_machine+0x3f0>
			{
				state_change_done = 0;
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <state_machine+0x3b8>)
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <state_machine+0x3c0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	4a0b      	ldr	r2, [pc, #44]	; (80063ac <state_machine+0x3c4>)
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	4293      	cmp	r3, r2
 8006384:	db1a      	blt.n	80063bc <state_machine+0x3d4>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <state_machine+0x3c0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <state_machine+0x3c4>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3301      	adds	r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	4618      	mov	r0, r3
 800639a:	f7fc fefd 	bl	8003198 <play_station>
 800639e:	e015      	b.n	80063cc <state_machine+0x3e4>
 80063a0:	2000700d 	.word	0x2000700d
 80063a4:	20007050 	.word	0x20007050
 80063a8:	20007010 	.word	0x20007010
 80063ac:	20007040 	.word	0x20007040
 80063b0:	20007014 	.word	0x20007014
 80063b4:	2000700c 	.word	0x2000700c
 80063b8:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 80063bc:	4b8d      	ldr	r3, [pc, #564]	; (80065f4 <state_machine+0x60c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	3301      	adds	r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fc fee6 	bl	8003198 <play_station>
				}

				playing_state = playing;
 80063cc:	4b8a      	ldr	r3, [pc, #552]	; (80065f8 <state_machine+0x610>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80063d2:	4b8a      	ldr	r3, [pc, #552]	; (80065fc <state_machine+0x614>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 80063d8:	4b89      	ldr	r3, [pc, #548]	; (8006600 <state_machine+0x618>)
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	2b05      	cmp	r3, #5
 80063de:	d935      	bls.n	800644c <state_machine+0x464>
 80063e0:	4b87      	ldr	r3, [pc, #540]	; (8006600 <state_machine+0x618>)
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80063e8:	d830      	bhi.n	800644c <state_machine+0x464>
 80063ea:	4b85      	ldr	r3, [pc, #532]	; (8006600 <state_machine+0x618>)
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	2b5a      	cmp	r3, #90	; 0x5a
 80063f0:	d92c      	bls.n	800644c <state_machine+0x464>
 80063f2:	4b83      	ldr	r3, [pc, #524]	; (8006600 <state_machine+0x618>)
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	2b77      	cmp	r3, #119	; 0x77
 80063f8:	d828      	bhi.n	800644c <state_machine+0x464>
		{
			if(dab_management_to_display.total_services)
 80063fa:	4b82      	ldr	r3, [pc, #520]	; (8006604 <state_machine+0x61c>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d024      	beq.n	800644c <state_machine+0x464>
			{
				state_change_done = 0;
 8006402:	4b81      	ldr	r3, [pc, #516]	; (8006608 <state_machine+0x620>)
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 8006408:	4b7a      	ldr	r3, [pc, #488]	; (80065f4 <state_machine+0x60c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3302      	adds	r3, #2
 800640e:	4a7d      	ldr	r2, [pc, #500]	; (8006604 <state_machine+0x61c>)
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	4293      	cmp	r3, r2
 8006414:	db0c      	blt.n	8006430 <state_machine+0x448>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 8006416:	4b77      	ldr	r3, [pc, #476]	; (80065f4 <state_machine+0x60c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b79      	ldr	r3, [pc, #484]	; (8006604 <state_machine+0x61c>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	3302      	adds	r3, #2
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4618      	mov	r0, r3
 800642a:	f7fc feb5 	bl	8003198 <play_station>
 800642e:	e007      	b.n	8006440 <state_machine+0x458>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 8006430:	4b70      	ldr	r3, [pc, #448]	; (80065f4 <state_machine+0x60c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	3302      	adds	r3, #2
 8006438:	b2db      	uxtb	r3, r3
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc feac 	bl	8003198 <play_station>
				}

				playing_state = playing;
 8006440:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <state_machine+0x610>)
 8006442:	2201      	movs	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006446:	4b6d      	ldr	r3, [pc, #436]	; (80065fc <state_machine+0x614>)
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 800644c:	4b6c      	ldr	r3, [pc, #432]	; (8006600 <state_machine+0x618>)
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	2b05      	cmp	r3, #5
 8006452:	d935      	bls.n	80064c0 <state_machine+0x4d8>
 8006454:	4b6a      	ldr	r3, [pc, #424]	; (8006600 <state_machine+0x618>)
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800645c:	d830      	bhi.n	80064c0 <state_machine+0x4d8>
 800645e:	4b68      	ldr	r3, [pc, #416]	; (8006600 <state_machine+0x618>)
 8006460:	885b      	ldrh	r3, [r3, #2]
 8006462:	2b7d      	cmp	r3, #125	; 0x7d
 8006464:	d92c      	bls.n	80064c0 <state_machine+0x4d8>
 8006466:	4b66      	ldr	r3, [pc, #408]	; (8006600 <state_machine+0x618>)
 8006468:	885b      	ldrh	r3, [r3, #2]
 800646a:	2b9a      	cmp	r3, #154	; 0x9a
 800646c:	d828      	bhi.n	80064c0 <state_machine+0x4d8>
		{
			if(dab_management_to_display.total_services)
 800646e:	4b65      	ldr	r3, [pc, #404]	; (8006604 <state_machine+0x61c>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d024      	beq.n	80064c0 <state_machine+0x4d8>
			{
				state_change_done = 0;
 8006476:	4b64      	ldr	r3, [pc, #400]	; (8006608 <state_machine+0x620>)
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 800647c:	4b5d      	ldr	r3, [pc, #372]	; (80065f4 <state_machine+0x60c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3303      	adds	r3, #3
 8006482:	4a60      	ldr	r2, [pc, #384]	; (8006604 <state_machine+0x61c>)
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	4293      	cmp	r3, r2
 8006488:	db0c      	blt.n	80064a4 <state_machine+0x4bc>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 800648a:	4b5a      	ldr	r3, [pc, #360]	; (80065f4 <state_machine+0x60c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b5c      	ldr	r3, [pc, #368]	; (8006604 <state_machine+0x61c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	3303      	adds	r3, #3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4618      	mov	r0, r3
 800649e:	f7fc fe7b 	bl	8003198 <play_station>
 80064a2:	e007      	b.n	80064b4 <state_machine+0x4cc>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 80064a4:	4b53      	ldr	r3, [pc, #332]	; (80065f4 <state_machine+0x60c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	3303      	adds	r3, #3
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fc fe72 	bl	8003198 <play_station>
				}

				playing_state = playing;
 80064b4:	4b50      	ldr	r3, [pc, #320]	; (80065f8 <state_machine+0x610>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80064ba:	4b50      	ldr	r3, [pc, #320]	; (80065fc <state_machine+0x614>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 80064c0:	4b4f      	ldr	r3, [pc, #316]	; (8006600 <state_machine+0x618>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	f240 819d 	bls.w	8006804 <state_machine+0x81c>
 80064ca:	4b4d      	ldr	r3, [pc, #308]	; (8006600 <state_machine+0x618>)
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80064d2:	f200 8197 	bhi.w	8006804 <state_machine+0x81c>
 80064d6:	4b4a      	ldr	r3, [pc, #296]	; (8006600 <state_machine+0x618>)
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	2ba0      	cmp	r3, #160	; 0xa0
 80064dc:	f240 8192 	bls.w	8006804 <state_machine+0x81c>
 80064e0:	4b47      	ldr	r3, [pc, #284]	; (8006600 <state_machine+0x618>)
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	2bbd      	cmp	r3, #189	; 0xbd
 80064e6:	f200 818d 	bhi.w	8006804 <state_machine+0x81c>
		{
			if(dab_management_to_display.total_services)
 80064ea:	4b46      	ldr	r3, [pc, #280]	; (8006604 <state_machine+0x61c>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 8188 	beq.w	8006804 <state_machine+0x81c>
			{
				state_change_done = 0;
 80064f4:	4b44      	ldr	r3, [pc, #272]	; (8006608 <state_machine+0x620>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 80064fa:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <state_machine+0x60c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3304      	adds	r3, #4
 8006500:	4a40      	ldr	r2, [pc, #256]	; (8006604 <state_machine+0x61c>)
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	4293      	cmp	r3, r2
 8006506:	db0c      	blt.n	8006522 <state_machine+0x53a>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 8006508:	4b3a      	ldr	r3, [pc, #232]	; (80065f4 <state_machine+0x60c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4b3d      	ldr	r3, [pc, #244]	; (8006604 <state_machine+0x61c>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	b2db      	uxtb	r3, r3
 8006516:	3304      	adds	r3, #4
 8006518:	b2db      	uxtb	r3, r3
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc fe3c 	bl	8003198 <play_station>
 8006520:	e007      	b.n	8006532 <state_machine+0x54a>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 8006522:	4b34      	ldr	r3, [pc, #208]	; (80065f4 <state_machine+0x60c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3304      	adds	r3, #4
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	f7fc fe33 	bl	8003198 <play_station>
				}

				playing_state = playing;
 8006532:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <state_machine+0x610>)
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006538:	4b30      	ldr	r3, [pc, #192]	; (80065fc <state_machine+0x614>)
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800653e:	e161      	b.n	8006804 <state_machine+0x81c>

	case signal_info:
		if(!state_change_done)
 8006540:	4b31      	ldr	r3, [pc, #196]	; (8006608 <state_machine+0x620>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <state_machine+0x56a>
		{
			Display_dab_digrad_status_background();
 8006548:	f7fe f998 	bl	800487c <Display_dab_digrad_status_background>
			state_change_done = 1;
 800654c:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <state_machine+0x620>)
 800654e:	2201      	movs	r2, #1
 8006550:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8006552:	4c2e      	ldr	r4, [pc, #184]	; (800660c <state_machine+0x624>)
 8006554:	f107 0308 	add.w	r3, r7, #8
 8006558:	4618      	mov	r0, r3
 800655a:	f7fb fb81 	bl	8001c60 <Si468x_dab_digrad_status>
 800655e:	4625      	mov	r5, r4
 8006560:	f107 0408 	add.w	r4, r7, #8
 8006564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800656a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800656c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006570:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8006574:	4e25      	ldr	r6, [pc, #148]	; (800660c <state_machine+0x624>)
 8006576:	466d      	mov	r5, sp
 8006578:	f106 0410 	add.w	r4, r6, #16
 800657c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800657e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006584:	e885 0003 	stmia.w	r5, {r0, r1}
 8006588:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800658c:	f7fe fb0e 	bl	8004bac <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <state_machine+0x618>)
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	2b05      	cmp	r3, #5
 8006596:	d911      	bls.n	80065bc <state_machine+0x5d4>
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <state_machine+0x618>)
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	2b9c      	cmp	r3, #156	; 0x9c
 800659e:	d80d      	bhi.n	80065bc <state_machine+0x5d4>
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <state_machine+0x618>)
 80065a2:	885b      	ldrh	r3, [r3, #2]
 80065a4:	2bc3      	cmp	r3, #195	; 0xc3
 80065a6:	d909      	bls.n	80065bc <state_machine+0x5d4>
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <state_machine+0x618>)
 80065aa:	885b      	ldrh	r3, [r3, #2]
 80065ac:	2bea      	cmp	r3, #234	; 0xea
 80065ae:	d805      	bhi.n	80065bc <state_machine+0x5d4>
		{
			state_change_done = 0;
 80065b0:	4b15      	ldr	r3, [pc, #84]	; (8006608 <state_machine+0x620>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <state_machine+0x614>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80065bc:	4b10      	ldr	r3, [pc, #64]	; (8006600 <state_machine+0x618>)
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	2ba3      	cmp	r3, #163	; 0xa3
 80065c2:	f240 8121 	bls.w	8006808 <state_machine+0x820>
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <state_machine+0x618>)
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80065ce:	f200 811b 	bhi.w	8006808 <state_machine+0x820>
 80065d2:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <state_machine+0x618>)
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	2bc3      	cmp	r3, #195	; 0xc3
 80065d8:	f240 8116 	bls.w	8006808 <state_machine+0x820>
 80065dc:	4b08      	ldr	r3, [pc, #32]	; (8006600 <state_machine+0x618>)
 80065de:	885b      	ldrh	r3, [r3, #2]
 80065e0:	2bea      	cmp	r3, #234	; 0xea
 80065e2:	f200 8111 	bhi.w	8006808 <state_machine+0x820>
		{
			state_change_done = 0;
 80065e6:	4b08      	ldr	r3, [pc, #32]	; (8006608 <state_machine+0x620>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <state_machine+0x614>)
 80065ee:	2204      	movs	r2, #4
 80065f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80065f2:	e109      	b.n	8006808 <state_machine+0x820>
 80065f4:	20007010 	.word	0x20007010
 80065f8:	20000150 	.word	0x20000150
 80065fc:	2000700c 	.word	0x2000700c
 8006600:	20007014 	.word	0x20007014
 8006604:	20007040 	.word	0x20007040
 8006608:	2000700d 	.word	0x2000700d
 800660c:	20007018 	.word	0x20007018

	case scanning:
		if(!state_change_done)
 8006610:	4b82      	ldr	r3, [pc, #520]	; (800681c <state_machine+0x834>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d116      	bne.n	8006646 <state_machine+0x65e>
		{
			playing_state = not_playing;
 8006618:	4b81      	ldr	r3, [pc, #516]	; (8006820 <state_machine+0x838>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 800661e:	f7fd ff2b 	bl	8004478 <Display_scanning_screen_background>
			state_change_done = 1;
 8006622:	4b7e      	ldr	r3, [pc, #504]	; (800681c <state_machine+0x834>)
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 8006628:	f7fb ff46 	bl	80024b8 <Si468x_dab_full_scan>
 800662c:	4603      	mov	r3, r0
 800662e:	461a      	mov	r2, r3
 8006630:	4b7c      	ldr	r3, [pc, #496]	; (8006824 <state_machine+0x83c>)
 8006632:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006634:	4b7b      	ldr	r3, [pc, #492]	; (8006824 <state_machine+0x83c>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <state_machine+0x65e>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 800663c:	f7fe f8e8 	bl	8004810 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8006640:	4b78      	ldr	r3, [pc, #480]	; (8006824 <state_machine+0x83c>)
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006646:	4b78      	ldr	r3, [pc, #480]	; (8006828 <state_machine+0x840>)
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	2b05      	cmp	r3, #5
 800664c:	f240 80de 	bls.w	800680c <state_machine+0x824>
 8006650:	4b75      	ldr	r3, [pc, #468]	; (8006828 <state_machine+0x840>)
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006658:	f200 80d8 	bhi.w	800680c <state_machine+0x824>
 800665c:	4b72      	ldr	r3, [pc, #456]	; (8006828 <state_machine+0x840>)
 800665e:	885b      	ldrh	r3, [r3, #2]
 8006660:	2bc3      	cmp	r3, #195	; 0xc3
 8006662:	f240 80d3 	bls.w	800680c <state_machine+0x824>
 8006666:	4b70      	ldr	r3, [pc, #448]	; (8006828 <state_machine+0x840>)
 8006668:	885b      	ldrh	r3, [r3, #2]
 800666a:	2bea      	cmp	r3, #234	; 0xea
 800666c:	f200 80ce 	bhi.w	800680c <state_machine+0x824>
		{
			scan_cancel_flag = 1;
 8006670:	4b6e      	ldr	r3, [pc, #440]	; (800682c <state_machine+0x844>)
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 8006676:	4b69      	ldr	r3, [pc, #420]	; (800681c <state_machine+0x834>)
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 800667c:	4b6c      	ldr	r3, [pc, #432]	; (8006830 <state_machine+0x848>)
 800667e:	2204      	movs	r2, #4
 8006680:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006682:	e0c3      	b.n	800680c <state_machine+0x824>

	case settings:
		if(!state_change_done)
 8006684:	4b65      	ldr	r3, [pc, #404]	; (800681c <state_machine+0x834>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d107      	bne.n	800669c <state_machine+0x6b4>
		{
			Display_settings_screen_background();
 800668c:	f7fe fdf8 	bl	8005280 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 8006690:	4b66      	ldr	r3, [pc, #408]	; (800682c <state_machine+0x844>)
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 8006696:	4b61      	ldr	r3, [pc, #388]	; (800681c <state_machine+0x834>)
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 800669c:	4b65      	ldr	r3, [pc, #404]	; (8006834 <state_machine+0x84c>)
 800669e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066a0:	f7fe fee6 	bl	8005470 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80066a4:	4b60      	ldr	r3, [pc, #384]	; (8006828 <state_machine+0x840>)
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	2ba3      	cmp	r3, #163	; 0xa3
 80066aa:	d91e      	bls.n	80066ea <state_machine+0x702>
 80066ac:	4b5e      	ldr	r3, [pc, #376]	; (8006828 <state_machine+0x840>)
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80066b4:	d819      	bhi.n	80066ea <state_machine+0x702>
 80066b6:	4b5c      	ldr	r3, [pc, #368]	; (8006828 <state_machine+0x840>)
 80066b8:	885b      	ldrh	r3, [r3, #2]
 80066ba:	2b3c      	cmp	r3, #60	; 0x3c
 80066bc:	d915      	bls.n	80066ea <state_machine+0x702>
 80066be:	4b5a      	ldr	r3, [pc, #360]	; (8006828 <state_machine+0x840>)
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	2b63      	cmp	r3, #99	; 0x63
 80066c4:	d811      	bhi.n	80066ea <state_machine+0x702>
		{
			dab_management_to_display.audio_volume += 2;
 80066c6:	4b5b      	ldr	r3, [pc, #364]	; (8006834 <state_machine+0x84c>)
 80066c8:	7b9b      	ldrb	r3, [r3, #14]
 80066ca:	3302      	adds	r3, #2
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	4b59      	ldr	r3, [pc, #356]	; (8006834 <state_machine+0x84c>)
 80066d0:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 80066d2:	4b58      	ldr	r3, [pc, #352]	; (8006834 <state_machine+0x84c>)
 80066d4:	7b9b      	ldrb	r3, [r3, #14]
 80066d6:	2b3f      	cmp	r3, #63	; 0x3f
 80066d8:	d902      	bls.n	80066e0 <state_machine+0x6f8>
			{
				dab_management_to_display.audio_volume = 63;
 80066da:	4b56      	ldr	r3, [pc, #344]	; (8006834 <state_machine+0x84c>)
 80066dc:	223f      	movs	r2, #63	; 0x3f
 80066de:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80066e0:	4b54      	ldr	r3, [pc, #336]	; (8006834 <state_machine+0x84c>)
 80066e2:	7b9b      	ldrb	r3, [r3, #14]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fc fd21 	bl	800312c <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80066ea:	4b4f      	ldr	r3, [pc, #316]	; (8006828 <state_machine+0x840>)
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d91d      	bls.n	800672e <state_machine+0x746>
 80066f2:	4b4d      	ldr	r3, [pc, #308]	; (8006828 <state_machine+0x840>)
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	2b9c      	cmp	r3, #156	; 0x9c
 80066f8:	d819      	bhi.n	800672e <state_machine+0x746>
 80066fa:	4b4b      	ldr	r3, [pc, #300]	; (8006828 <state_machine+0x840>)
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	2b3c      	cmp	r3, #60	; 0x3c
 8006700:	d915      	bls.n	800672e <state_machine+0x746>
 8006702:	4b49      	ldr	r3, [pc, #292]	; (8006828 <state_machine+0x840>)
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	2b63      	cmp	r3, #99	; 0x63
 8006708:	d811      	bhi.n	800672e <state_machine+0x746>
		{
			dab_management_to_display.audio_volume -= 2;
 800670a:	4b4a      	ldr	r3, [pc, #296]	; (8006834 <state_machine+0x84c>)
 800670c:	7b9b      	ldrb	r3, [r3, #14]
 800670e:	3b02      	subs	r3, #2
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4b48      	ldr	r3, [pc, #288]	; (8006834 <state_machine+0x84c>)
 8006714:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 8006716:	4b47      	ldr	r3, [pc, #284]	; (8006834 <state_machine+0x84c>)
 8006718:	7b9b      	ldrb	r3, [r3, #14]
 800671a:	2b3f      	cmp	r3, #63	; 0x3f
 800671c:	d902      	bls.n	8006724 <state_machine+0x73c>
			{
				dab_management_to_display.audio_volume = 0;
 800671e:	4b45      	ldr	r3, [pc, #276]	; (8006834 <state_machine+0x84c>)
 8006720:	2200      	movs	r2, #0
 8006722:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006724:	4b43      	ldr	r3, [pc, #268]	; (8006834 <state_machine+0x84c>)
 8006726:	7b9b      	ldrb	r3, [r3, #14]
 8006728:	4618      	mov	r0, r3
 800672a:	f7fc fcff 	bl	800312c <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800672e:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <state_machine+0x840>)
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	2ba3      	cmp	r3, #163	; 0xa3
 8006734:	d907      	bls.n	8006746 <state_machine+0x75e>
 8006736:	4b3c      	ldr	r3, [pc, #240]	; (8006828 <state_machine+0x840>)
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800673e:	d802      	bhi.n	8006746 <state_machine+0x75e>
 8006740:	4b39      	ldr	r3, [pc, #228]	; (8006828 <state_machine+0x840>)
 8006742:	885b      	ldrh	r3, [r3, #2]
 8006744:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006746:	4b38      	ldr	r3, [pc, #224]	; (8006828 <state_machine+0x840>)
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	2b05      	cmp	r3, #5
 800674c:	d906      	bls.n	800675c <state_machine+0x774>
 800674e:	4b36      	ldr	r3, [pc, #216]	; (8006828 <state_machine+0x840>)
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	2b9c      	cmp	r3, #156	; 0x9c
 8006754:	d802      	bhi.n	800675c <state_machine+0x774>
 8006756:	4b34      	ldr	r3, [pc, #208]	; (8006828 <state_machine+0x840>)
 8006758:	885b      	ldrh	r3, [r3, #2]
 800675a:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 800675c:	4b32      	ldr	r3, [pc, #200]	; (8006828 <state_machine+0x840>)
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	2b05      	cmp	r3, #5
 8006762:	d911      	bls.n	8006788 <state_machine+0x7a0>
 8006764:	4b30      	ldr	r3, [pc, #192]	; (8006828 <state_machine+0x840>)
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	2b9c      	cmp	r3, #156	; 0x9c
 800676a:	d80d      	bhi.n	8006788 <state_machine+0x7a0>
 800676c:	4b2e      	ldr	r3, [pc, #184]	; (8006828 <state_machine+0x840>)
 800676e:	885b      	ldrh	r3, [r3, #2]
 8006770:	2b96      	cmp	r3, #150	; 0x96
 8006772:	d909      	bls.n	8006788 <state_machine+0x7a0>
 8006774:	4b2c      	ldr	r3, [pc, #176]	; (8006828 <state_machine+0x840>)
 8006776:	885b      	ldrh	r3, [r3, #2]
 8006778:	2bbd      	cmp	r3, #189	; 0xbd
 800677a:	d805      	bhi.n	8006788 <state_machine+0x7a0>
		{
			state_change_done = 0;
 800677c:	4b27      	ldr	r3, [pc, #156]	; (800681c <state_machine+0x834>)
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 8006782:	4b2b      	ldr	r3, [pc, #172]	; (8006830 <state_machine+0x848>)
 8006784:	2202      	movs	r2, #2
 8006786:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006788:	4b27      	ldr	r3, [pc, #156]	; (8006828 <state_machine+0x840>)
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	2ba3      	cmp	r3, #163	; 0xa3
 800678e:	d907      	bls.n	80067a0 <state_machine+0x7b8>
 8006790:	4b25      	ldr	r3, [pc, #148]	; (8006828 <state_machine+0x840>)
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006798:	d802      	bhi.n	80067a0 <state_machine+0x7b8>
 800679a:	4b23      	ldr	r3, [pc, #140]	; (8006828 <state_machine+0x840>)
 800679c:	885b      	ldrh	r3, [r3, #2]
 800679e:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80067a0:	4b21      	ldr	r3, [pc, #132]	; (8006828 <state_machine+0x840>)
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d911      	bls.n	80067cc <state_machine+0x7e4>
 80067a8:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <state_machine+0x840>)
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	2b9c      	cmp	r3, #156	; 0x9c
 80067ae:	d80d      	bhi.n	80067cc <state_machine+0x7e4>
 80067b0:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <state_machine+0x840>)
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	2bc3      	cmp	r3, #195	; 0xc3
 80067b6:	d909      	bls.n	80067cc <state_machine+0x7e4>
 80067b8:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <state_machine+0x840>)
 80067ba:	885b      	ldrh	r3, [r3, #2]
 80067bc:	2bea      	cmp	r3, #234	; 0xea
 80067be:	d805      	bhi.n	80067cc <state_machine+0x7e4>
		{
			state_change_done = 0;
 80067c0:	4b16      	ldr	r3, [pc, #88]	; (800681c <state_machine+0x834>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <state_machine+0x848>)
 80067c8:	2203      	movs	r2, #3
 80067ca:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80067cc:	4b16      	ldr	r3, [pc, #88]	; (8006828 <state_machine+0x840>)
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2ba3      	cmp	r3, #163	; 0xa3
 80067d2:	d91d      	bls.n	8006810 <state_machine+0x828>
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <state_machine+0x840>)
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80067dc:	d818      	bhi.n	8006810 <state_machine+0x828>
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <state_machine+0x840>)
 80067e0:	885b      	ldrh	r3, [r3, #2]
 80067e2:	2bc3      	cmp	r3, #195	; 0xc3
 80067e4:	d914      	bls.n	8006810 <state_machine+0x828>
 80067e6:	4b10      	ldr	r3, [pc, #64]	; (8006828 <state_machine+0x840>)
 80067e8:	885b      	ldrh	r3, [r3, #2]
 80067ea:	2bea      	cmp	r3, #234	; 0xea
 80067ec:	d810      	bhi.n	8006810 <state_machine+0x828>
		{
			state_change_done = 0;
 80067ee:	4b0b      	ldr	r3, [pc, #44]	; (800681c <state_machine+0x834>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <state_machine+0x848>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
		}


		break;
 80067fa:	e009      	b.n	8006810 <state_machine+0x828>

	default:
		break;
 80067fc:	bf00      	nop
 80067fe:	e008      	b.n	8006812 <state_machine+0x82a>
		break;
 8006800:	bf00      	nop
 8006802:	e006      	b.n	8006812 <state_machine+0x82a>
		break;
 8006804:	bf00      	nop
 8006806:	e004      	b.n	8006812 <state_machine+0x82a>
		break;
 8006808:	bf00      	nop
 800680a:	e002      	b.n	8006812 <state_machine+0x82a>
		break;
 800680c:	bf00      	nop
 800680e:	e000      	b.n	8006812 <state_machine+0x82a>
		break;
 8006810:	bf00      	nop
	}
}
 8006812:	bf00      	nop
 8006814:	3744      	adds	r7, #68	; 0x44
 8006816:	46bd      	mov	sp, r7
 8006818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681a:	bf00      	nop
 800681c:	2000700d 	.word	0x2000700d
 8006820:	20000150 	.word	0x20000150
 8006824:	2000706d 	.word	0x2000706d
 8006828:	20007014 	.word	0x20007014
 800682c:	2000706c 	.word	0x2000706c
 8006830:	2000700c 	.word	0x2000700c
 8006834:	20007040 	.word	0x20007040

08006838 <HAL_MspInit>:
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <HAL_MspInit+0x4c>)
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	4a0f      	ldr	r2, [pc, #60]	; (8006884 <HAL_MspInit+0x4c>)
 8006848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800684c:	6453      	str	r3, [r2, #68]	; 0x44
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <HAL_MspInit+0x4c>)
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2300      	movs	r3, #0
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_MspInit+0x4c>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	4a08      	ldr	r2, [pc, #32]	; (8006884 <HAL_MspInit+0x4c>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006868:	6413      	str	r3, [r2, #64]	; 0x40
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <HAL_MspInit+0x4c>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40023800 	.word	0x40023800

08006888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800688c:	e7fe      	b.n	800688c <NMI_Handler+0x4>

0800688e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006892:	e7fe      	b.n	8006892 <HardFault_Handler+0x4>

08006894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006898:	e7fe      	b.n	8006898 <MemManage_Handler+0x4>

0800689a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800689e:	e7fe      	b.n	800689e <BusFault_Handler+0x4>

080068a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068a4:	e7fe      	b.n	80068a4 <UsageFault_Handler+0x4>

080068a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068a6:	b480      	push	{r7}
 80068a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068aa:	bf00      	nop
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068d4:	f000 fd26 	bl	8007324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}

080068dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80068e0:	4802      	ldr	r0, [pc, #8]	; (80068ec <DMA1_Stream4_IRQHandler+0x10>)
 80068e2:	f000 ff45 	bl	8007770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20006fac 	.word	0x20006fac

080068f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80068f4:	4802      	ldr	r0, [pc, #8]	; (8006900 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80068f6:	f005 fc5a 	bl	800c1ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	200070b8 	.word	0x200070b8

08006904 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006908:	4802      	ldr	r0, [pc, #8]	; (8006914 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800690a:	f005 fc50 	bl	800c1ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20007100 	.word	0x20007100

08006918 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800691c:	4802      	ldr	r0, [pc, #8]	; (8006928 <SPI2_IRQHandler+0x10>)
 800691e:	f005 f8e9 	bl	800baf4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20006f54 	.word	0x20006f54

0800692c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8006930:	4802      	ldr	r0, [pc, #8]	; (800693c <I2C3_EV_IRQHandler+0x10>)
 8006932:	f001 ff99 	bl	8008868 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8006936:	bf00      	nop
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20006ea8 	.word	0x20006ea8

08006940 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006944:	4802      	ldr	r0, [pc, #8]	; (8006950 <I2C3_ER_IRQHandler+0x10>)
 8006946:	f002 f900 	bl	8008b4a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20006ea8 	.word	0x20006ea8

08006954 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <SystemInit>:
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <SystemInit+0x20>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	4a05      	ldr	r2, [pc, #20]	; (8006988 <SystemInit+0x20>)
 8006974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000ed00 	.word	0xe000ed00

0800698c <MX_TIM3_Init>:
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	f107 0320 	add.w	r3, r7, #32
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	1d3b      	adds	r3, r7, #4
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	609a      	str	r2, [r3, #8]
 80069a6:	60da      	str	r2, [r3, #12]
 80069a8:	611a      	str	r2, [r3, #16]
 80069aa:	615a      	str	r2, [r3, #20]
 80069ac:	619a      	str	r2, [r3, #24]
 80069ae:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069b0:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <MX_TIM3_Init+0xb0>)
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069bc:	2200      	movs	r2, #0
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	611a      	str	r2, [r3, #16]
 80069ce:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	619a      	str	r2, [r3, #24]
 80069d4:	4818      	ldr	r0, [pc, #96]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069d6:	f005 fb9b 	bl	800c110 <HAL_TIM_PWM_Init>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <MX_TIM3_Init+0x58>
 80069e0:	f7ff f9d8 	bl	8005d94 <Error_Handler>
 80069e4:	2300      	movs	r3, #0
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	2300      	movs	r3, #0
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
 80069ec:	f107 0320 	add.w	r3, r7, #32
 80069f0:	4619      	mov	r1, r3
 80069f2:	4811      	ldr	r0, [pc, #68]	; (8006a38 <MX_TIM3_Init+0xac>)
 80069f4:	f006 f81e 	bl	800ca34 <HAL_TIMEx_MasterConfigSynchronization>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <MX_TIM3_Init+0x76>
 80069fe:	f7ff f9c9 	bl	8005d94 <Error_Handler>
 8006a02:	2360      	movs	r3, #96	; 0x60
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	2208      	movs	r2, #8
 8006a16:	4619      	mov	r1, r3
 8006a18:	4807      	ldr	r0, [pc, #28]	; (8006a38 <MX_TIM3_Init+0xac>)
 8006a1a:	f005 fcd1 	bl	800c3c0 <HAL_TIM_PWM_ConfigChannel>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_TIM3_Init+0x9c>
 8006a24:	f7ff f9b6 	bl	8005d94 <Error_Handler>
 8006a28:	4803      	ldr	r0, [pc, #12]	; (8006a38 <MX_TIM3_Init+0xac>)
 8006a2a:	f000 f8b9 	bl	8006ba0 <HAL_TIM_MspPostInit>
 8006a2e:	bf00      	nop
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20007070 	.word	0x20007070
 8006a3c:	40000400 	.word	0x40000400

08006a40 <MX_TIM10_Init>:
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a46:	4a0f      	ldr	r2, [pc, #60]	; (8006a84 <MX_TIM10_Init+0x44>)
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a4c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a5a:	f240 2257 	movw	r2, #599	; 0x257
 8006a5e:	60da      	str	r2, [r3, #12]
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	611a      	str	r2, [r3, #16]
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	619a      	str	r2, [r3, #24]
 8006a6c:	4804      	ldr	r0, [pc, #16]	; (8006a80 <MX_TIM10_Init+0x40>)
 8006a6e:	f005 fa8f 	bl	800bf90 <HAL_TIM_Base_Init>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <MX_TIM10_Init+0x3c>
 8006a78:	f7ff f98c 	bl	8005d94 <Error_Handler>
 8006a7c:	bf00      	nop
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	200070b8 	.word	0x200070b8
 8006a84:	40014400 	.word	0x40014400

08006a88 <MX_TIM11_Init>:
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006a8e:	4a0f      	ldr	r2, [pc, #60]	; (8006acc <MX_TIM11_Init+0x44>)
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006a94:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	609a      	str	r2, [r3, #8]
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006aa2:	f240 5213 	movw	r2, #1299	; 0x513
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	611a      	str	r2, [r3, #16]
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	619a      	str	r2, [r3, #24]
 8006ab4:	4804      	ldr	r0, [pc, #16]	; (8006ac8 <MX_TIM11_Init+0x40>)
 8006ab6:	f005 fa6b 	bl	800bf90 <HAL_TIM_Base_Init>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <MX_TIM11_Init+0x3c>
 8006ac0:	f7ff f968 	bl	8005d94 <Error_Handler>
 8006ac4:	bf00      	nop
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20007100 	.word	0x20007100
 8006acc:	40014800 	.word	0x40014800

08006ad0 <HAL_TIM_PWM_MspInit>:
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <HAL_TIM_PWM_MspInit+0x3c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d10d      	bne.n	8006afe <HAL_TIM_PWM_MspInit+0x2e>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_TIM_PWM_MspInit+0x40>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <HAL_TIM_PWM_MspInit+0x40>)
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	6413      	str	r3, [r2, #64]	; 0x40
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <HAL_TIM_PWM_MspInit+0x40>)
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	bf00      	nop
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40023800 	.word	0x40023800

08006b14 <HAL_TIM_Base_MspInit>:
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <HAL_TIM_Base_MspInit+0x80>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d116      	bne.n	8006b54 <HAL_TIM_Base_MspInit+0x40>
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	4b1b      	ldr	r3, [pc, #108]	; (8006b98 <HAL_TIM_Base_MspInit+0x84>)
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	; (8006b98 <HAL_TIM_Base_MspInit+0x84>)
 8006b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b34:	6453      	str	r3, [r2, #68]	; 0x44
 8006b36:	4b18      	ldr	r3, [pc, #96]	; (8006b98 <HAL_TIM_Base_MspInit+0x84>)
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	2100      	movs	r1, #0
 8006b46:	2019      	movs	r0, #25
 8006b48:	f000 fd0b 	bl	8007562 <HAL_NVIC_SetPriority>
 8006b4c:	2019      	movs	r0, #25
 8006b4e:	f000 fd24 	bl	800759a <HAL_NVIC_EnableIRQ>
 8006b52:	e01a      	b.n	8006b8a <HAL_TIM_Base_MspInit+0x76>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <HAL_TIM_Base_MspInit+0x88>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d115      	bne.n	8006b8a <HAL_TIM_Base_MspInit+0x76>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <HAL_TIM_Base_MspInit+0x84>)
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <HAL_TIM_Base_MspInit+0x84>)
 8006b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <HAL_TIM_Base_MspInit+0x84>)
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	201a      	movs	r0, #26
 8006b80:	f000 fcef 	bl	8007562 <HAL_NVIC_SetPriority>
 8006b84:	201a      	movs	r0, #26
 8006b86:	f000 fd08 	bl	800759a <HAL_NVIC_EnableIRQ>
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40014400 	.word	0x40014400
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40014800 	.word	0x40014800

08006ba0 <HAL_TIM_MspPostInit>:
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	609a      	str	r2, [r3, #8]
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	611a      	str	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <HAL_TIM_MspPostInit+0x68>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d11e      	bne.n	8006c00 <HAL_TIM_MspPostInit+0x60>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <HAL_TIM_MspPostInit+0x6c>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	4a10      	ldr	r2, [pc, #64]	; (8006c0c <HAL_TIM_MspPostInit+0x6c>)
 8006bcc:	f043 0304 	orr.w	r3, r3, #4
 8006bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <HAL_TIM_MspPostInit+0x6c>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	2302      	movs	r3, #2
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4805      	ldr	r0, [pc, #20]	; (8006c10 <HAL_TIM_MspPostInit+0x70>)
 8006bfc:	f001 f802 	bl	8007c04 <HAL_GPIO_Init>
 8006c00:	bf00      	nop
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40020800 	.word	0x40020800

08006c14 <Touch_read>:
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <Touch_read+0xa0>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2000      	movs	r0, #0
 8006c20:	4798      	blx	r3
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <Touch_read+0xa0>)
 8006c24:	7c1b      	ldrb	r3, [r3, #16]
 8006c26:	b25b      	sxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da32      	bge.n	8006c92 <Touch_read+0x7e>
 8006c2c:	20d0      	movs	r0, #208	; 0xd0
 8006c2e:	f000 f8e9 	bl	8006e04 <TP_Read_XOY>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <Touch_read+0xa4>)
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	2090      	movs	r0, #144	; 0x90
 8006c3c:	f000 f8e2 	bl	8006e04 <TP_Read_XOY>
 8006c40:	4603      	mov	r3, r0
 8006c42:	461a      	mov	r2, r3
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <Touch_read+0xa8>)
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <Touch_read+0xa8>)
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	019b      	lsls	r3, r3, #6
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <Touch_read+0xac>)
 8006c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8006c5e:	441a      	add	r2, r3
 8006c60:	12d2      	asrs	r2, r2, #11
 8006c62:	17db      	asrs	r3, r3, #31
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	803b      	strh	r3, [r7, #0]
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <Touch_read+0xa4>)
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	3bf0      	subs	r3, #240	; 0xf0
 8006c76:	22e6      	movs	r2, #230	; 0xe6
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <Touch_read+0xb0>)
 8006c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8006c82:	1252      	asrs	r2, r2, #9
 8006c84:	17db      	asrs	r3, r3, #31
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	33f0      	adds	r3, #240	; 0xf0
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	807b      	strh	r3, [r7, #2]
 8006c90:	e003      	b.n	8006c9a <Touch_read+0x86>
 8006c92:	2300      	movs	r3, #0
 8006c94:	803b      	strh	r3, [r7, #0]
 8006c96:	2300      	movs	r3, #0
 8006c98:	807b      	strh	r3, [r7, #2]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	88ba      	ldrh	r2, [r7, #4]
 8006ca2:	f362 030f 	bfi	r3, r2, #0, #16
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	f362 431f 	bfi	r3, r2, #16, #16
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000158 	.word	0x20000158
 8006cb8:	20007148 	.word	0x20007148
 8006cbc:	2000714a 	.word	0x2000714a
 8006cc0:	93afcf8b 	.word	0x93afcf8b
 8006cc4:	24b70025 	.word	0x24b70025

08006cc8 <TP_Write_Byte>:
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e021      	b.n	8006d20 <TP_Write_Byte+0x58>
 8006cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	da05      	bge.n	8006cf0 <TP_Write_Byte+0x28>
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	2120      	movs	r1, #32
 8006ce8:	4811      	ldr	r0, [pc, #68]	; (8006d30 <TP_Write_Byte+0x68>)
 8006cea:	f001 f93f 	bl	8007f6c <HAL_GPIO_WritePin>
 8006cee:	e004      	b.n	8006cfa <TP_Write_Byte+0x32>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2120      	movs	r1, #32
 8006cf4:	480e      	ldr	r0, [pc, #56]	; (8006d30 <TP_Write_Byte+0x68>)
 8006cf6:	f001 f939 	bl	8007f6c <HAL_GPIO_WritePin>
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	2200      	movs	r2, #0
 8006d02:	2108      	movs	r1, #8
 8006d04:	480a      	ldr	r0, [pc, #40]	; (8006d30 <TP_Write_Byte+0x68>)
 8006d06:	f001 f931 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	f000 fb2a 	bl	8007364 <HAL_Delay>
 8006d10:	2201      	movs	r2, #1
 8006d12:	2108      	movs	r1, #8
 8006d14:	4806      	ldr	r0, [pc, #24]	; (8006d30 <TP_Write_Byte+0x68>)
 8006d16:	f001 f929 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b07      	cmp	r3, #7
 8006d24:	d9da      	bls.n	8006cdc <TP_Write_Byte+0x14>
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40020400 	.word	0x40020400

08006d34 <TP_Read_AD>:
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	71fb      	strb	r3, [r7, #7]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	2300      	movs	r3, #0
 8006d44:	81bb      	strh	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	2108      	movs	r1, #8
 8006d4a:	482c      	ldr	r0, [pc, #176]	; (8006dfc <TP_Read_AD+0xc8>)
 8006d4c:	f001 f90e 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d50:	2200      	movs	r2, #0
 8006d52:	2120      	movs	r1, #32
 8006d54:	4829      	ldr	r0, [pc, #164]	; (8006dfc <TP_Read_AD+0xc8>)
 8006d56:	f001 f909 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2180      	movs	r1, #128	; 0x80
 8006d5e:	4828      	ldr	r0, [pc, #160]	; (8006e00 <TP_Read_AD+0xcc>)
 8006d60:	f001 f904 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff ffae 	bl	8006cc8 <TP_Write_Byte>
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f000 faf9 	bl	8007364 <HAL_Delay>
 8006d72:	2200      	movs	r2, #0
 8006d74:	2108      	movs	r1, #8
 8006d76:	4821      	ldr	r0, [pc, #132]	; (8006dfc <TP_Read_AD+0xc8>)
 8006d78:	f001 f8f8 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f000 faf1 	bl	8007364 <HAL_Delay>
 8006d82:	2201      	movs	r2, #1
 8006d84:	2108      	movs	r1, #8
 8006d86:	481d      	ldr	r0, [pc, #116]	; (8006dfc <TP_Read_AD+0xc8>)
 8006d88:	f001 f8f0 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f000 fae9 	bl	8007364 <HAL_Delay>
 8006d92:	2200      	movs	r2, #0
 8006d94:	2108      	movs	r1, #8
 8006d96:	4819      	ldr	r0, [pc, #100]	; (8006dfc <TP_Read_AD+0xc8>)
 8006d98:	f001 f8e8 	bl	8007f6c <HAL_GPIO_WritePin>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
 8006da0:	e01c      	b.n	8006ddc <TP_Read_AD+0xa8>
 8006da2:	89bb      	ldrh	r3, [r7, #12]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	81bb      	strh	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	2108      	movs	r1, #8
 8006dac:	4813      	ldr	r0, [pc, #76]	; (8006dfc <TP_Read_AD+0xc8>)
 8006dae:	f001 f8dd 	bl	8007f6c <HAL_GPIO_WritePin>
 8006db2:	2001      	movs	r0, #1
 8006db4:	f000 fad6 	bl	8007364 <HAL_Delay>
 8006db8:	2201      	movs	r2, #1
 8006dba:	2108      	movs	r1, #8
 8006dbc:	480f      	ldr	r0, [pc, #60]	; (8006dfc <TP_Read_AD+0xc8>)
 8006dbe:	f001 f8d5 	bl	8007f6c <HAL_GPIO_WritePin>
 8006dc2:	2110      	movs	r1, #16
 8006dc4:	480d      	ldr	r0, [pc, #52]	; (8006dfc <TP_Read_AD+0xc8>)
 8006dc6:	f001 f8b9 	bl	8007f3c <HAL_GPIO_ReadPin>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <TP_Read_AD+0xa2>
 8006dd0:	89bb      	ldrh	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	81bb      	strh	r3, [r7, #12]
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b0f      	cmp	r3, #15
 8006de0:	d9df      	bls.n	8006da2 <TP_Read_AD+0x6e>
 8006de2:	89bb      	ldrh	r3, [r7, #12]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	81bb      	strh	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	4804      	ldr	r0, [pc, #16]	; (8006e00 <TP_Read_AD+0xcc>)
 8006dee:	f001 f8bd 	bl	8007f6c <HAL_GPIO_WritePin>
 8006df2:	89bb      	ldrh	r3, [r7, #12]
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40020400 	.word	0x40020400
 8006e00:	40020c00 	.word	0x40020c00

08006e04 <TP_Read_XOY>:
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff ff8f 	bl	8006d34 <TP_Read_AD>
 8006e16:	bf00      	nop
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <TP_Read_XY>:
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <TP_Read_XY+0x3c>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff ffe8 	bl	8006e04 <TP_Read_XOY>
 8006e34:	4603      	mov	r3, r0
 8006e36:	81fb      	strh	r3, [r7, #14]
 8006e38:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <TP_Read_XY+0x40>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff ffe1 	bl	8006e04 <TP_Read_XOY>
 8006e42:	4603      	mov	r3, r0
 8006e44:	81bb      	strh	r3, [r7, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	89fa      	ldrh	r2, [r7, #14]
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	89ba      	ldrh	r2, [r7, #12]
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	2301      	movs	r3, #1
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	2000017c 	.word	0x2000017c
 8006e60:	2000017d 	.word	0x2000017d

08006e64 <TP_Read_XY2>:
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	f107 0212 	add.w	r2, r7, #18
 8006e72:	f107 0314 	add.w	r3, r7, #20
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff ffd1 	bl	8006e20 <TP_Read_XY>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <TP_Read_XY2+0x28>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e049      	b.n	8006f20 <TP_Read_XY2+0xbc>
 8006e8c:	f107 020e 	add.w	r2, r7, #14
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff ffc2 	bl	8006e20 <TP_Read_XY>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <TP_Read_XY2+0x46>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e03a      	b.n	8006f20 <TP_Read_XY2+0xbc>
 8006eaa:	8a3a      	ldrh	r2, [r7, #16]
 8006eac:	8abb      	ldrh	r3, [r7, #20]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d804      	bhi.n	8006ebc <TP_Read_XY2+0x58>
 8006eb2:	8a3b      	ldrh	r3, [r7, #16]
 8006eb4:	3331      	adds	r3, #49	; 0x31
 8006eb6:	8aba      	ldrh	r2, [r7, #20]
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	da08      	bge.n	8006ece <TP_Read_XY2+0x6a>
 8006ebc:	8aba      	ldrh	r2, [r7, #20]
 8006ebe:	8a3b      	ldrh	r3, [r7, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d82c      	bhi.n	8006f1e <TP_Read_XY2+0xba>
 8006ec4:	8abb      	ldrh	r3, [r7, #20]
 8006ec6:	3331      	adds	r3, #49	; 0x31
 8006ec8:	8a3a      	ldrh	r2, [r7, #16]
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	db27      	blt.n	8006f1e <TP_Read_XY2+0xba>
 8006ece:	89fa      	ldrh	r2, [r7, #14]
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d804      	bhi.n	8006ee0 <TP_Read_XY2+0x7c>
 8006ed6:	89fb      	ldrh	r3, [r7, #14]
 8006ed8:	3331      	adds	r3, #49	; 0x31
 8006eda:	8a7a      	ldrh	r2, [r7, #18]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	da08      	bge.n	8006ef2 <TP_Read_XY2+0x8e>
 8006ee0:	8a7a      	ldrh	r2, [r7, #18]
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d81a      	bhi.n	8006f1e <TP_Read_XY2+0xba>
 8006ee8:	8a7b      	ldrh	r3, [r7, #18]
 8006eea:	3331      	adds	r3, #49	; 0x31
 8006eec:	89fa      	ldrh	r2, [r7, #14]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	db15      	blt.n	8006f1e <TP_Read_XY2+0xba>
 8006ef2:	8abb      	ldrh	r3, [r7, #20]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	8a3b      	ldrh	r3, [r7, #16]
 8006ef8:	4413      	add	r3, r2
 8006efa:	0fda      	lsrs	r2, r3, #31
 8006efc:	4413      	add	r3, r2
 8006efe:	105b      	asrs	r3, r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	801a      	strh	r2, [r3, #0]
 8006f06:	8a7b      	ldrh	r3, [r7, #18]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	89fb      	ldrh	r3, [r7, #14]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	0fda      	lsrs	r2, r3, #31
 8006f10:	4413      	add	r3, r2
 8006f12:	105b      	asrs	r3, r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <TP_Read_XY2+0xbc>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <TP_Scan>:
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	71fb      	strb	r3, [r7, #7]
 8006f32:	2140      	movs	r1, #64	; 0x40
 8006f34:	483f      	ldr	r0, [pc, #252]	; (8007034 <TP_Scan+0x10c>)
 8006f36:	f001 f801 	bl	8007f3c <HAL_GPIO_ReadPin>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d155      	bne.n	8006fec <TP_Scan+0xc4>
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <TP_Scan+0x28>
 8006f46:	493c      	ldr	r1, [pc, #240]	; (8007038 <TP_Scan+0x110>)
 8006f48:	483c      	ldr	r0, [pc, #240]	; (800703c <TP_Scan+0x114>)
 8006f4a:	f7ff ff8b 	bl	8006e64 <TP_Read_XY2>
 8006f4e:	e03c      	b.n	8006fca <TP_Scan+0xa2>
 8006f50:	4939      	ldr	r1, [pc, #228]	; (8007038 <TP_Scan+0x110>)
 8006f52:	483a      	ldr	r0, [pc, #232]	; (800703c <TP_Scan+0x114>)
 8006f54:	f7ff ff86 	bl	8006e64 <TP_Read_XY2>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d035      	beq.n	8006fca <TP_Scan+0xa2>
 8006f5e:	4b38      	ldr	r3, [pc, #224]	; (8007040 <TP_Scan+0x118>)
 8006f60:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f64:	4b36      	ldr	r3, [pc, #216]	; (8007040 <TP_Scan+0x118>)
 8006f66:	899b      	ldrh	r3, [r3, #12]
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f74:	4b32      	ldr	r3, [pc, #200]	; (8007040 <TP_Scan+0x118>)
 8006f76:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8a:	ee17 3a90 	vmov	r3, s15
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	4b2b      	ldr	r3, [pc, #172]	; (8007040 <TP_Scan+0x118>)
 8006f92:	819a      	strh	r2, [r3, #12]
 8006f94:	4b2a      	ldr	r3, [pc, #168]	; (8007040 <TP_Scan+0x118>)
 8006f96:	ed93 7a06 	vldr	s14, [r3, #24]
 8006f9a:	4b29      	ldr	r3, [pc, #164]	; (8007040 <TP_Scan+0x118>)
 8006f9c:	89db      	ldrh	r3, [r3, #14]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006faa:	4b25      	ldr	r3, [pc, #148]	; (8007040 <TP_Scan+0x118>)
 8006fac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc0:	ee17 3a90 	vmov	r3, s15
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <TP_Scan+0x118>)
 8006fc8:	81da      	strh	r2, [r3, #14]
 8006fca:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <TP_Scan+0x118>)
 8006fcc:	7c1b      	ldrb	r3, [r3, #16]
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db26      	blt.n	8007022 <TP_Scan+0xfa>
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <TP_Scan+0x118>)
 8006fd6:	22c0      	movs	r2, #192	; 0xc0
 8006fd8:	741a      	strb	r2, [r3, #16]
 8006fda:	4b19      	ldr	r3, [pc, #100]	; (8007040 <TP_Scan+0x118>)
 8006fdc:	899a      	ldrh	r2, [r3, #12]
 8006fde:	4b18      	ldr	r3, [pc, #96]	; (8007040 <TP_Scan+0x118>)
 8006fe0:	811a      	strh	r2, [r3, #8]
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <TP_Scan+0x118>)
 8006fe4:	89da      	ldrh	r2, [r3, #14]
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <TP_Scan+0x118>)
 8006fe8:	815a      	strh	r2, [r3, #10]
 8006fea:	e01a      	b.n	8007022 <TP_Scan+0xfa>
 8006fec:	4b14      	ldr	r3, [pc, #80]	; (8007040 <TP_Scan+0x118>)
 8006fee:	7c1b      	ldrb	r3, [r3, #16]
 8006ff0:	b25b      	sxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da07      	bge.n	8007006 <TP_Scan+0xde>
 8006ff6:	4b12      	ldr	r3, [pc, #72]	; (8007040 <TP_Scan+0x118>)
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <TP_Scan+0x118>)
 8007002:	741a      	strb	r2, [r3, #16]
 8007004:	e00d      	b.n	8007022 <TP_Scan+0xfa>
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <TP_Scan+0x118>)
 8007008:	2200      	movs	r2, #0
 800700a:	811a      	strh	r2, [r3, #8]
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <TP_Scan+0x118>)
 800700e:	2200      	movs	r2, #0
 8007010:	815a      	strh	r2, [r3, #10]
 8007012:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <TP_Scan+0x118>)
 8007014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007018:	819a      	strh	r2, [r3, #12]
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <TP_Scan+0x118>)
 800701c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007020:	81da      	strh	r2, [r3, #14]
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <TP_Scan+0x118>)
 8007024:	7c1b      	ldrb	r3, [r3, #16]
 8007026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800702a:	b2db      	uxtb	r3, r3
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40020c00 	.word	0x40020c00
 8007038:	20000166 	.word	0x20000166
 800703c:	20000164 	.word	0x20000164
 8007040:	20000158 	.word	0x20000158

08007044 <MX_UART5_Init>:
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <MX_UART5_Init+0x4c>)
 800704a:	4a12      	ldr	r2, [pc, #72]	; (8007094 <MX_UART5_Init+0x50>)
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <MX_UART5_Init+0x4c>)
 8007050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <MX_UART5_Init+0x4c>)
 8007058:	2200      	movs	r2, #0
 800705a:	609a      	str	r2, [r3, #8]
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <MX_UART5_Init+0x4c>)
 800705e:	2200      	movs	r2, #0
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <MX_UART5_Init+0x4c>)
 8007064:	2200      	movs	r2, #0
 8007066:	611a      	str	r2, [r3, #16]
 8007068:	4b09      	ldr	r3, [pc, #36]	; (8007090 <MX_UART5_Init+0x4c>)
 800706a:	220c      	movs	r2, #12
 800706c:	615a      	str	r2, [r3, #20]
 800706e:	4b08      	ldr	r3, [pc, #32]	; (8007090 <MX_UART5_Init+0x4c>)
 8007070:	2200      	movs	r2, #0
 8007072:	619a      	str	r2, [r3, #24]
 8007074:	4b06      	ldr	r3, [pc, #24]	; (8007090 <MX_UART5_Init+0x4c>)
 8007076:	2200      	movs	r2, #0
 8007078:	61da      	str	r2, [r3, #28]
 800707a:	4805      	ldr	r0, [pc, #20]	; (8007090 <MX_UART5_Init+0x4c>)
 800707c:	f005 fd6a 	bl	800cb54 <HAL_UART_Init>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <MX_UART5_Init+0x46>
 8007086:	f7fe fe85 	bl	8005d94 <Error_Handler>
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	2000714c 	.word	0x2000714c
 8007094:	40005000 	.word	0x40005000

08007098 <MX_USART3_UART_Init>:
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
 800709c:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 800709e:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <MX_USART3_UART_Init+0x50>)
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	609a      	str	r2, [r3, #8]
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	611a      	str	r2, [r3, #16]
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070be:	220c      	movs	r2, #12
 80070c0:	615a      	str	r2, [r3, #20]
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	619a      	str	r2, [r3, #24]
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	61da      	str	r2, [r3, #28]
 80070ce:	4805      	ldr	r0, [pc, #20]	; (80070e4 <MX_USART3_UART_Init+0x4c>)
 80070d0:	f005 fd40 	bl	800cb54 <HAL_UART_Init>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <MX_USART3_UART_Init+0x46>
 80070da:	f7fe fe5b 	bl	8005d94 <Error_Handler>
 80070de:	bf00      	nop
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20007190 	.word	0x20007190
 80070e8:	40004800 	.word	0x40004800

080070ec <HAL_UART_MspInit>:
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08c      	sub	sp, #48	; 0x30
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	f107 031c 	add.w	r3, r7, #28
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	609a      	str	r2, [r3, #8]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	611a      	str	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a42      	ldr	r2, [pc, #264]	; (8007214 <HAL_UART_MspInit+0x128>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d14b      	bne.n	80071a6 <HAL_UART_MspInit+0xba>
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	4b41      	ldr	r3, [pc, #260]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	4a40      	ldr	r2, [pc, #256]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711c:	6413      	str	r3, [r2, #64]	; 0x40
 800711e:	4b3e      	ldr	r3, [pc, #248]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	4b3a      	ldr	r3, [pc, #232]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	4a39      	ldr	r2, [pc, #228]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007134:	f043 0304 	orr.w	r3, r3, #4
 8007138:	6313      	str	r3, [r2, #48]	; 0x30
 800713a:	4b37      	ldr	r3, [pc, #220]	; (8007218 <HAL_UART_MspInit+0x12c>)
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	4b33      	ldr	r3, [pc, #204]	; (8007218 <HAL_UART_MspInit+0x12c>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007150:	f043 0308 	orr.w	r3, r3, #8
 8007154:	6313      	str	r3, [r2, #48]	; 0x30
 8007156:	4b30      	ldr	r3, [pc, #192]	; (8007218 <HAL_UART_MspInit+0x12c>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	2302      	movs	r3, #2
 800716a:	623b      	str	r3, [r7, #32]
 800716c:	2300      	movs	r3, #0
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
 8007170:	2303      	movs	r3, #3
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	2308      	movs	r3, #8
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007178:	f107 031c 	add.w	r3, r7, #28
 800717c:	4619      	mov	r1, r3
 800717e:	4827      	ldr	r0, [pc, #156]	; (800721c <HAL_UART_MspInit+0x130>)
 8007180:	f000 fd40 	bl	8007c04 <HAL_GPIO_Init>
 8007184:	2304      	movs	r3, #4
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	2302      	movs	r3, #2
 800718a:	623b      	str	r3, [r7, #32]
 800718c:	2300      	movs	r3, #0
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	2303      	movs	r3, #3
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
 8007194:	2308      	movs	r3, #8
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007198:	f107 031c 	add.w	r3, r7, #28
 800719c:	4619      	mov	r1, r3
 800719e:	4820      	ldr	r0, [pc, #128]	; (8007220 <HAL_UART_MspInit+0x134>)
 80071a0:	f000 fd30 	bl	8007c04 <HAL_GPIO_Init>
 80071a4:	e031      	b.n	800720a <HAL_UART_MspInit+0x11e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1e      	ldr	r2, [pc, #120]	; (8007224 <HAL_UART_MspInit+0x138>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d12c      	bne.n	800720a <HAL_UART_MspInit+0x11e>
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	4b18      	ldr	r3, [pc, #96]	; (8007218 <HAL_UART_MspInit+0x12c>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	4a17      	ldr	r2, [pc, #92]	; (8007218 <HAL_UART_MspInit+0x12c>)
 80071ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071be:	6413      	str	r3, [r2, #64]	; 0x40
 80071c0:	4b15      	ldr	r3, [pc, #84]	; (8007218 <HAL_UART_MspInit+0x12c>)
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2300      	movs	r3, #0
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_UART_MspInit+0x12c>)
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	4a10      	ldr	r2, [pc, #64]	; (8007218 <HAL_UART_MspInit+0x12c>)
 80071d6:	f043 0302 	orr.w	r3, r3, #2
 80071da:	6313      	str	r3, [r2, #48]	; 0x30
 80071dc:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <HAL_UART_MspInit+0x12c>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	2302      	movs	r3, #2
 80071f0:	623b      	str	r3, [r7, #32]
 80071f2:	2300      	movs	r3, #0
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
 80071f6:	2303      	movs	r3, #3
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fa:	2307      	movs	r3, #7
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fe:	f107 031c 	add.w	r3, r7, #28
 8007202:	4619      	mov	r1, r3
 8007204:	4808      	ldr	r0, [pc, #32]	; (8007228 <HAL_UART_MspInit+0x13c>)
 8007206:	f000 fcfd 	bl	8007c04 <HAL_GPIO_Init>
 800720a:	bf00      	nop
 800720c:	3730      	adds	r7, #48	; 0x30
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40005000 	.word	0x40005000
 8007218:	40023800 	.word	0x40023800
 800721c:	40020800 	.word	0x40020800
 8007220:	40020c00 	.word	0x40020c00
 8007224:	40004800 	.word	0x40004800
 8007228:	40020400 	.word	0x40020400

0800722c <Reset_Handler>:
 800722c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007264 <LoopFillZerobss+0x12>
 8007230:	480d      	ldr	r0, [pc, #52]	; (8007268 <LoopFillZerobss+0x16>)
 8007232:	490e      	ldr	r1, [pc, #56]	; (800726c <LoopFillZerobss+0x1a>)
 8007234:	4a0e      	ldr	r2, [pc, #56]	; (8007270 <LoopFillZerobss+0x1e>)
 8007236:	2300      	movs	r3, #0
 8007238:	e002      	b.n	8007240 <LoopCopyDataInit>

0800723a <CopyDataInit>:
 800723a:	58d4      	ldr	r4, [r2, r3]
 800723c:	50c4      	str	r4, [r0, r3]
 800723e:	3304      	adds	r3, #4

08007240 <LoopCopyDataInit>:
 8007240:	18c4      	adds	r4, r0, r3
 8007242:	428c      	cmp	r4, r1
 8007244:	d3f9      	bcc.n	800723a <CopyDataInit>
 8007246:	4a0b      	ldr	r2, [pc, #44]	; (8007274 <LoopFillZerobss+0x22>)
 8007248:	4c0b      	ldr	r4, [pc, #44]	; (8007278 <LoopFillZerobss+0x26>)
 800724a:	2300      	movs	r3, #0
 800724c:	e001      	b.n	8007252 <LoopFillZerobss>

0800724e <FillZerobss>:
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	3204      	adds	r2, #4

08007252 <LoopFillZerobss>:
 8007252:	42a2      	cmp	r2, r4
 8007254:	d3fb      	bcc.n	800724e <FillZerobss>
 8007256:	f7ff fb87 	bl	8006968 <SystemInit>
 800725a:	f006 f83d 	bl	800d2d8 <__libc_init_array>
 800725e:	f7fe fcfd 	bl	8005c5c <main>
 8007262:	4770      	bx	lr
 8007264:	20020000 	.word	0x20020000
 8007268:	20000000 	.word	0x20000000
 800726c:	20000188 	.word	0x20000188
 8007270:	08010a40 	.word	0x08010a40
 8007274:	20000188 	.word	0x20000188
 8007278:	200071d8 	.word	0x200071d8

0800727c <ADC_IRQHandler>:
 800727c:	e7fe      	b.n	800727c <ADC_IRQHandler>
	...

08007280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <HAL_Init+0x40>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a0d      	ldr	r2, [pc, #52]	; (80072c0 <HAL_Init+0x40>)
 800728a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800728e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <HAL_Init+0x40>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <HAL_Init+0x40>)
 8007296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800729a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800729c:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <HAL_Init+0x40>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a07      	ldr	r2, [pc, #28]	; (80072c0 <HAL_Init+0x40>)
 80072a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072a8:	2003      	movs	r0, #3
 80072aa:	f000 f94f 	bl	800754c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072ae:	200f      	movs	r0, #15
 80072b0:	f000 f808 	bl	80072c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072b4:	f7ff fac0 	bl	8006838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40023c00 	.word	0x40023c00

080072c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_InitTick+0x54>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4b12      	ldr	r3, [pc, #72]	; (800731c <HAL_InitTick+0x58>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	4619      	mov	r1, r3
 80072d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072da:	fbb3 f3f1 	udiv	r3, r3, r1
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f967 	bl	80075b6 <HAL_SYSTICK_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e00e      	b.n	8007310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b0f      	cmp	r3, #15
 80072f6:	d80a      	bhi.n	800730e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072f8:	2200      	movs	r2, #0
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	f000 f92f 	bl	8007562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007304:	4a06      	ldr	r2, [pc, #24]	; (8007320 <HAL_InitTick+0x5c>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	e000      	b.n	8007310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000154 	.word	0x20000154
 800731c:	20000184 	.word	0x20000184
 8007320:	20000180 	.word	0x20000180

08007324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_IncTick+0x20>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_IncTick+0x24>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4413      	add	r3, r2
 8007334:	4a04      	ldr	r2, [pc, #16]	; (8007348 <HAL_IncTick+0x24>)
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000184 	.word	0x20000184
 8007348:	200071d4 	.word	0x200071d4

0800734c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return uwTick;
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <HAL_GetTick+0x14>)
 8007352:	681b      	ldr	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200071d4 	.word	0x200071d4

08007364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800736c:	f7ff ffee 	bl	800734c <HAL_GetTick>
 8007370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d005      	beq.n	800738a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <HAL_Delay+0x44>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800738a:	bf00      	nop
 800738c:	f7ff ffde 	bl	800734c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d8f7      	bhi.n	800738c <HAL_Delay+0x28>
  {
  }
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000184 	.word	0x20000184

080073ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073bc:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <__NVIC_SetPriorityGrouping+0x44>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073c8:	4013      	ands	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073de:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <__NVIC_SetPriorityGrouping+0x44>)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	60d3      	str	r3, [r2, #12]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	e000ed00 	.word	0xe000ed00

080073f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <__NVIC_GetPriorityGrouping+0x18>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 0307 	and.w	r3, r3, #7
}
 8007402:	4618      	mov	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	e000ed00 	.word	0xe000ed00

08007410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800741a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741e:	2b00      	cmp	r3, #0
 8007420:	db0b      	blt.n	800743a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	f003 021f 	and.w	r2, r3, #31
 8007428:	4907      	ldr	r1, [pc, #28]	; (8007448 <__NVIC_EnableIRQ+0x38>)
 800742a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	2001      	movs	r0, #1
 8007432:	fa00 f202 	lsl.w	r2, r0, r2
 8007436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	e000e100 	.word	0xe000e100

0800744c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	db0a      	blt.n	8007476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	490c      	ldr	r1, [pc, #48]	; (8007498 <__NVIC_SetPriority+0x4c>)
 8007466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746a:	0112      	lsls	r2, r2, #4
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	440b      	add	r3, r1
 8007470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007474:	e00a      	b.n	800748c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	4908      	ldr	r1, [pc, #32]	; (800749c <__NVIC_SetPriority+0x50>)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	3b04      	subs	r3, #4
 8007484:	0112      	lsls	r2, r2, #4
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	440b      	add	r3, r1
 800748a:	761a      	strb	r2, [r3, #24]
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	e000e100 	.word	0xe000e100
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	; 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f1c3 0307 	rsb	r3, r3, #7
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf28      	it	cs
 80074be:	2304      	movcs	r3, #4
 80074c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d902      	bls.n	80074d0 <NVIC_EncodePriority+0x30>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	3b03      	subs	r3, #3
 80074ce:	e000      	b.n	80074d2 <NVIC_EncodePriority+0x32>
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43da      	mvns	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	401a      	ands	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074e8:	f04f 31ff 	mov.w	r1, #4294967295
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	43d9      	mvns	r1, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f8:	4313      	orrs	r3, r2
         );
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3724      	adds	r7, #36	; 0x24
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3b01      	subs	r3, #1
 8007514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007518:	d301      	bcc.n	800751e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800751a:	2301      	movs	r3, #1
 800751c:	e00f      	b.n	800753e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800751e:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <SysTick_Config+0x40>)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3b01      	subs	r3, #1
 8007524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007526:	210f      	movs	r1, #15
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	f7ff ff8e 	bl	800744c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <SysTick_Config+0x40>)
 8007532:	2200      	movs	r2, #0
 8007534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007536:	4b04      	ldr	r3, [pc, #16]	; (8007548 <SysTick_Config+0x40>)
 8007538:	2207      	movs	r2, #7
 800753a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	e000e010 	.word	0xe000e010

0800754c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff ff29 	bl	80073ac <__NVIC_SetPriorityGrouping>
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	4603      	mov	r3, r0
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007574:	f7ff ff3e 	bl	80073f4 <__NVIC_GetPriorityGrouping>
 8007578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	6978      	ldr	r0, [r7, #20]
 8007580:	f7ff ff8e 	bl	80074a0 <NVIC_EncodePriority>
 8007584:	4602      	mov	r2, r0
 8007586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff ff5d 	bl	800744c <__NVIC_SetPriority>
}
 8007592:	bf00      	nop
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	4603      	mov	r3, r0
 80075a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff ff31 	bl	8007410 <__NVIC_EnableIRQ>
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff ffa2 	bl	8007508 <SysTick_Config>
 80075c4:	4603      	mov	r3, r0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075dc:	f7ff feb6 	bl	800734c <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e099      	b.n	8007720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0201 	bic.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800760c:	e00f      	b.n	800762e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800760e:	f7ff fe9d 	bl	800734c <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b05      	cmp	r3, #5
 800761a:	d908      	bls.n	800762e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2203      	movs	r2, #3
 8007626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e078      	b.n	8007720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e8      	bne.n	800760e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4b38      	ldr	r3, [pc, #224]	; (8007728 <HAL_DMA_Init+0x158>)
 8007648:	4013      	ands	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800765a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b04      	cmp	r3, #4
 8007686:	d107      	bne.n	8007698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	4313      	orrs	r3, r2
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d117      	bne.n	80076f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00e      	beq.n	80076f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fa19 	bl	8007b0c <DMA_CheckFifoParam>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2240      	movs	r2, #64	; 0x40
 80076e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80076ee:	2301      	movs	r3, #1
 80076f0:	e016      	b.n	8007720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f9d0 	bl	8007aa0 <DMA_CalcBaseAndBitshift>
 8007700:	4603      	mov	r3, r0
 8007702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	223f      	movs	r2, #63	; 0x3f
 800770a:	409a      	lsls	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	f010803f 	.word	0xf010803f

0800772c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d004      	beq.n	800774a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e00c      	b.n	8007764 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2205      	movs	r2, #5
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0201 	bic.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800777c:	4b8e      	ldr	r3, [pc, #568]	; (80079b8 <HAL_DMA_IRQHandler+0x248>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a8e      	ldr	r2, [pc, #568]	; (80079bc <HAL_DMA_IRQHandler+0x24c>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	0a9b      	lsrs	r3, r3, #10
 8007788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779a:	2208      	movs	r2, #8
 800779c:	409a      	lsls	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4013      	ands	r3, r2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01a      	beq.n	80077dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d013      	beq.n	80077dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0204 	bic.w	r2, r2, #4
 80077c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	2208      	movs	r2, #8
 80077ca:	409a      	lsls	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f043 0201 	orr.w	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d012      	beq.n	8007812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fe:	2201      	movs	r2, #1
 8007800:	409a      	lsls	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	f043 0202 	orr.w	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007816:	2204      	movs	r2, #4
 8007818:	409a      	lsls	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4013      	ands	r3, r2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007834:	2204      	movs	r2, #4
 8007836:	409a      	lsls	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	f043 0204 	orr.w	r2, r3, #4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784c:	2210      	movs	r2, #16
 800784e:	409a      	lsls	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d043      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03c      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	2210      	movs	r2, #16
 800786c:	409a      	lsls	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d018      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d024      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	e01f      	b.n	80078e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
 80078b0:	e016      	b.n	80078e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0208 	bic.w	r2, r2, #8
 80078ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	2220      	movs	r2, #32
 80078e6:	409a      	lsls	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 808f 	beq.w	8007a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8087 	beq.w	8007a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	2220      	movs	r2, #32
 8007908:	409a      	lsls	r2, r3
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b05      	cmp	r3, #5
 8007918:	d136      	bne.n	8007988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0216 	bic.w	r2, r2, #22
 8007928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <HAL_DMA_IRQHandler+0x1da>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0208 	bic.w	r2, r2, #8
 8007958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795e:	223f      	movs	r2, #63	; 0x3f
 8007960:	409a      	lsls	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	2b00      	cmp	r3, #0
 800797c:	d07e      	beq.n	8007a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
        }
        return;
 8007986:	e079      	b.n	8007a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01d      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10d      	bne.n	80079c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d031      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	e02c      	b.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
 80079b6:	bf00      	nop
 80079b8:	20000154 	.word	0x20000154
 80079bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d023      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	e01e      	b.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10f      	bne.n	8007a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0210 	bic.w	r2, r2, #16
 80079ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d032      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d022      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2205      	movs	r2, #5
 8007a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d307      	bcc.n	8007a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f2      	bne.n	8007a3c <HAL_DMA_IRQHandler+0x2cc>
 8007a56:	e000      	b.n	8007a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	e000      	b.n	8007a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a7c:	bf00      	nop
    }
  }
}
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a92:	b2db      	uxtb	r3, r3
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	3b10      	subs	r3, #16
 8007ab0:	4a14      	ldr	r2, [pc, #80]	; (8007b04 <DMA_CalcBaseAndBitshift+0x64>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007aba:	4a13      	ldr	r2, [pc, #76]	; (8007b08 <DMA_CalcBaseAndBitshift+0x68>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d909      	bls.n	8007ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	659a      	str	r2, [r3, #88]	; 0x58
 8007ae0:	e007      	b.n	8007af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	aaaaaaab 	.word	0xaaaaaaab
 8007b08:	08010a00 	.word	0x08010a00

08007b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d11f      	bne.n	8007b66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d856      	bhi.n	8007bda <DMA_CheckFifoParam+0xce>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <DMA_CheckFifoParam+0x28>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b57 	.word	0x08007b57
 8007b3c:	08007b45 	.word	0x08007b45
 8007b40:	08007bdb 	.word	0x08007bdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d046      	beq.n	8007bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b54:	e043      	b.n	8007bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b5e:	d140      	bne.n	8007be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b64:	e03d      	b.n	8007be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6e:	d121      	bne.n	8007bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d837      	bhi.n	8007be6 <DMA_CheckFifoParam+0xda>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <DMA_CheckFifoParam+0x70>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007b8d 	.word	0x08007b8d
 8007b80:	08007b93 	.word	0x08007b93
 8007b84:	08007b8d 	.word	0x08007b8d
 8007b88:	08007ba5 	.word	0x08007ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b90:	e030      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d025      	beq.n	8007bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ba2:	e022      	b.n	8007bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bac:	d11f      	bne.n	8007bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007bb2:	e01c      	b.n	8007bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d903      	bls.n	8007bc2 <DMA_CheckFifoParam+0xb6>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d003      	beq.n	8007bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007bc0:	e018      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc6:	e015      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00e      	beq.n	8007bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd8:	e00b      	b.n	8007bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8007bda:	bf00      	nop
 8007bdc:	e00a      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007bde:	bf00      	nop
 8007be0:	e008      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007be2:	bf00      	nop
 8007be4:	e006      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007be6:	bf00      	nop
 8007be8:	e004      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007bea:	bf00      	nop
 8007bec:	e002      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8007bee:	bf00      	nop
 8007bf0:	e000      	b.n	8007bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop

08007c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b089      	sub	sp, #36	; 0x24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	e16b      	b.n	8007ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c20:	2201      	movs	r2, #1
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	fa02 f303 	lsl.w	r3, r2, r3
 8007c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4013      	ands	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	f040 815a 	bne.w	8007ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d005      	beq.n	8007c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d130      	bne.n	8007cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	2203      	movs	r2, #3
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	43db      	mvns	r3, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	43db      	mvns	r3, r3
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 0201 	and.w	r2, r3, #1
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f003 0303 	and.w	r3, r3, #3
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d017      	beq.n	8007cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	2203      	movs	r2, #3
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d123      	bne.n	8007d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	08da      	lsrs	r2, r3, #3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3208      	adds	r2, #8
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	220f      	movs	r2, #15
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4013      	ands	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	08da      	lsrs	r2, r3, #3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3208      	adds	r2, #8
 8007d42:	69b9      	ldr	r1, [r7, #24]
 8007d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	2203      	movs	r2, #3
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f003 0203 	and.w	r2, r3, #3
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80b4 	beq.w	8007ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	4b60      	ldr	r3, [pc, #384]	; (8007f10 <HAL_GPIO_Init+0x30c>)
 8007d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d92:	4a5f      	ldr	r2, [pc, #380]	; (8007f10 <HAL_GPIO_Init+0x30c>)
 8007d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d98:	6453      	str	r3, [r2, #68]	; 0x44
 8007d9a:	4b5d      	ldr	r3, [pc, #372]	; (8007f10 <HAL_GPIO_Init+0x30c>)
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007da6:	4a5b      	ldr	r2, [pc, #364]	; (8007f14 <HAL_GPIO_Init+0x310>)
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	089b      	lsrs	r3, r3, #2
 8007dac:	3302      	adds	r3, #2
 8007dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	220f      	movs	r2, #15
 8007dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a52      	ldr	r2, [pc, #328]	; (8007f18 <HAL_GPIO_Init+0x314>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d02b      	beq.n	8007e2a <HAL_GPIO_Init+0x226>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a51      	ldr	r2, [pc, #324]	; (8007f1c <HAL_GPIO_Init+0x318>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d025      	beq.n	8007e26 <HAL_GPIO_Init+0x222>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a50      	ldr	r2, [pc, #320]	; (8007f20 <HAL_GPIO_Init+0x31c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01f      	beq.n	8007e22 <HAL_GPIO_Init+0x21e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a4f      	ldr	r2, [pc, #316]	; (8007f24 <HAL_GPIO_Init+0x320>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d019      	beq.n	8007e1e <HAL_GPIO_Init+0x21a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a4e      	ldr	r2, [pc, #312]	; (8007f28 <HAL_GPIO_Init+0x324>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d013      	beq.n	8007e1a <HAL_GPIO_Init+0x216>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a4d      	ldr	r2, [pc, #308]	; (8007f2c <HAL_GPIO_Init+0x328>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00d      	beq.n	8007e16 <HAL_GPIO_Init+0x212>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a4c      	ldr	r2, [pc, #304]	; (8007f30 <HAL_GPIO_Init+0x32c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d007      	beq.n	8007e12 <HAL_GPIO_Init+0x20e>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a4b      	ldr	r2, [pc, #300]	; (8007f34 <HAL_GPIO_Init+0x330>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <HAL_GPIO_Init+0x20a>
 8007e0a:	2307      	movs	r3, #7
 8007e0c:	e00e      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e0e:	2308      	movs	r3, #8
 8007e10:	e00c      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e12:	2306      	movs	r3, #6
 8007e14:	e00a      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e16:	2305      	movs	r3, #5
 8007e18:	e008      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e1a:	2304      	movs	r3, #4
 8007e1c:	e006      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e004      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e002      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <HAL_GPIO_Init+0x228>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	f002 0203 	and.w	r2, r2, #3
 8007e32:	0092      	lsls	r2, r2, #2
 8007e34:	4093      	lsls	r3, r2
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e3c:	4935      	ldr	r1, [pc, #212]	; (8007f14 <HAL_GPIO_Init+0x310>)
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	089b      	lsrs	r3, r3, #2
 8007e42:	3302      	adds	r3, #2
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e4a:	4b3b      	ldr	r3, [pc, #236]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	43db      	mvns	r3, r3
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4013      	ands	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e6e:	4a32      	ldr	r2, [pc, #200]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e74:	4b30      	ldr	r3, [pc, #192]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	4013      	ands	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e98:	4a27      	ldr	r2, [pc, #156]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007e9e:	4b26      	ldr	r3, [pc, #152]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ec2:	4a1d      	ldr	r2, [pc, #116]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ec8:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eec:	4a12      	ldr	r2, [pc, #72]	; (8007f38 <HAL_GPIO_Init+0x334>)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2b0f      	cmp	r3, #15
 8007efc:	f67f ae90 	bls.w	8007c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3724      	adds	r7, #36	; 0x24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40023800 	.word	0x40023800
 8007f14:	40013800 	.word	0x40013800
 8007f18:	40020000 	.word	0x40020000
 8007f1c:	40020400 	.word	0x40020400
 8007f20:	40020800 	.word	0x40020800
 8007f24:	40020c00 	.word	0x40020c00
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	40021400 	.word	0x40021400
 8007f30:	40021800 	.word	0x40021800
 8007f34:	40021c00 	.word	0x40021c00
 8007f38:	40013c00 	.word	0x40013c00

08007f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	887b      	ldrh	r3, [r7, #2]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]
 8007f58:	e001      	b.n	8007f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	807b      	strh	r3, [r7, #2]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f7c:	787b      	ldrb	r3, [r7, #1]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f82:	887a      	ldrh	r2, [r7, #2]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f88:	e003      	b.n	8007f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f8a:	887b      	ldrh	r3, [r7, #2]
 8007f8c:	041a      	lsls	r2, r3, #16
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	619a      	str	r2, [r3, #24]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e12b      	b.n	800820a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fd fd98 	bl	8005afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2224      	movs	r2, #36	; 0x24
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ff2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008002:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008004:	f003 f8d6 	bl	800b1b4 <HAL_RCC_GetPCLK1Freq>
 8008008:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	4a81      	ldr	r2, [pc, #516]	; (8008214 <HAL_I2C_Init+0x274>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d807      	bhi.n	8008024 <HAL_I2C_Init+0x84>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a80      	ldr	r2, [pc, #512]	; (8008218 <HAL_I2C_Init+0x278>)
 8008018:	4293      	cmp	r3, r2
 800801a:	bf94      	ite	ls
 800801c:	2301      	movls	r3, #1
 800801e:	2300      	movhi	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	e006      	b.n	8008032 <HAL_I2C_Init+0x92>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4a7d      	ldr	r2, [pc, #500]	; (800821c <HAL_I2C_Init+0x27c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	bf94      	ite	ls
 800802c:	2301      	movls	r3, #1
 800802e:	2300      	movhi	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e0e7      	b.n	800820a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4a78      	ldr	r2, [pc, #480]	; (8008220 <HAL_I2C_Init+0x280>)
 800803e:	fba2 2303 	umull	r2, r3, r2, r3
 8008042:	0c9b      	lsrs	r3, r3, #18
 8008044:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a6a      	ldr	r2, [pc, #424]	; (8008214 <HAL_I2C_Init+0x274>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d802      	bhi.n	8008074 <HAL_I2C_Init+0xd4>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	3301      	adds	r3, #1
 8008072:	e009      	b.n	8008088 <HAL_I2C_Init+0xe8>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	4a69      	ldr	r2, [pc, #420]	; (8008224 <HAL_I2C_Init+0x284>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	099b      	lsrs	r3, r3, #6
 8008086:	3301      	adds	r3, #1
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	6812      	ldr	r2, [r2, #0]
 800808c:	430b      	orrs	r3, r1
 800808e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800809a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	495c      	ldr	r1, [pc, #368]	; (8008214 <HAL_I2C_Init+0x274>)
 80080a4:	428b      	cmp	r3, r1
 80080a6:	d819      	bhi.n	80080dc <HAL_I2C_Init+0x13c>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	1e59      	subs	r1, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80080b6:	1c59      	adds	r1, r3, #1
 80080b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080bc:	400b      	ands	r3, r1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <HAL_I2C_Init+0x138>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1e59      	subs	r1, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80080d0:	3301      	adds	r3, #1
 80080d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d6:	e051      	b.n	800817c <HAL_I2C_Init+0x1dc>
 80080d8:	2304      	movs	r3, #4
 80080da:	e04f      	b.n	800817c <HAL_I2C_Init+0x1dc>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d111      	bne.n	8008108 <HAL_I2C_Init+0x168>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1e58      	subs	r0, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6859      	ldr	r1, [r3, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	440b      	add	r3, r1
 80080f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	e012      	b.n	800812e <HAL_I2C_Init+0x18e>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	1e58      	subs	r0, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	0099      	lsls	r1, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	fbb0 f3f3 	udiv	r3, r0, r3
 800811e:	3301      	adds	r3, #1
 8008120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008124:	2b00      	cmp	r3, #0
 8008126:	bf0c      	ite	eq
 8008128:	2301      	moveq	r3, #1
 800812a:	2300      	movne	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <HAL_I2C_Init+0x196>
 8008132:	2301      	movs	r3, #1
 8008134:	e022      	b.n	800817c <HAL_I2C_Init+0x1dc>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10e      	bne.n	800815c <HAL_I2C_Init+0x1bc>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1e58      	subs	r0, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6859      	ldr	r1, [r3, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	440b      	add	r3, r1
 800814c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008150:	3301      	adds	r3, #1
 8008152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800815a:	e00f      	b.n	800817c <HAL_I2C_Init+0x1dc>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1e58      	subs	r0, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6859      	ldr	r1, [r3, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	0099      	lsls	r1, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008172:	3301      	adds	r3, #1
 8008174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	6809      	ldr	r1, [r1, #0]
 8008180:	4313      	orrs	r3, r2
 8008182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6911      	ldr	r1, [r2, #16]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68d2      	ldr	r2, [r2, #12]
 80081b6:	4311      	orrs	r1, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	430b      	orrs	r3, r1
 80081be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695a      	ldr	r2, [r3, #20]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	000186a0 	.word	0x000186a0
 8008218:	001e847f 	.word	0x001e847f
 800821c:	003d08ff 	.word	0x003d08ff
 8008220:	431bde83 	.word	0x431bde83
 8008224:	10624dd3 	.word	0x10624dd3

08008228 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	4608      	mov	r0, r1
 8008232:	4611      	mov	r1, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4603      	mov	r3, r0
 8008238:	817b      	strh	r3, [r7, #10]
 800823a:	460b      	mov	r3, r1
 800823c:	813b      	strh	r3, [r7, #8]
 800823e:	4613      	mov	r3, r2
 8008240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008242:	f7ff f883 	bl	800734c <HAL_GetTick>
 8008246:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b20      	cmp	r3, #32
 8008252:	f040 80d9 	bne.w	8008408 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	2319      	movs	r3, #25
 800825c:	2201      	movs	r2, #1
 800825e:	496d      	ldr	r1, [pc, #436]	; (8008414 <HAL_I2C_Mem_Write+0x1ec>)
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f002 f90d 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800826c:	2302      	movs	r3, #2
 800826e:	e0cc      	b.n	800840a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <HAL_I2C_Mem_Write+0x56>
 800827a:	2302      	movs	r3, #2
 800827c:	e0c5      	b.n	800840a <HAL_I2C_Mem_Write+0x1e2>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d007      	beq.n	80082a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2221      	movs	r2, #33	; 0x21
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2240      	movs	r2, #64	; 0x40
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4a4d      	ldr	r2, [pc, #308]	; (8008418 <HAL_I2C_Mem_Write+0x1f0>)
 80082e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082e6:	88f8      	ldrh	r0, [r7, #6]
 80082e8:	893a      	ldrh	r2, [r7, #8]
 80082ea:	8979      	ldrh	r1, [r7, #10]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f001 fe9c 	bl	800a034 <I2C_RequestMemoryWrite>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d052      	beq.n	80083a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e081      	b.n	800840a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f002 f98e 	bl	800a62c <I2C_WaitOnTXEFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	2b04      	cmp	r3, #4
 800831c:	d107      	bne.n	800832e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800832c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e06b      	b.n	800840a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	781a      	ldrb	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008358:	b29b      	uxth	r3, r3
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b04      	cmp	r3, #4
 800836e:	d11b      	bne.n	80083a8 <HAL_I2C_Mem_Write+0x180>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1aa      	bne.n	8008306 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f002 f97a 	bl	800a6ae <I2C_WaitOnBTFFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00d      	beq.n	80083dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d107      	bne.n	80083d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e016      	b.n	800840a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	00100002 	.word	0x00100002
 8008418:	ffff0000 	.word	0xffff0000

0800841c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	817b      	strh	r3, [r7, #10]
 800842e:	460b      	mov	r3, r1
 8008430:	813b      	strh	r3, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008436:	f7fe ff89 	bl	800734c <HAL_GetTick>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b20      	cmp	r3, #32
 8008446:	f040 8208 	bne.w	800885a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	2319      	movs	r3, #25
 8008450:	2201      	movs	r2, #1
 8008452:	497b      	ldr	r1, [pc, #492]	; (8008640 <HAL_I2C_Mem_Read+0x224>)
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f002 f813 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008460:	2302      	movs	r3, #2
 8008462:	e1fb      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_I2C_Mem_Read+0x56>
 800846e:	2302      	movs	r3, #2
 8008470:	e1f4      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b01      	cmp	r3, #1
 8008486:	d007      	beq.n	8008498 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2222      	movs	r2, #34	; 0x22
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2240      	movs	r2, #64	; 0x40
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80084c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4a5b      	ldr	r2, [pc, #364]	; (8008644 <HAL_I2C_Mem_Read+0x228>)
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084da:	88f8      	ldrh	r0, [r7, #6]
 80084dc:	893a      	ldrh	r2, [r7, #8]
 80084de:	8979      	ldrh	r1, [r7, #10]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4603      	mov	r3, r0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fe38 	bl	800a160 <I2C_RequestMemoryRead>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e1b0      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d113      	bne.n	800852a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008502:	2300      	movs	r3, #0
 8008504:	623b      	str	r3, [r7, #32]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	623b      	str	r3, [r7, #32]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e184      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852e:	2b01      	cmp	r3, #1
 8008530:	d11b      	bne.n	800856a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	61fb      	str	r3, [r7, #28]
 8008556:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e164      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856e:	2b02      	cmp	r3, #2
 8008570:	d11b      	bne.n	80085aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008580:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008592:	2300      	movs	r3, #0
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	61bb      	str	r3, [r7, #24]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	e144      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80085c0:	e138      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	f200 80f1 	bhi.w	80087ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d123      	bne.n	800861c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f002 f8db 	bl	800a794 <I2C_WaitOnRXNEFlagUntilTimeout>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e139      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	855a      	strh	r2, [r3, #42]	; 0x2a
 800861a:	e10b      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008620:	2b02      	cmp	r3, #2
 8008622:	d14e      	bne.n	80086c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862a:	2200      	movs	r2, #0
 800862c:	4906      	ldr	r1, [pc, #24]	; (8008648 <HAL_I2C_Mem_Read+0x22c>)
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f001 ff26 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d008      	beq.n	800864c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e10e      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
 800863e:	bf00      	nop
 8008640:	00100002 	.word	0x00100002
 8008644:	ffff0000 	.word	0xffff0000
 8008648:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800865a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008678:	3b01      	subs	r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086c0:	e0b8      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	2200      	movs	r2, #0
 80086ca:	4966      	ldr	r1, [pc, #408]	; (8008864 <HAL_I2C_Mem_Read+0x448>)
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f001 fed7 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e0bf      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691a      	ldr	r2, [r3, #16]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008714:	b29b      	uxth	r3, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	b29a      	uxth	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008724:	2200      	movs	r2, #0
 8008726:	494f      	ldr	r1, [pc, #316]	; (8008864 <HAL_I2C_Mem_Read+0x448>)
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 fea9 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e091      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008764:	3b01      	subs	r3, #1
 8008766:	b29a      	uxth	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008770:	b29b      	uxth	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	b29a      	uxth	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	b2d2      	uxtb	r2, r2
 8008786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008796:	3b01      	subs	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087ac:	e042      	b.n	8008834 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f001 ffee 	bl	800a794 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e04c      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d118      	bne.n	8008834 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f aec2 	bne.w	80085c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	e000      	b.n	800885c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800885a:	2302      	movs	r3, #2
  }
}
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	; 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	00010004 	.word	0x00010004

08008868 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008888:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008890:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b10      	cmp	r3, #16
 8008896:	d003      	beq.n	80088a0 <HAL_I2C_EV_IRQHandler+0x38>
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	f040 80c1 	bne.w	8008a22 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10d      	bne.n	80088d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80088c0:	d003      	beq.n	80088ca <HAL_I2C_EV_IRQHandler+0x62>
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088c8:	d101      	bne.n	80088ce <HAL_I2C_EV_IRQHandler+0x66>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <HAL_I2C_EV_IRQHandler+0x68>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	f000 8132 	beq.w	8008b3a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00c      	beq.n	80088fa <HAL_I2C_EV_IRQHandler+0x92>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d006      	beq.n	80088fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 ffd6 	bl	800a89e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fd83 	bl	80093fe <I2C_Master_SB>
 80088f8:	e092      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	08db      	lsrs	r3, r3, #3
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <HAL_I2C_EV_IRQHandler+0xb2>
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	0a5b      	lsrs	r3, r3, #9
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fdf9 	bl	800950a <I2C_Master_ADD10>
 8008918:	e082      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	085b      	lsrs	r3, r3, #1
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_I2C_EV_IRQHandler+0xd2>
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	0a5b      	lsrs	r3, r3, #9
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fe13 	bl	800955e <I2C_Master_ADDR>
 8008938:	e072      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	089b      	lsrs	r3, r3, #2
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d03b      	beq.n	80089be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008954:	f000 80f3 	beq.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	09db      	lsrs	r3, r3, #7
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00f      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x11c>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	0a9b      	lsrs	r3, r3, #10
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d009      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x11c>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	089b      	lsrs	r3, r3, #2
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f9f3 	bl	8008d68 <I2C_MasterTransmit_TXE>
 8008982:	e04d      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	089b      	lsrs	r3, r3, #2
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80d6 	beq.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	0a5b      	lsrs	r3, r3, #9
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80cf 	beq.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b21      	cmp	r3, #33	; 0x21
 80089a4:	d103      	bne.n	80089ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa7a 	bl	8008ea0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089ac:	e0c7      	b.n	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	f040 80c4 	bne.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fae8 	bl	8008f8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089bc:	e0bf      	b.n	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089cc:	f000 80b7 	beq.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	099b      	lsrs	r3, r3, #6
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00f      	beq.n	80089fc <HAL_I2C_EV_IRQHandler+0x194>
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	0a9b      	lsrs	r3, r3, #10
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <HAL_I2C_EV_IRQHandler+0x194>
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	089b      	lsrs	r3, r3, #2
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fb5d 	bl	80090b4 <I2C_MasterReceive_RXNE>
 80089fa:	e011      	b.n	8008a20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	089b      	lsrs	r3, r3, #2
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 809a 	beq.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	0a5b      	lsrs	r3, r3, #9
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 8093 	beq.w	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc06 	bl	800922a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a1e:	e08e      	b.n	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a20:	e08d      	b.n	8008b3e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	e007      	b.n	8008a44 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d012      	beq.n	8008a76 <HAL_I2C_EV_IRQHandler+0x20e>
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	0a5b      	lsrs	r3, r3, #9
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00c      	beq.n	8008a76 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008a6c:	69b9      	ldr	r1, [r7, #24]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 ffc4 	bl	80099fc <I2C_Slave_ADDR>
 8008a74:	e066      	b.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <HAL_I2C_EV_IRQHandler+0x22e>
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	0a5b      	lsrs	r3, r3, #9
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fffe 	bl	8009a90 <I2C_Slave_STOPF>
 8008a94:	e056      	b.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b21      	cmp	r3, #33	; 0x21
 8008a9a:	d002      	beq.n	8008aa2 <HAL_I2C_EV_IRQHandler+0x23a>
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b29      	cmp	r3, #41	; 0x29
 8008aa0:	d125      	bne.n	8008aee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	09db      	lsrs	r3, r3, #7
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00f      	beq.n	8008ace <HAL_I2C_EV_IRQHandler+0x266>
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	0a9b      	lsrs	r3, r3, #10
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <HAL_I2C_EV_IRQHandler+0x266>
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	089b      	lsrs	r3, r3, #2
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 feda 	bl	8009880 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008acc:	e039      	b.n	8008b42 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	089b      	lsrs	r3, r3, #2
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d033      	beq.n	8008b42 <HAL_I2C_EV_IRQHandler+0x2da>
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	0a5b      	lsrs	r3, r3, #9
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d02d      	beq.n	8008b42 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 ff07 	bl	80098fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008aec:	e029      	b.n	8008b42 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	099b      	lsrs	r3, r3, #6
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	0a9b      	lsrs	r3, r3, #10
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	089b      	lsrs	r3, r3, #2
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 ff12 	bl	800993c <I2C_SlaveReceive_RXNE>
 8008b18:	e014      	b.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	089b      	lsrs	r3, r3, #2
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00e      	beq.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	0a5b      	lsrs	r3, r3, #9
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d008      	beq.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 ff40 	bl	80099b8 <I2C_SlaveReceive_BTF>
 8008b38:	e004      	b.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008b3a:	bf00      	nop
 8008b3c:	e002      	b.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b08a      	sub	sp, #40	; 0x28
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b6c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <HAL_I2C_ER_IRQHandler+0x4e>
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d008      	beq.n	8008b98 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	f043 0301 	orr.w	r3, r3, #1
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	0a5b      	lsrs	r3, r3, #9
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_I2C_ER_IRQHandler+0x78>
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d008      	beq.n	8008bc2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	f043 0302 	orr.w	r3, r3, #2
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008bc0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	0a9b      	lsrs	r3, r3, #10
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d03f      	beq.n	8008c4e <HAL_I2C_ER_IRQHandler+0x104>
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	0a1b      	lsrs	r3, r3, #8
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d039      	beq.n	8008c4e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008bda:	7efb      	ldrb	r3, [r7, #27]
 8008bdc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008bf4:	7ebb      	ldrb	r3, [r7, #26]
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d112      	bne.n	8008c20 <HAL_I2C_ER_IRQHandler+0xd6>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10f      	bne.n	8008c20 <HAL_I2C_ER_IRQHandler+0xd6>
 8008c00:	7cfb      	ldrb	r3, [r7, #19]
 8008c02:	2b21      	cmp	r3, #33	; 0x21
 8008c04:	d008      	beq.n	8008c18 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008c06:	7cfb      	ldrb	r3, [r7, #19]
 8008c08:	2b29      	cmp	r3, #41	; 0x29
 8008c0a:	d005      	beq.n	8008c18 <HAL_I2C_ER_IRQHandler+0xce>
 8008c0c:	7cfb      	ldrb	r3, [r7, #19]
 8008c0e:	2b28      	cmp	r3, #40	; 0x28
 8008c10:	d106      	bne.n	8008c20 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b21      	cmp	r3, #33	; 0x21
 8008c16:	d103      	bne.n	8008c20 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f869 	bl	8009cf0 <I2C_Slave_AF>
 8008c1e:	e016      	b.n	8008c4e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c28:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	f043 0304 	orr.w	r3, r3, #4
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008c32:	7efb      	ldrb	r3, [r7, #27]
 8008c34:	2b10      	cmp	r3, #16
 8008c36:	d002      	beq.n	8008c3e <HAL_I2C_ER_IRQHandler+0xf4>
 8008c38:	7efb      	ldrb	r3, [r7, #27]
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	d107      	bne.n	8008c4e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c4c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	0adb      	lsrs	r3, r3, #11
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <HAL_I2C_ER_IRQHandler+0x12e>
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	0a1b      	lsrs	r3, r3, #8
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d008      	beq.n	8008c78 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	f043 0308 	orr.w	r3, r3, #8
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008c76:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d008      	beq.n	8008c90 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f8a0 	bl	8009dd0 <I2C_ITError>
  }
}
 8008c90:	bf00      	nop
 8008c92:	3728      	adds	r7, #40	; 0x28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d150      	bne.n	8008e30 <I2C_MasterTransmit_TXE+0xc8>
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	2b21      	cmp	r3, #33	; 0x21
 8008d92:	d14d      	bne.n	8008e30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d01d      	beq.n	8008dd6 <I2C_MasterTransmit_TXE+0x6e>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d01a      	beq.n	8008dd6 <I2C_MasterTransmit_TXE+0x6e>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008da6:	d016      	beq.n	8008dd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008db6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2211      	movs	r2, #17
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff ff62 	bl	8008c98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008dd4:	e060      	b.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008de4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d107      	bne.n	8008e20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff7d 	bl	8008d18 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e1e:	e03b      	b.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff35 	bl	8008c98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e2e:	e033      	b.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	2b21      	cmp	r3, #33	; 0x21
 8008e34:	d005      	beq.n	8008e42 <I2C_MasterTransmit_TXE+0xda>
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b40      	cmp	r3, #64	; 0x40
 8008e3a:	d12d      	bne.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	2b22      	cmp	r3, #34	; 0x22
 8008e40:	d12a      	bne.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d108      	bne.n	8008e5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008e5c:	e01c      	b.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d103      	bne.n	8008e72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f88e 	bl	8008f8c <I2C_MemoryTransmit_TXE_BTF>
}
 8008e70:	e012      	b.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008e96:	e7ff      	b.n	8008e98 <I2C_MasterTransmit_TXE+0x130>
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b21      	cmp	r3, #33	; 0x21
 8008eb8:	d164      	bne.n	8008f84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d012      	beq.n	8008eea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008ee8:	e04c      	b.n	8008f84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d01d      	beq.n	8008f2c <I2C_MasterTransmit_BTF+0x8c>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b20      	cmp	r3, #32
 8008ef4:	d01a      	beq.n	8008f2c <I2C_MasterTransmit_BTF+0x8c>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008efc:	d016      	beq.n	8008f2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2211      	movs	r2, #17
 8008f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff feb7 	bl	8008c98 <HAL_I2C_MasterTxCpltCallback>
}
 8008f2a:	e02b      	b.n	8008f84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b40      	cmp	r3, #64	; 0x40
 8008f64:	d107      	bne.n	8008f76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fed2 	bl	8008d18 <HAL_I2C_MemTxCpltCallback>
}
 8008f74:	e006      	b.n	8008f84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff fe8a 	bl	8008c98 <HAL_I2C_MasterTxCpltCallback>
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d11d      	bne.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d10b      	bne.n	8008fc4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbc:	1c9a      	adds	r2, r3, #2
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008fc2:	e073      	b.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	121b      	asrs	r3, r3, #8
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008fde:	e065      	b.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d10b      	bne.n	8009000 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008ffe:	e055      	b.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009004:	2b02      	cmp	r3, #2
 8009006:	d151      	bne.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	2b22      	cmp	r3, #34	; 0x22
 800900c:	d10d      	bne.n	800902a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800901c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009028:	e040      	b.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d015      	beq.n	8009060 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	2b21      	cmp	r3, #33	; 0x21
 8009038:	d112      	bne.n	8009060 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800905e:	e025      	b.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d120      	bne.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	2b21      	cmp	r3, #33	; 0x21
 800906e:	d11d      	bne.n	80090ac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800907e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fe36 	bl	8008d18 <HAL_I2C_MemTxCpltCallback>
}
 80090ac:	bf00      	nop
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b22      	cmp	r3, #34	; 0x22
 80090c6:	f040 80ac 	bne.w	8009222 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d921      	bls.n	800911c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	3b01      	subs	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009102:	b29b      	uxth	r3, r3
 8009104:	2b03      	cmp	r3, #3
 8009106:	f040 808c 	bne.w	8009222 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009118:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800911a:	e082      	b.n	8009222 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	2b02      	cmp	r3, #2
 8009122:	d075      	beq.n	8009210 <I2C_MasterReceive_RXNE+0x15c>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d002      	beq.n	8009130 <I2C_MasterReceive_RXNE+0x7c>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d16f      	bne.n	8009210 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fafd 	bl	800a730 <I2C_WaitOnSTOPRequestThroughIT>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d142      	bne.n	80091c2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800914a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800915a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d10a      	bne.n	80091ac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fdc1 	bl	8008d2c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091aa:	e03a      	b.n	8009222 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2212      	movs	r2, #18
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fd76 	bl	8008cac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091c0:	e02f      	b.n	8009222 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	b2d2      	uxtb	r2, r2
 80091de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff fd99 	bl	8008d40 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800920e:	e008      	b.n	8009222 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800921e:	605a      	str	r2, [r3, #4]
}
 8009220:	e7ff      	b.n	8009222 <I2C_MasterReceive_RXNE+0x16e>
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b04      	cmp	r3, #4
 8009240:	d11b      	bne.n	800927a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009250:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691a      	ldr	r2, [r3, #16]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926e:	b29b      	uxth	r3, r3
 8009270:	3b01      	subs	r3, #1
 8009272:	b29a      	uxth	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009278:	e0bd      	b.n	80093f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b03      	cmp	r3, #3
 8009282:	d129      	bne.n	80092d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009292:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b04      	cmp	r3, #4
 8009298:	d00a      	beq.n	80092b0 <I2C_MasterReceive_BTF+0x86>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d007      	beq.n	80092b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80092d6:	e08e      	b.n	80093f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d176      	bne.n	80093d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d002      	beq.n	80092ee <I2C_MasterReceive_BTF+0xc4>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d108      	bne.n	8009300 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e019      	b.n	8009334 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b04      	cmp	r3, #4
 8009304:	d002      	beq.n	800930c <I2C_MasterReceive_BTF+0xe2>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d108      	bne.n	800931e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	e00a      	b.n	8009334 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b10      	cmp	r3, #16
 8009322:	d007      	beq.n	8009334 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009332:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691a      	ldr	r2, [r3, #16]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009350:	b29b      	uxth	r3, r3
 8009352:	3b01      	subs	r3, #1
 8009354:	b29a      	uxth	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691a      	ldr	r2, [r3, #16]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800938e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b40      	cmp	r3, #64	; 0x40
 80093a2:	d10a      	bne.n	80093ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fcba 	bl	8008d2c <HAL_I2C_MemRxCpltCallback>
}
 80093b8:	e01d      	b.n	80093f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2212      	movs	r2, #18
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fc6f 	bl	8008cac <HAL_I2C_MasterRxCpltCallback>
}
 80093ce:	e012      	b.n	80093f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	691a      	ldr	r2, [r3, #16]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	b2d2      	uxtb	r2, r2
 80093dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b40      	cmp	r3, #64	; 0x40
 8009410:	d117      	bne.n	8009442 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009416:	2b00      	cmp	r3, #0
 8009418:	d109      	bne.n	800942e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941e:	b2db      	uxtb	r3, r3
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800942a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800942c:	e067      	b.n	80094fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	b2da      	uxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	611a      	str	r2, [r3, #16]
}
 8009440:	e05d      	b.n	80094fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800944a:	d133      	bne.n	80094b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b21      	cmp	r3, #33	; 0x21
 8009456:	d109      	bne.n	800946c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945c:	b2db      	uxtb	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009468:	611a      	str	r2, [r3, #16]
 800946a:	e008      	b.n	800947e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <I2C_Master_SB+0x92>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d108      	bne.n	80094a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d032      	beq.n	80094fe <I2C_Master_SB+0x100>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d02d      	beq.n	80094fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094b0:	605a      	str	r2, [r3, #4]
}
 80094b2:	e024      	b.n	80094fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10e      	bne.n	80094da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	11db      	asrs	r3, r3, #7
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0306 	and.w	r3, r3, #6
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f063 030f 	orn	r3, r3, #15
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	611a      	str	r2, [r3, #16]
}
 80094d8:	e011      	b.n	80094fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d10d      	bne.n	80094fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	11db      	asrs	r3, r3, #7
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0306 	and.w	r3, r3, #6
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	f063 030e 	orn	r3, r3, #14
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	611a      	str	r2, [r3, #16]
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009516:	b2da      	uxtb	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <I2C_Master_ADD10+0x26>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952c:	2b00      	cmp	r3, #0
 800952e:	d108      	bne.n	8009542 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00c      	beq.n	8009552 <I2C_Master_ADD10+0x48>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009550:	605a      	str	r2, [r3, #4]
  }
}
 8009552:	bf00      	nop
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800955e:	b480      	push	{r7}
 8009560:	b091      	sub	sp, #68	; 0x44
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800956c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b22      	cmp	r3, #34	; 0x22
 8009586:	f040 8169 	bne.w	800985c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10f      	bne.n	80095b2 <I2C_Master_ADDR+0x54>
 8009592:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d10b      	bne.n	80095b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800959a:	2300      	movs	r3, #0
 800959c:	633b      	str	r3, [r7, #48]	; 0x30
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	633b      	str	r3, [r7, #48]	; 0x30
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	633b      	str	r3, [r7, #48]	; 0x30
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	e160      	b.n	8009874 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11d      	bne.n	80095f6 <I2C_Master_ADDR+0x98>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095c2:	d118      	bne.n	80095f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095c4:	2300      	movs	r3, #0
 80095c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	651a      	str	r2, [r3, #80]	; 0x50
 80095f4:	e13e      	b.n	8009874 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d113      	bne.n	8009628 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009600:	2300      	movs	r3, #0
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	62bb      	str	r3, [r7, #40]	; 0x28
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e115      	b.n	8009854 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962c:	b29b      	uxth	r3, r3
 800962e:	2b01      	cmp	r3, #1
 8009630:	f040 808a 	bne.w	8009748 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800963a:	d137      	bne.n	80096ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800964a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965a:	d113      	bne.n	8009684 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800966a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800966c:	2300      	movs	r3, #0
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	e0e7      	b.n	8009854 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009684:	2300      	movs	r3, #0
 8009686:	623b      	str	r3, [r7, #32]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	623b      	str	r3, [r7, #32]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	623b      	str	r3, [r7, #32]
 8009698:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	e0d3      	b.n	8009854 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80096ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d02e      	beq.n	8009710 <I2C_Master_ADDR+0x1b2>
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d02b      	beq.n	8009710 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80096b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ba:	2b12      	cmp	r3, #18
 80096bc:	d102      	bne.n	80096c4 <I2C_Master_ADDR+0x166>
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d125      	bne.n	8009710 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d00e      	beq.n	80096e8 <I2C_Master_ADDR+0x18a>
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d00b      	beq.n	80096e8 <I2C_Master_ADDR+0x18a>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d008      	beq.n	80096e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	e007      	b.n	80096f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096f8:	2300      	movs	r3, #0
 80096fa:	61fb      	str	r3, [r7, #28]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	61fb      	str	r3, [r7, #28]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	61fb      	str	r3, [r7, #28]
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	e0a1      	b.n	8009854 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800971e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009720:	2300      	movs	r3, #0
 8009722:	61bb      	str	r3, [r7, #24]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	e085      	b.n	8009854 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b02      	cmp	r3, #2
 8009750:	d14d      	bne.n	80097ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	2b04      	cmp	r3, #4
 8009756:	d016      	beq.n	8009786 <I2C_Master_ADDR+0x228>
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	2b02      	cmp	r3, #2
 800975c:	d013      	beq.n	8009786 <I2C_Master_ADDR+0x228>
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	2b10      	cmp	r3, #16
 8009762:	d010      	beq.n	8009786 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009772:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e007      	b.n	8009796 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009794:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097a4:	d117      	bne.n	80097d6 <I2C_Master_ADDR+0x278>
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097ac:	d00b      	beq.n	80097c6 <I2C_Master_ADDR+0x268>
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d008      	beq.n	80097c6 <I2C_Master_ADDR+0x268>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	2b08      	cmp	r3, #8
 80097b8:	d005      	beq.n	80097c6 <I2C_Master_ADDR+0x268>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	2b10      	cmp	r3, #16
 80097be:	d002      	beq.n	80097c6 <I2C_Master_ADDR+0x268>
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d107      	bne.n	80097d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	e032      	b.n	8009854 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800980c:	d117      	bne.n	800983e <I2C_Master_ADDR+0x2e0>
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009814:	d00b      	beq.n	800982e <I2C_Master_ADDR+0x2d0>
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	2b01      	cmp	r3, #1
 800981a:	d008      	beq.n	800982e <I2C_Master_ADDR+0x2d0>
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	2b08      	cmp	r3, #8
 8009820:	d005      	beq.n	800982e <I2C_Master_ADDR+0x2d0>
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	2b10      	cmp	r3, #16
 8009826:	d002      	beq.n	800982e <I2C_Master_ADDR+0x2d0>
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	2b20      	cmp	r3, #32
 800982c:	d107      	bne.n	800983e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800983c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800983e:	2300      	movs	r3, #0
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	613b      	str	r3, [r7, #16]
 8009852:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800985a:	e00b      	b.n	8009874 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
}
 8009872:	e7ff      	b.n	8009874 <I2C_Master_ADDR+0x316>
 8009874:	bf00      	nop
 8009876:	3744      	adds	r7, #68	; 0x44
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009894:	b29b      	uxth	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d02b      	beq.n	80098f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3b01      	subs	r3, #1
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d114      	bne.n	80098f2 <I2C_SlaveTransmit_TXE+0x72>
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	2b29      	cmp	r3, #41	; 0x29
 80098cc:	d111      	bne.n	80098f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2221      	movs	r2, #33	; 0x21
 80098e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2228      	movs	r2, #40	; 0x28
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff f9e7 	bl	8008cc0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d011      	beq.n	8009930 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009926:	b29b      	uxth	r3, r3
 8009928:	3b01      	subs	r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800994a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d02c      	beq.n	80099b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	691a      	ldr	r2, [r3, #16]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	b2d2      	uxtb	r2, r2
 8009962:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009972:	b29b      	uxth	r3, r3
 8009974:	3b01      	subs	r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d114      	bne.n	80099b0 <I2C_SlaveReceive_RXNE+0x74>
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b2a      	cmp	r3, #42	; 0x2a
 800998a:	d111      	bne.n	80099b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800999a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2222      	movs	r2, #34	; 0x22
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2228      	movs	r2, #40	; 0x28
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff f992 	bl	8008cd4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d012      	beq.n	80099f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691a      	ldr	r2, [r3, #16]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a16:	2b28      	cmp	r3, #40	; 0x28
 8009a18:	d127      	bne.n	8009a6a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	089b      	lsrs	r3, r3, #2
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009a36:	2301      	movs	r3, #1
 8009a38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	09db      	lsrs	r3, r3, #7
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	81bb      	strh	r3, [r7, #12]
 8009a4c:	e002      	b.n	8009a54 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009a5c:	89ba      	ldrh	r2, [r7, #12]
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff f940 	bl	8008ce8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009a68:	e00e      	b.n	8009a88 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60bb      	str	r3, [r7, #8]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	60bb      	str	r3, [r7, #8]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	60bb      	str	r3, [r7, #8]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009a88:	bf00      	nop
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009aae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	60bb      	str	r3, [r7, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 0201 	orr.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009adc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aec:	d172      	bne.n	8009bd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2b22      	cmp	r3, #34	; 0x22
 8009af2:	d002      	beq.n	8009afa <I2C_Slave_STOPF+0x6a>
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b2a      	cmp	r3, #42	; 0x2a
 8009af8:	d135      	bne.n	8009b66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f043 0204 	orr.w	r2, r3, #4
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fd ffa6 	bl	8007a84 <HAL_DMA_GetState>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d049      	beq.n	8009bd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b42:	4a69      	ldr	r2, [pc, #420]	; (8009ce8 <I2C_Slave_STOPF+0x258>)
 8009b44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fd fdee 	bl	800772c <HAL_DMA_Abort_IT>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d03d      	beq.n	8009bd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b64:	e035      	b.n	8009bd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d005      	beq.n	8009b8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f043 0204 	orr.w	r2, r3, #4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd ff70 	bl	8007a84 <HAL_DMA_GetState>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d014      	beq.n	8009bd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	4a4e      	ldr	r2, [pc, #312]	; (8009ce8 <I2C_Slave_STOPF+0x258>)
 8009bb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fd fdb8 	bl	800772c <HAL_DMA_Abort_IT>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d008      	beq.n	8009bd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	e000      	b.n	8009bd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009bd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d03e      	beq.n	8009c5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d112      	bne.n	8009c12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	b2d2      	uxtb	r2, r2
 8009bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d112      	bne.n	8009c46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691a      	ldr	r2, [r3, #16]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c54:	f043 0204 	orr.w	r2, r3, #4
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8b3 	bl	8009dd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009c6a:	e039      	b.n	8009ce0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c70:	d109      	bne.n	8009c86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2228      	movs	r2, #40	; 0x28
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff f827 	bl	8008cd4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b28      	cmp	r3, #40	; 0x28
 8009c90:	d111      	bne.n	8009cb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a15      	ldr	r2, [pc, #84]	; (8009cec <I2C_Slave_STOPF+0x25c>)
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7ff f828 	bl	8008d04 <HAL_I2C_ListenCpltCallback>
}
 8009cb4:	e014      	b.n	8009ce0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	2b22      	cmp	r3, #34	; 0x22
 8009cbc:	d002      	beq.n	8009cc4 <I2C_Slave_STOPF+0x234>
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b22      	cmp	r3, #34	; 0x22
 8009cc2:	d10d      	bne.n	8009ce0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7fe fffa 	bl	8008cd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	0800a331 	.word	0x0800a331
 8009cec:	ffff0000 	.word	0xffff0000

08009cf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d002      	beq.n	8009d12 <I2C_Slave_AF+0x22>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d129      	bne.n	8009d66 <I2C_Slave_AF+0x76>
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	2b28      	cmp	r3, #40	; 0x28
 8009d16:	d126      	bne.n	8009d66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a2c      	ldr	r2, [pc, #176]	; (8009dcc <I2C_Slave_AF+0xdc>)
 8009d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7fe ffd0 	bl	8008d04 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009d64:	e02e      	b.n	8009dc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b21      	cmp	r3, #33	; 0x21
 8009d6a:	d126      	bne.n	8009dba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a17      	ldr	r2, [pc, #92]	; (8009dcc <I2C_Slave_AF+0xdc>)
 8009d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2221      	movs	r2, #33	; 0x21
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009da0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009db0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7fe ff84 	bl	8008cc0 <HAL_I2C_SlaveTxCpltCallback>
}
 8009db8:	e004      	b.n	8009dc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009dc2:	615a      	str	r2, [r3, #20]
}
 8009dc4:	bf00      	nop
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	ffff0000 	.word	0xffff0000

08009dd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009de6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d002      	beq.n	8009df4 <I2C_ITError+0x24>
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b40      	cmp	r3, #64	; 0x40
 8009df2:	d10a      	bne.n	8009e0a <I2C_ITError+0x3a>
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	2b22      	cmp	r3, #34	; 0x22
 8009df8:	d107      	bne.n	8009e0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
 8009e0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e10:	2b28      	cmp	r3, #40	; 0x28
 8009e12:	d107      	bne.n	8009e24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2228      	movs	r2, #40	; 0x28
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e22:	e015      	b.n	8009e50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e32:	d00a      	beq.n	8009e4a <I2C_ITError+0x7a>
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	2b60      	cmp	r3, #96	; 0x60
 8009e38:	d007      	beq.n	8009e4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e5e:	d162      	bne.n	8009f26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d020      	beq.n	8009ec0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e82:	4a6a      	ldr	r2, [pc, #424]	; (800a02c <I2C_ITError+0x25c>)
 8009e84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fd fc4e 	bl	800772c <HAL_DMA_Abort_IT>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 8089 	beq.w	8009faa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 0201 	bic.w	r2, r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009eba:	4610      	mov	r0, r2
 8009ebc:	4798      	blx	r3
 8009ebe:	e074      	b.n	8009faa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec4:	4a59      	ldr	r2, [pc, #356]	; (800a02c <I2C_ITError+0x25c>)
 8009ec6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fd fc2d 	bl	800772c <HAL_DMA_Abort_IT>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d068      	beq.n	8009faa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee2:	2b40      	cmp	r3, #64	; 0x40
 8009ee4:	d10b      	bne.n	8009efe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	691a      	ldr	r2, [r3, #16]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0201 	bic.w	r2, r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	e041      	b.n	8009faa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b60      	cmp	r3, #96	; 0x60
 8009f30:	d125      	bne.n	8009f7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d10b      	bne.n	8009f66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7fe feec 	bl	8008d54 <HAL_I2C_AbortCpltCallback>
 8009f7c:	e015      	b.n	8009faa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d10b      	bne.n	8009fa4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691a      	ldr	r2, [r3, #16]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7fe fecb 	bl	8008d40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10e      	bne.n	8009fd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d104      	bne.n	8009fd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009fe6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d113      	bne.n	800a024 <I2C_ITError+0x254>
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	2b28      	cmp	r3, #40	; 0x28
 800a000:	d110      	bne.n	800a024 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a0a      	ldr	r2, [pc, #40]	; (800a030 <I2C_ITError+0x260>)
 800a006:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7fe fe70 	bl	8008d04 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a024:	bf00      	nop
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	0800a331 	.word	0x0800a331
 800a030:	ffff0000 	.word	0xffff0000

0800a034 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af02      	add	r7, sp, #8
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	461a      	mov	r2, r3
 800a042:	4603      	mov	r3, r0
 800a044:	817b      	strh	r3, [r7, #10]
 800a046:	460b      	mov	r3, r1
 800a048:	813b      	strh	r3, [r7, #8]
 800a04a:	4613      	mov	r3, r2
 800a04c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a05c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	2200      	movs	r2, #0
 800a066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 fa08 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00d      	beq.n	800a092 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	d103      	bne.n	800a08e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a08c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e05f      	b.n	800a152 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a092:	897b      	ldrh	r3, [r7, #10]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	6a3a      	ldr	r2, [r7, #32]
 800a0a6:	492d      	ldr	r1, [pc, #180]	; (800a15c <I2C_RequestMemoryWrite+0x128>)
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 fa40 	bl	800a52e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e04c      	b.n	800a152 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d0:	6a39      	ldr	r1, [r7, #32]
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f000 faaa 	bl	800a62c <I2C_WaitOnTXEFlagUntilTimeout>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00d      	beq.n	800a0fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d107      	bne.n	800a0f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e02b      	b.n	800a152 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d105      	bne.n	800a10c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a100:	893b      	ldrh	r3, [r7, #8]
 800a102:	b2da      	uxtb	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	611a      	str	r2, [r3, #16]
 800a10a:	e021      	b.n	800a150 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a10c:	893b      	ldrh	r3, [r7, #8]
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	b29b      	uxth	r3, r3
 800a112:	b2da      	uxtb	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11c:	6a39      	ldr	r1, [r7, #32]
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fa84 	bl	800a62c <I2C_WaitOnTXEFlagUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00d      	beq.n	800a146 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d107      	bne.n	800a142 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a140:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e005      	b.n	800a152 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a146:	893b      	ldrh	r3, [r7, #8]
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	00010002 	.word	0x00010002

0800a160 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	4608      	mov	r0, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	461a      	mov	r2, r3
 800a16e:	4603      	mov	r3, r0
 800a170:	817b      	strh	r3, [r7, #10]
 800a172:	460b      	mov	r3, r1
 800a174:	813b      	strh	r3, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a188:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 f96a 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00d      	beq.n	800a1ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c0:	d103      	bne.n	800a1ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e0aa      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1ce:	897b      	ldrh	r3, [r7, #10]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	6a3a      	ldr	r2, [r7, #32]
 800a1e2:	4952      	ldr	r1, [pc, #328]	; (800a32c <I2C_RequestMemoryRead+0x1cc>)
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f9a2 	bl	800a52e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e097      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20c:	6a39      	ldr	r1, [r7, #32]
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 fa0c 	bl	800a62c <I2C_WaitOnTXEFlagUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00d      	beq.n	800a236 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d107      	bne.n	800a232 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e076      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d105      	bne.n	800a248 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a23c:	893b      	ldrh	r3, [r7, #8]
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	611a      	str	r2, [r3, #16]
 800a246:	e021      	b.n	800a28c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a248:	893b      	ldrh	r3, [r7, #8]
 800a24a:	0a1b      	lsrs	r3, r3, #8
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a258:	6a39      	ldr	r1, [r7, #32]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f9e6 	bl	800a62c <I2C_WaitOnTXEFlagUntilTimeout>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00d      	beq.n	800a282 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	d107      	bne.n	800a27e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a27c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e050      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a282:	893b      	ldrh	r3, [r7, #8]
 800a284:	b2da      	uxtb	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28e:	6a39      	ldr	r1, [r7, #32]
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 f9cb 	bl	800a62c <I2C_WaitOnTXEFlagUntilTimeout>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00d      	beq.n	800a2b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d107      	bne.n	800a2b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e035      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f8d3 	bl	800a480 <I2C_WaitOnFlagUntilTimeout>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ee:	d103      	bne.n	800a2f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e013      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a2fc:	897b      	ldrh	r3, [r7, #10]
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	b2da      	uxtb	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	6a3a      	ldr	r2, [r7, #32]
 800a310:	4906      	ldr	r1, [pc, #24]	; (800a32c <I2C_RequestMemoryRead+0x1cc>)
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f90b 	bl	800a52e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	00010002 	.word	0x00010002

0800a330 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a340:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a348:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a34a:	4b4b      	ldr	r3, [pc, #300]	; (800a478 <I2C_DMAAbort+0x148>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	08db      	lsrs	r3, r3, #3
 800a350:	4a4a      	ldr	r2, [pc, #296]	; (800a47c <I2C_DMAAbort+0x14c>)
 800a352:	fba2 2303 	umull	r2, r3, r2, r3
 800a356:	0a1a      	lsrs	r2, r3, #8
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	00da      	lsls	r2, r3, #3
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d106      	bne.n	800a378 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	f043 0220 	orr.w	r2, r3, #32
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a376:	e00a      	b.n	800a38e <I2C_DMAAbort+0x5e>
    }
    count--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a38c:	d0ea      	beq.n	800a364 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39a:	2200      	movs	r2, #0
 800a39c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0201 	bic.w	r2, r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b60      	cmp	r3, #96	; 0x60
 800a3fe:	d10e      	bne.n	800a41e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2220      	movs	r2, #32
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2200      	movs	r2, #0
 800a414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a416:	6978      	ldr	r0, [r7, #20]
 800a418:	f7fe fc9c 	bl	8008d54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a41c:	e027      	b.n	800a46e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a41e:	7cfb      	ldrb	r3, [r7, #19]
 800a420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a424:	2b28      	cmp	r3, #40	; 0x28
 800a426:	d117      	bne.n	800a458 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2228      	movs	r2, #40	; 0x28
 800a452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a456:	e007      	b.n	800a468 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a468:	6978      	ldr	r0, [r7, #20]
 800a46a:	f7fe fc69 	bl	8008d40 <HAL_I2C_ErrorCallback>
}
 800a46e:	bf00      	nop
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000154 	.word	0x20000154
 800a47c:	14f8b589 	.word	0x14f8b589

0800a480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	4613      	mov	r3, r2
 800a48e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a490:	e025      	b.n	800a4de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d021      	beq.n	800a4de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a49a:	f7fc ff57 	bl	800734c <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d302      	bcc.n	800a4b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d116      	bne.n	800a4de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	f043 0220 	orr.w	r2, r3, #32
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e023      	b.n	800a526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d10d      	bne.n	800a504 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	43da      	mvns	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bf0c      	ite	eq
 800a4fa:	2301      	moveq	r3, #1
 800a4fc:	2300      	movne	r3, #0
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	e00c      	b.n	800a51e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	43da      	mvns	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	b29b      	uxth	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	429a      	cmp	r2, r3
 800a522:	d0b6      	beq.n	800a492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	60b9      	str	r1, [r7, #8]
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a53c:	e051      	b.n	800a5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a54c:	d123      	bne.n	800a596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a55c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f043 0204 	orr.w	r2, r3, #4
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e046      	b.n	800a624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59c:	d021      	beq.n	800a5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59e:	f7fc fed5 	bl	800734c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d302      	bcc.n	800a5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d116      	bne.n	800a5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	f043 0220 	orr.w	r2, r3, #32
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e020      	b.n	800a624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	0c1b      	lsrs	r3, r3, #16
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d10c      	bne.n	800a606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	43da      	mvns	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	bf14      	ite	ne
 800a5fe:	2301      	movne	r3, #1
 800a600:	2300      	moveq	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	e00b      	b.n	800a61e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	43da      	mvns	r2, r3
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	4013      	ands	r3, r2
 800a612:	b29b      	uxth	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	bf14      	ite	ne
 800a618:	2301      	movne	r3, #1
 800a61a:	2300      	moveq	r3, #0
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d18d      	bne.n	800a53e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a638:	e02d      	b.n	800a696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f900 	bl	800a840 <I2C_IsAcknowledgeFailed>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e02d      	b.n	800a6a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d021      	beq.n	800a696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a652:	f7fc fe7b 	bl	800734c <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d302      	bcc.n	800a668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d116      	bne.n	800a696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2220      	movs	r2, #32
 800a672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a682:	f043 0220 	orr.w	r2, r3, #32
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e007      	b.n	800a6a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a0:	2b80      	cmp	r3, #128	; 0x80
 800a6a2:	d1ca      	bne.n	800a63a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6ba:	e02d      	b.n	800a718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f8bf 	bl	800a840 <I2C_IsAcknowledgeFailed>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e02d      	b.n	800a728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d2:	d021      	beq.n	800a718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d4:	f7fc fe3a 	bl	800734c <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d302      	bcc.n	800a6ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d116      	bne.n	800a718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	f043 0220 	orr.w	r2, r3, #32
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e007      	b.n	800a728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b04      	cmp	r3, #4
 800a724:	d1ca      	bne.n	800a6bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	08db      	lsrs	r3, r3, #3
 800a742:	4a13      	ldr	r2, [pc, #76]	; (800a790 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a744:	fba2 2303 	umull	r2, r3, r2, r3
 800a748:	0a1a      	lsrs	r2, r3, #8
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3b01      	subs	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d107      	bne.n	800a76e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	f043 0220 	orr.w	r2, r3, #32
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e008      	b.n	800a780 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a77c:	d0e9      	beq.n	800a752 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	20000154 	.word	0x20000154
 800a790:	14f8b589 	.word	0x14f8b589

0800a794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7a0:	e042      	b.n	800a828 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d119      	bne.n	800a7e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0210 	mvn.w	r2, #16
 800a7b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e029      	b.n	800a838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7e4:	f7fc fdb2 	bl	800734c <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d302      	bcc.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d116      	bne.n	800a828 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a814:	f043 0220 	orr.w	r2, r3, #32
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e007      	b.n	800a838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a832:	2b40      	cmp	r3, #64	; 0x40
 800a834:	d1b5      	bne.n	800a7a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a856:	d11b      	bne.n	800a890 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a860:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	f043 0204 	orr.w	r2, r3, #4
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e000      	b.n	800a892 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a8ae:	d103      	bne.n	800a8b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a8b6:	e007      	b.n	800a8c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a8c0:	d102      	bne.n	800a8c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e267      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d075      	beq.n	800a9de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a8f2:	4b88      	ldr	r3, [pc, #544]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f003 030c 	and.w	r3, r3, #12
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d00c      	beq.n	800a918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a8fe:	4b85      	ldr	r3, [pc, #532]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a906:	2b08      	cmp	r3, #8
 800a908:	d112      	bne.n	800a930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a90a:	4b82      	ldr	r3, [pc, #520]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a916:	d10b      	bne.n	800a930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a918:	4b7e      	ldr	r3, [pc, #504]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d05b      	beq.n	800a9dc <HAL_RCC_OscConfig+0x108>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d157      	bne.n	800a9dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e242      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a938:	d106      	bne.n	800a948 <HAL_RCC_OscConfig+0x74>
 800a93a:	4b76      	ldr	r3, [pc, #472]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a75      	ldr	r2, [pc, #468]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	e01d      	b.n	800a984 <HAL_RCC_OscConfig+0xb0>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a950:	d10c      	bne.n	800a96c <HAL_RCC_OscConfig+0x98>
 800a952:	4b70      	ldr	r3, [pc, #448]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a6f      	ldr	r2, [pc, #444]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	4b6d      	ldr	r3, [pc, #436]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a6c      	ldr	r2, [pc, #432]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	e00b      	b.n	800a984 <HAL_RCC_OscConfig+0xb0>
 800a96c:	4b69      	ldr	r3, [pc, #420]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a68      	ldr	r2, [pc, #416]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	4b66      	ldr	r3, [pc, #408]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a65      	ldr	r2, [pc, #404]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a97e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d013      	beq.n	800a9b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a98c:	f7fc fcde 	bl	800734c <HAL_GetTick>
 800a990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a992:	e008      	b.n	800a9a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a994:	f7fc fcda 	bl	800734c <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	2b64      	cmp	r3, #100	; 0x64
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e207      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9a6:	4b5b      	ldr	r3, [pc, #364]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0f0      	beq.n	800a994 <HAL_RCC_OscConfig+0xc0>
 800a9b2:	e014      	b.n	800a9de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9b4:	f7fc fcca 	bl	800734c <HAL_GetTick>
 800a9b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9ba:	e008      	b.n	800a9ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9bc:	f7fc fcc6 	bl	800734c <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	2b64      	cmp	r3, #100	; 0x64
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e1f3      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9ce:	4b51      	ldr	r3, [pc, #324]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1f0      	bne.n	800a9bc <HAL_RCC_OscConfig+0xe8>
 800a9da:	e000      	b.n	800a9de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d063      	beq.n	800aab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a9ea:	4b4a      	ldr	r3, [pc, #296]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f003 030c 	and.w	r3, r3, #12
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00b      	beq.n	800aa0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a9f6:	4b47      	ldr	r3, [pc, #284]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a9fe:	2b08      	cmp	r3, #8
 800aa00:	d11c      	bne.n	800aa3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa02:	4b44      	ldr	r3, [pc, #272]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d116      	bne.n	800aa3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa0e:	4b41      	ldr	r3, [pc, #260]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d005      	beq.n	800aa26 <HAL_RCC_OscConfig+0x152>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d001      	beq.n	800aa26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e1c7      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa26:	4b3b      	ldr	r3, [pc, #236]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	4937      	ldr	r1, [pc, #220]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa3a:	e03a      	b.n	800aab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d020      	beq.n	800aa86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa44:	4b34      	ldr	r3, [pc, #208]	; (800ab18 <HAL_RCC_OscConfig+0x244>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa4a:	f7fc fc7f 	bl	800734c <HAL_GetTick>
 800aa4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa50:	e008      	b.n	800aa64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa52:	f7fc fc7b 	bl	800734c <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d901      	bls.n	800aa64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e1a8      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa64:	4b2b      	ldr	r3, [pc, #172]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d0f0      	beq.n	800aa52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa70:	4b28      	ldr	r3, [pc, #160]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	4925      	ldr	r1, [pc, #148]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	600b      	str	r3, [r1, #0]
 800aa84:	e015      	b.n	800aab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa86:	4b24      	ldr	r3, [pc, #144]	; (800ab18 <HAL_RCC_OscConfig+0x244>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa8c:	f7fc fc5e 	bl	800734c <HAL_GetTick>
 800aa90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa92:	e008      	b.n	800aaa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa94:	f7fc fc5a 	bl	800734c <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d901      	bls.n	800aaa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e187      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaa6:	4b1b      	ldr	r3, [pc, #108]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f0      	bne.n	800aa94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0308 	and.w	r3, r3, #8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d036      	beq.n	800ab2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aac6:	4b15      	ldr	r3, [pc, #84]	; (800ab1c <HAL_RCC_OscConfig+0x248>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aacc:	f7fc fc3e 	bl	800734c <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aad4:	f7fc fc3a 	bl	800734c <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e167      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <HAL_RCC_OscConfig+0x240>)
 800aae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCC_OscConfig+0x200>
 800aaf2:	e01b      	b.n	800ab2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aaf4:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <HAL_RCC_OscConfig+0x248>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aafa:	f7fc fc27 	bl	800734c <HAL_GetTick>
 800aafe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab00:	e00e      	b.n	800ab20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab02:	f7fc fc23 	bl	800734c <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d907      	bls.n	800ab20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e150      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
 800ab14:	40023800 	.word	0x40023800
 800ab18:	42470000 	.word	0x42470000
 800ab1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab20:	4b88      	ldr	r3, [pc, #544]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ab22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1ea      	bne.n	800ab02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 8097 	beq.w	800ac68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab3e:	4b81      	ldr	r3, [pc, #516]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10f      	bne.n	800ab6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60bb      	str	r3, [r7, #8]
 800ab4e:	4b7d      	ldr	r3, [pc, #500]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	4a7c      	ldr	r2, [pc, #496]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ab54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab58:	6413      	str	r3, [r2, #64]	; 0x40
 800ab5a:	4b7a      	ldr	r3, [pc, #488]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab62:	60bb      	str	r3, [r7, #8]
 800ab64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab66:	2301      	movs	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab6a:	4b77      	ldr	r3, [pc, #476]	; (800ad48 <HAL_RCC_OscConfig+0x474>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d118      	bne.n	800aba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab76:	4b74      	ldr	r3, [pc, #464]	; (800ad48 <HAL_RCC_OscConfig+0x474>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a73      	ldr	r2, [pc, #460]	; (800ad48 <HAL_RCC_OscConfig+0x474>)
 800ab7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab82:	f7fc fbe3 	bl	800734c <HAL_GetTick>
 800ab86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab88:	e008      	b.n	800ab9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab8a:	f7fc fbdf 	bl	800734c <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d901      	bls.n	800ab9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e10c      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab9c:	4b6a      	ldr	r3, [pc, #424]	; (800ad48 <HAL_RCC_OscConfig+0x474>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f0      	beq.n	800ab8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d106      	bne.n	800abbe <HAL_RCC_OscConfig+0x2ea>
 800abb0:	4b64      	ldr	r3, [pc, #400]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb4:	4a63      	ldr	r2, [pc, #396]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abb6:	f043 0301 	orr.w	r3, r3, #1
 800abba:	6713      	str	r3, [r2, #112]	; 0x70
 800abbc:	e01c      	b.n	800abf8 <HAL_RCC_OscConfig+0x324>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	2b05      	cmp	r3, #5
 800abc4:	d10c      	bne.n	800abe0 <HAL_RCC_OscConfig+0x30c>
 800abc6:	4b5f      	ldr	r3, [pc, #380]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abca:	4a5e      	ldr	r2, [pc, #376]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abcc:	f043 0304 	orr.w	r3, r3, #4
 800abd0:	6713      	str	r3, [r2, #112]	; 0x70
 800abd2:	4b5c      	ldr	r3, [pc, #368]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	4a5b      	ldr	r2, [pc, #364]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abd8:	f043 0301 	orr.w	r3, r3, #1
 800abdc:	6713      	str	r3, [r2, #112]	; 0x70
 800abde:	e00b      	b.n	800abf8 <HAL_RCC_OscConfig+0x324>
 800abe0:	4b58      	ldr	r3, [pc, #352]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe4:	4a57      	ldr	r2, [pc, #348]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abe6:	f023 0301 	bic.w	r3, r3, #1
 800abea:	6713      	str	r3, [r2, #112]	; 0x70
 800abec:	4b55      	ldr	r3, [pc, #340]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf0:	4a54      	ldr	r2, [pc, #336]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800abf2:	f023 0304 	bic.w	r3, r3, #4
 800abf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d015      	beq.n	800ac2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac00:	f7fc fba4 	bl	800734c <HAL_GetTick>
 800ac04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac06:	e00a      	b.n	800ac1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac08:	f7fc fba0 	bl	800734c <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d901      	bls.n	800ac1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e0cb      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac1e:	4b49      	ldr	r3, [pc, #292]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ac20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0ee      	beq.n	800ac08 <HAL_RCC_OscConfig+0x334>
 800ac2a:	e014      	b.n	800ac56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac2c:	f7fc fb8e 	bl	800734c <HAL_GetTick>
 800ac30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac32:	e00a      	b.n	800ac4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac34:	f7fc fb8a 	bl	800734c <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d901      	bls.n	800ac4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e0b5      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac4a:	4b3e      	ldr	r3, [pc, #248]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ac4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1ee      	bne.n	800ac34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d105      	bne.n	800ac68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac5c:	4b39      	ldr	r3, [pc, #228]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	4a38      	ldr	r2, [pc, #224]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ac62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 80a1 	beq.w	800adb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac72:	4b34      	ldr	r3, [pc, #208]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	f003 030c 	and.w	r3, r3, #12
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d05c      	beq.n	800ad38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d141      	bne.n	800ad0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac86:	4b31      	ldr	r3, [pc, #196]	; (800ad4c <HAL_RCC_OscConfig+0x478>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac8c:	f7fc fb5e 	bl	800734c <HAL_GetTick>
 800ac90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac92:	e008      	b.n	800aca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac94:	f7fc fb5a 	bl	800734c <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d901      	bls.n	800aca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e087      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aca6:	4b27      	ldr	r3, [pc, #156]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1f0      	bne.n	800ac94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	69da      	ldr	r2, [r3, #28]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	431a      	orrs	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	019b      	lsls	r3, r3, #6
 800acc2:	431a      	orrs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	085b      	lsrs	r3, r3, #1
 800acca:	3b01      	subs	r3, #1
 800accc:	041b      	lsls	r3, r3, #16
 800acce:	431a      	orrs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	061b      	lsls	r3, r3, #24
 800acd6:	491b      	ldr	r1, [pc, #108]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acdc:	4b1b      	ldr	r3, [pc, #108]	; (800ad4c <HAL_RCC_OscConfig+0x478>)
 800acde:	2201      	movs	r2, #1
 800ace0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace2:	f7fc fb33 	bl	800734c <HAL_GetTick>
 800ace6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ace8:	e008      	b.n	800acfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acea:	f7fc fb2f 	bl	800734c <HAL_GetTick>
 800acee:	4602      	mov	r2, r0
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d901      	bls.n	800acfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e05c      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acfc:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0f0      	beq.n	800acea <HAL_RCC_OscConfig+0x416>
 800ad08:	e054      	b.n	800adb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad0a:	4b10      	ldr	r3, [pc, #64]	; (800ad4c <HAL_RCC_OscConfig+0x478>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad10:	f7fc fb1c 	bl	800734c <HAL_GetTick>
 800ad14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad16:	e008      	b.n	800ad2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad18:	f7fc fb18 	bl	800734c <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e045      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <HAL_RCC_OscConfig+0x470>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1f0      	bne.n	800ad18 <HAL_RCC_OscConfig+0x444>
 800ad36:	e03d      	b.n	800adb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d107      	bne.n	800ad50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e038      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
 800ad44:	40023800 	.word	0x40023800
 800ad48:	40007000 	.word	0x40007000
 800ad4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ad50:	4b1b      	ldr	r3, [pc, #108]	; (800adc0 <HAL_RCC_OscConfig+0x4ec>)
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d028      	beq.n	800adb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d121      	bne.n	800adb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d11a      	bne.n	800adb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ad80:	4013      	ands	r3, r2
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d111      	bne.n	800adb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adac:	429a      	cmp	r2, r3
 800adae:	d001      	beq.n	800adb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e000      	b.n	800adb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	40023800 	.word	0x40023800

0800adc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e0cc      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800add8:	4b68      	ldr	r3, [pc, #416]	; (800af7c <HAL_RCC_ClockConfig+0x1b8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0307 	and.w	r3, r3, #7
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d90c      	bls.n	800ae00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ade6:	4b65      	ldr	r3, [pc, #404]	; (800af7c <HAL_RCC_ClockConfig+0x1b8>)
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	b2d2      	uxtb	r2, r2
 800adec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adee:	4b63      	ldr	r3, [pc, #396]	; (800af7c <HAL_RCC_ClockConfig+0x1b8>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0307 	and.w	r3, r3, #7
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d001      	beq.n	800ae00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e0b8      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d020      	beq.n	800ae4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae18:	4b59      	ldr	r3, [pc, #356]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	4a58      	ldr	r2, [pc, #352]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0308 	and.w	r3, r3, #8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d005      	beq.n	800ae3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae30:	4b53      	ldr	r3, [pc, #332]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4a52      	ldr	r2, [pc, #328]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae3c:	4b50      	ldr	r3, [pc, #320]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	494d      	ldr	r1, [pc, #308]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d044      	beq.n	800aee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d107      	bne.n	800ae72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae62:	4b47      	ldr	r3, [pc, #284]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d119      	bne.n	800aea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e07f      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d003      	beq.n	800ae82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d107      	bne.n	800ae92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae82:	4b3f      	ldr	r3, [pc, #252]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d109      	bne.n	800aea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e06f      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae92:	4b3b      	ldr	r3, [pc, #236]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e067      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aea2:	4b37      	ldr	r3, [pc, #220]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f023 0203 	bic.w	r2, r3, #3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	4934      	ldr	r1, [pc, #208]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aeb4:	f7fc fa4a 	bl	800734c <HAL_GetTick>
 800aeb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeba:	e00a      	b.n	800aed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aebc:	f7fc fa46 	bl	800734c <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d901      	bls.n	800aed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aece:	2303      	movs	r3, #3
 800aed0:	e04f      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aed2:	4b2b      	ldr	r3, [pc, #172]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f003 020c 	and.w	r2, r3, #12
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d1eb      	bne.n	800aebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aee4:	4b25      	ldr	r3, [pc, #148]	; (800af7c <HAL_RCC_ClockConfig+0x1b8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d20c      	bcs.n	800af0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aef2:	4b22      	ldr	r3, [pc, #136]	; (800af7c <HAL_RCC_ClockConfig+0x1b8>)
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	b2d2      	uxtb	r2, r2
 800aef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aefa:	4b20      	ldr	r3, [pc, #128]	; (800af7c <HAL_RCC_ClockConfig+0x1b8>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0307 	and.w	r3, r3, #7
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d001      	beq.n	800af0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e032      	b.n	800af72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d008      	beq.n	800af2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af18:	4b19      	ldr	r3, [pc, #100]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	4916      	ldr	r1, [pc, #88]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800af26:	4313      	orrs	r3, r2
 800af28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0308 	and.w	r3, r3, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d009      	beq.n	800af4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af36:	4b12      	ldr	r3, [pc, #72]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	490e      	ldr	r1, [pc, #56]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800af46:	4313      	orrs	r3, r2
 800af48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af4a:	f000 f821 	bl	800af90 <HAL_RCC_GetSysClockFreq>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <HAL_RCC_ClockConfig+0x1bc>)
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	091b      	lsrs	r3, r3, #4
 800af56:	f003 030f 	and.w	r3, r3, #15
 800af5a:	490a      	ldr	r1, [pc, #40]	; (800af84 <HAL_RCC_ClockConfig+0x1c0>)
 800af5c:	5ccb      	ldrb	r3, [r1, r3]
 800af5e:	fa22 f303 	lsr.w	r3, r2, r3
 800af62:	4a09      	ldr	r2, [pc, #36]	; (800af88 <HAL_RCC_ClockConfig+0x1c4>)
 800af64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af66:	4b09      	ldr	r3, [pc, #36]	; (800af8c <HAL_RCC_ClockConfig+0x1c8>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fc f9aa 	bl	80072c4 <HAL_InitTick>

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	40023c00 	.word	0x40023c00
 800af80:	40023800 	.word	0x40023800
 800af84:	080109e8 	.word	0x080109e8
 800af88:	20000154 	.word	0x20000154
 800af8c:	20000180 	.word	0x20000180

0800af90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af94:	b094      	sub	sp, #80	; 0x50
 800af96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	647b      	str	r3, [r7, #68]	; 0x44
 800af9c:	2300      	movs	r3, #0
 800af9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afa0:	2300      	movs	r3, #0
 800afa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afa8:	4b79      	ldr	r3, [pc, #484]	; (800b190 <HAL_RCC_GetSysClockFreq+0x200>)
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f003 030c 	and.w	r3, r3, #12
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d00d      	beq.n	800afd0 <HAL_RCC_GetSysClockFreq+0x40>
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	f200 80e1 	bhi.w	800b17c <HAL_RCC_GetSysClockFreq+0x1ec>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <HAL_RCC_GetSysClockFreq+0x34>
 800afbe:	2b04      	cmp	r3, #4
 800afc0:	d003      	beq.n	800afca <HAL_RCC_GetSysClockFreq+0x3a>
 800afc2:	e0db      	b.n	800b17c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800afc4:	4b73      	ldr	r3, [pc, #460]	; (800b194 <HAL_RCC_GetSysClockFreq+0x204>)
 800afc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800afc8:	e0db      	b.n	800b182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800afca:	4b73      	ldr	r3, [pc, #460]	; (800b198 <HAL_RCC_GetSysClockFreq+0x208>)
 800afcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800afce:	e0d8      	b.n	800b182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800afd0:	4b6f      	ldr	r3, [pc, #444]	; (800b190 <HAL_RCC_GetSysClockFreq+0x200>)
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800afda:	4b6d      	ldr	r3, [pc, #436]	; (800b190 <HAL_RCC_GetSysClockFreq+0x200>)
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d063      	beq.n	800b0ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afe6:	4b6a      	ldr	r3, [pc, #424]	; (800b190 <HAL_RCC_GetSysClockFreq+0x200>)
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	099b      	lsrs	r3, r3, #6
 800afec:	2200      	movs	r2, #0
 800afee:	63bb      	str	r3, [r7, #56]	; 0x38
 800aff0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	633b      	str	r3, [r7, #48]	; 0x30
 800affa:	2300      	movs	r3, #0
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
 800affe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b002:	4622      	mov	r2, r4
 800b004:	462b      	mov	r3, r5
 800b006:	f04f 0000 	mov.w	r0, #0
 800b00a:	f04f 0100 	mov.w	r1, #0
 800b00e:	0159      	lsls	r1, r3, #5
 800b010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b014:	0150      	lsls	r0, r2, #5
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4621      	mov	r1, r4
 800b01c:	1a51      	subs	r1, r2, r1
 800b01e:	6139      	str	r1, [r7, #16]
 800b020:	4629      	mov	r1, r5
 800b022:	eb63 0301 	sbc.w	r3, r3, r1
 800b026:	617b      	str	r3, [r7, #20]
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	f04f 0300 	mov.w	r3, #0
 800b030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b034:	4659      	mov	r1, fp
 800b036:	018b      	lsls	r3, r1, #6
 800b038:	4651      	mov	r1, sl
 800b03a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b03e:	4651      	mov	r1, sl
 800b040:	018a      	lsls	r2, r1, #6
 800b042:	4651      	mov	r1, sl
 800b044:	ebb2 0801 	subs.w	r8, r2, r1
 800b048:	4659      	mov	r1, fp
 800b04a:	eb63 0901 	sbc.w	r9, r3, r1
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	f04f 0300 	mov.w	r3, #0
 800b056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b05a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b05e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b062:	4690      	mov	r8, r2
 800b064:	4699      	mov	r9, r3
 800b066:	4623      	mov	r3, r4
 800b068:	eb18 0303 	adds.w	r3, r8, r3
 800b06c:	60bb      	str	r3, [r7, #8]
 800b06e:	462b      	mov	r3, r5
 800b070:	eb49 0303 	adc.w	r3, r9, r3
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	f04f 0200 	mov.w	r2, #0
 800b07a:	f04f 0300 	mov.w	r3, #0
 800b07e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b082:	4629      	mov	r1, r5
 800b084:	024b      	lsls	r3, r1, #9
 800b086:	4621      	mov	r1, r4
 800b088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b08c:	4621      	mov	r1, r4
 800b08e:	024a      	lsls	r2, r1, #9
 800b090:	4610      	mov	r0, r2
 800b092:	4619      	mov	r1, r3
 800b094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b096:	2200      	movs	r2, #0
 800b098:	62bb      	str	r3, [r7, #40]	; 0x28
 800b09a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b09c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0a0:	f7f5 f8a4 	bl	80001ec <__aeabi_uldivmod>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0ac:	e058      	b.n	800b160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0ae:	4b38      	ldr	r3, [pc, #224]	; (800b190 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	099b      	lsrs	r3, r3, #6
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b0be:	623b      	str	r3, [r7, #32]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	f04f 0000 	mov.w	r0, #0
 800b0d0:	f04f 0100 	mov.w	r1, #0
 800b0d4:	0159      	lsls	r1, r3, #5
 800b0d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b0da:	0150      	lsls	r0, r2, #5
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4641      	mov	r1, r8
 800b0e2:	ebb2 0a01 	subs.w	sl, r2, r1
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	eb63 0b01 	sbc.w	fp, r3, r1
 800b0ec:	f04f 0200 	mov.w	r2, #0
 800b0f0:	f04f 0300 	mov.w	r3, #0
 800b0f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b0f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b0fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b100:	ebb2 040a 	subs.w	r4, r2, sl
 800b104:	eb63 050b 	sbc.w	r5, r3, fp
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 0300 	mov.w	r3, #0
 800b110:	00eb      	lsls	r3, r5, #3
 800b112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b116:	00e2      	lsls	r2, r4, #3
 800b118:	4614      	mov	r4, r2
 800b11a:	461d      	mov	r5, r3
 800b11c:	4643      	mov	r3, r8
 800b11e:	18e3      	adds	r3, r4, r3
 800b120:	603b      	str	r3, [r7, #0]
 800b122:	464b      	mov	r3, r9
 800b124:	eb45 0303 	adc.w	r3, r5, r3
 800b128:	607b      	str	r3, [r7, #4]
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	f04f 0300 	mov.w	r3, #0
 800b132:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b136:	4629      	mov	r1, r5
 800b138:	028b      	lsls	r3, r1, #10
 800b13a:	4621      	mov	r1, r4
 800b13c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b140:	4621      	mov	r1, r4
 800b142:	028a      	lsls	r2, r1, #10
 800b144:	4610      	mov	r0, r2
 800b146:	4619      	mov	r1, r3
 800b148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b14a:	2200      	movs	r2, #0
 800b14c:	61bb      	str	r3, [r7, #24]
 800b14e:	61fa      	str	r2, [r7, #28]
 800b150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b154:	f7f5 f84a 	bl	80001ec <__aeabi_uldivmod>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4613      	mov	r3, r2
 800b15e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b160:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <HAL_RCC_GetSysClockFreq+0x200>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	3301      	adds	r3, #1
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b174:	fbb2 f3f3 	udiv	r3, r2, r3
 800b178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b17a:	e002      	b.n	800b182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b17c:	4b05      	ldr	r3, [pc, #20]	; (800b194 <HAL_RCC_GetSysClockFreq+0x204>)
 800b17e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b180:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b184:	4618      	mov	r0, r3
 800b186:	3750      	adds	r7, #80	; 0x50
 800b188:	46bd      	mov	sp, r7
 800b18a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b18e:	bf00      	nop
 800b190:	40023800 	.word	0x40023800
 800b194:	00f42400 	.word	0x00f42400
 800b198:	007a1200 	.word	0x007a1200

0800b19c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b19c:	b480      	push	{r7}
 800b19e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1a0:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	20000154 	.word	0x20000154

0800b1b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b1b8:	f7ff fff0 	bl	800b19c <HAL_RCC_GetHCLKFreq>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	0a9b      	lsrs	r3, r3, #10
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	4903      	ldr	r1, [pc, #12]	; (800b1d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1ca:	5ccb      	ldrb	r3, [r1, r3]
 800b1cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	40023800 	.word	0x40023800
 800b1d8:	080109f8 	.word	0x080109f8

0800b1dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b1e0:	f7ff ffdc 	bl	800b19c <HAL_RCC_GetHCLKFreq>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	0b5b      	lsrs	r3, r3, #13
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	4903      	ldr	r1, [pc, #12]	; (800b200 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1f2:	5ccb      	ldrb	r3, [r1, r3]
 800b1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	40023800 	.word	0x40023800
 800b200:	080109f8 	.word	0x080109f8

0800b204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e07b      	b.n	800b30e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d108      	bne.n	800b230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b226:	d009      	beq.n	800b23c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	61da      	str	r2, [r3, #28]
 800b22e:	e005      	b.n	800b23c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7fa fe0e 	bl	8005e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b28e:	431a      	orrs	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	431a      	orrs	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c0:	ea42 0103 	orr.w	r1, r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	430a      	orrs	r2, r1
 800b2d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	0c1b      	lsrs	r3, r3, #16
 800b2da:	f003 0104 	and.w	r1, r3, #4
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e2:	f003 0210 	and.w	r2, r3, #16
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b088      	sub	sp, #32
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	603b      	str	r3, [r7, #0]
 800b322:	4613      	mov	r3, r2
 800b324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_SPI_Transmit+0x22>
 800b334:	2302      	movs	r3, #2
 800b336:	e126      	b.n	800b586 <HAL_SPI_Transmit+0x270>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b340:	f7fc f804 	bl	800734c <HAL_GetTick>
 800b344:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b01      	cmp	r3, #1
 800b354:	d002      	beq.n	800b35c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b356:	2302      	movs	r3, #2
 800b358:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b35a:	e10b      	b.n	800b574 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <HAL_SPI_Transmit+0x52>
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b36c:	e102      	b.n	800b574 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2203      	movs	r2, #3
 800b372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	88fa      	ldrh	r2, [r7, #6]
 800b386:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	88fa      	ldrh	r2, [r7, #6]
 800b38c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3b4:	d10f      	bne.n	800b3d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d007      	beq.n	800b3f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3fc:	d14b      	bne.n	800b496 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <HAL_SPI_Transmit+0xf6>
 800b406:	8afb      	ldrh	r3, [r7, #22]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d13e      	bne.n	800b48a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b410:	881a      	ldrh	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41c:	1c9a      	adds	r2, r3, #2
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b426:	b29b      	uxth	r3, r3
 800b428:	3b01      	subs	r3, #1
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b430:	e02b      	b.n	800b48a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d112      	bne.n	800b466 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b444:	881a      	ldrh	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b450:	1c9a      	adds	r2, r3, #2
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	3b01      	subs	r3, #1
 800b45e:	b29a      	uxth	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	86da      	strh	r2, [r3, #54]	; 0x36
 800b464:	e011      	b.n	800b48a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b466:	f7fb ff71 	bl	800734c <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d803      	bhi.n	800b47e <HAL_SPI_Transmit+0x168>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47c:	d102      	bne.n	800b484 <HAL_SPI_Transmit+0x16e>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b488:	e074      	b.n	800b574 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b48e:	b29b      	uxth	r3, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1ce      	bne.n	800b432 <HAL_SPI_Transmit+0x11c>
 800b494:	e04c      	b.n	800b530 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <HAL_SPI_Transmit+0x18e>
 800b49e:	8afb      	ldrh	r3, [r7, #22]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d140      	bne.n	800b526 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	330c      	adds	r3, #12
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b4ca:	e02c      	b.n	800b526 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 0302 	and.w	r3, r3, #2
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d113      	bne.n	800b502 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	86da      	strh	r2, [r3, #54]	; 0x36
 800b500:	e011      	b.n	800b526 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b502:	f7fb ff23 	bl	800734c <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d803      	bhi.n	800b51a <HAL_SPI_Transmit+0x204>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d102      	bne.n	800b520 <HAL_SPI_Transmit+0x20a>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b524:	e026      	b.n	800b574 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1cd      	bne.n	800b4cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 fce9 	bl	800bf0c <SPI_EndRxTxTransaction>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2220      	movs	r2, #32
 800b544:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b54e:	2300      	movs	r3, #0
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	613b      	str	r3, [r7, #16]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	77fb      	strb	r3, [r7, #31]
 800b570:	e000      	b.n	800b574 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b584:	7ffb      	ldrb	r3, [r7, #31]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b088      	sub	sp, #32
 800b592:	af02      	add	r7, sp, #8
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	603b      	str	r3, [r7, #0]
 800b59a:	4613      	mov	r3, r2
 800b59c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5aa:	d112      	bne.n	800b5d2 <HAL_SPI_Receive+0x44>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10e      	bne.n	800b5d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b5bc:	88fa      	ldrh	r2, [r7, #6]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 f8f1 	bl	800b7b0 <HAL_SPI_TransmitReceive>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e0ea      	b.n	800b7a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d101      	bne.n	800b5e0 <HAL_SPI_Receive+0x52>
 800b5dc:	2302      	movs	r3, #2
 800b5de:	e0e3      	b.n	800b7a8 <HAL_SPI_Receive+0x21a>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5e8:	f7fb feb0 	bl	800734c <HAL_GetTick>
 800b5ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d002      	beq.n	800b600 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b5fe:	e0ca      	b.n	800b796 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <HAL_SPI_Receive+0x7e>
 800b606:	88fb      	ldrh	r3, [r7, #6]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b610:	e0c1      	b.n	800b796 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2204      	movs	r2, #4
 800b616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	88fa      	ldrh	r2, [r7, #6]
 800b62a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	88fa      	ldrh	r2, [r7, #6]
 800b630:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b658:	d10f      	bne.n	800b67a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b678:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b684:	2b40      	cmp	r3, #64	; 0x40
 800b686:	d007      	beq.n	800b698 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b696:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d162      	bne.n	800b766 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b6a0:	e02e      	b.n	800b700 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d115      	bne.n	800b6dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f103 020c 	add.w	r2, r3, #12
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	7812      	ldrb	r2, [r2, #0]
 800b6be:	b2d2      	uxtb	r2, r2
 800b6c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b6da:	e011      	b.n	800b700 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6dc:	f7fb fe36 	bl	800734c <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d803      	bhi.n	800b6f4 <HAL_SPI_Receive+0x166>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f2:	d102      	bne.n	800b6fa <HAL_SPI_Receive+0x16c>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d102      	bne.n	800b700 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b6fe:	e04a      	b.n	800b796 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b704:	b29b      	uxth	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1cb      	bne.n	800b6a2 <HAL_SPI_Receive+0x114>
 800b70a:	e031      	b.n	800b770 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b01      	cmp	r3, #1
 800b718:	d113      	bne.n	800b742 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	b292      	uxth	r2, r2
 800b726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	1c9a      	adds	r2, r3, #2
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b736:	b29b      	uxth	r3, r3
 800b738:	3b01      	subs	r3, #1
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b740:	e011      	b.n	800b766 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b742:	f7fb fe03 	bl	800734c <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d803      	bhi.n	800b75a <HAL_SPI_Receive+0x1cc>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d102      	bne.n	800b760 <HAL_SPI_Receive+0x1d2>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b764:	e017      	b.n	800b796 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1cd      	bne.n	800b70c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 fb63 	bl	800be40 <SPI_EndRxTransaction>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2220      	movs	r2, #32
 800b784:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	75fb      	strb	r3, [r7, #23]
 800b792:	e000      	b.n	800b796 <HAL_SPI_Receive+0x208>
  }

error :
 800b794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08c      	sub	sp, #48	; 0x30
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d101      	bne.n	800b7d6 <HAL_SPI_TransmitReceive+0x26>
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e18a      	b.n	800baec <HAL_SPI_TransmitReceive+0x33c>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7de:	f7fb fdb5 	bl	800734c <HAL_GetTick>
 800b7e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b7f4:	887b      	ldrh	r3, [r7, #2]
 800b7f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b7f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d00f      	beq.n	800b820 <HAL_SPI_TransmitReceive+0x70>
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b806:	d107      	bne.n	800b818 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <HAL_SPI_TransmitReceive+0x68>
 800b810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b814:	2b04      	cmp	r3, #4
 800b816:	d003      	beq.n	800b820 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b818:	2302      	movs	r3, #2
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b81e:	e15b      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d005      	beq.n	800b832 <HAL_SPI_TransmitReceive+0x82>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_SPI_TransmitReceive+0x82>
 800b82c:	887b      	ldrh	r3, [r7, #2]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d103      	bne.n	800b83a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b838:	e14e      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b04      	cmp	r3, #4
 800b844:	d003      	beq.n	800b84e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2205      	movs	r2, #5
 800b84a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	887a      	ldrh	r2, [r7, #2]
 800b85e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	887a      	ldrh	r2, [r7, #2]
 800b864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	887a      	ldrh	r2, [r7, #2]
 800b870:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	887a      	ldrh	r2, [r7, #2]
 800b876:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88e:	2b40      	cmp	r3, #64	; 0x40
 800b890:	d007      	beq.n	800b8a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8aa:	d178      	bne.n	800b99e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <HAL_SPI_TransmitReceive+0x10a>
 800b8b4:	8b7b      	ldrh	r3, [r7, #26]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d166      	bne.n	800b988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	881a      	ldrh	r2, [r3, #0]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ca:	1c9a      	adds	r2, r3, #2
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8de:	e053      	b.n	800b988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	f003 0302 	and.w	r3, r3, #2
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d11b      	bne.n	800b926 <HAL_SPI_TransmitReceive+0x176>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d016      	beq.n	800b926 <HAL_SPI_TransmitReceive+0x176>
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d113      	bne.n	800b926 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b902:	881a      	ldrh	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90e:	1c9a      	adds	r2, r3, #2
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b01      	cmp	r3, #1
 800b932:	d119      	bne.n	800b968 <HAL_SPI_TransmitReceive+0x1b8>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b938:	b29b      	uxth	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d014      	beq.n	800b968 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68da      	ldr	r2, [r3, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b948:	b292      	uxth	r2, r2
 800b94a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	1c9a      	adds	r2, r3, #2
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3b01      	subs	r3, #1
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b964:	2301      	movs	r3, #1
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b968:	f7fb fcf0 	bl	800734c <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b974:	429a      	cmp	r2, r3
 800b976:	d807      	bhi.n	800b988 <HAL_SPI_TransmitReceive+0x1d8>
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97e:	d003      	beq.n	800b988 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b980:	2303      	movs	r3, #3
 800b982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b986:	e0a7      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1a6      	bne.n	800b8e0 <HAL_SPI_TransmitReceive+0x130>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b996:	b29b      	uxth	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1a1      	bne.n	800b8e0 <HAL_SPI_TransmitReceive+0x130>
 800b99c:	e07c      	b.n	800ba98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <HAL_SPI_TransmitReceive+0x1fc>
 800b9a6:	8b7b      	ldrh	r3, [r7, #26]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d16b      	bne.n	800ba84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	330c      	adds	r3, #12
 800b9b6:	7812      	ldrb	r2, [r2, #0]
 800b9b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	1c5a      	adds	r2, r3, #1
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9d2:	e057      	b.n	800ba84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f003 0302 	and.w	r3, r3, #2
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d11c      	bne.n	800ba1c <HAL_SPI_TransmitReceive+0x26c>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d017      	beq.n	800ba1c <HAL_SPI_TransmitReceive+0x26c>
 800b9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d114      	bne.n	800ba1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	330c      	adds	r3, #12
 800b9fc:	7812      	ldrb	r2, [r2, #0]
 800b9fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	3b01      	subs	r3, #1
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d119      	bne.n	800ba5e <HAL_SPI_TransmitReceive+0x2ae>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d014      	beq.n	800ba5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	3b01      	subs	r3, #1
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba5e:	f7fb fc75 	bl	800734c <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d803      	bhi.n	800ba76 <HAL_SPI_TransmitReceive+0x2c6>
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba74:	d102      	bne.n	800ba7c <HAL_SPI_TransmitReceive+0x2cc>
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d103      	bne.n	800ba84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba82:	e029      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1a2      	bne.n	800b9d4 <HAL_SPI_TransmitReceive+0x224>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d19d      	bne.n	800b9d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 fa35 	bl	800bf0c <SPI_EndRxTxTransaction>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d006      	beq.n	800bab6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bab4:	e010      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10b      	bne.n	800bad6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800babe:	2300      	movs	r3, #0
 800bac0:	617b      	str	r3, [r7, #20]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	617b      	str	r3, [r7, #20]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	e000      	b.n	800bad8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800baec:	4618      	mov	r0, r3
 800baee:	3730      	adds	r7, #48	; 0x30
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	099b      	lsrs	r3, r3, #6
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10f      	bne.n	800bb38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	099b      	lsrs	r3, r3, #6
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
    return;
 800bb36:	e0d7      	b.n	800bce8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <HAL_SPI_IRQHandler+0x66>
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	09db      	lsrs	r3, r3, #7
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	4798      	blx	r3
    return;
 800bb58:	e0c6      	b.n	800bce8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	095b      	lsrs	r3, r3, #5
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10c      	bne.n	800bb80 <HAL_SPI_IRQHandler+0x8c>
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	099b      	lsrs	r3, r3, #6
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	0a1b      	lsrs	r3, r3, #8
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 80b4 	beq.w	800bce8 <HAL_SPI_IRQHandler+0x1f4>
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 80ad 	beq.w	800bce8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	099b      	lsrs	r3, r3, #6
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d023      	beq.n	800bbe2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d011      	beq.n	800bbca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbaa:	f043 0204 	orr.w	r2, r3, #4
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	e00b      	b.n	800bbe2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbca:	2300      	movs	r3, #0
 800bbcc:	613b      	str	r3, [r7, #16]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	613b      	str	r3, [r7, #16]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	613b      	str	r3, [r7, #16]
 800bbde:	693b      	ldr	r3, [r7, #16]
        return;
 800bbe0:	e082      	b.n	800bce8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d014      	beq.n	800bc18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf2:	f043 0201 	orr.w	r2, r3, #1
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60fb      	str	r3, [r7, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	0a1b      	lsrs	r3, r3, #8
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00c      	beq.n	800bc3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc28:	f043 0208 	orr.w	r2, r3, #8
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc30:	2300      	movs	r3, #0
 800bc32:	60bb      	str	r3, [r7, #8]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	60bb      	str	r3, [r7, #8]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d04f      	beq.n	800bce6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d104      	bne.n	800bc72 <HAL_SPI_IRQHandler+0x17e>
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d034      	beq.n	800bcdc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f022 0203 	bic.w	r2, r2, #3
 800bc80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d011      	beq.n	800bcae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8e:	4a18      	ldr	r2, [pc, #96]	; (800bcf0 <HAL_SPI_IRQHandler+0x1fc>)
 800bc90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fb fd48 	bl	800772c <HAL_DMA_Abort_IT>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d005      	beq.n	800bcae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d016      	beq.n	800bce4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcba:	4a0d      	ldr	r2, [pc, #52]	; (800bcf0 <HAL_SPI_IRQHandler+0x1fc>)
 800bcbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fb fd32 	bl	800772c <HAL_DMA_Abort_IT>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bcda:	e003      	b.n	800bce4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f809 	bl	800bcf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bce2:	e000      	b.n	800bce6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bce4:	bf00      	nop
    return;
 800bce6:	bf00      	nop
  }
}
 800bce8:	3720      	adds	r7, #32
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	0800bd09 	.word	0x0800bd09

0800bcf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f7ff ffe6 	bl	800bcf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd40:	f7fb fb04 	bl	800734c <HAL_GetTick>
 800bd44:	4602      	mov	r2, r0
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	1a9b      	subs	r3, r3, r2
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd50:	f7fb fafc 	bl	800734c <HAL_GetTick>
 800bd54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd56:	4b39      	ldr	r3, [pc, #228]	; (800be3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	015b      	lsls	r3, r3, #5
 800bd5c:	0d1b      	lsrs	r3, r3, #20
 800bd5e:	69fa      	ldr	r2, [r7, #28]
 800bd60:	fb02 f303 	mul.w	r3, r2, r3
 800bd64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd66:	e054      	b.n	800be12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6e:	d050      	beq.n	800be12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd70:	f7fb faec 	bl	800734c <HAL_GetTick>
 800bd74:	4602      	mov	r2, r0
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d902      	bls.n	800bd86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d13d      	bne.n	800be02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd9e:	d111      	bne.n	800bdc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda8:	d004      	beq.n	800bdb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdb2:	d107      	bne.n	800bdc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdcc:	d10f      	bne.n	800bdee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e017      	b.n	800be32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	3b01      	subs	r3, #1
 800be10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	689a      	ldr	r2, [r3, #8]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	4013      	ands	r3, r2
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	429a      	cmp	r2, r3
 800be20:	bf0c      	ite	eq
 800be22:	2301      	moveq	r3, #1
 800be24:	2300      	movne	r3, #0
 800be26:	b2db      	uxtb	r3, r3
 800be28:	461a      	mov	r2, r3
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d19b      	bne.n	800bd68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3720      	adds	r7, #32
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	20000154 	.word	0x20000154

0800be40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af02      	add	r7, sp, #8
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be54:	d111      	bne.n	800be7a <SPI_EndRxTransaction+0x3a>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be5e:	d004      	beq.n	800be6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be68:	d107      	bne.n	800be7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be82:	d12a      	bne.n	800beda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be8c:	d012      	beq.n	800beb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2200      	movs	r2, #0
 800be96:	2180      	movs	r1, #128	; 0x80
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff ff49 	bl	800bd30 <SPI_WaitFlagStateUntilTimeout>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d02d      	beq.n	800bf00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea8:	f043 0220 	orr.w	r2, r3, #32
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e026      	b.n	800bf02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2200      	movs	r2, #0
 800bebc:	2101      	movs	r1, #1
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f7ff ff36 	bl	800bd30 <SPI_WaitFlagStateUntilTimeout>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d01a      	beq.n	800bf00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bece:	f043 0220 	orr.w	r2, r3, #32
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e013      	b.n	800bf02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	2200      	movs	r2, #0
 800bee2:	2101      	movs	r1, #1
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f7ff ff23 	bl	800bd30 <SPI_WaitFlagStateUntilTimeout>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d007      	beq.n	800bf00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef4:	f043 0220 	orr.w	r2, r3, #32
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800befc:	2303      	movs	r3, #3
 800befe:	e000      	b.n	800bf02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af02      	add	r7, sp, #8
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bf18:	4b1b      	ldr	r3, [pc, #108]	; (800bf88 <SPI_EndRxTxTransaction+0x7c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a1b      	ldr	r2, [pc, #108]	; (800bf8c <SPI_EndRxTxTransaction+0x80>)
 800bf1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf22:	0d5b      	lsrs	r3, r3, #21
 800bf24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf28:	fb02 f303 	mul.w	r3, r2, r3
 800bf2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf36:	d112      	bne.n	800bf5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2180      	movs	r1, #128	; 0x80
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7ff fef4 	bl	800bd30 <SPI_WaitFlagStateUntilTimeout>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d016      	beq.n	800bf7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf52:	f043 0220 	orr.w	r2, r3, #32
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	e00f      	b.n	800bf7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00a      	beq.n	800bf7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf74:	2b80      	cmp	r3, #128	; 0x80
 800bf76:	d0f2      	beq.n	800bf5e <SPI_EndRxTxTransaction+0x52>
 800bf78:	e000      	b.n	800bf7c <SPI_EndRxTxTransaction+0x70>
        break;
 800bf7a:	bf00      	nop
  }

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000154 	.word	0x20000154
 800bf8c:	165e9f81 	.word	0x165e9f81

0800bf90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e041      	b.n	800c026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7fa fdac 	bl	8006b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f000 fae0 	bl	800c594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b01      	cmp	r3, #1
 800c042:	d001      	beq.n	800c048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e04e      	b.n	800c0e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2202      	movs	r2, #2
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68da      	ldr	r2, [r3, #12]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 0201 	orr.w	r2, r2, #1
 800c05e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a23      	ldr	r2, [pc, #140]	; (800c0f4 <HAL_TIM_Base_Start_IT+0xc4>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d022      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c072:	d01d      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a1f      	ldr	r2, [pc, #124]	; (800c0f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d018      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a1e      	ldr	r2, [pc, #120]	; (800c0fc <HAL_TIM_Base_Start_IT+0xcc>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d013      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a1c      	ldr	r2, [pc, #112]	; (800c100 <HAL_TIM_Base_Start_IT+0xd0>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d00e      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a1b      	ldr	r2, [pc, #108]	; (800c104 <HAL_TIM_Base_Start_IT+0xd4>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d009      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a19      	ldr	r2, [pc, #100]	; (800c108 <HAL_TIM_Base_Start_IT+0xd8>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d004      	beq.n	800c0b0 <HAL_TIM_Base_Start_IT+0x80>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a18      	ldr	r2, [pc, #96]	; (800c10c <HAL_TIM_Base_Start_IT+0xdc>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d111      	bne.n	800c0d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f003 0307 	and.w	r3, r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2b06      	cmp	r3, #6
 800c0c0:	d010      	beq.n	800c0e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f042 0201 	orr.w	r2, r2, #1
 800c0d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d2:	e007      	b.n	800c0e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0201 	orr.w	r2, r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	40010000 	.word	0x40010000
 800c0f8:	40000400 	.word	0x40000400
 800c0fc:	40000800 	.word	0x40000800
 800c100:	40000c00 	.word	0x40000c00
 800c104:	40010400 	.word	0x40010400
 800c108:	40014000 	.word	0x40014000
 800c10c:	40001800 	.word	0x40001800

0800c110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e041      	b.n	800c1a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7fa fcca 	bl	8006ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2202      	movs	r2, #2
 800c140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	3304      	adds	r3, #4
 800c14c:	4619      	mov	r1, r3
 800c14e:	4610      	mov	r0, r2
 800c150:	f000 fa20 	bl	800c594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d122      	bne.n	800c20a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	f003 0302 	and.w	r3, r3, #2
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d11b      	bne.n	800c20a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f06f 0202 	mvn.w	r2, #2
 800c1da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	f003 0303 	and.w	r3, r3, #3
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f9b1 	bl	800c558 <HAL_TIM_IC_CaptureCallback>
 800c1f6:	e005      	b.n	800c204 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f9a3 	bl	800c544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f9b4 	bl	800c56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	f003 0304 	and.w	r3, r3, #4
 800c214:	2b04      	cmp	r3, #4
 800c216:	d122      	bne.n	800c25e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	f003 0304 	and.w	r3, r3, #4
 800c222:	2b04      	cmp	r3, #4
 800c224:	d11b      	bne.n	800c25e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f06f 0204 	mvn.w	r2, #4
 800c22e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f987 	bl	800c558 <HAL_TIM_IC_CaptureCallback>
 800c24a:	e005      	b.n	800c258 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f979 	bl	800c544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f98a 	bl	800c56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f003 0308 	and.w	r3, r3, #8
 800c268:	2b08      	cmp	r3, #8
 800c26a:	d122      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f003 0308 	and.w	r3, r3, #8
 800c276:	2b08      	cmp	r3, #8
 800c278:	d11b      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f06f 0208 	mvn.w	r2, #8
 800c282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2204      	movs	r2, #4
 800c288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	69db      	ldr	r3, [r3, #28]
 800c290:	f003 0303 	and.w	r3, r3, #3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f95d 	bl	800c558 <HAL_TIM_IC_CaptureCallback>
 800c29e:	e005      	b.n	800c2ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f94f 	bl	800c544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f960 	bl	800c56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 0310 	and.w	r3, r3, #16
 800c2bc:	2b10      	cmp	r3, #16
 800c2be:	d122      	bne.n	800c306 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f003 0310 	and.w	r3, r3, #16
 800c2ca:	2b10      	cmp	r3, #16
 800c2cc:	d11b      	bne.n	800c306 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f06f 0210 	mvn.w	r2, #16
 800c2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2208      	movs	r2, #8
 800c2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f933 	bl	800c558 <HAL_TIM_IC_CaptureCallback>
 800c2f2:	e005      	b.n	800c300 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f925 	bl	800c544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f936 	bl	800c56c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	f003 0301 	and.w	r3, r3, #1
 800c310:	2b01      	cmp	r3, #1
 800c312:	d10e      	bne.n	800c332 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f003 0301 	and.w	r3, r3, #1
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d107      	bne.n	800c332 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f06f 0201 	mvn.w	r2, #1
 800c32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fa fb11 	bl	8006954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c33c:	2b80      	cmp	r3, #128	; 0x80
 800c33e:	d10e      	bne.n	800c35e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c34a:	2b80      	cmp	r3, #128	; 0x80
 800c34c:	d107      	bne.n	800c35e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fbf1 	bl	800cb40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c368:	2b40      	cmp	r3, #64	; 0x40
 800c36a:	d10e      	bne.n	800c38a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c376:	2b40      	cmp	r3, #64	; 0x40
 800c378:	d107      	bne.n	800c38a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f8fb 	bl	800c580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	f003 0320 	and.w	r3, r3, #32
 800c394:	2b20      	cmp	r3, #32
 800c396:	d10e      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f003 0320 	and.w	r3, r3, #32
 800c3a2:	2b20      	cmp	r3, #32
 800c3a4:	d107      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f06f 0220 	mvn.w	r2, #32
 800c3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fbbb 	bl	800cb2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
	...

0800c3c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d101      	bne.n	800c3de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c3da:	2302      	movs	r3, #2
 800c3dc:	e0ae      	b.n	800c53c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b0c      	cmp	r3, #12
 800c3ea:	f200 809f 	bhi.w	800c52c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c3ee:	a201      	add	r2, pc, #4	; (adr r2, 800c3f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f4:	0800c429 	.word	0x0800c429
 800c3f8:	0800c52d 	.word	0x0800c52d
 800c3fc:	0800c52d 	.word	0x0800c52d
 800c400:	0800c52d 	.word	0x0800c52d
 800c404:	0800c469 	.word	0x0800c469
 800c408:	0800c52d 	.word	0x0800c52d
 800c40c:	0800c52d 	.word	0x0800c52d
 800c410:	0800c52d 	.word	0x0800c52d
 800c414:	0800c4ab 	.word	0x0800c4ab
 800c418:	0800c52d 	.word	0x0800c52d
 800c41c:	0800c52d 	.word	0x0800c52d
 800c420:	0800c52d 	.word	0x0800c52d
 800c424:	0800c4eb 	.word	0x0800c4eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68b9      	ldr	r1, [r7, #8]
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 f950 	bl	800c6d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	699a      	ldr	r2, [r3, #24]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f042 0208 	orr.w	r2, r2, #8
 800c442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	699a      	ldr	r2, [r3, #24]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0204 	bic.w	r2, r2, #4
 800c452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6999      	ldr	r1, [r3, #24]
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	691a      	ldr	r2, [r3, #16]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	619a      	str	r2, [r3, #24]
      break;
 800c466:	e064      	b.n	800c532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68b9      	ldr	r1, [r7, #8]
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 f9a0 	bl	800c7b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	699a      	ldr	r2, [r3, #24]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	699a      	ldr	r2, [r3, #24]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6999      	ldr	r1, [r3, #24]
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	021a      	lsls	r2, r3, #8
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	619a      	str	r2, [r3, #24]
      break;
 800c4a8:	e043      	b.n	800c532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68b9      	ldr	r1, [r7, #8]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 f9f5 	bl	800c8a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	69da      	ldr	r2, [r3, #28]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f042 0208 	orr.w	r2, r2, #8
 800c4c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	69da      	ldr	r2, [r3, #28]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0204 	bic.w	r2, r2, #4
 800c4d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69d9      	ldr	r1, [r3, #28]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	691a      	ldr	r2, [r3, #16]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	61da      	str	r2, [r3, #28]
      break;
 800c4e8:	e023      	b.n	800c532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 fa49 	bl	800c988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	69da      	ldr	r2, [r3, #28]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	69da      	ldr	r2, [r3, #28]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	69d9      	ldr	r1, [r3, #28]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	021a      	lsls	r2, r3, #8
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	430a      	orrs	r2, r1
 800c528:	61da      	str	r2, [r3, #28]
      break;
 800c52a:	e002      	b.n	800c532 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	75fb      	strb	r3, [r7, #23]
      break;
 800c530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a40      	ldr	r2, [pc, #256]	; (800c6a8 <TIM_Base_SetConfig+0x114>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d013      	beq.n	800c5d4 <TIM_Base_SetConfig+0x40>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b2:	d00f      	beq.n	800c5d4 <TIM_Base_SetConfig+0x40>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a3d      	ldr	r2, [pc, #244]	; (800c6ac <TIM_Base_SetConfig+0x118>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00b      	beq.n	800c5d4 <TIM_Base_SetConfig+0x40>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a3c      	ldr	r2, [pc, #240]	; (800c6b0 <TIM_Base_SetConfig+0x11c>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d007      	beq.n	800c5d4 <TIM_Base_SetConfig+0x40>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a3b      	ldr	r2, [pc, #236]	; (800c6b4 <TIM_Base_SetConfig+0x120>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d003      	beq.n	800c5d4 <TIM_Base_SetConfig+0x40>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a3a      	ldr	r2, [pc, #232]	; (800c6b8 <TIM_Base_SetConfig+0x124>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d108      	bne.n	800c5e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a2f      	ldr	r2, [pc, #188]	; (800c6a8 <TIM_Base_SetConfig+0x114>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d02b      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5f4:	d027      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a2c      	ldr	r2, [pc, #176]	; (800c6ac <TIM_Base_SetConfig+0x118>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d023      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a2b      	ldr	r2, [pc, #172]	; (800c6b0 <TIM_Base_SetConfig+0x11c>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d01f      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a2a      	ldr	r2, [pc, #168]	; (800c6b4 <TIM_Base_SetConfig+0x120>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d01b      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a29      	ldr	r2, [pc, #164]	; (800c6b8 <TIM_Base_SetConfig+0x124>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d017      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a28      	ldr	r2, [pc, #160]	; (800c6bc <TIM_Base_SetConfig+0x128>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d013      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a27      	ldr	r2, [pc, #156]	; (800c6c0 <TIM_Base_SetConfig+0x12c>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d00f      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a26      	ldr	r2, [pc, #152]	; (800c6c4 <TIM_Base_SetConfig+0x130>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d00b      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a25      	ldr	r2, [pc, #148]	; (800c6c8 <TIM_Base_SetConfig+0x134>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d007      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a24      	ldr	r2, [pc, #144]	; (800c6cc <TIM_Base_SetConfig+0x138>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d003      	beq.n	800c646 <TIM_Base_SetConfig+0xb2>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a23      	ldr	r2, [pc, #140]	; (800c6d0 <TIM_Base_SetConfig+0x13c>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d108      	bne.n	800c658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c64c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	4313      	orrs	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	4313      	orrs	r3, r2
 800c664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	689a      	ldr	r2, [r3, #8]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a0a      	ldr	r2, [pc, #40]	; (800c6a8 <TIM_Base_SetConfig+0x114>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d003      	beq.n	800c68c <TIM_Base_SetConfig+0xf8>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a0c      	ldr	r2, [pc, #48]	; (800c6b8 <TIM_Base_SetConfig+0x124>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d103      	bne.n	800c694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	691a      	ldr	r2, [r3, #16]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	615a      	str	r2, [r3, #20]
}
 800c69a:	bf00      	nop
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	40010000 	.word	0x40010000
 800c6ac:	40000400 	.word	0x40000400
 800c6b0:	40000800 	.word	0x40000800
 800c6b4:	40000c00 	.word	0x40000c00
 800c6b8:	40010400 	.word	0x40010400
 800c6bc:	40014000 	.word	0x40014000
 800c6c0:	40014400 	.word	0x40014400
 800c6c4:	40014800 	.word	0x40014800
 800c6c8:	40001800 	.word	0x40001800
 800c6cc:	40001c00 	.word	0x40001c00
 800c6d0:	40002000 	.word	0x40002000

0800c6d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	f023 0201 	bic.w	r2, r3, #1
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a1b      	ldr	r3, [r3, #32]
 800c6ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 0303 	bic.w	r3, r3, #3
 800c70a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	4313      	orrs	r3, r2
 800c714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f023 0302 	bic.w	r3, r3, #2
 800c71c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	4313      	orrs	r3, r2
 800c726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a20      	ldr	r2, [pc, #128]	; (800c7ac <TIM_OC1_SetConfig+0xd8>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d003      	beq.n	800c738 <TIM_OC1_SetConfig+0x64>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a1f      	ldr	r2, [pc, #124]	; (800c7b0 <TIM_OC1_SetConfig+0xdc>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d10c      	bne.n	800c752 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f023 0308 	bic.w	r3, r3, #8
 800c73e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	4313      	orrs	r3, r2
 800c748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f023 0304 	bic.w	r3, r3, #4
 800c750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a15      	ldr	r2, [pc, #84]	; (800c7ac <TIM_OC1_SetConfig+0xd8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d003      	beq.n	800c762 <TIM_OC1_SetConfig+0x8e>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a14      	ldr	r2, [pc, #80]	; (800c7b0 <TIM_OC1_SetConfig+0xdc>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d111      	bne.n	800c786 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	4313      	orrs	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	4313      	orrs	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	621a      	str	r2, [r3, #32]
}
 800c7a0:	bf00      	nop
 800c7a2:	371c      	adds	r7, #28
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	40010000 	.word	0x40010000
 800c7b0:	40010400 	.word	0x40010400

0800c7b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	f023 0210 	bic.w	r2, r3, #16
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	021b      	lsls	r3, r3, #8
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f023 0320 	bic.w	r3, r3, #32
 800c7fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	011b      	lsls	r3, r3, #4
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	4313      	orrs	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a22      	ldr	r2, [pc, #136]	; (800c898 <TIM_OC2_SetConfig+0xe4>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d003      	beq.n	800c81c <TIM_OC2_SetConfig+0x68>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a21      	ldr	r2, [pc, #132]	; (800c89c <TIM_OC2_SetConfig+0xe8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d10d      	bne.n	800c838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	011b      	lsls	r3, r3, #4
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a17      	ldr	r2, [pc, #92]	; (800c898 <TIM_OC2_SetConfig+0xe4>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d003      	beq.n	800c848 <TIM_OC2_SetConfig+0x94>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a16      	ldr	r2, [pc, #88]	; (800c89c <TIM_OC2_SetConfig+0xe8>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d113      	bne.n	800c870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c84e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	4313      	orrs	r3, r2
 800c862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	693a      	ldr	r2, [r7, #16]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	621a      	str	r2, [r3, #32]
}
 800c88a:	bf00      	nop
 800c88c:	371c      	adds	r7, #28
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	40010000 	.word	0x40010000
 800c89c:	40010400 	.word	0x40010400

0800c8a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	69db      	ldr	r3, [r3, #28]
 800c8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 0303 	bic.w	r3, r3, #3
 800c8d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a21      	ldr	r2, [pc, #132]	; (800c980 <TIM_OC3_SetConfig+0xe0>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d003      	beq.n	800c906 <TIM_OC3_SetConfig+0x66>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a20      	ldr	r2, [pc, #128]	; (800c984 <TIM_OC3_SetConfig+0xe4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d10d      	bne.n	800c922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c90c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	021b      	lsls	r3, r3, #8
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	4313      	orrs	r3, r2
 800c918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4a16      	ldr	r2, [pc, #88]	; (800c980 <TIM_OC3_SetConfig+0xe0>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d003      	beq.n	800c932 <TIM_OC3_SetConfig+0x92>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a15      	ldr	r2, [pc, #84]	; (800c984 <TIM_OC3_SetConfig+0xe4>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d113      	bne.n	800c95a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	011b      	lsls	r3, r3, #4
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	011b      	lsls	r3, r3, #4
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	4313      	orrs	r3, r2
 800c958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	621a      	str	r2, [r3, #32]
}
 800c974:	bf00      	nop
 800c976:	371c      	adds	r7, #28
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	40010000 	.word	0x40010000
 800c984:	40010400 	.word	0x40010400

0800c988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c988:	b480      	push	{r7}
 800c98a:	b087      	sub	sp, #28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69db      	ldr	r3, [r3, #28]
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	031b      	lsls	r3, r3, #12
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a12      	ldr	r2, [pc, #72]	; (800ca2c <TIM_OC4_SetConfig+0xa4>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d003      	beq.n	800c9f0 <TIM_OC4_SetConfig+0x68>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a11      	ldr	r2, [pc, #68]	; (800ca30 <TIM_OC4_SetConfig+0xa8>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d109      	bne.n	800ca04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	019b      	lsls	r3, r3, #6
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	621a      	str	r2, [r3, #32]
}
 800ca1e:	bf00      	nop
 800ca20:	371c      	adds	r7, #28
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	40010000 	.word	0x40010000
 800ca30:	40010400 	.word	0x40010400

0800ca34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d101      	bne.n	800ca4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca48:	2302      	movs	r3, #2
 800ca4a:	e05a      	b.n	800cb02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a21      	ldr	r2, [pc, #132]	; (800cb10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d022      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca98:	d01d      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d018      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a1b      	ldr	r2, [pc, #108]	; (800cb18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d013      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a1a      	ldr	r2, [pc, #104]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d00e      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a18      	ldr	r2, [pc, #96]	; (800cb20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d009      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a17      	ldr	r2, [pc, #92]	; (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d004      	beq.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d10c      	bne.n	800caf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cadc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	40010000 	.word	0x40010000
 800cb14:	40000400 	.word	0x40000400
 800cb18:	40000800 	.word	0x40000800
 800cb1c:	40000c00 	.word	0x40000c00
 800cb20:	40010400 	.word	0x40010400
 800cb24:	40014000 	.word	0x40014000
 800cb28:	40001800 	.word	0x40001800

0800cb2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e03f      	b.n	800cbe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7fa fab6 	bl	80070ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2224      	movs	r2, #36	; 0x24
 800cb84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 f929 	bl	800cdf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	691a      	ldr	r2, [r3, #16]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	695a      	ldr	r2, [r3, #20]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68da      	ldr	r2, [r3, #12]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2220      	movs	r2, #32
 800cbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b08a      	sub	sp, #40	; 0x28
 800cbf2:	af02      	add	r7, sp, #8
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	603b      	str	r3, [r7, #0]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b20      	cmp	r3, #32
 800cc0c:	d17c      	bne.n	800cd08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <HAL_UART_Transmit+0x2c>
 800cc14:	88fb      	ldrh	r3, [r7, #6]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e075      	b.n	800cd0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d101      	bne.n	800cc2c <HAL_UART_Transmit+0x3e>
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e06e      	b.n	800cd0a <HAL_UART_Transmit+0x11c>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2221      	movs	r2, #33	; 0x21
 800cc3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc42:	f7fa fb83 	bl	800734c <HAL_GetTick>
 800cc46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	88fa      	ldrh	r2, [r7, #6]
 800cc4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	88fa      	ldrh	r2, [r7, #6]
 800cc52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc5c:	d108      	bne.n	800cc70 <HAL_UART_Transmit+0x82>
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	61bb      	str	r3, [r7, #24]
 800cc6e:	e003      	b.n	800cc78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cc80:	e02a      	b.n	800ccd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2180      	movs	r1, #128	; 0x80
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 f840 	bl	800cd12 <UART_WaitOnFlagUntilTimeout>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e036      	b.n	800cd0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10b      	bne.n	800ccba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	461a      	mov	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	3302      	adds	r3, #2
 800ccb6:	61bb      	str	r3, [r7, #24]
 800ccb8:	e007      	b.n	800ccca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	781a      	ldrb	r2, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1cf      	bne.n	800cc82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2200      	movs	r2, #0
 800ccea:	2140      	movs	r1, #64	; 0x40
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f000 f810 	bl	800cd12 <UART_WaitOnFlagUntilTimeout>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e006      	b.n	800cd0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2220      	movs	r2, #32
 800cd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	e000      	b.n	800cd0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cd08:	2302      	movs	r3, #2
  }
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3720      	adds	r7, #32
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b090      	sub	sp, #64	; 0x40
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	60b9      	str	r1, [r7, #8]
 800cd1c:	603b      	str	r3, [r7, #0]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd22:	e050      	b.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2a:	d04c      	beq.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d007      	beq.n	800cd42 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd32:	f7fa fb0b 	bl	800734c <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d241      	bcs.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	330c      	adds	r3, #12
 800cd48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	e853 3f00 	ldrex	r3, [r3]
 800cd50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	330c      	adds	r3, #12
 800cd60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd62:	637a      	str	r2, [r7, #52]	; 0x34
 800cd64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd6a:	e841 2300 	strex	r3, r2, [r1]
 800cd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1e5      	bne.n	800cd42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3314      	adds	r3, #20
 800cd7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	e853 3f00 	ldrex	r3, [r3]
 800cd84:	613b      	str	r3, [r7, #16]
   return(result);
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3314      	adds	r3, #20
 800cd94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd96:	623a      	str	r2, [r7, #32]
 800cd98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9a:	69f9      	ldr	r1, [r7, #28]
 800cd9c:	6a3a      	ldr	r2, [r7, #32]
 800cd9e:	e841 2300 	strex	r3, r2, [r1]
 800cda2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1e5      	bne.n	800cd76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2220      	movs	r2, #32
 800cdae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2220      	movs	r2, #32
 800cdb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	e00f      	b.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	4013      	ands	r3, r2
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	bf0c      	ite	eq
 800cdd6:	2301      	moveq	r3, #1
 800cdd8:	2300      	movne	r3, #0
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	461a      	mov	r2, r3
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d09f      	beq.n	800cd24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3740      	adds	r7, #64	; 0x40
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdf4:	b0c0      	sub	sp, #256	; 0x100
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce0c:	68d9      	ldr	r1, [r3, #12]
 800ce0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	ea40 0301 	orr.w	r3, r0, r1
 800ce18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	431a      	orrs	r2, r3
 800ce28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce48:	f021 010c 	bic.w	r1, r1, #12
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce56:	430b      	orrs	r3, r1
 800ce58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce6a:	6999      	ldr	r1, [r3, #24]
 800ce6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	ea40 0301 	orr.w	r3, r0, r1
 800ce76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	4b8f      	ldr	r3, [pc, #572]	; (800d0bc <UART_SetConfig+0x2cc>)
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d005      	beq.n	800ce90 <UART_SetConfig+0xa0>
 800ce84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b8d      	ldr	r3, [pc, #564]	; (800d0c0 <UART_SetConfig+0x2d0>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d104      	bne.n	800ce9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce90:	f7fe f9a4 	bl	800b1dc <HAL_RCC_GetPCLK2Freq>
 800ce94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ce98:	e003      	b.n	800cea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce9a:	f7fe f98b 	bl	800b1b4 <HAL_RCC_GetPCLK1Freq>
 800ce9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceac:	f040 810c 	bne.w	800d0c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ceb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ceba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cec2:	4622      	mov	r2, r4
 800cec4:	462b      	mov	r3, r5
 800cec6:	1891      	adds	r1, r2, r2
 800cec8:	65b9      	str	r1, [r7, #88]	; 0x58
 800ceca:	415b      	adcs	r3, r3
 800cecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ced2:	4621      	mov	r1, r4
 800ced4:	eb12 0801 	adds.w	r8, r2, r1
 800ced8:	4629      	mov	r1, r5
 800ceda:	eb43 0901 	adc.w	r9, r3, r1
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	f04f 0300 	mov.w	r3, #0
 800cee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ceea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ceee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cef2:	4690      	mov	r8, r2
 800cef4:	4699      	mov	r9, r3
 800cef6:	4623      	mov	r3, r4
 800cef8:	eb18 0303 	adds.w	r3, r8, r3
 800cefc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf00:	462b      	mov	r3, r5
 800cf02:	eb49 0303 	adc.w	r3, r9, r3
 800cf06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf1e:	460b      	mov	r3, r1
 800cf20:	18db      	adds	r3, r3, r3
 800cf22:	653b      	str	r3, [r7, #80]	; 0x50
 800cf24:	4613      	mov	r3, r2
 800cf26:	eb42 0303 	adc.w	r3, r2, r3
 800cf2a:	657b      	str	r3, [r7, #84]	; 0x54
 800cf2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf34:	f7f3 f95a 	bl	80001ec <__aeabi_uldivmod>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	4b61      	ldr	r3, [pc, #388]	; (800d0c4 <UART_SetConfig+0x2d4>)
 800cf3e:	fba3 2302 	umull	r2, r3, r3, r2
 800cf42:	095b      	lsrs	r3, r3, #5
 800cf44:	011c      	lsls	r4, r3, #4
 800cf46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	1891      	adds	r1, r2, r2
 800cf5e:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf60:	415b      	adcs	r3, r3
 800cf62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf68:	4641      	mov	r1, r8
 800cf6a:	eb12 0a01 	adds.w	sl, r2, r1
 800cf6e:	4649      	mov	r1, r9
 800cf70:	eb43 0b01 	adc.w	fp, r3, r1
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	f04f 0300 	mov.w	r3, #0
 800cf7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf88:	4692      	mov	sl, r2
 800cf8a:	469b      	mov	fp, r3
 800cf8c:	4643      	mov	r3, r8
 800cf8e:	eb1a 0303 	adds.w	r3, sl, r3
 800cf92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf96:	464b      	mov	r3, r9
 800cf98:	eb4b 0303 	adc.w	r3, fp, r3
 800cf9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	18db      	adds	r3, r3, r3
 800cfb8:	643b      	str	r3, [r7, #64]	; 0x40
 800cfba:	4613      	mov	r3, r2
 800cfbc:	eb42 0303 	adc.w	r3, r2, r3
 800cfc0:	647b      	str	r3, [r7, #68]	; 0x44
 800cfc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cfca:	f7f3 f90f 	bl	80001ec <__aeabi_uldivmod>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4b3b      	ldr	r3, [pc, #236]	; (800d0c4 <UART_SetConfig+0x2d4>)
 800cfd6:	fba3 2301 	umull	r2, r3, r3, r1
 800cfda:	095b      	lsrs	r3, r3, #5
 800cfdc:	2264      	movs	r2, #100	; 0x64
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
 800cfe2:	1acb      	subs	r3, r1, r3
 800cfe4:	00db      	lsls	r3, r3, #3
 800cfe6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cfea:	4b36      	ldr	r3, [pc, #216]	; (800d0c4 <UART_SetConfig+0x2d4>)
 800cfec:	fba3 2302 	umull	r2, r3, r3, r2
 800cff0:	095b      	lsrs	r3, r3, #5
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cff8:	441c      	add	r4, r3
 800cffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cffe:	2200      	movs	r2, #0
 800d000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d004:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d00c:	4642      	mov	r2, r8
 800d00e:	464b      	mov	r3, r9
 800d010:	1891      	adds	r1, r2, r2
 800d012:	63b9      	str	r1, [r7, #56]	; 0x38
 800d014:	415b      	adcs	r3, r3
 800d016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d01c:	4641      	mov	r1, r8
 800d01e:	1851      	adds	r1, r2, r1
 800d020:	6339      	str	r1, [r7, #48]	; 0x30
 800d022:	4649      	mov	r1, r9
 800d024:	414b      	adcs	r3, r1
 800d026:	637b      	str	r3, [r7, #52]	; 0x34
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d034:	4659      	mov	r1, fp
 800d036:	00cb      	lsls	r3, r1, #3
 800d038:	4651      	mov	r1, sl
 800d03a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d03e:	4651      	mov	r1, sl
 800d040:	00ca      	lsls	r2, r1, #3
 800d042:	4610      	mov	r0, r2
 800d044:	4619      	mov	r1, r3
 800d046:	4603      	mov	r3, r0
 800d048:	4642      	mov	r2, r8
 800d04a:	189b      	adds	r3, r3, r2
 800d04c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d050:	464b      	mov	r3, r9
 800d052:	460a      	mov	r2, r1
 800d054:	eb42 0303 	adc.w	r3, r2, r3
 800d058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d068:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d06c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d070:	460b      	mov	r3, r1
 800d072:	18db      	adds	r3, r3, r3
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28
 800d076:	4613      	mov	r3, r2
 800d078:	eb42 0303 	adc.w	r3, r2, r3
 800d07c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d07e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d086:	f7f3 f8b1 	bl	80001ec <__aeabi_uldivmod>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <UART_SetConfig+0x2d4>)
 800d090:	fba3 1302 	umull	r1, r3, r3, r2
 800d094:	095b      	lsrs	r3, r3, #5
 800d096:	2164      	movs	r1, #100	; 0x64
 800d098:	fb01 f303 	mul.w	r3, r1, r3
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	3332      	adds	r3, #50	; 0x32
 800d0a2:	4a08      	ldr	r2, [pc, #32]	; (800d0c4 <UART_SetConfig+0x2d4>)
 800d0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	f003 0207 	and.w	r2, r3, #7
 800d0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4422      	add	r2, r4
 800d0b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0b8:	e105      	b.n	800d2c6 <UART_SetConfig+0x4d6>
 800d0ba:	bf00      	nop
 800d0bc:	40011000 	.word	0x40011000
 800d0c0:	40011400 	.word	0x40011400
 800d0c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d0d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d0da:	4642      	mov	r2, r8
 800d0dc:	464b      	mov	r3, r9
 800d0de:	1891      	adds	r1, r2, r2
 800d0e0:	6239      	str	r1, [r7, #32]
 800d0e2:	415b      	adcs	r3, r3
 800d0e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0ea:	4641      	mov	r1, r8
 800d0ec:	1854      	adds	r4, r2, r1
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	eb43 0501 	adc.w	r5, r3, r1
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	f04f 0300 	mov.w	r3, #0
 800d0fc:	00eb      	lsls	r3, r5, #3
 800d0fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d102:	00e2      	lsls	r2, r4, #3
 800d104:	4614      	mov	r4, r2
 800d106:	461d      	mov	r5, r3
 800d108:	4643      	mov	r3, r8
 800d10a:	18e3      	adds	r3, r4, r3
 800d10c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d110:	464b      	mov	r3, r9
 800d112:	eb45 0303 	adc.w	r3, r5, r3
 800d116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d12a:	f04f 0200 	mov.w	r2, #0
 800d12e:	f04f 0300 	mov.w	r3, #0
 800d132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d136:	4629      	mov	r1, r5
 800d138:	008b      	lsls	r3, r1, #2
 800d13a:	4621      	mov	r1, r4
 800d13c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d140:	4621      	mov	r1, r4
 800d142:	008a      	lsls	r2, r1, #2
 800d144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d148:	f7f3 f850 	bl	80001ec <__aeabi_uldivmod>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	4b60      	ldr	r3, [pc, #384]	; (800d2d4 <UART_SetConfig+0x4e4>)
 800d152:	fba3 2302 	umull	r2, r3, r3, r2
 800d156:	095b      	lsrs	r3, r3, #5
 800d158:	011c      	lsls	r4, r3, #4
 800d15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d15e:	2200      	movs	r2, #0
 800d160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d16c:	4642      	mov	r2, r8
 800d16e:	464b      	mov	r3, r9
 800d170:	1891      	adds	r1, r2, r2
 800d172:	61b9      	str	r1, [r7, #24]
 800d174:	415b      	adcs	r3, r3
 800d176:	61fb      	str	r3, [r7, #28]
 800d178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d17c:	4641      	mov	r1, r8
 800d17e:	1851      	adds	r1, r2, r1
 800d180:	6139      	str	r1, [r7, #16]
 800d182:	4649      	mov	r1, r9
 800d184:	414b      	adcs	r3, r1
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	f04f 0200 	mov.w	r2, #0
 800d18c:	f04f 0300 	mov.w	r3, #0
 800d190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d194:	4659      	mov	r1, fp
 800d196:	00cb      	lsls	r3, r1, #3
 800d198:	4651      	mov	r1, sl
 800d19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d19e:	4651      	mov	r1, sl
 800d1a0:	00ca      	lsls	r2, r1, #3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	460a      	mov	r2, r1
 800d1b4:	eb42 0303 	adc.w	r3, r2, r3
 800d1b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d1c8:	f04f 0200 	mov.w	r2, #0
 800d1cc:	f04f 0300 	mov.w	r3, #0
 800d1d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	008b      	lsls	r3, r1, #2
 800d1d8:	4641      	mov	r1, r8
 800d1da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1de:	4641      	mov	r1, r8
 800d1e0:	008a      	lsls	r2, r1, #2
 800d1e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d1e6:	f7f3 f801 	bl	80001ec <__aeabi_uldivmod>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4b39      	ldr	r3, [pc, #228]	; (800d2d4 <UART_SetConfig+0x4e4>)
 800d1f0:	fba3 1302 	umull	r1, r3, r3, r2
 800d1f4:	095b      	lsrs	r3, r3, #5
 800d1f6:	2164      	movs	r1, #100	; 0x64
 800d1f8:	fb01 f303 	mul.w	r3, r1, r3
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	3332      	adds	r3, #50	; 0x32
 800d202:	4a34      	ldr	r2, [pc, #208]	; (800d2d4 <UART_SetConfig+0x4e4>)
 800d204:	fba2 2303 	umull	r2, r3, r2, r3
 800d208:	095b      	lsrs	r3, r3, #5
 800d20a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d20e:	441c      	add	r4, r3
 800d210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d214:	2200      	movs	r2, #0
 800d216:	673b      	str	r3, [r7, #112]	; 0x70
 800d218:	677a      	str	r2, [r7, #116]	; 0x74
 800d21a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d21e:	4642      	mov	r2, r8
 800d220:	464b      	mov	r3, r9
 800d222:	1891      	adds	r1, r2, r2
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	415b      	adcs	r3, r3
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d22e:	4641      	mov	r1, r8
 800d230:	1851      	adds	r1, r2, r1
 800d232:	6039      	str	r1, [r7, #0]
 800d234:	4649      	mov	r1, r9
 800d236:	414b      	adcs	r3, r1
 800d238:	607b      	str	r3, [r7, #4]
 800d23a:	f04f 0200 	mov.w	r2, #0
 800d23e:	f04f 0300 	mov.w	r3, #0
 800d242:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d246:	4659      	mov	r1, fp
 800d248:	00cb      	lsls	r3, r1, #3
 800d24a:	4651      	mov	r1, sl
 800d24c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d250:	4651      	mov	r1, sl
 800d252:	00ca      	lsls	r2, r1, #3
 800d254:	4610      	mov	r0, r2
 800d256:	4619      	mov	r1, r3
 800d258:	4603      	mov	r3, r0
 800d25a:	4642      	mov	r2, r8
 800d25c:	189b      	adds	r3, r3, r2
 800d25e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d260:	464b      	mov	r3, r9
 800d262:	460a      	mov	r2, r1
 800d264:	eb42 0303 	adc.w	r3, r2, r3
 800d268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	663b      	str	r3, [r7, #96]	; 0x60
 800d274:	667a      	str	r2, [r7, #100]	; 0x64
 800d276:	f04f 0200 	mov.w	r2, #0
 800d27a:	f04f 0300 	mov.w	r3, #0
 800d27e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d282:	4649      	mov	r1, r9
 800d284:	008b      	lsls	r3, r1, #2
 800d286:	4641      	mov	r1, r8
 800d288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d28c:	4641      	mov	r1, r8
 800d28e:	008a      	lsls	r2, r1, #2
 800d290:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d294:	f7f2 ffaa 	bl	80001ec <__aeabi_uldivmod>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <UART_SetConfig+0x4e4>)
 800d29e:	fba3 1302 	umull	r1, r3, r3, r2
 800d2a2:	095b      	lsrs	r3, r3, #5
 800d2a4:	2164      	movs	r1, #100	; 0x64
 800d2a6:	fb01 f303 	mul.w	r3, r1, r3
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	011b      	lsls	r3, r3, #4
 800d2ae:	3332      	adds	r3, #50	; 0x32
 800d2b0:	4a08      	ldr	r2, [pc, #32]	; (800d2d4 <UART_SetConfig+0x4e4>)
 800d2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b6:	095b      	lsrs	r3, r3, #5
 800d2b8:	f003 020f 	and.w	r2, r3, #15
 800d2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4422      	add	r2, r4
 800d2c4:	609a      	str	r2, [r3, #8]
}
 800d2c6:	bf00      	nop
 800d2c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2d2:	bf00      	nop
 800d2d4:	51eb851f 	.word	0x51eb851f

0800d2d8 <__libc_init_array>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	4d0d      	ldr	r5, [pc, #52]	; (800d310 <__libc_init_array+0x38>)
 800d2dc:	4c0d      	ldr	r4, [pc, #52]	; (800d314 <__libc_init_array+0x3c>)
 800d2de:	1b64      	subs	r4, r4, r5
 800d2e0:	10a4      	asrs	r4, r4, #2
 800d2e2:	2600      	movs	r6, #0
 800d2e4:	42a6      	cmp	r6, r4
 800d2e6:	d109      	bne.n	800d2fc <__libc_init_array+0x24>
 800d2e8:	4d0b      	ldr	r5, [pc, #44]	; (800d318 <__libc_init_array+0x40>)
 800d2ea:	4c0c      	ldr	r4, [pc, #48]	; (800d31c <__libc_init_array+0x44>)
 800d2ec:	f000 f87c 	bl	800d3e8 <_init>
 800d2f0:	1b64      	subs	r4, r4, r5
 800d2f2:	10a4      	asrs	r4, r4, #2
 800d2f4:	2600      	movs	r6, #0
 800d2f6:	42a6      	cmp	r6, r4
 800d2f8:	d105      	bne.n	800d306 <__libc_init_array+0x2e>
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d300:	4798      	blx	r3
 800d302:	3601      	adds	r6, #1
 800d304:	e7ee      	b.n	800d2e4 <__libc_init_array+0xc>
 800d306:	f855 3b04 	ldr.w	r3, [r5], #4
 800d30a:	4798      	blx	r3
 800d30c:	3601      	adds	r6, #1
 800d30e:	e7f2      	b.n	800d2f6 <__libc_init_array+0x1e>
 800d310:	08010a38 	.word	0x08010a38
 800d314:	08010a38 	.word	0x08010a38
 800d318:	08010a38 	.word	0x08010a38
 800d31c:	08010a3c 	.word	0x08010a3c

0800d320 <__itoa>:
 800d320:	1e93      	subs	r3, r2, #2
 800d322:	2b22      	cmp	r3, #34	; 0x22
 800d324:	b510      	push	{r4, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	d904      	bls.n	800d334 <__itoa+0x14>
 800d32a:	2300      	movs	r3, #0
 800d32c:	700b      	strb	r3, [r1, #0]
 800d32e:	461c      	mov	r4, r3
 800d330:	4620      	mov	r0, r4
 800d332:	bd10      	pop	{r4, pc}
 800d334:	2a0a      	cmp	r2, #10
 800d336:	d109      	bne.n	800d34c <__itoa+0x2c>
 800d338:	2800      	cmp	r0, #0
 800d33a:	da07      	bge.n	800d34c <__itoa+0x2c>
 800d33c:	232d      	movs	r3, #45	; 0x2d
 800d33e:	700b      	strb	r3, [r1, #0]
 800d340:	4240      	negs	r0, r0
 800d342:	2101      	movs	r1, #1
 800d344:	4421      	add	r1, r4
 800d346:	f000 f80d 	bl	800d364 <__utoa>
 800d34a:	e7f1      	b.n	800d330 <__itoa+0x10>
 800d34c:	2100      	movs	r1, #0
 800d34e:	e7f9      	b.n	800d344 <__itoa+0x24>

0800d350 <itoa>:
 800d350:	f7ff bfe6 	b.w	800d320 <__itoa>

0800d354 <memset>:
 800d354:	4402      	add	r2, r0
 800d356:	4603      	mov	r3, r0
 800d358:	4293      	cmp	r3, r2
 800d35a:	d100      	bne.n	800d35e <memset+0xa>
 800d35c:	4770      	bx	lr
 800d35e:	f803 1b01 	strb.w	r1, [r3], #1
 800d362:	e7f9      	b.n	800d358 <memset+0x4>

0800d364 <__utoa>:
 800d364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d366:	4c1f      	ldr	r4, [pc, #124]	; (800d3e4 <__utoa+0x80>)
 800d368:	b08b      	sub	sp, #44	; 0x2c
 800d36a:	4605      	mov	r5, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	466e      	mov	r6, sp
 800d370:	f104 0c20 	add.w	ip, r4, #32
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	6861      	ldr	r1, [r4, #4]
 800d378:	4637      	mov	r7, r6
 800d37a:	c703      	stmia	r7!, {r0, r1}
 800d37c:	3408      	adds	r4, #8
 800d37e:	4564      	cmp	r4, ip
 800d380:	463e      	mov	r6, r7
 800d382:	d1f7      	bne.n	800d374 <__utoa+0x10>
 800d384:	7921      	ldrb	r1, [r4, #4]
 800d386:	7139      	strb	r1, [r7, #4]
 800d388:	1e91      	subs	r1, r2, #2
 800d38a:	6820      	ldr	r0, [r4, #0]
 800d38c:	6038      	str	r0, [r7, #0]
 800d38e:	2922      	cmp	r1, #34	; 0x22
 800d390:	f04f 0100 	mov.w	r1, #0
 800d394:	d904      	bls.n	800d3a0 <__utoa+0x3c>
 800d396:	7019      	strb	r1, [r3, #0]
 800d398:	460b      	mov	r3, r1
 800d39a:	4618      	mov	r0, r3
 800d39c:	b00b      	add	sp, #44	; 0x2c
 800d39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a0:	1e58      	subs	r0, r3, #1
 800d3a2:	4684      	mov	ip, r0
 800d3a4:	fbb5 f7f2 	udiv	r7, r5, r2
 800d3a8:	fb02 5617 	mls	r6, r2, r7, r5
 800d3ac:	3628      	adds	r6, #40	; 0x28
 800d3ae:	446e      	add	r6, sp
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d3b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d3ba:	462e      	mov	r6, r5
 800d3bc:	42b2      	cmp	r2, r6
 800d3be:	f101 0101 	add.w	r1, r1, #1
 800d3c2:	463d      	mov	r5, r7
 800d3c4:	d9ee      	bls.n	800d3a4 <__utoa+0x40>
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	545a      	strb	r2, [r3, r1]
 800d3ca:	1919      	adds	r1, r3, r4
 800d3cc:	1aa5      	subs	r5, r4, r2
 800d3ce:	42aa      	cmp	r2, r5
 800d3d0:	dae3      	bge.n	800d39a <__utoa+0x36>
 800d3d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d3d6:	780e      	ldrb	r6, [r1, #0]
 800d3d8:	7006      	strb	r6, [r0, #0]
 800d3da:	3201      	adds	r2, #1
 800d3dc:	f801 5901 	strb.w	r5, [r1], #-1
 800d3e0:	e7f4      	b.n	800d3cc <__utoa+0x68>
 800d3e2:	bf00      	nop
 800d3e4:	08010a08 	.word	0x08010a08

0800d3e8 <_init>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	bf00      	nop
 800d3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ee:	bc08      	pop	{r3}
 800d3f0:	469e      	mov	lr, r3
 800d3f2:	4770      	bx	lr

0800d3f4 <_fini>:
 800d3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f6:	bf00      	nop
 800d3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fa:	bc08      	pop	{r3}
 800d3fc:	469e      	mov	lr, r3
 800d3fe:	4770      	bx	lr
