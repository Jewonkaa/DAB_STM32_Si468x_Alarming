
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000208c  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c54  08009c54  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c5c  08009c5c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000013a0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013b8  200013b8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b94  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a2  00000000  00000000  00035bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00038c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0003a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002336e  00000000  00000000  0003b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a0a  00000000  00000000  0005e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0efa  00000000  00000000  00076fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147eb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005140  00000000  00000000  00147f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007bb0 	.word	0x08007bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08007bb0 	.word	0x08007bb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004d0:	f000 f914 	bl	80006fc <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 fbc3 	bl	8000c60 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004da:	20cb      	movs	r0, #203	; 0xcb
 80004dc:	f000 fbc0 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004e0:	2039      	movs	r0, #57	; 0x39
 80004e2:	f000 fbcc 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004e6:	202c      	movs	r0, #44	; 0x2c
 80004e8:	f000 fbc9 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fbc6 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80004f2:	2034      	movs	r0, #52	; 0x34
 80004f4:	f000 fbc3 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fbc0 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 80004fe:	20cf      	movs	r0, #207	; 0xcf
 8000500:	f000 fbae 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fbba 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800050a:	20c1      	movs	r0, #193	; 0xc1
 800050c:	f000 fbb7 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000510:	2030      	movs	r0, #48	; 0x30
 8000512:	f000 fbb4 	bl	8000c7e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000516:	20e8      	movs	r0, #232	; 0xe8
 8000518:	f000 fba2 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800051c:	2085      	movs	r0, #133	; 0x85
 800051e:	f000 fbae 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fbab 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000528:	2078      	movs	r0, #120	; 0x78
 800052a:	f000 fba8 	bl	8000c7e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800052e:	20ea      	movs	r0, #234	; 0xea
 8000530:	f000 fb96 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fba2 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fb9f 	bl	8000c7e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000540:	20ed      	movs	r0, #237	; 0xed
 8000542:	f000 fb8d 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f000 fb99 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 fb96 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000552:	2012      	movs	r0, #18
 8000554:	f000 fb93 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000558:	2081      	movs	r0, #129	; 0x81
 800055a:	f000 fb90 	bl	8000c7e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800055e:	20f7      	movs	r0, #247	; 0xf7
 8000560:	f000 fb7e 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000564:	2020      	movs	r0, #32
 8000566:	f000 fb8a 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800056a:	20c0      	movs	r0, #192	; 0xc0
 800056c:	f000 fb78 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000570:	2010      	movs	r0, #16
 8000572:	f000 fb84 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000576:	20c1      	movs	r0, #193	; 0xc1
 8000578:	f000 fb72 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800057c:	2010      	movs	r0, #16
 800057e:	f000 fb7e 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000582:	20c5      	movs	r0, #197	; 0xc5
 8000584:	f000 fb6c 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000588:	203e      	movs	r0, #62	; 0x3e
 800058a:	f000 fb78 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800058e:	2028      	movs	r0, #40	; 0x28
 8000590:	f000 fb75 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8000594:	20c7      	movs	r0, #199	; 0xc7
 8000596:	f000 fb63 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800059a:	2086      	movs	r0, #134	; 0x86
 800059c:	f000 fb6f 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005a0:	2036      	movs	r0, #54	; 0x36
 80005a2:	f000 fb5d 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005a6:	2048      	movs	r0, #72	; 0x48
 80005a8:	f000 fb69 	bl	8000c7e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f000 fb57 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005b2:	2055      	movs	r0, #85	; 0x55
 80005b4:	f000 fb63 	bl	8000c7e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005b8:	20b1      	movs	r0, #177	; 0xb1
 80005ba:	f000 fb51 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fb5d 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005c4:	2018      	movs	r0, #24
 80005c6:	f000 fb5a 	bl	8000c7e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005ca:	20b6      	movs	r0, #182	; 0xb6
 80005cc:	f000 fb48 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005d0:	2008      	movs	r0, #8
 80005d2:	f000 fb54 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005d6:	2082      	movs	r0, #130	; 0x82
 80005d8:	f000 fb51 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005dc:	2027      	movs	r0, #39	; 0x27
 80005de:	f000 fb4e 	bl	8000c7e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005e2:	20f2      	movs	r0, #242	; 0xf2
 80005e4:	f000 fb3c 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fb48 	bl	8000c7e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005ee:	2026      	movs	r0, #38	; 0x26
 80005f0:	f000 fb36 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fb42 	bl	8000c7e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 80005fa:	20e0      	movs	r0, #224	; 0xe0
 80005fc:	f000 fb30 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000600:	200f      	movs	r0, #15
 8000602:	f000 fb3c 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000606:	2031      	movs	r0, #49	; 0x31
 8000608:	f000 fb39 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800060c:	202b      	movs	r0, #43	; 0x2b
 800060e:	f000 fb36 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000612:	200c      	movs	r0, #12
 8000614:	f000 fb33 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000618:	200e      	movs	r0, #14
 800061a:	f000 fb30 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800061e:	2008      	movs	r0, #8
 8000620:	f000 fb2d 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000624:	204e      	movs	r0, #78	; 0x4e
 8000626:	f000 fb2a 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800062a:	20f1      	movs	r0, #241	; 0xf1
 800062c:	f000 fb27 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000630:	2037      	movs	r0, #55	; 0x37
 8000632:	f000 fb24 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000636:	2007      	movs	r0, #7
 8000638:	f000 fb21 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800063c:	2010      	movs	r0, #16
 800063e:	f000 fb1e 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 fb1b 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000648:	200e      	movs	r0, #14
 800064a:	f000 fb18 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800064e:	2009      	movs	r0, #9
 8000650:	f000 fb15 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fb12 	bl	8000c7e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800065a:	20e1      	movs	r0, #225	; 0xe1
 800065c:	f000 fb00 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fb0c 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000666:	200e      	movs	r0, #14
 8000668:	f000 fb09 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800066c:	2014      	movs	r0, #20
 800066e:	f000 fb06 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 fb03 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000678:	2011      	movs	r0, #17
 800067a:	f000 fb00 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800067e:	2007      	movs	r0, #7
 8000680:	f000 fafd 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000684:	2031      	movs	r0, #49	; 0x31
 8000686:	f000 fafa 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800068a:	20c1      	movs	r0, #193	; 0xc1
 800068c:	f000 faf7 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8000690:	2048      	movs	r0, #72	; 0x48
 8000692:	f000 faf4 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000696:	2008      	movs	r0, #8
 8000698:	f000 faf1 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800069c:	200f      	movs	r0, #15
 800069e:	f000 faee 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006a2:	200c      	movs	r0, #12
 80006a4:	f000 faeb 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 fae8 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006ae:	2036      	movs	r0, #54	; 0x36
 80006b0:	f000 fae5 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006b4:	200f      	movs	r0, #15
 80006b6:	f000 fae2 	bl	8000c7e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ba:	2011      	movs	r0, #17
 80006bc:	f000 fad0 	bl	8000c60 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006c0:	2029      	movs	r0, #41	; 0x29
 80006c2:	f000 facd 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006c6:	202c      	movs	r0, #44	; 0x2c
 80006c8:	f000 fad9 	bl	8000c7e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f83d 	bl	800074c <ILI9341_Set_Rotation>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006e2:	1df9      	adds	r1, r7, #7
 80006e4:	2301      	movs	r3, #1
 80006e6:	2201      	movs	r2, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <ILI9341_SPI_Send+0x20>)
 80006ea:	f005 fb6a 	bl	8005dc2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000119c 	.word	0x2000119c

080006fc <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	RESET_ON;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <ILI9341_Reset+0x4c>)
 8000708:	f003 f800 	bl	800370c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f002 fa11 	bl	8002b34 <HAL_Delay>
	RESET_OFF;
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <ILI9341_Reset+0x4c>)
 800071a:	f002 fff7 	bl	800370c <HAL_GPIO_WritePin>
	CS_ON;
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <ILI9341_Reset+0x4c>)
 8000726:	f002 fff1 	bl	800370c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f002 fa02 	bl	8002b34 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fa95 	bl	8000c60 <ILI9341_Send_Command>
	CS_OFF;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <ILI9341_Reset+0x4c>)
 800073e:	f002 ffe5 	bl	800370c <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020c00 	.word	0x40020c00

0800074c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000756:	2036      	movs	r0, #54	; 0x36
 8000758:	f000 fa82 	bl	8000c60 <ILI9341_Send_Command>
	switch (rotation) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d836      	bhi.n	80007d0 <ILI9341_Set_Rotation+0x84>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <ILI9341_Set_Rotation+0x1c>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000779 	.word	0x08000779
 800076c:	0800078f 	.word	0x0800078f
 8000770:	080007a5 	.word	0x080007a5
 8000774:	080007bb 	.word	0x080007bb
	case 0:
		ILI9341_Send_Data(0x48);
 8000778:	2048      	movs	r0, #72	; 0x48
 800077a:	f000 fa80 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 240;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 8000780:	22f0      	movs	r2, #240	; 0xf0
 8000782:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 8000786:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e020      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f000 fa75 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 320;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 800079e:	22f0      	movs	r2, #240	; 0xf0
 80007a0:	601a      	str	r2, [r3, #0]
		break;
 80007a2:	e015      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007a4:	2088      	movs	r0, #136	; 0x88
 80007a6:	f000 fa6a 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 80007ac:	22f0      	movs	r2, #240	; 0xf0
 80007ae:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 80007b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007b6:	601a      	str	r2, [r3, #0]
		break;
 80007b8:	e00a      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ba:	20e8      	movs	r0, #232	; 0xe8
 80007bc:	f000 fa5f 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 80007ca:	22f0      	movs	r2, #240	; 0xf0
 80007cc:	601a      	str	r2, [r3, #0]
		break;
 80007ce:	bf00      	nop
	}
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000004 	.word	0x20000004

080007e0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 80007f4:	f002 ff8a 	bl	800370c <HAL_GPIO_WritePin>
	DC_COMMAND;
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 8000800:	f002 ff84 	bl	800370c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff66 	bl	80006d8 <ILI9341_SPI_Send>

	DC_DATA;
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 8000814:	f002 ff7a 	bl	800370c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	0e1b      	lsrs	r3, r3, #24
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff5a 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff54 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff4e 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff49 	bl	80006d8 <ILI9341_SPI_Send>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000874:	6979      	ldr	r1, [r7, #20]
 8000876:	202a      	movs	r0, #42	; 0x2a
 8000878:	f7ff ffb2 	bl	80007e0 <ILI9341_SPI_Send_32>
	t = y1;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4313      	orrs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800088e:	6979      	ldr	r1, [r7, #20]
 8000890:	202b      	movs	r0, #43	; 0x2b
 8000892:	f7ff ffa5 	bl	80007e0 <ILI9341_SPI_Send_32>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <ILI9341_Fill_Screen+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <ILI9341_Fill_Screen+0x44>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	2100      	movs	r1, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ffcc 	bl	8000854 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <ILI9341_Fill_Screen+0x40>)
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <ILI9341_Fill_Screen+0x44>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	fb01 f202 	mul.w	r2, r1, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f9e3 	bl	8000c9c <ILI9341_Send_Burst>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004

080008e8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db31      	blt.n	800095e <ILI9341_Draw_Pixel+0x76>
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db2e      	blt.n	800095e <ILI9341_Draw_Pixel+0x76>
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <ILI9341_Draw_Pixel+0x80>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d229      	bcs.n	800095e <ILI9341_Draw_Pixel+0x76>
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <ILI9341_Draw_Pixel+0x84>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d224      	bcs.n	800095e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <ILI9341_Draw_Pixel+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <ILI9341_Draw_Pixel+0x84>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	f7ff ff96 	bl	8000854 <ILI9341_Set_Address>
	DC_COMMAND;
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	4810      	ldr	r0, [pc, #64]	; (8000970 <ILI9341_Draw_Pixel+0x88>)
 8000930:	f002 feec 	bl	800370c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff fecf 	bl	80006d8 <ILI9341_SPI_Send>
	DC_DATA;
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <ILI9341_Draw_Pixel+0x88>)
 8000942:	f002 fee3 	bl	800370c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fec3 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff febe 	bl	80006d8 <ILI9341_SPI_Send>
 800095c:	e000      	b.n	8000960 <ILI9341_Draw_Pixel+0x78>
		return;
 800095e:	bf00      	nop
}
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	20000004 	.word	0x20000004
 8000970:	40020c00 	.word	0x40020c00

08000974 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f7ff ff63 	bl	8000854 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	b298      	uxth	r0, r3
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	3301      	adds	r3, #1
 800099a:	4619      	mov	r1, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	fb01 f303 	mul.w	r3, r1, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	f000 f977 	bl	8000c9c <ILI9341_Send_Burst>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af02      	add	r7, sp, #8
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f81c 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f814 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f80c 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f804 	bl	8000a0c <ILI9341_Draw_Line>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1acb      	subs	r3, r1, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	429a      	cmp	r2, r3
 8000a36:	bfcc      	ite	gt
 8000a38:	2301      	movgt	r3, #1
 8000a3a:	2300      	movle	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00d      	beq.n	8000a62 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a52:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	843b      	strh	r3, [r7, #32]
 8000a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d90d      	bls.n	8000a86 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	83fb      	strh	r3, [r7, #30]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a76:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	83bb      	strh	r3, [r7, #28]
 8000a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	0fda      	lsrs	r2, r3, #31
 8000aa0:	4413      	add	r3, r2
 8000aa2:	105b      	asrs	r3, r3, #1
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d202      	bcs.n	8000ab4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab2:	e023      	b.n	8000afc <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aba:	e01f      	b.n	8000afc <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff0d 	bl	80008e8 <ILI9341_Draw_Pixel>
 8000ace:	e005      	b.n	8000adc <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff06 	bl	80008e8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da05      	bge.n	8000af6 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	607b      	str	r3, [r7, #4]
			err = dx;
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d9db      	bls.n	8000abc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b1e:	7f3b      	ldrb	r3, [r7, #28]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d061      	beq.n	8000be8 <ILI9341_Draw_String+0xd8>
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	f300 8092 	bgt.w	8000c4e <ILI9341_Draw_String+0x13e>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d028      	beq.n	8000b80 <ILI9341_Draw_String+0x70>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d02b      	beq.n	8000b8a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b32:	e08c      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b34:	7f3b      	ldrb	r3, [r7, #28]
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d907      	bls.n	8000b56 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	7f3a      	ldrb	r2, [r7, #28]
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	f000 f95a 	bl	8000e20 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b6c:	7f3b      	ldrb	r3, [r7, #28]
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	3b02      	subs	r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1d5      	bne.n	8000b34 <ILI9341_Draw_String+0x24>
	break;
 8000b88:	e061      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b90:	e025      	b.n	8000bde <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b92:	7f3b      	ldrb	r3, [r7, #28]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d907      	bls.n	8000bb4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	7f3a      	ldrb	r2, [r7, #28]
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	f000 f92b 	bl	8000e20 <ILI9341_Draw_Char>
			x += hh*8;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1d5      	bne.n	8000b92 <ILI9341_Draw_String+0x82>
	break;
 8000be6:	e032      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bee:	e029      	b.n	8000c44 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bf0:	7f3b      	ldrb	r3, [r7, #28]
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	441a      	add	r2, r3
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d907      	bls.n	8000c12 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c06:	7f3b      	ldrb	r3, [r7, #28]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	7f3a      	ldrb	r2, [r7, #28]
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	f000 f8fc 	bl	8000e20 <ILI9341_Draw_Char>
			x += hh*10;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1d1      	bne.n	8000bf0 <ILI9341_Draw_String+0xe0>
	break;
 8000c4c:	bf00      	nop
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000034 	.word	0x20000034

08000c60 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c6a:	f000 fa09 	bl	8001080 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fd31 	bl	80006d8 <ILI9341_SPI_Send>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c88:	f000 f9e8 	bl	800105c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd22 	bl	80006d8 <ILI9341_SPI_Send>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	733b      	strb	r3, [r7, #12]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	4858      	ldr	r0, [pc, #352]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cbc:	f002 fd26 	bl	800370c <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc6:	4855      	ldr	r0, [pc, #340]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cc8:	f002 fd20 	bl	800370c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000ccc:	202c      	movs	r0, #44	; 0x2c
 8000cce:	f7ff fd03 	bl	80006d8 <ILI9341_SPI_Send>
	DC_DATA;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	4850      	ldr	r0, [pc, #320]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cda:	f002 fd17 	bl	800370c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cde:	7b3b      	ldrb	r3, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fcf9 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcf5 	bl	80006d8 <ILI9341_SPI_Send>
	len--;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	099b      	lsrs	r3, r3, #6
 8000cf8:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cfa:	7b3a      	ldrb	r2, [r7, #12]
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d169      	bne.n	8000dd6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d02:	e027      	b.n	8000d54 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fce4 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fce0 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcdc 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcd8 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcd4 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd0 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fccc 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcc8 	bl	80006d8 <ILI9341_SPI_Send>
			} while (--i);
 8000d48:	7b7b      	ldrb	r3, [r7, #13]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	737b      	strb	r3, [r7, #13]
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1d9      	bne.n	8000d08 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	81fa      	strh	r2, [r7, #14]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1d2      	bne.n	8000d04 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d66:	737b      	strb	r3, [r7, #13]
 8000d68:	e007      	b.n	8000d7a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcb3 	bl	80006d8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcaf 	bl	80006d8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	737a      	strb	r2, [r7, #13]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f2      	bne.n	8000d6a <ILI9341_Send_Burst+0xce>
 8000d84:	e03f      	b.n	8000e06 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d86:	2310      	movs	r3, #16
 8000d88:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fca3 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc9f 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fc9b 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc97 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc93 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc8f 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc8b 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc87 	bl	80006d8 <ILI9341_SPI_Send>
			} while (--i);
 8000dca:	7b7b      	ldrb	r3, [r7, #13]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	737b      	strb	r3, [r7, #13]
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1d9      	bne.n	8000d8a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	81fa      	strh	r2, [r7, #14]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1d2      	bne.n	8000d86 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000de8:	737b      	strb	r3, [r7, #13]
 8000dea:	e007      	b.n	8000dfc <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dec:	7b3b      	ldrb	r3, [r7, #12]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fc72 	bl	80006d8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fc6e 	bl	80006d8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	737a      	strb	r2, [r7, #13]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f2      	bne.n	8000dec <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000e0e:	f002 fc7d 	bl	800370c <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	f000 80b2 	beq.w	8000f9c <ILI9341_Draw_Char+0x17c>
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	f300 8104 	bgt.w	8001046 <ILI9341_Draw_Char+0x226>
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d002      	beq.n	8000e48 <ILI9341_Draw_Char+0x28>
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d055      	beq.n	8000ef2 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e46:	e0fe      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3305      	adds	r3, #5
 8000e50:	461a      	mov	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3308      	adds	r3, #8
 8000e56:	f7ff fcfd 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	487b      	ldr	r0, [pc, #492]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000e62:	f002 fc53 	bl	800370c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e66:	202c      	movs	r0, #44	; 0x2c
 8000e68:	f7ff fc36 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	4877      	ldr	r0, [pc, #476]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000e74:	f002 fc4a 	bl	800370c <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e035      	b.n	8000eea <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e7e:	2302      	movs	r3, #2
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e02c      	b.n	8000ede <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e88:	3b20      	subs	r3, #32
 8000e8a:	4a72      	ldr	r2, [pc, #456]	; (8001054 <ILI9341_Draw_Char+0x234>)
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	441a      	add	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	fa42 f303 	asr.w	r3, r2, r3
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc11 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc0c 	bl	80006d8 <ILI9341_SPI_Send>
 8000ec0:	e00a      	b.n	8000ed8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc05 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc00 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddcf      	ble.n	8000e84 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	ddc6      	ble.n	8000e7e <ILI9341_Draw_Char+0x5e>
			break;
 8000ef0:	e0a9      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3307      	adds	r3, #7
 8000efa:	461a      	mov	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3310      	adds	r3, #16
 8000f00:	f7ff fca8 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	4851      	ldr	r0, [pc, #324]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000f0c:	f002 fbfe 	bl	800370c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f10:	202c      	movs	r0, #44	; 0x2c
 8000f12:	f7ff fbe1 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	484c      	ldr	r0, [pc, #304]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000f1e:	f002 fbf5 	bl	800370c <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e035      	b.n	8000f94 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e02c      	b.n	8000f88 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f32:	3b20      	subs	r3, #32
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <ILI9341_Draw_Char+0x238>)
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	441a      	add	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f1c3 0307 	rsb	r3, r3, #7
 8000f48:	fa42 f303 	asr.w	r3, r2, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbbc 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbb7 	bl	80006d8 <ILI9341_SPI_Send>
 8000f6a:	e00a      	b.n	8000f82 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fbb0 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbab 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	ddcf      	ble.n	8000f2e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3301      	adds	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	ddc6      	ble.n	8000f28 <ILI9341_Draw_Char+0x108>
		break;
 8000f9a:	e054      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3309      	adds	r3, #9
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3310      	adds	r3, #16
 8000faa:	f7ff fc53 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	4826      	ldr	r0, [pc, #152]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000fb6:	f002 fba9 	bl	800370c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fba:	202c      	movs	r0, #44	; 0x2c
 8000fbc:	f7ff fb8c 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000fc8:	f002 fba0 	bl	800370c <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e035      	b.n	800103e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e02c      	b.n	8001032 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <ILI9341_Draw_Char+0x238>)
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	441a      	add	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	fa42 f303 	asr.w	r3, r2, r3
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fb67 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb62 	bl	80006d8 <ILI9341_SPI_Send>
 8001014:	e00a      	b.n	800102c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fb5b 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb56 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b07      	cmp	r3, #7
 8001036:	ddcf      	ble.n	8000fd8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3301      	adds	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b1d      	cmp	r3, #29
 8001042:	ddc6      	ble.n	8000fd2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001044:	bf00      	nop
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020c00 	.word	0x40020c00
 8001054:	08007ca0 	.word	0x08007ca0
 8001058:	08007f78 	.word	0x08007f78

0800105c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <Before_Sending_Data+0x20>)
 8001068:	f002 fb50 	bl	800370c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <Before_Sending_Data+0x20>)
 8001074:	f002 fb4a 	bl	800370c <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020c00 	.word	0x40020c00

08001080 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <Before_Sending_Command+0x20>)
 800108c:	f002 fb3e 	bl	800370c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <Before_Sending_Command+0x20>)
 8001098:	f002 fb38 	bl	800370c <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020c00 	.word	0x40020c00

080010a4 <Si468x_init>:

RETURN_CODE status = 0;


void Si468x_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	Si468x_reset();
 80010a8:	f000 f81a 	bl	80010e0 <Si468x_reset>
	Si468x_power_up();
 80010ac:	f000 f82e 	bl	800110c <Si468x_power_up>
	Si468x_load_init();
 80010b0:	f000 f87e 	bl	80011b0 <Si468x_load_init>
	Si468x_bootloader_load_host();
 80010b4:	f000 f8a2 	bl	80011fc <Si468x_bootloader_load_host>
	Si468x_load_init();
 80010b8:	f000 f87a 	bl	80011b0 <Si468x_load_init>
	Si468x_firmware_load_flash();
 80010bc:	f000 f922 	bl	8001304 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010c0:	f000 f964 	bl	800138c <Si468x_boot>
	HAL_Delay(3000);
 80010c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010c8:	f001 fd34 	bl	8002b34 <HAL_Delay>
	Si468x_get_part_info();
 80010cc:	f000 faa2 	bl	8001614 <Si468x_get_part_info>
	HAL_Delay(5000);
 80010d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80010d4:	f001 fd2e 	bl	8002b34 <HAL_Delay>
	Si468x_get_sys_state();
 80010d8:	f000 fa72 	bl	80015c0 <Si468x_get_sys_state>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Si468x_reset>:

void Si468x_reset()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	RESET_PIN_LOW;
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <Si468x_reset+0x28>)
 80010ea:	f002 fb0f 	bl	800370c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f001 fd20 	bl	8002b34 <HAL_Delay>
	RESET_PIN_HIGH;
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <Si468x_reset+0x28>)
 80010fa:	f002 fb07 	bl	800370c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80010fe:	20c8      	movs	r0, #200	; 0xc8
 8001100:	f001 fd18 	bl	8002b34 <HAL_Delay>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020800 	.word	0x40020800

0800110c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	DisplayState("Power Up...");
 8001110:	4823      	ldr	r0, [pc, #140]	; (80011a0 <Si468x_power_up+0x94>)
 8001112:	f000 fcd1 	bl	8001ab8 <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <Si468x_power_up+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Si468x_power_up+0x98>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <Si468x_power_up+0x98>)
 8001124:	2217      	movs	r2, #23
 8001126:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <Si468x_power_up+0x98>)
 800112a:	2250      	movs	r2, #80	; 0x50
 800112c:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <Si468x_power_up+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <Si468x_power_up+0x98>)
 8001136:	22f8      	movs	r2, #248	; 0xf8
 8001138:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <Si468x_power_up+0x98>)
 800113c:	2224      	movs	r2, #36	; 0x24
 800113e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <Si468x_power_up+0x98>)
 8001142:	2201      	movs	r2, #1
 8001144:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <Si468x_power_up+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <Si468x_power_up+0x98>)
 800114e:	2210      	movs	r2, #16
 8001150:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <Si468x_power_up+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <Si468x_power_up+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <Si468x_power_up+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <Si468x_power_up+0x98>)
 8001166:	2228      	movs	r2, #40	; 0x28
 8001168:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <Si468x_power_up+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <Si468x_power_up+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001176:	490b      	ldr	r1, [pc, #44]	; (80011a4 <Si468x_power_up+0x98>)
 8001178:	2010      	movs	r0, #16
 800117a:	f000 f9df 	bl	800153c <Si468x_write_command>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <Si468x_power_up+0x9c>)
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f001 fcd4 	bl	8002b34 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <Si468x_power_up+0xa0>)
 800118e:	2005      	movs	r0, #5
 8001190:	f000 f9f6 	bl	8001580 <Si468x_read_reply>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <Si468x_power_up+0x9c>)
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08007bc8 	.word	0x08007bc8
 80011a4:	20000038 	.word	0x20000038
 80011a8:	20001078 	.word	0x20001078
 80011ac:	20001038 	.word	0x20001038

080011b0 <Si468x_load_init>:

void Si468x_load_init()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <Si468x_load_init+0x40>)
 80011b6:	2206      	movs	r2, #6
 80011b8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <Si468x_load_init+0x40>)
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80011c0:	490b      	ldr	r1, [pc, #44]	; (80011f0 <Si468x_load_init+0x40>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f000 f9ba 	bl	800153c <Si468x_write_command>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <Si468x_load_init+0x44>)
 80011ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 80011d0:	2005      	movs	r0, #5
 80011d2:	f001 fcaf 	bl	8002b34 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <Si468x_load_init+0x48>)
 80011d8:	2005      	movs	r0, #5
 80011da:	f000 f9d1 	bl	8001580 <Si468x_read_reply>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <Si468x_load_init+0x44>)
 80011e4:	701a      	strb	r2, [r3, #0]

	DisplayStatusReg();
 80011e6:	f000 fb8f 	bl	8001908 <DisplayStatusReg>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000038 	.word	0x20000038
 80011f4:	20001078 	.word	0x20001078
 80011f8:	20001038 	.word	0x20001038

080011fc <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	ClearOK();
 8001202:	f000 fc45 	bl	8001a90 <ClearOK>
	DisplayState("Boot Write ");
 8001206:	4839      	ldr	r0, [pc, #228]	; (80012ec <Si468x_bootloader_load_host+0xf0>)
 8001208:	f000 fc56 	bl	8001ab8 <DisplayState>
	uint16_t patch_size = sizeof(patch_full);
 800120c:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001210:	807b      	strh	r3, [r7, #2]
	DisplayFirmwareTotalSize(patch_size);
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fc97 	bl	8001b48 <DisplayFirmwareTotalSize>

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 800121c:	2204      	movs	r2, #4
 800121e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 8001222:	2200      	movs	r2, #0
 8001224:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 8001228:	2200      	movs	r2, #0
 800122a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 800122e:	2200      	movs	r2, #0
 8001230:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	e04f      	b.n	80012d8 <Si468x_bootloader_load_host+0xdc>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001238:	2300      	movs	r3, #0
 800123a:	80bb      	strh	r3, [r7, #4]
 800123c:	e014      	b.n	8001268 <Si468x_bootloader_load_host+0x6c>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800123e:	88ba      	ldrh	r2, [r7, #4]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	492c      	ldr	r1, [pc, #176]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 8001244:	fba1 1303 	umull	r1, r3, r1, r3
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	441a      	add	r2, r3
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	3304      	adds	r3, #4
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <Si468x_bootloader_load_host+0xfc>)
 800125c:	5c89      	ldrb	r1, [r1, r2]
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 8001260:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	80bb      	strh	r3, [r7, #4]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	88ba      	ldrh	r2, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3e1      	bcc.n	800123e <Si468x_bootloader_load_host+0x42>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	b29b      	uxth	r3, r3
 8001286:	3304      	adds	r3, #4
 8001288:	b29b      	uxth	r3, r3
 800128a:	4919      	ldr	r1, [pc, #100]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f955 	bl	800153c <Si468x_write_command>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <Si468x_bootloader_load_host+0x100>)
 8001298:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 800129a:	2005      	movs	r0, #5
 800129c:	f001 fc4a 	bl	8002b34 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012a0:	4917      	ldr	r1, [pc, #92]	; (8001300 <Si468x_bootloader_load_host+0x104>)
 80012a2:	2005      	movs	r0, #5
 80012a4:	f000 f96c 	bl	8001580 <Si468x_read_reply>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <Si468x_bootloader_load_host+0x100>)
 80012ae:	701a      	strb	r2, [r3, #0]
		DisplayStatusReg();
 80012b0:	f000 fb2a 	bl	8001908 <DisplayStatusReg>
		DisplayFirmwareDownloadStatus(j + (patch_size / BOOT_WRITE_STEPS) * i);
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 80012ba:	fba1 1303 	umull	r1, r3, r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fc1f 	bl	8001b10 <DisplayFirmwareDownloadStatus>
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	3301      	adds	r3, #1
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d9ac      	bls.n	8001238 <Si468x_bootloader_load_host+0x3c>
	}

	DisplayOK();
 80012de:	f000 fbc3 	bl	8001a68 <DisplayOK>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08007bd4 	.word	0x08007bd4
 80012f0:	20000038 	.word	0x20000038
 80012f4:	aaaaaaab 	.word	0xaaaaaaab
 80012f8:	08008568 	.word	0x08008568
 80012fc:	20001078 	.word	0x20001078
 8001300:	20001038 	.word	0x20001038

08001304 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	DisplayState("Image Write");
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <Si468x_firmware_load_flash+0x78>)
 800130a:	f000 fbd5 	bl	8001ab8 <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;	//Power up command code
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001310:	2205      	movs	r2, #5
 8001312:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//not used - value as in documentation
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;					//not used - value as in documentation
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800131c:	2200      	movs	r2, #0
 800131e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;					//not used - value as in documentation
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//Flash start address [7:0] 0x6000
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001328:	2200      	movs	r2, #0
 800132a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0x60;					//Flash start address [15:8]
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800132e:	2260      	movs	r2, #96	; 0x60
 8001330:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x00;					//Flash start address [23:16]
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001334:	2200      	movs	r2, #0
 8001336:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x00;					//Flash start address [31:24]
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//not used - value as in documentation
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001340:	2200      	movs	r2, #0
 8001342:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;					//not used - value as in documentation
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001346:	2200      	movs	r2, #0
 8001348:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800134c:	2200      	movs	r2, #0
 800134e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]

	Si468x_write_command(12, dab_spi_tx_buffer);
 8001356:	490a      	ldr	r1, [pc, #40]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001358:	200c      	movs	r0, #12
 800135a:	f000 f8ef 	bl	800153c <Si468x_write_command>
	HAL_Delay(5);
 800135e:	2005      	movs	r0, #5
 8001360:	f001 fbe8 	bl	8002b34 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <Si468x_firmware_load_flash+0x80>)
 8001366:	2005      	movs	r0, #5
 8001368:	f000 f90a 	bl	8001580 <Si468x_read_reply>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <Si468x_firmware_load_flash+0x84>)
 8001372:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 8001374:	f000 fac8 	bl	8001908 <DisplayStatusReg>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	08007be0 	.word	0x08007be0
 8001380:	20000038 	.word	0x20000038
 8001384:	20001038 	.word	0x20001038
 8001388:	20001078 	.word	0x20001078

0800138c <Si468x_boot>:

void Si468x_boot()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	DisplayState("Booting... ");
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <Si468x_boot+0x48>)
 8001392:	f000 fb91 	bl	8001ab8 <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <Si468x_boot+0x4c>)
 8001398:	2207      	movs	r2, #7
 800139a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <Si468x_boot+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <Si468x_boot+0x4c>)
 80013a4:	2002      	movs	r0, #2
 80013a6:	f000 f8c9 	bl	800153c <Si468x_write_command>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <Si468x_boot+0x50>)
 80013b0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 80013b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013b6:	f001 fbbd 	bl	8002b34 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80013ba:	4909      	ldr	r1, [pc, #36]	; (80013e0 <Si468x_boot+0x54>)
 80013bc:	2005      	movs	r0, #5
 80013be:	f000 f8df 	bl	8001580 <Si468x_read_reply>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <Si468x_boot+0x50>)
 80013c8:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 80013ca:	f000 fa9d 	bl	8001908 <DisplayStatusReg>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08007bec 	.word	0x08007bec
 80013d8:	20000038 	.word	0x20000038
 80013dc:	20001078 	.word	0x20001078
 80013e0:	20001038 	.word	0x20001038

080013e4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80013ee:	1df9      	adds	r1, r7, #7
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	2201      	movs	r2, #1
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <Si468x_write_single_byte+0x20>)
 80013f6:	f004 fce4 	bl	8005dc2 <HAL_SPI_Transmit>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20001144 	.word	0x20001144

08001408 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001412:	1df9      	adds	r1, r7, #7
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	2201      	movs	r2, #1
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <Si468x_read_single_byte+0x20>)
 800141a:	f004 fe0e 	bl	800603a <HAL_SPI_Receive>
	return data_buffer;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20001144 	.word	0x20001144

0800142c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	81fb      	strh	r3, [r7, #14]
 800143e:	e018      	b.n	8001472 <Si468x_wait_for_CTS+0x46>
	{
		Si468x_read_multiple(1, &cts_status);
 8001440:	f107 030d 	add.w	r3, r7, #13
 8001444:	4619      	mov	r1, r3
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f844 	bl	80014d4 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	da08      	bge.n	8001466 <Si468x_wait_for_CTS+0x3a>
		{
			if((cts_status & 0x40) == 0x40)
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <Si468x_wait_for_CTS+0x36>
			{
				return COMMAND_ERROR;
 800145e:	2320      	movs	r3, #32
 8001460:	e00c      	b.n	800147c <Si468x_wait_for_CTS+0x50>
			}
			return SUCCESS;
 8001462:	2300      	movs	r3, #0
 8001464:	e00a      	b.n	800147c <Si468x_wait_for_CTS+0x50>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f001 fb64 	bl	8002b34 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	3301      	adds	r3, #1
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	89fa      	ldrh	r2, [r7, #14]
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3e2      	bcc.n	8001440 <Si468x_wait_for_CTS+0x14>
	}
	return TIMEOUT;
 800147a:	2308      	movs	r3, #8
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001494:	2200      	movs	r2, #0
 8001496:	2110      	movs	r1, #16
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <Si468x_write_multiple+0x4c>)
 800149a:	f002 f937 	bl	800370c <HAL_GPIO_WritePin>
	while(len--)
 800149e:	e009      	b.n	80014b4 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	81fa      	strh	r2, [r7, #14]
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff98 	bl	80013e4 <Si468x_write_single_byte>
	while(len--)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	80fa      	strh	r2, [r7, #6]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80014be:	2201      	movs	r2, #1
 80014c0:	2110      	movs	r1, #16
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <Si468x_write_multiple+0x4c>)
 80014c4:	f002 f922 	bl	800370c <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020800 	.word	0x40020800

080014d4 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <Si468x_read_multiple+0x64>)
 80014ea:	f002 f90f 	bl	800370c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014ee:	200a      	movs	r0, #10
 80014f0:	f001 fb20 	bl	8002b34 <HAL_Delay>
	CS_PIN_LOW;
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <Si468x_read_multiple+0x64>)
 80014fa:	f002 f907 	bl	800370c <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ff70 	bl	80013e4 <Si468x_write_single_byte>
	while(len--)
 8001504:	e009      	b.n	800151a <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	81fa      	strh	r2, [r7, #14]
 800150c:	461a      	mov	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	189c      	adds	r4, r3, r2
 8001512:	f7ff ff79 	bl	8001408 <Si468x_read_single_byte>
 8001516:	4603      	mov	r3, r0
 8001518:	7023      	strb	r3, [r4, #0]
	while(len--)
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	80fa      	strh	r2, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <Si468x_read_multiple+0x64>)
 800152a:	f002 f8ef 	bl	800370c <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	40020800 	.word	0x40020800

0800153c <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f7ff ff6e 	bl	800142c <Si468x_wait_for_CTS>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <Si468x_write_command+0x24>
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b20      	cmp	r3, #32
 800155e:	d10a      	bne.n	8001576 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff8d 	bl	8001484 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800156a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156e:	f7ff ff5d 	bl	800142c <Si468x_wait_for_CTS>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff9f 	bl	80014d4 <Si468x_read_multiple>
	return SUCCESS;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <get_rx_buffer>:

uint8_t get_rx_buffer(int buffer_pos)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	return dab_spi_rx_buffer[buffer_pos];
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <get_rx_buffer+0x1c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20001038 	.word	0x20001038

080015c0 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	DisplayState("Get sys stat");
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <Si468x_get_sys_state+0x44>)
 80015c6:	f000 fa77 	bl	8001ab8 <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <Si468x_get_sys_state+0x48>)
 80015cc:	2209      	movs	r2, #9
 80015ce:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <Si468x_get_sys_state+0x48>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <Si468x_get_sys_state+0x48>)
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff ffaf 	bl	800153c <Si468x_write_command>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <Si468x_get_sys_state+0x4c>)
 80015e4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f001 faa4 	bl	8002b34 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80015ec:	4908      	ldr	r1, [pc, #32]	; (8001610 <Si468x_get_sys_state+0x50>)
 80015ee:	2005      	movs	r0, #5
 80015f0:	f7ff ffc6 	bl	8001580 <Si468x_read_reply>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <Si468x_get_sys_state+0x4c>)
 80015fa:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 80015fc:	f000 f984 	bl	8001908 <DisplayStatusReg>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	08007bf8 	.word	0x08007bf8
 8001608:	20000038 	.word	0x20000038
 800160c:	20001078 	.word	0x20001078
 8001610:	20001038 	.word	0x20001038

08001614 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	DisplayState("Get part info");
 8001618:	481c      	ldr	r0, [pc, #112]	; (800168c <Si468x_get_part_info+0x78>)
 800161a:	f000 fa4d 	bl	8001ab8 <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <Si468x_get_part_info+0x7c>)
 8001620:	2208      	movs	r2, #8
 8001622:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <Si468x_get_part_info+0x7c>)
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800162a:	4919      	ldr	r1, [pc, #100]	; (8001690 <Si468x_get_part_info+0x7c>)
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff ff85 	bl	800153c <Si468x_write_command>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <Si468x_get_part_info+0x80>)
 8001638:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f001 fa7a 	bl	8002b34 <HAL_Delay>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001640:	4915      	ldr	r1, [pc, #84]	; (8001698 <Si468x_get_part_info+0x84>)
 8001642:	200a      	movs	r0, #10
 8001644:	f7ff ff9c 	bl	8001580 <Si468x_read_reply>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <Si468x_get_part_info+0x80>)
 800164e:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 8001650:	f000 f95a 	bl	8001908 <DisplayStatusReg>

	HAL_Delay(5000);
 8001654:	f241 3088 	movw	r0, #5000	; 0x1388
 8001658:	f001 fa6c 	bl	8002b34 <HAL_Delay>
	DisplayState("Show part info");
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <Si468x_get_part_info+0x88>)
 800165e:	f000 fa2b 	bl	8001ab8 <DisplayState>
	dab_spi_rx_buffer[0] = dab_spi_rx_buffer[4];
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <Si468x_get_part_info+0x84>)
 8001664:	791a      	ldrb	r2, [r3, #4]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <Si468x_get_part_info+0x84>)
 8001668:	701a      	strb	r2, [r3, #0]
	dab_spi_rx_buffer[1] = dab_spi_rx_buffer[5];
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <Si468x_get_part_info+0x84>)
 800166c:	795a      	ldrb	r2, [r3, #5]
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <Si468x_get_part_info+0x84>)
 8001670:	705a      	strb	r2, [r3, #1]
	dab_spi_rx_buffer[2] = dab_spi_rx_buffer[8];
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <Si468x_get_part_info+0x84>)
 8001674:	7a1a      	ldrb	r2, [r3, #8]
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <Si468x_get_part_info+0x84>)
 8001678:	709a      	strb	r2, [r3, #2]
	dab_spi_rx_buffer[3] = dab_spi_rx_buffer[9];
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <Si468x_get_part_info+0x84>)
 800167c:	7a5a      	ldrb	r2, [r3, #9]
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <Si468x_get_part_info+0x84>)
 8001680:	70da      	strb	r2, [r3, #3]
	DisplayStatusReg();
 8001682:	f000 f941 	bl	8001908 <DisplayStatusReg>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	08007c08 	.word	0x08007c08
 8001690:	20000038 	.word	0x20000038
 8001694:	20001078 	.word	0x20001078
 8001698:	20001038 	.word	0x20001038
 800169c:	08007c18 	.word	0x08007c18

080016a0 <DisplayMainScreen>:
#include "Si468x.h"

char char_buffer[32];

void DisplayMainScreen()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff f8fa 	bl	80008a0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 80016ac:	23eb      	movs	r3, #235	; 0xeb
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	f240 133b 	movw	r3, #315	; 0x13b
 80016b4:	2219      	movs	r2, #25
 80016b6:	2105      	movs	r1, #5
 80016b8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80016bc:	f7ff f97b 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 80016c0:	2302      	movs	r3, #2
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	4b85      	ldr	r3, [pc, #532]	; (80018dc <DisplayMainScreen+0x23c>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ce:	2105      	movs	r1, #5
 80016d0:	2041      	movs	r0, #65	; 0x41
 80016d2:	f7ff fa1d 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 80016d6:	233c      	movs	r3, #60	; 0x3c
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	f240 1331 	movw	r3, #305	; 0x131
 80016de:	2223      	movs	r2, #35	; 0x23
 80016e0:	210f      	movs	r1, #15
 80016e2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80016e6:	f7ff f966 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 80016ea:	235f      	movs	r3, #95	; 0x5f
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f240 1331 	movw	r3, #305	; 0x131
 80016f2:	2246      	movs	r2, #70	; 0x46
 80016f4:	210f      	movs	r1, #15
 80016f6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80016fa:	f7ff f95c 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 80016fe:	23a0      	movs	r3, #160	; 0xa0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2369      	movs	r3, #105	; 0x69
 8001704:	226e      	movs	r2, #110	; 0x6e
 8001706:	210f      	movs	r1, #15
 8001708:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800170c:	f7ff f953 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8001710:	239f      	movs	r3, #159	; 0x9f
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2368      	movs	r3, #104	; 0x68
 8001716:	226f      	movs	r2, #111	; 0x6f
 8001718:	2110      	movs	r1, #16
 800171a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800171e:	f7ff f929 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8001722:	2302      	movs	r3, #2
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <DisplayMainScreen+0x240>)
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800172e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001732:	217f      	movs	r1, #127	; 0x7f
 8001734:	2023      	movs	r0, #35	; 0x23
 8001736:	f7ff f9eb 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 800173a:	23a0      	movs	r3, #160	; 0xa0
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	23cd      	movs	r3, #205	; 0xcd
 8001740:	226e      	movs	r2, #110	; 0x6e
 8001742:	2173      	movs	r1, #115	; 0x73
 8001744:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001748:	f7ff f935 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 800174c:	239f      	movs	r3, #159	; 0x9f
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	23cc      	movs	r3, #204	; 0xcc
 8001752:	226f      	movs	r2, #111	; 0x6f
 8001754:	2174      	movs	r1, #116	; 0x74
 8001756:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800175a:	f7ff f90b 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 800175e:	2302      	movs	r3, #2
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <DisplayMainScreen+0x244>)
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	217f      	movs	r1, #127	; 0x7f
 8001770:	2090      	movs	r0, #144	; 0x90
 8001772:	f7ff f9cd 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 8001776:	23a0      	movs	r3, #160	; 0xa0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	f240 1331 	movw	r3, #305	; 0x131
 800177e:	226e      	movs	r2, #110	; 0x6e
 8001780:	21d7      	movs	r1, #215	; 0xd7
 8001782:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001786:	f7ff f916 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 800178a:	239f      	movs	r3, #159	; 0x9f
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001792:	226f      	movs	r2, #111	; 0x6f
 8001794:	21d8      	movs	r1, #216	; 0xd8
 8001796:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800179a:	f7ff f8eb 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 800179e:	2302      	movs	r3, #2
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <DisplayMainScreen+0x248>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ae:	217f      	movs	r1, #127	; 0x7f
 80017b0:	20ea      	movs	r0, #234	; 0xea
 80017b2:	f7ff f9ad 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 80017b6:	23dc      	movs	r3, #220	; 0xdc
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2369      	movs	r3, #105	; 0x69
 80017bc:	22aa      	movs	r2, #170	; 0xaa
 80017be:	210f      	movs	r1, #15
 80017c0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80017c4:	f7ff f8f7 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 80017c8:	23db      	movs	r3, #219	; 0xdb
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2368      	movs	r3, #104	; 0x68
 80017ce:	22ab      	movs	r2, #171	; 0xab
 80017d0:	2110      	movs	r1, #16
 80017d2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80017d6:	f7ff f8cd 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 80017da:	2302      	movs	r3, #2
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <DisplayMainScreen+0x24c>)
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ea:	21bb      	movs	r1, #187	; 0xbb
 80017ec:	202d      	movs	r0, #45	; 0x2d
 80017ee:	f7ff f98f 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 80017f2:	23dc      	movs	r3, #220	; 0xdc
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	23cd      	movs	r3, #205	; 0xcd
 80017f8:	22aa      	movs	r2, #170	; 0xaa
 80017fa:	2173      	movs	r1, #115	; 0x73
 80017fc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001800:	f7ff f8d9 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8001804:	23db      	movs	r3, #219	; 0xdb
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	23cc      	movs	r3, #204	; 0xcc
 800180a:	22ab      	movs	r2, #171	; 0xab
 800180c:	2174      	movs	r1, #116	; 0x74
 800180e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001812:	f7ff f8af 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 8001816:	2302      	movs	r3, #2
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <DisplayMainScreen+0x250>)
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	21b4      	movs	r1, #180	; 0xb4
 8001828:	2081      	movs	r0, #129	; 0x81
 800182a:	f7ff f971 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 800182e:	2302      	movs	r3, #2
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <DisplayMainScreen+0x254>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	21c3      	movs	r1, #195	; 0xc3
 8001840:	2084      	movs	r0, #132	; 0x84
 8001842:	f7ff f965 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 8001846:	23dc      	movs	r3, #220	; 0xdc
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	f240 1331 	movw	r3, #305	; 0x131
 800184e:	22aa      	movs	r2, #170	; 0xaa
 8001850:	21d7      	movs	r1, #215	; 0xd7
 8001852:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001856:	f7ff f8ae 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 800185a:	23db      	movs	r3, #219	; 0xdb
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001862:	22ab      	movs	r2, #171	; 0xab
 8001864:	21d8      	movs	r1, #216	; 0xd8
 8001866:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800186a:	f7ff f883 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 800186e:	2302      	movs	r3, #2
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <DisplayMainScreen+0x258>)
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187e:	21b4      	movs	r1, #180	; 0xb4
 8001880:	20f5      	movs	r0, #245	; 0xf5
 8001882:	f7ff f945 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 8001886:	2302      	movs	r3, #2
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <DisplayMainScreen+0x254>)
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001896:	21c3      	movs	r1, #195	; 0xc3
 8001898:	20e8      	movs	r0, #232	; 0xe8
 800189a:	f7ff f939 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 75, WHITE, BLACK, "Status:" , 2);
 800189e:	2302      	movs	r3, #2
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <DisplayMainScreen+0x25c>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ac:	214b      	movs	r1, #75	; 0x4b
 80018ae:	2014      	movs	r0, #20
 80018b0:	f7ff f92e 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 75, WHITE, BLACK, "/", 2);
 80018b4:	2302      	movs	r3, #2
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <DisplayMainScreen+0x260>)
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	214b      	movs	r1, #75	; 0x4b
 80018c4:	20f0      	movs	r0, #240	; 0xf0
 80018c6:	f7ff f923 	bl	8000b10 <ILI9341_Draw_String>

	CS_OFF;
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <DisplayMainScreen+0x264>)
 80018d2:	f001 ff1b 	bl	800370c <HAL_GPIO_WritePin>
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08007c28 	.word	0x08007c28
 80018e0:	08007c3c 	.word	0x08007c3c
 80018e4:	08007c44 	.word	0x08007c44
 80018e8:	08007c4c 	.word	0x08007c4c
 80018ec:	08007c54 	.word	0x08007c54
 80018f0:	08007c5c 	.word	0x08007c5c
 80018f4:	08007c68 	.word	0x08007c68
 80018f8:	08007c70 	.word	0x08007c70
 80018fc:	08007c78 	.word	0x08007c78
 8001900:	08007c80 	.word	0x08007c80
 8001904:	40020c00 	.word	0x40020c00

08001908 <DisplayStatusReg>:

void DisplayStatusReg()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "   ", 2);
 800190e:	2302      	movs	r3, #2
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <DisplayStatusReg+0x158>)
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191c:	2128      	movs	r1, #40	; 0x28
 800191e:	2014      	movs	r0, #20
 8001920:	f7ff f8f6 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(60, 40, WHITE, BLACK, "   ", 2);
 8001924:	2302      	movs	r3, #2
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <DisplayStatusReg+0x158>)
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001932:	2128      	movs	r1, #40	; 0x28
 8001934:	203c      	movs	r0, #60	; 0x3c
 8001936:	f7ff f8eb 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 40, WHITE, BLACK, "   ", 2);
 800193a:	2302      	movs	r3, #2
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <DisplayStatusReg+0x158>)
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001948:	2128      	movs	r1, #40	; 0x28
 800194a:	2064      	movs	r0, #100	; 0x64
 800194c:	f7ff f8e0 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(140, 40, WHITE, BLACK, "   ",  2);
 8001950:	2302      	movs	r3, #2
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <DisplayStatusReg+0x158>)
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195e:	2128      	movs	r1, #40	; 0x28
 8001960:	208c      	movs	r0, #140	; 0x8c
 8001962:	f7ff f8d5 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 40, WHITE, BLACK, "   ", 2);
 8001966:	2302      	movs	r3, #2
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <DisplayStatusReg+0x158>)
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001974:	2128      	movs	r1, #40	; 0x28
 8001976:	20b4      	movs	r0, #180	; 0xb4
 8001978:	f7ff f8ca 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 40, WHITE, BLACK, "   ", 2);
 800197c:	2302      	movs	r3, #2
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <DisplayStatusReg+0x158>)
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	2128      	movs	r1, #40	; 0x28
 800198c:	20dc      	movs	r0, #220	; 0xdc
 800198e:	f7ff f8bf 	bl	8000b10 <ILI9341_Draw_String>


	ILI9341_Draw_String(20, 40, WHITE, BLACK, itoa(get_rx_buffer(0), char_buffer, 10), 2);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fe04 	bl	80015a0 <get_rx_buffer>
 8001998:	4603      	mov	r3, r0
 800199a:	220a      	movs	r2, #10
 800199c:	4931      	ldr	r1, [pc, #196]	; (8001a64 <DisplayStatusReg+0x15c>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 f8ba 	bl	8007b18 <itoa>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2202      	movs	r2, #2
 80019a8:	9201      	str	r2, [sp, #4]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b2:	2128      	movs	r1, #40	; 0x28
 80019b4:	2014      	movs	r0, #20
 80019b6:	f7ff f8ab 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(60, 40, WHITE, BLACK, itoa(get_rx_buffer(1), char_buffer, 10), 2);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fdf0 	bl	80015a0 <get_rx_buffer>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220a      	movs	r2, #10
 80019c4:	4927      	ldr	r1, [pc, #156]	; (8001a64 <DisplayStatusReg+0x15c>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 f8a6 	bl	8007b18 <itoa>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2202      	movs	r2, #2
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	2128      	movs	r1, #40	; 0x28
 80019dc:	203c      	movs	r0, #60	; 0x3c
 80019de:	f7ff f897 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 40, WHITE, BLACK, itoa(get_rx_buffer(2), char_buffer, 10), 2);
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff fddc 	bl	80015a0 <get_rx_buffer>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220a      	movs	r2, #10
 80019ec:	491d      	ldr	r1, [pc, #116]	; (8001a64 <DisplayStatusReg+0x15c>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f006 f892 	bl	8007b18 <itoa>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2202      	movs	r2, #2
 80019f8:	9201      	str	r2, [sp, #4]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2300      	movs	r3, #0
 80019fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a02:	2128      	movs	r1, #40	; 0x28
 8001a04:	2064      	movs	r0, #100	; 0x64
 8001a06:	f7ff f883 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(140, 40, WHITE, BLACK, itoa(get_rx_buffer(3), char_buffer, 10), 2);
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	f7ff fdc8 	bl	80015a0 <get_rx_buffer>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220a      	movs	r2, #10
 8001a14:	4913      	ldr	r1, [pc, #76]	; (8001a64 <DisplayStatusReg+0x15c>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 f87e 	bl	8007b18 <itoa>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2202      	movs	r2, #2
 8001a20:	9201      	str	r2, [sp, #4]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2a:	2128      	movs	r1, #40	; 0x28
 8001a2c:	208c      	movs	r0, #140	; 0x8c
 8001a2e:	f7ff f86f 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 40, WHITE, BLACK, itoa(get_rx_buffer(4), char_buffer, 10), 2);
 8001a32:	2004      	movs	r0, #4
 8001a34:	f7ff fdb4 	bl	80015a0 <get_rx_buffer>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	4909      	ldr	r1, [pc, #36]	; (8001a64 <DisplayStatusReg+0x15c>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 f86a 	bl	8007b18 <itoa>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2202      	movs	r2, #2
 8001a48:	9201      	str	r2, [sp, #4]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	2128      	movs	r1, #40	; 0x28
 8001a54:	20b4      	movs	r0, #180	; 0xb4
 8001a56:	f7ff f85b 	bl	8000b10 <ILI9341_Draw_String>
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	08007c84 	.word	0x08007c84
 8001a64:	2000107c 	.word	0x2000107c

08001a68 <DisplayOK>:

void DisplayOK()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(260, 40, WHITE, BLACK, "OK", 2);
 8001a6e:	2302      	movs	r3, #2
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <DisplayOK+0x24>)
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7c:	2128      	movs	r1, #40	; 0x28
 8001a7e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001a82:	f7ff f845 	bl	8000b10 <ILI9341_Draw_String>
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08007c88 	.word	0x08007c88

08001a90 <ClearOK>:
{
	ILI9341_Draw_String(260, 40, WHITE, BLACK, "TO", 2);
}

void ClearOK()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(260, 40, WHITE, BLACK, "  ", 2);
 8001a96:	2302      	movs	r3, #2
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <ClearOK+0x24>)
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa4:	2128      	movs	r1, #40	; 0x28
 8001aa6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001aaa:	f7ff f831 	bl	8000b10 <ILI9341_Draw_String>
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	08007c90 	.word	0x08007c90

08001ab8 <DisplayState>:

void DisplayState(char* string)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_String(80, 75, WHITE, BLACK, string, 2);
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	214b      	movs	r1, #75	; 0x4b
 8001ad0:	2050      	movs	r0, #80	; 0x50
 8001ad2:	f7ff f81d 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(190, 75, WHITE, BLACK, "      ", 2);
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <DisplayState+0x54>)
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	214b      	movs	r1, #75	; 0x4b
 8001ae6:	20be      	movs	r0, #190	; 0xbe
 8001ae8:	f7ff f812 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(250, 75, WHITE, BLACK, "      ", 2);
 8001aec:	2302      	movs	r3, #2
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <DisplayState+0x54>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afa:	214b      	movs	r1, #75	; 0x4b
 8001afc:	20fa      	movs	r0, #250	; 0xfa
 8001afe:	f7ff f807 	bl	8000b10 <ILI9341_Draw_String>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08007c94 	.word	0x08007c94

08001b10 <DisplayFirmwareDownloadStatus>:


void DisplayFirmwareDownloadStatus(uint32_t byte_cnt)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_String(190, 75, WHITE, BLACK, itoa(byte_cnt, char_buffer, 10), 2);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	220a      	movs	r2, #10
 8001b1c:	4909      	ldr	r1, [pc, #36]	; (8001b44 <DisplayFirmwareDownloadStatus+0x34>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fffa 	bl	8007b18 <itoa>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2202      	movs	r2, #2
 8001b28:	9201      	str	r2, [sp, #4]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	214b      	movs	r1, #75	; 0x4b
 8001b34:	20be      	movs	r0, #190	; 0xbe
 8001b36:	f7fe ffeb 	bl	8000b10 <ILI9341_Draw_String>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000107c 	.word	0x2000107c

08001b48 <DisplayFirmwareTotalSize>:

void DisplayFirmwareTotalSize(uint32_t byte_cnt)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_String(250, 75, WHITE, BLACK, itoa(byte_cnt, char_buffer, 10), 2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	220a      	movs	r2, #10
 8001b54:	4909      	ldr	r1, [pc, #36]	; (8001b7c <DisplayFirmwareTotalSize+0x34>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 ffde 	bl	8007b18 <itoa>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2202      	movs	r2, #2
 8001b60:	9201      	str	r2, [sp, #4]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6a:	214b      	movs	r1, #75	; 0x4b
 8001b6c:	20fa      	movs	r0, #250	; 0xfa
 8001b6e:	f7fe ffcf 	bl	8000b10 <ILI9341_Draw_String>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000107c 	.word	0x2000107c

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f001 f8c3 	bl	8002d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bac:	200f      	movs	r0, #15
 8001bae:	f001 f8dc 	bl	8002d6a <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a64      	ldr	r2, [pc, #400]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a4f      	ldr	r2, [pc, #316]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b4d      	ldr	r3, [pc, #308]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a48      	ldr	r2, [pc, #288]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a41      	ldr	r2, [pc, #260]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <MX_GPIO_Init+0x1b0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2130      	movs	r1, #48	; 0x30
 8001c82:	483c      	ldr	r0, [pc, #240]	; (8001d74 <MX_GPIO_Init+0x1b4>)
 8001c84:	f001 fd42 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8e:	483a      	ldr	r0, [pc, #232]	; (8001d78 <MX_GPIO_Init+0x1b8>)
 8001c90:	f001 fd3c 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8001c94:	2200      	movs	r2, #0
 8001c96:	f24f 7180 	movw	r1, #63360	; 0xf780
 8001c9a:	4838      	ldr	r0, [pc, #224]	; (8001d7c <MX_GPIO_Init+0x1bc>)
 8001c9c:	f001 fd36 	bl	800370c <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2128      	movs	r1, #40	; 0x28
 8001ca4:	4836      	ldr	r0, [pc, #216]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001ca6:	f001 fd31 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8001caa:	2310      	movs	r3, #16
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4831      	ldr	r0, [pc, #196]	; (8001d84 <MX_GPIO_Init+0x1c4>)
 8001cbe:	f001 fb89 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8001cc2:	2330      	movs	r3, #48	; 0x30
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4826      	ldr	r0, [pc, #152]	; (8001d74 <MX_GPIO_Init+0x1b4>)
 8001cda:	f001 fb7b 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8001cde:	2311      	movs	r3, #17
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4823      	ldr	r0, [pc, #140]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001cf2:	f001 fb6f 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8001cf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481a      	ldr	r0, [pc, #104]	; (8001d78 <MX_GPIO_Init+0x1b8>)
 8001d10:	f001 fb60 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8001d14:	f24f 7380 	movw	r3, #63360	; 0xf780
 8001d18:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <MX_GPIO_Init+0x1bc>)
 8001d2e:	f001 fb51 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <MX_GPIO_Init+0x1bc>)
 8001d46:	f001 fb45 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8001d4a:	2328      	movs	r3, #40	; 0x28
 8001d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001d62:	f001 fb37 	bl	80033d4 <HAL_GPIO_Init>

}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020000 	.word	0x40020000

08001d88 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <MX_I2C1_Init+0x54>)
 8001d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_I2C1_Init+0x58>)
 8001d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001daa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc6:	f001 fcbb 	bl	8003740 <HAL_I2C_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dd0:	f000 fa00 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000109c 	.word	0x2000109c
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	000186a0 	.word	0x000186a0

08001de4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <MX_I2C3_Init+0x54>)
 8001dec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <MX_I2C3_Init+0x58>)
 8001df2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_I2C3_Init+0x50>)
 8001e22:	f001 fc8d 	bl	8003740 <HAL_I2C_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e2c:	f000 f9d2 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200010f0 	.word	0x200010f0
 8001e38:	40005c00 	.word	0x40005c00
 8001e3c:	000186a0 	.word	0x000186a0

08001e40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4a      	ldr	r2, [pc, #296]	; (8001f88 <HAL_I2C_MspInit+0x148>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d12c      	bne.n	8001ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a48      	ldr	r2, [pc, #288]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e82:	2312      	movs	r3, #18
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	483d      	ldr	r0, [pc, #244]	; (8001f90 <HAL_I2C_MspInit+0x150>)
 8001e9a:	f001 fa9b 	bl	80033d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001eba:	e060      	b.n	8001f7e <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_I2C_MspInit+0x154>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d15b      	bne.n	8001f7e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f04:	2312      	movs	r3, #18
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f10:	2304      	movs	r3, #4
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481f      	ldr	r0, [pc, #124]	; (8001f98 <HAL_I2C_MspInit+0x158>)
 8001f1c:	f001 fa5a 	bl	80033d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8001f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f26:	2312      	movs	r3, #18
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f32:	2304      	movs	r3, #4
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4817      	ldr	r0, [pc, #92]	; (8001f9c <HAL_I2C_MspInit+0x15c>)
 8001f3e:	f001 fa49 	bl	80033d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_I2C_MspInit+0x14c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2048      	movs	r0, #72	; 0x48
 8001f64:	f000 fee5 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001f68:	2048      	movs	r0, #72	; 0x48
 8001f6a:	f000 fefe 	bl	8002d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2049      	movs	r0, #73	; 0x49
 8001f74:	f000 fedd 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001f78:	2049      	movs	r0, #73	; 0x49
 8001f7a:	f000 fef6 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3730      	adds	r7, #48	; 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40005c00 	.word	0x40005c00
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	led_number++;
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <Leds_Control_Blink+0x110>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <Leds_Control_Blink+0x110>)
 8001fae:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8001fb0:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <Leds_Control_Blink+0x110>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d102      	bne.n	8001fbe <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8001fb8:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <Leds_Control_Blink+0x110>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <Leds_Control_Blink+0x110>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d86f      	bhi.n	80020a8 <Leds_Control_Blink+0x108>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <Leds_Control_Blink+0x30>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08002013 	.word	0x08002013
 8001fd8:	08002045 	.word	0x08002045
 8001fdc:	08002077 	.word	0x08002077
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe6:	4833      	ldr	r0, [pc, #204]	; (80020b4 <Leds_Control_Blink+0x114>)
 8001fe8:	f001 fb90 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8001fec:	2200      	movs	r2, #0
 8001fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff2:	4830      	ldr	r0, [pc, #192]	; (80020b4 <Leds_Control_Blink+0x114>)
 8001ff4:	f001 fb8a 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ffe:	482d      	ldr	r0, [pc, #180]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002000:	f001 fb84 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800200a:	482a      	ldr	r0, [pc, #168]	; (80020b4 <Leds_Control_Blink+0x114>)
 800200c:	f001 fb7e 	bl	800370c <HAL_GPIO_WritePin>
		break;
 8002010:	e04b      	b.n	80020aa <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002018:	4826      	ldr	r0, [pc, #152]	; (80020b4 <Leds_Control_Blink+0x114>)
 800201a:	f001 fb77 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002024:	4823      	ldr	r0, [pc, #140]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002026:	f001 fb71 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002030:	4820      	ldr	r0, [pc, #128]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002032:	f001 fb6b 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002036:	2200      	movs	r2, #0
 8002038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800203c:	481d      	ldr	r0, [pc, #116]	; (80020b4 <Leds_Control_Blink+0x114>)
 800203e:	f001 fb65 	bl	800370c <HAL_GPIO_WritePin>
		break;
 8002042:	e032      	b.n	80020aa <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204a:	481a      	ldr	r0, [pc, #104]	; (80020b4 <Leds_Control_Blink+0x114>)
 800204c:	f001 fb5e 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002056:	4817      	ldr	r0, [pc, #92]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002058:	f001 fb58 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 800205c:	2201      	movs	r2, #1
 800205e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002064:	f001 fb52 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206e:	4811      	ldr	r0, [pc, #68]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002070:	f001 fb4c 	bl	800370c <HAL_GPIO_WritePin>
		break;
 8002074:	e019      	b.n	80020aa <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <Leds_Control_Blink+0x114>)
 800207e:	f001 fb45 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <Leds_Control_Blink+0x114>)
 800208a:	f001 fb3f 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <Leds_Control_Blink+0x114>)
 8002096:	f001 fb39 	bl	800370c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <Leds_Control_Blink+0x114>)
 80020a2:	f001 fb33 	bl	800370c <HAL_GPIO_WritePin>
		break;
 80020a6:	e000      	b.n	80020aa <Leds_Control_Blink+0x10a>
	default:

		break;
 80020a8:	bf00      	nop
	}
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008
 80020b4:	40020c00 	.word	0x40020c00

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020bc:	f000 fcc8 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c0:	f000 f81e 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c4:	f7ff fd7c 	bl	8001bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80020c8:	f7ff fd5a 	bl	8001b80 <MX_DMA_Init>
  MX_I2C1_Init();
 80020cc:	f7ff fe5c 	bl	8001d88 <MX_I2C1_Init>
  MX_I2C3_Init();
 80020d0:	f7ff fe88 	bl	8001de4 <MX_I2C3_Init>
  MX_SPI1_Init();
 80020d4:	f000 f884 	bl	80021e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80020d8:	f000 f8b8 	bl	800224c <MX_SPI2_Init>
  MX_TIM3_Init();
 80020dc:	f000 fa56 	bl	800258c <MX_TIM3_Init>
  MX_UART5_Init();
 80020e0:	f000 fb98 	bl	8002814 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80020e4:	f000 fbc0 	bl	8002868 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80020e8:	f000 faaa 	bl	8002640 <MX_TIM10_Init>
  MX_TIM11_Init();
 80020ec:	f000 facc 	bl	8002688 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 80020f0:	f7fe f9ec 	bl	80004cc <ILI9341_Init>
  DisplayMainScreen();
 80020f4:	f7ff fad4 	bl	80016a0 <DisplayMainScreen>

  Si468x_init();
 80020f8:	f7fe ffd4 	bl	80010a4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <main+0x44>
	...

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b094      	sub	sp, #80	; 0x50
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2230      	movs	r2, #48	; 0x30
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fd04 	bl	8007b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <SystemClock_Config+0xcc>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <SystemClock_Config+0xcc>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <SystemClock_Config+0xcc>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <SystemClock_Config+0xd0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <SystemClock_Config+0xd0>)
 800214a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <SystemClock_Config+0xd0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800215c:	2301      	movs	r3, #1
 800215e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002166:	2302      	movs	r3, #2
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800216a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002170:	2304      	movs	r3, #4
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002174:	23a0      	movs	r3, #160	; 0xa0
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002178:	2302      	movs	r3, #2
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800217c:	2304      	movs	r3, #4
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002180:	f107 0320 	add.w	r3, r7, #32
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f8fb 	bl	8005380 <HAL_RCC_OscConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002190:	f000 f820 	bl	80021d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002194:	230f      	movs	r3, #15
 8002196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2105      	movs	r1, #5
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fb5c 	bl	8005870 <HAL_RCC_ClockConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021be:	f000 f809 	bl	80021d4 <Error_Handler>
  }
}
 80021c2:	bf00      	nop
 80021c4:	3750      	adds	r7, #80	; 0x50
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40007000 	.word	0x40007000

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021dc:	e7fe      	b.n	80021dc <Error_Handler+0x8>
	...

080021e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_SPI1_Init+0x64>)
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <MX_SPI1_Init+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_SPI1_Init+0x64>)
 80021ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_SPI1_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_SPI1_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_SPI1_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_SPI1_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_SPI1_Init+0x64>)
 800220c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002210:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_SPI1_Init+0x64>)
 8002214:	2218      	movs	r2, #24
 8002216:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <MX_SPI1_Init+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_SPI1_Init+0x64>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <MX_SPI1_Init+0x64>)
 8002226:	2200      	movs	r2, #0
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_SPI1_Init+0x64>)
 800222c:	220a      	movs	r2, #10
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002230:	4804      	ldr	r0, [pc, #16]	; (8002244 <MX_SPI1_Init+0x64>)
 8002232:	f003 fd3d 	bl	8005cb0 <HAL_SPI_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800223c:	f7ff ffca 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20001144 	.word	0x20001144
 8002248:	40013000 	.word	0x40013000

0800224c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <MX_SPI2_Init+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800225c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_SPI2_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_SPI2_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_SPI2_Init+0x64>)
 8002298:	220a      	movs	r2, #10
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <MX_SPI2_Init+0x64>)
 800229e:	f003 fd07 	bl	8005cb0 <HAL_SPI_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022a8:	f7ff ff94 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000119c 	.word	0x2000119c
 80022b4:	40003800 	.word	0x40003800

080022b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <HAL_SPI_MspInit+0x154>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12c      	bne.n	8002334 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_SPI_MspInit+0x158>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_SPI_MspInit+0x158>)
 80022e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <HAL_SPI_MspInit+0x158>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <HAL_SPI_MspInit+0x158>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a44      	ldr	r2, [pc, #272]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b42      	ldr	r3, [pc, #264]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8002312:	23e0      	movs	r3, #224	; 0xe0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002322:	2305      	movs	r3, #5
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	4839      	ldr	r0, [pc, #228]	; (8002414 <HAL_SPI_MspInit+0x15c>)
 800232e:	f001 f851 	bl	80033d4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002332:	e066      	b.n	8002402 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a37      	ldr	r2, [pc, #220]	; (8002418 <HAL_SPI_MspInit+0x160>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d161      	bne.n	8002402 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <HAL_SPI_MspInit+0x158>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_SPI_MspInit+0x158>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002376:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002388:	2305      	movs	r3, #5
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4822      	ldr	r0, [pc, #136]	; (800241c <HAL_SPI_MspInit+0x164>)
 8002394:	f001 f81e 	bl	80033d4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_SPI_MspInit+0x168>)
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_SPI_MspInit+0x16c>)
 800239c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023d6:	4812      	ldr	r0, [pc, #72]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023d8:	f000 fce2 	bl	8002da0 <HAL_DMA_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80023e2:	f7ff fef7 	bl	80021d4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023ea:	649a      	str	r2, [r3, #72]	; 0x48
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_SPI_MspInit+0x168>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2024      	movs	r0, #36	; 0x24
 80023f8:	f000 fc9b 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023fc:	2024      	movs	r0, #36	; 0x24
 80023fe:	f000 fcb4 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40013000 	.word	0x40013000
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000
 8002418:	40003800 	.word	0x40003800
 800241c:	40020400 	.word	0x40020400
 8002420:	200011f4 	.word	0x200011f4
 8002424:	40026070 	.word	0x40026070

08002428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_MspInit+0x4c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <HAL_MspInit+0x4c>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_MspInit+0x4c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_MspInit+0x4c>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_MspInit+0x4c>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_MspInit+0x4c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c4:	f000 fb16 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA1_Stream4_IRQHandler+0x10>)
 80024d2:	f000 fd35 	bl	8002f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200011f4 	.word	0x200011f4

080024e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024e6:	f004 fb47 	bl	8006b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000129c 	.word	0x2000129c

080024f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80024fa:	f004 fb3d 	bl	8006b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200012e4 	.word	0x200012e4

08002508 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <SPI2_IRQHandler+0x10>)
 800250e:	f004 f847 	bl	80065a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000119c 	.word	0x2000119c

0800251c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <I2C3_EV_IRQHandler+0x10>)
 8002522:	f001 fa51 	bl	80039c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200010f0 	.word	0x200010f0

08002530 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <I2C3_ER_IRQHandler+0x10>)
 8002536:	f001 fbb8 	bl	8003caa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200010f0 	.word	0x200010f0

08002544 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 8002556:	f7ff fd23 	bl	8001fa0 <Leds_Control_Blink>

	}
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40014800 	.word	0x40014800

08002568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <MX_TIM3_Init+0xac>)
 80025b0:	4a22      	ldr	r2, [pc, #136]	; (800263c <MX_TIM3_Init+0xb0>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <MX_TIM3_Init+0xac>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <MX_TIM3_Init+0xac>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <MX_TIM3_Init+0xac>)
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <MX_TIM3_Init+0xac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <MX_TIM3_Init+0xac>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025d4:	4818      	ldr	r0, [pc, #96]	; (8002638 <MX_TIM3_Init+0xac>)
 80025d6:	f004 fa80 	bl	8006ada <HAL_TIM_PWM_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025e0:	f7ff fdf8 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	4619      	mov	r1, r3
 80025f2:	4811      	ldr	r0, [pc, #68]	; (8002638 <MX_TIM3_Init+0xac>)
 80025f4:	f004 ff02 	bl	80073fc <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025fe:	f7ff fde9 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002602:	2360      	movs	r3, #96	; 0x60
 8002604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2208      	movs	r2, #8
 8002616:	4619      	mov	r1, r3
 8002618:	4807      	ldr	r0, [pc, #28]	; (8002638 <MX_TIM3_Init+0xac>)
 800261a:	f004 fbb5 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002624:	f7ff fdd6 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002628:	4803      	ldr	r0, [pc, #12]	; (8002638 <MX_TIM3_Init+0xac>)
 800262a:	f000 f8b9 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20001254 	.word	0x20001254
 800263c:	40000400 	.word	0x40000400

08002640 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_TIM10_Init+0x40>)
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <MX_TIM10_Init+0x44>)
 8002648:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <MX_TIM10_Init+0x40>)
 800264c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002650:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <MX_TIM10_Init+0x40>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <MX_TIM10_Init+0x40>)
 800265a:	f240 2257 	movw	r2, #599	; 0x257
 800265e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <MX_TIM10_Init+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <MX_TIM10_Init+0x40>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <MX_TIM10_Init+0x40>)
 800266e:	f004 f9e5 	bl	8006a3c <HAL_TIM_Base_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002678:	f7ff fdac 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000129c 	.word	0x2000129c
 8002684:	40014400 	.word	0x40014400

08002688 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_TIM11_Init+0x40>)
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <MX_TIM11_Init+0x44>)
 8002690:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <MX_TIM11_Init+0x40>)
 8002694:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002698:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_TIM11_Init+0x40>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_TIM11_Init+0x40>)
 80026a2:	f240 5213 	movw	r2, #1299	; 0x513
 80026a6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <MX_TIM11_Init+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_TIM11_Init+0x40>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80026b4:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_TIM11_Init+0x40>)
 80026b6:	f004 f9c1 	bl	8006a3c <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80026c0:	f7ff fd88 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200012e4 	.word	0x200012e4
 80026cc:	40014800 	.word	0x40014800

080026d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10d      	bne.n	80026fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_PWM_MspInit+0x40>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_TIM_PWM_MspInit+0x40>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_TIM_PWM_MspInit+0x40>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40000400 	.word	0x40000400
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <HAL_TIM_Base_MspInit+0x80>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d116      	bne.n	8002754 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_TIM_Base_MspInit+0x84>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_TIM_Base_MspInit+0x84>)
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_TIM_Base_MspInit+0x84>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2019      	movs	r0, #25
 8002748:	f000 faf3 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800274c:	2019      	movs	r0, #25
 800274e:	f000 fb0c 	bl	8002d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002752:	e01a      	b.n	800278a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIM_Base_MspInit+0x88>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d115      	bne.n	800278a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_TIM_Base_MspInit+0x84>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_TIM_Base_MspInit+0x84>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_TIM_Base_MspInit+0x84>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	201a      	movs	r0, #26
 8002780:	f000 fad7 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002784:	201a      	movs	r0, #26
 8002786:	f000 faf0 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40014400 	.word	0x40014400
 8002798:	40023800 	.word	0x40023800
 800279c:	40014800 	.word	0x40014800

080027a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_TIM_MspPostInit+0x68>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11e      	bne.n	8002800 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_TIM_MspPostInit+0x6c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_TIM_MspPostInit+0x6c>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_TIM_MspPostInit+0x6c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 80027de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <HAL_TIM_MspPostInit+0x70>)
 80027fc:	f000 fdea 	bl	80033d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40000400 	.word	0x40000400
 800280c:	40023800 	.word	0x40023800
 8002810:	40020800 	.word	0x40020800

08002814 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_UART5_Init+0x4c>)
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <MX_UART5_Init+0x50>)
 800281c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <MX_UART5_Init+0x4c>)
 8002820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002824:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_UART5_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_UART5_Init+0x4c>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_UART5_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_UART5_Init+0x4c>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_UART5_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_UART5_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_UART5_Init+0x4c>)
 800284c:	f004 fe66 	bl	800751c <HAL_UART_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002856:	f7ff fcbd 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000132c 	.word	0x2000132c
 8002864:	40005000 	.word	0x40005000

08002868 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <MX_USART3_UART_Init+0x50>)
 8002870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 80028a0:	f004 fe3c 	bl	800751c <HAL_UART_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028aa:	f7ff fc93 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20001370 	.word	0x20001370
 80028b8:	40004800 	.word	0x40004800

080028bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_UART_MspInit+0x128>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d14b      	bne.n	8002976 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 80028e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002944:	2308      	movs	r3, #8
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4827      	ldr	r0, [pc, #156]	; (80029ec <HAL_UART_MspInit+0x130>)
 8002950:	f000 fd40 	bl	80033d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002954:	2304      	movs	r3, #4
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002964:	2308      	movs	r3, #8
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	4619      	mov	r1, r3
 800296e:	4820      	ldr	r0, [pc, #128]	; (80029f0 <HAL_UART_MspInit+0x134>)
 8002970:	f000 fd30 	bl	80033d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002974:	e031      	b.n	80029da <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_UART_MspInit+0x138>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d12c      	bne.n	80029da <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 800298a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298e:	6413      	str	r3, [r2, #64]	; 0x40
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_UART_MspInit+0x12c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80029b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ca:	2307      	movs	r3, #7
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	4808      	ldr	r0, [pc, #32]	; (80029f8 <HAL_UART_MspInit+0x13c>)
 80029d6:	f000 fcfd 	bl	80033d4 <HAL_GPIO_Init>
}
 80029da:	bf00      	nop
 80029dc:	3730      	adds	r7, #48	; 0x30
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40005000 	.word	0x40005000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020c00 	.word	0x40020c00
 80029f4:	40004800 	.word	0x40004800
 80029f8:	40020400 	.word	0x40020400

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a26:	f7ff fd9f 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f005 f839 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7ff fb43 	bl	80020b8 <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002a40:	08009c64 	.word	0x08009c64
  ldr r2, =_sbss
 8002a44:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002a48:	200013b8 	.word	0x200013b8

08002a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 f94f 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fcd0 	bl	8002428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f967 	bl	8002d86 <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 f92f 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	20000014 	.word	0x20000014
 8002af0:	20000010 	.word	0x20000010

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000014 	.word	0x20000014
 8002b18:	200013b4 	.word	0x200013b4

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200013b4 	.word	0x200013b4

08002b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000014 	.word	0x20000014

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f7ff ff8e 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff29 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d44:	f7ff ff3e 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7ff ff8e 	bl	8002c70 <NVIC_EncodePriority>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff5d 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff31 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ffa2 	bl	8002cd8 <SysTick_Config>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff feb6 	bl	8002b1c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e099      	b.n	8002ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ddc:	e00f      	b.n	8002dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dde:	f7ff fe9d 	bl	8002b1c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d908      	bls.n	8002dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2203      	movs	r2, #3
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e078      	b.n	8002ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e8      	bne.n	8002dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_DMA_Init+0x158>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4313      	orrs	r3, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d117      	bne.n	8002ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa19 	bl	80032dc <DMA_CheckFifoParam>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2240      	movs	r2, #64	; 0x40
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e016      	b.n	8002ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f9d0 	bl	8003270 <DMA_CalcBaseAndBitshift>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	223f      	movs	r2, #63	; 0x3f
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	f010803f 	.word	0xf010803f

08002efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00c      	b.n	8002f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f4c:	4b8e      	ldr	r3, [pc, #568]	; (8003188 <HAL_DMA_IRQHandler+0x248>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a8e      	ldr	r2, [pc, #568]	; (800318c <HAL_DMA_IRQHandler+0x24c>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0a9b      	lsrs	r3, r3, #10
 8002f58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01a      	beq.n	8002fac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0204 	bic.w	r2, r2, #4
 8002f92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2208      	movs	r2, #8
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	2201      	movs	r2, #1
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f043 0202 	orr.w	r2, r3, #2
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	2204      	movs	r2, #4
 8003006:	409a      	lsls	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	2210      	movs	r2, #16
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d043      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03c      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	2210      	movs	r2, #16
 800303c:	409a      	lsls	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d018      	beq.n	8003082 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d024      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	e01f      	b.n	80030b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e016      	b.n	80030b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0208 	bic.w	r2, r2, #8
 800309e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	2220      	movs	r2, #32
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 808f 	beq.w	80031e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8087 	beq.w	80031e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	2220      	movs	r2, #32
 80030d8:	409a      	lsls	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d136      	bne.n	8003158 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0216 	bic.w	r2, r2, #22
 80030f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003108:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_DMA_IRQHandler+0x1da>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0208 	bic.w	r2, r2, #8
 8003128:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	223f      	movs	r2, #63	; 0x3f
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	2b00      	cmp	r3, #0
 800314c:	d07e      	beq.n	800324c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
        }
        return;
 8003156:	e079      	b.n	800324c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01d      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	2b00      	cmp	r3, #0
 800317a:	d031      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
 8003184:	e02c      	b.n	80031e0 <HAL_DMA_IRQHandler+0x2a0>
 8003186:	bf00      	nop
 8003188:	2000000c 	.word	0x2000000c
 800318c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e01e      	b.n	80031e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10f      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0210 	bic.w	r2, r2, #16
 80031be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d032      	beq.n	800324e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2205      	movs	r2, #5
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3301      	adds	r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	d307      	bcc.n	8003228 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f2      	bne.n	800320c <HAL_DMA_IRQHandler+0x2cc>
 8003226:	e000      	b.n	800322a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003228:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4798      	blx	r3
 800324a:	e000      	b.n	800324e <HAL_DMA_IRQHandler+0x30e>
        return;
 800324c:	bf00      	nop
    }
  }
}
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003262:	b2db      	uxtb	r3, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	3b10      	subs	r3, #16
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800328a:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <DMA_CalcBaseAndBitshift+0x68>)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d909      	bls.n	80032b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	1d1a      	adds	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	659a      	str	r2, [r3, #88]	; 0x58
 80032b0:	e007      	b.n	80032c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	aaaaaaab 	.word	0xaaaaaaab
 80032d8:	08009c24 	.word	0x08009c24

080032dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11f      	bne.n	8003336 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d856      	bhi.n	80033aa <DMA_CheckFifoParam+0xce>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <DMA_CheckFifoParam+0x28>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003315 	.word	0x08003315
 8003308:	08003327 	.word	0x08003327
 800330c:	08003315 	.word	0x08003315
 8003310:	080033ab 	.word	0x080033ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d046      	beq.n	80033ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003324:	e043      	b.n	80033ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332e:	d140      	bne.n	80033b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003334:	e03d      	b.n	80033b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333e:	d121      	bne.n	8003384 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d837      	bhi.n	80033b6 <DMA_CheckFifoParam+0xda>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <DMA_CheckFifoParam+0x70>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003363 	.word	0x08003363
 8003354:	0800335d 	.word	0x0800335d
 8003358:	08003375 	.word	0x08003375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e030      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d025      	beq.n	80033ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003372:	e022      	b.n	80033ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800337c:	d11f      	bne.n	80033be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003382:	e01c      	b.n	80033be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d903      	bls.n	8003392 <DMA_CheckFifoParam+0xb6>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d003      	beq.n	8003398 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003390:	e018      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      break;
 8003396:	e015      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e00b      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;
 80033aa:	bf00      	nop
 80033ac:	e00a      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ae:	bf00      	nop
 80033b0:	e008      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e006      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      break;
 80033b6:	bf00      	nop
 80033b8:	e004      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e002      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033be:	bf00      	nop
 80033c0:	e000      	b.n	80033c4 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
    }
  } 
  
  return status; 
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop

080033d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e16b      	b.n	80036c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 815a 	bne.w	80036c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d005      	beq.n	8003426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003422:	2b02      	cmp	r3, #2
 8003424:	d130      	bne.n	8003488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800345c:	2201      	movs	r2, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 0201 	and.w	r2, r3, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b03      	cmp	r3, #3
 8003492:	d017      	beq.n	80034c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d123      	bne.n	8003518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	08da      	lsrs	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3208      	adds	r2, #8
 8003512:	69b9      	ldr	r1, [r7, #24]
 8003514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80b4 	beq.w	80036c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <HAL_GPIO_Init+0x30c>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a5f      	ldr	r2, [pc, #380]	; (80036e0 <HAL_GPIO_Init+0x30c>)
 8003564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <HAL_GPIO_Init+0x30c>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003576:	4a5b      	ldr	r2, [pc, #364]	; (80036e4 <HAL_GPIO_Init+0x310>)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a52      	ldr	r2, [pc, #328]	; (80036e8 <HAL_GPIO_Init+0x314>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02b      	beq.n	80035fa <HAL_GPIO_Init+0x226>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a51      	ldr	r2, [pc, #324]	; (80036ec <HAL_GPIO_Init+0x318>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d025      	beq.n	80035f6 <HAL_GPIO_Init+0x222>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <HAL_GPIO_Init+0x31c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01f      	beq.n	80035f2 <HAL_GPIO_Init+0x21e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4f      	ldr	r2, [pc, #316]	; (80036f4 <HAL_GPIO_Init+0x320>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d019      	beq.n	80035ee <HAL_GPIO_Init+0x21a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4e      	ldr	r2, [pc, #312]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_GPIO_Init+0x216>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4d      	ldr	r2, [pc, #308]	; (80036fc <HAL_GPIO_Init+0x328>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00d      	beq.n	80035e6 <HAL_GPIO_Init+0x212>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4c      	ldr	r2, [pc, #304]	; (8003700 <HAL_GPIO_Init+0x32c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <HAL_GPIO_Init+0x20e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <HAL_GPIO_Init+0x330>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_GPIO_Init+0x20a>
 80035da:	2307      	movs	r3, #7
 80035dc:	e00e      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035de:	2308      	movs	r3, #8
 80035e0:	e00c      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035e2:	2306      	movs	r3, #6
 80035e4:	e00a      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035e6:	2305      	movs	r3, #5
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035fa:	2300      	movs	r3, #0
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800360c:	4935      	ldr	r1, [pc, #212]	; (80036e4 <HAL_GPIO_Init+0x310>)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_GPIO_Init+0x334>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_GPIO_Init+0x334>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_GPIO_Init+0x334>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <HAL_GPIO_Init+0x334>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <HAL_GPIO_Init+0x334>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_GPIO_Init+0x334>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_GPIO_Init+0x334>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_GPIO_Init+0x334>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3301      	adds	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	f67f ae90 	bls.w	80033f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40021400 	.word	0x40021400
 8003700:	40021800 	.word	0x40021800
 8003704:	40021c00 	.word	0x40021c00
 8003708:	40013c00 	.word	0x40013c00

0800370c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
 8003718:	4613      	mov	r3, r2
 800371a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800371c:	787b      	ldrb	r3, [r7, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003728:	e003      	b.n	8003732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800372a:	887b      	ldrh	r3, [r7, #2]
 800372c:	041a      	lsls	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	619a      	str	r2, [r3, #24]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e12b      	b.n	80039aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe fb6a 	bl	8001e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a4:	f002 fa5c 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a81      	ldr	r2, [pc, #516]	; (80039b4 <HAL_I2C_Init+0x274>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d807      	bhi.n	80037c4 <HAL_I2C_Init+0x84>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a80      	ldr	r2, [pc, #512]	; (80039b8 <HAL_I2C_Init+0x278>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e006      	b.n	80037d2 <HAL_I2C_Init+0x92>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a7d      	ldr	r2, [pc, #500]	; (80039bc <HAL_I2C_Init+0x27c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0e7      	b.n	80039aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a78      	ldr	r2, [pc, #480]	; (80039c0 <HAL_I2C_Init+0x280>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a6a      	ldr	r2, [pc, #424]	; (80039b4 <HAL_I2C_Init+0x274>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <HAL_I2C_Init+0xd4>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	e009      	b.n	8003828 <HAL_I2C_Init+0xe8>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a69      	ldr	r2, [pc, #420]	; (80039c4 <HAL_I2C_Init+0x284>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	3301      	adds	r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	495c      	ldr	r1, [pc, #368]	; (80039b4 <HAL_I2C_Init+0x274>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d819      	bhi.n	800387c <HAL_I2C_Init+0x13c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e59      	subs	r1, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb1 f3f3 	udiv	r3, r1, r3
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800385c:	400b      	ands	r3, r1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_I2C_Init+0x138>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e59      	subs	r1, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	e051      	b.n	800391c <HAL_I2C_Init+0x1dc>
 8003878:	2304      	movs	r3, #4
 800387a:	e04f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_I2C_Init+0x168>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_I2C_Init+0x18e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	0099      	lsls	r1, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x196>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_I2C_Init+0x1bc>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e58      	subs	r0, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6911      	ldr	r1, [r2, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	000186a0 	.word	0x000186a0
 80039b8:	001e847f 	.word	0x001e847f
 80039bc:	003d08ff 	.word	0x003d08ff
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d003      	beq.n	8003a00 <HAL_I2C_EV_IRQHandler+0x38>
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	f040 80c1 	bne.w	8003b82 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a20:	d003      	beq.n	8003a2a <HAL_I2C_EV_IRQHandler+0x62>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_EV_IRQHandler+0x66>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_I2C_EV_IRQHandler+0x68>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f000 8132 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x92>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 fc7b 	bl	8005348 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fd83 	bl	800455e <I2C_Master_SB>
 8003a58:	e092      	b.n	8003b80 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_I2C_EV_IRQHandler+0xb2>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	0a5b      	lsrs	r3, r3, #9
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fdf9 	bl	800466a <I2C_Master_ADD10>
 8003a78:	e082      	b.n	8003b80 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_I2C_EV_IRQHandler+0xd2>
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	0a5b      	lsrs	r3, r3, #9
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fe13 	bl	80046be <I2C_Master_ADDR>
 8003a98:	e072      	b.n	8003b80 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03b      	beq.n	8003b1e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab4:	f000 80f3 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	09db      	lsrs	r3, r3, #7
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	0a9b      	lsrs	r3, r3, #10
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9f3 	bl	8003ec8 <I2C_MasterTransmit_TXE>
 8003ae2:	e04d      	b.n	8003b80 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80d6 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	0a5b      	lsrs	r3, r3, #9
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80cf 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	2b21      	cmp	r3, #33	; 0x21
 8003b04:	d103      	bne.n	8003b0e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa7a 	bl	8004000 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0c:	e0c7      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	f040 80c4 	bne.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fae8 	bl	80040ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b1c:	e0bf      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	f000 80b7 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00f      	beq.n	8003b5c <HAL_I2C_EV_IRQHandler+0x194>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_I2C_EV_IRQHandler+0x194>
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fb5d 	bl	8004214 <I2C_MasterReceive_RXNE>
 8003b5a:	e011      	b.n	8003b80 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 809a 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	0a5b      	lsrs	r3, r3, #9
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8093 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fc06 	bl	800438a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7e:	e08e      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b80:	e08d      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	e007      	b.n	8003ba4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	0a5b      	lsrs	r3, r3, #9
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 ffc4 	bl	8004b5c <I2C_Slave_ADDR>
 8003bd4:	e066      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	0a5b      	lsrs	r3, r3, #9
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fffe 	bl	8004bf0 <I2C_Slave_STOPF>
 8003bf4:	e056      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bf6:	7bbb      	ldrb	r3, [r7, #14]
 8003bf8:	2b21      	cmp	r3, #33	; 0x21
 8003bfa:	d002      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0x23a>
 8003bfc:	7bbb      	ldrb	r3, [r7, #14]
 8003bfe:	2b29      	cmp	r3, #41	; 0x29
 8003c00:	d125      	bne.n	8003c4e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	09db      	lsrs	r3, r3, #7
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00f      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0x266>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	0a9b      	lsrs	r3, r3, #10
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0x266>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d103      	bne.n	8003c2e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 feda 	bl	80049e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c2c:	e039      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	089b      	lsrs	r3, r3, #2
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d033      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02d      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 ff07 	bl	8004a5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c4c:	e029      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00f      	beq.n	8003c7a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	0a9b      	lsrs	r3, r3, #10
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 ff12 	bl	8004a9c <I2C_SlaveReceive_RXNE>
 8003c78:	e014      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00e      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 ff40 	bl	8004b18 <I2C_SlaveReceive_BTF>
 8003c98:	e004      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	; 0x28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ccc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_I2C_ER_IRQHandler+0x4e>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cf6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	0a5b      	lsrs	r3, r3, #9
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <HAL_I2C_ER_IRQHandler+0x78>
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f043 0302 	orr.w	r3, r3, #2
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	0a9b      	lsrs	r3, r3, #10
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d03f      	beq.n	8003dae <HAL_I2C_ER_IRQHandler+0x104>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d039      	beq.n	8003dae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003d3a:	7efb      	ldrb	r3, [r7, #27]
 8003d3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d54:	7ebb      	ldrb	r3, [r7, #26]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d112      	bne.n	8003d80 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	2b21      	cmp	r3, #33	; 0x21
 8003d64:	d008      	beq.n	8003d78 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	2b29      	cmp	r3, #41	; 0x29
 8003d6a:	d005      	beq.n	8003d78 <HAL_I2C_ER_IRQHandler+0xce>
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	2b28      	cmp	r3, #40	; 0x28
 8003d70:	d106      	bne.n	8003d80 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b21      	cmp	r3, #33	; 0x21
 8003d76:	d103      	bne.n	8003d80 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f001 f869 	bl	8004e50 <I2C_Slave_AF>
 8003d7e:	e016      	b.n	8003dae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d92:	7efb      	ldrb	r3, [r7, #27]
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d002      	beq.n	8003d9e <HAL_I2C_ER_IRQHandler+0xf4>
 8003d98:	7efb      	ldrb	r3, [r7, #27]
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d107      	bne.n	8003dae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	0adb      	lsrs	r3, r3, #11
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00e      	beq.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x12e>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003dd6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f001 f8a0 	bl	8004f30 <I2C_ITError>
  }
}
 8003df0:	bf00      	nop
 8003df2:	3728      	adds	r7, #40	; 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
 8003e54:	4613      	mov	r3, r2
 8003e56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d150      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0xc8>
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b21      	cmp	r3, #33	; 0x21
 8003ef2:	d14d      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d01d      	beq.n	8003f36 <I2C_MasterTransmit_TXE+0x6e>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d01a      	beq.n	8003f36 <I2C_MasterTransmit_TXE+0x6e>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f06:	d016      	beq.n	8003f36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2211      	movs	r2, #17
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ff62 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f34:	e060      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d107      	bne.n	8003f80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff7d 	bl	8003e78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f7e:	e03b      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff35 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f8e:	e033      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b21      	cmp	r3, #33	; 0x21
 8003f94:	d005      	beq.n	8003fa2 <I2C_MasterTransmit_TXE+0xda>
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d12d      	bne.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b22      	cmp	r3, #34	; 0x22
 8003fa0:	d12a      	bne.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d108      	bne.n	8003fbe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fbc:	e01c      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d103      	bne.n	8003fd2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f88e 	bl	80040ec <I2C_MemoryTransmit_TXE_BTF>
}
 8003fd0:	e012      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ff6:	e7ff      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b21      	cmp	r3, #33	; 0x21
 8004018:	d164      	bne.n	80040e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004048:	e04c      	b.n	80040e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d01d      	beq.n	800408c <I2C_MasterTransmit_BTF+0x8c>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b20      	cmp	r3, #32
 8004054:	d01a      	beq.n	800408c <I2C_MasterTransmit_BTF+0x8c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405c:	d016      	beq.n	800408c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800406c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2211      	movs	r2, #17
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff feb7 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
}
 800408a:	e02b      	b.n	80040e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d107      	bne.n	80040d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fed2 	bl	8003e78 <HAL_I2C_MemTxCpltCallback>
}
 80040d4:	e006      	b.n	80040e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fe8a 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11d      	bne.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10b      	bne.n	8004124 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	b2da      	uxtb	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004122:	e073      	b.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	b29b      	uxth	r3, r3
 800412a:	121b      	asrs	r3, r3, #8
 800412c:	b2da      	uxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800413e:	e065      	b.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10b      	bne.n	8004160 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414c:	b2da      	uxtb	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800415e:	e055      	b.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	2b02      	cmp	r3, #2
 8004166:	d151      	bne.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b22      	cmp	r3, #34	; 0x22
 800416c:	d10d      	bne.n	800418a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004188:	e040      	b.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b21      	cmp	r3, #33	; 0x21
 8004198:	d112      	bne.n	80041c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041be:	e025      	b.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d120      	bne.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b21      	cmp	r3, #33	; 0x21
 80041ce:	d11d      	bne.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fe36 	bl	8003e78 <HAL_I2C_MemTxCpltCallback>
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b22      	cmp	r3, #34	; 0x22
 8004226:	f040 80ac 	bne.w	8004382 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d921      	bls.n	800427c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b03      	cmp	r3, #3
 8004266:	f040 808c 	bne.w	8004382 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800427a:	e082      	b.n	8004382 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2b02      	cmp	r3, #2
 8004282:	d075      	beq.n	8004370 <I2C_MasterReceive_RXNE+0x15c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d002      	beq.n	8004290 <I2C_MasterReceive_RXNE+0x7c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d16f      	bne.n	8004370 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 f827 	bl	80052e4 <I2C_WaitOnSTOPRequestThroughIT>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d142      	bne.n	8004322 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d10a      	bne.n	800430c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fdc1 	bl	8003e8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800430a:	e03a      	b.n	8004382 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2212      	movs	r2, #18
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fd76 	bl	8003e0c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004320:	e02f      	b.n	8004382 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004330:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fd99 	bl	8003ea0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800436e:	e008      	b.n	8004382 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437e:	605a      	str	r2, [r3, #4]
}
 8004380:	e7ff      	b.n	8004382 <I2C_MasterReceive_RXNE+0x16e>
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d11b      	bne.n	80043da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80043d8:	e0bd      	b.n	8004556 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d129      	bne.n	8004438 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d00a      	beq.n	8004410 <I2C_MasterReceive_BTF+0x86>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d007      	beq.n	8004410 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004436:	e08e      	b.n	8004556 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d176      	bne.n	8004530 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d002      	beq.n	800444e <I2C_MasterReceive_BTF+0xc4>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b10      	cmp	r3, #16
 800444c:	d108      	bne.n	8004460 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e019      	b.n	8004494 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d002      	beq.n	800446c <I2C_MasterReceive_BTF+0xe2>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d108      	bne.n	800447e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e00a      	b.n	8004494 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b10      	cmp	r3, #16
 8004482:	d007      	beq.n	8004494 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004492:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d10a      	bne.n	800451a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fcba 	bl	8003e8c <HAL_I2C_MemRxCpltCallback>
}
 8004518:	e01d      	b.n	8004556 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2212      	movs	r2, #18
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fc6f 	bl	8003e0c <HAL_I2C_MasterRxCpltCallback>
}
 800452e:	e012      	b.n	8004556 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d117      	bne.n	80045a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800458c:	e067      	b.n	800465e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]
}
 80045a0:	e05d      	b.n	800465e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045aa:	d133      	bne.n	8004614 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b21      	cmp	r3, #33	; 0x21
 80045b6:	d109      	bne.n	80045cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	e008      	b.n	80045de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d004      	beq.n	80045f0 <I2C_Master_SB+0x92>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d032      	beq.n	800465e <I2C_Master_SB+0x100>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d02d      	beq.n	800465e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004610:	605a      	str	r2, [r3, #4]
}
 8004612:	e024      	b.n	800465e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	b29b      	uxth	r3, r3
 8004622:	11db      	asrs	r3, r3, #7
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f063 030f 	orn	r3, r3, #15
 8004630:	b2da      	uxtb	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]
}
 8004638:	e011      	b.n	800465e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10d      	bne.n	800465e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	b29b      	uxth	r3, r3
 8004648:	11db      	asrs	r3, r3, #7
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0306 	and.w	r3, r3, #6
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f063 030e 	orn	r3, r3, #14
 8004656:	b2da      	uxtb	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	b2da      	uxtb	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <I2C_Master_ADD10+0x26>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00c      	beq.n	80046b2 <I2C_Master_ADD10+0x48>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b0:	605a      	str	r2, [r3, #4]
  }
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80046be:	b480      	push	{r7}
 80046c0:	b091      	sub	sp, #68	; 0x44
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b22      	cmp	r3, #34	; 0x22
 80046e6:	f040 8169 	bne.w	80049bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <I2C_Master_ADDR+0x54>
 80046f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d10b      	bne.n	8004712 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	633b      	str	r3, [r7, #48]	; 0x30
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	633b      	str	r3, [r7, #48]	; 0x30
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	633b      	str	r3, [r7, #48]	; 0x30
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	e160      	b.n	80049d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11d      	bne.n	8004756 <I2C_Master_ADDR+0x98>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004722:	d118      	bne.n	8004756 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004748:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	651a      	str	r2, [r3, #80]	; 0x50
 8004754:	e13e      	b.n	80049d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d113      	bne.n	8004788 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004760:	2300      	movs	r3, #0
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e115      	b.n	80049b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	f040 808a 	bne.w	80048a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800479a:	d137      	bne.n	800480c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ba:	d113      	bne.n	80047e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	e0e7      	b.n	80049b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e0d3      	b.n	80049b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	2b08      	cmp	r3, #8
 8004810:	d02e      	beq.n	8004870 <I2C_Master_ADDR+0x1b2>
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	2b20      	cmp	r3, #32
 8004816:	d02b      	beq.n	8004870 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	2b12      	cmp	r3, #18
 800481c:	d102      	bne.n	8004824 <I2C_Master_ADDR+0x166>
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	2b01      	cmp	r3, #1
 8004822:	d125      	bne.n	8004870 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	2b04      	cmp	r3, #4
 8004828:	d00e      	beq.n	8004848 <I2C_Master_ADDR+0x18a>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	2b02      	cmp	r3, #2
 800482e:	d00b      	beq.n	8004848 <I2C_Master_ADDR+0x18a>
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	2b10      	cmp	r3, #16
 8004834:	d008      	beq.n	8004848 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e007      	b.n	8004858 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004856:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	e0a1      	b.n	80049b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e085      	b.n	80049b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d14d      	bne.n	800494e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d016      	beq.n	80048e6 <I2C_Master_ADDR+0x228>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d013      	beq.n	80048e6 <I2C_Master_ADDR+0x228>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d010      	beq.n	80048e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e007      	b.n	80048f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004904:	d117      	bne.n	8004936 <I2C_Master_ADDR+0x278>
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800490c:	d00b      	beq.n	8004926 <I2C_Master_ADDR+0x268>
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b01      	cmp	r3, #1
 8004912:	d008      	beq.n	8004926 <I2C_Master_ADDR+0x268>
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	2b08      	cmp	r3, #8
 8004918:	d005      	beq.n	8004926 <I2C_Master_ADDR+0x268>
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2b10      	cmp	r3, #16
 800491e:	d002      	beq.n	8004926 <I2C_Master_ADDR+0x268>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b20      	cmp	r3, #32
 8004924:	d107      	bne.n	8004936 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004934:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e032      	b.n	80049b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800495c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496c:	d117      	bne.n	800499e <I2C_Master_ADDR+0x2e0>
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004974:	d00b      	beq.n	800498e <I2C_Master_ADDR+0x2d0>
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	2b01      	cmp	r3, #1
 800497a:	d008      	beq.n	800498e <I2C_Master_ADDR+0x2d0>
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	2b08      	cmp	r3, #8
 8004980:	d005      	beq.n	800498e <I2C_Master_ADDR+0x2d0>
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b10      	cmp	r3, #16
 8004986:	d002      	beq.n	800498e <I2C_Master_ADDR+0x2d0>
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	2b20      	cmp	r3, #32
 800498c:	d107      	bne.n	800499e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800499c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80049ba:	e00b      	b.n	80049d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	e7ff      	b.n	80049d4 <I2C_Master_ADDR+0x316>
 80049d4:	bf00      	nop
 80049d6:	3744      	adds	r7, #68	; 0x44
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02b      	beq.n	8004a52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d114      	bne.n	8004a52 <I2C_SlaveTransmit_TXE+0x72>
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b29      	cmp	r3, #41	; 0x29
 8004a2c:	d111      	bne.n	8004a52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2221      	movs	r2, #33	; 0x21
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2228      	movs	r2, #40	; 0x28
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff f9e7 	bl	8003e20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d011      	beq.n	8004a90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02c      	beq.n	8004b10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d114      	bne.n	8004b10 <I2C_SlaveReceive_RXNE+0x74>
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8004aea:	d111      	bne.n	8004b10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2222      	movs	r2, #34	; 0x22
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2228      	movs	r2, #40	; 0x28
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff f992 	bl	8003e34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b76:	2b28      	cmp	r3, #40	; 0x28
 8004b78:	d127      	bne.n	8004bca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	09db      	lsrs	r3, r3, #7
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	81bb      	strh	r3, [r7, #12]
 8004bac:	e002      	b.n	8004bb4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004bbc:	89ba      	ldrh	r2, [r7, #12]
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff f940 	bl	8003e48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004bc8:	e00e      	b.n	8004be8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4c:	d172      	bne.n	8004d34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b22      	cmp	r3, #34	; 0x22
 8004c52:	d002      	beq.n	8004c5a <I2C_Slave_STOPF+0x6a>
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b2a      	cmp	r3, #42	; 0x2a
 8004c58:	d135      	bne.n	8004cc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fade 	bl	8003254 <HAL_DMA_GetState>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d049      	beq.n	8004d32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <I2C_Slave_STOPF+0x258>)
 8004ca4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe f926 	bl	8002efc <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d03d      	beq.n	8004d32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc4:	e035      	b.n	8004d32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe faa8 	bl	8003254 <HAL_DMA_GetState>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d014      	beq.n	8004d34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	4a4e      	ldr	r2, [pc, #312]	; (8004e48 <I2C_Slave_STOPF+0x258>)
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe f8f0 	bl	8002efc <HAL_DMA_Abort_IT>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4798      	blx	r3
 8004d30:	e000      	b.n	8004d34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d03e      	beq.n	8004dbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d112      	bne.n	8004d72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d112      	bne.n	8004da6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8b3 	bl	8004f30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004dca:	e039      	b.n	8004e40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd0:	d109      	bne.n	8004de6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2228      	movs	r2, #40	; 0x28
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff f827 	bl	8003e34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b28      	cmp	r3, #40	; 0x28
 8004df0:	d111      	bne.n	8004e16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <I2C_Slave_STOPF+0x25c>)
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff f828 	bl	8003e64 <HAL_I2C_ListenCpltCallback>
}
 8004e14:	e014      	b.n	8004e40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	2b22      	cmp	r3, #34	; 0x22
 8004e1c:	d002      	beq.n	8004e24 <I2C_Slave_STOPF+0x234>
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b22      	cmp	r3, #34	; 0x22
 8004e22:	d10d      	bne.n	8004e40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fe fffa 	bl	8003e34 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	08005195 	.word	0x08005195
 8004e4c:	ffff0000 	.word	0xffff0000

08004e50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d002      	beq.n	8004e72 <I2C_Slave_AF+0x22>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d129      	bne.n	8004ec6 <I2C_Slave_AF+0x76>
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b28      	cmp	r3, #40	; 0x28
 8004e76:	d126      	bne.n	8004ec6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <I2C_Slave_AF+0xdc>)
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fe ffd0 	bl	8003e64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ec4:	e02e      	b.n	8004f24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b21      	cmp	r3, #33	; 0x21
 8004eca:	d126      	bne.n	8004f1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <I2C_Slave_AF+0xdc>)
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ef6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fe ff84 	bl	8003e20 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f18:	e004      	b.n	8004f24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f22:	615a      	str	r2, [r3, #20]
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	ffff0000 	.word	0xffff0000

08004f30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d002      	beq.n	8004f54 <I2C_ITError+0x24>
 8004f4e:	7bbb      	ldrb	r3, [r7, #14]
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d10a      	bne.n	8004f6a <I2C_ITError+0x3a>
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b22      	cmp	r3, #34	; 0x22
 8004f58:	d107      	bne.n	8004f6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f70:	2b28      	cmp	r3, #40	; 0x28
 8004f72:	d107      	bne.n	8004f84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2228      	movs	r2, #40	; 0x28
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f82:	e015      	b.n	8004fb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f92:	d00a      	beq.n	8004faa <I2C_ITError+0x7a>
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b60      	cmp	r3, #96	; 0x60
 8004f98:	d007      	beq.n	8004faa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	d162      	bne.n	8005086 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d020      	beq.n	8005020 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe2:	4a6a      	ldr	r2, [pc, #424]	; (800518c <I2C_ITError+0x25c>)
 8004fe4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd ff86 	bl	8002efc <HAL_DMA_Abort_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8089 	beq.w	800510a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800501a:	4610      	mov	r0, r2
 800501c:	4798      	blx	r3
 800501e:	e074      	b.n	800510a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	4a59      	ldr	r2, [pc, #356]	; (800518c <I2C_ITError+0x25c>)
 8005026:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	4618      	mov	r0, r3
 800502e:	f7fd ff65 	bl	8002efc <HAL_DMA_Abort_IT>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d068      	beq.n	800510a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d10b      	bne.n	800505e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	e041      	b.n	800510a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b60      	cmp	r3, #96	; 0x60
 8005090:	d125      	bne.n	80050de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d10b      	bne.n	80050c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fe feec 	bl	8003eb4 <HAL_I2C_AbortCpltCallback>
 80050dc:	e015      	b.n	800510a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d10b      	bne.n	8005104 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fe fecb 	bl	8003ea0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10e      	bne.n	8005138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005146:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b04      	cmp	r3, #4
 800515a:	d113      	bne.n	8005184 <I2C_ITError+0x254>
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b28      	cmp	r3, #40	; 0x28
 8005160:	d110      	bne.n	8005184 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <I2C_ITError+0x260>)
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fe fe70 	bl	8003e64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	08005195 	.word	0x08005195
 8005190:	ffff0000 	.word	0xffff0000

08005194 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051ae:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <I2C_DMAAbort+0x148>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	4a4a      	ldr	r2, [pc, #296]	; (80052e0 <I2C_DMAAbort+0x14c>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	0a1a      	lsrs	r2, r3, #8
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051da:	e00a      	b.n	80051f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3b01      	subs	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f0:	d0ea      	beq.n	80051c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	2200      	movs	r2, #0
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	2200      	movs	r2, #0
 8005210:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005220:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	2200      	movs	r2, #0
 8005236:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	2200      	movs	r2, #0
 8005246:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d10e      	bne.n	8005282 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7fe fe1a 	bl	8003eb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005280:	e027      	b.n	80052d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005288:	2b28      	cmp	r3, #40	; 0x28
 800528a:	d117      	bne.n	80052bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2228      	movs	r2, #40	; 0x28
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052ba:	e007      	b.n	80052cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7fe fde7 	bl	8003ea0 <HAL_I2C_ErrorCallback>
}
 80052d2:	bf00      	nop
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	2000000c 	.word	0x2000000c
 80052e0:	14f8b589 	.word	0x14f8b589

080052e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	08db      	lsrs	r3, r3, #3
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	0a1a      	lsrs	r2, r3, #8
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b01      	subs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e008      	b.n	8005334 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d0e9      	beq.n	8005306 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	2000000c 	.word	0x2000000c
 8005344:	14f8b589 	.word	0x14f8b589

08005348 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005358:	d103      	bne.n	8005362 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005360:	e007      	b.n	8005372 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800536a:	d102      	bne.n	8005372 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2208      	movs	r2, #8
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e267      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d075      	beq.n	800548a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800539e:	4b88      	ldr	r3, [pc, #544]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d00c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053aa:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d112      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c2:	d10b      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	4b7e      	ldr	r3, [pc, #504]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05b      	beq.n	8005488 <HAL_RCC_OscConfig+0x108>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d157      	bne.n	8005488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e242      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d106      	bne.n	80053f4 <HAL_RCC_OscConfig+0x74>
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a75      	ldr	r2, [pc, #468]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e01d      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0x98>
 80053fe:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6f      	ldr	r2, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b6d      	ldr	r3, [pc, #436]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6c      	ldr	r2, [pc, #432]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00b      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 8005418:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b66      	ldr	r3, [pc, #408]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800542a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fd fb70 	bl	8002b1c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005440:	f7fd fb6c 	bl	8002b1c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e207      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b5b      	ldr	r3, [pc, #364]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xc0>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fd fb5c 	bl	8002b1c <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005468:	f7fd fb58 	bl	8002b1c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1f3      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	4b51      	ldr	r3, [pc, #324]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0xe8>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005496:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d11c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d116      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e1c7      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4937      	ldr	r1, [pc, #220]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	e03a      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f0:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <HAL_RCC_OscConfig+0x244>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fd fb11 	bl	8002b1c <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054fe:	f7fd fb0d 	bl	8002b1c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e1a8      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4925      	ldr	r1, [pc, #148]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <HAL_RCC_OscConfig+0x244>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fd faf0 	bl	8002b1c <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005540:	f7fd faec 	bl	8002b1c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e187      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d016      	beq.n	80055a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <HAL_RCC_OscConfig+0x248>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005578:	f7fd fad0 	bl	8002b1c <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005580:	f7fd facc 	bl	8002b1c <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e167      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x200>
 800559e:	e01b      	b.n	80055d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <HAL_RCC_OscConfig+0x248>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a6:	f7fd fab9 	bl	8002b1c <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ac:	e00e      	b.n	80055cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ae:	f7fd fab5 	bl	8002b1c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d907      	bls.n	80055cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e150      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80055c0:	40023800 	.word	0x40023800
 80055c4:	42470000 	.word	0x42470000
 80055c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b88      	ldr	r3, [pc, #544]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ea      	bne.n	80055ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8097 	beq.w	8005714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b81      	ldr	r3, [pc, #516]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b7d      	ldr	r3, [pc, #500]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4a7c      	ldr	r2, [pc, #496]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	; 0x40
 8005606:	4b7a      	ldr	r3, [pc, #488]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b77      	ldr	r3, [pc, #476]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d118      	bne.n	8005654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fd fa75 	bl	8002b1c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fd fa71 	bl	8002b1c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e10c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x2ea>
 800565c:	4b64      	ldr	r3, [pc, #400]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a63      	ldr	r2, [pc, #396]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
 8005668:	e01c      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b05      	cmp	r3, #5
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x30c>
 8005672:	4b5f      	ldr	r3, [pc, #380]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a5e      	ldr	r2, [pc, #376]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
 800567e:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a5b      	ldr	r2, [pc, #364]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800568c:	4b58      	ldr	r3, [pc, #352]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a57      	ldr	r2, [pc, #348]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a54      	ldr	r2, [pc, #336]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569e:	f023 0304 	bic.w	r3, r3, #4
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fd fa36 	bl	8002b1c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fd fa32 	bl	8002b1c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0cb      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	4b49      	ldr	r3, [pc, #292]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ee      	beq.n	80056b4 <HAL_RCC_OscConfig+0x334>
 80056d6:	e014      	b.n	8005702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fd fa20 	bl	8002b1c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fd fa1c 	bl	8002b1c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0b5      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	4b3e      	ldr	r3, [pc, #248]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ee      	bne.n	80056e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005708:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	4a38      	ldr	r2, [pc, #224]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a1 	beq.w	8005860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800571e:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b08      	cmp	r3, #8
 8005728:	d05c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d141      	bne.n	80057b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <HAL_RCC_OscConfig+0x478>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fd f9f0 	bl	8002b1c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005740:	f7fd f9ec 	bl	8002b1c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e087      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	491b      	ldr	r1, [pc, #108]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <HAL_RCC_OscConfig+0x478>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fd f9c5 	bl	8002b1c <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005796:	f7fd f9c1 	bl	8002b1c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e05c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x416>
 80057b4:	e054      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <HAL_RCC_OscConfig+0x478>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fd f9ae 	bl	8002b1c <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fd f9aa 	bl	8002b1c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e045      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x444>
 80057e2:	e03d      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e038      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x4ec>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d028      	beq.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d121      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11a      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0cc      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b68      	ldr	r3, [pc, #416]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90c      	bls.n	80058ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b63      	ldr	r3, [pc, #396]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0b8      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a58      	ldr	r2, [pc, #352]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	494d      	ldr	r1, [pc, #308]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d044      	beq.n	8005990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d119      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e07f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d003      	beq.n	800592e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e06f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e067      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4934      	ldr	r1, [pc, #208]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005960:	f7fd f8dc 	bl	8002b1c <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	e00a      	b.n	800597e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005968:	f7fd f8d8 	bl	8002b1c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e04f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 020c 	and.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d1eb      	bne.n	8005968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20c      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b22      	ldr	r3, [pc, #136]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e032      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4916      	ldr	r1, [pc, #88]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490e      	ldr	r1, [pc, #56]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059f6:	f000 f821 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490a      	ldr	r1, [pc, #40]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd f83c 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40023c00 	.word	0x40023c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	08009c0c 	.word	0x08009c0c
 8005a34:	2000000c 	.word	0x2000000c
 8005a38:	20000010 	.word	0x20000010

08005a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b094      	sub	sp, #80	; 0x50
 8005a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	; 0x44
 8005a48:	2300      	movs	r3, #0
 8005a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a54:	4b79      	ldr	r3, [pc, #484]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d00d      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x40>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f200 80e1 	bhi.w	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x34>
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6e:	e0db      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b73      	ldr	r3, [pc, #460]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a74:	e0db      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a76:	4b73      	ldr	r3, [pc, #460]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a7a:	e0d8      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a86:	4b6d      	ldr	r3, [pc, #436]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d063      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a92:	4b6a      	ldr	r3, [pc, #424]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f04f 0100 	mov.w	r1, #0
 8005aba:	0159      	lsls	r1, r3, #5
 8005abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac0:	0150      	lsls	r0, r2, #5
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	1a51      	subs	r1, r2, r1
 8005aca:	6139      	str	r1, [r7, #16]
 8005acc:	4629      	mov	r1, r5
 8005ace:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	018b      	lsls	r3, r1, #6
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aea:	4651      	mov	r1, sl
 8005aec:	018a      	lsls	r2, r1, #6
 8005aee:	4651      	mov	r1, sl
 8005af0:	ebb2 0801 	subs.w	r8, r2, r1
 8005af4:	4659      	mov	r1, fp
 8005af6:	eb63 0901 	sbc.w	r9, r3, r1
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b0e:	4690      	mov	r8, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	eb18 0303 	adds.w	r3, r8, r3
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	eb49 0303 	adc.w	r3, r9, r3
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b2e:	4629      	mov	r1, r5
 8005b30:	024b      	lsls	r3, r1, #9
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b38:	4621      	mov	r1, r4
 8005b3a:	024a      	lsls	r2, r1, #9
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b42:	2200      	movs	r2, #0
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b4c:	f7fa fb3c 	bl	80001c8 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	e058      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5a:	4b38      	ldr	r3, [pc, #224]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	4611      	mov	r1, r2
 8005b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	f04f 0000 	mov.w	r0, #0
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b86:	0150      	lsls	r0, r2, #5
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b92:	4649      	mov	r1, r9
 8005b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bac:	ebb2 040a 	subs.w	r4, r2, sl
 8005bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	00eb      	lsls	r3, r5, #3
 8005bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc2:	00e2      	lsls	r2, r4, #3
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	4643      	mov	r3, r8
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb45 0303 	adc.w	r3, r5, r3
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	61fa      	str	r2, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	f7fa fae2 	bl	80001c8 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4613      	mov	r3, r2
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3750      	adds	r7, #80	; 0x50
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	007a1200 	.word	0x007a1200

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2000000c 	.word	0x2000000c

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	08009c1c 	.word	0x08009c1c

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c8c:	f7ff ffdc 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	08009c1c 	.word	0x08009c1c

08005cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07b      	b.n	8005dba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd2:	d009      	beq.n	8005ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	61da      	str	r2, [r3, #28]
 8005cda:	e005      	b.n	8005ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fc fad8 	bl	80022b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	ea42 0103 	orr.w	r1, r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 0104 	and.w	r1, r3, #4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0210 	and.w	r2, r3, #16
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	603b      	str	r3, [r7, #0]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_SPI_Transmit+0x22>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e126      	b.n	8006032 <HAL_SPI_Transmit+0x270>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dec:	f7fc fe96 	bl	8002b1c <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
 8005e04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e06:	e10b      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x52>
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e18:	e102      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	d10f      	bne.n	8005e82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d007      	beq.n	8005ea0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d14b      	bne.n	8005f42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_SPI_Transmit+0xf6>
 8005eb2:	8afb      	ldrh	r3, [r7, #22]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d13e      	bne.n	8005f36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005edc:	e02b      	b.n	8005f36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d112      	bne.n	8005f12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	1c9a      	adds	r2, r3, #2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f10:	e011      	b.n	8005f36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f12:	f7fc fe03 	bl	8002b1c <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d803      	bhi.n	8005f2a <HAL_SPI_Transmit+0x168>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Transmit+0x16e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f34:	e074      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ce      	bne.n	8005ede <HAL_SPI_Transmit+0x11c>
 8005f40:	e04c      	b.n	8005fdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x18e>
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d140      	bne.n	8005fd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f76:	e02c      	b.n	8005fd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fac:	e011      	b.n	8005fd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fc fdb5 	bl	8002b1c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_Transmit+0x204>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_Transmit+0x20a>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fd0:	e026      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1cd      	bne.n	8005f78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fce9 	bl	80069b8 <SPI_EndRxTxTransaction>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e000      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
  }

error:
 800601e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006030:	7ffb      	ldrb	r3, [r7, #31]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af02      	add	r7, sp, #8
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006056:	d112      	bne.n	800607e <HAL_SPI_Receive+0x44>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10e      	bne.n	800607e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2204      	movs	r2, #4
 8006064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f8f1 	bl	800625c <HAL_SPI_TransmitReceive>
 800607a:	4603      	mov	r3, r0
 800607c:	e0ea      	b.n	8006254 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_SPI_Receive+0x52>
 8006088:	2302      	movs	r3, #2
 800608a:	e0e3      	b.n	8006254 <HAL_SPI_Receive+0x21a>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006094:	f7fc fd42 	bl	8002b1c <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
 80060a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060aa:	e0ca      	b.n	8006242 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_Receive+0x7e>
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060bc:	e0c1      	b.n	8006242 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2204      	movs	r2, #4
 80060c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006104:	d10f      	bne.n	8006126 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006114:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006124:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d007      	beq.n	8006144 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006142:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d162      	bne.n	8006212 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800614c:	e02e      	b.n	80061ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d115      	bne.n	8006188 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f103 020c 	add.w	r2, r3, #12
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006186:	e011      	b.n	80061ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006188:	f7fc fcc8 	bl	8002b1c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d803      	bhi.n	80061a0 <HAL_SPI_Receive+0x166>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d102      	bne.n	80061a6 <HAL_SPI_Receive+0x16c>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061aa:	e04a      	b.n	8006242 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1cb      	bne.n	800614e <HAL_SPI_Receive+0x114>
 80061b6:	e031      	b.n	800621c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d113      	bne.n	80061ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	b292      	uxth	r2, r2
 80061d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ec:	e011      	b.n	8006212 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ee:	f7fc fc95 	bl	8002b1c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d803      	bhi.n	8006206 <HAL_SPI_Receive+0x1cc>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d102      	bne.n	800620c <HAL_SPI_Receive+0x1d2>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006210:	e017      	b.n	8006242 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1cd      	bne.n	80061b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fb63 	bl	80068ec <SPI_EndRxTransaction>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
 800623e:	e000      	b.n	8006242 <HAL_SPI_Receive+0x208>
  }

error :
 8006240:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800626a:	2301      	movs	r3, #1
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x26>
 800627e:	2302      	movs	r3, #2
 8006280:	e18a      	b.n	8006598 <HAL_SPI_TransmitReceive+0x33c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628a:	f7fc fc47 	bl	8002b1c <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062a0:	887b      	ldrh	r3, [r7, #2]
 80062a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d00f      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x70>
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b2:	d107      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x68>
 80062bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d003      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
 80062c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062ca:	e15b      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_SPI_TransmitReceive+0x82>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_TransmitReceive+0x82>
 80062d8:	887b      	ldrh	r3, [r7, #2]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d103      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062e4:	e14e      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d003      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2205      	movs	r2, #5
 80062f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	887a      	ldrh	r2, [r7, #2]
 800630a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	887a      	ldrh	r2, [r7, #2]
 800631c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	887a      	ldrh	r2, [r7, #2]
 8006322:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d007      	beq.n	800634e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800634c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d178      	bne.n	800644a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x10a>
 8006360:	8b7b      	ldrh	r3, [r7, #26]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d166      	bne.n	8006434 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	881a      	ldrh	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800638a:	e053      	b.n	8006434 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d11b      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x176>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d016      	beq.n	80063d2 <HAL_SPI_TransmitReceive+0x176>
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d113      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	881a      	ldrh	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d119      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x1b8>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d014      	beq.n	8006414 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	b292      	uxth	r2, r2
 80063f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006410:	2301      	movs	r3, #1
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006414:	f7fc fb82 	bl	8002b1c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006420:	429a      	cmp	r2, r3
 8006422:	d807      	bhi.n	8006434 <HAL_SPI_TransmitReceive+0x1d8>
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d003      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006432:	e0a7      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1a6      	bne.n	800638c <HAL_SPI_TransmitReceive+0x130>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1a1      	bne.n	800638c <HAL_SPI_TransmitReceive+0x130>
 8006448:	e07c      	b.n	8006544 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x1fc>
 8006452:	8b7b      	ldrh	r3, [r7, #26]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d16b      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	7812      	ldrb	r2, [r2, #0]
 8006464:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647e:	e057      	b.n	8006530 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d11c      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x26c>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x26c>
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d114      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d119      	bne.n	800650a <HAL_SPI_TransmitReceive+0x2ae>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d014      	beq.n	800650a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006506:	2301      	movs	r3, #1
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800650a:	f7fc fb07 	bl	8002b1c <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006516:	429a      	cmp	r2, r3
 8006518:	d803      	bhi.n	8006522 <HAL_SPI_TransmitReceive+0x2c6>
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d102      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x2cc>
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800652e:	e029      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1a2      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x224>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d19d      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa35 	bl	80069b8 <SPI_EndRxTxTransaction>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d006      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006560:	e010      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	e000      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006582:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006594:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006598:	4618      	mov	r0, r3
 800659a:	3730      	adds	r7, #48	; 0x30
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	099b      	lsrs	r3, r3, #6
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
    return;
 80065e2:	e0d7      	b.n	8006794 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_SPI_IRQHandler+0x66>
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	09db      	lsrs	r3, r3, #7
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
    return;
 8006604:	e0c6      	b.n	8006794 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10c      	bne.n	800662c <HAL_SPI_IRQHandler+0x8c>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	099b      	lsrs	r3, r3, #6
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80b4 	beq.w	8006794 <HAL_SPI_IRQHandler+0x1f4>
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80ad 	beq.w	8006794 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d023      	beq.n	800668e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d011      	beq.n	8006676 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f043 0204 	orr.w	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	e00b      	b.n	800668e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	693b      	ldr	r3, [r7, #16]
        return;
 800668c:	e082      	b.n	8006794 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d014      	beq.n	80066c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f043 0201 	orr.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d4:	f043 0208 	orr.w	r2, r3, #8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066dc:	2300      	movs	r3, #0
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d04f      	beq.n	8006792 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006700:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <HAL_SPI_IRQHandler+0x17e>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d034      	beq.n	8006788 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0203 	bic.w	r2, r2, #3
 800672c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d011      	beq.n	800675a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	4a18      	ldr	r2, [pc, #96]	; (800679c <HAL_SPI_IRQHandler+0x1fc>)
 800673c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	4618      	mov	r0, r3
 8006744:	f7fc fbda 	bl	8002efc <HAL_DMA_Abort_IT>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675e:	2b00      	cmp	r3, #0
 8006760:	d016      	beq.n	8006790 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	4a0d      	ldr	r2, [pc, #52]	; (800679c <HAL_SPI_IRQHandler+0x1fc>)
 8006768:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	4618      	mov	r0, r3
 8006770:	f7fc fbc4 	bl	8002efc <HAL_DMA_Abort_IT>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006786:	e003      	b.n	8006790 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f809 	bl	80067a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800678e:	e000      	b.n	8006792 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006790:	bf00      	nop
    return;
 8006792:	bf00      	nop
  }
}
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	080067b5 	.word	0x080067b5

080067a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff ffe6 	bl	80067a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067ec:	f7fc f996 	bl	8002b1c <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067fc:	f7fc f98e 	bl	8002b1c <HAL_GetTick>
 8006800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006802:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	015b      	lsls	r3, r3, #5
 8006808:	0d1b      	lsrs	r3, r3, #20
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	fb02 f303 	mul.w	r3, r2, r3
 8006810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006812:	e054      	b.n	80068be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d050      	beq.n	80068be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800681c:	f7fc f97e 	bl	8002b1c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	429a      	cmp	r2, r3
 800682a:	d902      	bls.n	8006832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d13d      	bne.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684a:	d111      	bne.n	8006870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	d004      	beq.n	8006860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d107      	bne.n	8006870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006878:	d10f      	bne.n	800689a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e017      	b.n	80068de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4013      	ands	r3, r2
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	bf0c      	ite	eq
 80068ce:	2301      	moveq	r3, #1
 80068d0:	2300      	movne	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d19b      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	2000000c 	.word	0x2000000c

080068ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006900:	d111      	bne.n	8006926 <SPI_EndRxTransaction+0x3a>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690a:	d004      	beq.n	8006916 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006914:	d107      	bne.n	8006926 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006924:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800692e:	d12a      	bne.n	8006986 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d012      	beq.n	8006960 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f7ff ff49 	bl	80067dc <SPI_WaitFlagStateUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02d      	beq.n	80069ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e026      	b.n	80069ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	2101      	movs	r1, #1
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff ff36 	bl	80067dc <SPI_WaitFlagStateUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e013      	b.n	80069ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2200      	movs	r2, #0
 800698e:	2101      	movs	r1, #1
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff ff23 	bl	80067dc <SPI_WaitFlagStateUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	f043 0220 	orr.w	r2, r3, #32
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e000      	b.n	80069ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <SPI_EndRxTxTransaction+0x7c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <SPI_EndRxTxTransaction+0x80>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	0d5b      	lsrs	r3, r3, #21
 80069d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e2:	d112      	bne.n	8006a0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fef4 	bl	80067dc <SPI_WaitFlagStateUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e00f      	b.n	8006a2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d0f2      	beq.n	8006a0a <SPI_EndRxTxTransaction+0x52>
 8006a24:	e000      	b.n	8006a28 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a26:	bf00      	nop
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	2000000c 	.word	0x2000000c
 8006a38:	165e9f81 	.word	0x165e9f81

08006a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e041      	b.n	8006ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fb fe56 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f000 fa6e 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e041      	b.n	8006b70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fb fde5 	bl	80026d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fa1f 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d122      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0202 	mvn.w	r2, #2
 8006ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9b0 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006bc0:	e005      	b.n	8006bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f9a2 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f9b3 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d122      	bne.n	8006c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d11b      	bne.n	8006c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0204 	mvn.w	r2, #4
 8006bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f986 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006c14:	e005      	b.n	8006c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f978 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f989 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	d122      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d11b      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0208 	mvn.w	r2, #8
 8006c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2204      	movs	r2, #4
 8006c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f95c 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006c68:	e005      	b.n	8006c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f94e 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f95f 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d122      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0210 	mvn.w	r2, #16
 8006ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f932 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e005      	b.n	8006cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f924 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f935 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10e      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d107      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0201 	mvn.w	r2, #1
 8006cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb fc24 	bl	8002544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d06:	2b80      	cmp	r3, #128	; 0x80
 8006d08:	d10e      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	d107      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fbf0 	bl	8007508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d32:	2b40      	cmp	r3, #64	; 0x40
 8006d34:	d10e      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d107      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f8fa 	bl	8006f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d10e      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d107      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0220 	mvn.w	r2, #32
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fbba 	bl	80074f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e0ae      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	f200 809f 	bhi.w	8006ef4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006df1 	.word	0x08006df1
 8006dc0:	08006ef5 	.word	0x08006ef5
 8006dc4:	08006ef5 	.word	0x08006ef5
 8006dc8:	08006ef5 	.word	0x08006ef5
 8006dcc:	08006e31 	.word	0x08006e31
 8006dd0:	08006ef5 	.word	0x08006ef5
 8006dd4:	08006ef5 	.word	0x08006ef5
 8006dd8:	08006ef5 	.word	0x08006ef5
 8006ddc:	08006e73 	.word	0x08006e73
 8006de0:	08006ef5 	.word	0x08006ef5
 8006de4:	08006ef5 	.word	0x08006ef5
 8006de8:	08006ef5 	.word	0x08006ef5
 8006dec:	08006eb3 	.word	0x08006eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f950 	bl	800709c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0208 	orr.w	r2, r2, #8
 8006e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6999      	ldr	r1, [r3, #24]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	619a      	str	r2, [r3, #24]
      break;
 8006e2e:	e064      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f9a0 	bl	800717c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6999      	ldr	r1, [r3, #24]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	021a      	lsls	r2, r3, #8
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	619a      	str	r2, [r3, #24]
      break;
 8006e70:	e043      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f9f5 	bl	8007268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0208 	orr.w	r2, r2, #8
 8006e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0204 	bic.w	r2, r2, #4
 8006e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69d9      	ldr	r1, [r3, #28]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	61da      	str	r2, [r3, #28]
      break;
 8006eb0:	e023      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa49 	bl	8007350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69d9      	ldr	r1, [r3, #28]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	021a      	lsls	r2, r3, #8
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	61da      	str	r2, [r3, #28]
      break;
 8006ef2:	e002      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7a:	d00f      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3d      	ldr	r2, [pc, #244]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3c      	ldr	r2, [pc, #240]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3b      	ldr	r2, [pc, #236]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3a      	ldr	r2, [pc, #232]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d02b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d027      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d023      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d017      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a28      	ldr	r2, [pc, #160]	; (8007084 <TIM_Base_SetConfig+0x128>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a27      	ldr	r2, [pc, #156]	; (8007088 <TIM_Base_SetConfig+0x12c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	; (800708c <TIM_Base_SetConfig+0x130>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	; (8007090 <TIM_Base_SetConfig+0x134>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d007      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a24      	ldr	r2, [pc, #144]	; (8007094 <TIM_Base_SetConfig+0x138>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <TIM_Base_SetConfig+0x13c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d108      	bne.n	8007020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40010400 	.word	0x40010400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	40001800 	.word	0x40001800
 8007094:	40001c00 	.word	0x40001c00
 8007098:	40002000 	.word	0x40002000

0800709c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f023 0302 	bic.w	r3, r3, #2
 80070e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a20      	ldr	r2, [pc, #128]	; (8007174 <TIM_OC1_SetConfig+0xd8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_OC1_SetConfig+0x64>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a1f      	ldr	r2, [pc, #124]	; (8007178 <TIM_OC1_SetConfig+0xdc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10c      	bne.n	800711a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f023 0308 	bic.w	r3, r3, #8
 8007106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 0304 	bic.w	r3, r3, #4
 8007118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a15      	ldr	r2, [pc, #84]	; (8007174 <TIM_OC1_SetConfig+0xd8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_OC1_SetConfig+0x8e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a14      	ldr	r2, [pc, #80]	; (8007178 <TIM_OC1_SetConfig+0xdc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d111      	bne.n	800714e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40010000 	.word	0x40010000
 8007178:	40010400 	.word	0x40010400

0800717c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f023 0210 	bic.w	r2, r3, #16
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0320 	bic.w	r3, r3, #32
 80071c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a22      	ldr	r2, [pc, #136]	; (8007260 <TIM_OC2_SetConfig+0xe4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC2_SetConfig+0x68>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a21      	ldr	r2, [pc, #132]	; (8007264 <TIM_OC2_SetConfig+0xe8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10d      	bne.n	8007200 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a17      	ldr	r2, [pc, #92]	; (8007260 <TIM_OC2_SetConfig+0xe4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC2_SetConfig+0x94>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a16      	ldr	r2, [pc, #88]	; (8007264 <TIM_OC2_SetConfig+0xe8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d113      	bne.n	8007238 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40010400 	.word	0x40010400

08007268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a21      	ldr	r2, [pc, #132]	; (8007348 <TIM_OC3_SetConfig+0xe0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_OC3_SetConfig+0x66>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <TIM_OC3_SetConfig+0xe4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d10d      	bne.n	80072ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a16      	ldr	r2, [pc, #88]	; (8007348 <TIM_OC3_SetConfig+0xe0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC3_SetConfig+0x92>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a15      	ldr	r2, [pc, #84]	; (800734c <TIM_OC3_SetConfig+0xe4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d113      	bne.n	8007322 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	621a      	str	r2, [r3, #32]
}
 800733c:	bf00      	nop
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40010000 	.word	0x40010000
 800734c:	40010400 	.word	0x40010400

08007350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a12      	ldr	r2, [pc, #72]	; (80073f4 <TIM_OC4_SetConfig+0xa4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC4_SetConfig+0x68>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <TIM_OC4_SetConfig+0xa8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d109      	bne.n	80073cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	019b      	lsls	r3, r3, #6
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40010400 	.word	0x40010400

080073fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007410:	2302      	movs	r3, #2
 8007412:	e05a      	b.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d022      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d01d      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a17      	ldr	r2, [pc, #92]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10c      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40010400 	.word	0x40010400
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40001800 	.word	0x40001800

080074f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e03f      	b.n	80075ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fb f9ba 	bl	80028bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2224      	movs	r2, #36	; 0x24
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800755e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f829 	bl	80075b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075bc:	b0c0      	sub	sp, #256	; 0x100
 80075be:	af00      	add	r7, sp, #0
 80075c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	68d9      	ldr	r1, [r3, #12]
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	ea40 0301 	orr.w	r3, r0, r1
 80075e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	431a      	orrs	r2, r3
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007610:	f021 010c 	bic.w	r1, r1, #12
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800761e:	430b      	orrs	r3, r1
 8007620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007632:	6999      	ldr	r1, [r3, #24]
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	ea40 0301 	orr.w	r3, r0, r1
 800763e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b8f      	ldr	r3, [pc, #572]	; (8007884 <UART_SetConfig+0x2cc>)
 8007648:	429a      	cmp	r2, r3
 800764a:	d005      	beq.n	8007658 <UART_SetConfig+0xa0>
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b8d      	ldr	r3, [pc, #564]	; (8007888 <UART_SetConfig+0x2d0>)
 8007654:	429a      	cmp	r2, r3
 8007656:	d104      	bne.n	8007662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007658:	f7fe fb16 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 800765c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007660:	e003      	b.n	800766a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007662:	f7fe fafd 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 8007666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007674:	f040 810c 	bne.w	8007890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800767c:	2200      	movs	r2, #0
 800767e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800768a:	4622      	mov	r2, r4
 800768c:	462b      	mov	r3, r5
 800768e:	1891      	adds	r1, r2, r2
 8007690:	65b9      	str	r1, [r7, #88]	; 0x58
 8007692:	415b      	adcs	r3, r3
 8007694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800769a:	4621      	mov	r1, r4
 800769c:	eb12 0801 	adds.w	r8, r2, r1
 80076a0:	4629      	mov	r1, r5
 80076a2:	eb43 0901 	adc.w	r9, r3, r1
 80076a6:	f04f 0200 	mov.w	r2, #0
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ba:	4690      	mov	r8, r2
 80076bc:	4699      	mov	r9, r3
 80076be:	4623      	mov	r3, r4
 80076c0:	eb18 0303 	adds.w	r3, r8, r3
 80076c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076c8:	462b      	mov	r3, r5
 80076ca:	eb49 0303 	adc.w	r3, r9, r3
 80076ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076e6:	460b      	mov	r3, r1
 80076e8:	18db      	adds	r3, r3, r3
 80076ea:	653b      	str	r3, [r7, #80]	; 0x50
 80076ec:	4613      	mov	r3, r2
 80076ee:	eb42 0303 	adc.w	r3, r2, r3
 80076f2:	657b      	str	r3, [r7, #84]	; 0x54
 80076f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076fc:	f7f8 fd64 	bl	80001c8 <__aeabi_uldivmod>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4b61      	ldr	r3, [pc, #388]	; (800788c <UART_SetConfig+0x2d4>)
 8007706:	fba3 2302 	umull	r2, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	011c      	lsls	r4, r3, #4
 800770e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007712:	2200      	movs	r2, #0
 8007714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800771c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007720:	4642      	mov	r2, r8
 8007722:	464b      	mov	r3, r9
 8007724:	1891      	adds	r1, r2, r2
 8007726:	64b9      	str	r1, [r7, #72]	; 0x48
 8007728:	415b      	adcs	r3, r3
 800772a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800772c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007730:	4641      	mov	r1, r8
 8007732:	eb12 0a01 	adds.w	sl, r2, r1
 8007736:	4649      	mov	r1, r9
 8007738:	eb43 0b01 	adc.w	fp, r3, r1
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800774c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007750:	4692      	mov	sl, r2
 8007752:	469b      	mov	fp, r3
 8007754:	4643      	mov	r3, r8
 8007756:	eb1a 0303 	adds.w	r3, sl, r3
 800775a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800775e:	464b      	mov	r3, r9
 8007760:	eb4b 0303 	adc.w	r3, fp, r3
 8007764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800777c:	460b      	mov	r3, r1
 800777e:	18db      	adds	r3, r3, r3
 8007780:	643b      	str	r3, [r7, #64]	; 0x40
 8007782:	4613      	mov	r3, r2
 8007784:	eb42 0303 	adc.w	r3, r2, r3
 8007788:	647b      	str	r3, [r7, #68]	; 0x44
 800778a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800778e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007792:	f7f8 fd19 	bl	80001c8 <__aeabi_uldivmod>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4611      	mov	r1, r2
 800779c:	4b3b      	ldr	r3, [pc, #236]	; (800788c <UART_SetConfig+0x2d4>)
 800779e:	fba3 2301 	umull	r2, r3, r3, r1
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	2264      	movs	r2, #100	; 0x64
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	1acb      	subs	r3, r1, r3
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077b2:	4b36      	ldr	r3, [pc, #216]	; (800788c <UART_SetConfig+0x2d4>)
 80077b4:	fba3 2302 	umull	r2, r3, r3, r2
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077c0:	441c      	add	r4, r3
 80077c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	1891      	adds	r1, r2, r2
 80077da:	63b9      	str	r1, [r7, #56]	; 0x38
 80077dc:	415b      	adcs	r3, r3
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077e4:	4641      	mov	r1, r8
 80077e6:	1851      	adds	r1, r2, r1
 80077e8:	6339      	str	r1, [r7, #48]	; 0x30
 80077ea:	4649      	mov	r1, r9
 80077ec:	414b      	adcs	r3, r1
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077fc:	4659      	mov	r1, fp
 80077fe:	00cb      	lsls	r3, r1, #3
 8007800:	4651      	mov	r1, sl
 8007802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007806:	4651      	mov	r1, sl
 8007808:	00ca      	lsls	r2, r1, #3
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	4603      	mov	r3, r0
 8007810:	4642      	mov	r2, r8
 8007812:	189b      	adds	r3, r3, r2
 8007814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007818:	464b      	mov	r3, r9
 800781a:	460a      	mov	r2, r1
 800781c:	eb42 0303 	adc.w	r3, r2, r3
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007838:	460b      	mov	r3, r1
 800783a:	18db      	adds	r3, r3, r3
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
 800783e:	4613      	mov	r3, r2
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800784a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800784e:	f7f8 fcbb 	bl	80001c8 <__aeabi_uldivmod>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4b0d      	ldr	r3, [pc, #52]	; (800788c <UART_SetConfig+0x2d4>)
 8007858:	fba3 1302 	umull	r1, r3, r3, r2
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	2164      	movs	r1, #100	; 0x64
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	3332      	adds	r3, #50	; 0x32
 800786a:	4a08      	ldr	r2, [pc, #32]	; (800788c <UART_SetConfig+0x2d4>)
 800786c:	fba2 2303 	umull	r2, r3, r2, r3
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	f003 0207 	and.w	r2, r3, #7
 8007876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4422      	add	r2, r4
 800787e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007880:	e105      	b.n	8007a8e <UART_SetConfig+0x4d6>
 8007882:	bf00      	nop
 8007884:	40011000 	.word	0x40011000
 8007888:	40011400 	.word	0x40011400
 800788c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007894:	2200      	movs	r2, #0
 8007896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800789a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800789e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078a2:	4642      	mov	r2, r8
 80078a4:	464b      	mov	r3, r9
 80078a6:	1891      	adds	r1, r2, r2
 80078a8:	6239      	str	r1, [r7, #32]
 80078aa:	415b      	adcs	r3, r3
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
 80078ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078b2:	4641      	mov	r1, r8
 80078b4:	1854      	adds	r4, r2, r1
 80078b6:	4649      	mov	r1, r9
 80078b8:	eb43 0501 	adc.w	r5, r3, r1
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	00eb      	lsls	r3, r5, #3
 80078c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ca:	00e2      	lsls	r2, r4, #3
 80078cc:	4614      	mov	r4, r2
 80078ce:	461d      	mov	r5, r3
 80078d0:	4643      	mov	r3, r8
 80078d2:	18e3      	adds	r3, r4, r3
 80078d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078d8:	464b      	mov	r3, r9
 80078da:	eb45 0303 	adc.w	r3, r5, r3
 80078de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078fe:	4629      	mov	r1, r5
 8007900:	008b      	lsls	r3, r1, #2
 8007902:	4621      	mov	r1, r4
 8007904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007908:	4621      	mov	r1, r4
 800790a:	008a      	lsls	r2, r1, #2
 800790c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007910:	f7f8 fc5a 	bl	80001c8 <__aeabi_uldivmod>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4b60      	ldr	r3, [pc, #384]	; (8007a9c <UART_SetConfig+0x4e4>)
 800791a:	fba3 2302 	umull	r2, r3, r3, r2
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	011c      	lsls	r4, r3, #4
 8007922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800792c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	1891      	adds	r1, r2, r2
 800793a:	61b9      	str	r1, [r7, #24]
 800793c:	415b      	adcs	r3, r3
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007944:	4641      	mov	r1, r8
 8007946:	1851      	adds	r1, r2, r1
 8007948:	6139      	str	r1, [r7, #16]
 800794a:	4649      	mov	r1, r9
 800794c:	414b      	adcs	r3, r1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800795c:	4659      	mov	r1, fp
 800795e:	00cb      	lsls	r3, r1, #3
 8007960:	4651      	mov	r1, sl
 8007962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007966:	4651      	mov	r1, sl
 8007968:	00ca      	lsls	r2, r1, #3
 800796a:	4610      	mov	r0, r2
 800796c:	4619      	mov	r1, r3
 800796e:	4603      	mov	r3, r0
 8007970:	4642      	mov	r2, r8
 8007972:	189b      	adds	r3, r3, r2
 8007974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007978:	464b      	mov	r3, r9
 800797a:	460a      	mov	r2, r1
 800797c:	eb42 0303 	adc.w	r3, r2, r3
 8007980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	67bb      	str	r3, [r7, #120]	; 0x78
 800798e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800799c:	4649      	mov	r1, r9
 800799e:	008b      	lsls	r3, r1, #2
 80079a0:	4641      	mov	r1, r8
 80079a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079a6:	4641      	mov	r1, r8
 80079a8:	008a      	lsls	r2, r1, #2
 80079aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079ae:	f7f8 fc0b 	bl	80001c8 <__aeabi_uldivmod>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4b39      	ldr	r3, [pc, #228]	; (8007a9c <UART_SetConfig+0x4e4>)
 80079b8:	fba3 1302 	umull	r1, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	2164      	movs	r1, #100	; 0x64
 80079c0:	fb01 f303 	mul.w	r3, r1, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	3332      	adds	r3, #50	; 0x32
 80079ca:	4a34      	ldr	r2, [pc, #208]	; (8007a9c <UART_SetConfig+0x4e4>)
 80079cc:	fba2 2303 	umull	r2, r3, r2, r3
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d6:	441c      	add	r4, r3
 80079d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079dc:	2200      	movs	r2, #0
 80079de:	673b      	str	r3, [r7, #112]	; 0x70
 80079e0:	677a      	str	r2, [r7, #116]	; 0x74
 80079e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079e6:	4642      	mov	r2, r8
 80079e8:	464b      	mov	r3, r9
 80079ea:	1891      	adds	r1, r2, r2
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	415b      	adcs	r3, r3
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079f6:	4641      	mov	r1, r8
 80079f8:	1851      	adds	r1, r2, r1
 80079fa:	6039      	str	r1, [r7, #0]
 80079fc:	4649      	mov	r1, r9
 80079fe:	414b      	adcs	r3, r1
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a0e:	4659      	mov	r1, fp
 8007a10:	00cb      	lsls	r3, r1, #3
 8007a12:	4651      	mov	r1, sl
 8007a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a18:	4651      	mov	r1, sl
 8007a1a:	00ca      	lsls	r2, r1, #3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4603      	mov	r3, r0
 8007a22:	4642      	mov	r2, r8
 8007a24:	189b      	adds	r3, r3, r2
 8007a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a28:	464b      	mov	r3, r9
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	eb42 0303 	adc.w	r3, r2, r3
 8007a30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8007a3c:	667a      	str	r2, [r7, #100]	; 0x64
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	008b      	lsls	r3, r1, #2
 8007a4e:	4641      	mov	r1, r8
 8007a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a54:	4641      	mov	r1, r8
 8007a56:	008a      	lsls	r2, r1, #2
 8007a58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a5c:	f7f8 fbb4 	bl	80001c8 <__aeabi_uldivmod>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <UART_SetConfig+0x4e4>)
 8007a66:	fba3 1302 	umull	r1, r3, r3, r2
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	2164      	movs	r1, #100	; 0x64
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	3332      	adds	r3, #50	; 0x32
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <UART_SetConfig+0x4e4>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4422      	add	r2, r4
 8007a8c:	609a      	str	r2, [r3, #8]
}
 8007a8e:	bf00      	nop
 8007a90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a94:	46bd      	mov	sp, r7
 8007a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a9a:	bf00      	nop
 8007a9c:	51eb851f 	.word	0x51eb851f

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	; (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	; (8007adc <__libc_init_array+0x3c>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	2600      	movs	r6, #0
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	; (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	4c0c      	ldr	r4, [pc, #48]	; (8007ae4 <__libc_init_array+0x44>)
 8007ab4:	f000 f87c 	bl	8007bb0 <_init>
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	2600      	movs	r6, #0
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	4798      	blx	r3
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	4798      	blx	r3
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	08009c5c 	.word	0x08009c5c
 8007adc:	08009c5c 	.word	0x08009c5c
 8007ae0:	08009c5c 	.word	0x08009c5c
 8007ae4:	08009c60 	.word	0x08009c60

08007ae8 <__itoa>:
 8007ae8:	1e93      	subs	r3, r2, #2
 8007aea:	2b22      	cmp	r3, #34	; 0x22
 8007aec:	b510      	push	{r4, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	d904      	bls.n	8007afc <__itoa+0x14>
 8007af2:	2300      	movs	r3, #0
 8007af4:	700b      	strb	r3, [r1, #0]
 8007af6:	461c      	mov	r4, r3
 8007af8:	4620      	mov	r0, r4
 8007afa:	bd10      	pop	{r4, pc}
 8007afc:	2a0a      	cmp	r2, #10
 8007afe:	d109      	bne.n	8007b14 <__itoa+0x2c>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	da07      	bge.n	8007b14 <__itoa+0x2c>
 8007b04:	232d      	movs	r3, #45	; 0x2d
 8007b06:	700b      	strb	r3, [r1, #0]
 8007b08:	4240      	negs	r0, r0
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	4421      	add	r1, r4
 8007b0e:	f000 f80d 	bl	8007b2c <__utoa>
 8007b12:	e7f1      	b.n	8007af8 <__itoa+0x10>
 8007b14:	2100      	movs	r1, #0
 8007b16:	e7f9      	b.n	8007b0c <__itoa+0x24>

08007b18 <itoa>:
 8007b18:	f7ff bfe6 	b.w	8007ae8 <__itoa>

08007b1c <memset>:
 8007b1c:	4402      	add	r2, r0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d100      	bne.n	8007b26 <memset+0xa>
 8007b24:	4770      	bx	lr
 8007b26:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2a:	e7f9      	b.n	8007b20 <memset+0x4>

08007b2c <__utoa>:
 8007b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b2e:	4c1f      	ldr	r4, [pc, #124]	; (8007bac <__utoa+0x80>)
 8007b30:	b08b      	sub	sp, #44	; 0x2c
 8007b32:	4605      	mov	r5, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	466e      	mov	r6, sp
 8007b38:	f104 0c20 	add.w	ip, r4, #32
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	6861      	ldr	r1, [r4, #4]
 8007b40:	4637      	mov	r7, r6
 8007b42:	c703      	stmia	r7!, {r0, r1}
 8007b44:	3408      	adds	r4, #8
 8007b46:	4564      	cmp	r4, ip
 8007b48:	463e      	mov	r6, r7
 8007b4a:	d1f7      	bne.n	8007b3c <__utoa+0x10>
 8007b4c:	7921      	ldrb	r1, [r4, #4]
 8007b4e:	7139      	strb	r1, [r7, #4]
 8007b50:	1e91      	subs	r1, r2, #2
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	6038      	str	r0, [r7, #0]
 8007b56:	2922      	cmp	r1, #34	; 0x22
 8007b58:	f04f 0100 	mov.w	r1, #0
 8007b5c:	d904      	bls.n	8007b68 <__utoa+0x3c>
 8007b5e:	7019      	strb	r1, [r3, #0]
 8007b60:	460b      	mov	r3, r1
 8007b62:	4618      	mov	r0, r3
 8007b64:	b00b      	add	sp, #44	; 0x2c
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b68:	1e58      	subs	r0, r3, #1
 8007b6a:	4684      	mov	ip, r0
 8007b6c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007b70:	fb02 5617 	mls	r6, r2, r7, r5
 8007b74:	3628      	adds	r6, #40	; 0x28
 8007b76:	446e      	add	r6, sp
 8007b78:	460c      	mov	r4, r1
 8007b7a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007b7e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007b82:	462e      	mov	r6, r5
 8007b84:	42b2      	cmp	r2, r6
 8007b86:	f101 0101 	add.w	r1, r1, #1
 8007b8a:	463d      	mov	r5, r7
 8007b8c:	d9ee      	bls.n	8007b6c <__utoa+0x40>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	545a      	strb	r2, [r3, r1]
 8007b92:	1919      	adds	r1, r3, r4
 8007b94:	1aa5      	subs	r5, r4, r2
 8007b96:	42aa      	cmp	r2, r5
 8007b98:	dae3      	bge.n	8007b62 <__utoa+0x36>
 8007b9a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007b9e:	780e      	ldrb	r6, [r1, #0]
 8007ba0:	7006      	strb	r6, [r0, #0]
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	f801 5901 	strb.w	r5, [r1], #-1
 8007ba8:	e7f4      	b.n	8007b94 <__utoa+0x68>
 8007baa:	bf00      	nop
 8007bac:	08009c2c 	.word	0x08009c2c

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
